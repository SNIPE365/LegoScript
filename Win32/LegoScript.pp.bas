#cmdline "-pp"




type va_list as cva_list





extern "C"

const MINGW_HAS_SECURE_API = 1
const __MINGW64_VERSION_MAJOR = 4
const __MINGW64_VERSION_MINOR = 0
const __MINGW64_VERSION_RC = 0
const __MINGW32_MAJOR_VERSION = 3
const __MINGW32_MINOR_VERSION = 11


const __MINGW_USE_UNDERSCORE_PREFIX = 1
const __MINGW_HAVE_ANSI_C99_PRINTF = 1
const __MINGW_HAVE_WIDE_C99_PRINTF = 1
const __MINGW_HAVE_ANSI_C99_SCANF = 1
const __MINGW_HAVE_WIDE_C99_SCANF = 1
type __LONG32 as long
const __USE_CRTIMP = 1
const USE___UUIDOF = 0
const __MSVCRT_VERSION__ = &h0700
 const _WIN32_WINNT = &h0502
 const WINVER = _WIN32_WINNT

type __int8 as byte
type __int16 as short
type __int32 as long
type __int64 as longint

const __STDC_SECURE_LIB__ = 200411
const __GOT_SECURE_LIB__ = __STDC_SECURE_LIB__
const __MINGW_HAS_DXSDK = 1
const MINGW_HAS_DDRAW_H = 1
const MINGW_DDRAW_VERSION = 7
const MINGW_HAS_DDK_H = 1
const _SECURECRT_FILL_BUFFER_PATTERN = &hFD
const _ARGMAX = 100
const _TRUNCATE = cuint(-1)
declare function __mingw_get_crt_info() as const zstring ptr

end extern


const WINAPI_PARTITION_DESKTOP = &h1
const WINAPI_PARTITION_APP = &h2
const WINAPI_FAMILY_APP = WINAPI_PARTITION_APP
const WINAPI_FAMILY_DESKTOP_APP = WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_APP
const WINAPI_FAMILY = WINAPI_FAMILY_DESKTOP_APP


extern "Windows"


type PULONG as ULONG ptr
type PUSHORT as USHORT ptr
type UCHAR as ubyte
type PUCHAR as UCHAR ptr
type PSZ as zstring ptr

const MAX_PATH = 260
 const NULL = 0
 const CTRUE = 1

type WINBOOL as long
type BOOL as long
type PBOOL as WINBOOL ptr
type LPBOOL as WINBOOL ptr
type WORD as ushort
type DWORD as ulong
type FLOAT as single
type PFLOAT as FLOAT ptr
type PBYTE as UBYTE ptr
type LPBYTE as UBYTE ptr
type PINT as long ptr
type LPINT as long ptr
type PWORD as WORD ptr
type LPWORD as WORD ptr
type LPLONG as long ptr
type PDWORD as DWORD ptr
type LPDWORD as DWORD ptr
type LPVOID as any ptr
type LPCVOID as const any ptr
type INT_ as long
type UINT as ulong
type PUINT as ulong ptr
type WPARAM as UINT_PTR
type LPARAM as LONG_PTR
type LRESULT as LONG_PTR


type SPHANDLE as HANDLE ptr
type LPHANDLE as HANDLE ptr
type HGLOBAL as HANDLE
type HLOCAL as HANDLE
type GLOBALHANDLE as HANDLE
type LOCALHANDLE as HANDLE

end extern






 type POINTER_64_INT as ulong


type INT8 as byte
type PINT8 as byte ptr
type INT16 as short
type PINT16 as short ptr
type INT32 as long
type PINT32 as long ptr
type INT64 as longint
type PINT64 as longint ptr
type UINT8 as ubyte
type PUINT8 as ubyte ptr
type UINT16 as ushort
type PUINT16 as ushort ptr
type UINT32 as ulong
type PUINT32 as ulong ptr
type UINT64 as ulongint
type PUINT64 as ulongint ptr
type LONG32 as long
type PLONG32 as long ptr
type ULONG32 as ulong
type PULONG32 as ulong ptr
type DWORD32 as ulong
type PDWORD32 as ulong ptr

 type INT_PTR as long
 type PINT_PTR as long ptr
 type UINT_PTR as ulong
 type PUINT_PTR as ulong ptr
 type LONG_PTR as long
 type PLONG_PTR as long ptr
 type ULONG_PTR as ulong
 type PULONG_PTR as ulong ptr
 type __int3264 as long
 const ADDRESS_TAG_BIT = &h80000000
 type UHALF_PTR as ushort
 type PUHALF_PTR as ushort ptr
 type HALF_PTR as short
 type PHALF_PTR as short ptr
 type SHANDLE_PTR as long
 type HANDLE_PTR as ulong


const MAXUINT_PTR = not cast(UINT_PTR, 0)
const MAXINT_PTR = cast(INT_PTR, MAXUINT_PTR shr 1)
const MININT_PTR = not MAXINT_PTR
const MAXULONG_PTR = not cast(ULONG_PTR, 0)
const MAXLONG_PTR = cast(LONG_PTR, MAXULONG_PTR shr 1)
const MINLONG_PTR = not MAXLONG_PTR
const MAXUHALF_PTR = cast(UHALF_PTR, not 0)
const MAXHALF_PTR = cast(HALF_PTR, MAXUHALF_PTR shr 1)
const MINHALF_PTR = not MAXHALF_PTR

type SIZE_T_ as ULONG_PTR
type PSIZE_T as ULONG_PTR ptr
type SSIZE_T_ as LONG_PTR
type PSSIZE_T as LONG_PTR ptr


type DWORD_PTR as ULONG_PTR
type PDWORD_PTR as ULONG_PTR ptr
type LONG64 as longint
type PLONG64 as longint ptr
type ULONG64 as ulongint
type PULONG64 as ulongint ptr
type DWORD64 as ulongint
type PDWORD64 as ulongint ptr
type KAFFINITY as ULONG_PTR
type PKAFFINITY as KAFFINITY ptr

extern "Windows"

 type FARPROC as function() as long
 type NEARPROC as function() as long
 type PROC as function() as long

type ATOM as WORD
type HFILE as long

type HINSTANCE__
 unused as long
end type

type HINSTANCE as HINSTANCE__ ptr

type HKEY__
 unused as long
end type

type HKEY as HKEY__ ptr
type PHKEY as HKEY ptr

type HKL__
 unused as long
end type

type HKL as HKL__ ptr

type HLSURF__
 unused as long
end type

type HLSURF as HLSURF__ ptr

type HMETAFILE__
 unused as long
end type

type HMETAFILE as HMETAFILE__ ptr
type HMODULE as HINSTANCE

type HRGN__
 unused as long
end type

type HRGN as HRGN__ ptr

type HRSRC__
 unused as long
end type

type HRSRC as HRSRC__ ptr

type HSPRITE__
 unused as long
end type

type HSPRITE as HSPRITE__ ptr

type HSTR__
 unused as long
end type

type HSTR as HSTR__ ptr

type HTASK__
 unused as long
end type

type HTASK as HTASK__ ptr

type HWINSTA__
 unused as long
end type

type HWINSTA as HWINSTA__ ptr

type _FILETIME
 dwLowDateTime as DWORD
 dwHighDateTime as DWORD
end type

type FILETIME as _FILETIME
type PFILETIME as _FILETIME ptr
type LPFILETIME as _FILETIME ptr

type HWND__
 unused as long
end type

type HWND as HWND__ ptr

type HHOOK__
 unused as long
end type

type HHOOK as HHOOK__ ptr
type HGDIOBJ as any ptr

type HACCEL__
 unused as long
end type

type HACCEL as HACCEL__ ptr

type HBITMAP__
 unused as long
end type

type HBITMAP as HBITMAP__ ptr

type HBRUSH__
 unused as long
end type

type HBRUSH as HBRUSH__ ptr

type HCOLORSPACE__
 unused as long
end type

type HCOLORSPACE as HCOLORSPACE__ ptr

type HDC__
 unused as long
end type

type HDC as HDC__ ptr

type HGLRC__
 unused as long
end type

type HGLRC as HGLRC__ ptr

type HDESK__
 unused as long
end type

type HDESK as HDESK__ ptr

type HENHMETAFILE__
 unused as long
end type

type HENHMETAFILE as HENHMETAFILE__ ptr

type HFONT__
 unused as long
end type

type HFONT as HFONT__ ptr

type HICON__
 unused as long
end type

type HICON as HICON__ ptr

type HMENU__
 unused as long
end type

type HMENU as HMENU__ ptr

type HPALETTE__
 unused as long
end type

type HPALETTE as HPALETTE__ ptr

type HPEN__
 unused as long
end type

type HPEN as HPEN__ ptr

type HMONITOR__
 unused as long
end type

type HMONITOR as HMONITOR__ ptr

type HWINEVENTHOOK__
 unused as long
end type

type HWINEVENTHOOK as HWINEVENTHOOK__ ptr
type HCURSOR as HICON
type COLORREF as DWORD

type HUMPD__
 unused as long
end type

type HUMPD as HUMPD__ ptr
type LPCOLORREF as DWORD ptr
const HFILE_ERROR = cast(HFILE, -1)

type tagRECT
 left as LONG
 top as LONG
 right as LONG
 bottom as LONG
end type

type RECT as tagRECT
type PRECT as tagRECT ptr
type NPRECT as tagRECT ptr
type LPRECT as tagRECT ptr
type LPCRECT as const RECT ptr

type _RECTL
 left as LONG
 top as LONG
 right as LONG
 bottom as LONG
end type

type RECTL as _RECTL
type PRECTL as _RECTL ptr
type LPRECTL as _RECTL ptr
type LPCRECTL as const RECTL ptr

type tagPOINT
 x as LONG
 y as LONG
end type

type POINT as tagPOINT
type PPOINT as tagPOINT ptr
type NPPOINT as tagPOINT ptr
type LPPOINT as tagPOINT ptr

type _POINTL
 x as LONG
 y as LONG
end type

type POINTL as _POINTL
type PPOINTL as _POINTL ptr

type tagSIZE
 cx as LONG
 cy as LONG
end type

type SIZE as tagSIZE
type PSIZE as tagSIZE ptr
type LPSIZE as tagSIZE ptr
type SIZEL as SIZE
type PSIZEL as SIZE ptr
type LPSIZEL as SIZE ptr

type tagPOINTS
 x as SHORT
 y as SHORT
end type

type POINTS as tagPOINTS
type PPOINTS as tagPOINTS ptr
type LPPOINTS as tagPOINTS ptr

const DM_UPDATE = 1
const DM_COPY = 2
const DM_PROMPT = 4
const DM_MODIFY = 8
const DC_FIELDS = 1
const DC_PAPERS = 2
const DC_PAPERSIZE = 3
const DC_MINEXTENT = 4
const DC_MAXEXTENT = 5
const DC_BINS = 6
const DC_DUPLEX = 7
const DC_SIZE = 8
const DC_EXTRA = 9
const DC_VERSION = 10
const DC_DRIVER = 11
const DC_BINNAMES = 12
const DC_ENUMRESOLUTIONS = 13
const DC_FILEDEPENDENCIES = 14
const DC_TRUETYPE = 15
const DC_PAPERNAMES = 16
const DC_ORIENTATION = 17
const DC_COPIES = 18

end extern





type ptrdiff_t as integer

 type size_t as uinteger
 type ssize_t as integer

 type wchar_t as ushort

 type wint_t as wchar_t



extern "C"

declare function memchr (byval as const any ptr, byval as long, byval as size_t) as any ptr
declare function memcmp (byval as const any ptr, byval as const any ptr, byval as size_t) as long
declare function memcpy (byval as any ptr, byval as const any ptr, byval as size_t) as any ptr
declare function memmove (byval as any ptr, byval as const any ptr, byval as size_t) as any ptr
declare function memset (byval as any ptr, byval as long, byval as size_t) as any ptr

end extern


 const _INC_CRT_UNICODE_MACROS = 2




type wctype_t as wchar_t

extern "c"
declare function iswalnum (byval as wint_t) as long
declare function iswalpha (byval as wint_t) as long
declare function iswascii (byval as wint_t) as long
declare function iswcntrl (byval as wint_t) as long
declare function iswctype (byval as wint_t, byval as wctype_t) as long
declare function is_wctype (byval as wint_t, byval as wctype_t) as long
declare function iswdigit (byval as wint_t) as long
declare function iswgraph (byval as wint_t) as long
declare function iswlower (byval as wint_t) as long
declare function iswprint (byval as wint_t) as long
declare function iswpunct (byval as wint_t) as long
declare function iswspace (byval as wint_t) as long
declare function iswupper (byval as wint_t) as long
declare function iswxdigit (byval as wint_t) as long
declare function towlower (byval as wchar_t) as wchar_t
declare function towupper (byval as wchar_t) as wchar_t
declare function isleadbyte (byval as long) as long
declare function _isctype (byval as long, byval as long) as long
declare function _tolower (byval as long) as long
declare function _toupper (byval as long) as long
declare function __isascii (byval as long) as long
declare function __toascii (byval as long) as long
declare function __iscsymf (byval as long) as long
declare function __iscsym (byval as long) as long
end extern

extern import _ctype alias "_ctype" as ushort ptr ptr
extern import _pctype alias "_pctype" as ushort ptr ptr


extern "C"

declare function isalnum (byval as long) as long
declare function isalpha (byval as long) as long
declare function iscntrl (byval as long) as long
declare function isdigit (byval as long) as long
declare function isgraph (byval as long) as long
declare function islower (byval as long) as long
declare function isprint (byval as long) as long
declare function ispunct (byval as long) as long
declare function isspace (byval as long) as long
declare function isupper (byval as long) as long
declare function isxdigit (byval as long) as long
declare function tolower (byval as long) as long
declare function toupper (byval as long) as long
declare function isascii (byval as long) as long
declare function toascii (byval as long) as long

end extern




const API_SET_SCHEMA_VERSION = 2
const API_SET_LOAD_SCHEMA_ORDINAL = 1
const API_SET_LOOKUP_ORDINAL = 2
const API_SET_RELEASE_SCHEMA_ORDINAL = 3








enum
 __LC_CTYPE = 0
 __LC_NUMERIC = 1
 __LC_TIME = 2
 __LC_COLLATE = 3
 __LC_MONETARY = 4
 __LC_MESSAGES = 5
 __LC_ALL = 6
 __LC_PAPER = 7
 __LC_NAME = 8
 __LC_ADDRESS = 9
 __LC_TELEPHONE = 10
 __LC_MEASUREMENT = 11
 __LC_IDENTIFICATION = 12
end enum




type lconv

 decimal_point as zstring ptr
 thousands_sep as zstring ptr
 grouping as zstring ptr


 int_curr_symbol as zstring ptr
 currency_symbol as zstring ptr
 mon_decimal_point as zstring ptr
 mon_thousands_sep as zstring ptr
 mon_grouping as zstring ptr
 positive_sign as zstring ptr
 negative_sign as zstring ptr
 int_frac_digits as ubyte
 frac_digits as ubyte
 p_cs_precedes as ubyte
 p_sep_by_space as ubyte
 n_cs_precedes as ubyte
 n_sep_by_space as ubyte
 p_sign_posn as ubyte
 n_sign_posn as ubyte
 int_p_cs_precedes as ubyte
 int_p_sep_by_space as ubyte
 int_n_cs_precedes as ubyte
 int_n_sep_by_space as ubyte
 int_p_sign_posn as ubyte
 int_n_sign_posn as ubyte
end type

extern "C"

declare function setlocale (byval __category as long, byval __locale as const zstring ptr) as zstring ptr

declare function localeconv () as lconv ptr

end extern



type rsize_t as uinteger

type pthreadlocinfo as threadlocaleinfostruct ptr
type pthreadmbcinfo as threadmbcinfostruct ptr

type localeinfo_struct
 locinfo as pthreadlocinfo
 mbcinfo as pthreadmbcinfo
end type

type _locale_tstruct as localeinfo_struct
type _locale_t as localeinfo_struct ptr

type tagLC_ID
 wLanguage as ushort
 wCountry as ushort
 wCodePage as ushort
end type

type LC_ID as tagLC_ID
type LPLC_ID as tagLC_ID ptr

type threadlocaleinfostruct_lc_category
 locale as zstring ptr
 wlocale as wstring ptr
 refcount as long ptr
 wrefcount as long ptr
end type

type __lc_time_data as __lc_time_data_

type threadlocaleinfostruct
 refcount as long
 lc_codepage as ulong
 lc_collate_cp as ulong
 lc_handle(0 to 5) as ulong
 lc_id(0 to 5) as LC_ID
 lc_category(0 to 5) as threadlocaleinfostruct_lc_category
 lc_clike as long
 mb_cur_max as long
 lconv_intl_refcount as long ptr
 lconv_num_refcount as long ptr
 lconv_mon_refcount as long ptr
 lconv as lconv ptr
 ctype1_refcount as long ptr
 ctype1 as ushort ptr
 pctype as const ushort ptr
 pclmap as const ubyte ptr
 pcumap as const ubyte ptr
 lc_time_curr as __lc_time_data ptr
end type

type threadlocinfo as threadlocaleinfostruct



 type jmp_buf
 __opaque(0 to 16-1) as long
 end type


extern "C"

declare function setjmp alias "_setjmp" (byval as jmp_buf ptr) as long

declare sub longjmp (byval as jmp_buf ptr, byval as long)

end extern



 type clong as long
 type culong as ulong




extern "c"
extern import _argc alias "_argc" as long
extern import _argv alias "_argv" as byte ptr ptr
extern import __mbcur_max alias "__mbcur_max" as long ptr
extern import __sys_nerr alias "_sys_nerr" as long ptr
extern import sys_errlist alias "sys_errlist" as byte ptr ptr ptr
extern import _fmode alias "_fmode" as long ptr

type _onexit_t as function() as long

declare function __p___argc () as long ptr
declare function __p___argv () as byte ptr ptr ptr
declare function __p___wargv () as wchar_t ptr ptr ptr
declare function __doserrno () as culong ptr
declare function __p__environ () as byte ptr ptr ptr
declare function __p__wenviron () as wchar_t ptr ptr ptr
declare function __p__osver () as uinteger ptr
declare function __p__winver () as uinteger ptr
declare function __p__winmajor () as uinteger ptr
declare function __p__winminor () as uinteger ptr
declare function __p__pgmptr () as byte ptr ptr
declare function __p__wpgmptr () as wchar_t ptr ptr
declare function _wtoi (byval as wchar_t ptr) as long
declare function _wtol (byval as wchar_t ptr) as clong
declare sub _beep (byval as ulong, byval as ulong)
declare sub _seterrormode (byval as long)
declare sub _sleep (byval as culong)
declare sub _exit (byval as long)
declare function _onexit (byval as _onexit_t) as _onexit_t
declare function _putenv (byval as zstring ptr) as long
declare sub _searchenv (byval as zstring ptr, byval as zstring ptr, byval as zstring ptr)
declare function _ecvt (byval as double, byval as long, byval as long ptr, byval as long ptr) as zstring ptr
declare function _fcvt (byval as double, byval as long, byval as long ptr, byval as long ptr) as zstring ptr
declare function _gcvt (byval as double, byval as long, byval as zstring ptr) as zstring ptr
declare sub _makepath (byval as zstring ptr, byval as zstring ptr, byval as zstring ptr, byval as zstring ptr, byval as zstring ptr)
declare sub _splitpath (byval as zstring ptr, byval as zstring ptr, byval as zstring ptr, byval as zstring ptr, byval as zstring ptr)
declare function _fullpath (byval as zstring ptr, byval as zstring ptr, byval as size_t) as zstring ptr
declare function _itoa (byval as long, byval as zstring ptr, byval as long) as zstring ptr
declare function _ltoa (byval as clong, byval as zstring ptr, byval as long) as zstring ptr
declare function _ultoa (byval as culong, byval as zstring ptr, byval as long) as zstring ptr
declare function _itow (byval as long, byval as wchar_t ptr, byval as long) as wchar_t ptr
declare function _ltow (byval as clong, byval as wchar_t ptr, byval as long) as wchar_t ptr
declare function _ultow (byval as culong, byval as wchar_t ptr, byval as long) as wchar_t ptr
declare function _atoi64 (byval as zstring ptr) as longint
declare function _i64toa (byval as longint, byval as zstring ptr, byval as long) as zstring ptr
declare function _ui64toa (byval as ulongint, byval as zstring ptr, byval as long) as zstring ptr
declare function _wtoi64 (byval as wchar_t ptr) as longint
declare function _i64tow (byval as longint, byval as wchar_t ptr, byval as long) as wchar_t ptr
declare function _ui64tow (byval as ulongint, byval as wchar_t ptr, byval as long) as wchar_t ptr
declare function _wgetenv (byval as wchar_t ptr) as wchar_t ptr
declare function _wputenv (byval as wchar_t ptr) as long
declare sub _wsearchenv (byval as wchar_t ptr, byval as wchar_t ptr, byval as wchar_t ptr)
declare sub _wmakepath (byval as wchar_t ptr, byval as wchar_t ptr, byval as wchar_t ptr, byval as wchar_t ptr, byval as wchar_t ptr)
declare sub _wsplitpath (byval as wchar_t ptr, byval as wchar_t ptr, byval as wchar_t ptr, byval as wchar_t ptr, byval as wchar_t ptr)
declare function _wfullpath (byval as wchar_t ptr, byval as wchar_t ptr, byval as size_t) as wchar_t ptr
declare function _rotl (byval as ulong, byval as long) as ulong
declare function _rotr (byval as ulong, byval as long) as ulong
declare function _lrotl (byval as uinteger, byval as long) as uinteger
declare function _lrotr (byval as uinteger, byval as long) as uinteger
end extern


type div_t
 quot as long
 rem_ as long
end type

type ldiv_t
 quot as clong
 rem_ as clong
end type

type lldiv_t
 quot as longint
 rem_ as longint
end type

extern "c"
declare sub exit_ alias "exit" (byval as long)
declare function system_ alias "system" (byval as zstring ptr) as long
declare function abs_ alias "abs" (byval as long) as long
declare function atof (byval as const zstring ptr) as double
declare function atoi (byval as const zstring ptr) as long
declare function atol (byval as const zstring ptr) as clong
declare function strtod (byval as const zstring ptr, byval as byte ptr ptr) as double
declare function strtof (byval as const zstring ptr, byval as byte ptr ptr) as single
declare function strtold (byval as const zstring ptr, byval as byte ptr ptr) as double
declare function strtol (byval as const zstring ptr, byval as byte ptr ptr, byval as long) as clong
declare function strtoul (byval as const zstring ptr, byval as byte ptr ptr, byval as long) as culong
declare function wcstod (byval as const wchar_t ptr, byval as wchar_t ptr ptr) as double
declare function wcstof (byval as const wchar_t ptr, byval as wchar_t ptr ptr) as single
declare function wcstold (byval as const wchar_t ptr, byval as wchar_t ptr ptr) as double
declare function wcstol (byval as const wchar_t ptr, byval as wchar_t ptr ptr, byval as long) as clong
declare function wcstoul (byval as const wchar_t ptr, byval as wchar_t ptr ptr, byval as long) as culong
declare function wcstombs (byval as zstring ptr, byval as const wchar_t ptr, byval as size_t) as size_t
declare function wctomb (byval as zstring ptr, byval as wchar_t) as long
declare function mblen (byval as const zstring ptr, byval as size_t) as long
declare function mbstowcs (byval as const wchar_t ptr, byval as const zstring ptr, byval as size_t) as size_t
declare function mbtowc (byval as const wchar_t ptr, byval as zstring ptr, byval as size_t) as long
declare function rand () as long
declare sub srand (byval as ulong)
declare function calloc (byval as size_t, byval as size_t) as any ptr
declare function malloc (byval as size_t) as any ptr
declare function realloc (byval as any ptr, byval as size_t) as any ptr
declare sub free (byval as any ptr)
declare sub abort ()
declare function atexit (byval as sub cdecl()) as long
declare function getenv (byval as const zstring ptr) as zstring ptr
declare function bsearch (byval as const any ptr, byval as const any ptr, byval as size_t, byval as size_t, byval as function(byval as const any ptr, byval as const any ptr) as long) as any ptr
declare sub qsort (byval as any ptr, byval as size_t, byval as size_t, byval as function(byval as const any ptr, byval as const any ptr) as long)
declare function labs (byval as clong) as clong
declare function div (byval as long, byval as long) as div_t
declare function ldiv (byval as clong, byval as clong) as ldiv_t
declare function lldiv (byval as longint, byval as longint) as lldiv_t
declare function llabs (byval as longint) as longint
declare function strtoll (byval as const zstring ptr, byval as byte ptr ptr, byval as long) as longint
declare function strtoull (byval as const zstring ptr, byval as byte ptr ptr, byval as long) as ulongint
declare function atoll (byval as const zstring ptr) as longint
declare function wtoll (byval as const wchar_t ptr) as longint
declare function lltoa (byval as longint, byval as zstring ptr, byval as long) as zstring ptr
declare function ulltoa (byval as ulongint, byval as zstring ptr, byval as long) as zstring ptr
declare function lltow (byval as longint, byval as wchar_t ptr, byval as long) as wchar_t ptr
declare function ulltow (byval as ulongint, byval as wchar_t ptr, byval as long) as wchar_t ptr
end extern



extern "C"

 declare function _errno() as long ptr

end extern



extern "C"



declare function _InterlockedIncrement16(byval Addend as short ptr) as short
declare function _InterlockedDecrement16(byval Addend as short ptr) as short
declare function _InterlockedCompareExchange16(byval Destination as short ptr, byval ExChange as short, byval Comperand as short) as short
declare function _InterlockedExchangeAdd(byval Addend as long ptr, byval Value as long) as long
declare function _InterlockedCompareExchange(byval Destination as long ptr, byval ExChange as long, byval Comperand as long) as long
declare function _InterlockedIncrement(byval Addend as long ptr) as long
declare function _InterlockedDecrement(byval Addend as long ptr) as long
declare function _InterlockedExchange(byval Target as long ptr, byval Value as long) as long
declare function _InterlockedCompareExchange64(byval Destination as longint ptr, byval ExChange as longint, byval Comperand as longint) as longint
declare function _InterlockedCompareExchangePointer(byval Destination as any ptr ptr, byval ExChange as any ptr, byval Comperand as any ptr) as any ptr
declare function _InterlockedExchangePointer(byval Target as any ptr ptr, byval Value as any ptr) as any ptr
declare sub __int2c()
declare sub __stosb(byval Dest as ubyte ptr, byval Data as ubyte, byval Count as uinteger)
declare sub __stosw(byval Dest as ushort ptr, byval Data as ushort, byval Count as uinteger)
declare sub __stosd(byval Dest as ulong ptr, byval Data as ulong, byval Count as uinteger)
declare function _interlockedbittestandset(byval Base as long ptr, byval Offset as long) as ubyte
declare function _interlockedbittestandreset(byval Base as long ptr, byval Offset as long) as ubyte
declare function _interlockedbittestandcomplement(byval Base as long ptr, byval Offset as long) as ubyte
declare function InterlockedBitTestAndSet(byval Base as long ptr, byval Offset as long) as ubyte
declare function InterlockedBitTestAndReset(byval Base as long ptr, byval Offset as long) as ubyte
declare function InterlockedBitTestAndComplement(byval Base as long ptr, byval Offset as long) as ubyte
declare function _BitScanForward(byval Index as ulong ptr, byval Mask as ulong) as ubyte
declare function _BitScanReverse(byval Index as ulong ptr, byval Mask as ulong) as ubyte
declare function _bittest(byval a as const long ptr, byval b as long) as ubyte
declare function _bittestandset(byval a as long ptr, byval b as long) as ubyte
declare function _bittestandreset(byval a as long ptr, byval b as long) as ubyte
declare function _bittestandcomplement(byval a as long ptr, byval b as long) as ubyte
declare sub __movsb(byval Destination as ubyte ptr, byval Source as const ubyte ptr, byval Count as uinteger)
declare sub __movsw(byval Dest as ushort ptr, byval Source as const ushort ptr, byval Count as uinteger)
declare sub __movsd(byval Dest as ulong ptr, byval Source as const ulong ptr, byval Count as uinteger)

 declare function __readfsbyte(byval Offset as ulong) as ubyte
 declare function __readfsword(byval Offset as ulong) as ushort
 declare function __readfsdword(byval Offset as ulong) as ulong
 declare sub __writefsbyte(byval Offset as ulong, byval Data as ubyte)
 declare sub __writefsword(byval Offset as ulong, byval Data as ushort)
 declare sub __writefsdword(byval Offset as ulong, byval Data as ulong)



declare function __inbyte(byval Port as ushort) as ubyte
declare function __inword(byval Port as ushort) as ushort
declare function __indword(byval Port as ushort) as ulong
declare sub __outbyte(byval Port as ushort, byval Data_ as ubyte)
declare sub __outword(byval Port as ushort, byval Data_ as ushort)
declare sub __outdword(byval Port as ushort, byval Data_ as ulong)
declare sub __inbytestring(byval Port as ushort, byval Buffer as ubyte ptr, byval Count as ulong)
declare sub __inwordstring(byval Port as ushort, byval Buffer as ushort ptr, byval Count as ulong)
declare sub __indwordstring(byval Port as ushort, byval Buffer as ulong ptr, byval Count as ulong)
declare sub __outbytestring(byval Port as ushort, byval Buffer as ubyte ptr, byval Count as ulong)
declare sub __outwordstring(byval Port as ushort, byval Buffer as ushort ptr, byval Count as ulong)
declare sub __outdwordstring(byval Port as ushort, byval Buffer as ulong ptr, byval Count as ulong)
declare sub __cpuid(byval CPUInfo as long ptr, byval InfoType as long)
declare function __readmsr(byval as ulong) as ulongint
declare sub __writemsr(byval as ulong, byval as ulongint)

 declare function __readcr0() as ulong
 declare function __readcr2() as ulong
 declare function __readcr3() as ulong
 declare function __readcr4() as ulong
 declare function __readcr8() as ulong
 declare sub __writecr0(byval as ulong)
 declare sub __writecr3(byval as ulong)
 declare sub __writecr4(byval as ulong)
 declare sub __writecr8(byval as ulong)


declare function __builtin_ia32_crc32qi(byval as ulong, byval as ubyte) as ulong
declare function __builtin_ia32_crc32hi(byval as ulong, byval as ushort) as ulong
declare function __builtin_ia32_crc32si(byval as ulong, byval as ulong) as ulong
declare sub _disable()
declare function __emul(byval as long, byval as long) as longint
declare function __emulu(byval as ulong, byval as ulong) as ulongint
declare sub _enable()

 declare function _InterlockedOr8(byval as zstring ptr, byval as byte) as byte
 declare function _InterlockedOr16(byval as short ptr, byval as short) as short
 declare function _InterlockedXor8(byval as zstring ptr, byval as byte) as byte
 declare function _InterlockedXor16(byval as short ptr, byval as short) as short
 declare function _InterlockedAnd8(byval as zstring ptr, byval as byte) as byte
 declare function _InterlockedAnd16(byval as short ptr, byval as short) as short
 declare function _InterlockedAddLargeStatistic(byval as longint ptr, byval as long) as long

declare function _inp(byval as ushort) as long
declare function inp_ alias "inp"(byval as ushort) as long
declare function _inpd(byval as ushort) as ulong
declare function inpd(byval as ushort) as ulong
declare function _inpw(byval as ushort) as ushort
declare function inpw(byval as ushort) as ushort
declare function __ll_lshift(byval as ulongint, byval as long) as ulongint
declare function __ll_rshift(byval as longint, byval as long) as longint
declare function _outp(byval as ushort, byval as long) as long
declare function outp(byval as ushort, byval as long) as long
declare function _outpd(byval as ushort, byval as ulong) as ulong
declare function outpd(byval as ushort, byval as ulong) as ulong
declare function _outpw(byval as ushort, byval as ushort) as ushort
declare function outpw(byval as ushort, byval as ushort) as ushort
declare function _ReturnAddress() as any ptr


declare function __ull_rshift(byval as ulongint, byval as long) as ulongint
declare function _AddressOfReturnAddress() as any ptr
declare sub __wbinvd()
declare sub __invlpg(byval as any ptr)

 declare function __getcallerseflags() as ulong

declare function __readpmc(byval a as ulong) as ulongint

 declare function __segmentlimit(byval a as ulong) as ulong
 declare function _rotr8(byval value as ubyte, byval shift as ubyte) as ubyte
 declare function _rotr16(byval value as ushort, byval shift as ubyte) as ushort
 declare function _rotl8(byval value as ubyte, byval shift as ubyte) as ubyte
 declare function _rotl16(byval value as ushort, byval shift as ubyte) as ushort

declare sub __nvreg_save_fence()
declare sub __nvreg_restore_fence()


end extern




type _GUID
 Data1 as ulong
 Data2 as ushort
 Data3 as ushort
 Data4(0 to 7) as ubyte
end type

type GUID as _GUID
type LPGUID as GUID ptr
type LPCGUID as const GUID ptr
type IID as GUID
type LPIID as IID ptr
type CLSID as GUID
type LPCLSID as CLSID ptr
type FMTID as GUID
type LPFMTID as FMTID ptr
type REFGUID as const GUID const ptr
type REFIID as const IID const ptr
type REFCLSID as const IID const ptr
type REFFMTID as const IID const ptr



extern "Windows"

const ANYSIZE_ARRAY = 1

 const MEMORY_ALLOCATION_ALIGNMENT = 8

const SYSTEM_CACHE_ALIGNMENT_SIZE = 64
const PRAGMA_DEPRECATED_DDK = 0
type PVOID as any ptr
type PVOID64 as any ptr
type VOID as any
type CHAR as byte
type INT_ as long
type WCHAR as wchar_t
type PWCHAR as WCHAR ptr
type LPWCH as WCHAR ptr
type PWCH as WCHAR ptr
type LPCWCH as const WCHAR ptr
type PCWCH as const WCHAR ptr
type NWPSTR as wstring ptr
type LPWSTR as wstring ptr
type PWSTR as wstring ptr
type PZPWSTR as PWSTR ptr
type PCZPWSTR as const PWSTR ptr
type LPUWSTR as wstring ptr
type PUWSTR as wstring ptr
type LPCWSTR as const wstring ptr
type PCWSTR as const wstring ptr
type PZPCWSTR as PCWSTR ptr
type LPCUWSTR as const wstring ptr
type PCUWSTR as const wstring ptr
type PZZWSTR as wstring ptr
type PCZZWSTR as const wstring ptr
type PUZZWSTR as wstring ptr
type PCUZZWSTR as const wstring ptr
type PNZWCH as WCHAR ptr
type PCNZWCH as const WCHAR ptr
type PUNZWCH as WCHAR ptr
type PCUNZWCH as const WCHAR ptr


type PCHAR as CHAR ptr
type LPCH as CHAR ptr
type PCH as CHAR ptr
type LPCCH as const CHAR ptr
type PCCH as const CHAR ptr
type NPSTR as zstring ptr
type LPSTR as zstring ptr
type PSTR as zstring ptr
type PZPSTR as PSTR ptr
type PCZPSTR as const PSTR ptr
type LPCSTR as const zstring ptr
type PCSTR as const zstring ptr
type PZPCSTR as PCSTR ptr
type PZZSTR as zstring ptr
type PCZZSTR as const zstring ptr
type PNZCH as CHAR ptr
type PCNZCH as const CHAR ptr

 type TCHAR as byte
 type PTCHAR as byte ptr
 type TBYTE as ubyte
 type PTBYTE as ubyte ptr
 type LPTCH as LPSTR
 type PTCH as LPSTR
 type LPCTCH as LPCCH
 type PCTCH as LPCCH
 type PTSTR as LPSTR
 type LPTSTR as LPSTR
 type PUTSTR as LPSTR
 type LPUTSTR as LPSTR
 type PCTSTR as LPCSTR
 type LPCTSTR as LPCSTR
 type PCUTSTR as LPCSTR
 type LPCUTSTR as LPCSTR
 type PZZTSTR as PZZSTR
 type PUZZTSTR as PZZSTR
 type PCZZTSTR as PCZZSTR
 type PCUZZTSTR as PCZZSTR
 type PZPTSTR as PZPSTR
 type PNZTCH as PNZCH
 type PUNZTCH as PNZCH
 type PCNZTCH as PCNZCH
 type PCUNZTCH as PCNZCH

type PSHORT as SHORT ptr
type PLONG as LONG ptr

type _GROUP_AFFINITY
 Mask as KAFFINITY
 Group as WORD
 Reserved(0 to 2) as WORD
end type

type GROUP_AFFINITY as _GROUP_AFFINITY
type PGROUP_AFFINITY as _GROUP_AFFINITY ptr
type HANDLE as any ptr
type PHANDLE as HANDLE ptr
type FCHAR as UBYTE
type FSHORT as WORD
type FLONG as DWORD
type HRESULT as LONG
type CCHAR as zstring
type LCID as DWORD
type PLCID as PDWORD
type LANGID as WORD

type COMPARTMENT_ID as long
enum
 UNSPECIFIED_COMPARTMENT_ID = 0
 DEFAULT_COMPARTMENT_ID
end enum

type PCOMPARTMENT_ID as COMPARTMENT_ID ptr
const APPLICATION_ERROR_MASK = &h20000000
const ERROR_SEVERITY_SUCCESS = &h000000000
const ERROR_SEVERITY_INFORMATIONAL = &h40000000
const ERROR_SEVERITY_WARNING = &h80000000
const ERROR_SEVERITY_ERROR = &hC0000000

type _FLOAT128
 LowPart as longint
 HighPart as longint
end type

type FLOAT128 as _FLOAT128
type PFLOAT128 as FLOAT128 ptr
type LONGLONG as longint
type ULONGLONG as ulongint
const MAXLONGLONG = &h7fffffffffffffff
type PLONGLONG as LONGLONG ptr
type PULONGLONG as ULONGLONG ptr
type USN as LONGLONG

type _LARGE_INTEGER_u
 LowPart as DWORD
 HighPart as LONG
end type

union _LARGE_INTEGER
 type
 LowPart as DWORD
 HighPart as LONG
 end type

 u as _LARGE_INTEGER_u
 QuadPart as LONGLONG
end union

type LARGE_INTEGER as _LARGE_INTEGER
type PLARGE_INTEGER as LARGE_INTEGER ptr

type _ULARGE_INTEGER_u
 LowPart as DWORD
 HighPart as DWORD
end type

union _ULARGE_INTEGER
 type
 LowPart as DWORD
 HighPart as DWORD
 end type

 u as _ULARGE_INTEGER_u
 QuadPart as ULONGLONG
end union

type ULARGE_INTEGER as _ULARGE_INTEGER
type PULARGE_INTEGER as ULARGE_INTEGER ptr

type _LUID
 LowPart as DWORD
 HighPart as LONG
end type

type LUID as _LUID
type PLUID as _LUID ptr
type DWORDLONG as ULONGLONG
type PDWORDLONG as DWORDLONG ptr


#undef _rotl
#undef _rotr
declare function _rotl cdecl(byval Value as ulong, byval Shift as long) as ulong
declare function _rotr cdecl(byval Value as ulong, byval Shift as long) as ulong
declare function _rotl64 cdecl(byval Value as ulongint, byval Shift as long) as ulongint
declare function _rotr64 cdecl(byval Value as ulongint, byval Shift as long) as ulongint
const ANSI_NULL = cast(CHAR, 0)
const UNICODE_NULL = cast(WCHAR, 0)
const UNICODE_STRING_MAX_BYTES = cast(WORD, 65534)
const UNICODE_STRING_MAX_CHARS = 32767
type WINBOOLEAN as UBYTE
type PBOOLEAN as WINBOOLEAN ptr

type _LIST_ENTRY
 Flink as _LIST_ENTRY ptr
 Blink as _LIST_ENTRY ptr
end type

type LIST_ENTRY as _LIST_ENTRY
type PLIST_ENTRY as _LIST_ENTRY ptr
type PRLIST_ENTRY as _LIST_ENTRY ptr

type _SINGLE_LIST_ENTRY
 Next as _SINGLE_LIST_ENTRY ptr
end type

type SINGLE_LIST_ENTRY as _SINGLE_LIST_ENTRY
type PSINGLE_LIST_ENTRY as _SINGLE_LIST_ENTRY ptr

type LIST_ENTRY32
 Flink as DWORD
 Blink as DWORD
end type

type PLIST_ENTRY32 as LIST_ENTRY32 ptr

type LIST_ENTRY64
 Flink as ULONGLONG
 Blink as ULONGLONG
end type

type PLIST_ENTRY64 as LIST_ENTRY64 ptr

type _OBJECTID
 Lineage as GUID
 Uniquifier as DWORD
end type

type OBJECTID as _OBJECTID
const MINCHAR = &h80
const MAXCHAR = &h7f
const MINSHORT = &h8000
const MAXSHORT = &h7fff
const MINLONG = &h80000000
const MAXLONG = &h7fffffff
const MAXBYTE = &hff
const MAXWORD = &hffff
const MAXDWORD = &hffffffff
type _EXCEPTION_RECORD as _EXCEPTION_RECORD_
type _CONTEXT as _CONTEXT_
type PEXCEPTION_ROUTINE as function(byval ExceptionRecord as _EXCEPTION_RECORD ptr, byval EstablisherFrame as PVOID, byval ContextRecord as _CONTEXT ptr, byval DispatcherContext as PVOID) as long
const VER_WORKSTATION_NT = &h40000000
const VER_SERVER_NT = &h80000000
const VER_SUITE_SMALLBUSINESS = &h00000001
const VER_SUITE_ENTERPRISE = &h00000002
const VER_SUITE_BACKOFFICE = &h00000004
const VER_SUITE_COMMUNICATIONS = &h00000008
const VER_SUITE_TERMINAL = &h00000010
const VER_SUITE_SMALLBUSINESS_RESTRICTED = &h00000020
const VER_SUITE_EMBEDDEDNT = &h00000040
const VER_SUITE_DATACENTER = &h00000080
const VER_SUITE_SINGLEUSERTS = &h00000100
const VER_SUITE_PERSONAL = &h00000200
const VER_SUITE_BLADE = &h00000400
const VER_SUITE_EMBEDDED_RESTRICTED = &h00000800
const VER_SUITE_SECURITY_APPLIANCE = &h00001000
const VER_SUITE_STORAGE_SERVER = &h00002000
const VER_SUITE_COMPUTE_SERVER = &h00004000
const VER_SUITE_WH_SERVER = &h00008000
const PRODUCT_UNDEFINED = &h00
const PRODUCT_ULTIMATE = &h1
const PRODUCT_HOME_BASIC = &h2
const PRODUCT_HOME_PREMIUM = &h3
const PRODUCT_ENTERPRISE = &h4
const PRODUCT_HOME_BASIC_N = &h5
const PRODUCT_BUSINESS = &h6
const PRODUCT_STANDARD_SERVER = &h7
const PRODUCT_DATACENTER_SERVER = &h8
const PRODUCT_SMALLBUSINESS_SERVER = &h9
const PRODUCT_ENTERPRISE_SERVER = &ha
const PRODUCT_STARTER = &hb
const PRODUCT_DATACENTER_SERVER_CORE = &hc
const PRODUCT_STANDARD_SERVER_CORE = &hd
const PRODUCT_ENTERPRISE_SERVER_CORE = &he
const PRODUCT_ENTERPRISE_SERVER_IA64 = &hf
const PRODUCT_BUSINESS_N = &h10
const PRODUCT_WEB_SERVER = &h11
const PRODUCT_CLUSTER_SERVER = &h12
const PRODUCT_HOME_SERVER = &h13
const PRODUCT_STORAGE_EXPRESS_SERVER = &h14
const PRODUCT_STORAGE_STANDARD_SERVER = &h15
const PRODUCT_STORAGE_WORKGROUP_SERVER = &h16
const PRODUCT_STORAGE_ENTERPRISE_SERVER = &h17
const PRODUCT_SERVER_FOR_SMALLBUSINESS = &h18
const PRODUCT_SMALLBUSINESS_SERVER_PREMIUM = &h19
const PRODUCT_HOME_PREMIUM_N = &h1a
const PRODUCT_ENTERPRISE_N = &h1b
const PRODUCT_ULTIMATE_N = &h1c
const PRODUCT_WEB_SERVER_CORE = &h1d
const PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT = &h1e
const PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY = &h1f
const PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING = &h20
const PRODUCT_SERVER_FOUNDATION = &h21
const PRODUCT_HOME_PREMIUM_SERVER = &h22
const PRODUCT_SERVER_FOR_SMALLBUSINESS_V = &h23
const PRODUCT_STANDARD_SERVER_V = &h24
const PRODUCT_DATACENTER_SERVER_V = &h25
const PRODUCT_ENTERPRISE_SERVER_V = &h26
const PRODUCT_DATACENTER_SERVER_CORE_V = &h27
const PRODUCT_STANDARD_SERVER_CORE_V = &h28
const PRODUCT_ENTERPRISE_SERVER_CORE_V = &h29
const PRODUCT_HYPERV = &h2a
const PRODUCT_STORAGE_EXPRESS_SERVER_CORE = &h2b
const PRODUCT_STORAGE_STANDARD_SERVER_CORE = &h2c
const PRODUCT_STORAGE_WORKGROUP_SERVER_CORE = &h2d
const PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE = &h2e
const PRODUCT_STARTER_N = &h2f
const PRODUCT_PROFESSIONAL = &h30
const PRODUCT_PROFESSIONAL_N = &h31
const PRODUCT_SB_SOLUTION_SERVER = &h32
const PRODUCT_SERVER_FOR_SB_SOLUTIONS = &h33
const PRODUCT_STANDARD_SERVER_SOLUTIONS = &h34
const PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE = &h35
const PRODUCT_SB_SOLUTION_SERVER_EM = &h36
const PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM = &h37
const PRODUCT_SOLUTION_EMBEDDEDSERVER = &h38
const PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE = &h39
const PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT = &h3B
const PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL = &h3C
const PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC = &h3D
const PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC = &h3E
const PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE = &h3f
const PRODUCT_CLUSTER_SERVER_V = &h40
const PRODUCT_EMBEDDED = &h41
const PRODUCT_STARTER_E = &h42
const PRODUCT_HOME_BASIC_E = &h43
const PRODUCT_HOME_PREMIUM_E = &h44
const PRODUCT_PROFESSIONAL_E = &h45
const PRODUCT_ENTERPRISE_E = &h46
const PRODUCT_ULTIMATE_E = &h47
const PRODUCT_ENTERPRISE_EVALUATION = &h48
const PRODUCT_MULTIPOINT_STANDARD_SERVER = &h4C
const PRODUCT_MULTIPOINT_PREMIUM_SERVER = &h4D
const PRODUCT_STANDARD_EVALUATION_SERVER = &h4F
const PRODUCT_DATACENTER_EVALUATION_SERVER = &h50
const PRODUCT_ENTERPRISE_N_EVALUATION = &h54
const PRODUCT_EMBEDDED_AUTOMOTIVE = &h55
const PRODUCT_EMBEDDED_INDUSTRY_A = &h56
const PRODUCT_THINPC = &h57
const PRODUCT_EMBEDDED_A = &h58
const PRODUCT_EMBEDDED_INDUSTRY = &h59
const PRODUCT_EMBEDDED_E = &h5A
const PRODUCT_EMBEDDED_INDUSTRY_E = &h5B
const PRODUCT_EMBEDDED_INDUSTRY_A_E = &h5C
const PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER = &h5F
const PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER = &h60
const PRODUCT_CORE_ARM = &h61
const PRODUCT_CORE_N = &h62
const PRODUCT_CORE_COUNTRYSPECIFIC = &h63
const PRODUCT_CORE_SINGLELANGUAGE = &h64
const PRODUCT_CORE = &h65
const PRODUCT_PROFESSIONAL_WMC = &h67
const PRODUCT_MOBILE_CORE = &h68
const PRODUCT_UNLICENSED = &habcdabcd
const LANG_NEUTRAL = &h000
const LANG_INVARIANT = &h7f
const LANG_AFRIKAANS = &h36
const LANG_ALBANIAN = &h1c
const LANG_ALSATIAN = &h84
const LANG_AMHARIC = &h5e
const LANG_ARABIC = &h01
const LANG_ARMENIAN = &h2b
const LANG_ASSAMESE = &h4d
const LANG_AZERI = &h2c
const LANG_AZERBAIJANI = &h2c
const LANG_BANGLA = &h45
const LANG_BASHKIR = &h6d
const LANG_BASQUE = &h2d
const LANG_BELARUSIAN = &h23
const LANG_BENGALI = &h45
const LANG_BRETON = &h7e
const LANG_BOSNIAN = &h1a
const LANG_BOSNIAN_NEUTRAL = &h781a
const LANG_BULGARIAN = &h02
const LANG_CATALAN = &h03
const LANG_CENTRAL_KURDISH = &h92
const LANG_CHEROKEE = &h5c
const LANG_CHINESE = &h04
const LANG_CHINESE_SIMPLIFIED = &h04
const LANG_CHINESE_TRADITIONAL = &h7c04
const LANG_CORSICAN = &h83
const LANG_CROATIAN = &h1a
const LANG_CZECH = &h05
const LANG_DANISH = &h06
const LANG_DARI = &h8c
const LANG_DIVEHI = &h65
const LANG_DUTCH = &h13
const LANG_ENGLISH = &h09
const LANG_ESTONIAN = &h25
const LANG_FAEROESE = &h38
const LANG_FARSI = &h29
const LANG_FILIPINO = &h64
const LANG_FINNISH = &h0b
const LANG_FRENCH = &h0c
const LANG_FRISIAN = &h62
const LANG_FULAH = &h67
const LANG_GALICIAN = &h56
const LANG_GEORGIAN = &h37
const LANG_GERMAN = &h07
const LANG_GREEK = &h08
const LANG_GREENLANDIC = &h6f
const LANG_GUJARATI = &h47
const LANG_HAUSA = &h68
const LANG_HEBREW = &h0d
const LANG_HINDI = &h39
const LANG_HUNGARIAN = &h0e
const LANG_ICELANDIC = &h0f
const LANG_IGBO = &h70
const LANG_INDONESIAN = &h21
const LANG_INUKTITUT = &h5d
const LANG_IRISH = &h3c
const LANG_ITALIAN = &h10
const LANG_JAPANESE = &h11
const LANG_KANNADA = &h4b
const LANG_KASHMIRI = &h60
const LANG_KAZAK = &h3f
const LANG_KHMER = &h53
const LANG_KICHE = &h86
const LANG_KINYARWANDA = &h87
const LANG_KONKANI = &h57
const LANG_KOREAN = &h12
const LANG_KYRGYZ = &h40
const LANG_LAO = &h54
const LANG_LATVIAN = &h26
const LANG_LITHUANIAN = &h27
const LANG_LOWER_SORBIAN = &h2e
const LANG_LUXEMBOURGISH = &h6e
const LANG_MACEDONIAN = &h2f
const LANG_MALAY = &h3e
const LANG_MALAYALAM = &h4c
const LANG_MALTESE = &h3a
const LANG_MANIPURI = &h58
const LANG_MAORI = &h81
const LANG_MAPUDUNGUN = &h7a
const LANG_MARATHI = &h4e
const LANG_MOHAWK = &h7c
const LANG_MONGOLIAN = &h50
const LANG_NEPALI = &h61
const LANG_NORWEGIAN = &h14
const LANG_OCCITAN = &h82
const LANG_ODIA = &h48
const LANG_ORIYA = &h48
const LANG_PASHTO = &h63
const LANG_PERSIAN = &h29
const LANG_POLISH = &h15
const LANG_PORTUGUESE = &h16
const LANG_PULAR = &h67
const LANG_PUNJABI = &h46
const LANG_QUECHUA = &h6b
const LANG_ROMANIAN = &h18
const LANG_ROMANSH = &h17
const LANG_RUSSIAN = &h19
const LANG_SAKHA = &h85
const LANG_SAMI = &h3b
const LANG_SANSKRIT = &h4f
const LANG_SCOTTISH_GAELIC = &h91
const LANG_SERBIAN = &h1a
const LANG_SERBIAN_NEUTRAL = &h7c1a
const LANG_SINDHI = &h59
const LANG_SINHALESE = &h5b
const LANG_SLOVAK = &h1b
const LANG_SLOVENIAN = &h24
const LANG_SOTHO = &h6c
const LANG_SPANISH = &h0a
const LANG_SWAHILI = &h41
const LANG_SWEDISH = &h1d
const LANG_SYRIAC = &h5a
const LANG_TAJIK = &h28
const LANG_TAMAZIGHT = &h5f
const LANG_TAMIL = &h49
const LANG_TATAR = &h44
const LANG_TELUGU = &h4a
const LANG_THAI = &h1e
const LANG_TIBETAN = &h51
const LANG_TIGRIGNA = &h73
const LANG_TIGRINYA = &h73
const LANG_TSWANA = &h32
const LANG_TURKISH = &h1f
const LANG_TURKMEN = &h42
const LANG_UIGHUR = &h80
const LANG_UKRAINIAN = &h22
const LANG_UPPER_SORBIAN = &h2e
const LANG_URDU = &h20
const LANG_UZBEK = &h43
const LANG_VALENCIAN = &h03
const LANG_VIETNAMESE = &h2a
const LANG_WELSH = &h52
const LANG_WOLOF = &h88
const LANG_XHOSA = &h34
const LANG_YAKUT = &h85
const LANG_YI = &h78
const LANG_YORUBA = &h6a
const LANG_ZULU = &h35
const SUBLANG_NEUTRAL = &h000
const SUBLANG_DEFAULT = &h01
const SUBLANG_SYS_DEFAULT = &h02
const SUBLANG_CUSTOM_DEFAULT = &h03
const SUBLANG_CUSTOM_UNSPECIFIED = &h04
const SUBLANG_UI_CUSTOM_DEFAULT = &h05
const SUBLANG_AFRIKAANS_SOUTH_AFRICA = &h01
const SUBLANG_ALBANIAN_ALBANIA = &h01
const SUBLANG_ALSATIAN_FRANCE = &h01
const SUBLANG_AMHARIC_ETHIOPIA = &h01
const SUBLANG_ARABIC_SAUDI_ARABIA = &h01
const SUBLANG_ARABIC_IRAQ = &h02
const SUBLANG_ARABIC_EGYPT = &h03
const SUBLANG_ARABIC_LIBYA = &h04
const SUBLANG_ARABIC_ALGERIA = &h05
const SUBLANG_ARABIC_MOROCCO = &h06
const SUBLANG_ARABIC_TUNISIA = &h07
const SUBLANG_ARABIC_OMAN = &h08
const SUBLANG_ARABIC_YEMEN = &h09
const SUBLANG_ARABIC_SYRIA = &h0a
const SUBLANG_ARABIC_JORDAN = &h0b
const SUBLANG_ARABIC_LEBANON = &h0c
const SUBLANG_ARABIC_KUWAIT = &h0d
const SUBLANG_ARABIC_UAE = &h0e
const SUBLANG_ARABIC_BAHRAIN = &h0f
const SUBLANG_ARABIC_QATAR = &h10
const SUBLANG_ARMENIAN_ARMENIA = &h01
const SUBLANG_ASSAMESE_INDIA = &h01
const SUBLANG_AZERI_LATIN = &h01
const SUBLANG_AZERI_CYRILLIC = &h02
const SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN = &h01
const SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC = &h02
const SUBLANG_BANGLA_INDIA = &h01
const SUBLANG_BANGLA_BANGLADESH = &h02
const SUBLANG_BASHKIR_RUSSIA = &h01
const SUBLANG_BASQUE_BASQUE = &h01
const SUBLANG_BELARUSIAN_BELARUS = &h01
const SUBLANG_BENGALI_INDIA = &h01
const SUBLANG_BENGALI_BANGLADESH = &h02
const SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN = &h05
const SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC = &h08
const SUBLANG_BRETON_FRANCE = &h01
const SUBLANG_BULGARIAN_BULGARIA = &h01
const SUBLANG_CATALAN_CATALAN = &h01
const SUBLANG_CENTRAL_KURDISH_IRAQ = &h01
const SUBLANG_CHEROKEE_CHEROKEE = &h01
const SUBLANG_CHINESE_TRADITIONAL = &h01
const SUBLANG_CHINESE_SIMPLIFIED = &h02
const SUBLANG_CHINESE_HONGKONG = &h03
const SUBLANG_CHINESE_SINGAPORE = &h04
const SUBLANG_CHINESE_MACAU = &h05
const SUBLANG_CORSICAN_FRANCE = &h01
const SUBLANG_CZECH_CZECH_REPUBLIC = &h01
const SUBLANG_CROATIAN_CROATIA = &h01
const SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN = &h04
const SUBLANG_DANISH_DENMARK = &h01
const SUBLANG_DARI_AFGHANISTAN = &h01
const SUBLANG_DIVEHI_MALDIVES = &h01
const SUBLANG_DUTCH = &h01
const SUBLANG_DUTCH_BELGIAN = &h02
const SUBLANG_ENGLISH_US = &h01
const SUBLANG_ENGLISH_UK = &h02
const SUBLANG_ENGLISH_AUS = &h03
const SUBLANG_ENGLISH_CAN = &h04
const SUBLANG_ENGLISH_NZ = &h05
const SUBLANG_ENGLISH_IRELAND = &h06
const SUBLANG_ENGLISH_EIRE = &h06
const SUBLANG_ENGLISH_SOUTH_AFRICA = &h07
const SUBLANG_ENGLISH_JAMAICA = &h08
const SUBLANG_ENGLISH_CARIBBEAN = &h09
const SUBLANG_ENGLISH_BELIZE = &h0a
const SUBLANG_ENGLISH_TRINIDAD = &h0b
const SUBLANG_ENGLISH_ZIMBABWE = &h0c
const SUBLANG_ENGLISH_PHILIPPINES = &h0d
const SUBLANG_ENGLISH_INDIA = &h10
const SUBLANG_ENGLISH_MALAYSIA = &h11
const SUBLANG_ENGLISH_SINGAPORE = &h12
const SUBLANG_ESTONIAN_ESTONIA = &h01
const SUBLANG_FAEROESE_FAROE_ISLANDS = &h01
const SUBLANG_FILIPINO_PHILIPPINES = &h01
const SUBLANG_FINNISH_FINLAND = &h01
const SUBLANG_FRENCH = &h01
const SUBLANG_FRENCH_BELGIAN = &h02
const SUBLANG_FRENCH_CANADIAN = &h03
const SUBLANG_FRENCH_SWISS = &h04
const SUBLANG_FRENCH_LUXEMBOURG = &h05
const SUBLANG_FRENCH_MONACO = &h06
const SUBLANG_FRISIAN_NETHERLANDS = &h01
const SUBLANG_FULAH_SENEGAL = &h02
const SUBLANG_GALICIAN_GALICIAN = &h01
const SUBLANG_GEORGIAN_GEORGIA = &h01
const SUBLANG_GERMAN = &h01
const SUBLANG_GERMAN_SWISS = &h02
const SUBLANG_GERMAN_AUSTRIAN = &h03
const SUBLANG_GERMAN_LUXEMBOURG = &h04
const SUBLANG_GERMAN_LIECHTENSTEIN = &h05
const SUBLANG_GREEK_GREECE = &h01
const SUBLANG_GREENLANDIC_GREENLAND = &h01
const SUBLANG_GUJARATI_INDIA = &h01
const SUBLANG_HAUSA_NIGERIA_LATIN = &h01
const SUBLANG_HAUSA_NIGERIA = SUBLANG_HAUSA_NIGERIA_LATIN
const SUBLANG_HAWAIIAN_US = &h01
const SUBLANG_HEBREW_ISRAEL = &h01
const SUBLANG_HINDI_INDIA = &h01
const SUBLANG_HUNGARIAN_HUNGARY = &h01
const SUBLANG_ICELANDIC_ICELAND = &h01
const SUBLANG_IGBO_NIGERIA = &h01
const SUBLANG_INDONESIAN_INDONESIA = &h01
const SUBLANG_INUKTITUT_CANADA = &h01
const SUBLANG_INUKTITUT_CANADA_LATIN = &h02
const SUBLANG_IRISH_IRELAND = &h02
const SUBLANG_ITALIAN = &h01
const SUBLANG_ITALIAN_SWISS = &h02
const SUBLANG_JAPANESE_JAPAN = &h01
const SUBLANG_KANNADA_INDIA = &h01
const SUBLANG_KASHMIRI_INDIA = &h02
const SUBLANG_KASHMIRI_SASIA = &h02
const SUBLANG_KAZAK_KAZAKHSTAN = &h01
const SUBLANG_KHMER_CAMBODIA = &h01
const SUBLANG_KICHE_GUATEMALA = &h01
const SUBLANG_KINYARWANDA_RWANDA = &h01
const SUBLANG_KONKANI_INDIA = &h01
const SUBLANG_KOREAN = &h01
const SUBLANG_KYRGYZ_KYRGYZSTAN = &h01
const SUBLANG_LAO_LAO = &h01
const SUBLANG_LAO_LAO_PDR = SUBLANG_LAO_LAO
const SUBLANG_LATVIAN_LATVIA = &h01


const SUBLANG_LITHUANIAN = &h01
const SUBLANG_LOWER_SORBIAN_GERMANY = &h02
const SUBLANG_LUXEMBOURGISH_LUXEMBOURG = &h01
const SUBLANG_MACEDONIAN_MACEDONIA = &h01
const SUBLANG_MALAY_MALAYSIA = &h01
const SUBLANG_MALAY_BRUNEI_DARUSSALAM = &h02
const SUBLANG_MALAYALAM_INDIA = &h01
const SUBLANG_MALTESE_MALTA = &h01
const SUBLANG_MAORI_NEW_ZEALAND = &h01
const SUBLANG_MAPUDUNGUN_CHILE = &h01
const SUBLANG_MARATHI_INDIA = &h01
const SUBLANG_MOHAWK_MOHAWK = &h01
const SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA = &h01
const SUBLANG_MONGOLIAN_PRC = &h02
const SUBLANG_NEPALI_NEPAL = &h01
const SUBLANG_NEPALI_INDIA = &h02
const SUBLANG_NORWEGIAN_BOKMAL = &h01
const SUBLANG_NORWEGIAN_NYNORSK = &h02
const SUBLANG_OCCITAN_FRANCE = &h01
const SUBLANG_ORIYA_INDIA = &h01
const SUBLANG_PASHTO_AFGHANISTAN = &h01
const SUBLANG_PERSIAN_IRAN = &h01
const SUBLANG_POLISH_POLAND = &h01
const SUBLANG_PORTUGUESE_BRAZILIAN = &h01


const SUBLANG_PORTUGUESE = &h02
const SUBLANG_PULAR_SENEGAL = &h02
const SUBLANG_PUNJABI_INDIA = &h01
const SUBLANG_PUNJABI_PAKISTAN = &h02
const SUBLANG_QUECHUA_BOLIVIA = &h01
const SUBLANG_QUECHUA_ECUADOR = &h02
const SUBLANG_QUECHUA_PERU = &h03
const SUBLANG_ROMANIAN_ROMANIA = &h01
const SUBLANG_ROMANSH_SWITZERLAND = &h01
const SUBLANG_RUSSIAN_RUSSIA = &h01
const SUBLANG_SAKHA_RUSSIA = &h01
const SUBLANG_SAMI_NORTHERN_NORWAY = &h01
const SUBLANG_SAMI_NORTHERN_SWEDEN = &h02
const SUBLANG_SAMI_NORTHERN_FINLAND = &h03
const SUBLANG_SAMI_LULE_NORWAY = &h04
const SUBLANG_SAMI_LULE_SWEDEN = &h05
const SUBLANG_SAMI_SOUTHERN_NORWAY = &h06
const SUBLANG_SAMI_SOUTHERN_SWEDEN = &h07
const SUBLANG_SAMI_SKOLT_FINLAND = &h08
const SUBLANG_SAMI_INARI_FINLAND = &h09
const SUBLANG_SANSKRIT_INDIA = &h01
const SUBLANG_SCOTTISH_GAELIC = &h01
const SUBLANG_SERBIAN_LATIN = &h02
const SUBLANG_SERBIAN_CYRILLIC = &h03
const SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN = &h06
const SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC = &h07
const SUBLANG_SERBIAN_MONTENEGRO_LATIN = &h0b
const SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC = &h0c
const SUBLANG_SERBIAN_SERBIA_LATIN = &h09
const SUBLANG_SERBIAN_SERBIA_CYRILLIC = &h0a
const SUBLANG_SINDHI_INDIA = &h01
const SUBLANG_SINDHI_AFGHANISTAN = &h02
const SUBLANG_SINDHI_PAKISTAN = &h02
const SUBLANG_SINHALESE_SRI_LANKA = &h01
const SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA = &h01
const SUBLANG_SLOVAK_SLOVAKIA = &h01
const SUBLANG_SLOVENIAN_SLOVENIA = &h01
const SUBLANG_SPANISH = &h01
const SUBLANG_SPANISH_MEXICAN = &h02
const SUBLANG_SPANISH_MODERN = &h03
const SUBLANG_SPANISH_GUATEMALA = &h04
const SUBLANG_SPANISH_COSTA_RICA = &h05
const SUBLANG_SPANISH_PANAMA = &h06
const SUBLANG_SPANISH_DOMINICAN_REPUBLIC = &h07
const SUBLANG_SPANISH_VENEZUELA = &h08
const SUBLANG_SPANISH_COLOMBIA = &h09
const SUBLANG_SPANISH_PERU = &h0a
const SUBLANG_SPANISH_ARGENTINA = &h0b
const SUBLANG_SPANISH_ECUADOR = &h0c
const SUBLANG_SPANISH_CHILE = &h0d
const SUBLANG_SPANISH_URUGUAY = &h0e
const SUBLANG_SPANISH_PARAGUAY = &h0f
const SUBLANG_SPANISH_BOLIVIA = &h10
const SUBLANG_SPANISH_EL_SALVADOR = &h11
const SUBLANG_SPANISH_HONDURAS = &h12
const SUBLANG_SPANISH_NICARAGUA = &h13
const SUBLANG_SPANISH_PUERTO_RICO = &h14
const SUBLANG_SPANISH_US = &h15
const SUBLANG_SWAHILI_KENYA = &h01


const SUBLANG_SWEDISH = &h01
const SUBLANG_SWEDISH_FINLAND = &h02
const SUBLANG_SYRIAC = &h01
const SUBLANG_SYRIAC_SYRIA = SUBLANG_SYRIAC
const SUBLANG_TAJIK_TAJIKISTAN = &h01
const SUBLANG_TAMAZIGHT_ALGERIA_LATIN = &h02
const SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH = &h04
const SUBLANG_TAMIL_INDIA = &h01
const SUBLANG_TAMIL_SRI_LANKA = &h02
const SUBLANG_TATAR_RUSSIA = &h01
const SUBLANG_TELUGU_INDIA = &h01
const SUBLANG_THAI_THAILAND = &h01
const SUBLANG_TIBETAN_PRC = &h01
const SUBLANG_TIBETAN_BHUTAN = &h02
const SUBLANG_TIGRIGNA_ERITREA = &h02
const SUBLANG_TIGRINYA_ERITREA = &h02
const SUBLANG_TIGRINYA_ETHIOPIA = &h01
const SUBLANG_TSWANA_BOTSWANA = &h02
const SUBLANG_TSWANA_SOUTH_AFRICA = &h01
const SUBLANG_TURKISH_TURKEY = &h01
const SUBLANG_TURKMEN_TURKMENISTAN = &h01
const SUBLANG_UIGHUR_PRC = &h01
const SUBLANG_UKRAINIAN_UKRAINE = &h01
const SUBLANG_UPPER_SORBIAN_GERMANY = &h01
const SUBLANG_URDU_PAKISTAN = &h01
const SUBLANG_URDU_INDIA = &h02
const SUBLANG_UZBEK_LATIN = &h01
const SUBLANG_UZBEK_CYRILLIC = &h02
const SUBLANG_VALENCIAN_VALENCIA = &h02
const SUBLANG_VIETNAMESE_VIETNAM = &h01
const SUBLANG_WELSH_UNITED_KINGDOM = &h01
const SUBLANG_WOLOF_SENEGAL = &h01
const SUBLANG_YORUBA_NIGERIA = &h01
const SUBLANG_XHOSA_SOUTH_AFRICA = &h01
const SUBLANG_YAKUT_RUSSIA = &h01
const SUBLANG_YI_PRC = &h01
const SUBLANG_ZULU_SOUTH_AFRICA = &h01
const SORT_DEFAULT = &h00
const SORT_INVARIANT_MATH = &h1
const SORT_JAPANESE_XJIS = &h00
const SORT_JAPANESE_UNICODE = &h1
const SORT_JAPANESE_RADICALSTROKE = &h4
const SORT_CHINESE_BIG5 = &h00
const SORT_CHINESE_PRCP = &h00
const SORT_CHINESE_UNICODE = &h1
const SORT_CHINESE_PRC = &h2
const SORT_CHINESE_BOPOMOFO = &h3
const SORT_CHINESE_RADICALSTROKE = &h4
const SORT_KOREAN_KSC = &h00
const SORT_KOREAN_UNICODE = &h1
const SORT_GERMAN_PHONE_BOOK = &h1
const SORT_HUNGARIAN_DEFAULT = &h00
const SORT_HUNGARIAN_TECHNICAL = &h1
const SORT_GEORGIAN_TRADITIONAL = &h00
const SORT_GEORGIAN_MODERN = &h1
const NLS_VALID_LOCALE_MASK = &h000fffff
const LOCALE_NAME_MAX_LENGTH = 85
const STATUS_WAIT_0 = cast(DWORD, &h000000000)
const STATUS_ABANDONED_WAIT_0 = cast(DWORD, &h00000080)
const STATUS_USER_APC = cast(DWORD, &h000000C0)
const STATUS_TIMEOUT = cast(DWORD, &h00000102)
const STATUS_PENDING = cast(DWORD, &h00000103)
const DBG_EXCEPTION_HANDLED = cast(DWORD, &h00010001)
const DBG_CONTINUE = cast(DWORD, &h00010002)
const STATUS_SEGMENT_NOTIFICATION = cast(DWORD, &h40000005)
const STATUS_FATAL_APP_EXIT = cast(DWORD, &h40000015)
const DBG_TERMINATE_THREAD = cast(DWORD, &h40010003)
const DBG_TERMINATE_PROCESS = cast(DWORD, &h40010004)
const DBG_CONTROL_C = cast(DWORD, &h40010005)
const DBG_PRINTEXCEPTION_C = cast(DWORD, &h40010006)
const DBG_RIPEXCEPTION = cast(DWORD, &h40010007)
const DBG_CONTROL_BREAK = cast(DWORD, &h40010008)
const DBG_COMMAND_EXCEPTION = cast(DWORD, &h40010009)
const STATUS_GUARD_PAGE_VIOLATION = cast(DWORD, &h80000001)
const STATUS_DATATYPE_MISALIGNMENT = cast(DWORD, &h80000002)
const STATUS_BREAKPOINT = cast(DWORD, &h80000003)
const STATUS_SINGLE_STEP = cast(DWORD, &h80000004)
const STATUS_LONGJUMP = cast(DWORD, &h80000026)
const STATUS_UNWIND_CONSOLIDATE = cast(DWORD, &h80000029)
const DBG_EXCEPTION_NOT_HANDLED = cast(DWORD, &h80010001)
const STATUS_ACCESS_VIOLATION = cast(DWORD, &hC0000005)
const STATUS_IN_PAGE_ERROR = cast(DWORD, &hC0000006)
const STATUS_INVALID_HANDLE = cast(DWORD, &hC0000008)
const STATUS_INVALID_PARAMETER = cast(DWORD, &hC000000D)
const STATUS_NO_MEMORY = cast(DWORD, &hC0000017)
const STATUS_ILLEGAL_INSTRUCTION = cast(DWORD, &hC000001D)
const STATUS_NONCONTINUABLE_EXCEPTION = cast(DWORD, &hC0000025)
const STATUS_INVALID_DISPOSITION = cast(DWORD, &hC0000026)
const STATUS_ARRAY_BOUNDS_EXCEEDED = cast(DWORD, &hC000008C)
const STATUS_FLOAT_DENORMAL_OPERAND = cast(DWORD, &hC000008D)
const STATUS_FLOAT_DIVIDE_BY_ZERO = cast(DWORD, &hC000008E)
const STATUS_FLOAT_INEXACT_RESULT = cast(DWORD, &hC000008F)
const STATUS_FLOAT_INVALID_OPERATION = cast(DWORD, &hC0000090)
const STATUS_FLOAT_OVERFLOW = cast(DWORD, &hC0000091)
const STATUS_FLOAT_STACK_CHECK = cast(DWORD, &hC0000092)
const STATUS_FLOAT_UNDERFLOW = cast(DWORD, &hC0000093)
const STATUS_INTEGER_DIVIDE_BY_ZERO = cast(DWORD, &hC0000094)
const STATUS_INTEGER_OVERFLOW = cast(DWORD, &hC0000095)
const STATUS_PRIVILEGED_INSTRUCTION = cast(DWORD, &hC0000096)
const STATUS_STACK_OVERFLOW = cast(DWORD, &hC00000FD)
const STATUS_DLL_NOT_FOUND = cast(DWORD, &hC0000135)
const STATUS_ORDINAL_NOT_FOUND = cast(DWORD, &hC0000138)
const STATUS_ENTRYPOINT_NOT_FOUND = cast(DWORD, &hC0000139)
const STATUS_CONTROL_C_EXIT = cast(DWORD, &hC000013A)
const STATUS_DLL_INIT_FAILED = cast(DWORD, &hC0000142)
const STATUS_FLOAT_MULTIPLE_FAULTS = cast(DWORD, &hC00002B4)
const STATUS_FLOAT_MULTIPLE_TRAPS = cast(DWORD, &hC00002B5)
const STATUS_REG_NAT_CONSUMPTION = cast(DWORD, &hC00002C9)
const STATUS_STACK_BUFFER_OVERRUN = cast(DWORD, &hC0000409)
const STATUS_INVALID_CRUNTIME_PARAMETER = cast(DWORD, &hC0000417)
const STATUS_ASSERTION_FAILURE = cast(DWORD, &hC0000420)
const STATUS_SXS_EARLY_DEACTIVATION = cast(DWORD, &hC015000F)
const STATUS_SXS_INVALID_DEACTIVATION = cast(DWORD, &hC0150010)
const MAXIMUM_WAIT_OBJECTS = 64
const MAXIMUM_SUSPEND_COUNT = MAXCHAR
type KSPIN_LOCK as ULONG_PTR
type PKSPIN_LOCK as KSPIN_LOCK ptr

type _M128A
 Low as ULONGLONG
 High as LONGLONG
end type

type M128A as _M128A
type PM128A as _M128A ptr

type _XSAVE_FORMAT
 ControlWord as WORD
 StatusWord as WORD
 TagWord as UBYTE
 Reserved1 as UBYTE
 ErrorOpcode as WORD
 ErrorOffset as DWORD
 ErrorSelector as WORD
 Reserved2 as WORD
 DataOffset as DWORD
 DataSelector as WORD
 Reserved3 as WORD
 MxCsr as DWORD
 MxCsr_Mask as DWORD
 FloatRegisters(0 to 7) as M128A

 XmmRegisters(0 to 7) as M128A
 Reserved4(0 to 219) as UBYTE
 Cr0NpxState as DWORD
end type

type XSAVE_FORMAT as _XSAVE_FORMAT
type PXSAVE_FORMAT as _XSAVE_FORMAT ptr

type _XSAVE_AREA_HEADER
 Mask as DWORD64
 Reserved(0 to 6) as DWORD64
end type

type XSAVE_AREA_HEADER as _XSAVE_AREA_HEADER
type PXSAVE_AREA_HEADER as _XSAVE_AREA_HEADER ptr

type _XSAVE_AREA
 LegacyState as XSAVE_FORMAT
 Header as XSAVE_AREA_HEADER
end type

type XSAVE_AREA as _XSAVE_AREA
type PXSAVE_AREA as _XSAVE_AREA ptr

type _XSTATE_CONTEXT
 Mask as DWORD64
 Length as DWORD
 Reserved1 as DWORD
 Area as PXSAVE_AREA

 Reserved2 as DWORD

 Buffer as PVOID

 Reserved3 as DWORD
end type

type XSTATE_CONTEXT as _XSTATE_CONTEXT
type PXSTATE_CONTEXT as _XSTATE_CONTEXT ptr

type _SCOPE_TABLE_AMD64_ScopeRecord
 BeginAddress as DWORD
 EndAddress as DWORD
 HandlerAddress as DWORD
 JumpTarget as DWORD
end type

type _SCOPE_TABLE_AMD64
 Count as DWORD
 ScopeRecord(0 to 0) as _SCOPE_TABLE_AMD64_ScopeRecord
end type

type SCOPE_TABLE_AMD64 as _SCOPE_TABLE_AMD64
type PSCOPE_TABLE_AMD64 as _SCOPE_TABLE_AMD64 ptr





type _TEB as _TEB_

 const PcTeb = &h18


const EXCEPTION_READ_FAULT = 0
const EXCEPTION_WRITE_FAULT = 1
const EXCEPTION_EXECUTE_FAULT = 8

 const SIZE_OF_80387_REGISTERS = 80
 const CONTEXT_i386 = &h00010000
 const CONTEXT_i486 = &h00010000
 const CONTEXT_CONTROL = CONTEXT_i386 or &h00000001
 const CONTEXT_INTEGER = CONTEXT_i386 or &h00000002
 const CONTEXT_SEGMENTS = CONTEXT_i386 or &h00000004
 const CONTEXT_FLOATING_POINT = CONTEXT_i386 or &h00000008
 const CONTEXT_DEBUG_REGISTERS = CONTEXT_i386 or &h00000010
 const CONTEXT_EXTENDED_REGISTERS = CONTEXT_i386 or &h00000020
 const CONTEXT_FULL = (CONTEXT_CONTROL or CONTEXT_INTEGER) or CONTEXT_SEGMENTS
 const CONTEXT_ALL = ((((CONTEXT_CONTROL or CONTEXT_INTEGER) or CONTEXT_SEGMENTS) or CONTEXT_FLOATING_POINT) or CONTEXT_DEBUG_REGISTERS) or CONTEXT_EXTENDED_REGISTERS
 const MAXIMUM_SUPPORTED_EXTENSION = 512

 type _FLOATING_SAVE_AREA
 ControlWord as DWORD
 StatusWord as DWORD
 TagWord as DWORD
 ErrorOffset as DWORD
 ErrorSelector as DWORD
 DataOffset as DWORD
 DataSelector as DWORD
 RegisterArea(0 to 79) as UBYTE
 Cr0NpxState as DWORD
 end type

 type FLOATING_SAVE_AREA as _FLOATING_SAVE_AREA
 type PFLOATING_SAVE_AREA as FLOATING_SAVE_AREA ptr

type _CONTEXT_

 ContextFlags as DWORD

 Dr0 as DWORD
 Dr1 as DWORD
 Dr2 as DWORD
 Dr3 as DWORD
 Dr6 as DWORD
 Dr7 as DWORD
 FloatSave as FLOATING_SAVE_AREA
 SegGs as DWORD
 SegFs as DWORD
 SegEs as DWORD
 SegDs as DWORD
 Edi as DWORD
 Esi as DWORD
 Ebx as DWORD
 Edx as DWORD
 Ecx as DWORD
 Eax as DWORD
 Ebp as DWORD
 Eip as DWORD
 SegCs as DWORD

 EFlags as DWORD

 Esp as DWORD
 SegSs as DWORD
 ExtendedRegisters(0 to 511) as UBYTE
end type

type CONTEXT as _CONTEXT

 type PCONTEXT as CONTEXT ptr


type _LDT_ENTRY_HighWord_Bytes
 BaseMid as UBYTE
 Flags1 as UBYTE
 Flags2 as UBYTE
 BaseHi as UBYTE
end type

type _LDT_ENTRY_HighWord_Bits
 BaseMid : 8 as DWORD
 as DWORD Type : 5
 Dpl : 2 as DWORD
 Pres : 1 as DWORD
 LimitHi : 4 as DWORD
 Sys : 1 as DWORD
 Reserved_0 : 1 as DWORD
 Default_Big : 1 as DWORD
 Granularity : 1 as DWORD
 BaseHi : 8 as DWORD
end type

union _LDT_ENTRY_HighWord
 Bytes as _LDT_ENTRY_HighWord_Bytes
 Bits as _LDT_ENTRY_HighWord_Bits
end union

type _LDT_ENTRY
 LimitLow as WORD
 BaseLow as WORD
 HighWord as _LDT_ENTRY_HighWord
end type

type LDT_ENTRY as _LDT_ENTRY
type PLDT_ENTRY as _LDT_ENTRY ptr
const EXCEPTION_NONCONTINUABLE = &h1
const EXCEPTION_UNWINDING = &h2
const EXCEPTION_EXIT_UNWIND = &h4
const EXCEPTION_STACK_INVALID = &h8
const EXCEPTION_NESTED_CALL = &h10
const EXCEPTION_TARGET_UNWIND = &h20
const EXCEPTION_COLLIDED_UNWIND = &h40
const EXCEPTION_UNWIND = &h66
const EXCEPTION_MAXIMUM_PARAMETERS = 15

type _EXCEPTION_RECORD_
 ExceptionCode as DWORD
 ExceptionFlags as DWORD
 ExceptionRecord as _EXCEPTION_RECORD ptr
 ExceptionAddress as PVOID
 NumberParameters as DWORD
 ExceptionInformation(0 to 14) as ULONG_PTR
end type

type EXCEPTION_RECORD as _EXCEPTION_RECORD
type PEXCEPTION_RECORD as EXCEPTION_RECORD ptr

type _EXCEPTION_RECORD32
 ExceptionCode as DWORD
 ExceptionFlags as DWORD
 ExceptionRecord as DWORD
 ExceptionAddress as DWORD
 NumberParameters as DWORD
 ExceptionInformation(0 to 14) as DWORD
end type

type EXCEPTION_RECORD32 as _EXCEPTION_RECORD32
type PEXCEPTION_RECORD32 as _EXCEPTION_RECORD32 ptr

type _EXCEPTION_RECORD64
 ExceptionCode as DWORD
 ExceptionFlags as DWORD
 ExceptionRecord as DWORD64
 ExceptionAddress as DWORD64
 NumberParameters as DWORD
 __unusedAlignment as DWORD
 ExceptionInformation(0 to 14) as DWORD64
end type

type EXCEPTION_RECORD64 as _EXCEPTION_RECORD64
type PEXCEPTION_RECORD64 as _EXCEPTION_RECORD64 ptr

type _EXCEPTION_POINTERS
 ExceptionRecord as PEXCEPTION_RECORD
 ContextRecord as PCONTEXT
end type

type EXCEPTION_POINTERS as _EXCEPTION_POINTERS
type PEXCEPTION_POINTERS as _EXCEPTION_POINTERS ptr


type PACCESS_TOKEN as PVOID
type PSECURITY_DESCRIPTOR as PVOID
type PSID as PVOID
type PCLAIMS_BLOB as PVOID
type ACCESS_MASK as DWORD
type PACCESS_MASK as ACCESS_MASK ptr

const DELETE__ = &h00010000
const READ_CONTROL = &h00020000
const WRITE_DAC = &h00040000
const WRITE_OWNER = &h00080000
const SYNCHRONIZE = &h00100000
const STANDARD_RIGHTS_REQUIRED = &h000F0000
const STANDARD_RIGHTS_READ = READ_CONTROL
const STANDARD_RIGHTS_WRITE = READ_CONTROL
const STANDARD_RIGHTS_EXECUTE = READ_CONTROL
const STANDARD_RIGHTS_ALL = &h001F0000
const SPECIFIC_RIGHTS_ALL = &h0000FFFF
const ACCESS_SYSTEM_SECURITY = &h01000000
const MAXIMUM_ALLOWED = &h02000000
const GENERIC_READ = &h80000000
const GENERIC_WRITE = &h40000000
const GENERIC_EXECUTE = &h20000000
const GENERIC_ALL = &h10000000

type _GENERIC_MAPPING
 GenericRead as ACCESS_MASK
 GenericWrite as ACCESS_MASK
 GenericExecute as ACCESS_MASK
 GenericAll as ACCESS_MASK
end type

type GENERIC_MAPPING as _GENERIC_MAPPING
type PGENERIC_MAPPING as GENERIC_MAPPING ptr

type _LUID_AND_ATTRIBUTES field = 4
 Luid as LUID
 Attributes as DWORD
end type

type LUID_AND_ATTRIBUTES as _LUID_AND_ATTRIBUTES
type PLUID_AND_ATTRIBUTES as _LUID_AND_ATTRIBUTES ptr
type PLUID_AND_ATTRIBUTES_ARRAY as LUID_AND_ATTRIBUTES ptr

type _SID_IDENTIFIER_AUTHORITY
 Value(0 to 5) as UBYTE
end type

type SID_IDENTIFIER_AUTHORITY as _SID_IDENTIFIER_AUTHORITY
type PSID_IDENTIFIER_AUTHORITY as _SID_IDENTIFIER_AUTHORITY ptr

type _SID
 Revision as UBYTE
 SubAuthorityCount as UBYTE
 IdentifierAuthority as SID_IDENTIFIER_AUTHORITY
 SubAuthority(0 to 0) as DWORD
end type

type SID as _SID
type PISID as _SID ptr
const SID_REVISION = 1
const SID_MAX_SUB_AUTHORITIES = 15
const SID_RECOMMENDED_SUB_AUTHORITIES = 1
const SID_HASH_SIZE = 32

type _SID_NAME_USE as long
enum
 SidTypeUser = 1
 SidTypeGroup
 SidTypeDomain
 SidTypeAlias
 SidTypeWellKnownGroup
 SidTypeDeletedAccount
 SidTypeInvalid
 SidTypeUnknown
 SidTypeComputer
 SidTypeLabel
end enum

type SID_NAME_USE as _SID_NAME_USE
type PSID_NAME_USE as _SID_NAME_USE ptr

type _SID_AND_ATTRIBUTES
 Sid as PSID
 Attributes as DWORD
end type

type SID_AND_ATTRIBUTES as _SID_AND_ATTRIBUTES
type PSID_AND_ATTRIBUTES as _SID_AND_ATTRIBUTES ptr
type PSID_AND_ATTRIBUTES_ARRAY as SID_AND_ATTRIBUTES ptr
type SID_HASH_ENTRY as ULONG_PTR
type PSID_HASH_ENTRY as ULONG_PTR ptr

type _SID_AND_ATTRIBUTES_HASH
 SidCount as DWORD
 SidAttr as PSID_AND_ATTRIBUTES
 Hash(0 to 31) as SID_HASH_ENTRY
end type

type SID_AND_ATTRIBUTES_HASH as _SID_AND_ATTRIBUTES_HASH
type PSID_AND_ATTRIBUTES_HASH as _SID_AND_ATTRIBUTES_HASH ptr
const SECURITY_NULL_RID = &h000000000
const SECURITY_WORLD_RID = &h000000000
const SECURITY_LOCAL_RID = &h000000000
const SECURITY_LOCAL_LOGON_RID = &h00000001
const SECURITY_CREATOR_OWNER_RID = &h000000000
const SECURITY_CREATOR_GROUP_RID = &h00000001
const SECURITY_CREATOR_OWNER_SERVER_RID = &h00000002
const SECURITY_CREATOR_GROUP_SERVER_RID = &h00000003
const SECURITY_CREATOR_OWNER_RIGHTS_RID = &h00000004
const SECURITY_DIALUP_RID = &h00000001
const SECURITY_NETWORK_RID = &h00000002
const SECURITY_BATCH_RID = &h00000003
const SECURITY_INTERACTIVE_RID = &h00000004
const SECURITY_LOGON_IDS_RID = &h00000005
const SECURITY_LOGON_IDS_RID_COUNT = 3
const SECURITY_SERVICE_RID = &h00000006
const SECURITY_ANONYMOUS_LOGON_RID = &h00000007
const SECURITY_PROXY_RID = &h00000008
const SECURITY_ENTERPRISE_CONTROLLERS_RID = &h00000009
const SECURITY_SERVER_LOGON_RID = SECURITY_ENTERPRISE_CONTROLLERS_RID
const SECURITY_PRINCIPAL_SELF_RID = &h0000000A
const SECURITY_AUTHENTICATED_USER_RID = &h0000000B
const SECURITY_RESTRICTED_CODE_RID = &h0000000C
const SECURITY_TERMINAL_SERVER_RID = &h0000000D
const SECURITY_REMOTE_LOGON_RID = &h0000000E
const SECURITY_THIS_ORGANIZATION_RID = &h0000000F
const SECURITY_IUSER_RID = &h00000011
const SECURITY_LOCAL_SYSTEM_RID = &h00000012
const SECURITY_LOCAL_SERVICE_RID = &h00000013
const SECURITY_NETWORK_SERVICE_RID = &h00000014
const SECURITY_NT_NON_UNIQUE = &h00000015
const SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT = 3
const SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID = &h00000016
const SECURITY_BUILTIN_DOMAIN_RID = &h00000020
const SECURITY_WRITE_RESTRICTED_CODE_RID = &h00000021
const SECURITY_PACKAGE_BASE_RID = &h00000040
const SECURITY_PACKAGE_RID_COUNT = 2
const SECURITY_PACKAGE_NTLM_RID = &h0000000A
const SECURITY_PACKAGE_SCHANNEL_RID = &h0000000E
const SECURITY_PACKAGE_DIGEST_RID = &h00000015
const SECURITY_CRED_TYPE_BASE_RID = &h00000041
const SECURITY_CRED_TYPE_RID_COUNT = 2
const SECURITY_CRED_TYPE_THIS_ORG_CERT_RID = &h00000001
const SECURITY_MIN_BASE_RID = &h00000050
const SECURITY_SERVICE_ID_BASE_RID = &h00000050
const SECURITY_SERVICE_ID_RID_COUNT = 6
const SECURITY_RESERVED_ID_BASE_RID = &h00000051
const SECURITY_APPPOOL_ID_BASE_RID = &h00000052
const SECURITY_APPPOOL_ID_RID_COUNT = 6
const SECURITY_VIRTUALSERVER_ID_BASE_RID = &h00000053
const SECURITY_VIRTUALSERVER_ID_RID_COUNT = 6
const SECURITY_USERMODEDRIVERHOST_ID_BASE_RID = &h00000054
const SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT = 6
const SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID = &h00000055
const SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT = 6
const SECURITY_WMIHOST_ID_BASE_RID = &h00000056
const SECURITY_WMIHOST_ID_RID_COUNT = 6
const SECURITY_TASK_ID_BASE_RID = &h00000057
const SECURITY_NFS_ID_BASE_RID = &h00000058
const SECURITY_COM_ID_BASE_RID = &h00000059
const SECURITY_WINDOW_MANAGER_BASE_RID = &h0000005a
const SECURITY_RDV_GFX_BASE_RID = &h0000005b
const SECURITY_DASHOST_ID_BASE_RID = &h0000005c
const SECURITY_DASHOST_ID_RID_COUNT = 6
const SECURITY_VIRTUALACCOUNT_ID_RID_COUNT = 6
const SECURITY_MAX_BASE_RID = &h0000006f
const SECURITY_MAX_ALWAYS_FILTERED = &h000003E7
const SECURITY_MIN_NEVER_FILTERED = &h000003E8
const SECURITY_OTHER_ORGANIZATION_RID = &h000003E8
const SECURITY_WINDOWSMOBILE_ID_BASE_RID = &h00000070
const DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED = &h000001f0
const DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS = &h000001f1
const DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS = &h000001f2
const FOREST_USER_RID_MAX = &h000001F3
const DOMAIN_USER_RID_ADMIN = &h000001F4
const DOMAIN_USER_RID_GUEST = &h000001F5
const DOMAIN_USER_RID_KRBTGT = &h000001F6
const DOMAIN_USER_RID_MAX = &h000003E7
const DOMAIN_GROUP_RID_ADMINS = &h00000200
const DOMAIN_GROUP_RID_USERS = &h00000201
const DOMAIN_GROUP_RID_GUESTS = &h00000202
const DOMAIN_GROUP_RID_COMPUTERS = &h00000203
const DOMAIN_GROUP_RID_CONTROLLERS = &h00000204
const DOMAIN_GROUP_RID_CERT_ADMINS = &h00000205
const DOMAIN_GROUP_RID_SCHEMA_ADMINS = &h00000206
const DOMAIN_GROUP_RID_ENTERPRISE_ADMINS = &h00000207
const DOMAIN_GROUP_RID_POLICY_ADMINS = &h00000208
const DOMAIN_GROUP_RID_READONLY_CONTROLLERS = &h00000209
const DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS = &h0000020a
const DOMAIN_ALIAS_RID_ADMINS = &h00000220
const DOMAIN_ALIAS_RID_USERS = &h00000221
const DOMAIN_ALIAS_RID_GUESTS = &h00000222
const DOMAIN_ALIAS_RID_POWER_USERS = &h00000223
const DOMAIN_ALIAS_RID_ACCOUNT_OPS = &h00000224
const DOMAIN_ALIAS_RID_SYSTEM_OPS = &h00000225
const DOMAIN_ALIAS_RID_PRINT_OPS = &h00000226
const DOMAIN_ALIAS_RID_BACKUP_OPS = &h00000227
const DOMAIN_ALIAS_RID_REPLICATOR = &h00000228
const DOMAIN_ALIAS_RID_RAS_SERVERS = &h00000229
const DOMAIN_ALIAS_RID_PREW2KCOMPACCESS = &h0000022A
const DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS = &h0000022B
const DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS = &h0000022C
const DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS = &h0000022D
const DOMAIN_ALIAS_RID_MONITORING_USERS = &h0000022E
const DOMAIN_ALIAS_RID_LOGGING_USERS = &h0000022F
const DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS = &h00000230
const DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS = &h00000231
const DOMAIN_ALIAS_RID_DCOM_USERS = &h00000232
const DOMAIN_ALIAS_RID_IUSERS = &h00000238
const DOMAIN_ALIAS_RID_CRYPTO_OPERATORS = &h00000239
const DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP = &h0000023B
const DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP = &h0000023C
const DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP = &h0000023D
const DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP = &h0000023e
const DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS = &h0000023f
const DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS = &h00000240
const DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS = &h00000241
const DOMAIN_ALIAS_RID_HYPER_V_ADMINS = &h00000242
const DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS = &h00000243
const DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS = &h00000244
const SECURITY_APP_PACKAGE_BASE_RID = &h00000002
const SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT = 2
const SECURITY_APP_PACKAGE_RID_COUNT = 8
const SECURITY_CAPABILITY_BASE_RID = &h00000003
const SECURITY_BUILTIN_CAPABILITY_RID_COUNT = 2
const SECURITY_CAPABILITY_RID_COUNT = 5
const SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE = &h00000001
const SECURITY_CAPABILITY_INTERNET_CLIENT = &h00000001
const SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER = &h00000002
const SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER = &h00000003
const SECURITY_CAPABILITY_PICTURES_LIBRARY = &h00000004
const SECURITY_CAPABILITY_VIDEOS_LIBRARY = &h00000005
const SECURITY_CAPABILITY_MUSIC_LIBRARY = &h00000006
const SECURITY_CAPABILITY_DOCUMENTS_LIBRARY = &h00000007
const SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION = &h00000008
const SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES = &h00000009
const SECURITY_CAPABILITY_REMOVABLE_STORAGE = &h0000000a
const SECURITY_CAPABILITY_INTERNET_EXPLORER = &h00001000
const SECURITY_MANDATORY_UNTRUSTED_RID = &h000000000
const SECURITY_MANDATORY_LOW_RID = &h00001000
const SECURITY_MANDATORY_MEDIUM_RID = &h00002000
const SECURITY_MANDATORY_HIGH_RID = &h00003000
const SECURITY_MANDATORY_SYSTEM_RID = &h00004000
const SECURITY_MANDATORY_PROTECTED_PROCESS_RID = &h00005000
const SECURITY_MANDATORY_MAXIMUM_USER_RID = SECURITY_MANDATORY_SYSTEM_RID
const SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT = 1
const SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID = &h00000001
const SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID = &h00000002
const SECURITY_TRUSTED_INSTALLER_RID1 = 956008885
const SECURITY_TRUSTED_INSTALLER_RID2 = 3418522649
const SECURITY_TRUSTED_INSTALLER_RID3 = 1831038044
const SECURITY_TRUSTED_INSTALLER_RID4 = 1853292631
const SECURITY_TRUSTED_INSTALLER_RID5 = 2271478464

type WELL_KNOWN_SID_TYPE as long
enum
 WinNullSid = 0
 WinWorldSid = 1
 WinLocalSid = 2
 WinCreatorOwnerSid = 3
 WinCreatorGroupSid = 4
 WinCreatorOwnerServerSid = 5
 WinCreatorGroupServerSid = 6
 WinNtAuthoritySid = 7
 WinDialupSid = 8
 WinNetworkSid = 9
 WinBatchSid = 10
 WinInteractiveSid = 11
 WinServiceSid = 12
 WinAnonymousSid = 13
 WinProxySid = 14
 WinEnterpriseControllersSid = 15
 WinSelfSid = 16
 WinAuthenticatedUserSid = 17
 WinRestrictedCodeSid = 18
 WinTerminalServerSid = 19
 WinRemoteLogonIdSid = 20
 WinLogonIdsSid = 21
 WinLocalSystemSid = 22
 WinLocalServiceSid = 23
 WinNetworkServiceSid = 24
 WinBuiltinDomainSid = 25
 WinBuiltinAdministratorsSid = 26
 WinBuiltinUsersSid = 27
 WinBuiltinGuestsSid = 28
 WinBuiltinPowerUsersSid = 29
 WinBuiltinAccountOperatorsSid = 30
 WinBuiltinSystemOperatorsSid = 31
 WinBuiltinPrintOperatorsSid = 32
 WinBuiltinBackupOperatorsSid = 33
 WinBuiltinReplicatorSid = 34
 WinBuiltinPreWindows2000CompatibleAccessSid = 35
 WinBuiltinRemoteDesktopUsersSid = 36
 WinBuiltinNetworkConfigurationOperatorsSid = 37
 WinAccountAdministratorSid = 38
 WinAccountGuestSid = 39
 WinAccountKrbtgtSid = 40
 WinAccountDomainAdminsSid = 41
 WinAccountDomainUsersSid = 42
 WinAccountDomainGuestsSid = 43
 WinAccountComputersSid = 44
 WinAccountControllersSid = 45
 WinAccountCertAdminsSid = 46
 WinAccountSchemaAdminsSid = 47
 WinAccountEnterpriseAdminsSid = 48
 WinAccountPolicyAdminsSid = 49
 WinAccountRasAndIasServersSid = 50
 WinNTLMAuthenticationSid = 51
 WinDigestAuthenticationSid = 52
 WinSChannelAuthenticationSid = 53
 WinThisOrganizationSid = 54
 WinOtherOrganizationSid = 55
 WinBuiltinIncomingForestTrustBuildersSid = 56
 WinBuiltinPerfMonitoringUsersSid = 57
 WinBuiltinPerfLoggingUsersSid = 58
 WinBuiltinAuthorizationAccessSid = 59
 WinBuiltinTerminalServerLicenseServersSid = 60
 WinBuiltinDCOMUsersSid = 61
 WinBuiltinIUsersSid = 62
 WinIUserSid = 63
 WinBuiltinCryptoOperatorsSid = 64
 WinUntrustedLabelSid = 65
 WinLowLabelSid = 66
 WinMediumLabelSid = 67
 WinHighLabelSid = 68
 WinSystemLabelSid = 69
 WinWriteRestrictedCodeSid = 70
 WinCreatorOwnerRightsSid = 71
 WinCacheablePrincipalsGroupSid = 72
 WinNonCacheablePrincipalsGroupSid = 73
 WinEnterpriseReadonlyControllersSid = 74
 WinAccountReadonlyControllersSid = 75
 WinBuiltinEventLogReadersGroup = 76
 WinNewEnterpriseReadonlyControllersSid = 77
 WinBuiltinCertSvcDComAccessGroup = 78
 WinMediumPlusLabelSid = 79
 WinLocalLogonSid = 80
 WinConsoleLogonSid = 81
 WinThisOrganizationCertificateSid = 82
 WinApplicationPackageAuthoritySid = 83
 WinBuiltinAnyPackageSid = 84
 WinCapabilityInternetClientSid = 85
 WinCapabilityInternetClientServerSid = 86
 WinCapabilityPrivateNetworkClientServerSid = 87
 WinCapabilityPicturesLibrarySid = 88
 WinCapabilityVideosLibrarySid = 89
 WinCapabilityMusicLibrarySid = 90
 WinCapabilityDocumentsLibrarySid = 91
 WinCapabilitySharedUserCertificatesSid = 92
 WinCapabilityEnterpriseAuthenticationSid = 93
 WinCapabilityRemovableStorageSid = 94
 WinBuiltinRDSRemoteAccessServersSid = 95
 WinBuiltinRDSEndpointServersSid = 96
 WinBuiltinRDSManagementServersSid = 97
 WinUserModeDriversSid = 98
 WinBuiltinHyperVAdminsSid = 99
 WinAccountCloneableControllersSid = 100
 WinBuiltinAccessControlAssistanceOperatorsSid = 101
 WinBuiltinRemoteManagementUsersSid = 102
 WinAuthenticationAuthorityAssertedSid = 103
 WinAuthenticationServiceAssertedSid = 104
end enum

const SE_GROUP_MANDATORY = &h00000001
const SE_GROUP_ENABLED_BY_DEFAULT = &h00000002
const SE_GROUP_ENABLED = &h00000004
const SE_GROUP_OWNER = &h00000008
const SE_GROUP_USE_FOR_DENY_ONLY = &h00000010
const SE_GROUP_INTEGRITY = &h00000020
const SE_GROUP_INTEGRITY_ENABLED = &h00000040
const SE_GROUP_LOGON_ID = &hC0000000
const SE_GROUP_RESOURCE = &h20000000
const SE_GROUP_VALID_ATTRIBUTES = (((((((SE_GROUP_MANDATORY or SE_GROUP_ENABLED_BY_DEFAULT) or SE_GROUP_ENABLED) or SE_GROUP_OWNER) or SE_GROUP_USE_FOR_DENY_ONLY) or SE_GROUP_LOGON_ID) or SE_GROUP_RESOURCE) or SE_GROUP_INTEGRITY) or SE_GROUP_INTEGRITY_ENABLED
const ACL_REVISION = 2
const ACL_REVISION_DS = 4
const ACL_REVISION1 = 1
const ACL_REVISION2 = 2
const MIN_ACL_REVISION = ACL_REVISION2
const ACL_REVISION3 = 3
const ACL_REVISION4 = 4
const MAX_ACL_REVISION = ACL_REVISION4

type _ACL
 AclRevision as UBYTE
 Sbz1 as UBYTE
 AclSize as WORD
 AceCount as WORD
 Sbz2 as WORD
end type

type ACL as _ACL
type PACL as ACL ptr

type _ACE_HEADER
 AceType as UBYTE
 AceFlags as UBYTE
 AceSize as WORD
end type

type ACE_HEADER as _ACE_HEADER
type PACE_HEADER as ACE_HEADER ptr
const ACCESS_MIN_MS_ACE_TYPE = &h00
const ACCESS_ALLOWED_ACE_TYPE = &h00
const ACCESS_DENIED_ACE_TYPE = &h1
const SYSTEM_AUDIT_ACE_TYPE = &h2
const SYSTEM_ALARM_ACE_TYPE = &h3
const ACCESS_MAX_MS_V2_ACE_TYPE = &h3
const ACCESS_ALLOWED_COMPOUND_ACE_TYPE = &h4
const ACCESS_MAX_MS_V3_ACE_TYPE = &h4
const ACCESS_MIN_MS_OBJECT_ACE_TYPE = &h5
const ACCESS_ALLOWED_OBJECT_ACE_TYPE = &h5
const ACCESS_DENIED_OBJECT_ACE_TYPE = &h6
const SYSTEM_AUDIT_OBJECT_ACE_TYPE = &h7
const SYSTEM_ALARM_OBJECT_ACE_TYPE = &h8
const ACCESS_MAX_MS_OBJECT_ACE_TYPE = &h8
const ACCESS_MAX_MS_V4_ACE_TYPE = &h8
const ACCESS_MAX_MS_ACE_TYPE = &h8
const ACCESS_ALLOWED_CALLBACK_ACE_TYPE = &h9
const ACCESS_DENIED_CALLBACK_ACE_TYPE = &hA
const ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE = &hB
const ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE = &hC
const SYSTEM_AUDIT_CALLBACK_ACE_TYPE = &hD
const SYSTEM_ALARM_CALLBACK_ACE_TYPE = &hE
const SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE = &hF
const SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE = &h10
const SYSTEM_MANDATORY_LABEL_ACE_TYPE = &h11
const SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE = &h12
const SYSTEM_SCOPED_POLICY_ID_ACE_TYPE = &h13
const ACCESS_MAX_MS_V5_ACE_TYPE = &h13
const OBJECT_INHERIT_ACE = &h1
const CONTAINER_INHERIT_ACE = &h2
const NO_PROPAGATE_INHERIT_ACE = &h4
const INHERIT_ONLY_ACE = &h8
const INHERITED_ACE = &h10
const VALID_INHERIT_FLAGS = &h1F
const SUCCESSFUL_ACCESS_ACE_FLAG = &h40
const FAILED_ACCESS_ACE_FLAG = &h80

type _ACCESS_ALLOWED_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type ACCESS_ALLOWED_ACE as _ACCESS_ALLOWED_ACE
type PACCESS_ALLOWED_ACE as ACCESS_ALLOWED_ACE ptr

type _ACCESS_DENIED_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type ACCESS_DENIED_ACE as _ACCESS_DENIED_ACE
type PACCESS_DENIED_ACE as ACCESS_DENIED_ACE ptr

type _SYSTEM_AUDIT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type SYSTEM_AUDIT_ACE as _SYSTEM_AUDIT_ACE
type PSYSTEM_AUDIT_ACE as SYSTEM_AUDIT_ACE ptr

type _SYSTEM_ALARM_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type SYSTEM_ALARM_ACE as _SYSTEM_ALARM_ACE
type PSYSTEM_ALARM_ACE as SYSTEM_ALARM_ACE ptr

type _SYSTEM_RESOURCE_ATTRIBUTE_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type SYSTEM_RESOURCE_ATTRIBUTE_ACE as _SYSTEM_RESOURCE_ATTRIBUTE_ACE
type PSYSTEM_RESOURCE_ATTRIBUTE_ACE as _SYSTEM_RESOURCE_ATTRIBUTE_ACE ptr

type _SYSTEM_SCOPED_POLICY_ID_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type SYSTEM_SCOPED_POLICY_ID_ACE as _SYSTEM_SCOPED_POLICY_ID_ACE
type PSYSTEM_SCOPED_POLICY_ID_ACE as _SYSTEM_SCOPED_POLICY_ID_ACE ptr

type _SYSTEM_MANDATORY_LABEL_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type SYSTEM_MANDATORY_LABEL_ACE as _SYSTEM_MANDATORY_LABEL_ACE
type PSYSTEM_MANDATORY_LABEL_ACE as _SYSTEM_MANDATORY_LABEL_ACE ptr
const SYSTEM_MANDATORY_LABEL_NO_WRITE_UP = &h1
const SYSTEM_MANDATORY_LABEL_NO_READ_UP = &h2
const SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP = &h4
const SYSTEM_MANDATORY_LABEL_VALID_MASK = (SYSTEM_MANDATORY_LABEL_NO_WRITE_UP or SYSTEM_MANDATORY_LABEL_NO_READ_UP) or SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP

type _ACCESS_ALLOWED_OBJECT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 Flags as DWORD
 ObjectType as GUID
 InheritedObjectType as GUID
 SidStart as DWORD
end type

type ACCESS_ALLOWED_OBJECT_ACE as _ACCESS_ALLOWED_OBJECT_ACE
type PACCESS_ALLOWED_OBJECT_ACE as _ACCESS_ALLOWED_OBJECT_ACE ptr

type _ACCESS_DENIED_OBJECT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 Flags as DWORD
 ObjectType as GUID
 InheritedObjectType as GUID
 SidStart as DWORD
end type

type ACCESS_DENIED_OBJECT_ACE as _ACCESS_DENIED_OBJECT_ACE
type PACCESS_DENIED_OBJECT_ACE as _ACCESS_DENIED_OBJECT_ACE ptr

type _SYSTEM_AUDIT_OBJECT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 Flags as DWORD
 ObjectType as GUID
 InheritedObjectType as GUID
 SidStart as DWORD
end type

type SYSTEM_AUDIT_OBJECT_ACE as _SYSTEM_AUDIT_OBJECT_ACE
type PSYSTEM_AUDIT_OBJECT_ACE as _SYSTEM_AUDIT_OBJECT_ACE ptr

type _SYSTEM_ALARM_OBJECT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 Flags as DWORD
 ObjectType as GUID
 InheritedObjectType as GUID
 SidStart as DWORD
end type

type SYSTEM_ALARM_OBJECT_ACE as _SYSTEM_ALARM_OBJECT_ACE
type PSYSTEM_ALARM_OBJECT_ACE as _SYSTEM_ALARM_OBJECT_ACE ptr

type _ACCESS_ALLOWED_CALLBACK_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type ACCESS_ALLOWED_CALLBACK_ACE as _ACCESS_ALLOWED_CALLBACK_ACE
type PACCESS_ALLOWED_CALLBACK_ACE as _ACCESS_ALLOWED_CALLBACK_ACE ptr

type _ACCESS_DENIED_CALLBACK_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type ACCESS_DENIED_CALLBACK_ACE as _ACCESS_DENIED_CALLBACK_ACE
type PACCESS_DENIED_CALLBACK_ACE as _ACCESS_DENIED_CALLBACK_ACE ptr

type _SYSTEM_AUDIT_CALLBACK_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type SYSTEM_AUDIT_CALLBACK_ACE as _SYSTEM_AUDIT_CALLBACK_ACE
type PSYSTEM_AUDIT_CALLBACK_ACE as _SYSTEM_AUDIT_CALLBACK_ACE ptr

type _SYSTEM_ALARM_CALLBACK_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type SYSTEM_ALARM_CALLBACK_ACE as _SYSTEM_ALARM_CALLBACK_ACE
type PSYSTEM_ALARM_CALLBACK_ACE as _SYSTEM_ALARM_CALLBACK_ACE ptr

type _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 Flags as DWORD
 ObjectType as GUID
 InheritedObjectType as GUID
 SidStart as DWORD
end type

type ACCESS_ALLOWED_CALLBACK_OBJECT_ACE as _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
type PACCESS_ALLOWED_CALLBACK_OBJECT_ACE as _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE ptr

type _ACCESS_DENIED_CALLBACK_OBJECT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 Flags as DWORD
 ObjectType as GUID
 InheritedObjectType as GUID
 SidStart as DWORD
end type

type ACCESS_DENIED_CALLBACK_OBJECT_ACE as _ACCESS_DENIED_CALLBACK_OBJECT_ACE
type PACCESS_DENIED_CALLBACK_OBJECT_ACE as _ACCESS_DENIED_CALLBACK_OBJECT_ACE ptr

type _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 Flags as DWORD
 ObjectType as GUID
 InheritedObjectType as GUID
 SidStart as DWORD
end type

type SYSTEM_AUDIT_CALLBACK_OBJECT_ACE as _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
type PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE as _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE ptr

type _SYSTEM_ALARM_CALLBACK_OBJECT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 Flags as DWORD
 ObjectType as GUID
 InheritedObjectType as GUID
 SidStart as DWORD
end type

type SYSTEM_ALARM_CALLBACK_OBJECT_ACE as _SYSTEM_ALARM_CALLBACK_OBJECT_ACE
type PSYSTEM_ALARM_CALLBACK_OBJECT_ACE as _SYSTEM_ALARM_CALLBACK_OBJECT_ACE ptr
const ACE_OBJECT_TYPE_PRESENT = &h1
const ACE_INHERITED_OBJECT_TYPE_PRESENT = &h2

type _ACL_INFORMATION_CLASS as long
enum
 AclRevisionInformation = 1
 AclSizeInformation
end enum

type ACL_INFORMATION_CLASS as _ACL_INFORMATION_CLASS

type _ACL_REVISION_INFORMATION
 AclRevision as DWORD
end type

type ACL_REVISION_INFORMATION as _ACL_REVISION_INFORMATION
type PACL_REVISION_INFORMATION as ACL_REVISION_INFORMATION ptr

type _ACL_SIZE_INFORMATION
 AceCount as DWORD
 AclBytesInUse as DWORD
 AclBytesFree as DWORD
end type

type ACL_SIZE_INFORMATION as _ACL_SIZE_INFORMATION
type PACL_SIZE_INFORMATION as ACL_SIZE_INFORMATION ptr
const SECURITY_DESCRIPTOR_REVISION = 1
const SECURITY_DESCRIPTOR_REVISION1 = 1
type SECURITY_DESCRIPTOR_CONTROL as WORD
type PSECURITY_DESCRIPTOR_CONTROL as WORD ptr
const SE_OWNER_DEFAULTED = &h0001
const SE_GROUP_DEFAULTED = &h0002
const SE_DACL_PRESENT = &h0004
const SE_DACL_DEFAULTED = &h0008
const SE_SACL_PRESENT = &h0010
const SE_SACL_DEFAULTED = &h0020
const SE_DACL_AUTO_INHERIT_REQ = &h0100
const SE_SACL_AUTO_INHERIT_REQ = &h0200
const SE_DACL_AUTO_INHERITED = &h0400
const SE_SACL_AUTO_INHERITED = &h0800
const SE_DACL_PROTECTED = &h1000
const SE_SACL_PROTECTED = &h2000
const SE_RM_CONTROL_VALID = &h4000
const SE_SELF_RELATIVE = &h8000

type _SECURITY_DESCRIPTOR_RELATIVE
 Revision as UBYTE
 Sbz1 as UBYTE
 Control as SECURITY_DESCRIPTOR_CONTROL
 Owner as DWORD
 Group as DWORD
 Sacl as DWORD
 Dacl as DWORD
end type

type SECURITY_DESCRIPTOR_RELATIVE as _SECURITY_DESCRIPTOR_RELATIVE
type PISECURITY_DESCRIPTOR_RELATIVE as _SECURITY_DESCRIPTOR_RELATIVE ptr

type _SECURITY_DESCRIPTOR
 Revision as UBYTE
 Sbz1 as UBYTE
 Control as SECURITY_DESCRIPTOR_CONTROL
 Owner as PSID
 Group as PSID
 Sacl as PACL
 Dacl as PACL
end type

type SECURITY_DESCRIPTOR as _SECURITY_DESCRIPTOR
type PISECURITY_DESCRIPTOR as _SECURITY_DESCRIPTOR ptr

type _OBJECT_TYPE_LIST
 Level as WORD
 Sbz as WORD
 ObjectType as GUID ptr
end type

type OBJECT_TYPE_LIST as _OBJECT_TYPE_LIST
type POBJECT_TYPE_LIST as _OBJECT_TYPE_LIST ptr
const ACCESS_OBJECT_GUID = 0
const ACCESS_PROPERTY_SET_GUID = 1
const ACCESS_PROPERTY_GUID = 2
const ACCESS_MAX_LEVEL = 4

type _AUDIT_EVENT_TYPE as long
enum
 AuditEventObjectAccess
 AuditEventDirectoryServiceAccess
end enum

type AUDIT_EVENT_TYPE as _AUDIT_EVENT_TYPE
type PAUDIT_EVENT_TYPE as _AUDIT_EVENT_TYPE ptr
const AUDIT_ALLOW_NO_PRIVILEGE = &h1
const SE_PRIVILEGE_ENABLED_BY_DEFAULT = &h00000001
const SE_PRIVILEGE_ENABLED = &h00000002
const SE_PRIVILEGE_REMOVED = &h00000004
const SE_PRIVILEGE_USED_FOR_ACCESS = &h80000000
const SE_PRIVILEGE_VALID_ATTRIBUTES = ((SE_PRIVILEGE_ENABLED_BY_DEFAULT or SE_PRIVILEGE_ENABLED) or SE_PRIVILEGE_REMOVED) or SE_PRIVILEGE_USED_FOR_ACCESS
const PRIVILEGE_SET_ALL_NECESSARY = 1

type _PRIVILEGE_SET
 PrivilegeCount as DWORD
 Control as DWORD
 Privilege(0 to 0) as LUID_AND_ATTRIBUTES
end type

type PRIVILEGE_SET as _PRIVILEGE_SET
type PPRIVILEGE_SET as _PRIVILEGE_SET ptr
const ACCESS_REASON_TYPE_MASK = &h00ff0000
const ACCESS_REASON_DATA_MASK = &h0000ffff
const ACCESS_REASON_STAGING_MASK = &h80000000
const ACCESS_REASON_EXDATA_MASK = &h7f000000

type _ACCESS_REASON_TYPE as long
enum
 AccessReasonNone = &h000000000
 AccessReasonAllowedAce = &h00010000
 AccessReasonDeniedAce = &h00020000
 AccessReasonAllowedParentAce = &h00030000
 AccessReasonDeniedParentAce = &h00040000
 AccessReasonNotGrantedByCape = &h00050000
 AccessReasonNotGrantedByParentCape = &h00060000
 AccessReasonNotGrantedToAppContainer = &h00070000
 AccessReasonMissingPrivilege = &h00100000
 AccessReasonFromPrivilege = &h00200000
 AccessReasonIntegrityLevel = &h00300000
 AccessReasonOwnership = &h00400000
 AccessReasonNullDacl = &h00500000
 AccessReasonEmptyDacl = &h00600000
 AccessReasonNoSD = &h00700000
 AccessReasonNoGrant = &h00800000
end enum

type ACCESS_REASON_TYPE as _ACCESS_REASON_TYPE
type ACCESS_REASON as DWORD

type _ACCESS_REASONS
 Data(0 to 31) as ACCESS_REASON
end type

type ACCESS_REASONS as _ACCESS_REASONS
type PACCESS_REASONS as _ACCESS_REASONS ptr
const SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE = &h00000001
const SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE = &h00000002
const SE_SECURITY_DESCRIPTOR_VALID_FLAGS = &h00000003

type _SE_SECURITY_DESCRIPTOR
 Size as DWORD
 Flags as DWORD
 SecurityDescriptor as PSECURITY_DESCRIPTOR
end type

type SE_SECURITY_DESCRIPTOR as _SE_SECURITY_DESCRIPTOR
type PSE_SECURITY_DESCRIPTOR as _SE_SECURITY_DESCRIPTOR ptr

type _SE_ACCESS_REQUEST
 Size as DWORD
 SeSecurityDescriptor as PSE_SECURITY_DESCRIPTOR
 DesiredAccess as ACCESS_MASK
 PreviouslyGrantedAccess as ACCESS_MASK
 PrincipalSelfSid as PSID
 GenericMapping as PGENERIC_MAPPING
 ObjectTypeListCount as DWORD
 ObjectTypeList as POBJECT_TYPE_LIST
end type

type SE_ACCESS_REQUEST as _SE_ACCESS_REQUEST
type PSE_ACCESS_REQUEST as _SE_ACCESS_REQUEST ptr

type _SE_ACCESS_REPLY
 Size as DWORD
 ResultListCount as DWORD
 GrantedAccess as PACCESS_MASK
 AccessStatus as PDWORD
 AccessReason as PACCESS_REASONS
 Privileges as PPRIVILEGE_SET ptr
end type

type SE_ACCESS_REPLY as _SE_ACCESS_REPLY
type PSE_ACCESS_REPLY as _SE_ACCESS_REPLY ptr

type _SECURITY_IMPERSONATION_LEVEL as long
enum
 SecurityAnonymous
 SecurityIdentification
 SecurityImpersonation
 SecurityDelegation
end enum

type SECURITY_IMPERSONATION_LEVEL as _SECURITY_IMPERSONATION_LEVEL
type PSECURITY_IMPERSONATION_LEVEL as _SECURITY_IMPERSONATION_LEVEL ptr
const SECURITY_MAX_IMPERSONATION_LEVEL = SecurityDelegation
const SECURITY_MIN_IMPERSONATION_LEVEL = SecurityAnonymous
const DEFAULT_IMPERSONATION_LEVEL = SecurityImpersonation
const TOKEN_ASSIGN_PRIMARY = &h0001
const TOKEN_DUPLICATE = &h0002
const TOKEN_IMPERSONATE = &h0004
const TOKEN_QUERY = &h0008
const TOKEN_QUERY_SOURCE = &h0010
const TOKEN_ADJUST_PRIVILEGES = &h0020
const TOKEN_ADJUST_GROUPS = &h0040
const TOKEN_ADJUST_DEFAULT = &h0080
const TOKEN_ADJUST_SESSIONID = &h0100
const TOKEN_ALL_ACCESS_P = (((((((STANDARD_RIGHTS_REQUIRED or TOKEN_ASSIGN_PRIMARY) or TOKEN_DUPLICATE) or TOKEN_IMPERSONATE) or TOKEN_QUERY) or TOKEN_QUERY_SOURCE) or TOKEN_ADJUST_PRIVILEGES) or TOKEN_ADJUST_GROUPS) or TOKEN_ADJUST_DEFAULT
const TOKEN_ALL_ACCESS = TOKEN_ALL_ACCESS_P or TOKEN_ADJUST_SESSIONID
const TOKEN_READ = STANDARD_RIGHTS_READ or TOKEN_QUERY
const TOKEN_WRITE = ((STANDARD_RIGHTS_WRITE or TOKEN_ADJUST_PRIVILEGES) or TOKEN_ADJUST_GROUPS) or TOKEN_ADJUST_DEFAULT
const TOKEN_EXECUTE = STANDARD_RIGHTS_EXECUTE

type _TOKEN_TYPE as long
enum
 TokenPrimary = 1
 TokenImpersonation
end enum

type TOKEN_TYPE as _TOKEN_TYPE
type PTOKEN_TYPE as TOKEN_TYPE ptr

type _TOKEN_ELEVATION_TYPE as long
enum
 TokenElevationTypeDefault = 1
 TokenElevationTypeFull
 TokenElevationTypeLimited
end enum

type TOKEN_ELEVATION_TYPE as _TOKEN_ELEVATION_TYPE
type PTOKEN_ELEVATION_TYPE as _TOKEN_ELEVATION_TYPE ptr

type _TOKEN_INFORMATION_CLASS as long
enum
 TokenUser = 1
 TokenGroups
 TokenPrivileges
 TokenOwner
 TokenPrimaryGroup
 TokenDefaultDacl
 TokenSource
 TokenType
 TokenImpersonationLevel
 TokenStatistics
 TokenRestrictedSids
 TokenSessionId
 TokenGroupsAndPrivileges
 TokenSessionReference
 TokenSandBoxInert
 TokenAuditPolicy
 TokenOrigin
 TokenElevationType
 TokenLinkedToken
 TokenElevation
 TokenHasRestrictions
 TokenAccessInformation
 TokenVirtualizationAllowed
 TokenVirtualizationEnabled
 TokenIntegrityLevel
 TokenUIAccess
 TokenMandatoryPolicy
 TokenLogonSid
 TokenIsAppContainer
 TokenCapabilities
 TokenAppContainerSid
 TokenAppContainerNumber
 TokenUserClaimAttributes
 TokenDeviceClaimAttributes
 TokenRestrictedUserClaimAttributes
 TokenRestrictedDeviceClaimAttributes
 TokenDeviceGroups
 TokenRestrictedDeviceGroups
 TokenSecurityAttributes
 TokenIsRestricted
 MaxTokenInfoClass
end enum

type TOKEN_INFORMATION_CLASS as _TOKEN_INFORMATION_CLASS
type PTOKEN_INFORMATION_CLASS as _TOKEN_INFORMATION_CLASS ptr

type _TOKEN_USER
 User as SID_AND_ATTRIBUTES
end type

type TOKEN_USER as _TOKEN_USER
type PTOKEN_USER as _TOKEN_USER ptr

type _TOKEN_GROUPS
 GroupCount as DWORD
 Groups(0 to 0) as SID_AND_ATTRIBUTES
end type

type TOKEN_GROUPS as _TOKEN_GROUPS
type PTOKEN_GROUPS as _TOKEN_GROUPS ptr

type _TOKEN_PRIVILEGES
 PrivilegeCount as DWORD
 Privileges(0 to 0) as LUID_AND_ATTRIBUTES
end type

type TOKEN_PRIVILEGES as _TOKEN_PRIVILEGES
type PTOKEN_PRIVILEGES as _TOKEN_PRIVILEGES ptr

type _TOKEN_OWNER
 Owner as PSID
end type

type TOKEN_OWNER as _TOKEN_OWNER
type PTOKEN_OWNER as _TOKEN_OWNER ptr

type _TOKEN_PRIMARY_GROUP
 PrimaryGroup as PSID
end type

type TOKEN_PRIMARY_GROUP as _TOKEN_PRIMARY_GROUP
type PTOKEN_PRIMARY_GROUP as _TOKEN_PRIMARY_GROUP ptr

type _TOKEN_DEFAULT_DACL
 DefaultDacl as PACL
end type

type TOKEN_DEFAULT_DACL as _TOKEN_DEFAULT_DACL
type PTOKEN_DEFAULT_DACL as _TOKEN_DEFAULT_DACL ptr

type _TOKEN_USER_CLAIMS
 UserClaims as PCLAIMS_BLOB
end type

type TOKEN_USER_CLAIMS as _TOKEN_USER_CLAIMS
type PTOKEN_USER_CLAIMS as _TOKEN_USER_CLAIMS ptr

type _TOKEN_DEVICE_CLAIMS
 DeviceClaims as PCLAIMS_BLOB
end type

type TOKEN_DEVICE_CLAIMS as _TOKEN_DEVICE_CLAIMS
type PTOKEN_DEVICE_CLAIMS as _TOKEN_DEVICE_CLAIMS ptr

type _TOKEN_GROUPS_AND_PRIVILEGES
 SidCount as DWORD
 SidLength as DWORD
 Sids as PSID_AND_ATTRIBUTES
 RestrictedSidCount as DWORD
 RestrictedSidLength as DWORD
 RestrictedSids as PSID_AND_ATTRIBUTES
 PrivilegeCount as DWORD
 PrivilegeLength as DWORD
 Privileges as PLUID_AND_ATTRIBUTES
 AuthenticationId as LUID
end type

type TOKEN_GROUPS_AND_PRIVILEGES as _TOKEN_GROUPS_AND_PRIVILEGES
type PTOKEN_GROUPS_AND_PRIVILEGES as _TOKEN_GROUPS_AND_PRIVILEGES ptr

type _TOKEN_LINKED_TOKEN
 LinkedToken as HANDLE
end type

type TOKEN_LINKED_TOKEN as _TOKEN_LINKED_TOKEN
type PTOKEN_LINKED_TOKEN as _TOKEN_LINKED_TOKEN ptr

type _TOKEN_ELEVATION
 TokenIsElevated as DWORD
end type

type TOKEN_ELEVATION as _TOKEN_ELEVATION
type PTOKEN_ELEVATION as _TOKEN_ELEVATION ptr

type _TOKEN_MANDATORY_LABEL
 Label as SID_AND_ATTRIBUTES
end type

type TOKEN_MANDATORY_LABEL as _TOKEN_MANDATORY_LABEL
type PTOKEN_MANDATORY_LABEL as _TOKEN_MANDATORY_LABEL ptr
const TOKEN_MANDATORY_POLICY_OFF = &h00
const TOKEN_MANDATORY_POLICY_NO_WRITE_UP = &h1
const TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN = &h2
const TOKEN_MANDATORY_POLICY_VALID_MASK = TOKEN_MANDATORY_POLICY_NO_WRITE_UP or TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN

type _TOKEN_MANDATORY_POLICY
 Policy as DWORD
end type

type TOKEN_MANDATORY_POLICY as _TOKEN_MANDATORY_POLICY
type PTOKEN_MANDATORY_POLICY as _TOKEN_MANDATORY_POLICY ptr

type _TOKEN_ACCESS_INFORMATION
 SidHash as PSID_AND_ATTRIBUTES_HASH
 RestrictedSidHash as PSID_AND_ATTRIBUTES_HASH
 Privileges as PTOKEN_PRIVILEGES
 AuthenticationId as LUID
 TokenType as TOKEN_TYPE
 ImpersonationLevel as SECURITY_IMPERSONATION_LEVEL
 MandatoryPolicy as TOKEN_MANDATORY_POLICY
 Flags as DWORD
 AppContainerNumber as DWORD
 PackageSid as PSID
 CapabilitiesHash as PSID_AND_ATTRIBUTES_HASH
end type

type TOKEN_ACCESS_INFORMATION as _TOKEN_ACCESS_INFORMATION
type PTOKEN_ACCESS_INFORMATION as _TOKEN_ACCESS_INFORMATION ptr
const POLICY_AUDIT_SUBCATEGORY_COUNT = 56

type _TOKEN_AUDIT_POLICY
 PerUserPolicy(0 to ((56 shr 1) + 1) - 1) as UCHAR
end type

type TOKEN_AUDIT_POLICY as _TOKEN_AUDIT_POLICY
type PTOKEN_AUDIT_POLICY as _TOKEN_AUDIT_POLICY ptr
const TOKEN_SOURCE_LENGTH = 8

type _TOKEN_SOURCE
 SourceName as zstring * 8
 SourceIdentifier as LUID
end type

type TOKEN_SOURCE as _TOKEN_SOURCE
type PTOKEN_SOURCE as _TOKEN_SOURCE ptr

type _TOKEN_STATISTICS
 TokenId as LUID
 AuthenticationId as LUID
 ExpirationTime as LARGE_INTEGER
 TokenType as TOKEN_TYPE
 ImpersonationLevel as SECURITY_IMPERSONATION_LEVEL
 DynamicCharged as DWORD
 DynamicAvailable as DWORD
 GroupCount as DWORD
 PrivilegeCount as DWORD
 ModifiedId as LUID
end type

type TOKEN_STATISTICS as _TOKEN_STATISTICS
type PTOKEN_STATISTICS as _TOKEN_STATISTICS ptr

type _TOKEN_CONTROL
 TokenId as LUID
 AuthenticationId as LUID
 ModifiedId as LUID
 TokenSource as TOKEN_SOURCE
end type

type TOKEN_CONTROL as _TOKEN_CONTROL
type PTOKEN_CONTROL as _TOKEN_CONTROL ptr

type _TOKEN_ORIGIN
 OriginatingLogonSession as LUID
end type

type TOKEN_ORIGIN as _TOKEN_ORIGIN
type PTOKEN_ORIGIN as _TOKEN_ORIGIN ptr

type _MANDATORY_LEVEL as long
enum
 MandatoryLevelUntrusted = 0
 MandatoryLevelLow
 MandatoryLevelMedium
 MandatoryLevelHigh
 MandatoryLevelSystem
 MandatoryLevelSecureProcess
 MandatoryLevelCount
end enum

type MANDATORY_LEVEL as _MANDATORY_LEVEL
type PMANDATORY_LEVEL as _MANDATORY_LEVEL ptr

type _TOKEN_APPCONTAINER_INFORMATION
 TokenAppContainer as PSID
end type

type TOKEN_APPCONTAINER_INFORMATION as _TOKEN_APPCONTAINER_INFORMATION
type PTOKEN_APPCONTAINER_INFORMATION as _TOKEN_APPCONTAINER_INFORMATION ptr
const CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID = &h000
const CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64 = &h01
const CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64 = &h02
const CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING = &h03
const CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN = &h04
const CLAIM_SECURITY_ATTRIBUTE_TYPE_SID = &h05
const CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN = &h06

type _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
 Version as DWORD64
 Name as PWSTR
end type

type CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE as _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
type PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE as _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE ptr

type _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
 pValue as PVOID
 ValueLength as DWORD
end type

type CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE as _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
type PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE as _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE ptr
const CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING = &h10
const CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE = &h0001
const CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE = &h0002
const CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY = &h0004
const CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT = &h0008
const CLAIM_SECURITY_ATTRIBUTE_DISABLED = &h0010
const CLAIM_SECURITY_ATTRIBUTE_MANDATORY = &h0020
const CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS = ((((CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE or CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE) or CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY) or CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT) or CLAIM_SECURITY_ATTRIBUTE_DISABLED) or CLAIM_SECURITY_ATTRIBUTE_MANDATORY
const CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS = &hffff0000

union _CLAIM_SECURITY_ATTRIBUTE_V1_Values
 pInt64 as PLONG64
 pUint64 as PDWORD64
 ppString as PWSTR ptr
 pFqbn as PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
 pOctetString as PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
end union

type _CLAIM_SECURITY_ATTRIBUTE_V1
 Name as PWSTR
 ValueType as WORD
 Reserved as WORD
 Flags as DWORD
 ValueCount as DWORD
 Values as _CLAIM_SECURITY_ATTRIBUTE_V1_Values
end type

type CLAIM_SECURITY_ATTRIBUTE_V1 as _CLAIM_SECURITY_ATTRIBUTE_V1
type PCLAIM_SECURITY_ATTRIBUTE_V1 as _CLAIM_SECURITY_ATTRIBUTE_V1 ptr

union _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1_Values
 pInt64(0 to 0) as DWORD
 pUint64(0 to 0) as DWORD
 ppString(0 to 0) as DWORD
 pFqbn(0 to 0) as DWORD
 pOctetString(0 to 0) as DWORD
end union

type _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
 Name as DWORD
 ValueType as WORD
 Reserved as WORD
 Flags as DWORD
 ValueCount as DWORD
 Values as _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1_Values
end type

type CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 as _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
type PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 as _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 ptr
const CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1 = 1
const CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION = CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1

union _CLAIM_SECURITY_ATTRIBUTES_INFORMATION_Attribute
 pAttributeV1 as PCLAIM_SECURITY_ATTRIBUTE_V1
end union

type _CLAIM_SECURITY_ATTRIBUTES_INFORMATION
 Version as WORD
 Reserved as WORD
 AttributeCount as DWORD
 Attribute as _CLAIM_SECURITY_ATTRIBUTES_INFORMATION_Attribute
end type

type CLAIM_SECURITY_ATTRIBUTES_INFORMATION as _CLAIM_SECURITY_ATTRIBUTES_INFORMATION
type PCLAIM_SECURITY_ATTRIBUTES_INFORMATION as _CLAIM_SECURITY_ATTRIBUTES_INFORMATION ptr
const SECURITY_DYNAMIC_TRACKING = CTRUE
const SECURITY_STATIC_TRACKING = FALSE
type SECURITY_CONTEXT_TRACKING_MODE as WINBOOLEAN
type PSECURITY_CONTEXT_TRACKING_MODE as WINBOOLEAN ptr

type _SECURITY_QUALITY_OF_SERVICE
 Length as DWORD
 ImpersonationLevel as SECURITY_IMPERSONATION_LEVEL
 ContextTrackingMode as SECURITY_CONTEXT_TRACKING_MODE
 EffectiveOnly as WINBOOLEAN
end type

type SECURITY_QUALITY_OF_SERVICE as _SECURITY_QUALITY_OF_SERVICE
type PSECURITY_QUALITY_OF_SERVICE as _SECURITY_QUALITY_OF_SERVICE ptr

type _SE_IMPERSONATION_STATE
 Token as PACCESS_TOKEN
 CopyOnOpen as WINBOOLEAN
 EffectiveOnly as WINBOOLEAN
 Level as SECURITY_IMPERSONATION_LEVEL
end type

type SE_IMPERSONATION_STATE as _SE_IMPERSONATION_STATE
type PSE_IMPERSONATION_STATE as _SE_IMPERSONATION_STATE ptr
const DISABLE_MAX_PRIVILEGE = &h1
const SANDBOX_INERT = &h2
const LUA_TOKEN = &h4
const WRITE_RESTRICTED = &h8
type SECURITY_INFORMATION as DWORD
type PSECURITY_INFORMATION as DWORD ptr
const OWNER_SECURITY_INFORMATION = &h00000001
const GROUP_SECURITY_INFORMATION = &h00000002
const DACL_SECURITY_INFORMATION = &h00000004
const SACL_SECURITY_INFORMATION = &h00000008
const LABEL_SECURITY_INFORMATION = &h00000010
const ATTRIBUTE_SECURITY_INFORMATION = &h00000020
const SCOPE_SECURITY_INFORMATION = &h00000040
const BACKUP_SECURITY_INFORMATION = &h00010000
const PROTECTED_DACL_SECURITY_INFORMATION = &h80000000
const PROTECTED_SACL_SECURITY_INFORMATION = &h40000000
const UNPROTECTED_DACL_SECURITY_INFORMATION = &h20000000
const UNPROTECTED_SACL_SECURITY_INFORMATION = &h10000000

type _SE_LEARNING_MODE_DATA_TYPE as long
enum
 SeLearningModeInvalidType = 0
 SeLearningModeSettings
 SeLearningModeMax
end enum

type SE_LEARNING_MODE_DATA_TYPE as _SE_LEARNING_MODE_DATA_TYPE
const SE_LEARNING_MODE_FLAG_PERMISSIVE = &h00000001

type _SECURITY_CAPABILITIES
 AppContainerSid as PSID
 Capabilities as PSID_AND_ATTRIBUTES
 CapabilityCount as DWORD
 Reserved as DWORD
end type

type SECURITY_CAPABILITIES as _SECURITY_CAPABILITIES
type PSECURITY_CAPABILITIES as _SECURITY_CAPABILITIES ptr
type LPSECURITY_CAPABILITIES as _SECURITY_CAPABILITIES ptr

const PROCESS_TERMINATE = &h0001
const PROCESS_CREATE_THREAD = &h0002
const PROCESS_SET_SESSIONID = &h0004
const PROCESS_VM_OPERATION = &h0008
const PROCESS_VM_READ = &h0010
const PROCESS_VM_WRITE = &h0020
const PROCESS_DUP_HANDLE = &h0040
const PROCESS_CREATE_PROCESS = &h0080
const PROCESS_SET_QUOTA = &h0100
const PROCESS_SET_INFORMATION = &h0200
const PROCESS_QUERY_INFORMATION = &h0400
const PROCESS_SUSPEND_RESUME = &h0800
const PROCESS_QUERY_LIMITED_INFORMATION = &h1000

 const PROCESS_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or &hfff

 const MAXIMUM_PROC_PER_GROUP = 32

const MAXIMUM_PROCESSORS = MAXIMUM_PROC_PER_GROUP
const THREAD_TERMINATE = &h0001
const THREAD_SUSPEND_RESUME = &h0002
const THREAD_GET_CONTEXT = &h0008
const THREAD_SET_CONTEXT = &h0010
const THREAD_SET_INFORMATION = &h0020
const THREAD_QUERY_INFORMATION = &h0040
const THREAD_SET_THREAD_TOKEN = &h0080
const THREAD_IMPERSONATE = &h0100
const THREAD_DIRECT_IMPERSONATION = &h0200
const THREAD_SET_LIMITED_INFORMATION = &h0400
const THREAD_QUERY_LIMITED_INFORMATION = &h0800

 const THREAD_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or &h3ff

const JOB_OBJECT_ASSIGN_PROCESS = &h0001
const JOB_OBJECT_SET_ATTRIBUTES = &h0002
const JOB_OBJECT_QUERY = &h0004
const JOB_OBJECT_TERMINATE = &h0008
const JOB_OBJECT_SET_SECURITY_ATTRIBUTES = &h0010
const JOB_OBJECT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or &h1F

type _JOB_SET_ARRAY
 JobHandle as HANDLE
 MemberLevel as DWORD
 Flags as DWORD
end type

type JOB_SET_ARRAY as _JOB_SET_ARRAY
type PJOB_SET_ARRAY as _JOB_SET_ARRAY ptr
const FLS_MAXIMUM_AVAILABLE = 128
const TLS_MINIMUM_AVAILABLE = 64

type _EXCEPTION_REGISTRATION_RECORD
 union
 Next as _EXCEPTION_REGISTRATION_RECORD ptr
 prev as _EXCEPTION_REGISTRATION_RECORD ptr
 end union

 union
 Handler as PEXCEPTION_ROUTINE
 end union
end type

type EXCEPTION_REGISTRATION_RECORD as _EXCEPTION_REGISTRATION_RECORD
type PEXCEPTION_REGISTRATION_RECORD as EXCEPTION_REGISTRATION_RECORD ptr
type EXCEPTION_REGISTRATION as EXCEPTION_REGISTRATION_RECORD
type PEXCEPTION_REGISTRATION as PEXCEPTION_REGISTRATION_RECORD

type _NT_TIB
 ExceptionList as _EXCEPTION_REGISTRATION_RECORD ptr
 StackBase as PVOID
 StackLimit as PVOID
 SubSystemTib as PVOID

 union
 FiberData as PVOID
 Version as DWORD
 end union

 ArbitraryUserPointer as PVOID
 Self as _NT_TIB ptr
end type

type NT_TIB as _NT_TIB
type PNT_TIB as NT_TIB ptr

type _NT_TIB32
 ExceptionList as DWORD
 StackBase as DWORD
 StackLimit as DWORD
 SubSystemTib as DWORD

 union
 FiberData as DWORD
 Version as DWORD
 end union

 ArbitraryUserPointer as DWORD
 Self as DWORD
end type

type NT_TIB32 as _NT_TIB32
type PNT_TIB32 as _NT_TIB32 ptr

type _NT_TIB64
 ExceptionList as DWORD64
 StackBase as DWORD64
 StackLimit as DWORD64
 SubSystemTib as DWORD64

 union
 FiberData as DWORD64
 Version as DWORD
 end union

 ArbitraryUserPointer as DWORD64
 Self as DWORD64
end type

type NT_TIB64 as _NT_TIB64
type PNT_TIB64 as _NT_TIB64 ptr
const THREAD_BASE_PRIORITY_LOWRT = 15
const THREAD_BASE_PRIORITY_MAX = 2
const THREAD_BASE_PRIORITY_MIN = -2
const THREAD_BASE_PRIORITY_IDLE = -15

type _UMS_CREATE_THREAD_ATTRIBUTES
 UmsVersion as DWORD
 UmsContext as PVOID
 UmsCompletionList as PVOID
end type

type UMS_CREATE_THREAD_ATTRIBUTES as _UMS_CREATE_THREAD_ATTRIBUTES
type PUMS_CREATE_THREAD_ATTRIBUTES as _UMS_CREATE_THREAD_ATTRIBUTES ptr

type _QUOTA_LIMITS
 PagedPoolLimit as SIZE_T_
 NonPagedPoolLimit as SIZE_T_
 MinimumWorkingSetSize as SIZE_T_
 MaximumWorkingSetSize as SIZE_T_
 PagefileLimit as SIZE_T_
 TimeLimit as LARGE_INTEGER
end type

type QUOTA_LIMITS as _QUOTA_LIMITS
type PQUOTA_LIMITS as _QUOTA_LIMITS ptr
const QUOTA_LIMITS_HARDWS_MIN_ENABLE = &h00000001
const QUOTA_LIMITS_HARDWS_MIN_DISABLE = &h00000002
const QUOTA_LIMITS_HARDWS_MAX_ENABLE = &h00000004
const QUOTA_LIMITS_HARDWS_MAX_DISABLE = &h00000008
const QUOTA_LIMITS_USE_DEFAULT_LIMITS = &h00000010

union _RATE_QUOTA_LIMIT
 RateData as DWORD

 type
 RatePercent : 7 as DWORD
 Reserved0 : 25 as DWORD
 end type
end union

type RATE_QUOTA_LIMIT as _RATE_QUOTA_LIMIT
type PRATE_QUOTA_LIMIT as _RATE_QUOTA_LIMIT ptr

type _QUOTA_LIMITS_EX
 PagedPoolLimit as SIZE_T_
 NonPagedPoolLimit as SIZE_T_
 MinimumWorkingSetSize as SIZE_T_
 MaximumWorkingSetSize as SIZE_T_
 PagefileLimit as SIZE_T_
 TimeLimit as LARGE_INTEGER
 WorkingSetLimit as SIZE_T_
 Reserved2 as SIZE_T_
 Reserved3 as SIZE_T_
 Reserved4 as SIZE_T_
 Flags as DWORD
 CpuRateLimit as RATE_QUOTA_LIMIT
end type

type QUOTA_LIMITS_EX as _QUOTA_LIMITS_EX
type PQUOTA_LIMITS_EX as _QUOTA_LIMITS_EX ptr

type _IO_COUNTERS
 ReadOperationCount as ULONGLONG
 WriteOperationCount as ULONGLONG
 OtherOperationCount as ULONGLONG
 ReadTransferCount as ULONGLONG
 WriteTransferCount as ULONGLONG
 OtherTransferCount as ULONGLONG
end type

type IO_COUNTERS as _IO_COUNTERS
type PIO_COUNTERS as IO_COUNTERS ptr
const MAX_HW_COUNTERS = 16
const THREAD_PROFILING_FLAG_DISPATCH = &h1

type _HARDWARE_COUNTER_TYPE as long
enum
 PMCCounter
 MaxHardwareCounterType
end enum

type HARDWARE_COUNTER_TYPE as _HARDWARE_COUNTER_TYPE
type PHARDWARE_COUNTER_TYPE as _HARDWARE_COUNTER_TYPE ptr

type _PROCESS_MITIGATION_POLICY as long
enum
 ProcessDEPPolicy
 ProcessASLRPolicy
 ProcessReserved1MitigationPolicy
 ProcessStrictHandleCheckPolicy
 ProcessSystemCallDisablePolicy
 ProcessMitigationOptionsMask
 ProcessExtensionPointDisablePolicy
 MaxProcessMitigationPolicy
end enum

type PROCESS_MITIGATION_POLICY as _PROCESS_MITIGATION_POLICY
type PPROCESS_MITIGATION_POLICY as _PROCESS_MITIGATION_POLICY ptr

type _PROCESS_MITIGATION_ASLR_POLICY
 union
 Flags as DWORD

 type
 EnableBottomUpRandomization : 1 as DWORD
 EnableForceRelocateImages : 1 as DWORD
 EnableHighEntropy : 1 as DWORD
 DisallowStrippedImages : 1 as DWORD
 ReservedFlags : 28 as DWORD
 end type
 end union
end type

type PROCESS_MITIGATION_ASLR_POLICY as _PROCESS_MITIGATION_ASLR_POLICY
type PPROCESS_MITIGATION_ASLR_POLICY as _PROCESS_MITIGATION_ASLR_POLICY ptr

type _PROCESS_MITIGATION_DEP_POLICY
 union
 Flags as DWORD

 type
 Enable : 1 as DWORD
 DisableAtlThunkEmulation : 1 as DWORD
 ReservedFlags : 30 as DWORD
 end type
 end union

 Permanent as WINBOOLEAN
end type

type PROCESS_MITIGATION_DEP_POLICY as _PROCESS_MITIGATION_DEP_POLICY
type PPROCESS_MITIGATION_DEP_POLICY as _PROCESS_MITIGATION_DEP_POLICY ptr

type _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY
 union
 Flags as DWORD

 type
 RaiseExceptionOnInvalidHandleReference : 1 as DWORD
 HandleExceptionsPermanentlyEnabled : 1 as DWORD
 ReservedFlags : 30 as DWORD
 end type
 end union
end type

type PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY as _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY
type PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY as _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY ptr

type _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
 union
 Flags as DWORD

 type
 DisallowWin32kSystemCalls : 1 as DWORD
 ReservedFlags : 31 as DWORD
 end type
 end union
end type

type PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY as _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
type PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY as _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY ptr

type _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
 union
 Flags as DWORD

 type
 DisableExtensionPoints : 1 as DWORD
 ReservedFlags : 31 as DWORD
 end type
 end union
end type

type PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY as _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
type PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY as _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY ptr

type _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
 TotalUserTime as LARGE_INTEGER
 TotalKernelTime as LARGE_INTEGER
 ThisPeriodTotalUserTime as LARGE_INTEGER
 ThisPeriodTotalKernelTime as LARGE_INTEGER
 TotalPageFaultCount as DWORD
 TotalProcesses as DWORD
 ActiveProcesses as DWORD
 TotalTerminatedProcesses as DWORD
end type

type JOBOBJECT_BASIC_ACCOUNTING_INFORMATION as _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
type PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION as _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION ptr

type _JOBOBJECT_BASIC_LIMIT_INFORMATION
 PerProcessUserTimeLimit as LARGE_INTEGER
 PerJobUserTimeLimit as LARGE_INTEGER
 LimitFlags as DWORD
 MinimumWorkingSetSize as SIZE_T_
 MaximumWorkingSetSize as SIZE_T_
 ActiveProcessLimit as DWORD
 Affinity as ULONG_PTR
 PriorityClass as DWORD
 SchedulingClass as DWORD
end type

type JOBOBJECT_BASIC_LIMIT_INFORMATION as _JOBOBJECT_BASIC_LIMIT_INFORMATION
type PJOBOBJECT_BASIC_LIMIT_INFORMATION as _JOBOBJECT_BASIC_LIMIT_INFORMATION ptr

type _JOBOBJECT_EXTENDED_LIMIT_INFORMATION
 BasicLimitInformation as JOBOBJECT_BASIC_LIMIT_INFORMATION
 IoInfo as IO_COUNTERS
 ProcessMemoryLimit as SIZE_T_
 JobMemoryLimit as SIZE_T_
 PeakProcessMemoryUsed as SIZE_T_
 PeakJobMemoryUsed as SIZE_T_
end type

type JOBOBJECT_EXTENDED_LIMIT_INFORMATION as _JOBOBJECT_EXTENDED_LIMIT_INFORMATION
type PJOBOBJECT_EXTENDED_LIMIT_INFORMATION as _JOBOBJECT_EXTENDED_LIMIT_INFORMATION ptr

type _JOBOBJECT_BASIC_PROCESS_ID_LIST
 NumberOfAssignedProcesses as DWORD
 NumberOfProcessIdsInList as DWORD
 ProcessIdList(0 to 0) as ULONG_PTR
end type

type JOBOBJECT_BASIC_PROCESS_ID_LIST as _JOBOBJECT_BASIC_PROCESS_ID_LIST
type PJOBOBJECT_BASIC_PROCESS_ID_LIST as _JOBOBJECT_BASIC_PROCESS_ID_LIST ptr

type _JOBOBJECT_BASIC_UI_RESTRICTIONS
 UIRestrictionsClass as DWORD
end type

type JOBOBJECT_BASIC_UI_RESTRICTIONS as _JOBOBJECT_BASIC_UI_RESTRICTIONS
type PJOBOBJECT_BASIC_UI_RESTRICTIONS as _JOBOBJECT_BASIC_UI_RESTRICTIONS ptr

type _JOBOBJECT_SECURITY_LIMIT_INFORMATION
 SecurityLimitFlags as DWORD
 JobToken as HANDLE
 SidsToDisable as PTOKEN_GROUPS
 PrivilegesToDelete as PTOKEN_PRIVILEGES
 RestrictedSids as PTOKEN_GROUPS
end type

type JOBOBJECT_SECURITY_LIMIT_INFORMATION as _JOBOBJECT_SECURITY_LIMIT_INFORMATION
type PJOBOBJECT_SECURITY_LIMIT_INFORMATION as _JOBOBJECT_SECURITY_LIMIT_INFORMATION ptr

type _JOBOBJECT_END_OF_JOB_TIME_INFORMATION
 EndOfJobTimeAction as DWORD
end type

type JOBOBJECT_END_OF_JOB_TIME_INFORMATION as _JOBOBJECT_END_OF_JOB_TIME_INFORMATION
type PJOBOBJECT_END_OF_JOB_TIME_INFORMATION as _JOBOBJECT_END_OF_JOB_TIME_INFORMATION ptr

type _JOBOBJECT_ASSOCIATE_COMPLETION_PORT
 CompletionKey as PVOID
 CompletionPort as HANDLE
end type

type JOBOBJECT_ASSOCIATE_COMPLETION_PORT as _JOBOBJECT_ASSOCIATE_COMPLETION_PORT
type PJOBOBJECT_ASSOCIATE_COMPLETION_PORT as _JOBOBJECT_ASSOCIATE_COMPLETION_PORT ptr

type _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
 BasicInfo as JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
 IoInfo as IO_COUNTERS
end type

type JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION as _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
type PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION as _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION ptr

type _JOBOBJECT_JOBSET_INFORMATION
 MemberLevel as DWORD
end type

type JOBOBJECT_JOBSET_INFORMATION as _JOBOBJECT_JOBSET_INFORMATION
type PJOBOBJECT_JOBSET_INFORMATION as _JOBOBJECT_JOBSET_INFORMATION ptr

type _JOBOBJECT_RATE_CONTROL_TOLERANCE as long
enum
 ToleranceLow = 1
 ToleranceMedium
 ToleranceHigh
end enum

type JOBOBJECT_RATE_CONTROL_TOLERANCE as _JOBOBJECT_RATE_CONTROL_TOLERANCE

type _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL as long
enum
 ToleranceIntervalShort = 1
 ToleranceIntervalMedium
 ToleranceIntervalLong
end enum

type JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL as _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL

type _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION
 IoReadBytesLimit as DWORD64
 IoWriteBytesLimit as DWORD64
 PerJobUserTimeLimit as LARGE_INTEGER
 JobMemoryLimit as DWORD64
 RateControlTolerance as JOBOBJECT_RATE_CONTROL_TOLERANCE
 RateControlToleranceInterval as JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
 LimitFlags as DWORD
end type

type JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION as _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION
type PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION as _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION ptr

type _JOBOBJECT_LIMIT_VIOLATION_INFORMATION
 LimitFlags as DWORD
 ViolationLimitFlags as DWORD
 IoReadBytes as DWORD64
 IoReadBytesLimit as DWORD64
 IoWriteBytes as DWORD64
 IoWriteBytesLimit as DWORD64
 PerJobUserTime as LARGE_INTEGER
 PerJobUserTimeLimit as LARGE_INTEGER
 JobMemory as DWORD64
 JobMemoryLimit as DWORD64
 RateControlTolerance as JOBOBJECT_RATE_CONTROL_TOLERANCE
 RateControlToleranceLimit as JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
end type

type JOBOBJECT_LIMIT_VIOLATION_INFORMATION as _JOBOBJECT_LIMIT_VIOLATION_INFORMATION
type PJOBOBJECT_LIMIT_VIOLATION_INFORMATION as _JOBOBJECT_LIMIT_VIOLATION_INFORMATION ptr

type _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION
 ControlFlags as DWORD

 union
 CpuRate as DWORD
 Weight as DWORD
 end union
end type

type JOBOBJECT_CPU_RATE_CONTROL_INFORMATION as _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION
type PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION as _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION ptr
const JOB_OBJECT_TERMINATE_AT_END_OF_JOB = 0
const JOB_OBJECT_POST_AT_END_OF_JOB = 1
const JOB_OBJECT_MSG_END_OF_JOB_TIME = 1
const JOB_OBJECT_MSG_END_OF_PROCESS_TIME = 2
const JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT = 3
const JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO = 4
const JOB_OBJECT_MSG_NEW_PROCESS = 6
const JOB_OBJECT_MSG_EXIT_PROCESS = 7
const JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS = 8
const JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT = 9
const JOB_OBJECT_MSG_JOB_MEMORY_LIMIT = 10
const JOB_OBJECT_MSG_NOTIFICATION_LIMIT = 11
const JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT = 12
const JOB_OBJECT_MSG_MINIMUM = 1
const JOB_OBJECT_MSG_MAXIMUM = 12
const JOB_OBJECT_LIMIT_WORKINGSET = &h00000001
const JOB_OBJECT_LIMIT_PROCESS_TIME = &h00000002
const JOB_OBJECT_LIMIT_JOB_TIME = &h00000004
const JOB_OBJECT_LIMIT_ACTIVE_PROCESS = &h00000008
const JOB_OBJECT_LIMIT_AFFINITY = &h00000010
const JOB_OBJECT_LIMIT_PRIORITY_CLASS = &h00000020
const JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME = &h00000040
const JOB_OBJECT_LIMIT_SCHEDULING_CLASS = &h00000080
const JOB_OBJECT_LIMIT_PROCESS_MEMORY = &h00000100
const JOB_OBJECT_LIMIT_JOB_MEMORY = &h00000200
const JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION = &h00000400
const JOB_OBJECT_LIMIT_BREAKAWAY_OK = &h00000800
const JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK = &h00001000
const JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE = &h00002000
const JOB_OBJECT_LIMIT_SUBSET_AFFINITY = &h00004000
const JOB_OBJECT_LIMIT_RESERVED3 = &h00008000
const JOB_OBJECT_LIMIT_JOB_READ_BYTES = &h00010000
const JOB_OBJECT_LIMIT_JOB_WRITE_BYTES = &h00020000
const JOB_OBJECT_LIMIT_RATE_CONTROL = &h00040000
const JOB_OBJECT_LIMIT_RESERVED3 = &h00008000
const JOB_OBJECT_LIMIT_RESERVED4 = &h00010000
const JOB_OBJECT_LIMIT_RESERVED5 = &h00020000
const JOB_OBJECT_LIMIT_RESERVED6 = &h00040000
const JOB_OBJECT_LIMIT_VALID_FLAGS = &h0007ffff
const JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS = &h000000ff
const JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS = &h00007fff
const JOB_OBJECT_RESERVED_LIMIT_VALID_FLAGS = &h0007ffff
const JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS = &h00070204
const JOB_OBJECT_UILIMIT_NONE = &h000000000
const JOB_OBJECT_UILIMIT_HANDLES = &h00000001
const JOB_OBJECT_UILIMIT_READCLIPBOARD = &h00000002
const JOB_OBJECT_UILIMIT_WRITECLIPBOARD = &h00000004
const JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS = &h00000008
const JOB_OBJECT_UILIMIT_DISPLAYSETTINGS = &h00000010
const JOB_OBJECT_UILIMIT_GLOBALATOMS = &h00000020
const JOB_OBJECT_UILIMIT_DESKTOP = &h00000040
const JOB_OBJECT_UILIMIT_EXITWINDOWS = &h00000080
const JOB_OBJECT_UILIMIT_ALL = &h000000FF
const JOB_OBJECT_UI_VALID_FLAGS = &h000000FF
const JOB_OBJECT_SECURITY_NO_ADMIN = &h00000001
const JOB_OBJECT_SECURITY_RESTRICTED_TOKEN = &h00000002
const JOB_OBJECT_SECURITY_ONLY_TOKEN = &h00000004
const JOB_OBJECT_SECURITY_FILTER_TOKENS = &h00000008
const JOB_OBJECT_SECURITY_VALID_FLAGS = &h0000000f
const JOB_OBJECT_CPU_RATE_CONTROL_ENABLE = &h1
const JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED = &h2
const JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP = &h4
const JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY = &h8
const JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS = &hf

type _JOBOBJECTINFOCLASS as long
enum
 JobObjectBasicAccountingInformation = 1
 JobObjectBasicLimitInformation
 JobObjectBasicProcessIdList
 JobObjectBasicUIRestrictions
 JobObjectSecurityLimitInformation
 JobObjectEndOfJobTimeInformation
 JobObjectAssociateCompletionPortInformation
 JobObjectBasicAndIoAccountingInformation
 JobObjectExtendedLimitInformation
 JobObjectJobSetInformation
 JobObjectGroupInformation
 JobObjectNotificationLimitInformation
 JobObjectLimitViolationInformation
 JobObjectGroupInformationEx
 JobObjectCpuRateControlInformation
 JobObjectCompletionFilter
 JobObjectCompletionCounter
 JobObjectReserved1Information = 18
 JobObjectReserved2Information
 JobObjectReserved3Information
 JobObjectReserved4Information
 JobObjectReserved5Information
 JobObjectReserved6Information
 JobObjectReserved7Information
 JobObjectReserved8Information
 MaxJobObjectInfoClass
end enum

type JOBOBJECTINFOCLASS as _JOBOBJECTINFOCLASS

type _FIRMWARE_TYPE as long
enum
 FirmwareTypeUnknown
 FirmwareTypeBios
 FirmwareTypeUefi
 FirmwareTypeMax
end enum

type FIRMWARE_TYPE as _FIRMWARE_TYPE
type PFIRMWARE_TYPE as _FIRMWARE_TYPE ptr
const EVENT_MODIFY_STATE = &h0002
const EVENT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or &h3
const MUTANT_QUERY_STATE = &h0001
const MUTANT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or MUTANT_QUERY_STATE
const SEMAPHORE_MODIFY_STATE = &h0002
const SEMAPHORE_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or &h3
const TIMER_QUERY_STATE = &h0001
const TIMER_MODIFY_STATE = &h0002
const TIMER_ALL_ACCESS = ((STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or TIMER_QUERY_STATE) or TIMER_MODIFY_STATE
const TIME_ZONE_ID_UNKNOWN = 0
const TIME_ZONE_ID_STANDARD = 1
const TIME_ZONE_ID_DAYLIGHT = 2

type _LOGICAL_PROCESSOR_RELATIONSHIP as long
enum
 RelationProcessorCore
 RelationNumaNode
 RelationCache
 RelationProcessorPackage
 RelationGroup
 RelationAll = &hffff
end enum

type LOGICAL_PROCESSOR_RELATIONSHIP as _LOGICAL_PROCESSOR_RELATIONSHIP
const LTP_PC_SMT = &h1

type _PROCESSOR_CACHE_TYPE as long
enum
 CacheUnified
 CacheInstruction
 CacheData
 CacheTrace
end enum

type PROCESSOR_CACHE_TYPE as _PROCESSOR_CACHE_TYPE
const CACHE_FULLY_ASSOCIATIVE = &hFF

type _CACHE_DESCRIPTOR
 Level as UBYTE
 Associativity as UBYTE
 LineSize as WORD
 Size as DWORD
 as PROCESSOR_CACHE_TYPE Type
end type

type CACHE_DESCRIPTOR as _CACHE_DESCRIPTOR
type PCACHE_DESCRIPTOR as _CACHE_DESCRIPTOR ptr

type _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_ProcessorCore
 Flags as UBYTE
end type

type _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_NumaNode
 NodeNumber as DWORD
end type

type _SYSTEM_LOGICAL_PROCESSOR_INFORMATION
 ProcessorMask as ULONG_PTR
 Relationship as LOGICAL_PROCESSOR_RELATIONSHIP

 union
 ProcessorCore as _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_ProcessorCore
 NumaNode as _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_NumaNode
 Cache as CACHE_DESCRIPTOR
 Reserved(0 to 1) as ULONGLONG
 end union
end type

type SYSTEM_LOGICAL_PROCESSOR_INFORMATION as _SYSTEM_LOGICAL_PROCESSOR_INFORMATION
type PSYSTEM_LOGICAL_PROCESSOR_INFORMATION as _SYSTEM_LOGICAL_PROCESSOR_INFORMATION ptr

type _PROCESSOR_RELATIONSHIP
 Flags as UBYTE
 Reserved(0 to 20) as UBYTE
 GroupCount as WORD
 GroupMask(0 to 0) as GROUP_AFFINITY
end type

type PROCESSOR_RELATIONSHIP as _PROCESSOR_RELATIONSHIP
type PPROCESSOR_RELATIONSHIP as _PROCESSOR_RELATIONSHIP ptr

type _NUMA_NODE_RELATIONSHIP
 NodeNumber as DWORD
 Reserved(0 to 19) as UBYTE
 GroupMask as GROUP_AFFINITY
end type

type NUMA_NODE_RELATIONSHIP as _NUMA_NODE_RELATIONSHIP
type PNUMA_NODE_RELATIONSHIP as _NUMA_NODE_RELATIONSHIP ptr

type _CACHE_RELATIONSHIP
 Level as UBYTE
 Associativity as UBYTE
 LineSize as WORD
 CacheSize as DWORD
 as PROCESSOR_CACHE_TYPE Type
 Reserved(0 to 19) as UBYTE
 GroupMask as GROUP_AFFINITY
end type

type CACHE_RELATIONSHIP as _CACHE_RELATIONSHIP
type PCACHE_RELATIONSHIP as _CACHE_RELATIONSHIP ptr

type _PROCESSOR_GROUP_INFO
 MaximumProcessorCount as UBYTE
 ActiveProcessorCount as UBYTE
 Reserved(0 to 37) as UBYTE
 ActiveProcessorMask as KAFFINITY
end type

type PROCESSOR_GROUP_INFO as _PROCESSOR_GROUP_INFO
type PPROCESSOR_GROUP_INFO as _PROCESSOR_GROUP_INFO ptr

type _GROUP_RELATIONSHIP
 MaximumGroupCount as WORD
 ActiveGroupCount as WORD
 Reserved(0 to 19) as UBYTE
 GroupInfo(0 to 0) as PROCESSOR_GROUP_INFO
end type

type GROUP_RELATIONSHIP as _GROUP_RELATIONSHIP
type PGROUP_RELATIONSHIP as _GROUP_RELATIONSHIP ptr

type _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
 Relationship as LOGICAL_PROCESSOR_RELATIONSHIP
 Size as DWORD

 union
 Processor as PROCESSOR_RELATIONSHIP
 NumaNode as NUMA_NODE_RELATIONSHIP
 Cache as CACHE_RELATIONSHIP
 Group as GROUP_RELATIONSHIP
 end union
end type

type SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX as _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
type PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX as _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX ptr

type _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
 CycleTime as DWORD64
end type

type SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION as _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
type PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION as _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION ptr
const PROCESSOR_INTEL_386 = 386
const PROCESSOR_INTEL_486 = 486
const PROCESSOR_INTEL_PENTIUM = 586
const PROCESSOR_INTEL_IA64 = 2200
const PROCESSOR_AMD_X8664 = 8664
const PROCESSOR_MIPS_R4000 = 4000
const PROCESSOR_ALPHA_21064 = 21064
const PROCESSOR_PPC_601 = 601
const PROCESSOR_PPC_603 = 603
const PROCESSOR_PPC_604 = 604
const PROCESSOR_PPC_620 = 620
const PROCESSOR_HITACHI_SH3 = 10003
const PROCESSOR_HITACHI_SH3E = 10004
const PROCESSOR_HITACHI_SH4 = 10005
const PROCESSOR_MOTOROLA_821 = 821
const PROCESSOR_SHx_SH3 = 103
const PROCESSOR_SHx_SH4 = 104
const PROCESSOR_STRONGARM = 2577
const PROCESSOR_ARM720 = 1824
const PROCESSOR_ARM820 = 2080
const PROCESSOR_ARM920 = 2336
const PROCESSOR_ARM_7TDMI = 70001
const PROCESSOR_OPTIL = &h494f
const PROCESSOR_ARCHITECTURE_INTEL = 0
const PROCESSOR_ARCHITECTURE_MIPS = 1
const PROCESSOR_ARCHITECTURE_ALPHA = 2
const PROCESSOR_ARCHITECTURE_PPC = 3
const PROCESSOR_ARCHITECTURE_SHX = 4
const PROCESSOR_ARCHITECTURE_ARM = 5
const PROCESSOR_ARCHITECTURE_IA64 = 6
const PROCESSOR_ARCHITECTURE_ALPHA64 = 7
const PROCESSOR_ARCHITECTURE_MSIL = 8
const PROCESSOR_ARCHITECTURE_AMD64 = 9
const PROCESSOR_ARCHITECTURE_IA32_ON_WIN64 = 10
const PROCESSOR_ARCHITECTURE_NEUTRAL = 11
const PROCESSOR_ARCHITECTURE_UNKNOWN = &hffff
const PF_FLOATING_POINT_PRECISION_ERRATA = 0
const PF_FLOATING_POINT_EMULATED = 1
const PF_COMPARE_EXCHANGE_DOUBLE = 2
const PF_MMX_INSTRUCTIONS_AVAILABLE = 3
const PF_PPC_MOVEMEM_64BIT_OK = 4
const PF_ALPHA_BYTE_INSTRUCTIONS = 5
const PF_XMMI_INSTRUCTIONS_AVAILABLE = 6
const PF_3DNOW_INSTRUCTIONS_AVAILABLE = 7
const PF_RDTSC_INSTRUCTION_AVAILABLE = 8
const PF_PAE_ENABLED = 9
const PF_XMMI64_INSTRUCTIONS_AVAILABLE = 10
const PF_SSE_DAZ_MODE_AVAILABLE = 11
const PF_NX_ENABLED = 12
const PF_SSE3_INSTRUCTIONS_AVAILABLE = 13
const PF_COMPARE_EXCHANGE128 = 14
const PF_COMPARE64_EXCHANGE128 = 15
const PF_CHANNELS_ENABLED = 16
const PF_XSAVE_ENABLED = 17
const PF_ARM_VFP_32_REGISTERS_AVAILABLE = 18
const PF_ARM_NEON_INSTRUCTIONS_AVAILABLE = 19
const PF_SECOND_LEVEL_ADDRESS_TRANSLATION = 20
const PF_VIRT_FIRMWARE_ENABLED = 21
const PF_RDWRFSGSBASE_AVAILABLE = 22
const PF_FASTFAIL_AVAILABLE = 23
const PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE = 24
const PF_ARM_64BIT_LOADSTORE_ATOMIC = 25
const PF_ARM_EXTERNAL_CACHE_AVAILABLE = 26
const PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE = 27
const XSTATE_LEGACY_FLOATING_POINT = 0
const XSTATE_LEGACY_SSE = 1
const XSTATE_GSSE = 2
const XSTATE_AVX = XSTATE_GSSE
const XSTATE_MASK_LEGACY_FLOATING_POINT = 1 shl XSTATE_LEGACY_FLOATING_POINT
const XSTATE_MASK_LEGACY_SSE = 1 shl XSTATE_LEGACY_SSE
const XSTATE_MASK_LEGACY = XSTATE_MASK_LEGACY_FLOATING_POINT or XSTATE_MASK_LEGACY_SSE
const XSTATE_MASK_GSSE = 1 shl XSTATE_GSSE
const XSTATE_MASK_AVX = XSTATE_MASK_GSSE
const MAXIMUM_XSTATE_FEATURES = 64

type _XSTATE_FEATURE
 Offset as DWORD
 Size as DWORD
end type

type XSTATE_FEATURE as _XSTATE_FEATURE
type PXSTATE_FEATURE as _XSTATE_FEATURE ptr

type _XSTATE_CONFIGURATION
 EnabledFeatures as DWORD64
 EnabledVolatileFeatures as DWORD64
 Size as DWORD
 OptimizedSave : 1 as DWORD
 Features(0 to 63) as XSTATE_FEATURE
end type

type XSTATE_CONFIGURATION as _XSTATE_CONFIGURATION
type PXSTATE_CONFIGURATION as _XSTATE_CONFIGURATION ptr

type _MEMORY_BASIC_INFORMATION
 BaseAddress as PVOID
 AllocationBase as PVOID
 AllocationProtect as DWORD
 RegionSize as SIZE_T_
 State as DWORD
 Protect as DWORD
 as DWORD Type
end type

type MEMORY_BASIC_INFORMATION as _MEMORY_BASIC_INFORMATION
type PMEMORY_BASIC_INFORMATION as _MEMORY_BASIC_INFORMATION ptr

type _MEMORY_BASIC_INFORMATION32
 BaseAddress as DWORD
 AllocationBase as DWORD
 AllocationProtect as DWORD
 RegionSize as DWORD
 State as DWORD
 Protect as DWORD
 as DWORD Type
end type

type MEMORY_BASIC_INFORMATION32 as _MEMORY_BASIC_INFORMATION32
type PMEMORY_BASIC_INFORMATION32 as _MEMORY_BASIC_INFORMATION32 ptr

type _MEMORY_BASIC_INFORMATION64
 BaseAddress as ULONGLONG
 AllocationBase as ULONGLONG
 AllocationProtect as DWORD
 __alignment1 as DWORD
 RegionSize as ULONGLONG
 State as DWORD
 Protect as DWORD
 as DWORD Type
 __alignment2 as DWORD
end type

type MEMORY_BASIC_INFORMATION64 as _MEMORY_BASIC_INFORMATION64
type PMEMORY_BASIC_INFORMATION64 as _MEMORY_BASIC_INFORMATION64 ptr
const SECTION_QUERY = &h0001
const SECTION_MAP_WRITE = &h0002
const SECTION_MAP_READ = &h0004
const SECTION_MAP_EXECUTE = &h0008
const SECTION_EXTEND_SIZE = &h0010
const SECTION_MAP_EXECUTE_EXPLICIT = &h0020
const SECTION_ALL_ACCESS = ((((STANDARD_RIGHTS_REQUIRED or SECTION_QUERY) or SECTION_MAP_WRITE) or SECTION_MAP_READ) or SECTION_MAP_EXECUTE) or SECTION_EXTEND_SIZE
const SESSION_QUERY_ACCESS = &h1
const SESSION_MODIFY_ACCESS = &h2
const SESSION_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SESSION_QUERY_ACCESS) or SESSION_MODIFY_ACCESS
const PAGE_NOACCESS = &h01
const PAGE_READONLY = &h02
const PAGE_READWRITE = &h04
const PAGE_WRITECOPY = &h08
const PAGE_EXECUTE = &h10
const PAGE_EXECUTE_READ = &h20
const PAGE_EXECUTE_READWRITE = &h40
const PAGE_EXECUTE_WRITECOPY = &h80
const PAGE_GUARD = &h100
const PAGE_NOCACHE = &h200
const PAGE_WRITECOMBINE = &h400
const MEM_COMMIT = &h1000
const MEM_RESERVE = &h2000
const MEM_DECOMMIT = &h4000
const MEM_RELEASE = &h8000
const MEM_FREE = &h10000
const MEM_PRIVATE = &h20000
const MEM_MAPPED = &h40000
const MEM_RESET = &h80000
const MEM_TOP_DOWN = &h100000
const MEM_WRITE_WATCH = &h200000
const MEM_PHYSICAL = &h400000
const MEM_ROTATE = &h800000
const MEM_LARGE_PAGES = &h20000000
const MEM_4MB_PAGES = &h80000000
const SEC_FILE = &h800000
const SEC_IMAGE = &h1000000
const SEC_PROTECTED_IMAGE = &h2000000
const SEC_RESERVE = &h4000000
const SEC_COMMIT = &h8000000
const SEC_NOCACHE = &h10000000
const SEC_WRITECOMBINE = &h40000000
const SEC_LARGE_PAGES = &h80000000
const SEC_IMAGE_NO_EXECUTE = SEC_IMAGE or SEC_NOCACHE
const MEM_IMAGE = SEC_IMAGE
const WRITE_WATCH_FLAG_RESET = &h01
const MEM_UNMAP_WITH_TRANSIENT_BOOST = &h01
const FILE_READ_DATA = &h0001
const FILE_LIST_DIRECTORY = &h0001
const FILE_WRITE_DATA = &h0002
const FILE_ADD_FILE = &h0002
const FILE_APPEND_DATA = &h0004
const FILE_ADD_SUBDIRECTORY = &h0004
const FILE_CREATE_PIPE_INSTANCE = &h0004
const FILE_READ_EA = &h0008
const FILE_WRITE_EA = &h0010
const FILE_EXECUTE = &h0020
const FILE_TRAVERSE = &h0020
const FILE_DELETE_CHILD = &h0040
const FILE_READ_ATTRIBUTES = &h0080
const FILE_WRITE_ATTRIBUTES = &h0100
const FILE_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or &h1FF
const FILE_GENERIC_READ = (((STANDARD_RIGHTS_READ or FILE_READ_DATA) or FILE_READ_ATTRIBUTES) or FILE_READ_EA) or SYNCHRONIZE
const FILE_GENERIC_WRITE = ((((STANDARD_RIGHTS_WRITE or FILE_WRITE_DATA) or FILE_WRITE_ATTRIBUTES) or FILE_WRITE_EA) or FILE_APPEND_DATA) or SYNCHRONIZE
const FILE_GENERIC_EXECUTE = ((STANDARD_RIGHTS_EXECUTE or FILE_READ_ATTRIBUTES) or FILE_EXECUTE) or SYNCHRONIZE
const FILE_SUPERSEDE = &h000000000
const FILE_OPEN = &h00000001
const FILE_CREATE = &h00000002
const FILE_OPEN_IF = &h00000003
const FILE_OVERWRITE = &h00000004
const FILE_OVERWRITE_IF = &h00000005
const FILE_MAXIMUM_DISPOSITION = &h00000005
const FILE_DIRECTORY_FILE = &h00000001
const FILE_WRITE_THROUGH = &h00000002
const FILE_SEQUENTIAL_ONLY = &h00000004
const FILE_NO_INTERMEDIATE_BUFFERING = &h00000008
const FILE_SYNCHRONOUS_IO_ALERT = &h00000010
const FILE_SYNCHRONOUS_IO_NONALERT = &h00000020
const FILE_NON_DIRECTORY_FILE = &h00000040
const FILE_CREATE_TREE_CONNECTION = &h00000080
const FILE_COMPLETE_IF_OPLOCKED = &h00000100
const FILE_NO_EA_KNOWLEDGE = &h00000200
const FILE_OPEN_REMOTE_INSTANCE = &h00000400
const FILE_RANDOM_ACCESS = &h00000800
const FILE_DELETE_ON_CLOSE = &h00001000
const FILE_OPEN_BY_FILE_ID = &h00002000
const FILE_OPEN_FOR_BACKUP_INTENT = &h00004000
const FILE_NO_COMPRESSION = &h00008000


const FILE_RESERVE_OPFILTER = &h00100000
const FILE_OPEN_REPARSE_POINT = &h00200000
const FILE_OPEN_NO_RECALL = &h00400000
const FILE_OPEN_FOR_FREE_SPACE_QUERY = &h00800000
const FILE_SHARE_READ = &h00000001
const FILE_SHARE_WRITE = &h00000002
const FILE_SHARE_DELETE = &h00000004
const FILE_SHARE_VALID_FLAGS = &h00000007
const FILE_ATTRIBUTE_READONLY = &h00000001
const FILE_ATTRIBUTE_HIDDEN = &h00000002
const FILE_ATTRIBUTE_SYSTEM = &h00000004
const FILE_ATTRIBUTE_DIRECTORY = &h00000010
const FILE_ATTRIBUTE_ARCHIVE = &h00000020
const FILE_ATTRIBUTE_DEVICE = &h00000040
const FILE_ATTRIBUTE_NORMAL = &h00000080
const FILE_ATTRIBUTE_TEMPORARY = &h00000100
const FILE_ATTRIBUTE_SPARSE_FILE = &h00000200
const FILE_ATTRIBUTE_REPARSE_POINT = &h00000400
const FILE_ATTRIBUTE_COMPRESSED = &h00000800
const FILE_ATTRIBUTE_OFFLINE = &h00001000
const FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = &h00002000
const FILE_ATTRIBUTE_ENCRYPTED = &h00004000
const FILE_ATTRIBUTE_VIRTUAL = &h00010000
const FILE_NOTIFY_CHANGE_FILE_NAME = &h00000001
const FILE_NOTIFY_CHANGE_DIR_NAME = &h00000002
const FILE_NOTIFY_CHANGE_ATTRIBUTES = &h00000004
const FILE_NOTIFY_CHANGE_SIZE = &h00000008
const FILE_NOTIFY_CHANGE_LAST_WRITE = &h00000010
const FILE_NOTIFY_CHANGE_LAST_ACCESS = &h00000020
const FILE_NOTIFY_CHANGE_CREATION = &h00000040
const FILE_NOTIFY_CHANGE_SECURITY = &h00000100
const FILE_ACTION_ADDED = &h00000001
const FILE_ACTION_REMOVED = &h00000002
const FILE_ACTION_MODIFIED = &h00000003
const FILE_ACTION_RENAMED_OLD_NAME = &h00000004
const FILE_ACTION_RENAMED_NEW_NAME = &h00000005
const MAILSLOT_NO_MESSAGE = cast(DWORD, -1)
const MAILSLOT_WAIT_FOREVER = cast(DWORD, -1)
const FILE_CASE_SENSITIVE_SEARCH = &h00000001
const FILE_CASE_PRESERVED_NAMES = &h00000002
const FILE_UNICODE_ON_DISK = &h00000004
const FILE_PERSISTENT_ACLS = &h00000008
const FILE_FILE_COMPRESSION = &h00000010
const FILE_VOLUME_QUOTAS = &h00000020
const FILE_SUPPORTS_SPARSE_FILES = &h00000040
const FILE_SUPPORTS_REPARSE_POINTS = &h00000080
const FILE_SUPPORTS_REMOTE_STORAGE = &h00000100
const FILE_VOLUME_IS_COMPRESSED = &h00008000
const FILE_SUPPORTS_OBJECT_IDS = &h00010000
const FILE_SUPPORTS_ENCRYPTION = &h00020000
const FILE_NAMED_STREAMS = &h00040000
const FILE_READ_ONLY_VOLUME = &h00080000
const FILE_SEQUENTIAL_WRITE_ONCE = &h00100000
const FILE_SUPPORTS_TRANSACTIONS = &h00200000
const FILE_SUPPORTS_HARD_LINKS = &h00400000
const FILE_SUPPORTS_EXTENDED_ATTRIBUTES = &h00800000
const FILE_SUPPORTS_OPEN_BY_FILE_ID = &h01000000
const FILE_SUPPORTS_USN_JOURNAL = &h02000000
const FILE_SUPPORTS_INTEGRITY_STREAMS = &h04000000

type FILE_ID_128
 LowPart as ULONGLONG
 HighPart as ULONGLONG
end type

type PFILE_ID_128 as FILE_ID_128 ptr

type _FILE_NOTIFY_INFORMATION
 NextEntryOffset as DWORD
 Action as DWORD
 FileNameLength as DWORD
 FileName as wstring * 1
end type

type FILE_NOTIFY_INFORMATION as _FILE_NOTIFY_INFORMATION
type PFILE_NOTIFY_INFORMATION as _FILE_NOTIFY_INFORMATION ptr

union _FILE_SEGMENT_ELEMENT
 Buffer as PVOID64
 Alignment as ULONGLONG
end union

type FILE_SEGMENT_ELEMENT as _FILE_SEGMENT_ELEMENT
type PFILE_SEGMENT_ELEMENT as _FILE_SEGMENT_ELEMENT ptr

type _REPARSE_GUID_DATA_BUFFER_GenericReparseBuffer
 DataBuffer(0 to 0) as UBYTE
end type

type _REPARSE_GUID_DATA_BUFFER
 ReparseTag as DWORD
 ReparseDataLength as WORD
 Reserved as WORD
 ReparseGuid as GUID
 GenericReparseBuffer as _REPARSE_GUID_DATA_BUFFER_GenericReparseBuffer
end type

type REPARSE_GUID_DATA_BUFFER as _REPARSE_GUID_DATA_BUFFER
type PREPARSE_GUID_DATA_BUFFER as _REPARSE_GUID_DATA_BUFFER ptr
const MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16 * 1024
const SYMLINK_FLAG_RELATIVE = 1
const IO_REPARSE_TAG_RESERVED_ZERO = 0
const IO_REPARSE_TAG_RESERVED_ONE = 1
const IO_REPARSE_TAG_RESERVED_RANGE = IO_REPARSE_TAG_RESERVED_ONE
const IO_REPARSE_TAG_MOUNT_POINT = &hA0000003
const IO_REPARSE_TAG_HSM = &hC0000004
const IO_REPARSE_TAG_HSM2 = &h80000006
const IO_REPARSE_TAG_SIS = &h80000007
const IO_REPARSE_TAG_WIM = &h80000008
const IO_REPARSE_TAG_CSV = &h80000009
const IO_REPARSE_TAG_DFS = &h8000000A
const IO_REPARSE_TAG_FILTER_MANAGER = &h8000000B
const IO_REPARSE_TAG_DFSR = &h80000012
const IO_REPARSE_TAG_SYMLINK = &hA000000C
const IO_REPARSE_TAG_IIS_CACHE = &hA0000010
const IO_REPARSE_TAG_DRIVE_EXTENDER = &h80000005
const IO_REPARSE_TAG_DEDUP = &h80000013
const IO_REPARSE_TAG_NFS = &h80000014


const IO_COMPLETION_MODIFY_STATE = &h0002
const IO_COMPLETION_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or &h3
const DUPLICATE_CLOSE_SOURCE = &h00000001
const DUPLICATE_SAME_ACCESS = &h00000002
const POWERBUTTON_ACTION_INDEX_NOTHING = 0
const POWERBUTTON_ACTION_INDEX_SLEEP = 1
const POWERBUTTON_ACTION_INDEX_HIBERNATE = 2
const POWERBUTTON_ACTION_INDEX_SHUTDOWN = 3
const POWERBUTTON_ACTION_VALUE_NOTHING = 0
const POWERBUTTON_ACTION_VALUE_SLEEP = 2
const POWERBUTTON_ACTION_VALUE_HIBERNATE = 3
const POWERBUTTON_ACTION_VALUE_SHUTDOWN = 6
const PERFSTATE_POLICY_CHANGE_IDEAL = 0
const PERFSTATE_POLICY_CHANGE_SINGLE = 1
const PERFSTATE_POLICY_CHANGE_ROCKET = 2
const PERFSTATE_POLICY_CHANGE_MAX = PERFSTATE_POLICY_CHANGE_ROCKET
const PROCESSOR_PERF_BOOST_POLICY_DISABLED = 0
const PROCESSOR_PERF_BOOST_POLICY_MAX = 100
const PROCESSOR_PERF_BOOST_MODE_DISABLED = 0
const PROCESSOR_PERF_BOOST_MODE_ENABLED = 1
const PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE = 2
const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_ENABLED = 3
const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE = 4
const PROCESSOR_PERF_BOOST_MODE_MAX = PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE
const CORE_PARKING_POLICY_CHANGE_IDEAL = 0
const CORE_PARKING_POLICY_CHANGE_SINGLE = 1
const CORE_PARKING_POLICY_CHANGE_ROCKET = 2
const CORE_PARKING_POLICY_CHANGE_MULTISTEP = 3
const CORE_PARKING_POLICY_CHANGE_MAX = CORE_PARKING_POLICY_CHANGE_MULTISTEP
const POWER_DEVICE_IDLE_POLICY_PERFORMANCE = 0
const POWER_DEVICE_IDLE_POLICY_CONSERVATIVE = 1

extern GUID_MAX_POWER_SAVINGS as const GUID
extern GUID_MIN_POWER_SAVINGS as const GUID
extern GUID_TYPICAL_POWER_SAVINGS as const GUID
extern NO_SUBGROUP_GUID as const GUID
extern ALL_POWERSCHEMES_GUID as const GUID
extern GUID_POWERSCHEME_PERSONALITY as const GUID
extern GUID_ACTIVE_POWERSCHEME as const GUID
extern GUID_IDLE_RESILIENCY_SUBGROUP as const GUID
extern GUID_IDLE_RESILIENCY_PERIOD as const GUID
extern GUID_DISK_COALESCING_POWERDOWN_TIMEOUT as const GUID
extern GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT as const GUID
extern GUID_VIDEO_SUBGROUP as const GUID
extern GUID_VIDEO_POWERDOWN_TIMEOUT as const GUID
extern GUID_VIDEO_ANNOYANCE_TIMEOUT as const GUID
extern GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE as const GUID
extern GUID_VIDEO_DIM_TIMEOUT as const GUID
extern GUID_VIDEO_ADAPTIVE_POWERDOWN as const GUID
extern GUID_MONITOR_POWER_ON as const GUID
extern GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS as const GUID
extern GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS as const GUID
extern GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS as const GUID
extern GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS as const GUID
extern GUID_CONSOLE_DISPLAY_STATE as const GUID
extern GUID_ALLOW_DISPLAY_REQUIRED as const GUID
extern GUID_VIDEO_CONSOLE_LOCK_TIMEOUT as const GUID
extern GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP as const GUID
extern GUID_NON_ADAPTIVE_INPUT_TIMEOUT as const GUID
extern GUID_DISK_SUBGROUP as const GUID
extern GUID_DISK_POWERDOWN_TIMEOUT as const GUID
extern GUID_DISK_IDLE_TIMEOUT as const GUID
extern GUID_DISK_BURST_IGNORE_THRESHOLD as const GUID
extern GUID_DISK_ADAPTIVE_POWERDOWN as const GUID
extern GUID_SLEEP_SUBGROUP as const GUID
extern GUID_SLEEP_IDLE_THRESHOLD as const GUID
extern GUID_STANDBY_TIMEOUT as const GUID
extern GUID_UNATTEND_SLEEP_TIMEOUT as const GUID
extern GUID_HIBERNATE_TIMEOUT as const GUID
extern GUID_HIBERNATE_FASTS4_POLICY as const GUID
extern GUID_CRITICAL_POWER_TRANSITION as const GUID
extern GUID_SYSTEM_AWAYMODE as const GUID
extern GUID_ALLOW_AWAYMODE as const GUID
extern GUID_ALLOW_STANDBY_STATES as const GUID
extern GUID_ALLOW_RTC_WAKE as const GUID
extern GUID_ALLOW_SYSTEM_REQUIRED as const GUID
extern GUID_SYSTEM_BUTTON_SUBGROUP as const GUID
extern GUID_POWERBUTTON_ACTION as const GUID
extern GUID_SLEEPBUTTON_ACTION as const GUID
extern GUID_USERINTERFACEBUTTON_ACTION as const GUID
extern GUID_LIDCLOSE_ACTION as const GUID
extern GUID_LIDOPEN_POWERSTATE as const GUID
extern GUID_BATTERY_SUBGROUP as const GUID
extern GUID_BATTERY_DISCHARGE_ACTION_0 as const GUID
extern GUID_BATTERY_DISCHARGE_LEVEL_0 as const GUID
extern GUID_BATTERY_DISCHARGE_FLAGS_0 as const GUID
extern GUID_BATTERY_DISCHARGE_ACTION_1 as const GUID
extern GUID_BATTERY_DISCHARGE_LEVEL_1 as const GUID
extern GUID_BATTERY_DISCHARGE_FLAGS_1 as const GUID
extern GUID_BATTERY_DISCHARGE_ACTION_2 as const GUID
extern GUID_BATTERY_DISCHARGE_LEVEL_2 as const GUID
extern GUID_BATTERY_DISCHARGE_FLAGS_2 as const GUID
extern GUID_BATTERY_DISCHARGE_ACTION_3 as const GUID
extern GUID_BATTERY_DISCHARGE_LEVEL_3 as const GUID
extern GUID_BATTERY_DISCHARGE_FLAGS_3 as const GUID
extern GUID_PROCESSOR_SETTINGS_SUBGROUP as const GUID
extern GUID_PROCESSOR_THROTTLE_POLICY as const GUID
extern GUID_PROCESSOR_THROTTLE_MAXIMUM as const GUID
extern GUID_PROCESSOR_THROTTLE_MINIMUM as const GUID
extern GUID_PROCESSOR_ALLOW_THROTTLING as const GUID
extern GUID_PROCESSOR_IDLESTATE_POLICY as const GUID
extern GUID_PROCESSOR_PERFSTATE_POLICY as const GUID
extern GUID_PROCESSOR_PERF_INCREASE_THRESHOLD as const GUID
extern GUID_PROCESSOR_PERF_DECREASE_THRESHOLD as const GUID
extern GUID_PROCESSOR_PERF_INCREASE_POLICY as const GUID
extern GUID_PROCESSOR_PERF_DECREASE_POLICY as const GUID
extern GUID_PROCESSOR_PERF_INCREASE_TIME as const GUID
extern GUID_PROCESSOR_PERF_DECREASE_TIME as const GUID
extern GUID_PROCESSOR_PERF_TIME_CHECK as const GUID
extern GUID_PROCESSOR_PERF_BOOST_POLICY as const GUID
extern GUID_PROCESSOR_PERF_BOOST_MODE as const GUID
extern GUID_PROCESSOR_IDLE_ALLOW_SCALING as const GUID
extern GUID_PROCESSOR_IDLE_DISABLE as const GUID
extern GUID_PROCESSOR_IDLE_STATE_MAXIMUM as const GUID
extern GUID_PROCESSOR_IDLE_TIME_CHECK as const GUID
extern GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD as const GUID
extern GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD as const GUID
extern GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD as const GUID
extern GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD as const GUID
extern GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY as const GUID
extern GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY as const GUID
extern GUID_PROCESSOR_CORE_PARKING_MAX_CORES as const GUID
extern GUID_PROCESSOR_CORE_PARKING_MIN_CORES as const GUID
extern GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME as const GUID
extern GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME as const GUID
extern GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR as const GUID
extern GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD as const GUID
extern GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING as const GUID
extern GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR as const GUID
extern GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD as const GUID
extern GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING as const GUID
extern GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD as const GUID
extern GUID_PROCESSOR_PARKING_CORE_OVERRIDE as const GUID
extern GUID_PROCESSOR_PARKING_PERF_STATE as const GUID
extern GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD as const GUID
extern GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD as const GUID
extern GUID_PROCESSOR_PERF_HISTORY as const GUID
extern GUID_PROCESSOR_PERF_LATENCY_HINT as const GUID
extern GUID_PROCESSOR_DISTRIBUTE_UTILITY as const GUID
extern GUID_SYSTEM_COOLING_POLICY as const GUID
extern GUID_LOCK_CONSOLE_ON_WAKE as const GUID
extern GUID_DEVICE_IDLE_POLICY as const GUID
extern GUID_ACDC_POWER_SOURCE as const GUID
extern GUID_LIDSWITCH_STATE_CHANGE as const GUID
extern GUID_BATTERY_PERCENTAGE_REMAINING as const GUID
extern GUID_GLOBAL_USER_PRESENCE as const GUID
extern GUID_SESSION_DISPLAY_STATUS as const GUID
extern GUID_SESSION_USER_PRESENCE as const GUID
extern GUID_IDLE_BACKGROUND_TASK as const GUID
extern GUID_BACKGROUND_TASK_NOTIFICATION as const GUID
extern GUID_APPLAUNCH_BUTTON as const GUID
extern GUID_PCIEXPRESS_SETTINGS_SUBGROUP as const GUID
extern GUID_PCIEXPRESS_ASPM_POLICY as const GUID
extern GUID_ENABLE_SWITCH_FORCED_SHUTDOWN as const GUID

type _SYSTEM_POWER_STATE as long
enum
 PowerSystemUnspecified = 0
 PowerSystemWorking = 1
 PowerSystemSleeping1 = 2
 PowerSystemSleeping2 = 3
 PowerSystemSleeping3 = 4
 PowerSystemHibernate = 5
 PowerSystemShutdown = 6
 PowerSystemMaximum = 7
end enum

type SYSTEM_POWER_STATE as _SYSTEM_POWER_STATE
type PSYSTEM_POWER_STATE as _SYSTEM_POWER_STATE ptr
const POWER_SYSTEM_MAXIMUM = 7

type POWER_ACTION as long
enum
 PowerActionNone = 0
 PowerActionReserved
 PowerActionSleep
 PowerActionHibernate
 PowerActionShutdown
 PowerActionShutdownReset
 PowerActionShutdownOff
 PowerActionWarmEject
end enum

type PPOWER_ACTION as POWER_ACTION ptr

type _DEVICE_POWER_STATE as long
enum
 PowerDeviceUnspecified = 0
 PowerDeviceD0
 PowerDeviceD1
 PowerDeviceD2
 PowerDeviceD3
 PowerDeviceMaximum
end enum

type DEVICE_POWER_STATE as _DEVICE_POWER_STATE
type PDEVICE_POWER_STATE as _DEVICE_POWER_STATE ptr

type _MONITOR_DISPLAY_STATE as long
enum
 PowerMonitorOff = 0
 PowerMonitorOn
 PowerMonitorDim
end enum

type MONITOR_DISPLAY_STATE as _MONITOR_DISPLAY_STATE
type PMONITOR_DISPLAY_STATE as _MONITOR_DISPLAY_STATE ptr

type _USER_ACTIVITY_PRESENCE as long
enum
 PowerUserPresent = 0
 PowerUserNotPresent
 PowerUserInactive
 PowerUserMaximum
 PowerUserInvalid = PowerUserMaximum
end enum

type USER_ACTIVITY_PRESENCE as _USER_ACTIVITY_PRESENCE
type PUSER_ACTIVITY_PRESENCE as _USER_ACTIVITY_PRESENCE ptr
const ES_SYSTEM_REQUIRED = cast(DWORD, &h00000001)
const ES_DISPLAY_REQUIRED = cast(DWORD, &h00000002)
const ES_USER_PRESENT = cast(DWORD, &h00000004)
const ES_AWAYMODE_REQUIRED = cast(DWORD, &h00000040)
const ES_CONTINUOUS = cast(DWORD, &h80000000)
type EXECUTION_STATE as DWORD
type PEXECUTION_STATE as DWORD ptr

type LATENCY_TIME as long
enum
 LT_DONT_CARE
 LT_LOWEST_LATENCY
end enum

const DIAGNOSTIC_REASON_VERSION = 0
const POWER_REQUEST_CONTEXT_VERSION = 0
const DIAGNOSTIC_REASON_SIMPLE_STRING = &h00000001
const DIAGNOSTIC_REASON_DETAILED_STRING = &h00000002
const DIAGNOSTIC_REASON_NOT_SPECIFIED = &h80000000
const DIAGNOSTIC_REASON_INVALID_FLAGS = not &h80000003
const POWER_REQUEST_CONTEXT_SIMPLE_STRING = &h00000001
const POWER_REQUEST_CONTEXT_DETAILED_STRING = &h00000002

type _POWER_REQUEST_TYPE as long
enum
 PowerRequestDisplayRequired
 PowerRequestSystemRequired
 PowerRequestAwayModeRequired
 PowerRequestExecutionRequired
end enum

type POWER_REQUEST_TYPE as _POWER_REQUEST_TYPE
type PPOWER_REQUEST_TYPE as _POWER_REQUEST_TYPE ptr
const PDCAP_D0_SUPPORTED = &h00000001
const PDCAP_D1_SUPPORTED = &h00000002
const PDCAP_D2_SUPPORTED = &h00000004
const PDCAP_D3_SUPPORTED = &h00000008
const PDCAP_WAKE_FROM_D0_SUPPORTED = &h00000010
const PDCAP_WAKE_FROM_D1_SUPPORTED = &h00000020
const PDCAP_WAKE_FROM_D2_SUPPORTED = &h00000040
const PDCAP_WAKE_FROM_D3_SUPPORTED = &h00000080
const PDCAP_WARM_EJECT_SUPPORTED = &h00000100

type CM_Power_Data_s
 PD_Size as DWORD
 PD_MostRecentPowerState as DEVICE_POWER_STATE
 PD_Capabilities as DWORD
 PD_D1Latency as DWORD
 PD_D2Latency as DWORD
 PD_D3Latency as DWORD
 PD_PowerStateMapping(0 to 6) as DEVICE_POWER_STATE
 PD_DeepestSystemWake as SYSTEM_POWER_STATE
end type

type CM_POWER_DATA as CM_Power_Data_s
type PCM_POWER_DATA as CM_Power_Data_s ptr

type POWER_INFORMATION_LEVEL as long
enum
 SystemPowerPolicyAc
 SystemPowerPolicyDc
 VerifySystemPolicyAc
 VerifySystemPolicyDc
 SystemPowerCapabilities
 SystemBatteryState
 SystemPowerStateHandler
 ProcessorStateHandler
 SystemPowerPolicyCurrent
 AdministratorPowerPolicy
 SystemReserveHiberFile
 ProcessorInformation
 SystemPowerInformation
 ProcessorStateHandler2
 LastWakeTime
 LastSleepTime
 SystemExecutionState
 SystemPowerStateNotifyHandler
 ProcessorPowerPolicyAc
 ProcessorPowerPolicyDc
 VerifyProcessorPowerPolicyAc
 VerifyProcessorPowerPolicyDc
 ProcessorPowerPolicyCurrent
 SystemPowerStateLogging
 SystemPowerLoggingEntry
 SetPowerSettingValue
 NotifyUserPowerSetting
 PowerInformationLevelUnused0
 SystemMonitorHiberBootPowerOff
 SystemVideoState
 TraceApplicationPowerMessage
 TraceApplicationPowerMessageEnd
 ProcessorPerfStates
 ProcessorIdleStates
 ProcessorCap
 SystemWakeSource
 SystemHiberFileInformation
 TraceServicePowerMessage
 ProcessorLoad
 PowerShutdownNotification
 MonitorCapabilities
 SessionPowerInit
 SessionDisplayState
 PowerRequestCreate
 PowerRequestAction
 GetPowerRequestList
 ProcessorInformationEx
 NotifyUserModeLegacyPowerEvent
 GroupPark
 ProcessorIdleDomains
 WakeTimerList
 SystemHiberFileSize
 ProcessorIdleStatesHv
 ProcessorPerfStatesHv
 ProcessorPerfCapHv
 ProcessorSetIdle
 LogicalProcessorIdling
 UserPresence
 PowerSettingNotificationName
 GetPowerSettingValue
 IdleResiliency
 SessionRITState
 SessionConnectNotification
 SessionPowerCleanup
 SessionLockState
 SystemHiberbootState
 PlatformInformation
 PdcInvocation
 MonitorInvocation
 FirmwareTableInformationRegistered
 SetShutdownSelectedTime
 SuspendResumeInvocation
 PlmPowerRequestCreate
 ScreenOff
 CsDeviceNotification
 PlatformRole
 LastResumePerformance
 DisplayBurst
 ExitLatencySamplingPercentage
 ApplyLowPowerScenarioSettings
 PowerInformationLevelMaximum
end enum

type POWER_USER_PRESENCE_TYPE as long
enum
 UserNotPresent = 0
 UserPresent = 1
 UserUnknown = &hff
end enum

type PPOWER_USER_PRESENCE_TYPE as POWER_USER_PRESENCE_TYPE ptr

type _POWER_USER_PRESENCE
 UserPresence as POWER_USER_PRESENCE_TYPE
end type

type POWER_USER_PRESENCE as _POWER_USER_PRESENCE
type PPOWER_USER_PRESENCE as _POWER_USER_PRESENCE ptr

type _POWER_SESSION_CONNECT
 Connected as WINBOOLEAN
 Console as WINBOOLEAN
end type

type POWER_SESSION_CONNECT as _POWER_SESSION_CONNECT
type PPOWER_SESSION_CONNECT as _POWER_SESSION_CONNECT ptr

type _POWER_SESSION_TIMEOUTS
 InputTimeout as DWORD
 DisplayTimeout as DWORD
end type

type POWER_SESSION_TIMEOUTS as _POWER_SESSION_TIMEOUTS
type PPOWER_SESSION_TIMEOUTS as _POWER_SESSION_TIMEOUTS ptr

type _POWER_SESSION_RIT_STATE
 Active as WINBOOLEAN
 LastInputTime as DWORD
end type

type POWER_SESSION_RIT_STATE as _POWER_SESSION_RIT_STATE
type PPOWER_SESSION_RIT_STATE as _POWER_SESSION_RIT_STATE ptr

type _POWER_SESSION_WINLOGON
 SessionId as DWORD
 Console as WINBOOLEAN
 Locked as WINBOOLEAN
end type

type POWER_SESSION_WINLOGON as _POWER_SESSION_WINLOGON
type PPOWER_SESSION_WINLOGON as _POWER_SESSION_WINLOGON ptr

type _POWER_IDLE_RESILIENCY
 CoalescingTimeout as DWORD
 IdleResiliencyPeriod as DWORD
end type

type POWER_IDLE_RESILIENCY as _POWER_IDLE_RESILIENCY
type PPOWER_IDLE_RESILIENCY as _POWER_IDLE_RESILIENCY ptr

type POWER_MONITOR_REQUEST_REASON as long
enum
 MonitorRequestReasonUnknown
 MonitorRequestReasonPowerButton
 MonitorRequestReasonRemoteConnection
 MonitorRequestReasonScMonitorpower
 MonitorRequestReasonUserInput
 MonitorRequestReasonAcDcDisplayBurst
 MonitorRequestReasonUserDisplayBurst
 MonitorRequestReasonPoSetSystemState
 MonitorRequestReasonSetThreadExecutionState
 MonitorRequestReasonFullWake
 MonitorRequestReasonSessionUnlock
 MonitorRequestReasonScreenOffRequest
 MonitorRequestReasonIdleTimeout
 MonitorRequestReasonPolicyChange
 MonitorRequestReasonMax
end enum

type _POWER_MONITOR_INVOCATION
 On as WINBOOLEAN
 Console as WINBOOLEAN
 RequestReason as POWER_MONITOR_REQUEST_REASON
end type

type POWER_MONITOR_INVOCATION as _POWER_MONITOR_INVOCATION
type PPOWER_MONITOR_INVOCATION as _POWER_MONITOR_INVOCATION ptr

type _RESUME_PERFORMANCE
 PostTimeMs as DWORD
 TotalResumeTimeMs as ULONGLONG
 ResumeCompleteTimestamp as ULONGLONG
end type

type RESUME_PERFORMANCE as _RESUME_PERFORMANCE
type PRESUME_PERFORMANCE as _RESUME_PERFORMANCE ptr

type SYSTEM_POWER_CONDITION as long
enum
 PoAc
 PoDc
 PoHot
 PoConditionMaximum
end enum

type SET_POWER_SETTING_VALUE
 Version as DWORD
 Guid as GUID
 PowerCondition as SYSTEM_POWER_CONDITION
 DataLength as DWORD
 Data(0 to 0) as UBYTE
end type

type PSET_POWER_SETTING_VALUE as SET_POWER_SETTING_VALUE ptr
const POWER_SETTING_VALUE_VERSION = &h1

type NOTIFY_USER_POWER_SETTING
 Guid as GUID
end type

type PNOTIFY_USER_POWER_SETTING as NOTIFY_USER_POWER_SETTING ptr

type _APPLICATIONLAUNCH_SETTING_VALUE
 ActivationTime as LARGE_INTEGER
 Flags as DWORD
 ButtonInstanceID as DWORD
end type

type APPLICATIONLAUNCH_SETTING_VALUE as _APPLICATIONLAUNCH_SETTING_VALUE
type PAPPLICATIONLAUNCH_SETTING_VALUE as _APPLICATIONLAUNCH_SETTING_VALUE ptr

type _POWER_PLATFORM_ROLE as long
enum
 PlatformRoleUnspecified = 0
 PlatformRoleDesktop
 PlatformRoleMobile
 PlatformRoleWorkstation
 PlatformRoleEnterpriseServer
 PlatformRoleSOHOServer
 PlatformRoleAppliancePC
 PlatformRolePerformanceServer
 PlatformRoleSlate
 PlatformRoleMaximum
end enum

type POWER_PLATFORM_ROLE as _POWER_PLATFORM_ROLE
type PPOWER_PLATFORM_ROLE as _POWER_PLATFORM_ROLE ptr

type _POWER_PLATFORM_INFORMATION
 AoAc as WINBOOLEAN
end type

type POWER_PLATFORM_INFORMATION as _POWER_PLATFORM_INFORMATION
type PPOWER_PLATFORM_INFORMATION as _POWER_PLATFORM_INFORMATION ptr
const POWER_PLATFORM_ROLE_V1 = &h00000001
const POWER_PLATFORM_ROLE_V1_MAX = PlatformRolePerformanceServer + 1
const POWER_PLATFORM_ROLE_V2 = &h00000002
const POWER_PLATFORM_ROLE_V2_MAX = PlatformRoleSlate + 1

 const POWER_PLATFORM_ROLE_VERSION = POWER_PLATFORM_ROLE_V1
 const POWER_PLATFORM_ROLE_VERSION_MAX = POWER_PLATFORM_ROLE_V1_MAX

type BATTERY_REPORTING_SCALE
 Granularity as DWORD
 Capacity as DWORD
end type

type PBATTERY_REPORTING_SCALE as BATTERY_REPORTING_SCALE ptr

type PPM_WMI_LEGACY_PERFSTATE
 Frequency as DWORD
 Flags as DWORD
 PercentFrequency as DWORD
end type

type PPPM_WMI_LEGACY_PERFSTATE as PPM_WMI_LEGACY_PERFSTATE ptr

type PPM_WMI_IDLE_STATE
 Latency as DWORD
 Power as DWORD
 TimeCheck as DWORD
 PromotePercent as UBYTE
 DemotePercent as UBYTE
 StateType as UBYTE
 Reserved as UBYTE
 StateFlags as DWORD
 Context as DWORD
 IdleHandler as DWORD
 Reserved1 as DWORD
end type

type PPPM_WMI_IDLE_STATE as PPM_WMI_IDLE_STATE ptr

type PPM_WMI_IDLE_STATES
 as DWORD Type
 Count as DWORD
 TargetState as DWORD
 OldState as DWORD
 TargetProcessors as DWORD64
 State(0 to 0) as PPM_WMI_IDLE_STATE
end type

type PPPM_WMI_IDLE_STATES as PPM_WMI_IDLE_STATES ptr

type PPM_WMI_IDLE_STATES_EX
 as DWORD Type
 Count as DWORD
 TargetState as DWORD
 OldState as DWORD
 TargetProcessors as PVOID
 State(0 to 0) as PPM_WMI_IDLE_STATE
end type

type PPPM_WMI_IDLE_STATES_EX as PPM_WMI_IDLE_STATES_EX ptr

type PPM_WMI_PERF_STATE
 Frequency as DWORD
 Power as DWORD
 PercentFrequency as UBYTE
 IncreaseLevel as UBYTE
 DecreaseLevel as UBYTE
 as UBYTE Type
 IncreaseTime as DWORD
 DecreaseTime as DWORD
 Control as DWORD64
 Status as DWORD64
 HitCount as DWORD
 Reserved1 as DWORD
 Reserved2 as DWORD64
 Reserved3 as DWORD64
end type

type PPPM_WMI_PERF_STATE as PPM_WMI_PERF_STATE ptr

type PPM_WMI_PERF_STATES
 Count as DWORD
 MaxFrequency as DWORD
 CurrentState as DWORD
 MaxPerfState as DWORD
 MinPerfState as DWORD
 LowestPerfState as DWORD
 ThermalConstraint as DWORD
 BusyAdjThreshold as UBYTE
 PolicyType as UBYTE
 as UBYTE Type
 Reserved as UBYTE
 TimerInterval as DWORD
 TargetProcessors as DWORD64
 PStateHandler as DWORD
 PStateContext as DWORD
 TStateHandler as DWORD
 TStateContext as DWORD
 FeedbackHandler as DWORD
 Reserved1 as DWORD
 Reserved2 as DWORD64
 State(0 to 0) as PPM_WMI_PERF_STATE
end type

type PPPM_WMI_PERF_STATES as PPM_WMI_PERF_STATES ptr

type PPM_WMI_PERF_STATES_EX
 Count as DWORD
 MaxFrequency as DWORD
 CurrentState as DWORD
 MaxPerfState as DWORD
 MinPerfState as DWORD
 LowestPerfState as DWORD
 ThermalConstraint as DWORD
 BusyAdjThreshold as UBYTE
 PolicyType as UBYTE
 as UBYTE Type
 Reserved as UBYTE
 TimerInterval as DWORD
 TargetProcessors as PVOID
 PStateHandler as DWORD
 PStateContext as DWORD
 TStateHandler as DWORD
 TStateContext as DWORD
 FeedbackHandler as DWORD
 Reserved1 as DWORD
 Reserved2 as DWORD64
 State(0 to 0) as PPM_WMI_PERF_STATE
end type

type PPPM_WMI_PERF_STATES_EX as PPM_WMI_PERF_STATES_EX ptr
const PROC_IDLE_BUCKET_COUNT = 6
const PROC_IDLE_BUCKET_COUNT_EX = 16

type PPM_IDLE_STATE_ACCOUNTING
 IdleTransitions as DWORD
 FailedTransitions as DWORD
 InvalidBucketIndex as DWORD
 TotalTime as DWORD64
 IdleTimeBuckets(0 to 5) as DWORD
end type

type PPPM_IDLE_STATE_ACCOUNTING as PPM_IDLE_STATE_ACCOUNTING ptr

type PPM_IDLE_ACCOUNTING
 StateCount as DWORD
 TotalTransitions as DWORD
 ResetCount as DWORD
 StartTime as DWORD64
 State(0 to 0) as PPM_IDLE_STATE_ACCOUNTING
end type

type PPPM_IDLE_ACCOUNTING as PPM_IDLE_ACCOUNTING ptr

type PPM_IDLE_STATE_BUCKET_EX
 TotalTimeUs as DWORD64
 MinTimeUs as DWORD
 MaxTimeUs as DWORD
 Count as DWORD
end type

type PPPM_IDLE_STATE_BUCKET_EX as PPM_IDLE_STATE_BUCKET_EX ptr

type PPM_IDLE_STATE_ACCOUNTING_EX
 TotalTime as DWORD64
 IdleTransitions as DWORD
 FailedTransitions as DWORD
 InvalidBucketIndex as DWORD
 MinTimeUs as DWORD
 MaxTimeUs as DWORD
 CancelledTransitions as DWORD
 IdleTimeBuckets(0 to 15) as PPM_IDLE_STATE_BUCKET_EX
end type

type PPPM_IDLE_STATE_ACCOUNTING_EX as PPM_IDLE_STATE_ACCOUNTING_EX ptr

type PPM_IDLE_ACCOUNTING_EX
 StateCount as DWORD
 TotalTransitions as DWORD
 ResetCount as DWORD
 AbortCount as DWORD
 StartTime as DWORD64
 State(0 to 0) as PPM_IDLE_STATE_ACCOUNTING_EX
end type

type PPPM_IDLE_ACCOUNTING_EX as PPM_IDLE_ACCOUNTING_EX ptr
const ACPI_PPM_SOFTWARE_ALL = &hfc
const ACPI_PPM_SOFTWARE_ANY = &hfd
const ACPI_PPM_HARDWARE_ALL = &hfe
const MS_PPM_SOFTWARE_ALL = &h1
const PPM_FIRMWARE_ACPI1C2 = &h1
const PPM_FIRMWARE_ACPI1C3 = &h2
const PPM_FIRMWARE_ACPI1TSTATES = &h4
const PPM_FIRMWARE_CST = &h8
const PPM_FIRMWARE_CSD = &h10
const PPM_FIRMWARE_PCT = &h20
const PPM_FIRMWARE_PSS = &h40
const PPM_FIRMWARE_XPSS = &h80
const PPM_FIRMWARE_PPC = &h100
const PPM_FIRMWARE_PSD = &h200
const PPM_FIRMWARE_PTC = &h400
const PPM_FIRMWARE_TSS = &h800
const PPM_FIRMWARE_TPC = &h1000
const PPM_FIRMWARE_TSD = &h2000
const PPM_FIRMWARE_PCCH = &h4000
const PPM_FIRMWARE_PCCP = &h8000
const PPM_FIRMWARE_OSC = &h10000
const PPM_FIRMWARE_PDC = &h20000
const PPM_FIRMWARE_CPC = &h40000
const PPM_PERFORMANCE_IMPLEMENTATION_NONE = 0
const PPM_PERFORMANCE_IMPLEMENTATION_PSTATES = 1
const PPM_PERFORMANCE_IMPLEMENTATION_PCCV1 = 2
const PPM_PERFORMANCE_IMPLEMENTATION_CPPC = 3
const PPM_PERFORMANCE_IMPLEMENTATION_PEP = 4
const PPM_IDLE_IMPLEMENTATION_NONE = &h00
const PPM_IDLE_IMPLEMENTATION_CSTATES = &h1
const PPM_IDLE_IMPLEMENTATION_PEP = &h2

type PPM_PERFSTATE_EVENT
 State as DWORD
 Status as DWORD
 Latency as DWORD
 Speed as DWORD
 Processor as DWORD
end type

type PPPM_PERFSTATE_EVENT as PPM_PERFSTATE_EVENT ptr

type PPM_PERFSTATE_DOMAIN_EVENT
 State as DWORD
 Latency as DWORD
 Speed as DWORD
 Processors as DWORD64
end type

type PPPM_PERFSTATE_DOMAIN_EVENT as PPM_PERFSTATE_DOMAIN_EVENT ptr

type PPM_IDLESTATE_EVENT
 NewState as DWORD
 OldState as DWORD
 Processors as DWORD64
end type

type PPPM_IDLESTATE_EVENT as PPM_IDLESTATE_EVENT ptr

type PPM_THERMALCHANGE_EVENT
 ThermalConstraint as DWORD
 Processors as DWORD64
end type

type PPPM_THERMALCHANGE_EVENT as PPM_THERMALCHANGE_EVENT ptr

type PPM_THERMAL_POLICY_EVENT
 Mode as UBYTE
 Processors as DWORD64
end type

type PPPM_THERMAL_POLICY_EVENT as PPM_THERMAL_POLICY_EVENT ptr
extern PPM_PERFSTATE_CHANGE_GUID as const GUID
extern PPM_PERFSTATE_DOMAIN_CHANGE_GUID as const GUID
extern PPM_IDLESTATE_CHANGE_GUID as const GUID
extern PPM_PERFSTATES_DATA_GUID as const GUID
extern PPM_IDLESTATES_DATA_GUID as const GUID
extern PPM_IDLE_ACCOUNTING_GUID as const GUID
extern PPM_IDLE_ACCOUNTING_EX_GUID as const GUID
extern PPM_THERMALCONSTRAINT_GUID as const GUID
extern PPM_PERFMON_PERFSTATE_GUID as const GUID
extern PPM_THERMAL_POLICY_CHANGE_GUID as const GUID

type POWER_ACTION_POLICY
 Action as POWER_ACTION
 Flags as DWORD
 EventCode as DWORD
end type

type PPOWER_ACTION_POLICY as POWER_ACTION_POLICY ptr
const POWER_ACTION_QUERY_ALLOWED = &h00000001
const POWER_ACTION_UI_ALLOWED = &h00000002
const POWER_ACTION_OVERRIDE_APPS = &h00000004
const POWER_ACTION_HIBERBOOT = &h00000008
const POWER_ACTION_PSEUDO_TRANSITION = &h08000000
const POWER_ACTION_LIGHTEST_FIRST = &h10000000
const POWER_ACTION_LOCK_CONSOLE = &h20000000
const POWER_ACTION_DISABLE_WAKES = &h40000000
const POWER_ACTION_CRITICAL = &h80000000
const POWER_LEVEL_USER_NOTIFY_TEXT = &h00000001
const POWER_LEVEL_USER_NOTIFY_SOUND = &h00000002
const POWER_LEVEL_USER_NOTIFY_EXEC = &h00000004
const POWER_USER_NOTIFY_BUTTON = &h00000008
const POWER_USER_NOTIFY_SHUTDOWN = &h00000010
const POWER_USER_NOTIFY_FORCED_SHUTDOWN = &h00000020
const POWER_FORCE_TRIGGER_RESET = &h80000000
const BATTERY_DISCHARGE_FLAGS_EVENTCODE_MASK = &h00000007
const BATTERY_DISCHARGE_FLAGS_ENABLE = &h80000000
const DISCHARGE_POLICY_CRITICAL = 0
const DISCHARGE_POLICY_LOW = 1
const NUM_DISCHARGE_POLICIES = 4
const PROCESSOR_IDLESTATE_POLICY_COUNT = &h3

type PROCESSOR_IDLESTATE_INFO
 TimeCheck as DWORD
 DemotePercent as UBYTE
 PromotePercent as UBYTE
 Spare(0 to 1) as UBYTE
end type

type PPROCESSOR_IDLESTATE_INFO as PROCESSOR_IDLESTATE_INFO ptr

type SYSTEM_POWER_LEVEL
 Enable as WINBOOLEAN
 Spare(0 to 2) as UBYTE
 BatteryLevel as DWORD
 PowerPolicy as POWER_ACTION_POLICY
 MinSystemState as SYSTEM_POWER_STATE
end type

type PSYSTEM_POWER_LEVEL as SYSTEM_POWER_LEVEL ptr

type _SYSTEM_POWER_POLICY
 Revision as DWORD
 PowerButton as POWER_ACTION_POLICY
 SleepButton as POWER_ACTION_POLICY
 LidClose as POWER_ACTION_POLICY
 LidOpenWake as SYSTEM_POWER_STATE
 Reserved as DWORD
 Idle as POWER_ACTION_POLICY
 IdleTimeout as DWORD
 IdleSensitivity as UBYTE
 DynamicThrottle as UBYTE
 Spare2(0 to 1) as UBYTE
 MinSleep as SYSTEM_POWER_STATE
 MaxSleep as SYSTEM_POWER_STATE
 ReducedLatencySleep as SYSTEM_POWER_STATE
 WinLogonFlags as DWORD
 Spare3 as DWORD
 DozeS4Timeout as DWORD
 BroadcastCapacityResolution as DWORD
 DischargePolicy(0 to 3) as SYSTEM_POWER_LEVEL
 VideoTimeout as DWORD
 VideoDimDisplay as WINBOOLEAN
 VideoReserved(0 to 2) as DWORD
 SpindownTimeout as DWORD
 OptimizeForPower as WINBOOLEAN
 FanThrottleTolerance as UBYTE
 ForcedThrottle as UBYTE
 MinThrottle as UBYTE
 OverThrottled as POWER_ACTION_POLICY
end type

type SYSTEM_POWER_POLICY as _SYSTEM_POWER_POLICY
type PSYSTEM_POWER_POLICY as _SYSTEM_POWER_POLICY ptr
const PO_THROTTLE_NONE = 0
const PO_THROTTLE_CONSTANT = 1
const PO_THROTTLE_DEGRADE = 2
const PO_THROTTLE_ADAPTIVE = 3
const PO_THROTTLE_MAXIMUM = 4

union PROCESSOR_IDLESTATE_POLICY_Flags
 AsWORD as WORD

 type
 AllowScaling : 1 as WORD
 Disabled : 1 as WORD
 Reserved : 14 as WORD
 end type
end union

type PROCESSOR_IDLESTATE_POLICY
 Revision as WORD
 Flags as PROCESSOR_IDLESTATE_POLICY_Flags
 PolicyCount as DWORD
 Policy(0 to 2) as PROCESSOR_IDLESTATE_INFO
end type

type PPROCESSOR_IDLESTATE_POLICY as PROCESSOR_IDLESTATE_POLICY ptr

type _PROCESSOR_POWER_POLICY_INFO
 TimeCheck as DWORD
 DemoteLimit as DWORD
 PromoteLimit as DWORD
 DemotePercent as UBYTE
 PromotePercent as UBYTE
 Spare(0 to 1) as UBYTE
 AllowDemotion : 1 as DWORD
 AllowPromotion : 1 as DWORD
 Reserved : 30 as DWORD
end type

type PROCESSOR_POWER_POLICY_INFO as _PROCESSOR_POWER_POLICY_INFO
type PPROCESSOR_POWER_POLICY_INFO as _PROCESSOR_POWER_POLICY_INFO ptr

type _PROCESSOR_POWER_POLICY
 Revision as DWORD
 DynamicThrottle as UBYTE
 Spare(0 to 2) as UBYTE
 DisableCStates : 1 as DWORD
 Reserved : 31 as DWORD
 PolicyCount as DWORD
 Policy(0 to 2) as PROCESSOR_POWER_POLICY_INFO
end type

type PROCESSOR_POWER_POLICY as _PROCESSOR_POWER_POLICY
type PPROCESSOR_POWER_POLICY as _PROCESSOR_POWER_POLICY ptr

union PROCESSOR_PERFSTATE_POLICY_Flags
 AsBYTE as UBYTE

 type
 NoDomainAccounting : 1 as UBYTE
 IncreasePolicy : 2 as UBYTE
 DecreasePolicy : 2 as UBYTE
 Reserved : 3 as UBYTE
 end type
end union

type PROCESSOR_PERFSTATE_POLICY
 Revision as DWORD
 MaxThrottle as UBYTE
 MinThrottle as UBYTE
 BusyAdjThreshold as UBYTE

 union
 Spare as UBYTE
 Flags as PROCESSOR_PERFSTATE_POLICY_Flags
 end union

 TimeCheck as DWORD
 IncreaseTime as DWORD
 DecreaseTime as DWORD
 IncreasePercent as DWORD
 DecreasePercent as DWORD
end type

type PPROCESSOR_PERFSTATE_POLICY as PROCESSOR_PERFSTATE_POLICY ptr

type _ADMINISTRATOR_POWER_POLICY
 MinSleep as SYSTEM_POWER_STATE
 MaxSleep as SYSTEM_POWER_STATE
 MinVideoTimeout as DWORD
 MaxVideoTimeout as DWORD
 MinSpindownTimeout as DWORD
 MaxSpindownTimeout as DWORD
end type

type ADMINISTRATOR_POWER_POLICY as _ADMINISTRATOR_POWER_POLICY
type PADMINISTRATOR_POWER_POLICY as _ADMINISTRATOR_POWER_POLICY ptr

type SYSTEM_POWER_CAPABILITIES
 PowerButtonPresent as WINBOOLEAN
 SleepButtonPresent as WINBOOLEAN
 LidPresent as WINBOOLEAN
 SystemS1 as WINBOOLEAN
 SystemS2 as WINBOOLEAN
 SystemS3 as WINBOOLEAN
 SystemS4 as WINBOOLEAN
 SystemS5 as WINBOOLEAN
 HiberFilePresent as WINBOOLEAN
 FullWake as WINBOOLEAN
 VideoDimPresent as WINBOOLEAN
 ApmPresent as WINBOOLEAN
 UpsPresent as WINBOOLEAN
 ThermalControl as WINBOOLEAN
 ProcessorThrottle as WINBOOLEAN
 ProcessorMinThrottle as UBYTE
 ProcessorMaxThrottle as UBYTE
 FastSystemS4 as WINBOOLEAN
 spare2(0 to 2) as UBYTE
 DiskSpinDown as WINBOOLEAN
 spare3(0 to 7) as UBYTE
 SystemBatteriesPresent as WINBOOLEAN
 BatteriesAreShortTerm as WINBOOLEAN
 BatteryScale(0 to 2) as BATTERY_REPORTING_SCALE
 AcOnLineWake as SYSTEM_POWER_STATE
 SoftLidWake as SYSTEM_POWER_STATE
 RtcWake as SYSTEM_POWER_STATE
 MinDeviceWakeState as SYSTEM_POWER_STATE
 DefaultLowLatencyWake as SYSTEM_POWER_STATE
end type

type PSYSTEM_POWER_CAPABILITIES as SYSTEM_POWER_CAPABILITIES ptr

type SYSTEM_BATTERY_STATE
 AcOnLine as WINBOOLEAN
 BatteryPresent as WINBOOLEAN
 Charging as WINBOOLEAN
 Discharging as WINBOOLEAN
 Spare1(0 to 3) as WINBOOLEAN
 MaxCapacity as DWORD
 RemainingCapacity as DWORD
 Rate as DWORD
 EstimatedTime as DWORD
 DefaultAlert1 as DWORD
 DefaultAlert2 as DWORD
end type

type PSYSTEM_BATTERY_STATE as SYSTEM_BATTERY_STATE ptr
const IMAGE_DOS_SIGNATURE = &h5A4D
const IMAGE_OS2_SIGNATURE = &h454E
const IMAGE_OS2_SIGNATURE_LE = &h454C
const IMAGE_VXD_SIGNATURE = &h454C
const IMAGE_NT_SIGNATURE = &h00004550

type _IMAGE_DOS_HEADER field = 2
 e_magic as WORD
 e_cblp as WORD
 e_cp as WORD
 e_crlc as WORD
 e_cparhdr as WORD
 e_minalloc as WORD
 e_maxalloc as WORD
 e_ss as WORD
 e_sp as WORD
 e_csum as WORD
 e_ip as WORD
 e_cs as WORD
 e_lfarlc as WORD
 e_ovno as WORD
 e_res(0 to 3) as WORD
 e_oemid as WORD
 e_oeminfo as WORD
 e_res2(0 to 9) as WORD
 e_lfanew as LONG
end type

type IMAGE_DOS_HEADER as _IMAGE_DOS_HEADER
type PIMAGE_DOS_HEADER as _IMAGE_DOS_HEADER ptr

type _IMAGE_OS2_HEADER field = 2
 ne_magic as WORD
 ne_ver as CHAR
 ne_rev as CHAR
 ne_enttab as WORD
 ne_cbenttab as WORD
 ne_crc as LONG
 ne_flags as WORD
 ne_autodata as WORD
 ne_heap as WORD
 ne_stack as WORD
 ne_csip as LONG
 ne_sssp as LONG
 ne_cseg as WORD
 ne_cmod as WORD
 ne_cbnrestab as WORD
 ne_segtab as WORD
 ne_rsrctab as WORD
 ne_restab as WORD
 ne_modtab as WORD
 ne_imptab as WORD
 ne_nrestab as LONG
 ne_cmovent as WORD
 ne_align as WORD
 ne_cres as WORD
 ne_exetyp as UBYTE
 ne_flagsothers as UBYTE
 ne_pretthunks as WORD
 ne_psegrefbytes as WORD
 ne_swaparea as WORD
 ne_expver as WORD
end type

type IMAGE_OS2_HEADER as _IMAGE_OS2_HEADER
type PIMAGE_OS2_HEADER as _IMAGE_OS2_HEADER ptr

type _IMAGE_VXD_HEADER field = 2
 e32_magic as WORD
 e32_border as UBYTE
 e32_worder as UBYTE
 e32_level as DWORD
 e32_cpu as WORD
 e32_os as WORD
 e32_ver as DWORD
 e32_mflags as DWORD
 e32_mpages as DWORD
 e32_startobj as DWORD
 e32_eip as DWORD
 e32_stackobj as DWORD
 e32_esp as DWORD
 e32_pagesize as DWORD
 e32_lastpagesize as DWORD
 e32_fixupsize as DWORD
 e32_fixupsum as DWORD
 e32_ldrsize as DWORD
 e32_ldrsum as DWORD
 e32_objtab as DWORD
 e32_objcnt as DWORD
 e32_objmap as DWORD
 e32_itermap as DWORD
 e32_rsrctab as DWORD
 e32_rsrccnt as DWORD
 e32_restab as DWORD
 e32_enttab as DWORD
 e32_dirtab as DWORD
 e32_dircnt as DWORD
 e32_fpagetab as DWORD
 e32_frectab as DWORD
 e32_impmod as DWORD
 e32_impmodcnt as DWORD
 e32_impproc as DWORD
 e32_pagesum as DWORD
 e32_datapage as DWORD
 e32_preload as DWORD
 e32_nrestab as DWORD
 e32_cbnrestab as DWORD
 e32_nressum as DWORD
 e32_autodata as DWORD
 e32_debuginfo as DWORD
 e32_debuglen as DWORD
 e32_instpreload as DWORD
 e32_instdemand as DWORD
 e32_heapsize as DWORD
 e32_res3(0 to 11) as UBYTE
 e32_winresoff as DWORD
 e32_winreslen as DWORD
 e32_devid as WORD
 e32_ddkver as WORD
end type

type IMAGE_VXD_HEADER as _IMAGE_VXD_HEADER
type PIMAGE_VXD_HEADER as _IMAGE_VXD_HEADER ptr

type _IMAGE_FILE_HEADER field = 4
 Machine as WORD
 NumberOfSections as WORD
 TimeDateStamp as DWORD
 PointerToSymbolTable as DWORD
 NumberOfSymbols as DWORD
 SizeOfOptionalHeader as WORD
 Characteristics as WORD
end type

type IMAGE_FILE_HEADER as _IMAGE_FILE_HEADER
type PIMAGE_FILE_HEADER as _IMAGE_FILE_HEADER ptr
const IMAGE_SIZEOF_FILE_HEADER = 20
const IMAGE_FILE_RELOCS_STRIPPED = &h0001
const IMAGE_FILE_EXECUTABLE_IMAGE = &h0002
const IMAGE_FILE_LINE_NUMS_STRIPPED = &h0004
const IMAGE_FILE_LOCAL_SYMS_STRIPPED = &h0008
const IMAGE_FILE_AGGRESIVE_WS_TRIM = &h0010
const IMAGE_FILE_LARGE_ADDRESS_AWARE = &h0020
const IMAGE_FILE_BYTES_REVERSED_LO = &h0080
const IMAGE_FILE_32BIT_MACHINE = &h0100
const IMAGE_FILE_DEBUG_STRIPPED = &h0200
const IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = &h0400
const IMAGE_FILE_NET_RUN_FROM_SWAP = &h0800
const IMAGE_FILE_SYSTEM = &h1000
const IMAGE_FILE_DLL = &h2000
const IMAGE_FILE_UP_SYSTEM_ONLY = &h4000
const IMAGE_FILE_BYTES_REVERSED_HI = &h8000
const IMAGE_FILE_MACHINE_UNKNOWN = 0
const IMAGE_FILE_MACHINE_I386 = &h014c
const IMAGE_FILE_MACHINE_R3000 = &h0162
const IMAGE_FILE_MACHINE_R4000 = &h0166
const IMAGE_FILE_MACHINE_R10000 = &h0168
const IMAGE_FILE_MACHINE_WCEMIPSV2 = &h0169
const IMAGE_FILE_MACHINE_ALPHA = &h0184
const IMAGE_FILE_MACHINE_SH3 = &h01a2
const IMAGE_FILE_MACHINE_SH3DSP = &h01a3
const IMAGE_FILE_MACHINE_SH3E = &h01a4
const IMAGE_FILE_MACHINE_SH4 = &h01a6
const IMAGE_FILE_MACHINE_SH5 = &h01a8
const IMAGE_FILE_MACHINE_ARM = &h01c0
const IMAGE_FILE_MACHINE_ARMV7 = &h01c4
const IMAGE_FILE_MACHINE_ARMNT = &h01c4
const IMAGE_FILE_MACHINE_THUMB = &h01c2
const IMAGE_FILE_MACHINE_AM33 = &h01d3
const IMAGE_FILE_MACHINE_POWERPC = &h01F0
const IMAGE_FILE_MACHINE_POWERPCFP = &h01f1
const IMAGE_FILE_MACHINE_IA64 = &h0200
const IMAGE_FILE_MACHINE_MIPS16 = &h0266
const IMAGE_FILE_MACHINE_ALPHA64 = &h0284
const IMAGE_FILE_MACHINE_MIPSFPU = &h0366
const IMAGE_FILE_MACHINE_MIPSFPU16 = &h0466
const IMAGE_FILE_MACHINE_AXP64 = IMAGE_FILE_MACHINE_ALPHA64
const IMAGE_FILE_MACHINE_TRICORE = &h0520
const IMAGE_FILE_MACHINE_CEF = &h0CEF
const IMAGE_FILE_MACHINE_EBC = &h0EBC
const IMAGE_FILE_MACHINE_AMD64 = &h8664
const IMAGE_FILE_MACHINE_M32R = &h9041
const IMAGE_FILE_MACHINE_CEE = &hc0ee

type _IMAGE_DATA_DIRECTORY field = 4
 VirtualAddress as DWORD
 Size as DWORD
end type

type IMAGE_DATA_DIRECTORY as _IMAGE_DATA_DIRECTORY
type PIMAGE_DATA_DIRECTORY as _IMAGE_DATA_DIRECTORY ptr
const IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 16

type _IMAGE_OPTIONAL_HEADER field = 4
 Magic as WORD
 MajorLinkerVersion as UBYTE
 MinorLinkerVersion as UBYTE
 SizeOfCode as DWORD
 SizeOfInitializedData as DWORD
 SizeOfUninitializedData as DWORD
 AddressOfEntryPoint as DWORD
 BaseOfCode as DWORD
 BaseOfData as DWORD
 ImageBase as DWORD
 SectionAlignment as DWORD
 FileAlignment as DWORD
 MajorOperatingSystemVersion as WORD
 MinorOperatingSystemVersion as WORD
 MajorImageVersion as WORD
 MinorImageVersion as WORD
 MajorSubsystemVersion as WORD
 MinorSubsystemVersion as WORD
 Win32VersionValue as DWORD
 SizeOfImage as DWORD
 SizeOfHeaders as DWORD
 CheckSum as DWORD
 Subsystem as WORD
 DllCharacteristics as WORD
 SizeOfStackReserve as DWORD
 SizeOfStackCommit as DWORD
 SizeOfHeapReserve as DWORD
 SizeOfHeapCommit as DWORD
 LoaderFlags as DWORD
 NumberOfRvaAndSizes as DWORD
 DataDirectory(0 to 15) as IMAGE_DATA_DIRECTORY
end type

type IMAGE_OPTIONAL_HEADER32 as _IMAGE_OPTIONAL_HEADER
type PIMAGE_OPTIONAL_HEADER32 as _IMAGE_OPTIONAL_HEADER ptr

type _IMAGE_ROM_OPTIONAL_HEADER field = 4
 Magic as WORD
 MajorLinkerVersion as UBYTE
 MinorLinkerVersion as UBYTE
 SizeOfCode as DWORD
 SizeOfInitializedData as DWORD
 SizeOfUninitializedData as DWORD
 AddressOfEntryPoint as DWORD
 BaseOfCode as DWORD
 BaseOfData as DWORD
 BaseOfBss as DWORD
 GprMask as DWORD
 CprMask(0 to 3) as DWORD
 GpValue as DWORD
end type

type IMAGE_ROM_OPTIONAL_HEADER as _IMAGE_ROM_OPTIONAL_HEADER
type PIMAGE_ROM_OPTIONAL_HEADER as _IMAGE_ROM_OPTIONAL_HEADER ptr

type _IMAGE_OPTIONAL_HEADER64 field = 4
 Magic as WORD
 MajorLinkerVersion as UBYTE
 MinorLinkerVersion as UBYTE
 SizeOfCode as DWORD
 SizeOfInitializedData as DWORD
 SizeOfUninitializedData as DWORD
 AddressOfEntryPoint as DWORD
 BaseOfCode as DWORD
 ImageBase as ULONGLONG
 SectionAlignment as DWORD
 FileAlignment as DWORD
 MajorOperatingSystemVersion as WORD
 MinorOperatingSystemVersion as WORD
 MajorImageVersion as WORD
 MinorImageVersion as WORD
 MajorSubsystemVersion as WORD
 MinorSubsystemVersion as WORD
 Win32VersionValue as DWORD
 SizeOfImage as DWORD
 SizeOfHeaders as DWORD
 CheckSum as DWORD
 Subsystem as WORD
 DllCharacteristics as WORD
 SizeOfStackReserve as ULONGLONG
 SizeOfStackCommit as ULONGLONG
 SizeOfHeapReserve as ULONGLONG
 SizeOfHeapCommit as ULONGLONG
 LoaderFlags as DWORD
 NumberOfRvaAndSizes as DWORD
 DataDirectory(0 to 15) as IMAGE_DATA_DIRECTORY
end type

type IMAGE_OPTIONAL_HEADER64 as _IMAGE_OPTIONAL_HEADER64
type PIMAGE_OPTIONAL_HEADER64 as _IMAGE_OPTIONAL_HEADER64 ptr
const IMAGE_SIZEOF_ROM_OPTIONAL_HEADER = 56
const IMAGE_SIZEOF_STD_OPTIONAL_HEADER = 28
const IMAGE_SIZEOF_NT_OPTIONAL32_HEADER = 224
const IMAGE_SIZEOF_NT_OPTIONAL64_HEADER = 240
const IMAGE_NT_OPTIONAL_HDR32_MAGIC = &h10b
const IMAGE_NT_OPTIONAL_HDR64_MAGIC = &h20b
const IMAGE_ROM_OPTIONAL_HDR_MAGIC = &h107

 type IMAGE_OPTIONAL_HEADER as IMAGE_OPTIONAL_HEADER32
 type PIMAGE_OPTIONAL_HEADER as PIMAGE_OPTIONAL_HEADER32
 const IMAGE_SIZEOF_NT_OPTIONAL_HEADER = IMAGE_SIZEOF_NT_OPTIONAL32_HEADER
 const IMAGE_NT_OPTIONAL_HDR_MAGIC = IMAGE_NT_OPTIONAL_HDR32_MAGIC

type _IMAGE_NT_HEADERS64 field = 4
 Signature as DWORD
 FileHeader as IMAGE_FILE_HEADER
 OptionalHeader as IMAGE_OPTIONAL_HEADER64
end type

type IMAGE_NT_HEADERS64 as _IMAGE_NT_HEADERS64
type PIMAGE_NT_HEADERS64 as _IMAGE_NT_HEADERS64 ptr

type _IMAGE_NT_HEADERS field = 4
 Signature as DWORD
 FileHeader as IMAGE_FILE_HEADER
 OptionalHeader as IMAGE_OPTIONAL_HEADER32
end type

type IMAGE_NT_HEADERS32 as _IMAGE_NT_HEADERS
type PIMAGE_NT_HEADERS32 as _IMAGE_NT_HEADERS ptr

type _IMAGE_ROM_HEADERS field = 4
 FileHeader as IMAGE_FILE_HEADER
 OptionalHeader as IMAGE_ROM_OPTIONAL_HEADER
end type

type IMAGE_ROM_HEADERS as _IMAGE_ROM_HEADERS
type PIMAGE_ROM_HEADERS as _IMAGE_ROM_HEADERS ptr

 type IMAGE_NT_HEADERS as IMAGE_NT_HEADERS32
 type PIMAGE_NT_HEADERS as PIMAGE_NT_HEADERS32

const IMAGE_SUBSYSTEM_UNKNOWN = 0
const IMAGE_SUBSYSTEM_NATIVE = 1
const IMAGE_SUBSYSTEM_WINDOWS_GUI = 2
const IMAGE_SUBSYSTEM_WINDOWS_CUI = 3
const IMAGE_SUBSYSTEM_OS2_CUI = 5
const IMAGE_SUBSYSTEM_POSIX_CUI = 7
const IMAGE_SUBSYSTEM_NATIVE_WINDOWS = 8
const IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 9
const IMAGE_SUBSYSTEM_EFI_APPLICATION = 10
const IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 11
const IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 12
const IMAGE_SUBSYSTEM_EFI_ROM = 13
const IMAGE_SUBSYSTEM_XBOX = 14
const IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION = 16
const IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE = &h0040
const IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY = &h0080
const IMAGE_DLLCHARACTERISTICS_NX_COMPAT = &h0100
const IMAGE_DLLCHARACTERISTICS_NO_ISOLATION = &h0200
const IMAGE_DLLCHARACTERISTICS_NO_SEH = &h0400
const IMAGE_DLLCHARACTERISTICS_NO_BIND = &h0800
const IMAGE_DLLCHARACTERISTICS_APPCONTAINER = &h1000
const IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = &h2000
const IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = &h8000
const IMAGE_DIRECTORY_ENTRY_EXPORT = 0
const IMAGE_DIRECTORY_ENTRY_IMPORT = 1
const IMAGE_DIRECTORY_ENTRY_RESOURCE = 2
const IMAGE_DIRECTORY_ENTRY_EXCEPTION = 3
const IMAGE_DIRECTORY_ENTRY_SECURITY = 4
const IMAGE_DIRECTORY_ENTRY_BASERELOC = 5
const IMAGE_DIRECTORY_ENTRY_DEBUG = 6
const IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 7
const IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 8
const IMAGE_DIRECTORY_ENTRY_TLS = 9
const IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 10
const IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 11
const IMAGE_DIRECTORY_ENTRY_IAT = 12
const IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 13
const IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 14

type ANON_OBJECT_HEADER field = 4
 Sig1 as WORD
 Sig2 as WORD
 Version as WORD
 Machine as WORD
 TimeDateStamp as DWORD
 ClassID as CLSID
 SizeOfData as DWORD
end type

type ANON_OBJECT_HEADER_V2 field = 4
 Sig1 as WORD
 Sig2 as WORD
 Version as WORD
 Machine as WORD
 TimeDateStamp as DWORD
 ClassID as CLSID
 SizeOfData as DWORD
 Flags as DWORD
 MetaDataSize as DWORD
 MetaDataOffset as DWORD
end type

type ANON_OBJECT_HEADER_BIGOBJ field = 4
 Sig1 as WORD
 Sig2 as WORD
 Version as WORD
 Machine as WORD
 TimeDateStamp as DWORD
 ClassID as CLSID
 SizeOfData as DWORD
 Flags as DWORD
 MetaDataSize as DWORD
 MetaDataOffset as DWORD
 NumberOfSections as DWORD
 PointerToSymbolTable as DWORD
 NumberOfSymbols as DWORD
end type

const IMAGE_SIZEOF_SHORT_NAME = 8

union _IMAGE_SECTION_HEADER_Misc field = 4
 PhysicalAddress as DWORD
 VirtualSize as DWORD
end union

type _IMAGE_SECTION_HEADER field = 4
 Name(0 to 7) as UBYTE
 Misc as _IMAGE_SECTION_HEADER_Misc
 VirtualAddress as DWORD
 SizeOfRawData as DWORD
 PointerToRawData as DWORD
 PointerToRelocations as DWORD
 PointerToLinenumbers as DWORD
 NumberOfRelocations as WORD
 NumberOfLinenumbers as WORD
 Characteristics as DWORD
end type

type IMAGE_SECTION_HEADER as _IMAGE_SECTION_HEADER
type PIMAGE_SECTION_HEADER as _IMAGE_SECTION_HEADER ptr
const IMAGE_SIZEOF_SECTION_HEADER = 40
const IMAGE_SCN_TYPE_NO_PAD = &h00000008
const IMAGE_SCN_CNT_CODE = &h00000020
const IMAGE_SCN_CNT_INITIALIZED_DATA = &h00000040
const IMAGE_SCN_CNT_UNINITIALIZED_DATA = &h00000080
const IMAGE_SCN_LNK_OTHER = &h00000100
const IMAGE_SCN_LNK_INFO = &h00000200
const IMAGE_SCN_LNK_REMOVE = &h00000800
const IMAGE_SCN_LNK_COMDAT = &h00001000
const IMAGE_SCN_NO_DEFER_SPEC_EXC = &h00004000
const IMAGE_SCN_GPREL = &h00008000
const IMAGE_SCN_MEM_FARDATA = &h00008000
const IMAGE_SCN_MEM_PURGEABLE = &h00020000
const IMAGE_SCN_MEM_16BIT = &h00020000
const IMAGE_SCN_MEM_LOCKED = &h00040000
const IMAGE_SCN_MEM_PRELOAD = &h00080000
const IMAGE_SCN_ALIGN_1BYTES = &h00100000
const IMAGE_SCN_ALIGN_2BYTES = &h00200000
const IMAGE_SCN_ALIGN_4BYTES = &h00300000
const IMAGE_SCN_ALIGN_8BYTES = &h00400000
const IMAGE_SCN_ALIGN_16BYTES = &h00500000
const IMAGE_SCN_ALIGN_32BYTES = &h00600000
const IMAGE_SCN_ALIGN_64BYTES = &h00700000
const IMAGE_SCN_ALIGN_128BYTES = &h00800000
const IMAGE_SCN_ALIGN_256BYTES = &h00900000
const IMAGE_SCN_ALIGN_512BYTES = &h00A00000
const IMAGE_SCN_ALIGN_1024BYTES = &h00B00000
const IMAGE_SCN_ALIGN_2048BYTES = &h00C00000
const IMAGE_SCN_ALIGN_4096BYTES = &h00D00000
const IMAGE_SCN_ALIGN_8192BYTES = &h00E00000
const IMAGE_SCN_ALIGN_MASK = &h00F00000
const IMAGE_SCN_LNK_NRELOC_OVFL = &h01000000
const IMAGE_SCN_MEM_DISCARDABLE = &h02000000
const IMAGE_SCN_MEM_NOT_CACHED = &h04000000
const IMAGE_SCN_MEM_NOT_PAGED = &h08000000
const IMAGE_SCN_MEM_SHARED = &h10000000
const IMAGE_SCN_MEM_EXECUTE = &h20000000
const IMAGE_SCN_MEM_READ = &h40000000
const IMAGE_SCN_MEM_WRITE = &h80000000
const IMAGE_SCN_SCALE_INDEX = &h00000001

type _IMAGE_SYMBOL_N_Name field = 2
 Short as DWORD
 Long as DWORD
end type

union _IMAGE_SYMBOL_N field = 2
 ShortName(0 to 7) as UBYTE
 Name as _IMAGE_SYMBOL_N_Name
 LongName(0 to 1) as DWORD
end union

type _IMAGE_SYMBOL field = 2
 N as _IMAGE_SYMBOL_N
 Value as DWORD
 SectionNumber as SHORT
 as WORD Type
 StorageClass as UBYTE
 NumberOfAuxSymbols as UBYTE
end type

type IMAGE_SYMBOL as _IMAGE_SYMBOL
type PIMAGE_SYMBOL as IMAGE_SYMBOL ptr
const IMAGE_SIZEOF_SYMBOL = 18

type _IMAGE_SYMBOL_EX_N_Name field = 2
 Short as DWORD
 Long as DWORD
end type

union _IMAGE_SYMBOL_EX_N field = 2
 ShortName(0 to 7) as UBYTE
 Name as _IMAGE_SYMBOL_EX_N_Name
 LongName(0 to 1) as DWORD
end union

type _IMAGE_SYMBOL_EX field = 2
 N as _IMAGE_SYMBOL_EX_N
 Value as DWORD
 SectionNumber as LONG
 as WORD Type
 StorageClass as UBYTE
 NumberOfAuxSymbols as UBYTE
end type

type IMAGE_SYMBOL_EX as _IMAGE_SYMBOL_EX
type PIMAGE_SYMBOL_EX as _IMAGE_SYMBOL_EX ptr
const IMAGE_SYM_SECTION_MAX = &hFEFF
const IMAGE_SYM_SECTION_MAX_EX = MAXLONG
const IMAGE_SYM_TYPE_NULL = &h00000
const IMAGE_SYM_TYPE_VOID = &h0001
const IMAGE_SYM_TYPE_CHAR = &h0002
const IMAGE_SYM_TYPE_SHORT = &h0003
const IMAGE_SYM_TYPE_INT = &h0004
const IMAGE_SYM_TYPE_LONG = &h0005
const IMAGE_SYM_TYPE_FLOAT = &h0006
const IMAGE_SYM_TYPE_DOUBLE = &h0007
const IMAGE_SYM_TYPE_STRUCT = &h0008
const IMAGE_SYM_TYPE_UNION = &h0009
const IMAGE_SYM_TYPE_ENUM = &h000A
const IMAGE_SYM_TYPE_MOE = &h000B
const IMAGE_SYM_TYPE_BYTE = &h000C
const IMAGE_SYM_TYPE_WORD = &h000D
const IMAGE_SYM_TYPE_UINT = &h000E
const IMAGE_SYM_TYPE_DWORD = &h000F
const IMAGE_SYM_TYPE_PCODE = &h8000
const IMAGE_SYM_DTYPE_NULL = 0
const IMAGE_SYM_DTYPE_POINTER = 1
const IMAGE_SYM_DTYPE_FUNCTION = 2
const IMAGE_SYM_DTYPE_ARRAY = 3
const IMAGE_SYM_CLASS_END_OF_FUNCTION = cast(UBYTE, -1)
const IMAGE_SYM_CLASS_NULL = &h00000
const IMAGE_SYM_CLASS_AUTOMATIC = &h0001
const IMAGE_SYM_CLASS_EXTERNAL = &h0002
const IMAGE_SYM_CLASS_STATIC = &h0003
const IMAGE_SYM_CLASS_REGISTER = &h0004
const IMAGE_SYM_CLASS_EXTERNAL_DEF = &h0005
const IMAGE_SYM_CLASS_LABEL = &h0006
const IMAGE_SYM_CLASS_UNDEFINED_LABEL = &h0007
const IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = &h0008
const IMAGE_SYM_CLASS_ARGUMENT = &h0009
const IMAGE_SYM_CLASS_STRUCT_TAG = &h000A
const IMAGE_SYM_CLASS_MEMBER_OF_UNION = &h000B
const IMAGE_SYM_CLASS_UNION_TAG = &h000C
const IMAGE_SYM_CLASS_TYPE_DEFINITION = &h000D
const IMAGE_SYM_CLASS_UNDEFINED_STATIC = &h000E
const IMAGE_SYM_CLASS_ENUM_TAG = &h000F
const IMAGE_SYM_CLASS_MEMBER_OF_ENUM = &h0010
const IMAGE_SYM_CLASS_REGISTER_PARAM = &h0011
const IMAGE_SYM_CLASS_BIT_FIELD = &h0012
const IMAGE_SYM_CLASS_FAR_EXTERNAL = &h0044
const IMAGE_SYM_CLASS_BLOCK = &h0064
const IMAGE_SYM_CLASS_FUNCTION = &h0065
const IMAGE_SYM_CLASS_END_OF_STRUCT = &h0066
const IMAGE_SYM_CLASS_FILE = &h0067
const IMAGE_SYM_CLASS_SECTION = &h0068
const IMAGE_SYM_CLASS_WEAK_EXTERNAL = &h0069
const IMAGE_SYM_CLASS_CLR_TOKEN = &h006B
const N_BTMASK = &h000F
const N_TMASK = &h0030
const N_TMASK1 = &h00C0
const N_TMASK2 = &h00F0
const N_BTSHFT = 4
const N_TSHIFT = 2

type IMAGE_AUX_SYMBOL_TOKEN_DEF field = 2
 bAuxType as UBYTE
 bReserved as UBYTE
 SymbolTableIndex as DWORD
 rgbReserved(0 to 11) as UBYTE
end type

type PIMAGE_AUX_SYMBOL_TOKEN_DEF as IMAGE_AUX_SYMBOL_TOKEN_DEF ptr

type _IMAGE_AUX_SYMBOL_Sym_Misc_LnSz field = 2
 Linenumber as WORD
 Size as WORD
end type

union _IMAGE_AUX_SYMBOL_Sym_Misc field = 2
 LnSz as _IMAGE_AUX_SYMBOL_Sym_Misc_LnSz
 TotalSize as DWORD
end union

type _IMAGE_AUX_SYMBOL_Sym_FcnAry_Function field = 2
 PointerToLinenumber as DWORD
 PointerToNextFunction as DWORD
end type

type _IMAGE_AUX_SYMBOL_Sym_FcnAry_Array field = 2
 Dimension(0 to 3) as WORD
end type

union _IMAGE_AUX_SYMBOL_Sym_FcnAry field = 2
 Function as _IMAGE_AUX_SYMBOL_Sym_FcnAry_Function
 Array as _IMAGE_AUX_SYMBOL_Sym_FcnAry_Array
end union

type _IMAGE_AUX_SYMBOL_Sym field = 2
 TagIndex as DWORD
 Misc as _IMAGE_AUX_SYMBOL_Sym_Misc
 FcnAry as _IMAGE_AUX_SYMBOL_Sym_FcnAry
 TvIndex as WORD
end type

type _IMAGE_AUX_SYMBOL_File field = 2
 Name(0 to 17) as UBYTE
end type

type _IMAGE_AUX_SYMBOL_Section field = 2
 Length as DWORD
 NumberOfRelocations as WORD
 NumberOfLinenumbers as WORD
 CheckSum as DWORD
 Number as SHORT
 Selection as UBYTE
end type

type _IMAGE_AUX_SYMBOL_CRC field = 2
 crc as DWORD
 rgbReserved(0 to 13) as UBYTE
end type

union _IMAGE_AUX_SYMBOL field = 2
 Sym as _IMAGE_AUX_SYMBOL_Sym
 File as _IMAGE_AUX_SYMBOL_File
 Section as _IMAGE_AUX_SYMBOL_Section
 TokenDef as IMAGE_AUX_SYMBOL_TOKEN_DEF
 CRC as _IMAGE_AUX_SYMBOL_CRC
end union

type IMAGE_AUX_SYMBOL as _IMAGE_AUX_SYMBOL
type PIMAGE_AUX_SYMBOL as _IMAGE_AUX_SYMBOL ptr

type _IMAGE_AUX_SYMBOL_EX_Sym field = 2
 WeakDefaultSymIndex as DWORD
 WeakSearchType as DWORD
 rgbReserved(0 to 11) as UBYTE
end type

type _IMAGE_AUX_SYMBOL_EX_File field = 2
 Name(0 to sizeof(IMAGE_SYMBOL_EX) - 1) as UBYTE
end type

type _IMAGE_AUX_SYMBOL_EX_Section field = 2
 Length as DWORD
 NumberOfRelocations as WORD
 NumberOfLinenumbers as WORD
 CheckSum as DWORD
 Number as SHORT
 Selection as UBYTE
 bReserved as UBYTE
 HighNumber as SHORT
 rgbReserved(0 to 1) as UBYTE
end type

type _IMAGE_AUX_SYMBOL_EX_CRC field = 2
 crc as DWORD
 rgbReserved(0 to 15) as UBYTE
end type

union _IMAGE_AUX_SYMBOL_EX field = 2
 Sym as _IMAGE_AUX_SYMBOL_EX_Sym
 File as _IMAGE_AUX_SYMBOL_EX_File
 Section as _IMAGE_AUX_SYMBOL_EX_Section

 type field = 2
 TokenDef as IMAGE_AUX_SYMBOL_TOKEN_DEF
 rgbReserved(0 to 1) as UBYTE
 end type

 CRC as _IMAGE_AUX_SYMBOL_EX_CRC
end union

type IMAGE_AUX_SYMBOL_EX as _IMAGE_AUX_SYMBOL_EX
type PIMAGE_AUX_SYMBOL_EX as _IMAGE_AUX_SYMBOL_EX ptr
const IMAGE_SIZEOF_AUX_SYMBOL = 18

type IMAGE_AUX_SYMBOL_TYPE as long
enum
 IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1
end enum

const IMAGE_COMDAT_SELECT_NODUPLICATES = 1
const IMAGE_COMDAT_SELECT_ANY = 2
const IMAGE_COMDAT_SELECT_SAME_SIZE = 3
const IMAGE_COMDAT_SELECT_EXACT_MATCH = 4
const IMAGE_COMDAT_SELECT_ASSOCIATIVE = 5
const IMAGE_COMDAT_SELECT_LARGEST = 6
const IMAGE_COMDAT_SELECT_NEWEST = 7
const IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1
const IMAGE_WEAK_EXTERN_SEARCH_LIBRARY = 2
const IMAGE_WEAK_EXTERN_SEARCH_ALIAS = 3

type _IMAGE_RELOCATION field = 2
 union field = 2
 VirtualAddress as DWORD
 RelocCount as DWORD
 end union

 SymbolTableIndex as DWORD
 as WORD Type
end type

type IMAGE_RELOCATION as _IMAGE_RELOCATION
type PIMAGE_RELOCATION as IMAGE_RELOCATION ptr
const IMAGE_SIZEOF_RELOCATION = 10
const IMAGE_REL_I386_ABSOLUTE = &h00000
const IMAGE_REL_I386_DIR16 = &h0001
const IMAGE_REL_I386_REL16 = &h0002
const IMAGE_REL_I386_DIR32 = &h0006
const IMAGE_REL_I386_DIR32NB = &h0007
const IMAGE_REL_I386_SEG12 = &h0009
const IMAGE_REL_I386_SECTION = &h000A
const IMAGE_REL_I386_SECREL = &h000B
const IMAGE_REL_I386_TOKEN = &h000C
const IMAGE_REL_I386_SECREL7 = &h000D
const IMAGE_REL_I386_REL32 = &h0014
const IMAGE_REL_MIPS_ABSOLUTE = &h00000
const IMAGE_REL_MIPS_REFHALF = &h0001
const IMAGE_REL_MIPS_REFWORD = &h0002
const IMAGE_REL_MIPS_JMPADDR = &h0003
const IMAGE_REL_MIPS_REFHI = &h0004
const IMAGE_REL_MIPS_REFLO = &h0005
const IMAGE_REL_MIPS_GPREL = &h0006
const IMAGE_REL_MIPS_LITERAL = &h0007
const IMAGE_REL_MIPS_SECTION = &h000A
const IMAGE_REL_MIPS_SECREL = &h000B
const IMAGE_REL_MIPS_SECRELLO = &h000C
const IMAGE_REL_MIPS_SECRELHI = &h000D
const IMAGE_REL_MIPS_TOKEN = &h000E
const IMAGE_REL_MIPS_JMPADDR16 = &h0010
const IMAGE_REL_MIPS_REFWORDNB = &h0022
const IMAGE_REL_MIPS_PAIR = &h0025
const IMAGE_REL_ALPHA_ABSOLUTE = &h00000
const IMAGE_REL_ALPHA_REFLONG = &h0001
const IMAGE_REL_ALPHA_REFQUAD = &h0002
const IMAGE_REL_ALPHA_GPREL32 = &h0003
const IMAGE_REL_ALPHA_LITERAL = &h0004
const IMAGE_REL_ALPHA_LITUSE = &h0005
const IMAGE_REL_ALPHA_GPDISP = &h0006
const IMAGE_REL_ALPHA_BRADDR = &h0007
const IMAGE_REL_ALPHA_HINT = &h0008
const IMAGE_REL_ALPHA_INLINE_REFLONG = &h0009
const IMAGE_REL_ALPHA_REFHI = &h000A
const IMAGE_REL_ALPHA_REFLO = &h000B
const IMAGE_REL_ALPHA_PAIR = &h000C
const IMAGE_REL_ALPHA_MATCH = &h000D
const IMAGE_REL_ALPHA_SECTION = &h000E
const IMAGE_REL_ALPHA_SECREL = &h000F
const IMAGE_REL_ALPHA_REFLONGNB = &h0010
const IMAGE_REL_ALPHA_SECRELLO = &h0011
const IMAGE_REL_ALPHA_SECRELHI = &h0012
const IMAGE_REL_ALPHA_REFQ3 = &h0013
const IMAGE_REL_ALPHA_REFQ2 = &h0014
const IMAGE_REL_ALPHA_REFQ1 = &h0015
const IMAGE_REL_ALPHA_GPRELLO = &h0016
const IMAGE_REL_ALPHA_GPRELHI = &h0017
const IMAGE_REL_PPC_ABSOLUTE = &h00000
const IMAGE_REL_PPC_ADDR64 = &h0001
const IMAGE_REL_PPC_ADDR32 = &h0002
const IMAGE_REL_PPC_ADDR24 = &h0003
const IMAGE_REL_PPC_ADDR16 = &h0004
const IMAGE_REL_PPC_ADDR14 = &h0005
const IMAGE_REL_PPC_REL24 = &h0006
const IMAGE_REL_PPC_REL14 = &h0007
const IMAGE_REL_PPC_TOCREL16 = &h0008
const IMAGE_REL_PPC_TOCREL14 = &h0009
const IMAGE_REL_PPC_ADDR32NB = &h000A
const IMAGE_REL_PPC_SECREL = &h000B
const IMAGE_REL_PPC_SECTION = &h000C
const IMAGE_REL_PPC_IFGLUE = &h000D
const IMAGE_REL_PPC_IMGLUE = &h000E
const IMAGE_REL_PPC_SECREL16 = &h000F
const IMAGE_REL_PPC_REFHI = &h0010
const IMAGE_REL_PPC_REFLO = &h0011
const IMAGE_REL_PPC_PAIR = &h0012
const IMAGE_REL_PPC_SECRELLO = &h0013
const IMAGE_REL_PPC_SECRELHI = &h0014
const IMAGE_REL_PPC_GPREL = &h0015
const IMAGE_REL_PPC_TOKEN = &h0016
const IMAGE_REL_PPC_TYPEMASK = &h00FF
const IMAGE_REL_PPC_NEG = &h0100
const IMAGE_REL_PPC_BRTAKEN = &h0200
const IMAGE_REL_PPC_BRNTAKEN = &h0400
const IMAGE_REL_PPC_TOCDEFN = &h0800
const IMAGE_REL_SH3_ABSOLUTE = &h00000
const IMAGE_REL_SH3_DIRECT16 = &h0001
const IMAGE_REL_SH3_DIRECT32 = &h0002
const IMAGE_REL_SH3_DIRECT8 = &h0003
const IMAGE_REL_SH3_DIRECT8_WORD = &h0004
const IMAGE_REL_SH3_DIRECT8_LONG = &h0005
const IMAGE_REL_SH3_DIRECT4 = &h0006
const IMAGE_REL_SH3_DIRECT4_WORD = &h0007
const IMAGE_REL_SH3_DIRECT4_LONG = &h0008
const IMAGE_REL_SH3_PCREL8_WORD = &h0009
const IMAGE_REL_SH3_PCREL8_LONG = &h000A
const IMAGE_REL_SH3_PCREL12_WORD = &h000B
const IMAGE_REL_SH3_STARTOF_SECTION = &h000C
const IMAGE_REL_SH3_SIZEOF_SECTION = &h000D
const IMAGE_REL_SH3_SECTION = &h000E
const IMAGE_REL_SH3_SECREL = &h000F
const IMAGE_REL_SH3_DIRECT32_NB = &h0010
const IMAGE_REL_SH3_GPREL4_LONG = &h0011
const IMAGE_REL_SH3_TOKEN = &h0012
const IMAGE_REL_SHM_PCRELPT = &h0013
const IMAGE_REL_SHM_REFLO = &h0014
const IMAGE_REL_SHM_REFHALF = &h0015
const IMAGE_REL_SHM_RELLO = &h0016
const IMAGE_REL_SHM_RELHALF = &h0017
const IMAGE_REL_SHM_PAIR = &h0018
const IMAGE_REL_SH_NOMODE = &h8000
const IMAGE_REL_ARM_ABSOLUTE = &h00000
const IMAGE_REL_ARM_ADDR32 = &h0001
const IMAGE_REL_ARM_ADDR32NB = &h0002
const IMAGE_REL_ARM_BRANCH24 = &h0003
const IMAGE_REL_ARM_BRANCH11 = &h0004
const IMAGE_REL_ARM_TOKEN = &h0005
const IMAGE_REL_ARM_GPREL12 = &h0006
const IMAGE_REL_ARM_GPREL7 = &h0007
const IMAGE_REL_ARM_BLX24 = &h0008
const IMAGE_REL_ARM_BLX11 = &h0009
const IMAGE_REL_ARM_SECTION = &h000E
const IMAGE_REL_ARM_SECREL = &h000F
const IMAGE_REL_ARM_MOV32A = &h0010
const IMAGE_REL_ARM_MOV32 = &h0010
const IMAGE_REL_ARM_MOV32T = &h0011
const IMAGE_REL_THUMB_MOV32 = &h0011
const IMAGE_REL_ARM_BRANCH20T = &h0012
const IMAGE_REL_THUMB_BRANCH20 = &h0012
const IMAGE_REL_ARM_BRANCH24T = &h0014
const IMAGE_REL_THUMB_BRANCH24 = &h0014
const IMAGE_REL_ARM_BLX23T = &h0015
const IMAGE_REL_THUMB_BLX23 = &h0015
const IMAGE_REL_AM_ABSOLUTE = &h00000
const IMAGE_REL_AM_ADDR32 = &h0001
const IMAGE_REL_AM_ADDR32NB = &h0002
const IMAGE_REL_AM_CALL32 = &h0003
const IMAGE_REL_AM_FUNCINFO = &h0004
const IMAGE_REL_AM_REL32_1 = &h0005
const IMAGE_REL_AM_REL32_2 = &h0006
const IMAGE_REL_AM_SECREL = &h0007
const IMAGE_REL_AM_SECTION = &h0008
const IMAGE_REL_AM_TOKEN = &h0009
const IMAGE_REL_AMD64_ABSOLUTE = &h00000
const IMAGE_REL_AMD64_ADDR64 = &h0001
const IMAGE_REL_AMD64_ADDR32 = &h0002
const IMAGE_REL_AMD64_ADDR32NB = &h0003
const IMAGE_REL_AMD64_REL32 = &h0004
const IMAGE_REL_AMD64_REL32_1 = &h0005
const IMAGE_REL_AMD64_REL32_2 = &h0006
const IMAGE_REL_AMD64_REL32_3 = &h0007
const IMAGE_REL_AMD64_REL32_4 = &h0008
const IMAGE_REL_AMD64_REL32_5 = &h0009
const IMAGE_REL_AMD64_SECTION = &h000A
const IMAGE_REL_AMD64_SECREL = &h000B
const IMAGE_REL_AMD64_SECREL7 = &h000C
const IMAGE_REL_AMD64_TOKEN = &h000D
const IMAGE_REL_AMD64_SREL32 = &h000E
const IMAGE_REL_AMD64_PAIR = &h000F
const IMAGE_REL_AMD64_SSPAN32 = &h0010
const IMAGE_REL_IA64_ABSOLUTE = &h00000
const IMAGE_REL_IA64_IMM14 = &h0001
const IMAGE_REL_IA64_IMM22 = &h0002
const IMAGE_REL_IA64_IMM64 = &h0003
const IMAGE_REL_IA64_DIR32 = &h0004
const IMAGE_REL_IA64_DIR64 = &h0005
const IMAGE_REL_IA64_PCREL21B = &h0006
const IMAGE_REL_IA64_PCREL21M = &h0007
const IMAGE_REL_IA64_PCREL21F = &h0008
const IMAGE_REL_IA64_GPREL22 = &h0009
const IMAGE_REL_IA64_LTOFF22 = &h000A
const IMAGE_REL_IA64_SECTION = &h000B
const IMAGE_REL_IA64_SECREL22 = &h000C
const IMAGE_REL_IA64_SECREL64I = &h000D
const IMAGE_REL_IA64_SECREL32 = &h000E
const IMAGE_REL_IA64_DIR32NB = &h0010
const IMAGE_REL_IA64_SREL14 = &h0011
const IMAGE_REL_IA64_SREL22 = &h0012
const IMAGE_REL_IA64_SREL32 = &h0013
const IMAGE_REL_IA64_UREL32 = &h0014
const IMAGE_REL_IA64_PCREL60X = &h0015
const IMAGE_REL_IA64_PCREL60B = &h0016
const IMAGE_REL_IA64_PCREL60F = &h0017
const IMAGE_REL_IA64_PCREL60I = &h0018
const IMAGE_REL_IA64_PCREL60M = &h0019
const IMAGE_REL_IA64_IMMGPREL64 = &h001A
const IMAGE_REL_IA64_TOKEN = &h001B
const IMAGE_REL_IA64_GPREL32 = &h001C
const IMAGE_REL_IA64_ADDEND = &h001F
const IMAGE_REL_CEF_ABSOLUTE = &h00000
const IMAGE_REL_CEF_ADDR32 = &h0001
const IMAGE_REL_CEF_ADDR64 = &h0002
const IMAGE_REL_CEF_ADDR32NB = &h0003
const IMAGE_REL_CEF_SECTION = &h0004
const IMAGE_REL_CEF_SECREL = &h0005
const IMAGE_REL_CEF_TOKEN = &h0006
const IMAGE_REL_CEE_ABSOLUTE = &h00000
const IMAGE_REL_CEE_ADDR32 = &h0001
const IMAGE_REL_CEE_ADDR64 = &h0002
const IMAGE_REL_CEE_ADDR32NB = &h0003
const IMAGE_REL_CEE_SECTION = &h0004
const IMAGE_REL_CEE_SECREL = &h0005
const IMAGE_REL_CEE_TOKEN = &h0006
const IMAGE_REL_M32R_ABSOLUTE = &h00000
const IMAGE_REL_M32R_ADDR32 = &h0001
const IMAGE_REL_M32R_ADDR32NB = &h0002
const IMAGE_REL_M32R_ADDR24 = &h0003
const IMAGE_REL_M32R_GPREL16 = &h0004
const IMAGE_REL_M32R_PCREL24 = &h0005
const IMAGE_REL_M32R_PCREL16 = &h0006
const IMAGE_REL_M32R_PCREL8 = &h0007
const IMAGE_REL_M32R_REFHALF = &h0008
const IMAGE_REL_M32R_REFHI = &h0009
const IMAGE_REL_M32R_REFLO = &h000A
const IMAGE_REL_M32R_PAIR = &h000B
const IMAGE_REL_M32R_SECTION = &h000C
const IMAGE_REL_M32R_SECREL32 = &h000D
const IMAGE_REL_M32R_TOKEN = &h000E
const IMAGE_REL_EBC_ABSOLUTE = &h00000
const IMAGE_REL_EBC_ADDR32NB = &h0001
const IMAGE_REL_EBC_REL32 = &h0002
const IMAGE_REL_EBC_SECTION = &h0003
const IMAGE_REL_EBC_SECREL = &h0004
const EMARCH_ENC_I17_IMM7B_INST_WORD_X = 3
const EMARCH_ENC_I17_IMM7B_SIZE_X = 7
const EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X = 4
const EMARCH_ENC_I17_IMM7B_VAL_POS_X = 0
const EMARCH_ENC_I17_IMM9D_INST_WORD_X = 3
const EMARCH_ENC_I17_IMM9D_SIZE_X = 9
const EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X = 18
const EMARCH_ENC_I17_IMM9D_VAL_POS_X = 7
const EMARCH_ENC_I17_IMM5C_INST_WORD_X = 3
const EMARCH_ENC_I17_IMM5C_SIZE_X = 5
const EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X = 13
const EMARCH_ENC_I17_IMM5C_VAL_POS_X = 16
const EMARCH_ENC_I17_IC_INST_WORD_X = 3
const EMARCH_ENC_I17_IC_SIZE_X = 1
const EMARCH_ENC_I17_IC_INST_WORD_POS_X = 12
const EMARCH_ENC_I17_IC_VAL_POS_X = 21
const EMARCH_ENC_I17_IMM41a_INST_WORD_X = 1
const EMARCH_ENC_I17_IMM41a_SIZE_X = 10
const EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X = 14
const EMARCH_ENC_I17_IMM41a_VAL_POS_X = 22
const EMARCH_ENC_I17_IMM41b_INST_WORD_X = 1
const EMARCH_ENC_I17_IMM41b_SIZE_X = 8
const EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X = 24
const EMARCH_ENC_I17_IMM41b_VAL_POS_X = 32
const EMARCH_ENC_I17_IMM41c_INST_WORD_X = 2
const EMARCH_ENC_I17_IMM41c_SIZE_X = 23
const EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X = 0
const EMARCH_ENC_I17_IMM41c_VAL_POS_X = 40
const EMARCH_ENC_I17_SIGN_INST_WORD_X = 3
const EMARCH_ENC_I17_SIGN_SIZE_X = 1
const EMARCH_ENC_I17_SIGN_INST_WORD_POS_X = 27
const EMARCH_ENC_I17_SIGN_VAL_POS_X = 63
const X3_OPCODE_INST_WORD_X = 3
const X3_OPCODE_SIZE_X = 4
const X3_OPCODE_INST_WORD_POS_X = 28
const X3_OPCODE_SIGN_VAL_POS_X = 0
const X3_I_INST_WORD_X = 3
const X3_I_SIZE_X = 1
const X3_I_INST_WORD_POS_X = 27
const X3_I_SIGN_VAL_POS_X = 59
const X3_D_WH_INST_WORD_X = 3
const X3_D_WH_SIZE_X = 3
const X3_D_WH_INST_WORD_POS_X = 24
const X3_D_WH_SIGN_VAL_POS_X = 0
const X3_IMM20_INST_WORD_X = 3
const X3_IMM20_SIZE_X = 20
const X3_IMM20_INST_WORD_POS_X = 4
const X3_IMM20_SIGN_VAL_POS_X = 0
const X3_IMM39_1_INST_WORD_X = 2
const X3_IMM39_1_SIZE_X = 23
const X3_IMM39_1_INST_WORD_POS_X = 0
const X3_IMM39_1_SIGN_VAL_POS_X = 36
const X3_IMM39_2_INST_WORD_X = 1
const X3_IMM39_2_SIZE_X = 16
const X3_IMM39_2_INST_WORD_POS_X = 16
const X3_IMM39_2_SIGN_VAL_POS_X = 20
const X3_P_INST_WORD_X = 3
const X3_P_SIZE_X = 4
const X3_P_INST_WORD_POS_X = 0
const X3_P_SIGN_VAL_POS_X = 0
const X3_TMPLT_INST_WORD_X = 0
const X3_TMPLT_SIZE_X = 4
const X3_TMPLT_INST_WORD_POS_X = 0
const X3_TMPLT_SIGN_VAL_POS_X = 0
const X3_BTYPE_QP_INST_WORD_X = 2
const X3_BTYPE_QP_SIZE_X = 9
const X3_BTYPE_QP_INST_WORD_POS_X = 23
const X3_BTYPE_QP_INST_VAL_POS_X = 0
const X3_EMPTY_INST_WORD_X = 1
const X3_EMPTY_SIZE_X = 2
const X3_EMPTY_INST_WORD_POS_X = 14
const X3_EMPTY_INST_VAL_POS_X = 0

union _IMAGE_LINENUMBER_Type field = 2
 SymbolTableIndex as DWORD
 VirtualAddress as DWORD
end union

type _IMAGE_LINENUMBER field = 2
 as _IMAGE_LINENUMBER_Type Type
 Linenumber as WORD
end type

type IMAGE_LINENUMBER as _IMAGE_LINENUMBER
type PIMAGE_LINENUMBER as IMAGE_LINENUMBER ptr
const IMAGE_SIZEOF_LINENUMBER = 6

type _IMAGE_BASE_RELOCATION field = 4
 VirtualAddress as DWORD
 SizeOfBlock as DWORD
end type

type IMAGE_BASE_RELOCATION as _IMAGE_BASE_RELOCATION
type PIMAGE_BASE_RELOCATION as IMAGE_BASE_RELOCATION ptr
const IMAGE_SIZEOF_BASE_RELOCATION = 8
const IMAGE_REL_BASED_ABSOLUTE = 0
const IMAGE_REL_BASED_HIGH = 1
const IMAGE_REL_BASED_LOW = 2
const IMAGE_REL_BASED_HIGHLOW = 3
const IMAGE_REL_BASED_HIGHADJ = 4
const IMAGE_REL_BASED_MIPS_JMPADDR = 5
const IMAGE_REL_BASED_ARM_MOV32 = 5
const IMAGE_REL_BASED_THUMB_MOV32 = 7
const IMAGE_REL_BASED_MIPS_JMPADDR16 = 9
const IMAGE_REL_BASED_IA64_IMM64 = 9
const IMAGE_REL_BASED_DIR64 = 10
const IMAGE_ARCHIVE_START_SIZE = 8

type _IMAGE_ARCHIVE_MEMBER_HEADER field = 4
 Name(0 to 15) as UBYTE
 Date(0 to 11) as UBYTE
 UserID(0 to 5) as UBYTE
 GroupID(0 to 5) as UBYTE
 Mode(0 to 7) as UBYTE
 Size(0 to 9) as UBYTE
 EndHeader(0 to 1) as UBYTE
end type

type IMAGE_ARCHIVE_MEMBER_HEADER as _IMAGE_ARCHIVE_MEMBER_HEADER
type PIMAGE_ARCHIVE_MEMBER_HEADER as _IMAGE_ARCHIVE_MEMBER_HEADER ptr
const IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR = 60

type _IMAGE_EXPORT_DIRECTORY field = 4
 Characteristics as DWORD
 TimeDateStamp as DWORD
 MajorVersion as WORD
 MinorVersion as WORD
 Name as DWORD
 Base as DWORD
 NumberOfFunctions as DWORD
 NumberOfNames as DWORD
 AddressOfFunctions as DWORD
 AddressOfNames as DWORD
 AddressOfNameOrdinals as DWORD
end type

type IMAGE_EXPORT_DIRECTORY as _IMAGE_EXPORT_DIRECTORY
type PIMAGE_EXPORT_DIRECTORY as _IMAGE_EXPORT_DIRECTORY ptr

type _IMAGE_IMPORT_BY_NAME field = 4
 Hint as WORD
 Name(0 to 0) as UBYTE
end type

type IMAGE_IMPORT_BY_NAME as _IMAGE_IMPORT_BY_NAME
type PIMAGE_IMPORT_BY_NAME as _IMAGE_IMPORT_BY_NAME ptr

union _IMAGE_THUNK_DATA64_u1
 ForwarderString as ULONGLONG
 Function as ULONGLONG
 Ordinal as ULONGLONG
 AddressOfData as ULONGLONG
end union

type _IMAGE_THUNK_DATA64
 u1 as _IMAGE_THUNK_DATA64_u1
end type

type IMAGE_THUNK_DATA64 as _IMAGE_THUNK_DATA64
type PIMAGE_THUNK_DATA64 as IMAGE_THUNK_DATA64 ptr

union _IMAGE_THUNK_DATA32_u1 field = 4
 ForwarderString as DWORD
 Function as DWORD
 Ordinal as DWORD
 AddressOfData as DWORD
end union

type _IMAGE_THUNK_DATA32 field = 4
 u1 as _IMAGE_THUNK_DATA32_u1
end type

type IMAGE_THUNK_DATA32 as _IMAGE_THUNK_DATA32
type PIMAGE_THUNK_DATA32 as IMAGE_THUNK_DATA32 ptr
const IMAGE_ORDINAL_FLAG64 = &h8000000000000000
const IMAGE_ORDINAL_FLAG32 = &h80000000
type PIMAGE_TLS_CALLBACK as sub(byval DllHandle as PVOID, byval Reason as DWORD, byval Reserved as PVOID)

type _IMAGE_TLS_DIRECTORY64 field = 4
 StartAddressOfRawData as ULONGLONG
 EndAddressOfRawData as ULONGLONG
 AddressOfIndex as ULONGLONG
 AddressOfCallBacks as ULONGLONG
 SizeOfZeroFill as DWORD
 Characteristics as DWORD
end type

type IMAGE_TLS_DIRECTORY64 as _IMAGE_TLS_DIRECTORY64
type PIMAGE_TLS_DIRECTORY64 as IMAGE_TLS_DIRECTORY64 ptr

type _IMAGE_TLS_DIRECTORY32 field = 4
 StartAddressOfRawData as DWORD
 EndAddressOfRawData as DWORD
 AddressOfIndex as DWORD
 AddressOfCallBacks as DWORD
 SizeOfZeroFill as DWORD
 Characteristics as DWORD
end type

type IMAGE_TLS_DIRECTORY32 as _IMAGE_TLS_DIRECTORY32
type PIMAGE_TLS_DIRECTORY32 as IMAGE_TLS_DIRECTORY32 ptr

 const IMAGE_ORDINAL_FLAG = IMAGE_ORDINAL_FLAG32
 type IMAGE_THUNK_DATA as IMAGE_THUNK_DATA32
 type PIMAGE_THUNK_DATA as PIMAGE_THUNK_DATA32
 type IMAGE_TLS_DIRECTORY as IMAGE_TLS_DIRECTORY32
 type PIMAGE_TLS_DIRECTORY as PIMAGE_TLS_DIRECTORY32

type _IMAGE_IMPORT_DESCRIPTOR field = 4
 union field = 4
 Characteristics as DWORD
 OriginalFirstThunk as DWORD
 end union

 TimeDateStamp as DWORD
 ForwarderChain as DWORD
 Name as DWORD
 FirstThunk as DWORD
end type

type IMAGE_IMPORT_DESCRIPTOR as _IMAGE_IMPORT_DESCRIPTOR
type PIMAGE_IMPORT_DESCRIPTOR as IMAGE_IMPORT_DESCRIPTOR ptr

type _IMAGE_BOUND_IMPORT_DESCRIPTOR field = 4
 TimeDateStamp as DWORD
 OffsetModuleName as WORD
 NumberOfModuleForwarderRefs as WORD
end type

type IMAGE_BOUND_IMPORT_DESCRIPTOR as _IMAGE_BOUND_IMPORT_DESCRIPTOR
type PIMAGE_BOUND_IMPORT_DESCRIPTOR as _IMAGE_BOUND_IMPORT_DESCRIPTOR ptr

type _IMAGE_BOUND_FORWARDER_REF field = 4
 TimeDateStamp as DWORD
 OffsetModuleName as WORD
 Reserved as WORD
end type

type IMAGE_BOUND_FORWARDER_REF as _IMAGE_BOUND_FORWARDER_REF
type PIMAGE_BOUND_FORWARDER_REF as _IMAGE_BOUND_FORWARDER_REF ptr

union _IMAGE_DELAYLOAD_DESCRIPTOR_Attributes field = 4
 AllAttributes as DWORD

 type field = 4
 RvaBased : 1 as DWORD
 ReservedAttributes : 31 as DWORD
 end type
end union

type _IMAGE_DELAYLOAD_DESCRIPTOR field = 4
 Attributes as _IMAGE_DELAYLOAD_DESCRIPTOR_Attributes
 DllNameRVA as DWORD
 ModuleHandleRVA as DWORD
 ImportAddressTableRVA as DWORD
 ImportNameTableRVA as DWORD
 BoundImportAddressTableRVA as DWORD
 UnloadInformationTableRVA as DWORD
 TimeDateStamp as DWORD
end type

type IMAGE_DELAYLOAD_DESCRIPTOR as _IMAGE_DELAYLOAD_DESCRIPTOR
type PIMAGE_DELAYLOAD_DESCRIPTOR as _IMAGE_DELAYLOAD_DESCRIPTOR ptr
type PCIMAGE_DELAYLOAD_DESCRIPTOR as const IMAGE_DELAYLOAD_DESCRIPTOR ptr

type _IMAGE_RESOURCE_DIRECTORY field = 4
 Characteristics as DWORD
 TimeDateStamp as DWORD
 MajorVersion as WORD
 MinorVersion as WORD
 NumberOfNamedEntries as WORD
 NumberOfIdEntries as WORD
end type

type IMAGE_RESOURCE_DIRECTORY as _IMAGE_RESOURCE_DIRECTORY
type PIMAGE_RESOURCE_DIRECTORY as _IMAGE_RESOURCE_DIRECTORY ptr
const IMAGE_RESOURCE_NAME_IS_STRING = &h80000000
const IMAGE_RESOURCE_DATA_IS_DIRECTORY = &h80000000

type _IMAGE_RESOURCE_DIRECTORY_ENTRY field = 4
 union field = 4
 type field = 4
 NameOffset : 31 as DWORD
 NameIsString : 1 as DWORD
 end type

 Name as DWORD
 Id as WORD
 end union

 union field = 4
 OffsetToData as DWORD

 type field = 4
 OffsetToDirectory : 31 as DWORD
 DataIsDirectory : 1 as DWORD
 end type
 end union
end type

type IMAGE_RESOURCE_DIRECTORY_ENTRY as _IMAGE_RESOURCE_DIRECTORY_ENTRY
type PIMAGE_RESOURCE_DIRECTORY_ENTRY as _IMAGE_RESOURCE_DIRECTORY_ENTRY ptr

type _IMAGE_RESOURCE_DIRECTORY_STRING field = 4
 Length as WORD
 NameString as zstring * 1
end type

type IMAGE_RESOURCE_DIRECTORY_STRING as _IMAGE_RESOURCE_DIRECTORY_STRING
type PIMAGE_RESOURCE_DIRECTORY_STRING as _IMAGE_RESOURCE_DIRECTORY_STRING ptr

type _IMAGE_RESOURCE_DIR_STRING_U field = 4
 Length as WORD
 NameString as wstring * 1
end type

type IMAGE_RESOURCE_DIR_STRING_U as _IMAGE_RESOURCE_DIR_STRING_U
type PIMAGE_RESOURCE_DIR_STRING_U as _IMAGE_RESOURCE_DIR_STRING_U ptr

type _IMAGE_RESOURCE_DATA_ENTRY field = 4
 OffsetToData as DWORD
 Size as DWORD
 CodePage as DWORD
 Reserved as DWORD
end type

type IMAGE_RESOURCE_DATA_ENTRY as _IMAGE_RESOURCE_DATA_ENTRY
type PIMAGE_RESOURCE_DATA_ENTRY as _IMAGE_RESOURCE_DATA_ENTRY ptr

type IMAGE_LOAD_CONFIG_DIRECTORY32 field = 4
 Size as DWORD
 TimeDateStamp as DWORD
 MajorVersion as WORD
 MinorVersion as WORD
 GlobalFlagsClear as DWORD
 GlobalFlagsSet as DWORD
 CriticalSectionDefaultTimeout as DWORD
 DeCommitFreeBlockThreshold as DWORD
 DeCommitTotalFreeThreshold as DWORD
 LockPrefixTable as DWORD
 MaximumAllocationSize as DWORD
 VirtualMemoryThreshold as DWORD
 ProcessHeapFlags as DWORD
 ProcessAffinityMask as DWORD
 CSDVersion as WORD
 Reserved1 as WORD
 EditList as DWORD
 SecurityCookie as DWORD
 SEHandlerTable as DWORD
 SEHandlerCount as DWORD
end type

type PIMAGE_LOAD_CONFIG_DIRECTORY32 as IMAGE_LOAD_CONFIG_DIRECTORY32 ptr

type IMAGE_LOAD_CONFIG_DIRECTORY64 field = 4
 Size as DWORD
 TimeDateStamp as DWORD
 MajorVersion as WORD
 MinorVersion as WORD
 GlobalFlagsClear as DWORD
 GlobalFlagsSet as DWORD
 CriticalSectionDefaultTimeout as DWORD
 DeCommitFreeBlockThreshold as ULONGLONG
 DeCommitTotalFreeThreshold as ULONGLONG
 LockPrefixTable as ULONGLONG
 MaximumAllocationSize as ULONGLONG
 VirtualMemoryThreshold as ULONGLONG
 ProcessAffinityMask as ULONGLONG
 ProcessHeapFlags as DWORD
 CSDVersion as WORD
 Reserved1 as WORD
 EditList as ULONGLONG
 SecurityCookie as ULONGLONG
 SEHandlerTable as ULONGLONG
 SEHandlerCount as ULONGLONG
end type

type PIMAGE_LOAD_CONFIG_DIRECTORY64 as IMAGE_LOAD_CONFIG_DIRECTORY64 ptr

 type IMAGE_LOAD_CONFIG_DIRECTORY as IMAGE_LOAD_CONFIG_DIRECTORY32
 type PIMAGE_LOAD_CONFIG_DIRECTORY as PIMAGE_LOAD_CONFIG_DIRECTORY32

type _IMAGE_CE_RUNTIME_FUNCTION_ENTRY field = 4
 FuncStart as DWORD
 PrologLen : 8 as DWORD
 FuncLen : 22 as DWORD
 ThirtyTwoBit : 1 as DWORD
 ExceptionFlag : 1 as DWORD
end type

type IMAGE_CE_RUNTIME_FUNCTION_ENTRY as _IMAGE_CE_RUNTIME_FUNCTION_ENTRY
type PIMAGE_CE_RUNTIME_FUNCTION_ENTRY as _IMAGE_CE_RUNTIME_FUNCTION_ENTRY ptr

type _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY field = 4
 BeginAddress as ULONGLONG
 EndAddress as ULONGLONG
 ExceptionHandler as ULONGLONG
 HandlerData as ULONGLONG
 PrologEndAddress as ULONGLONG
end type

type IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY as _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
type PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY as _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY ptr

type _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY field = 4
 BeginAddress as DWORD
 EndAddress as DWORD
 ExceptionHandler as DWORD
 HandlerData as DWORD
 PrologEndAddress as DWORD
end type

type IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY as _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
type PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY as _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY ptr

type _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY field = 4
 BeginAddress as DWORD

 union field = 4
 UnwindData as DWORD

 type field = 4
 Flag : 2 as DWORD
 FunctionLength : 11 as DWORD
 Ret : 2 as DWORD
 H : 1 as DWORD
 Reg : 3 as DWORD
 R : 1 as DWORD
 L : 1 as DWORD
 C : 1 as DWORD
 StackAdjust : 10 as DWORD
 end type
 end union
end type

type IMAGE_ARM_RUNTIME_FUNCTION_ENTRY as _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY
type PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY as _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY ptr

type _IMAGE_RUNTIME_FUNCTION_ENTRY field = 4
 BeginAddress as DWORD
 EndAddress as DWORD

 union field = 4
 UnwindInfoAddress as DWORD
 UnwindData as DWORD
 end union
end type

type _PIMAGE_RUNTIME_FUNCTION_ENTRY as _IMAGE_RUNTIME_FUNCTION_ENTRY ptr
type IMAGE_IA64_RUNTIME_FUNCTION_ENTRY as _IMAGE_RUNTIME_FUNCTION_ENTRY
type PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY as _PIMAGE_RUNTIME_FUNCTION_ENTRY
type IMAGE_RUNTIME_FUNCTION_ENTRY as _IMAGE_RUNTIME_FUNCTION_ENTRY
type PIMAGE_RUNTIME_FUNCTION_ENTRY as _PIMAGE_RUNTIME_FUNCTION_ENTRY

type _IMAGE_DEBUG_DIRECTORY field = 4
 Characteristics as DWORD
 TimeDateStamp as DWORD
 MajorVersion as WORD
 MinorVersion as WORD
 as DWORD Type
 SizeOfData as DWORD
 AddressOfRawData as DWORD
 PointerToRawData as DWORD
end type

type IMAGE_DEBUG_DIRECTORY as _IMAGE_DEBUG_DIRECTORY
type PIMAGE_DEBUG_DIRECTORY as _IMAGE_DEBUG_DIRECTORY ptr
const IMAGE_DEBUG_TYPE_UNKNOWN = 0
const IMAGE_DEBUG_TYPE_COFF = 1
const IMAGE_DEBUG_TYPE_CODEVIEW = 2
const IMAGE_DEBUG_TYPE_FPO = 3
const IMAGE_DEBUG_TYPE_MISC = 4
const IMAGE_DEBUG_TYPE_EXCEPTION = 5
const IMAGE_DEBUG_TYPE_FIXUP = 6
const IMAGE_DEBUG_TYPE_OMAP_TO_SRC = 7
const IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8
const IMAGE_DEBUG_TYPE_BORLAND = 9
const IMAGE_DEBUG_TYPE_RESERVED10 = 10
const IMAGE_DEBUG_TYPE_CLSID = 11

type _IMAGE_COFF_SYMBOLS_HEADER field = 4
 NumberOfSymbols as DWORD
 LvaToFirstSymbol as DWORD
 NumberOfLinenumbers as DWORD
 LvaToFirstLinenumber as DWORD
 RvaToFirstByteOfCode as DWORD
 RvaToLastByteOfCode as DWORD
 RvaToFirstByteOfData as DWORD
 RvaToLastByteOfData as DWORD
end type

type IMAGE_COFF_SYMBOLS_HEADER as _IMAGE_COFF_SYMBOLS_HEADER
type PIMAGE_COFF_SYMBOLS_HEADER as _IMAGE_COFF_SYMBOLS_HEADER ptr
const FRAME_FPO = 0
const FRAME_TRAP = 1
const FRAME_TSS = 2
const FRAME_NONFPO = 3

type _FPO_DATA field = 4
 ulOffStart as DWORD
 cbProcSize as DWORD
 cdwLocals as DWORD
 cdwParams as WORD
 cbProlog : 8 as WORD
 cbRegs : 3 as WORD
 fHasSEH : 1 as WORD
 fUseBP : 1 as WORD
 reserved : 1 as WORD
 cbFrame : 2 as WORD
end type

type FPO_DATA as _FPO_DATA
type PFPO_DATA as _FPO_DATA ptr
const SIZEOF_RFPO_DATA = 16
const IMAGE_DEBUG_MISC_EXENAME = 1

type _IMAGE_DEBUG_MISC field = 4
 DataType as DWORD
 Length as DWORD
 Unicode_ as WINBOOLEAN
 Reserved(0 to 2) as UBYTE
 Data(0 to 0) as UBYTE
end type

type IMAGE_DEBUG_MISC as _IMAGE_DEBUG_MISC
type PIMAGE_DEBUG_MISC as _IMAGE_DEBUG_MISC ptr

type _IMAGE_FUNCTION_ENTRY field = 4
 StartingAddress as DWORD
 EndingAddress as DWORD
 EndOfPrologue as DWORD
end type

type IMAGE_FUNCTION_ENTRY as _IMAGE_FUNCTION_ENTRY
type PIMAGE_FUNCTION_ENTRY as _IMAGE_FUNCTION_ENTRY ptr

type _IMAGE_FUNCTION_ENTRY64 field = 4
 StartingAddress as ULONGLONG
 EndingAddress as ULONGLONG

 union field = 4
 EndOfPrologue as ULONGLONG
 UnwindInfoAddress as ULONGLONG
 end union
end type

type IMAGE_FUNCTION_ENTRY64 as _IMAGE_FUNCTION_ENTRY64
type PIMAGE_FUNCTION_ENTRY64 as _IMAGE_FUNCTION_ENTRY64 ptr

type _IMAGE_SEPARATE_DEBUG_HEADER field = 4
 Signature as WORD
 Flags as WORD
 Machine as WORD
 Characteristics as WORD
 TimeDateStamp as DWORD
 CheckSum as DWORD
 ImageBase as DWORD
 SizeOfImage as DWORD
 NumberOfSections as DWORD
 ExportedNamesSize as DWORD
 DebugDirectorySize as DWORD
 SectionAlignment as DWORD
 Reserved(0 to 1) as DWORD
end type

type IMAGE_SEPARATE_DEBUG_HEADER as _IMAGE_SEPARATE_DEBUG_HEADER
type PIMAGE_SEPARATE_DEBUG_HEADER as _IMAGE_SEPARATE_DEBUG_HEADER ptr

type _NON_PAGED_DEBUG_INFO field = 4
 Signature as WORD
 Flags as WORD
 Size as DWORD
 Machine as WORD
 Characteristics as WORD
 TimeDateStamp as DWORD
 CheckSum as DWORD
 SizeOfImage as DWORD
 ImageBase as ULONGLONG
end type

type NON_PAGED_DEBUG_INFO as _NON_PAGED_DEBUG_INFO
type PNON_PAGED_DEBUG_INFO as _NON_PAGED_DEBUG_INFO ptr
const IMAGE_SEPARATE_DEBUG_SIGNATURE = &h4944
const NON_PAGED_DEBUG_SIGNATURE = &h494E
const IMAGE_SEPARATE_DEBUG_FLAGS_MASK = &h8000
const IMAGE_SEPARATE_DEBUG_MISMATCH = &h8000

type _ImageArchitectureHeader field = 4
 AmaskValue : 1 as ulong
 Adummy1 : 7 as long
 AmaskShift : 8 as ulong
 Adummy2 : 16 as long
 FirstEntryRVA as DWORD
end type

type IMAGE_ARCHITECTURE_HEADER as _ImageArchitectureHeader
type PIMAGE_ARCHITECTURE_HEADER as _ImageArchitectureHeader ptr

type _ImageArchitectureEntry field = 4
 FixupInstRVA as DWORD
 NewInst as DWORD
end type

type IMAGE_ARCHITECTURE_ENTRY as _ImageArchitectureEntry
type PIMAGE_ARCHITECTURE_ENTRY as _ImageArchitectureEntry ptr
const IMPORT_OBJECT_HDR_SIG2 = &hffff

type IMPORT_OBJECT_HEADER
 Sig1 as WORD
 Sig2 as WORD
 Version as WORD
 Machine as WORD
 TimeDateStamp as DWORD
 SizeOfData as DWORD

 union
 Ordinal as WORD
 Hint as WORD
 end union

 as WORD Type : 2
 NameType : 3 as WORD
 Reserved : 11 as WORD
end type

type IMPORT_OBJECT_TYPE as long
enum
 IMPORT_OBJECT_CODE = 0
 IMPORT_OBJECT_DATA = 1
 IMPORT_OBJECT_CONST = 2
end enum

type IMPORT_OBJECT_NAME_TYPE as long
enum
 IMPORT_OBJECT_ORDINAL = 0
 IMPORT_OBJECT_NAME = 1
 IMPORT_OBJECT_NAME_NO_PREFIX = 2
 IMPORT_OBJECT_NAME_UNDECORATE = 3
end enum


type ReplacesCorHdrNumericDefines as long
enum
 COMIMAGE_FLAGS_ILONLY = &h00000001
 COMIMAGE_FLAGS_32BITREQUIRED = &h00000002
 COMIMAGE_FLAGS_IL_LIBRARY = &h00000004
 COMIMAGE_FLAGS_STRONGNAMESIGNED = &h00000008
 COMIMAGE_FLAGS_TRACKDEBUGDATA = &h00010000
 COR_VERSION_MAJOR_V2 = 2
 COR_VERSION_MAJOR = COR_VERSION_MAJOR_V2
 COR_VERSION_MINOR = 0
 COR_DELETED_NAME_LENGTH = 8
 COR_VTABLEGAP_NAME_LENGTH = 8
 NATIVE_TYPE_MAX_CB = 1
 COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = &hFF
 IMAGE_COR_MIH_METHODRVA = &h01
 IMAGE_COR_MIH_EHRVA = &h02
 IMAGE_COR_MIH_BASICBLOCK = &h08
 COR_VTABLE_32BIT = &h01
 COR_VTABLE_64BIT = &h02
 COR_VTABLE_FROM_UNMANAGED = &h04
 COR_VTABLE_CALL_MOST_DERIVED = &h10
 IMAGE_COR_EATJ_THUNK_SIZE = 32
 MAX_CLASS_NAME = 1024
 MAX_PACKAGE_NAME = 1024
end enum

type IMAGE_COR20_HEADER
 cb as DWORD
 MajorRuntimeVersion as WORD
 MinorRuntimeVersion as WORD
 MetaData as IMAGE_DATA_DIRECTORY
 Flags as DWORD

 union
 EntryPointToken as DWORD
 EntryPointRVA as DWORD
 end union

 Resources as IMAGE_DATA_DIRECTORY
 StrongNameSignature as IMAGE_DATA_DIRECTORY
 CodeManagerTable as IMAGE_DATA_DIRECTORY
 VTableFixups as IMAGE_DATA_DIRECTORY
 ExportAddressTableJumps as IMAGE_DATA_DIRECTORY
 ManagedNativeHeader as IMAGE_DATA_DIRECTORY
end type

type PIMAGE_COR20_HEADER as IMAGE_COR20_HEADER ptr
declare function RtlCaptureStackBackTrace(byval FramesToSkip as DWORD, byval FramesToCapture as DWORD, byval BackTrace as PVOID ptr, byval BackTraceHash as PDWORD) as WORD
declare sub RtlCaptureContext(byval ContextRecord as PCONTEXT)
declare function RtlCompareMemory(byval Source1 as const any ptr, byval Source2 as const any ptr, byval Length as SIZE_T_) as SIZE_T_


declare sub RtlUnwind(byval TargetFrame as PVOID, byval TargetIp as PVOID, byval ExceptionRecord as PEXCEPTION_RECORD, byval ReturnValue as PVOID)
declare function RtlPcToFileHeader(byval PcValue as PVOID, byval BaseOfImage as PVOID ptr) as PVOID



 type SLIST_ENTRY as _SINGLE_LIST_ENTRY
 type PSLIST_ENTRY as _SINGLE_LIST_ENTRY ptr

union _SLIST_HEADER
 Alignment as ULONGLONG

 type
 Next as SLIST_ENTRY
 Depth as WORD
 Sequence as WORD
 end type

end union

type SLIST_HEADER as _SLIST_HEADER
type PSLIST_HEADER as _SLIST_HEADER ptr
declare sub RtlInitializeSListHead(byval ListHead as PSLIST_HEADER)
declare function RtlFirstEntrySList(byval ListHead as const SLIST_HEADER ptr) as PSLIST_ENTRY
declare function RtlInterlockedPopEntrySList(byval ListHead as PSLIST_HEADER) as PSLIST_ENTRY
declare function RtlInterlockedPushEntrySList(byval ListHead as PSLIST_HEADER, byval ListEntry as PSLIST_ENTRY) as PSLIST_ENTRY
declare function RtlInterlockedPushListSListEx(byval ListHead as PSLIST_HEADER, byval List as PSLIST_ENTRY, byval ListEnd as PSLIST_ENTRY, byval Count as DWORD) as PSLIST_ENTRY
declare function RtlInterlockedFlushSList(byval ListHead as PSLIST_HEADER) as PSLIST_ENTRY
declare function RtlQueryDepthSList(byval ListHead as PSLIST_HEADER) as WORD
const _RTL_RUN_ONCE_DEF = 1

type _RTL_RUN_ONCE
 Ptr as PVOID
end type

type RTL_RUN_ONCE as _RTL_RUN_ONCE
type PRTL_RUN_ONCE as _RTL_RUN_ONCE ptr
type PRTL_RUN_ONCE_INIT_FN as function(byval as PRTL_RUN_ONCE, byval as PVOID, byval as PVOID ptr) as DWORD

const RTL_RUN_ONCE_CHECK_ONLY = 1
const RTL_RUN_ONCE_ASYNC = 2
const RTL_RUN_ONCE_INIT_FAILED = 4
const RTL_RUN_ONCE_CTX_RESERVED_BITS = 2

type _RTL_BARRIER
 Reserved1 as DWORD
 Reserved2 as DWORD
 Reserved3(0 to 1) as ULONG_PTR
 Reserved4 as DWORD
 Reserved5 as DWORD
end type

type RTL_BARRIER as _RTL_BARRIER
type PRTL_BARRIER as _RTL_BARRIER ptr
const FAST_FAIL_LEGACY_GS_VIOLATION = 0
const FAST_FAIL_VTGUARD_CHECK_FAILURE = 1
const FAST_FAIL_STACK_COOKIE_CHECK_FAILURE = 2
const FAST_FAIL_CORRUPT_LIST_ENTRY = 3
const FAST_FAIL_INCORRECT_STACK = 4
const FAST_FAIL_INVALID_ARG = 5
const FAST_FAIL_GS_COOKIE_INIT = 6
const FAST_FAIL_FATAL_APP_EXIT = 7
const FAST_FAIL_RANGE_CHECK_FAILURE = 8
const FAST_FAIL_UNSAFE_REGISTRY_ACCESS = 9
const FAST_FAIL_INVALID_FAST_FAIL_CODE = &hffffffff
const HEAP_NO_SERIALIZE = &h00000001
const HEAP_GROWABLE = &h00000002
const HEAP_GENERATE_EXCEPTIONS = &h00000004
const HEAP_ZERO_MEMORY = &h00000008
const HEAP_REALLOC_IN_PLACE_ONLY = &h00000010
const HEAP_TAIL_CHECKING_ENABLED = &h00000020
const HEAP_FREE_CHECKING_ENABLED = &h00000040
const HEAP_DISABLE_COALESCE_ON_FREE = &h00000080
const HEAP_CREATE_ALIGN_16 = &h00010000
const HEAP_CREATE_ENABLE_TRACING = &h00020000
const HEAP_CREATE_ENABLE_EXECUTE = &h00040000
const HEAP_MAXIMUM_TAG = &h0FFF
const HEAP_PSEUDO_TAG_FLAG = &h8000
const HEAP_TAG_SHIFT = 18
const IS_TEXT_UNICODE_ASCII16 = &h0001
const IS_TEXT_UNICODE_REVERSE_ASCII16 = &h0010
const IS_TEXT_UNICODE_STATISTICS = &h0002
const IS_TEXT_UNICODE_REVERSE_STATISTICS = &h0020
const IS_TEXT_UNICODE_CONTROLS = &h0004
const IS_TEXT_UNICODE_REVERSE_CONTROLS = &h0040
const IS_TEXT_UNICODE_SIGNATURE = &h0008
const IS_TEXT_UNICODE_REVERSE_SIGNATURE = &h0080
const IS_TEXT_UNICODE_ILLEGAL_CHARS = &h0100
const IS_TEXT_UNICODE_ODD_LENGTH = &h0200
const IS_TEXT_UNICODE_DBCS_LEADBYTE = &h0400
const IS_TEXT_UNICODE_NULL_BYTES = &h1000
const IS_TEXT_UNICODE_UNICODE_MASK = &h000F
const IS_TEXT_UNICODE_REVERSE_MASK = &h00F0
const IS_TEXT_UNICODE_NOT_UNICODE_MASK = &h0F00
const IS_TEXT_UNICODE_NOT_ASCII_MASK = &hF000
const COMPRESSION_FORMAT_NONE = &h00000
const COMPRESSION_FORMAT_DEFAULT = &h0001
const COMPRESSION_FORMAT_LZNT1 = &h0002
const COMPRESSION_FORMAT_XPRESS = &h0003
const COMPRESSION_FORMAT_XPRESS_HUFF = &h0004
const COMPRESSION_ENGINE_STANDARD = &h00000
const COMPRESSION_ENGINE_MAXIMUM = &h0100
const COMPRESSION_ENGINE_HIBER = &h0200
declare function RtlSecureZeroMemory(byval ptr as PVOID, byval cnt as SIZE_T_) as PVOID

type _MESSAGE_RESOURCE_ENTRY
 Length as WORD
 Flags as WORD
 Text(0 to 0) as UBYTE
end type

type MESSAGE_RESOURCE_ENTRY as _MESSAGE_RESOURCE_ENTRY
type PMESSAGE_RESOURCE_ENTRY as _MESSAGE_RESOURCE_ENTRY ptr
const SEF_DACL_AUTO_INHERIT = &h01
const SEF_SACL_AUTO_INHERIT = &h02
const SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT = &h04
const SEF_AVOID_PRIVILEGE_CHECK = &h08
const SEF_AVOID_OWNER_CHECK = &h10
const SEF_DEFAULT_OWNER_FROM_PARENT = &h20
const SEF_DEFAULT_GROUP_FROM_PARENT = &h40
const SEF_MACL_NO_WRITE_UP = &h100
const SEF_MACL_NO_READ_UP = &h200
const SEF_MACL_NO_EXECUTE_UP = &h400
const SEF_AVOID_OWNER_RESTRICTION = &h1000
const SEF_MACL_VALID_FLAGS = (SEF_MACL_NO_WRITE_UP or SEF_MACL_NO_READ_UP) or SEF_MACL_NO_EXECUTE_UP
const MESSAGE_RESOURCE_UNICODE = &h0001

type _MESSAGE_RESOURCE_BLOCK
 LowId as DWORD
 HighId as DWORD
 OffsetToEntries as DWORD
end type

type MESSAGE_RESOURCE_BLOCK as _MESSAGE_RESOURCE_BLOCK
type PMESSAGE_RESOURCE_BLOCK as _MESSAGE_RESOURCE_BLOCK ptr

type _MESSAGE_RESOURCE_DATA
 NumberOfBlocks as DWORD
 Blocks(0 to 0) as MESSAGE_RESOURCE_BLOCK
end type

type MESSAGE_RESOURCE_DATA as _MESSAGE_RESOURCE_DATA
type PMESSAGE_RESOURCE_DATA as _MESSAGE_RESOURCE_DATA ptr

type _OSVERSIONINFOA
 dwOSVersionInfoSize as DWORD
 dwMajorVersion as DWORD
 dwMinorVersion as DWORD
 dwBuildNumber as DWORD
 dwPlatformId as DWORD
 szCSDVersion as zstring * 128
end type

type OSVERSIONINFOA as _OSVERSIONINFOA
type POSVERSIONINFOA as _OSVERSIONINFOA ptr
type LPOSVERSIONINFOA as _OSVERSIONINFOA ptr

type _OSVERSIONINFOW
 dwOSVersionInfoSize as DWORD
 dwMajorVersion as DWORD
 dwMinorVersion as DWORD
 dwBuildNumber as DWORD
 dwPlatformId as DWORD
 szCSDVersion as wstring * 128
end type

type OSVERSIONINFOW as _OSVERSIONINFOW
type POSVERSIONINFOW as _OSVERSIONINFOW ptr
type LPOSVERSIONINFOW as _OSVERSIONINFOW ptr
type RTL_OSVERSIONINFOW as _OSVERSIONINFOW
type PRTL_OSVERSIONINFOW as _OSVERSIONINFOW ptr

 type OSVERSIONINFO as OSVERSIONINFOA
 type POSVERSIONINFO as POSVERSIONINFOA
 type LPOSVERSIONINFO as LPOSVERSIONINFOA

type _OSVERSIONINFOEXA
 dwOSVersionInfoSize as DWORD
 dwMajorVersion as DWORD
 dwMinorVersion as DWORD
 dwBuildNumber as DWORD
 dwPlatformId as DWORD
 szCSDVersion as zstring * 128
 wServicePackMajor as WORD
 wServicePackMinor as WORD
 wSuiteMask as WORD
 wProductType as UBYTE
 wReserved as UBYTE
end type

type OSVERSIONINFOEXA as _OSVERSIONINFOEXA
type POSVERSIONINFOEXA as _OSVERSIONINFOEXA ptr
type LPOSVERSIONINFOEXA as _OSVERSIONINFOEXA ptr

type _OSVERSIONINFOEXW
 dwOSVersionInfoSize as DWORD
 dwMajorVersion as DWORD
 dwMinorVersion as DWORD
 dwBuildNumber as DWORD
 dwPlatformId as DWORD
 szCSDVersion as wstring * 128
 wServicePackMajor as WORD
 wServicePackMinor as WORD
 wSuiteMask as WORD
 wProductType as UBYTE
 wReserved as UBYTE
end type

type OSVERSIONINFOEXW as _OSVERSIONINFOEXW
type POSVERSIONINFOEXW as _OSVERSIONINFOEXW ptr
type LPOSVERSIONINFOEXW as _OSVERSIONINFOEXW ptr
type RTL_OSVERSIONINFOEXW as _OSVERSIONINFOEXW
type PRTL_OSVERSIONINFOEXW as _OSVERSIONINFOEXW ptr

 type OSVERSIONINFOEX as OSVERSIONINFOEXA
 type POSVERSIONINFOEX as POSVERSIONINFOEXA
 type LPOSVERSIONINFOEX as LPOSVERSIONINFOEXA

const VER_EQUAL = 1
const VER_GREATER = 2
const VER_GREATER_EQUAL = 3
const VER_LESS = 4
const VER_LESS_EQUAL = 5
const VER_AND = 6
const VER_OR = 7
const VER_CONDITION_MASK = 7
const VER_NUM_BITS_PER_CONDITION_MASK = 3
const VER_MINORVERSION = &h0000001
const VER_MAJORVERSION = &h0000002
const VER_BUILDNUMBER = &h0000004
const VER_PLATFORMID = &h0000008
const VER_SERVICEPACKMINOR = &h0000010
const VER_SERVICEPACKMAJOR = &h0000020
const VER_SUITENAME = &h0000040
const VER_PRODUCT_TYPE = &h0000080
const VER_NT_WORKSTATION = &h0000001
const VER_NT_DOMAIN_CONTROLLER = &h0000002
const VER_NT_SERVER = &h0000003
const VER_PLATFORM_WIN32s = 0
const VER_PLATFORM_WIN32_WINDOWS = 1
const VER_PLATFORM_WIN32_NT = 2
declare function VerSetConditionMask(byval ConditionMask as ULONGLONG, byval TypeMask as DWORD, byval Condition as UBYTE) as ULONGLONG


const RTL_UMS_VERSION = &h0100

type _RTL_UMS_THREAD_INFO_CLASS as long
enum
 UmsThreadInvalidInfoClass = 0
 UmsThreadUserContext
 UmsThreadPriority
 UmsThreadAffinity
 UmsThreadTeb
 UmsThreadIsSuspended
 UmsThreadIsTerminated
 UmsThreadMaxInfoClass
end enum

type RTL_UMS_THREAD_INFO_CLASS as _RTL_UMS_THREAD_INFO_CLASS
type PRTL_UMS_THREAD_INFO_CLASS as _RTL_UMS_THREAD_INFO_CLASS ptr

type _RTL_UMS_SCHEDULER_REASON as long
enum
 UmsSchedulerStartup = 0
 UmsSchedulerThreadBlocked
 UmsSchedulerThreadYield
end enum

type RTL_UMS_SCHEDULER_REASON as _RTL_UMS_SCHEDULER_REASON
type PRTL_UMS_SCHEDULER_REASON as _RTL_UMS_SCHEDULER_REASON ptr
type PRTL_UMS_SCHEDULER_ENTRY_POINT as sub(byval Reason as RTL_UMS_SCHEDULER_REASON, byval ActivationPayload as ULONG_PTR, byval SchedulerParam as PVOID)


type _RTL_CRITICAL_SECTION as _RTL_CRITICAL_SECTION_

type _RTL_CRITICAL_SECTION_DEBUG
 as WORD Type
 CreatorBackTraceIndex as WORD
 CriticalSection as _RTL_CRITICAL_SECTION ptr
 ProcessLocksList as LIST_ENTRY
 EntryCount as DWORD
 ContentionCount as DWORD
 Flags as DWORD
 CreatorBackTraceIndexHigh as WORD
 SpareWORD as WORD
end type

type RTL_CRITICAL_SECTION_DEBUG as _RTL_CRITICAL_SECTION_DEBUG
type PRTL_CRITICAL_SECTION_DEBUG as _RTL_CRITICAL_SECTION_DEBUG ptr
type RTL_RESOURCE_DEBUG as _RTL_CRITICAL_SECTION_DEBUG
type PRTL_RESOURCE_DEBUG as _RTL_CRITICAL_SECTION_DEBUG ptr

const RTL_CRITSECT_TYPE = 0
const RTL_RESOURCE_TYPE = 1
const RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO = &h01000000
const RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN = &h02000000
const RTL_CRITICAL_SECTION_FLAG_STATIC_INIT = &h04000000
const RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE = &h08000000
const RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO = &h10000000
const RTL_CRITICAL_SECTION_ALL_FLAG_BITS = &hff000000
const RTL_CRITICAL_SECTION_FLAG_RESERVED = RTL_CRITICAL_SECTION_ALL_FLAG_BITS and (not ((((RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO or RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN) or RTL_CRITICAL_SECTION_FLAG_STATIC_INIT) or RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE) or RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO))
const RTL_CRITICAL_SECTION_DEBUG_FLAG_STATIC_INIT = &h00000001

type _RTL_CRITICAL_SECTION_
 DebugInfo as PRTL_CRITICAL_SECTION_DEBUG
 LockCount as LONG
 RecursionCount as LONG
 OwningThread as HANDLE
 LockSemaphore as HANDLE
 SpinCount as ULONG_PTR
end type

type RTL_CRITICAL_SECTION as _RTL_CRITICAL_SECTION
type PRTL_CRITICAL_SECTION as _RTL_CRITICAL_SECTION ptr

type _RTL_SRWLOCK
 Ptr as PVOID
end type

type RTL_SRWLOCK as _RTL_SRWLOCK
type PRTL_SRWLOCK as _RTL_SRWLOCK ptr

type _RTL_CONDITION_VARIABLE
 Ptr as PVOID
end type

type RTL_CONDITION_VARIABLE as _RTL_CONDITION_VARIABLE
type PRTL_CONDITION_VARIABLE as _RTL_CONDITION_VARIABLE ptr
const RTL_CONDITION_VARIABLE_LOCKMODE_SHARED = &h1
type PAPCFUNC as sub(byval Parameter as ULONG_PTR)
type PVECTORED_EXCEPTION_HANDLER as function(byval ExceptionInfo as _EXCEPTION_POINTERS ptr) as LONG

type _HEAP_INFORMATION_CLASS as long
enum
 HeapCompatibilityInformation
 HeapEnableTerminationOnCorruption
end enum

type HEAP_INFORMATION_CLASS as _HEAP_INFORMATION_CLASS
type WORKERCALLBACKFUNC as sub(byval as PVOID)
type APC_CALLBACK_FUNCTION as sub(byval as DWORD, byval as PVOID, byval as PVOID)
type WAITORTIMERCALLBACKFUNC as sub(byval as PVOID, byval as WINBOOLEAN)
type WAITORTIMERCALLBACK as WAITORTIMERCALLBACKFUNC
type PFLS_CALLBACK_FUNCTION as sub(byval lpFlsData as PVOID)
type PSECURE_MEMORY_CACHE_CALLBACK as function(byval Addr as PVOID, byval Range as SIZE_T_) as WINBOOLEAN

const WT_EXECUTEDEFAULT = &h000000000
const WT_EXECUTEINIOTHREAD = &h00000001
const WT_EXECUTEINUITHREAD = &h00000002
const WT_EXECUTEINWAITTHREAD = &h00000004
const WT_EXECUTEONLYONCE = &h00000008
const WT_EXECUTEINTIMERTHREAD = &h00000020
const WT_EXECUTELONGFUNCTION = &h00000010
const WT_EXECUTEINPERSISTENTIOTHREAD = &h00000040
const WT_EXECUTEINPERSISTENTTHREAD = &h00000080
const WT_TRANSFER_IMPERSONATION = &h00000100
const WT_EXECUTEDELETEWAIT = &h00000008
const WT_EXECUTEINLONGTHREAD = &h00000010

type _ACTIVATION_CONTEXT_INFO_CLASS as long
enum
 ActivationContextBasicInformation = 1
 ActivationContextDetailedInformation = 2
 AssemblyDetailedInformationInActivationContext = 3
 FileInformationInAssemblyOfAssemblyInActivationContext = 4
 RunlevelInformationInActivationContext = 5
 CompatibilityInformationInActivationContext = 6
 ActivationContextManifestResourceName = 7
 MaxActivationContextInfoClass
 AssemblyDetailedInformationInActivationContxt = 3
 FileInformationInAssemblyOfAssemblyInActivationContxt = 4
end enum

type ACTIVATION_CONTEXT_INFO_CLASS as _ACTIVATION_CONTEXT_INFO_CLASS

type ACTCTX_REQUESTED_RUN_LEVEL as long
enum
 ACTCTX_RUN_LEVEL_UNSPECIFIED = 0
 ACTCTX_RUN_LEVEL_AS_INVOKER
 ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE
 ACTCTX_RUN_LEVEL_REQUIRE_ADMIN
 ACTCTX_RUN_LEVEL_NUMBERS
end enum

type ACTCTX_COMPATIBILITY_ELEMENT_TYPE as long
enum
 ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0
 ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS
 ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
end enum

type _ACTIVATION_CONTEXT_QUERY_INDEX
 ulAssemblyIndex as DWORD
 ulFileIndexInAssembly as DWORD
end type

type ACTIVATION_CONTEXT_QUERY_INDEX as _ACTIVATION_CONTEXT_QUERY_INDEX
type PACTIVATION_CONTEXT_QUERY_INDEX as _ACTIVATION_CONTEXT_QUERY_INDEX ptr

type _ASSEMBLY_FILE_DETAILED_INFORMATION
 ulFlags as DWORD
 ulFilenameLength as DWORD
 ulPathLength as DWORD
 lpFileName as PCWSTR
 lpFilePath as PCWSTR
end type

type ASSEMBLY_FILE_DETAILED_INFORMATION as _ASSEMBLY_FILE_DETAILED_INFORMATION
type PASSEMBLY_FILE_DETAILED_INFORMATION as _ASSEMBLY_FILE_DETAILED_INFORMATION ptr

type _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
 ulFlags as DWORD
 ulEncodedAssemblyIdentityLength as DWORD
 ulManifestPathType as DWORD
 ulManifestPathLength as DWORD
 liManifestLastWriteTime as LARGE_INTEGER
 ulPolicyPathType as DWORD
 ulPolicyPathLength as DWORD
 liPolicyLastWriteTime as LARGE_INTEGER
 ulMetadataSatelliteRosterIndex as DWORD
 ulManifestVersionMajor as DWORD
 ulManifestVersionMinor as DWORD
 ulPolicyVersionMajor as DWORD
 ulPolicyVersionMinor as DWORD
 ulAssemblyDirectoryNameLength as DWORD
 lpAssemblyEncodedAssemblyIdentity as PCWSTR
 lpAssemblyManifestPath as PCWSTR
 lpAssemblyPolicyPath as PCWSTR
 lpAssemblyDirectoryName as PCWSTR
 ulFileCount as DWORD
end type

type ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION as _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
type PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION as _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ptr

type _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
 ulFlags as DWORD
 RunLevel as ACTCTX_REQUESTED_RUN_LEVEL
 UiAccess as DWORD
end type

type ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION as _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
type PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION as _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION ptr

type _COMPATIBILITY_CONTEXT_ELEMENT
 Id as GUID
 as ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type
end type

type COMPATIBILITY_CONTEXT_ELEMENT as _COMPATIBILITY_CONTEXT_ELEMENT
type PCOMPATIBILITY_CONTEXT_ELEMENT as _COMPATIBILITY_CONTEXT_ELEMENT ptr

type _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
 ElementCount as DWORD
 Elements(0 to 0) as COMPATIBILITY_CONTEXT_ELEMENT
end type

type ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION as _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
type PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION as _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION ptr
const MAX_SUPPORTED_OS_NUM = 4

type _SUPPORTED_OS_INFO
 OsCount as WORD
 MitigationExist as WORD
 OsList(0 to 3) as WORD
end type

type SUPPORTED_OS_INFO as _SUPPORTED_OS_INFO
type PSUPPORTED_OS_INFO as _SUPPORTED_OS_INFO ptr

type _ACTIVATION_CONTEXT_DETAILED_INFORMATION
 dwFlags as DWORD
 ulFormatVersion as DWORD
 ulAssemblyCount as DWORD
 ulRootManifestPathType as DWORD
 ulRootManifestPathChars as DWORD
 ulRootConfigurationPathType as DWORD
 ulRootConfigurationPathChars as DWORD
 ulAppDirPathType as DWORD
 ulAppDirPathChars as DWORD
 lpRootManifestPath as PCWSTR
 lpRootConfigurationPath as PCWSTR
 lpAppDirPath as PCWSTR
end type

type ACTIVATION_CONTEXT_DETAILED_INFORMATION as _ACTIVATION_CONTEXT_DETAILED_INFORMATION
type PACTIVATION_CONTEXT_DETAILED_INFORMATION as _ACTIVATION_CONTEXT_DETAILED_INFORMATION ptr
type PCACTIVATION_CONTEXT_QUERY_INDEX as const _ACTIVATION_CONTEXT_QUERY_INDEX ptr
type PCASSEMBLY_FILE_DETAILED_INFORMATION as const ASSEMBLY_FILE_DETAILED_INFORMATION ptr
type PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION as const _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ptr
type PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION as const _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION ptr
type PCCOMPATIBILITY_CONTEXT_ELEMENT as const _COMPATIBILITY_CONTEXT_ELEMENT ptr
type PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION as const _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION ptr
type PCACTIVATION_CONTEXT_DETAILED_INFORMATION as const _ACTIVATION_CONTEXT_DETAILED_INFORMATION ptr
type ACTIVATIONCONTEXTINFOCLASS as ACTIVATION_CONTEXT_INFO_CLASS

const ACTIVATION_CONTEXT_PATH_TYPE_NONE = 1
const ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE = 2
const ACTIVATION_CONTEXT_PATH_TYPE_URL = 3
const ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF = 4

type _ASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION as _ASSEMBLY_FILE_DETAILED_INFORMATION
type ASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION as ASSEMBLY_FILE_DETAILED_INFORMATION
type PASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION as PASSEMBLY_FILE_DETAILED_INFORMATION
type PCASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION as PCASSEMBLY_FILE_DETAILED_INFORMATION
const INVALID_OS_COUNT = &hffff
const CREATE_BOUNDARY_DESCRIPTOR_ADD_APPCONTAINER_SID = &h1
type RTL_VERIFIER_DLL_LOAD_CALLBACK as sub(byval DllName as PWSTR, byval DllBase as PVOID, byval DllSize as SIZE_T_, byval Reserved as PVOID)
type RTL_VERIFIER_DLL_UNLOAD_CALLBACK as sub(byval DllName as PWSTR, byval DllBase as PVOID, byval DllSize as SIZE_T_, byval Reserved as PVOID)
type RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK as sub(byval AllocationBase as PVOID, byval AllocationSize as SIZE_T_)

type _RTL_VERIFIER_THUNK_DESCRIPTOR
 ThunkName as PCHAR
 ThunkOldAddress as PVOID
 ThunkNewAddress as PVOID
end type

type RTL_VERIFIER_THUNK_DESCRIPTOR as _RTL_VERIFIER_THUNK_DESCRIPTOR
type PRTL_VERIFIER_THUNK_DESCRIPTOR as _RTL_VERIFIER_THUNK_DESCRIPTOR ptr

type _RTL_VERIFIER_DLL_DESCRIPTOR
 DllName as PWCHAR
 DllFlags as DWORD
 DllAddress as PVOID
 DllThunks as PRTL_VERIFIER_THUNK_DESCRIPTOR
end type

type RTL_VERIFIER_DLL_DESCRIPTOR as _RTL_VERIFIER_DLL_DESCRIPTOR
type PRTL_VERIFIER_DLL_DESCRIPTOR as _RTL_VERIFIER_DLL_DESCRIPTOR ptr

type _RTL_VERIFIER_PROVIDER_DESCRIPTOR
 Length as DWORD
 ProviderDlls as PRTL_VERIFIER_DLL_DESCRIPTOR
 ProviderDllLoadCallback as RTL_VERIFIER_DLL_LOAD_CALLBACK
 ProviderDllUnloadCallback as RTL_VERIFIER_DLL_UNLOAD_CALLBACK
 VerifierImage as PWSTR
 VerifierFlags as DWORD
 VerifierDebug as DWORD
 RtlpGetStackTraceAddress as PVOID
 RtlpDebugPageHeapCreate as PVOID
 RtlpDebugPageHeapDestroy as PVOID
 ProviderNtdllHeapFreeCallback as RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK
end type

type RTL_VERIFIER_PROVIDER_DESCRIPTOR as _RTL_VERIFIER_PROVIDER_DESCRIPTOR
type PRTL_VERIFIER_PROVIDER_DESCRIPTOR as _RTL_VERIFIER_PROVIDER_DESCRIPTOR ptr
const RTL_VRF_FLG_FULL_PAGE_HEAP = &h00000001
const RTL_VRF_FLG_RESERVED_DONOTUSE = &h00000002
const RTL_VRF_FLG_HANDLE_CHECKS = &h00000004
const RTL_VRF_FLG_STACK_CHECKS = &h00000008
const RTL_VRF_FLG_APPCOMPAT_CHECKS = &h00000010
const RTL_VRF_FLG_TLS_CHECKS = &h00000020
const RTL_VRF_FLG_DIRTY_STACKS = &h00000040
const RTL_VRF_FLG_RPC_CHECKS = &h00000080
const RTL_VRF_FLG_COM_CHECKS = &h00000100
const RTL_VRF_FLG_DANGEROUS_APIS = &h00000200
const RTL_VRF_FLG_RACE_CHECKS = &h00000400
const RTL_VRF_FLG_DEADLOCK_CHECKS = &h00000800
const RTL_VRF_FLG_FIRST_CHANCE_EXCEPTION_CHECKS = &h00001000
const RTL_VRF_FLG_VIRTUAL_MEM_CHECKS = &h00002000
const RTL_VRF_FLG_ENABLE_LOGGING = &h00004000
const RTL_VRF_FLG_FAST_FILL_HEAP = &h00008000
const RTL_VRF_FLG_VIRTUAL_SPACE_TRACKING = &h00010000
const RTL_VRF_FLG_ENABLED_SYSTEM_WIDE = &h00020000
const RTL_VRF_FLG_MISCELLANEOUS_CHECKS = &h00020000
const RTL_VRF_FLG_LOCK_CHECKS = &h00040000
const APPLICATION_VERIFIER_INTERNAL_ERROR = &h80000000
const APPLICATION_VERIFIER_INTERNAL_WARNING = &h40000000
const APPLICATION_VERIFIER_NO_BREAK = &h20000000
const APPLICATION_VERIFIER_CONTINUABLE_BREAK = &h10000000
const APPLICATION_VERIFIER_UNKNOWN_ERROR = &h0001
const APPLICATION_VERIFIER_ACCESS_VIOLATION = &h0002
const APPLICATION_VERIFIER_UNSYNCHRONIZED_ACCESS = &h0003
const APPLICATION_VERIFIER_EXTREME_SIZE_REQUEST = &h0004
const APPLICATION_VERIFIER_BAD_HEAP_HANDLE = &h0005
const APPLICATION_VERIFIER_SWITCHED_HEAP_HANDLE = &h0006
const APPLICATION_VERIFIER_DOUBLE_FREE = &h0007
const APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK = &h0008
const APPLICATION_VERIFIER_DESTROY_PROCESS_HEAP = &h0009
const APPLICATION_VERIFIER_UNEXPECTED_EXCEPTION = &h000A
const APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_EXCEPTION_RAISED_FOR_HEADER = &h000B
const APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_EXCEPTION_RAISED_FOR_PROBING = &h000C
const APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_HEADER = &h000D
const APPLICATION_VERIFIER_CORRUPTED_FREED_HEAP_BLOCK = &h000E
const APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_SUFFIX = &h000F
const APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_START_STAMP = &h0010
const APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_END_STAMP = &h0011
const APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_PREFIX = &h0012
const APPLICATION_VERIFIER_FIRST_CHANCE_ACCESS_VIOLATION = &h0013
const APPLICATION_VERIFIER_CORRUPTED_HEAP_LIST = &h0014
const APPLICATION_VERIFIER_TERMINATE_THREAD_CALL = &h0100
const APPLICATION_VERIFIER_STACK_OVERFLOW = &h0101
const APPLICATION_VERIFIER_INVALID_EXIT_PROCESS_CALL = &h0102
const APPLICATION_VERIFIER_EXIT_THREAD_OWNS_LOCK = &h0200
const APPLICATION_VERIFIER_LOCK_IN_UNLOADED_DLL = &h0201
const APPLICATION_VERIFIER_LOCK_IN_FREED_HEAP = &h0202
const APPLICATION_VERIFIER_LOCK_DOUBLE_INITIALIZE = &h0203
const APPLICATION_VERIFIER_LOCK_IN_FREED_MEMORY = &h0204
const APPLICATION_VERIFIER_LOCK_CORRUPTED = &h0205
const APPLICATION_VERIFIER_LOCK_INVALID_OWNER = &h0206
const APPLICATION_VERIFIER_LOCK_INVALID_RECURSION_COUNT = &h0207
const APPLICATION_VERIFIER_LOCK_INVALID_LOCK_COUNT = &h0208
const APPLICATION_VERIFIER_LOCK_OVER_RELEASED = &h0209
const APPLICATION_VERIFIER_LOCK_NOT_INITIALIZED = &h0210
const APPLICATION_VERIFIER_LOCK_ALREADY_INITIALIZED = &h0211
const APPLICATION_VERIFIER_LOCK_IN_FREED_VMEM = &h0212
const APPLICATION_VERIFIER_LOCK_IN_UNMAPPED_MEM = &h0213
const APPLICATION_VERIFIER_THREAD_NOT_LOCK_OWNER = &h0214
const APPLICATION_VERIFIER_INVALID_HANDLE = &h0300
const APPLICATION_VERIFIER_INVALID_TLS_VALUE = &h0301
const APPLICATION_VERIFIER_INCORRECT_WAIT_CALL = &h0302
const APPLICATION_VERIFIER_NULL_HANDLE = &h0303
const APPLICATION_VERIFIER_WAIT_IN_DLLMAIN = &h0304
const APPLICATION_VERIFIER_COM_ERROR = &h0400
const APPLICATION_VERIFIER_COM_API_IN_DLLMAIN = &h0401
const APPLICATION_VERIFIER_COM_UNHANDLED_EXCEPTION = &h0402
const APPLICATION_VERIFIER_COM_UNBALANCED_COINIT = &h0403
const APPLICATION_VERIFIER_COM_UNBALANCED_OLEINIT = &h0404
const APPLICATION_VERIFIER_COM_UNBALANCED_SWC = &h0405
const APPLICATION_VERIFIER_COM_NULL_DACL = &h0406
const APPLICATION_VERIFIER_COM_UNSAFE_IMPERSONATION = &h0407
const APPLICATION_VERIFIER_COM_SMUGGLED_WRAPPER = &h0408
const APPLICATION_VERIFIER_COM_SMUGGLED_PROXY = &h0409
const APPLICATION_VERIFIER_COM_CF_SUCCESS_WITH_NULL = &h040A
const APPLICATION_VERIFIER_COM_GCO_SUCCESS_WITH_NULL = &h040B
const APPLICATION_VERIFIER_COM_OBJECT_IN_FREED_MEMORY = &h040C
const APPLICATION_VERIFIER_COM_OBJECT_IN_UNLOADED_DLL = &h040D
const APPLICATION_VERIFIER_COM_VTBL_IN_FREED_MEMORY = &h040E
const APPLICATION_VERIFIER_COM_VTBL_IN_UNLOADED_DLL = &h040F
const APPLICATION_VERIFIER_COM_HOLDING_LOCKS_ON_CALL = &h0410
const APPLICATION_VERIFIER_RPC_ERROR = &h0500
const APPLICATION_VERIFIER_INVALID_FREEMEM = &h0600
const APPLICATION_VERIFIER_INVALID_ALLOCMEM = &h0601
const APPLICATION_VERIFIER_INVALID_MAPVIEW = &h0602
const APPLICATION_VERIFIER_PROBE_INVALID_ADDRESS = &h0603
const APPLICATION_VERIFIER_PROBE_FREE_MEM = &h0604
const APPLICATION_VERIFIER_PROBE_GUARD_PAGE = &h0605
const APPLICATION_VERIFIER_PROBE_NULL = &h0606
const APPLICATION_VERIFIER_PROBE_INVALID_START_OR_SIZE = &h0607
const APPLICATION_VERIFIER_SIZE_HEAP_UNEXPECTED_EXCEPTION = &h0618

declare sub RtlApplicationVerifierStop(byval Code as ULONG_PTR, byval Message as PSTR, byval Param1 as ULONG_PTR, byval Description1 as PSTR, byval Param2 as ULONG_PTR, byval Description2 as PSTR, byval Param3 as ULONG_PTR, byval Description3 as PSTR, byval Param4 as ULONG_PTR, byval Description4 as PSTR)
declare function RtlSetHeapInformation(byval HeapHandle as PVOID, byval HeapInformationClass as HEAP_INFORMATION_CLASS, byval HeapInformation as PVOID, byval HeapInformationLength as SIZE_T_) as DWORD
declare function RtlQueryHeapInformation(byval HeapHandle as PVOID, byval HeapInformationClass as HEAP_INFORMATION_CLASS, byval HeapInformation as PVOID, byval HeapInformationLength as SIZE_T_, byval ReturnLength as PSIZE_T) as DWORD
declare function RtlMultipleAllocateHeap(byval HeapHandle as PVOID, byval Flags as DWORD, byval Size as SIZE_T_, byval Count as DWORD, byval Array as PVOID ptr) as DWORD
declare function RtlMultipleFreeHeap(byval HeapHandle as PVOID, byval Flags as DWORD, byval Count as DWORD, byval Array as PVOID ptr) as DWORD

type _HARDWARE_COUNTER_DATA
 as HARDWARE_COUNTER_TYPE Type
 Reserved as DWORD
 Value as DWORD64
end type

type HARDWARE_COUNTER_DATA as _HARDWARE_COUNTER_DATA
type PHARDWARE_COUNTER_DATA as _HARDWARE_COUNTER_DATA ptr

type _PERFORMANCE_DATA
 Size as WORD
 Version as UBYTE
 HwCountersCount as UBYTE
 ContextSwitchCount as DWORD
 WaitReasonBitMap as DWORD64
 CycleTime as DWORD64
 RetryCount as DWORD
 Reserved as DWORD
 HwCounters(0 to 15) as HARDWARE_COUNTER_DATA
end type

type PERFORMANCE_DATA as _PERFORMANCE_DATA
type PPERFORMANCE_DATA as _PERFORMANCE_DATA ptr
const PERFORMANCE_DATA_VERSION = 1
const READ_THREAD_PROFILING_FLAG_DISPATCHING = &h00000001
const READ_THREAD_PROFILING_FLAG_HARDWARE_COUNTERS = &h00000002
const DLL_PROCESS_ATTACH = 1
const DLL_THREAD_ATTACH = 2
const DLL_THREAD_DETACH = 3
const DLL_PROCESS_DETACH = 0
const DLL_PROCESS_VERIFIER = 4
const EVENTLOG_SEQUENTIAL_READ = &h0001
const EVENTLOG_SEEK_READ = &h0002
const EVENTLOG_FORWARDS_READ = &h0004
const EVENTLOG_BACKWARDS_READ = &h0008
const EVENTLOG_SUCCESS = &h00000
const EVENTLOG_ERROR_TYPE = &h0001
const EVENTLOG_WARNING_TYPE = &h0002
const EVENTLOG_INFORMATION_TYPE = &h0004
const EVENTLOG_AUDIT_SUCCESS = &h0008
const EVENTLOG_AUDIT_FAILURE = &h0010
const EVENTLOG_START_PAIRED_EVENT = &h0001
const EVENTLOG_END_PAIRED_EVENT = &h0002
const EVENTLOG_END_ALL_PAIRED_EVENTS = &h0004
const EVENTLOG_PAIRED_EVENT_ACTIVE = &h0008
const EVENTLOG_PAIRED_EVENT_INACTIVE = &h0010

type _EVENTLOGRECORD
 Length as DWORD
 Reserved as DWORD
 RecordNumber as DWORD
 TimeGenerated as DWORD
 TimeWritten as DWORD
 EventID as DWORD
 EventType as WORD
 NumStrings as WORD
 EventCategory as WORD
 ReservedFlags as WORD
 ClosingRecordNumber as DWORD
 StringOffset as DWORD
 UserSidLength as DWORD
 UserSidOffset as DWORD
 DataLength as DWORD
 DataOffset as DWORD
end type

type EVENTLOGRECORD as _EVENTLOGRECORD
type PEVENTLOGRECORD as _EVENTLOGRECORD ptr
const MAXLOGICALLOGNAMESIZE = 256

type _EVENTSFORLOGFILE
 ulSize as DWORD
 szLogicalLogFile as wstring * 256
 ulNumRecords as DWORD
 pEventLogRecords(0 to 0) as EVENTLOGRECORD
end type

type EVENTSFORLOGFILE as _EVENTSFORLOGFILE
type PEVENTSFORLOGFILE as _EVENTSFORLOGFILE ptr

type _PACKEDEVENTINFO
 ulSize as DWORD
 ulNumEventsForLogFile as DWORD
 ulOffsets(0 to 0) as DWORD
end type

type PACKEDEVENTINFO as _PACKEDEVENTINFO
type PPACKEDEVENTINFO as _PACKEDEVENTINFO ptr
const KEY_QUERY_VALUE = &h0001
const KEY_SET_VALUE = &h0002
const KEY_CREATE_SUB_KEY = &h0004
const KEY_ENUMERATE_SUB_KEYS = &h0008
const KEY_NOTIFY = &h0010
const KEY_CREATE_LINK = &h0020
const KEY_WOW64_64KEY = &h0100
const KEY_WOW64_32KEY = &h0200
const KEY_WOW64_RES = &h0300
const KEY_READ = (((STANDARD_RIGHTS_READ or KEY_QUERY_VALUE) or KEY_ENUMERATE_SUB_KEYS) or KEY_NOTIFY) and (not SYNCHRONIZE)
const KEY_WRITE = ((STANDARD_RIGHTS_WRITE or KEY_SET_VALUE) or KEY_CREATE_SUB_KEY) and (not SYNCHRONIZE)
const KEY_EXECUTE = KEY_READ and (not SYNCHRONIZE)
const KEY_ALL_ACCESS = ((((((STANDARD_RIGHTS_ALL or KEY_QUERY_VALUE) or KEY_SET_VALUE) or KEY_CREATE_SUB_KEY) or KEY_ENUMERATE_SUB_KEYS) or KEY_NOTIFY) or KEY_CREATE_LINK) and (not SYNCHRONIZE)
const REG_OPTION_RESERVED = &h000000000
const REG_OPTION_NON_VOLATILE = &h000000000
const REG_OPTION_VOLATILE = &h00000001
const REG_OPTION_CREATE_LINK = &h00000002
const REG_OPTION_BACKUP_RESTORE = &h00000004
const REG_OPTION_OPEN_LINK = &h00000008
const REG_LEGAL_OPTION = ((((REG_OPTION_RESERVED or REG_OPTION_NON_VOLATILE) or REG_OPTION_VOLATILE) or REG_OPTION_CREATE_LINK) or REG_OPTION_BACKUP_RESTORE) or REG_OPTION_OPEN_LINK
const REG_CREATED_NEW_KEY = &h00000001
const REG_OPENED_EXISTING_KEY = &h00000002
const REG_STANDARD_FORMAT = 1
const REG_LATEST_FORMAT = 2
const REG_NO_COMPRESSION = 4
const REG_WHOLE_HIVE_VOLATILE = &h00000001
const REG_REFRESH_HIVE = &h00000002
const REG_NO_LAZY_FLUSH = &h00000004
const REG_FORCE_RESTORE = &h00000008
const REG_APP_HIVE = &h00000010
const REG_PROCESS_PRIVATE = &h00000020
const REG_START_JOURNAL = &h00000040
const REG_HIVE_EXACT_FILE_GROWTH = &h00000080
const REG_HIVE_NO_RM = &h00000100
const REG_HIVE_SINGLE_LOG = &h00000200
const REG_BOOT_HIVE = &h00000400
const REG_FORCE_UNLOAD = 1
const REG_NOTIFY_CHANGE_NAME = &h00000001
const REG_NOTIFY_CHANGE_ATTRIBUTES = &h00000002
const REG_NOTIFY_CHANGE_LAST_SET = &h00000004
const REG_NOTIFY_CHANGE_SECURITY = &h00000008
const REG_NOTIFY_THREAD_AGNOSTIC = &h10000000
const REG_LEGAL_CHANGE_FILTER = (((REG_NOTIFY_CHANGE_NAME or REG_NOTIFY_CHANGE_ATTRIBUTES) or REG_NOTIFY_CHANGE_LAST_SET) or REG_NOTIFY_CHANGE_SECURITY) or REG_NOTIFY_THREAD_AGNOSTIC
const REG_NONE = 0
const REG_SZ = 1
const REG_EXPAND_SZ = 2
const REG_BINARY = 3
const REG_DWORD = 4
const REG_DWORD_LITTLE_ENDIAN = 4
const REG_DWORD_BIG_ENDIAN = 5
const REG_LINK = 6
const REG_MULTI_SZ = 7
const REG_RESOURCE_LIST = 8
const REG_FULL_RESOURCE_DESCRIPTOR = 9
const REG_RESOURCE_REQUIREMENTS_LIST = 10
const REG_QWORD = 11
const REG_QWORD_LITTLE_ENDIAN = 11
const SERVICE_KERNEL_DRIVER = &h00000001
const SERVICE_FILE_SYSTEM_DRIVER = &h00000002
const SERVICE_ADAPTER = &h00000004
const SERVICE_RECOGNIZER_DRIVER = &h00000008
const SERVICE_DRIVER = (SERVICE_KERNEL_DRIVER or SERVICE_FILE_SYSTEM_DRIVER) or SERVICE_RECOGNIZER_DRIVER
const SERVICE_WIN32_OWN_PROCESS = &h00000010
const SERVICE_WIN32_SHARE_PROCESS = &h00000020
const SERVICE_WIN32 = SERVICE_WIN32_OWN_PROCESS or SERVICE_WIN32_SHARE_PROCESS
const SERVICE_INTERACTIVE_PROCESS = &h00000100
const SERVICE_TYPE_ALL = ((SERVICE_WIN32 or SERVICE_ADAPTER) or SERVICE_DRIVER) or SERVICE_INTERACTIVE_PROCESS
const SERVICE_BOOT_START = &h000000000
const SERVICE_SYSTEM_START = &h00000001
const SERVICE_AUTO_START = &h00000002
const SERVICE_DEMAND_START = &h00000003
const SERVICE_DISABLED = &h00000004
const SERVICE_ERROR_IGNORE = &h000000000
const SERVICE_ERROR_NORMAL = &h00000001
const SERVICE_ERROR_SEVERE = &h00000002
const SERVICE_ERROR_CRITICAL = &h00000003

type _CM_SERVICE_NODE_TYPE as long
enum
 DriverType = &h00000001
 FileSystemType = &h00000002
 Win32ServiceOwnProcess = &h00000010
 Win32ServiceShareProcess = &h00000020
 AdapterType = &h00000004
 RecognizerType = &h00000008
end enum

type SERVICE_NODE_TYPE as _CM_SERVICE_NODE_TYPE

type _CM_SERVICE_LOAD_TYPE as long
enum
 BootLoad = &h000000000
 SystemLoad = &h00000001
 AutoLoad = &h00000002
 DemandLoad = &h00000003
 DisableLoad = &h00000004
end enum

type SERVICE_LOAD_TYPE as _CM_SERVICE_LOAD_TYPE

type _CM_ERROR_CONTROL_TYPE as long
enum
 IgnoreError = &h000000000
 NormalError = &h00000001
 SevereError = &h00000002
 CriticalError = &h00000003
end enum

type SERVICE_ERROR_TYPE as _CM_ERROR_CONTROL_TYPE
const CM_SERVICE_NETWORK_BOOT_LOAD = &h00000001
const CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD = &h00000002
const CM_SERVICE_USB_DISK_BOOT_LOAD = &h00000004
const CM_SERVICE_SD_DISK_BOOT_LOAD = &h00000008
const CM_SERVICE_USB3_DISK_BOOT_LOAD = &h00000010
const CM_SERVICE_MEASURED_BOOT_LOAD = &h00000020
const CM_SERVICE_VERIFIER_BOOT_LOAD = &h00000040
const CM_SERVICE_WINPE_BOOT_LOAD = &h00000080
const CM_SERVICE_VALID_PROMOTION_MASK = ((((((CM_SERVICE_NETWORK_BOOT_LOAD or CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD) or CM_SERVICE_USB_DISK_BOOT_LOAD) or CM_SERVICE_SD_DISK_BOOT_LOAD) or CM_SERVICE_USB3_DISK_BOOT_LOAD) or CM_SERVICE_MEASURED_BOOT_LOAD) or CM_SERVICE_VERIFIER_BOOT_LOAD) or CM_SERVICE_WINPE_BOOT_LOAD
const TAPE_ERASE_SHORT = 0
const TAPE_ERASE_LONG = 1

type _TAPE_ERASE
 as DWORD Type
 Immediate as WINBOOLEAN
end type

type TAPE_ERASE as _TAPE_ERASE
type PTAPE_ERASE as _TAPE_ERASE ptr
const TAPE_LOAD = 0
const TAPE_UNLOAD = 1
const TAPE_TENSION = 2
const TAPE_LOCK = 3
const TAPE_UNLOCK = 4
const TAPE_FORMAT = 5

type _TAPE_PREPARE
 Operation as DWORD
 Immediate as WINBOOLEAN
end type

type TAPE_PREPARE as _TAPE_PREPARE
type PTAPE_PREPARE as _TAPE_PREPARE ptr
const TAPE_SETMARKS = 0
const TAPE_FILEMARKS = 1
const TAPE_SHORT_FILEMARKS = 2
const TAPE_LONG_FILEMARKS = 3

type _TAPE_WRITE_MARKS
 as DWORD Type
 Count as DWORD
 Immediate as WINBOOLEAN
end type

type TAPE_WRITE_MARKS as _TAPE_WRITE_MARKS
type PTAPE_WRITE_MARKS as _TAPE_WRITE_MARKS ptr
const TAPE_ABSOLUTE_POSITION = 0
const TAPE_LOGICAL_POSITION = 1
const TAPE_PSEUDO_LOGICAL_POSITION = 2

type _TAPE_GET_POSITION
 as DWORD Type
 Partition as DWORD
 Offset as LARGE_INTEGER
end type

type TAPE_GET_POSITION as _TAPE_GET_POSITION
type PTAPE_GET_POSITION as _TAPE_GET_POSITION ptr
const TAPE_REWIND = 0
const TAPE_ABSOLUTE_BLOCK = 1
const TAPE_LOGICAL_BLOCK = 2
const TAPE_PSEUDO_LOGICAL_BLOCK = 3
const TAPE_SPACE_END_OF_DATA = 4
const TAPE_SPACE_RELATIVE_BLOCKS = 5
const TAPE_SPACE_FILEMARKS = 6
const TAPE_SPACE_SEQUENTIAL_FMKS = 7
const TAPE_SPACE_SETMARKS = 8
const TAPE_SPACE_SEQUENTIAL_SMKS = 9

type _TAPE_SET_POSITION
 Method as DWORD
 Partition as DWORD
 Offset as LARGE_INTEGER
 Immediate as WINBOOLEAN
end type

type TAPE_SET_POSITION as _TAPE_SET_POSITION
type PTAPE_SET_POSITION as _TAPE_SET_POSITION ptr
const TAPE_DRIVE_FIXED = &h00000001
const TAPE_DRIVE_SELECT = &h00000002
const TAPE_DRIVE_INITIATOR = &h00000004
const TAPE_DRIVE_ERASE_SHORT = &h00000010
const TAPE_DRIVE_ERASE_LONG = &h00000020
const TAPE_DRIVE_ERASE_BOP_ONLY = &h00000040
const TAPE_DRIVE_ERASE_IMMEDIATE = &h00000080
const TAPE_DRIVE_TAPE_CAPACITY = &h00000100
const TAPE_DRIVE_TAPE_REMAINING = &h00000200
const TAPE_DRIVE_FIXED_BLOCK = &h00000400
const TAPE_DRIVE_VARIABLE_BLOCK = &h00000800
const TAPE_DRIVE_WRITE_PROTECT = &h00001000
const TAPE_DRIVE_EOT_WZ_SIZE = &h00002000
const TAPE_DRIVE_ECC = &h00010000
const TAPE_DRIVE_COMPRESSION = &h00020000
const TAPE_DRIVE_PADDING = &h00040000
const TAPE_DRIVE_REPORT_SMKS = &h00080000
const TAPE_DRIVE_GET_ABSOLUTE_BLK = &h00100000
const TAPE_DRIVE_GET_LOGICAL_BLK = &h00200000
const TAPE_DRIVE_SET_EOT_WZ_SIZE = &h00400000
const TAPE_DRIVE_EJECT_MEDIA = &h01000000
const TAPE_DRIVE_CLEAN_REQUESTS = &h02000000
const TAPE_DRIVE_SET_CMP_BOP_ONLY = &h04000000
const TAPE_DRIVE_RESERVED_BIT = &h80000000
const TAPE_DRIVE_LOAD_UNLOAD = &h80000001
const TAPE_DRIVE_TENSION = &h80000002
const TAPE_DRIVE_LOCK_UNLOCK = &h80000004
const TAPE_DRIVE_REWIND_IMMEDIATE = &h80000008
const TAPE_DRIVE_SET_BLOCK_SIZE = &h80000010
const TAPE_DRIVE_LOAD_UNLD_IMMED = &h80000020
const TAPE_DRIVE_TENSION_IMMED = &h80000040
const TAPE_DRIVE_LOCK_UNLK_IMMED = &h80000080
const TAPE_DRIVE_SET_ECC = &h80000100
const TAPE_DRIVE_SET_COMPRESSION = &h80000200
const TAPE_DRIVE_SET_PADDING = &h80000400
const TAPE_DRIVE_SET_REPORT_SMKS = &h80000800
const TAPE_DRIVE_ABSOLUTE_BLK = &h80001000
const TAPE_DRIVE_ABS_BLK_IMMED = &h80002000
const TAPE_DRIVE_LOGICAL_BLK = &h80004000
const TAPE_DRIVE_LOG_BLK_IMMED = &h80008000
const TAPE_DRIVE_END_OF_DATA = &h80010000
const TAPE_DRIVE_RELATIVE_BLKS = &h80020000
const TAPE_DRIVE_FILEMARKS = &h80040000
const TAPE_DRIVE_SEQUENTIAL_FMKS = &h80080000
const TAPE_DRIVE_SETMARKS = &h80100000
const TAPE_DRIVE_SEQUENTIAL_SMKS = &h80200000
const TAPE_DRIVE_REVERSE_POSITION = &h80400000
const TAPE_DRIVE_SPACE_IMMEDIATE = &h80800000
const TAPE_DRIVE_WRITE_SETMARKS = &h81000000
const TAPE_DRIVE_WRITE_FILEMARKS = &h82000000
const TAPE_DRIVE_WRITE_SHORT_FMKS = &h84000000
const TAPE_DRIVE_WRITE_LONG_FMKS = &h88000000
const TAPE_DRIVE_WRITE_MARK_IMMED = &h90000000
const TAPE_DRIVE_FORMAT = &hA0000000
const TAPE_DRIVE_FORMAT_IMMEDIATE = &hC0000000
const TAPE_DRIVE_HIGH_FEATURES = &h80000000

type _TAPE_GET_DRIVE_PARAMETERS
 ECC as WINBOOLEAN
 Compression as WINBOOLEAN
 DataPadding as WINBOOLEAN
 ReportSetmarks as WINBOOLEAN
 DefaultBlockSize as DWORD
 MaximumBlockSize as DWORD
 MinimumBlockSize as DWORD
 MaximumPartitionCount as DWORD
 FeaturesLow as DWORD
 FeaturesHigh as DWORD
 EOTWarningZoneSize as DWORD
end type

type TAPE_GET_DRIVE_PARAMETERS as _TAPE_GET_DRIVE_PARAMETERS
type PTAPE_GET_DRIVE_PARAMETERS as _TAPE_GET_DRIVE_PARAMETERS ptr

type _TAPE_SET_DRIVE_PARAMETERS
 ECC as WINBOOLEAN
 Compression as WINBOOLEAN
 DataPadding as WINBOOLEAN
 ReportSetmarks as WINBOOLEAN
 EOTWarningZoneSize as DWORD
end type

type TAPE_SET_DRIVE_PARAMETERS as _TAPE_SET_DRIVE_PARAMETERS
type PTAPE_SET_DRIVE_PARAMETERS as _TAPE_SET_DRIVE_PARAMETERS ptr

type _TAPE_GET_MEDIA_PARAMETERS
 Capacity as LARGE_INTEGER
 Remaining as LARGE_INTEGER
 BlockSize as DWORD
 PartitionCount as DWORD
 WriteProtected as WINBOOLEAN
end type

type TAPE_GET_MEDIA_PARAMETERS as _TAPE_GET_MEDIA_PARAMETERS
type PTAPE_GET_MEDIA_PARAMETERS as _TAPE_GET_MEDIA_PARAMETERS ptr

type _TAPE_SET_MEDIA_PARAMETERS
 BlockSize as DWORD
end type

type TAPE_SET_MEDIA_PARAMETERS as _TAPE_SET_MEDIA_PARAMETERS
type PTAPE_SET_MEDIA_PARAMETERS as _TAPE_SET_MEDIA_PARAMETERS ptr
const TAPE_FIXED_PARTITIONS = 0
const TAPE_SELECT_PARTITIONS = 1
const TAPE_INITIATOR_PARTITIONS = 2

type _TAPE_CREATE_PARTITION
 Method as DWORD
 Count as DWORD
 Size as DWORD
end type

type TAPE_CREATE_PARTITION as _TAPE_CREATE_PARTITION
type PTAPE_CREATE_PARTITION as _TAPE_CREATE_PARTITION ptr
const TAPE_QUERY_DRIVE_PARAMETERS = 0
const TAPE_QUERY_MEDIA_CAPACITY = 1
const TAPE_CHECK_FOR_DRIVE_PROBLEM = 2
const TAPE_QUERY_IO_ERROR_DATA = 3
const TAPE_QUERY_DEVICE_ERROR_DATA = 4

type _TAPE_WMI_OPERATIONS
 Method as DWORD
 DataBufferSize as DWORD
 DataBuffer as PVOID
end type

type TAPE_WMI_OPERATIONS as _TAPE_WMI_OPERATIONS
type PTAPE_WMI_OPERATIONS as _TAPE_WMI_OPERATIONS ptr

type _TAPE_DRIVE_PROBLEM_TYPE as long
enum
 TapeDriveProblemNone
 TapeDriveReadWriteWarning
 TapeDriveReadWriteError
 TapeDriveReadWarning
 TapeDriveWriteWarning
 TapeDriveReadError
 TapeDriveWriteError
 TapeDriveHardwareError
 TapeDriveUnsupportedMedia
 TapeDriveScsiConnectionError
 TapeDriveTimetoClean
 TapeDriveCleanDriveNow
 TapeDriveMediaLifeExpired
 TapeDriveSnappedTape
end enum

type TAPE_DRIVE_PROBLEM_TYPE as _TAPE_DRIVE_PROBLEM_TYPE
type TP_VERSION as DWORD
type PTP_VERSION as DWORD ptr
type TP_CALLBACK_INSTANCE as _TP_CALLBACK_INSTANCE
type PTP_CALLBACK_INSTANCE as _TP_CALLBACK_INSTANCE ptr
type PTP_SIMPLE_CALLBACK as sub(byval Instance as PTP_CALLBACK_INSTANCE, byval Context as PVOID)
type TP_POOL as _TP_POOL
type PTP_POOL as _TP_POOL ptr

type _TP_CALLBACK_PRIORITY as long
enum
 TP_CALLBACK_PRIORITY_HIGH
 TP_CALLBACK_PRIORITY_NORMAL
 TP_CALLBACK_PRIORITY_LOW
 TP_CALLBACK_PRIORITY_INVALID
 TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
end enum

type TP_CALLBACK_PRIORITY as _TP_CALLBACK_PRIORITY

type _TP_POOL_STACK_INFORMATION
 StackReserve as SIZE_T_
 StackCommit as SIZE_T_
end type

type TP_POOL_STACK_INFORMATION as _TP_POOL_STACK_INFORMATION
type PTP_POOL_STACK_INFORMATION as _TP_POOL_STACK_INFORMATION ptr
type TP_CLEANUP_GROUP as _TP_CLEANUP_GROUP
type PTP_CLEANUP_GROUP as _TP_CLEANUP_GROUP ptr
type PTP_CLEANUP_GROUP_CANCEL_CALLBACK as sub(byval ObjectContext as PVOID, byval CleanupContext as PVOID)

 type _TP_CALLBACK_ENVIRON_V1_u_s
 LongFunction : 1 as DWORD
 Persistent : 1 as DWORD
 as DWORD Private : 30
 end type

 union _TP_CALLBACK_ENVIRON_V1_u
 Flags as DWORD
 s as _TP_CALLBACK_ENVIRON_V1_u_s
 end union

type _ACTIVATION_CONTEXT as _ACTIVATION_CONTEXT_

 type _TP_CALLBACK_ENVIRON_V1
 Version as TP_VERSION
 Pool as PTP_POOL
 CleanupGroup as PTP_CLEANUP_GROUP
 CleanupGroupCancelCallback as PTP_CLEANUP_GROUP_CANCEL_CALLBACK
 RaceDll as PVOID
 ActivationContext as _ACTIVATION_CONTEXT ptr
 FinalizationCallback as PTP_SIMPLE_CALLBACK
 u as _TP_CALLBACK_ENVIRON_V1_u
 end type

 type TP_CALLBACK_ENVIRON_V1 as _TP_CALLBACK_ENVIRON_V1
 type TP_CALLBACK_ENVIRON as TP_CALLBACK_ENVIRON_V1
 type PTP_CALLBACK_ENVIRON as TP_CALLBACK_ENVIRON_V1 ptr

type TP_WORK as _TP_WORK
type PTP_WORK as _TP_WORK ptr
type PTP_WORK_CALLBACK as sub(byval Instance as PTP_CALLBACK_INSTANCE, byval Context as PVOID, byval Work as PTP_WORK)
type TP_TIMER as _TP_TIMER
type PTP_TIMER as _TP_TIMER ptr
type PTP_TIMER_CALLBACK as sub(byval Instance as PTP_CALLBACK_INSTANCE, byval Context as PVOID, byval Timer as PTP_TIMER)
type TP_WAIT_RESULT as DWORD
type TP_WAIT as _TP_WAIT
type PTP_WAIT as _TP_WAIT ptr
type PTP_WAIT_CALLBACK as sub(byval Instance as PTP_CALLBACK_INSTANCE, byval Context as PVOID, byval Wait as PTP_WAIT, byval WaitResult as TP_WAIT_RESULT)
type TP_IO as _TP_IO
type PTP_IO as _TP_IO ptr

 private sub TpInitializeCallbackEnviron cdecl(byval cbe as PTP_CALLBACK_ENVIRON)
 cbe->Pool = cptr(any ptr, 0)
 cbe->CleanupGroup = cptr(any ptr, 0)
 cbe->CleanupGroupCancelCallback = cptr(any ptr, 0)
 cbe->RaceDll = cptr(any ptr, 0)
 cbe->ActivationContext = cptr(any ptr, 0)
 cbe->FinalizationCallback = cptr(any ptr, 0)
 cbe->u.Flags = 0
 cbe->Version = 1
 end sub

private sub TpSetCallbackThreadpool cdecl(byval cbe as PTP_CALLBACK_ENVIRON, byval pool as PTP_POOL)
 cbe->Pool = pool
end sub

private sub TpSetCallbackCleanupGroup cdecl(byval cbe as PTP_CALLBACK_ENVIRON, byval cleanup_group as PTP_CLEANUP_GROUP, byval cleanup_group_cb as PTP_CLEANUP_GROUP_CANCEL_CALLBACK)
 cbe->CleanupGroup = cleanup_group
 cbe->CleanupGroupCancelCallback = cleanup_group_cb
end sub

private sub TpSetCallbackActivationContext cdecl(byval cbe as PTP_CALLBACK_ENVIRON, byval actx as _ACTIVATION_CONTEXT ptr)
 cbe->ActivationContext = actx
end sub

private sub TpSetCallbackNoActivationContext cdecl(byval cbe as PTP_CALLBACK_ENVIRON)
 cbe->ActivationContext = cptr(_ACTIVATION_CONTEXT ptr, cast(LONG_PTR, -1))
end sub

private sub TpSetCallbackLongFunction cdecl(byval cbe as PTP_CALLBACK_ENVIRON)
 cbe->u.s.LongFunction = 1
end sub

private sub TpSetCallbackRaceWithDll cdecl(byval cbe as PTP_CALLBACK_ENVIRON, byval h as PVOID)
 cbe->RaceDll = h
end sub

private sub TpSetCallbackFinalizationCallback cdecl(byval cbe as PTP_CALLBACK_ENVIRON, byval fini_cb as PTP_SIMPLE_CALLBACK)
 cbe->FinalizationCallback = fini_cb
end sub


private sub TpSetCallbackPersistent cdecl(byval cbe as PTP_CALLBACK_ENVIRON)
 cbe->u.s.Persistent = 1
end sub

private sub TpDestroyCallbackEnviron cdecl(byval cbe as PTP_CALLBACK_ENVIRON)
 cbe = cbe
end sub


const TRANSACTIONMANAGER_QUERY_INFORMATION = &h00001
const TRANSACTIONMANAGER_SET_INFORMATION = &h00002
const TRANSACTIONMANAGER_RECOVER = &h00004
const TRANSACTIONMANAGER_RENAME = &h00008
const TRANSACTIONMANAGER_CREATE_RM = &h00010
const TRANSACTIONMANAGER_BIND_TRANSACTION = &h00020
const TRANSACTIONMANAGER_GENERIC_READ = STANDARD_RIGHTS_READ or TRANSACTIONMANAGER_QUERY_INFORMATION
const TRANSACTIONMANAGER_GENERIC_WRITE = (((STANDARD_RIGHTS_WRITE or TRANSACTIONMANAGER_SET_INFORMATION) or TRANSACTIONMANAGER_RECOVER) or TRANSACTIONMANAGER_RENAME) or TRANSACTIONMANAGER_CREATE_RM
const TRANSACTIONMANAGER_GENERIC_EXECUTE = STANDARD_RIGHTS_EXECUTE
const TRANSACTIONMANAGER_ALL_ACCESS = (((STANDARD_RIGHTS_REQUIRED or TRANSACTIONMANAGER_GENERIC_READ) or TRANSACTIONMANAGER_GENERIC_WRITE) or TRANSACTIONMANAGER_GENERIC_EXECUTE) or TRANSACTIONMANAGER_BIND_TRANSACTION
const TRANSACTION_QUERY_INFORMATION = &h0001
const TRANSACTION_SET_INFORMATION = &h0002
const TRANSACTION_ENLIST = &h0004
const TRANSACTION_COMMIT = &h0008
const TRANSACTION_ROLLBACK = &h0010
const TRANSACTION_PROPAGATE = &h0020
const TRANSACTION_RIGHT_RESERVED1 = &h0040
const TRANSACTION_GENERIC_READ = (STANDARD_RIGHTS_READ or TRANSACTION_QUERY_INFORMATION) or SYNCHRONIZE
const TRANSACTION_GENERIC_WRITE = (((((STANDARD_RIGHTS_WRITE or TRANSACTION_SET_INFORMATION) or TRANSACTION_COMMIT) or TRANSACTION_ENLIST) or TRANSACTION_ROLLBACK) or TRANSACTION_PROPAGATE) or SYNCHRONIZE
const TRANSACTION_GENERIC_EXECUTE = ((STANDARD_RIGHTS_EXECUTE or TRANSACTION_COMMIT) or TRANSACTION_ROLLBACK) or SYNCHRONIZE
const TRANSACTION_ALL_ACCESS = ((STANDARD_RIGHTS_REQUIRED or TRANSACTION_GENERIC_READ) or TRANSACTION_GENERIC_WRITE) or TRANSACTION_GENERIC_EXECUTE
const TRANSACTION_RESOURCE_MANAGER_RIGHTS = (((((TRANSACTION_GENERIC_READ or STANDARD_RIGHTS_WRITE) or TRANSACTION_SET_INFORMATION) or TRANSACTION_ENLIST) or TRANSACTION_ROLLBACK) or TRANSACTION_PROPAGATE) or SYNCHRONIZE
const RESOURCEMANAGER_QUERY_INFORMATION = &h0001
const RESOURCEMANAGER_SET_INFORMATION = &h0002
const RESOURCEMANAGER_RECOVER = &h0004
const RESOURCEMANAGER_ENLIST = &h0008
const RESOURCEMANAGER_GET_NOTIFICATION = &h0010
const RESOURCEMANAGER_REGISTER_PROTOCOL = &h0020
const RESOURCEMANAGER_COMPLETE_PROPAGATION = &h0040
const RESOURCEMANAGER_GENERIC_READ = (STANDARD_RIGHTS_READ or RESOURCEMANAGER_QUERY_INFORMATION) or SYNCHRONIZE
const RESOURCEMANAGER_GENERIC_WRITE = ((((((STANDARD_RIGHTS_WRITE or RESOURCEMANAGER_SET_INFORMATION) or RESOURCEMANAGER_RECOVER) or RESOURCEMANAGER_ENLIST) or RESOURCEMANAGER_GET_NOTIFICATION) or RESOURCEMANAGER_REGISTER_PROTOCOL) or RESOURCEMANAGER_COMPLETE_PROPAGATION) or SYNCHRONIZE
const RESOURCEMANAGER_GENERIC_EXECUTE = ((((STANDARD_RIGHTS_EXECUTE or RESOURCEMANAGER_RECOVER) or RESOURCEMANAGER_ENLIST) or RESOURCEMANAGER_GET_NOTIFICATION) or RESOURCEMANAGER_COMPLETE_PROPAGATION) or SYNCHRONIZE
const RESOURCEMANAGER_ALL_ACCESS = ((STANDARD_RIGHTS_REQUIRED or RESOURCEMANAGER_GENERIC_READ) or RESOURCEMANAGER_GENERIC_WRITE) or RESOURCEMANAGER_GENERIC_EXECUTE
const ENLISTMENT_QUERY_INFORMATION = 1
const ENLISTMENT_SET_INFORMATION = 2
const ENLISTMENT_RECOVER = 4
const ENLISTMENT_SUBORDINATE_RIGHTS = 8
const ENLISTMENT_SUPERIOR_RIGHTS = &h10
const ENLISTMENT_GENERIC_READ = STANDARD_RIGHTS_READ or ENLISTMENT_QUERY_INFORMATION
const ENLISTMENT_GENERIC_WRITE = (((STANDARD_RIGHTS_WRITE or ENLISTMENT_SET_INFORMATION) or ENLISTMENT_RECOVER) or ENLISTMENT_SUBORDINATE_RIGHTS) or ENLISTMENT_SUPERIOR_RIGHTS
const ENLISTMENT_GENERIC_EXECUTE = ((STANDARD_RIGHTS_EXECUTE or ENLISTMENT_RECOVER) or ENLISTMENT_SUBORDINATE_RIGHTS) or ENLISTMENT_SUPERIOR_RIGHTS
const ENLISTMENT_ALL_ACCESS = ((STANDARD_RIGHTS_REQUIRED or ENLISTMENT_GENERIC_READ) or ENLISTMENT_GENERIC_WRITE) or ENLISTMENT_GENERIC_EXECUTE

type _TRANSACTION_OUTCOME as long
enum
 TransactionOutcomeUndetermined = 1
 TransactionOutcomeCommitted
 TransactionOutcomeAborted
end enum

type TRANSACTION_OUTCOME as _TRANSACTION_OUTCOME

type _TRANSACTION_STATE as long
enum
 TransactionStateNormal = 1
 TransactionStateIndoubt
 TransactionStateCommittedNotify
end enum

type TRANSACTION_STATE as _TRANSACTION_STATE

type _TRANSACTION_BASIC_INFORMATION
 TransactionId as GUID
 State as DWORD
 Outcome as DWORD
end type

type TRANSACTION_BASIC_INFORMATION as _TRANSACTION_BASIC_INFORMATION
type PTRANSACTION_BASIC_INFORMATION as _TRANSACTION_BASIC_INFORMATION ptr

type _TRANSACTIONMANAGER_BASIC_INFORMATION
 TmIdentity as GUID
 VirtualClock as LARGE_INTEGER
end type

type TRANSACTIONMANAGER_BASIC_INFORMATION as _TRANSACTIONMANAGER_BASIC_INFORMATION
type PTRANSACTIONMANAGER_BASIC_INFORMATION as _TRANSACTIONMANAGER_BASIC_INFORMATION ptr

type _TRANSACTIONMANAGER_LOG_INFORMATION
 LogIdentity as GUID
end type

type TRANSACTIONMANAGER_LOG_INFORMATION as _TRANSACTIONMANAGER_LOG_INFORMATION
type PTRANSACTIONMANAGER_LOG_INFORMATION as _TRANSACTIONMANAGER_LOG_INFORMATION ptr

type _TRANSACTIONMANAGER_LOGPATH_INFORMATION
 LogPathLength as DWORD
 LogPath as wstring * 1
end type

type TRANSACTIONMANAGER_LOGPATH_INFORMATION as _TRANSACTIONMANAGER_LOGPATH_INFORMATION
type PTRANSACTIONMANAGER_LOGPATH_INFORMATION as _TRANSACTIONMANAGER_LOGPATH_INFORMATION ptr

type _TRANSACTIONMANAGER_RECOVERY_INFORMATION
 LastRecoveredLsn as ULONGLONG
end type

type TRANSACTIONMANAGER_RECOVERY_INFORMATION as _TRANSACTIONMANAGER_RECOVERY_INFORMATION
type PTRANSACTIONMANAGER_RECOVERY_INFORMATION as _TRANSACTIONMANAGER_RECOVERY_INFORMATION ptr

type _TRANSACTIONMANAGER_OLDEST_INFORMATION
 OldestTransactionGuid as GUID
end type

type TRANSACTIONMANAGER_OLDEST_INFORMATION as _TRANSACTIONMANAGER_OLDEST_INFORMATION
type PTRANSACTIONMANAGER_OLDEST_INFORMATION as _TRANSACTIONMANAGER_OLDEST_INFORMATION ptr

type _TRANSACTION_PROPERTIES_INFORMATION
 IsolationLevel as DWORD
 IsolationFlags as DWORD
 Timeout as LARGE_INTEGER
 Outcome as DWORD
 DescriptionLength as DWORD
 Description as wstring * 1
end type

type TRANSACTION_PROPERTIES_INFORMATION as _TRANSACTION_PROPERTIES_INFORMATION
type PTRANSACTION_PROPERTIES_INFORMATION as _TRANSACTION_PROPERTIES_INFORMATION ptr

type _TRANSACTION_BIND_INFORMATION
 TmHandle as HANDLE
end type

type TRANSACTION_BIND_INFORMATION as _TRANSACTION_BIND_INFORMATION
type PTRANSACTION_BIND_INFORMATION as _TRANSACTION_BIND_INFORMATION ptr

type _TRANSACTION_ENLISTMENT_PAIR
 EnlistmentId as GUID
 ResourceManagerId as GUID
end type

type TRANSACTION_ENLISTMENT_PAIR as _TRANSACTION_ENLISTMENT_PAIR
type PTRANSACTION_ENLISTMENT_PAIR as _TRANSACTION_ENLISTMENT_PAIR ptr

type _TRANSACTION_ENLISTMENTS_INFORMATION
 NumberOfEnlistments as DWORD
 EnlistmentPair(0 to 0) as TRANSACTION_ENLISTMENT_PAIR
end type

type TRANSACTION_ENLISTMENTS_INFORMATION as _TRANSACTION_ENLISTMENTS_INFORMATION
type PTRANSACTION_ENLISTMENTS_INFORMATION as _TRANSACTION_ENLISTMENTS_INFORMATION ptr

type _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
 SuperiorEnlistmentPair as TRANSACTION_ENLISTMENT_PAIR
end type

type TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION as _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
type PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION as _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION ptr

type _RESOURCEMANAGER_BASIC_INFORMATION
 ResourceManagerId as GUID
 DescriptionLength as DWORD
 Description as wstring * 1
end type

type RESOURCEMANAGER_BASIC_INFORMATION as _RESOURCEMANAGER_BASIC_INFORMATION
type PRESOURCEMANAGER_BASIC_INFORMATION as _RESOURCEMANAGER_BASIC_INFORMATION ptr

type _RESOURCEMANAGER_COMPLETION_INFORMATION
 IoCompletionPortHandle as HANDLE
 CompletionKey as ULONG_PTR
end type

type RESOURCEMANAGER_COMPLETION_INFORMATION as _RESOURCEMANAGER_COMPLETION_INFORMATION
type PRESOURCEMANAGER_COMPLETION_INFORMATION as _RESOURCEMANAGER_COMPLETION_INFORMATION ptr

type _TRANSACTION_INFORMATION_CLASS as long
enum
 TransactionBasicInformation
 TransactionPropertiesInformation
 TransactionEnlistmentInformation
 TransactionSuperiorEnlistmentInformation
 TransactionBindInformation
 TransactionDTCPrivateInformation
end enum

type TRANSACTION_INFORMATION_CLASS as _TRANSACTION_INFORMATION_CLASS

type _TRANSACTIONMANAGER_INFORMATION_CLASS as long
enum
 TransactionManagerBasicInformation
 TransactionManagerLogInformation
 TransactionManagerLogPathInformation
 TransactionManagerOnlineProbeInformation = 3
 TransactionManagerRecoveryInformation = 4
 TransactionManagerOldestTransactionInformation = 5
end enum

type TRANSACTIONMANAGER_INFORMATION_CLASS as _TRANSACTIONMANAGER_INFORMATION_CLASS

type _RESOURCEMANAGER_INFORMATION_CLASS as long
enum
 ResourceManagerBasicInformation
 ResourceManagerCompletionInformation
end enum

type RESOURCEMANAGER_INFORMATION_CLASS as _RESOURCEMANAGER_INFORMATION_CLASS

type _ENLISTMENT_BASIC_INFORMATION
 EnlistmentId as GUID
 TransactionId as GUID
 ResourceManagerId as GUID
end type

type ENLISTMENT_BASIC_INFORMATION as _ENLISTMENT_BASIC_INFORMATION
type PENLISTMENT_BASIC_INFORMATION as _ENLISTMENT_BASIC_INFORMATION ptr

type _ENLISTMENT_CRM_INFORMATION
 CrmTransactionManagerId as GUID
 CrmResourceManagerId as GUID
 CrmEnlistmentId as GUID
end type

type ENLISTMENT_CRM_INFORMATION as _ENLISTMENT_CRM_INFORMATION
type PENLISTMENT_CRM_INFORMATION as _ENLISTMENT_CRM_INFORMATION ptr

type _ENLISTMENT_INFORMATION_CLASS as long
enum
 EnlistmentBasicInformation
 EnlistmentRecoveryInformation
 EnlistmentCrmInformation
end enum

type ENLISTMENT_INFORMATION_CLASS as _ENLISTMENT_INFORMATION_CLASS

type _TRANSACTION_LIST_ENTRY
 UOW as GUID
end type

type TRANSACTION_LIST_ENTRY as _TRANSACTION_LIST_ENTRY
type PTRANSACTION_LIST_ENTRY as _TRANSACTION_LIST_ENTRY ptr

type _TRANSACTION_LIST_INFORMATION
 NumberOfTransactions as DWORD
 TransactionInformation(0 to 0) as TRANSACTION_LIST_ENTRY
end type

type TRANSACTION_LIST_INFORMATION as _TRANSACTION_LIST_INFORMATION
type PTRANSACTION_LIST_INFORMATION as _TRANSACTION_LIST_INFORMATION ptr

type _KTMOBJECT_TYPE as long
enum
 KTMOBJECT_TRANSACTION
 KTMOBJECT_TRANSACTION_MANAGER
 KTMOBJECT_RESOURCE_MANAGER
 KTMOBJECT_ENLISTMENT
 KTMOBJECT_INVALID
end enum

type KTMOBJECT_TYPE as _KTMOBJECT_TYPE
type PKTMOBJECT_TYPE as _KTMOBJECT_TYPE ptr

type _KTMOBJECT_CURSOR
 LastQuery as GUID
 ObjectIdCount as DWORD
 ObjectIds(0 to 0) as GUID
end type

type KTMOBJECT_CURSOR as _KTMOBJECT_CURSOR
type PKTMOBJECT_CURSOR as _KTMOBJECT_CURSOR ptr
const WOW64_CONTEXT_i386 = &h00010000
const WOW64_CONTEXT_i486 = &h00010000
const WOW64_CONTEXT_CONTROL = WOW64_CONTEXT_i386 or &h00000001
const WOW64_CONTEXT_INTEGER = WOW64_CONTEXT_i386 or &h00000002
const WOW64_CONTEXT_SEGMENTS = WOW64_CONTEXT_i386 or &h00000004
const WOW64_CONTEXT_FLOATING_POINT = WOW64_CONTEXT_i386 or &h00000008
const WOW64_CONTEXT_DEBUG_REGISTERS = WOW64_CONTEXT_i386 or &h00000010
const WOW64_CONTEXT_EXTENDED_REGISTERS = WOW64_CONTEXT_i386 or &h00000020
const WOW64_CONTEXT_FULL = (WOW64_CONTEXT_CONTROL or WOW64_CONTEXT_INTEGER) or WOW64_CONTEXT_SEGMENTS
const WOW64_CONTEXT_ALL = ((((WOW64_CONTEXT_CONTROL or WOW64_CONTEXT_INTEGER) or WOW64_CONTEXT_SEGMENTS) or WOW64_CONTEXT_FLOATING_POINT) or WOW64_CONTEXT_DEBUG_REGISTERS) or WOW64_CONTEXT_EXTENDED_REGISTERS
const WOW64_CONTEXT_XSTATE = WOW64_CONTEXT_i386 or &h00000040
const WOW64_CONTEXT_EXCEPTION_ACTIVE = &h08000000
const WOW64_CONTEXT_SERVICE_ACTIVE = &h10000000
const WOW64_CONTEXT_EXCEPTION_REQUEST = &h40000000
const WOW64_CONTEXT_EXCEPTION_REPORTING = &h80000000
const WOW64_SIZE_OF_80387_REGISTERS = 80
const WOW64_MAXIMUM_SUPPORTED_EXTENSION = 512

type _WOW64_FLOATING_SAVE_AREA
 ControlWord as DWORD
 StatusWord as DWORD
 TagWord as DWORD
 ErrorOffset as DWORD
 ErrorSelector as DWORD
 DataOffset as DWORD
 DataSelector as DWORD
 RegisterArea(0 to 79) as UBYTE
 Cr0NpxState as DWORD
end type

type WOW64_FLOATING_SAVE_AREA as _WOW64_FLOATING_SAVE_AREA
type PWOW64_FLOATING_SAVE_AREA as _WOW64_FLOATING_SAVE_AREA ptr

type _WOW64_CONTEXT field = 4
 ContextFlags as DWORD
 Dr0 as DWORD
 Dr1 as DWORD
 Dr2 as DWORD
 Dr3 as DWORD
 Dr6 as DWORD
 Dr7 as DWORD
 FloatSave as WOW64_FLOATING_SAVE_AREA
 SegGs as DWORD
 SegFs as DWORD
 SegEs as DWORD
 SegDs as DWORD
 Edi as DWORD
 Esi as DWORD
 Ebx as DWORD
 Edx as DWORD
 Ecx as DWORD
 Eax as DWORD
 Ebp as DWORD
 Eip as DWORD
 SegCs as DWORD
 EFlags as DWORD
 Esp as DWORD
 SegSs as DWORD
 ExtendedRegisters(0 to 511) as UBYTE
end type

type WOW64_CONTEXT as _WOW64_CONTEXT
type PWOW64_CONTEXT as _WOW64_CONTEXT ptr

type _WOW64_LDT_ENTRY_HighWord_Bytes
 BaseMid as UBYTE
 Flags1 as UBYTE
 Flags2 as UBYTE
 BaseHi as UBYTE
end type

type _WOW64_LDT_ENTRY_HighWord_Bits
 BaseMid : 8 as DWORD
 as DWORD Type : 5
 Dpl : 2 as DWORD
 Pres : 1 as DWORD
 LimitHi : 4 as DWORD
 Sys : 1 as DWORD
 Reserved_0 : 1 as DWORD
 Default_Big : 1 as DWORD
 Granularity : 1 as DWORD
 BaseHi : 8 as DWORD
end type

union _WOW64_LDT_ENTRY_HighWord
 Bytes as _WOW64_LDT_ENTRY_HighWord_Bytes
 Bits as _WOW64_LDT_ENTRY_HighWord_Bits
end union

type _WOW64_LDT_ENTRY
 LimitLow as WORD
 BaseLow as WORD
 HighWord as _WOW64_LDT_ENTRY_HighWord
end type

type WOW64_LDT_ENTRY as _WOW64_LDT_ENTRY
type PWOW64_LDT_ENTRY as _WOW64_LDT_ENTRY ptr

type _WOW64_DESCRIPTOR_TABLE_ENTRY
 Selector as DWORD
 Descriptor as WOW64_LDT_ENTRY
end type

type WOW64_DESCRIPTOR_TABLE_ENTRY as _WOW64_DESCRIPTOR_TABLE_ENTRY
type PWOW64_DESCRIPTOR_TABLE_ENTRY as _WOW64_DESCRIPTOR_TABLE_ENTRY ptr


const ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION = 1
const ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION = 2
const ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION = 3
const ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION = 4
const ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION = 5
const ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION = 6
const ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION = 7
const ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE = 8
const ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES = 9
const ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS = 10
const ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO = 11

end extern



type CRM_PROTOCOL_ID as GUID
type PCRM_PROTOCOL_ID as GUID ptr
const TRANSACTION_MANAGER_VOLATILE = &h00000001
const TRANSACTION_MANAGER_COMMIT_DEFAULT = &h000000000
const TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME = &h00000002
const TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES = &h00000004
const TRANSACTION_MANAGER_COMMIT_LOWEST = &h00000008
const TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY = &h00000010
const TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS = &h00000020
const TRANSACTION_MANAGER_MAXIMUM_OPTION = &h0000003f
const TRANSACTION_DO_NOT_PROMOTE = &h00000001
const TRANSACTION_MAXIMUM_OPTION = &h00000001
const RESOURCE_MANAGER_VOLATILE = &h00000001
const RESOURCE_MANAGER_COMMUNICATION = &h00000002
const RESOURCE_MANAGER_MAXIMUM_OPTION = &h00000003
const CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY = &h00000001
const CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO = &h00000002
const CRM_PROTOCOL_MAXIMUM_OPTION = &h00000003
const ENLISTMENT_SUPERIOR = &h00000001
const ENLISTMENT_MAXIMUM_OPTION = &h00000001
type NOTIFICATION_MASK as ULONG
const TRANSACTION_NOTIFY_MASK = &h3fffffff
const TRANSACTION_NOTIFY_PREPREPARE = &h00000001
const TRANSACTION_NOTIFY_PREPARE = &h00000002
const TRANSACTION_NOTIFY_COMMIT = &h00000004
const TRANSACTION_NOTIFY_ROLLBACK = &h00000008
const TRANSACTION_NOTIFY_PREPREPARE_COMPLETE = &h00000010
const TRANSACTION_NOTIFY_PREPARE_COMPLETE = &h00000020
const TRANSACTION_NOTIFY_COMMIT_COMPLETE = &h00000040
const TRANSACTION_NOTIFY_ROLLBACK_COMPLETE = &h00000080
const TRANSACTION_NOTIFY_RECOVER = &h00000100
const TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT = &h00000200
const TRANSACTION_NOTIFY_DELEGATE_COMMIT = &h00000400
const TRANSACTION_NOTIFY_RECOVER_QUERY = &h00000800
const TRANSACTION_NOTIFY_ENLIST_PREPREPARE = &h00001000
const TRANSACTION_NOTIFY_LAST_RECOVER = &h00002000
const TRANSACTION_NOTIFY_INDOUBT = &h00004000
const TRANSACTION_NOTIFY_PROPAGATE_PULL = &h00008000
const TRANSACTION_NOTIFY_PROPAGATE_PUSH = &h00010000
const TRANSACTION_NOTIFY_MARSHAL = &h00020000
const TRANSACTION_NOTIFY_ENLIST_MASK = &h00040000
const TRANSACTION_NOTIFY_RM_DISCONNECTED = &h01000000
const TRANSACTION_NOTIFY_TM_ONLINE = &h02000000
const TRANSACTION_NOTIFY_COMMIT_REQUEST = &h04000000
const TRANSACTION_NOTIFY_PROMOTE = &h08000000
const TRANSACTION_NOTIFY_PROMOTE_NEW = &h10000000
const TRANSACTION_NOTIFY_REQUEST_OUTCOME = &h20000000
const TRANSACTION_NOTIFY_COMMIT_FINALIZE = &h40000000

type _TRANSACTION_NOTIFICATION
 TransactionKey as PVOID
 TransactionNotification as ULONG
 TmVirtualClock as LARGE_INTEGER
 ArgumentLength as ULONG
end type

type TRANSACTION_NOTIFICATION as _TRANSACTION_NOTIFICATION
type PTRANSACTION_NOTIFICATION as _TRANSACTION_NOTIFICATION ptr

type _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
 EnlistmentId as GUID
 UOW as GUID
end type

type TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT as _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
type PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT as _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT ptr
const TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED = &h1

type _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
 TmIdentity as GUID
 Flags as ULONG
end type

type TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT as _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
type PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT as _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT ptr
type SAVEPOINT_ID as ULONG
type PSAVEPOINT_ID as ULONG ptr

type _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
 SavepointId as SAVEPOINT_ID
end type

type TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT as _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
type PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT as _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT ptr

type _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
 PropagationCookie as ULONG
 UOW as GUID
 TmIdentity as GUID
 BufferLength as ULONG
end type

type TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT as _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
type PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT as _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT ptr

type _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
 MarshalCookie as ULONG
 UOW as GUID
end type

type TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT as _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
type PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT as _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT ptr
type TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT as TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
type PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT as TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT ptr

const KTM_MARSHAL_BLOB_VERSION_MAJOR = 1
const KTM_MARSHAL_BLOB_VERSION_MINOR = 1
const MAX_TRANSACTION_DESCRIPTION_LENGTH = 64
const MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH = 64

type _KCRM_MARSHAL_HEADER
 VersionMajor as ULONG
 VersionMinor as ULONG
 NumProtocols as ULONG
 Unused as ULONG
end type

type KCRM_MARSHAL_HEADER as _KCRM_MARSHAL_HEADER
type PKCRM_MARSHAL_HEADER as _KCRM_MARSHAL_HEADER ptr
type PRKCRM_MARSHAL_HEADER as _KCRM_MARSHAL_HEADER ptr

type _KCRM_TRANSACTION_BLOB
 UOW as GUID
 TmIdentity as GUID
 IsolationLevel as ULONG
 IsolationFlags as ULONG
 Timeout as ULONG
 Description as wstring * 64
end type

type KCRM_TRANSACTION_BLOB as _KCRM_TRANSACTION_BLOB
type PKCRM_TRANSACTION_BLOB as _KCRM_TRANSACTION_BLOB ptr
type PRKCRM_TRANSACTION_BLOB as _KCRM_TRANSACTION_BLOB ptr

type _KCRM_PROTOCOL_BLOB
 ProtocolId as CRM_PROTOCOL_ID
 StaticInfoLength as ULONG
 TransactionIdInfoLength as ULONG
 Unused1 as ULONG
 Unused2 as ULONG
end type

type KCRM_PROTOCOL_BLOB as _KCRM_PROTOCOL_BLOB
type PKCRM_PROTOCOL_BLOB as _KCRM_PROTOCOL_BLOB ptr
type PRKCRM_PROTOCOL_BLOB as _KCRM_PROTOCOL_BLOB ptr


#inclib "kernel32"




const __IN__WINERROR_ = 1
const FACILITY_WINDOWSUPDATE = 36
const FACILITY_WINDOWS_CE = 24
const FACILITY_WINDOWS = 8
const FACILITY_URT = 19
const FACILITY_UMI = 22
const FACILITY_SXS = 23
const FACILITY_STORAGE = 3
const FACILITY_STATE_MANAGEMENT = 34
const FACILITY_SSPI = 9
const FACILITY_SCARD = 16
const FACILITY_SETUPAPI = 15
const FACILITY_SECURITY = 9
const FACILITY_RPC = 1
const FACILITY_WIN32 = 7
const FACILITY_CONTROL = 10
const FACILITY_NULL = 0
const FACILITY_METADIRECTORY = 35
const FACILITY_MSMQ = 14
const FACILITY_MEDIASERVER = 13
const FACILITY_INTERNET = 12
const FACILITY_ITF = 4
const FACILITY_HTTP = 25
const FACILITY_DPLAY = 21
const FACILITY_DISPATCH = 2
const FACILITY_DIRECTORYSERVICE = 37
const FACILITY_CONFIGURATION = 33
const FACILITY_COMPLUS = 17
const FACILITY_CERT = 11
const FACILITY_BACKGROUNDCOPY = 32
const FACILITY_ACS = 20
const FACILITY_AAF = 18
const FACILITY_AUDCLNT = 2185
const ERROR_SUCCESS = 0
const NO_ERROR = 0
const SEC_E_OK = cast(HRESULT, &h000000000)
const ERROR_INVALID_FUNCTION = 1
const ERROR_FILE_NOT_FOUND = 2
const ERROR_PATH_NOT_FOUND = 3
const ERROR_TOO_MANY_OPEN_FILES = 4
const ERROR_ACCESS_DENIED = 5
const ERROR_INVALID_HANDLE = 6
const ERROR_ARENA_TRASHED = 7
const ERROR_NOT_ENOUGH_MEMORY = 8
const ERROR_INVALID_BLOCK = 9
const ERROR_BAD_ENVIRONMENT = 10
const ERROR_BAD_FORMAT = 11
const ERROR_INVALID_ACCESS = 12
const ERROR_INVALID_DATA = 13
const ERROR_OUTOFMEMORY = 14
const ERROR_INVALID_DRIVE = 15
const ERROR_CURRENT_DIRECTORY = 16
const ERROR_NOT_SAME_DEVICE = 17
const ERROR_NO_MORE_FILES = 18
const ERROR_WRITE_PROTECT = 19
const ERROR_BAD_UNIT = 20
const ERROR_NOT_READY = 21
const ERROR_BAD_COMMAND = 22
const ERROR_CRC = 23
const ERROR_BAD_LENGTH = 24
const ERROR_SEEK = 25
const ERROR_NOT_DOS_DISK = 26
const ERROR_SECTOR_NOT_FOUND = 27
const ERROR_OUT_OF_PAPER = 28
const ERROR_WRITE_FAULT = 29
const ERROR_READ_FAULT = 30
const ERROR_GEN_FAILURE = 31
const ERROR_SHARING_VIOLATION = 32
const ERROR_LOCK_VIOLATION = 33
const ERROR_WRONG_DISK = 34
const ERROR_SHARING_BUFFER_EXCEEDED = 36
const ERROR_HANDLE_EOF = 38
const ERROR_HANDLE_DISK_FULL = 39
const ERROR_NOT_SUPPORTED = 50
const ERROR_REM_NOT_LIST = 51
const ERROR_DUP_NAME = 52
const ERROR_BAD_NETPATH = 53
const ERROR_NETWORK_BUSY = 54
const ERROR_DEV_NOT_EXIST = 55
const ERROR_TOO_MANY_CMDS = 56
const ERROR_ADAP_HDW_ERR = 57
const ERROR_BAD_NET_RESP = 58
const ERROR_UNEXP_NET_ERR = 59
const ERROR_BAD_REM_ADAP = 60
const ERROR_PRINTQ_FULL = 61
const ERROR_NO_SPOOL_SPACE = 62
const ERROR_PRINT_CANCELLED = 63
const ERROR_NETNAME_DELETED = 64
const ERROR_NETWORK_ACCESS_DENIED = 65
const ERROR_BAD_DEV_TYPE = 66
const ERROR_BAD_NET_NAME = 67
const ERROR_TOO_MANY_NAMES = 68
const ERROR_TOO_MANY_SESS = 69
const ERROR_SHARING_PAUSED = 70
const ERROR_REQ_NOT_ACCEP = 71
const ERROR_REDIR_PAUSED = 72
const ERROR_FILE_EXISTS = 80
const ERROR_CANNOT_MAKE = 82
const ERROR_FAIL_I24 = 83
const ERROR_OUT_OF_STRUCTURES = 84
const ERROR_ALREADY_ASSIGNED = 85
const ERROR_INVALID_PASSWORD = 86
const ERROR_INVALID_PARAMETER = 87
const ERROR_NET_WRITE_FAULT = 88
const ERROR_NO_PROC_SLOTS = 89
const ERROR_TOO_MANY_SEMAPHORES = 100
const ERROR_EXCL_SEM_ALREADY_OWNED = 101
const ERROR_SEM_IS_SET = 102
const ERROR_TOO_MANY_SEM_REQUESTS = 103
const ERROR_INVALID_AT_INTERRUPT_TIME = 104
const ERROR_SEM_OWNER_DIED = 105
const ERROR_SEM_USER_LIMIT = 106
const ERROR_DISK_CHANGE = 107
const ERROR_DRIVE_LOCKED = 108
const ERROR_BROKEN_PIPE = 109
const ERROR_OPEN_FAILED = 110
const ERROR_BUFFER_OVERFLOW = 111
const ERROR_DISK_FULL = 112
const ERROR_NO_MORE_SEARCH_HANDLES = 113
const ERROR_INVALID_TARGET_HANDLE = 114
const ERROR_INVALID_CATEGORY = 117
const ERROR_INVALID_VERIFY_SWITCH = 118
const ERROR_BAD_DRIVER_LEVEL = 119
const ERROR_CALL_NOT_IMPLEMENTED = 120
const ERROR_SEM_TIMEOUT = 121
const ERROR_INSUFFICIENT_BUFFER = 122
const ERROR_INVALID_NAME = 123
const ERROR_INVALID_LEVEL = 124
const ERROR_NO_VOLUME_LABEL = 125
const ERROR_MOD_NOT_FOUND = 126
const ERROR_PROC_NOT_FOUND = 127
const ERROR_WAIT_NO_CHILDREN = 128
const ERROR_CHILD_NOT_COMPLETE = 129
const ERROR_DIRECT_ACCESS_HANDLE = 130
const ERROR_NEGATIVE_SEEK = 131
const ERROR_SEEK_ON_DEVICE = 132
const ERROR_IS_JOIN_TARGET = 133
const ERROR_IS_JOINED = 134
const ERROR_IS_SUBSTED = 135
const ERROR_NOT_JOINED = 136
const ERROR_NOT_SUBSTED = 137
const ERROR_JOIN_TO_JOIN = 138
const ERROR_SUBST_TO_SUBST = 139
const ERROR_JOIN_TO_SUBST = 140
const ERROR_SUBST_TO_JOIN = 141
const ERROR_BUSY_DRIVE = 142
const ERROR_SAME_DRIVE = 143
const ERROR_DIR_NOT_ROOT = 144
const ERROR_DIR_NOT_EMPTY = 145
const ERROR_IS_SUBST_PATH = 146
const ERROR_IS_JOIN_PATH = 147
const ERROR_PATH_BUSY = 148
const ERROR_IS_SUBST_TARGET = 149
const ERROR_SYSTEM_TRACE = 150
const ERROR_INVALID_EVENT_COUNT = 151
const ERROR_TOO_MANY_MUXWAITERS = 152
const ERROR_INVALID_LIST_FORMAT = 153
const ERROR_LABEL_TOO_LONG = 154
const ERROR_TOO_MANY_TCBS = 155
const ERROR_SIGNAL_REFUSED = 156
const ERROR_DISCARDED = 157
const ERROR_NOT_LOCKED = 158
const ERROR_BAD_THREADID_ADDR = 159
const ERROR_BAD_ARGUMENTS = 160
const ERROR_BAD_PATHNAME = 161
const ERROR_SIGNAL_PENDING = 162
const ERROR_MAX_THRDS_REACHED = 164
const ERROR_LOCK_FAILED = 167
const ERROR_BUSY = 170
const ERROR_CANCEL_VIOLATION = 173
const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174
const ERROR_INVALID_SEGMENT_NUMBER = 180
const ERROR_INVALID_ORDINAL = 182
const ERROR_ALREADY_EXISTS = 183
const ERROR_INVALID_FLAG_NUMBER = 186
const ERROR_SEM_NOT_FOUND = 187
const ERROR_INVALID_STARTING_CODESEG = 188
const ERROR_INVALID_STACKSEG = 189
const ERROR_INVALID_MODULETYPE = 190
const ERROR_INVALID_EXE_SIGNATURE = 191
const ERROR_EXE_MARKED_INVALID = 192
const ERROR_BAD_EXE_FORMAT = 193
const ERROR_ITERATED_DATA_EXCEEDS_64k = 194
const ERROR_INVALID_MINALLOCSIZE = 195
const ERROR_DYNLINK_FROM_INVALID_RING = 196
const ERROR_IOPL_NOT_ENABLED = 197
const ERROR_INVALID_SEGDPL = 198
const ERROR_AUTODATASEG_EXCEEDS_64k = 199
const ERROR_RING2SEG_MUST_BE_MOVABLE = 200
const ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201
const ERROR_INFLOOP_IN_RELOC_CHAIN = 202
const ERROR_ENVVAR_NOT_FOUND = 203
const ERROR_NO_SIGNAL_SENT = 205
const ERROR_FILENAME_EXCED_RANGE = 206
const ERROR_RING2_STACK_IN_USE = 207
const ERROR_META_EXPANSION_TOO_LONG = 208
const ERROR_INVALID_SIGNAL_NUMBER = 209
const ERROR_THREAD_1_INACTIVE = 210
const ERROR_LOCKED = 212
const ERROR_TOO_MANY_MODULES = 214
const ERROR_NESTING_NOT_ALLOWED = 215
const ERROR_EXE_MACHINE_TYPE_MISMATCH = 216
const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = 217
const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = 218
const ERROR_FILE_CHECKED_OUT = 220
const ERROR_CHECKOUT_REQUIRED = 221
const ERROR_BAD_FILE_TYPE = 222
const ERROR_FILE_TOO_LARGE = 223
const ERROR_FORMS_AUTH_REQUIRED = 224
const ERROR_PIPE_LOCAL = 229
const ERROR_BAD_PIPE = 230
const ERROR_PIPE_BUSY = 231
const ERROR_NO_DATA = 232
const ERROR_PIPE_NOT_CONNECTED = 233
const ERROR_MORE_DATA = 234
const ERROR_VC_DISCONNECTED = 240
const ERROR_INVALID_EA_NAME = 254
const ERROR_EA_LIST_INCONSISTENT = 255
const WAIT_TIMEOUT = 258
const ERROR_NO_MORE_ITEMS = 259
const ERROR_CANNOT_COPY = 266
const ERROR_DIRECTORY = 267
const ERROR_EAS_DIDNT_FIT = 275
const ERROR_EA_FILE_CORRUPT = 276
const ERROR_EA_TABLE_FULL = 277
const ERROR_INVALID_EA_HANDLE = 278
const ERROR_EAS_NOT_SUPPORTED = 282
const ERROR_NOT_OWNER = 288
const ERROR_TOO_MANY_POSTS = 298
const ERROR_PARTIAL_COPY = 299
const ERROR_OPLOCK_NOT_GRANTED = 300
const ERROR_INVALID_OPLOCK_PROTOCOL = 301
const ERROR_DISK_TOO_FRAGMENTED = 302
const ERROR_DELETE_PENDING = 303
const ERROR_MR_MID_NOT_FOUND = 317
const ERROR_SCOPE_NOT_FOUND = 318
const ERROR_INVALID_ADDRESS = 487
const ERROR_ARITHMETIC_OVERFLOW = 534
const ERROR_PIPE_CONNECTED = 535
const ERROR_PIPE_LISTENING = 536
const ERROR_WAKE_SYSTEM = 730
const ERROR_WAIT_1 = 731
const ERROR_WAIT_2 = 732
const ERROR_WAIT_3 = 733
const ERROR_WAIT_63 = 734
const ERROR_ABANDONED_WAIT_0 = 735
const ERROR_ABANDONED_WAIT_63 = 736
const ERROR_USER_APC = 737
const ERROR_KERNEL_APC = 738
const ERROR_ALERTED = 739
const ERROR_EA_ACCESS_DENIED = 994
const ERROR_OPERATION_ABORTED = 995
const ERROR_IO_INCOMPLETE = 996
const ERROR_IO_PENDING = 997
const ERROR_NOACCESS = 998
const ERROR_SWAPERROR = 999
const ERROR_STACK_OVERFLOW = 1001
const ERROR_INVALID_MESSAGE = 1002
const ERROR_CAN_NOT_COMPLETE = 1003
const ERROR_INVALID_FLAGS = 1004
const ERROR_UNRECOGNIZED_VOLUME = 1005
const ERROR_FILE_INVALID = 1006
const ERROR_FULLSCREEN_MODE = 1007
const ERROR_NO_TOKEN = 1008
const ERROR_BADDB = 1009
const ERROR_BADKEY = 1010
const ERROR_CANTOPEN = 1011
const ERROR_CANTREAD = 1012
const ERROR_CANTWRITE = 1013
const ERROR_REGISTRY_RECOVERED = 1014
const ERROR_REGISTRY_CORRUPT = 1015
const ERROR_REGISTRY_IO_FAILED = 1016
const ERROR_NOT_REGISTRY_FILE = 1017
const ERROR_KEY_DELETED = 1018
const ERROR_NO_LOG_SPACE = 1019
const ERROR_KEY_HAS_CHILDREN = 1020
const ERROR_CHILD_MUST_BE_VOLATILE = 1021
const ERROR_NOTIFY_ENUM_DIR = 1022
const ERROR_DEPENDENT_SERVICES_RUNNING = 1051
const ERROR_INVALID_SERVICE_CONTROL = 1052
const ERROR_SERVICE_REQUEST_TIMEOUT = 1053
const ERROR_SERVICE_NO_THREAD = 1054
const ERROR_SERVICE_DATABASE_LOCKED = 1055
const ERROR_SERVICE_ALREADY_RUNNING = 1056
const ERROR_INVALID_SERVICE_ACCOUNT = 1057
const ERROR_SERVICE_DISABLED = 1058
const ERROR_CIRCULAR_DEPENDENCY = 1059
const ERROR_SERVICE_DOES_NOT_EXIST = 1060
const ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061
const ERROR_SERVICE_NOT_ACTIVE = 1062
const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063
const ERROR_EXCEPTION_IN_SERVICE = 1064
const ERROR_DATABASE_DOES_NOT_EXIST = 1065
const ERROR_SERVICE_SPECIFIC_ERROR = 1066
const ERROR_PROCESS_ABORTED = 1067
const ERROR_SERVICE_DEPENDENCY_FAIL = 1068
const ERROR_SERVICE_LOGON_FAILED = 1069
const ERROR_SERVICE_START_HANG = 1070
const ERROR_INVALID_SERVICE_LOCK = 1071
const ERROR_SERVICE_MARKED_FOR_DELETE = 1072
const ERROR_SERVICE_EXISTS = 1073
const ERROR_ALREADY_RUNNING_LKG = 1074
const ERROR_SERVICE_DEPENDENCY_DELETED = 1075
const ERROR_BOOT_ALREADY_ACCEPTED = 1076
const ERROR_SERVICE_NEVER_STARTED = 1077
const ERROR_DUPLICATE_SERVICE_NAME = 1078
const ERROR_DIFFERENT_SERVICE_ACCOUNT = 1079
const ERROR_CANNOT_DETECT_DRIVER_FAILURE = 1080
const ERROR_CANNOT_DETECT_PROCESS_ABORT = 1081
const ERROR_NO_RECOVERY_PROGRAM = 1082
const ERROR_SERVICE_NOT_IN_EXE = 1083
const ERROR_NOT_SAFEBOOT_SERVICE = 1084
const ERROR_END_OF_MEDIA = 1100
const ERROR_FILEMARK_DETECTED = 1101
const ERROR_BEGINNING_OF_MEDIA = 1102
const ERROR_SETMARK_DETECTED = 1103
const ERROR_NO_DATA_DETECTED = 1104
const ERROR_PARTITION_FAILURE = 1105
const ERROR_INVALID_BLOCK_LENGTH = 1106
const ERROR_DEVICE_NOT_PARTITIONED = 1107
const ERROR_UNABLE_TO_LOCK_MEDIA = 1108
const ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109
const ERROR_MEDIA_CHANGED = 1110
const ERROR_BUS_RESET = 1111
const ERROR_NO_MEDIA_IN_DRIVE = 1112
const ERROR_NO_UNICODE_TRANSLATION = 1113
const ERROR_DLL_INIT_FAILED = 1114
const ERROR_SHUTDOWN_IN_PROGRESS = 1115
const ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116
const ERROR_IO_DEVICE = 1117
const ERROR_SERIAL_NO_DEVICE = 1118
const ERROR_IRQ_BUSY = 1119
const ERROR_MORE_WRITES = 1120
const ERROR_COUNTER_TIMEOUT = 1121
const ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122
const ERROR_FLOPPY_WRONG_CYLINDER = 1123
const ERROR_FLOPPY_UNKNOWN_ERROR = 1124
const ERROR_FLOPPY_BAD_REGISTERS = 1125
const ERROR_DISK_RECALIBRATE_FAILED = 1126
const ERROR_DISK_OPERATION_FAILED = 1127
const ERROR_DISK_RESET_FAILED = 1128
const ERROR_EOM_OVERFLOW = 1129
const ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130
const ERROR_POSSIBLE_DEADLOCK = 1131
const ERROR_MAPPED_ALIGNMENT = 1132
const ERROR_SET_POWER_STATE_VETOED = 1140
const ERROR_SET_POWER_STATE_FAILED = 1141
const ERROR_TOO_MANY_LINKS = 1142
const ERROR_OLD_WIN_VERSION = 1150
const ERROR_APP_WRONG_OS = 1151
const ERROR_SINGLE_INSTANCE_APP = 1152
const ERROR_RMODE_APP = 1153
const ERROR_INVALID_DLL = 1154
const ERROR_NO_ASSOCIATION = 1155
const ERROR_DDE_FAIL = 1156
const ERROR_DLL_NOT_FOUND = 1157
const ERROR_NO_MORE_USER_HANDLES = 1158
const ERROR_MESSAGE_SYNC_ONLY = 1159
const ERROR_SOURCE_ELEMENT_EMPTY = 1160
const ERROR_DESTINATION_ELEMENT_FULL = 1161
const ERROR_ILLEGAL_ELEMENT_ADDRESS = 1162
const ERROR_MAGAZINE_NOT_PRESENT = 1163
const ERROR_DEVICE_REINITIALIZATION_NEEDED = 1164
const ERROR_DEVICE_REQUIRES_CLEANING = 1165
const ERROR_DEVICE_DOOR_OPEN = 1166
const ERROR_DEVICE_NOT_CONNECTED = 1167
const ERROR_NOT_FOUND = 1168
const ERROR_NO_MATCH = 1169
const ERROR_SET_NOT_FOUND = 1170
const ERROR_POINT_NOT_FOUND = 1171
const ERROR_NO_TRACKING_SERVICE = 1172
const ERROR_NO_VOLUME_ID = 1173
const ERROR_UNABLE_TO_REMOVE_REPLACED = 1175
const ERROR_UNABLE_TO_MOVE_REPLACEMENT = 1176
const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 1177
const ERROR_JOURNAL_DELETE_IN_PROGRESS = 1178
const ERROR_JOURNAL_NOT_ACTIVE = 1179
const ERROR_POTENTIAL_FILE_FOUND = 1180
const ERROR_JOURNAL_ENTRY_DELETED = 1181
const ERROR_BAD_DEVICE = 1200
const ERROR_CONNECTION_UNAVAIL = 1201
const ERROR_DEVICE_ALREADY_REMEMBERED = 1202
const ERROR_NO_NET_OR_BAD_PATH = 1203
const ERROR_BAD_PROVIDER = 1204
const ERROR_CANNOT_OPEN_PROFILE = 1205
const ERROR_BAD_PROFILE = 1206
const ERROR_NOT_CONTAINER = 1207
const ERROR_EXTENDED_ERROR = 1208
const ERROR_INVALID_GROUPNAME = 1209
const ERROR_INVALID_COMPUTERNAME = 1210
const ERROR_INVALID_EVENTNAME = 1211
const ERROR_INVALID_DOMAINNAME = 1212
const ERROR_INVALID_SERVICENAME = 1213
const ERROR_INVALID_NETNAME = 1214
const ERROR_INVALID_SHARENAME = 1215
const ERROR_INVALID_PASSWORDNAME = 1216
const ERROR_INVALID_MESSAGENAME = 1217
const ERROR_INVALID_MESSAGEDEST = 1218
const ERROR_SESSION_CREDENTIAL_CONFLICT = 1219
const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220
const ERROR_DUP_DOMAINNAME = 1221
const ERROR_NO_NETWORK = 1222
const ERROR_CANCELLED = 1223
const ERROR_USER_MAPPED_FILE = 1224
const ERROR_CONNECTION_REFUSED = 1225
const ERROR_GRACEFUL_DISCONNECT = 1226
const ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227
const ERROR_ADDRESS_NOT_ASSOCIATED = 1228
const ERROR_CONNECTION_INVALID = 1229
const ERROR_CONNECTION_ACTIVE = 1230
const ERROR_NETWORK_UNREACHABLE = 1231
const ERROR_HOST_UNREACHABLE = 1232
const ERROR_PROTOCOL_UNREACHABLE = 1233
const ERROR_PORT_UNREACHABLE = 1234
const ERROR_REQUEST_ABORTED = 1235
const ERROR_CONNECTION_ABORTED = 1236
const ERROR_RETRY = 1237
const ERROR_CONNECTION_COUNT_LIMIT = 1238
const ERROR_LOGIN_TIME_RESTRICTION = 1239
const ERROR_LOGIN_WKSTA_RESTRICTION = 1240
const ERROR_INCORRECT_ADDRESS = 1241
const ERROR_ALREADY_REGISTERED = 1242
const ERROR_SERVICE_NOT_FOUND = 1243
const ERROR_NOT_AUTHENTICATED = 1244
const ERROR_NOT_LOGGED_ON = 1245
const ERROR_CONTINUE = 1246
const ERROR_ALREADY_INITIALIZED = 1247
const ERROR_NO_MORE_DEVICES = 1248
const ERROR_NO_SUCH_SITE = 1249
const ERROR_DOMAIN_CONTROLLER_EXISTS = 1250
const ERROR_ONLY_IF_CONNECTED = 1251
const ERROR_OVERRIDE_NOCHANGES = 1252
const ERROR_BAD_USER_PROFILE = 1253
const ERROR_NOT_SUPPORTED_ON_SBS = 1254
const ERROR_SERVER_SHUTDOWN_IN_PROGRESS = 1255
const ERROR_HOST_DOWN = 1256
const ERROR_NON_ACCOUNT_SID = 1257
const ERROR_NON_DOMAIN_SID = 1258
const ERROR_APPHELP_BLOCK = 1259
const ERROR_ACCESS_DISABLED_BY_POLICY = 1260
const ERROR_REG_NAT_CONSUMPTION = 1261
const ERROR_CSCSHARE_OFFLINE = 1262
const ERROR_PKINIT_FAILURE = 1263
const ERROR_SMARTCARD_SUBSYSTEM_FAILURE = 1264
const ERROR_DOWNGRADE_DETECTED = 1265
const ERROR_MACHINE_LOCKED = 1271
const ERROR_CALLBACK_SUPPLIED_INVALID_DATA = 1273
const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = 1274
const ERROR_DRIVER_BLOCKED = 1275
const ERROR_INVALID_IMPORT_OF_NON_DLL = 1276
const ERROR_ACCESS_DISABLED_WEBBLADE = 1277
const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = 1278
const ERROR_RECOVERY_FAILURE = 1279
const ERROR_ALREADY_FIBER = 1280
const ERROR_ALREADY_THREAD = 1281
const ERROR_STACK_BUFFER_OVERRUN = 1282
const ERROR_PARAMETER_QUOTA_EXCEEDED = 1283
const ERROR_DEBUGGER_INACTIVE = 1284
const ERROR_DELAY_LOAD_FAILED = 1285
const ERROR_VDM_DISALLOWED = 1286
const ERROR_UNIDENTIFIED_ERROR = 1287
const ERROR_NOT_ALL_ASSIGNED = 1300
const ERROR_SOME_NOT_MAPPED = 1301
const ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302
const ERROR_LOCAL_USER_SESSION_KEY = 1303
const ERROR_NULL_LM_PASSWORD = 1304
const ERROR_UNKNOWN_REVISION = 1305
const ERROR_REVISION_MISMATCH = 1306
const ERROR_INVALID_OWNER = 1307
const ERROR_INVALID_PRIMARY_GROUP = 1308
const ERROR_NO_IMPERSONATION_TOKEN = 1309
const ERROR_CANT_DISABLE_MANDATORY = 1310
const ERROR_NO_LOGON_SERVERS = 1311
const ERROR_NO_SUCH_LOGON_SESSION = 1312
const ERROR_NO_SUCH_PRIVILEGE = 1313
const ERROR_PRIVILEGE_NOT_HELD = 1314
const ERROR_INVALID_ACCOUNT_NAME = 1315
const ERROR_USER_EXISTS = 1316
const ERROR_NO_SUCH_USER = 1317
const ERROR_GROUP_EXISTS = 1318
const ERROR_NO_SUCH_GROUP = 1319
const ERROR_MEMBER_IN_GROUP = 1320
const ERROR_MEMBER_NOT_IN_GROUP = 1321
const ERROR_LAST_ADMIN = 1322
const ERROR_WRONG_PASSWORD = 1323
const ERROR_ILL_FORMED_PASSWORD = 1324
const ERROR_PASSWORD_RESTRICTION = 1325
const ERROR_LOGON_FAILURE = 1326
const ERROR_ACCOUNT_RESTRICTION = 1327
const ERROR_INVALID_LOGON_HOURS = 1328
const ERROR_INVALID_WORKSTATION = 1329
const ERROR_PASSWORD_EXPIRED = 1330
const ERROR_ACCOUNT_DISABLED = 1331
const ERROR_NONE_MAPPED = 1332
const ERROR_TOO_MANY_LUIDS_REQUESTED = 1333
const ERROR_LUIDS_EXHAUSTED = 1334
const ERROR_INVALID_SUB_AUTHORITY = 1335
const ERROR_INVALID_ACL = 1336
const ERROR_INVALID_SID = 1337
const ERROR_INVALID_SECURITY_DESCR = 1338
const ERROR_BAD_INHERITANCE_ACL = 1340
const ERROR_SERVER_DISABLED = 1341
const ERROR_SERVER_NOT_DISABLED = 1342
const ERROR_INVALID_ID_AUTHORITY = 1343
const ERROR_ALLOTTED_SPACE_EXCEEDED = 1344
const ERROR_INVALID_GROUP_ATTRIBUTES = 1345
const ERROR_BAD_IMPERSONATION_LEVEL = 1346
const ERROR_CANT_OPEN_ANONYMOUS = 1347
const ERROR_BAD_VALIDATION_CLASS = 1348
const ERROR_BAD_TOKEN_TYPE = 1349
const ERROR_NO_SECURITY_ON_OBJECT = 1350
const ERROR_CANT_ACCESS_DOMAIN_INFO = 1351
const ERROR_INVALID_SERVER_STATE = 1352
const ERROR_INVALID_DOMAIN_STATE = 1353
const ERROR_INVALID_DOMAIN_ROLE = 1354
const ERROR_NO_SUCH_DOMAIN = 1355
const ERROR_DOMAIN_EXISTS = 1356
const ERROR_DOMAIN_LIMIT_EXCEEDED = 1357
const ERROR_INTERNAL_DB_CORRUPTION = 1358
const ERROR_INTERNAL_ERROR = 1359
const ERROR_GENERIC_NOT_MAPPED = 1360
const ERROR_BAD_DESCRIPTOR_FORMAT = 1361
const ERROR_NOT_LOGON_PROCESS = 1362
const ERROR_LOGON_SESSION_EXISTS = 1363
const ERROR_NO_SUCH_PACKAGE = 1364
const ERROR_BAD_LOGON_SESSION_STATE = 1365
const ERROR_LOGON_SESSION_COLLISION = 1366
const ERROR_INVALID_LOGON_TYPE = 1367
const ERROR_CANNOT_IMPERSONATE = 1368
const ERROR_RXACT_INVALID_STATE = 1369
const ERROR_RXACT_COMMIT_FAILURE = 1370
const ERROR_SPECIAL_ACCOUNT = 1371
const ERROR_SPECIAL_GROUP = 1372
const ERROR_SPECIAL_USER = 1373
const ERROR_MEMBERS_PRIMARY_GROUP = 1374
const ERROR_TOKEN_ALREADY_IN_USE = 1375
const ERROR_NO_SUCH_ALIAS = 1376
const ERROR_MEMBER_NOT_IN_ALIAS = 1377
const ERROR_MEMBER_IN_ALIAS = 1378
const ERROR_ALIAS_EXISTS = 1379
const ERROR_LOGON_NOT_GRANTED = 1380
const ERROR_TOO_MANY_SECRETS = 1381
const ERROR_SECRET_TOO_LONG = 1382
const ERROR_INTERNAL_DB_ERROR = 1383
const ERROR_TOO_MANY_CONTEXT_IDS = 1384
const ERROR_LOGON_TYPE_NOT_GRANTED = 1385
const ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386
const ERROR_NO_SUCH_MEMBER = 1387
const ERROR_INVALID_MEMBER = 1388
const ERROR_TOO_MANY_SIDS = 1389
const ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390
const ERROR_NO_INHERITANCE = 1391
const ERROR_FILE_CORRUPT = 1392
const ERROR_DISK_CORRUPT = 1393
const ERROR_NO_USER_SESSION_KEY = 1394
const ERROR_LICENSE_QUOTA_EXCEEDED = 1395
const ERROR_WRONG_TARGET_NAME = 1396
const ERROR_MUTUAL_AUTH_FAILED = 1397
const ERROR_TIME_SKEW = 1398
const ERROR_CURRENT_DOMAIN_NOT_ALLOWED = 1399
const ERROR_INVALID_WINDOW_HANDLE = 1400
const ERROR_INVALID_MENU_HANDLE = 1401
const ERROR_INVALID_CURSOR_HANDLE = 1402
const ERROR_INVALID_ACCEL_HANDLE = 1403
const ERROR_INVALID_HOOK_HANDLE = 1404
const ERROR_INVALID_DWP_HANDLE = 1405
const ERROR_TLW_WITH_WSCHILD = 1406
const ERROR_CANNOT_FIND_WND_CLASS = 1407
const ERROR_WINDOW_OF_OTHER_THREAD = 1408
const ERROR_HOTKEY_ALREADY_REGISTERED = 1409
const ERROR_CLASS_ALREADY_EXISTS = 1410
const ERROR_CLASS_DOES_NOT_EXIST = 1411
const ERROR_CLASS_HAS_WINDOWS = 1412
const ERROR_INVALID_INDEX = 1413
const ERROR_INVALID_ICON_HANDLE = 1414
const ERROR_PRIVATE_DIALOG_INDEX = 1415
const ERROR_LISTBOX_ID_NOT_FOUND = 1416
const ERROR_NO_WILDCARD_CHARACTERS = 1417
const ERROR_CLIPBOARD_NOT_OPEN = 1418
const ERROR_HOTKEY_NOT_REGISTERED = 1419
const ERROR_WINDOW_NOT_DIALOG = 1420
const ERROR_CONTROL_ID_NOT_FOUND = 1421
const ERROR_INVALID_COMBOBOX_MESSAGE = 1422
const ERROR_WINDOW_NOT_COMBOBOX = 1423
const ERROR_INVALID_EDIT_HEIGHT = 1424
const ERROR_DC_NOT_FOUND = 1425
const ERROR_INVALID_HOOK_FILTER = 1426
const ERROR_INVALID_FILTER_PROC = 1427
const ERROR_HOOK_NEEDS_HMOD = 1428
const ERROR_GLOBAL_ONLY_HOOK = 1429
const ERROR_JOURNAL_HOOK_SET = 1430
const ERROR_HOOK_NOT_INSTALLED = 1431
const ERROR_INVALID_LB_MESSAGE = 1432
const ERROR_SETCOUNT_ON_BAD_LB = 1433
const ERROR_LB_WITHOUT_TABSTOPS = 1434
const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435
const ERROR_CHILD_WINDOW_MENU = 1436
const ERROR_NO_SYSTEM_MENU = 1437
const ERROR_INVALID_MSGBOX_STYLE = 1438
const ERROR_INVALID_SPI_VALUE = 1439
const ERROR_SCREEN_ALREADY_LOCKED = 1440
const ERROR_HWNDS_HAVE_DIFF_PARENT = 1441
const ERROR_NOT_CHILD_WINDOW = 1442
const ERROR_INVALID_GW_COMMAND = 1443
const ERROR_INVALID_THREAD_ID = 1444
const ERROR_NON_MDICHILD_WINDOW = 1445
const ERROR_POPUP_ALREADY_ACTIVE = 1446
const ERROR_NO_SCROLLBARS = 1447
const ERROR_INVALID_SCROLLBAR_RANGE = 1448
const ERROR_INVALID_SHOWWIN_COMMAND = 1449
const ERROR_NO_SYSTEM_RESOURCES = 1450
const ERROR_NONPAGED_SYSTEM_RESOURCES = 1451
const ERROR_PAGED_SYSTEM_RESOURCES = 1452
const ERROR_WORKING_SET_QUOTA = 1453
const ERROR_PAGEFILE_QUOTA = 1454
const ERROR_COMMITMENT_LIMIT = 1455
const ERROR_MENU_ITEM_NOT_FOUND = 1456
const ERROR_INVALID_KEYBOARD_HANDLE = 1457
const ERROR_HOOK_TYPE_NOT_ALLOWED = 1458
const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 1459
const ERROR_TIMEOUT = 1460
const ERROR_INVALID_MONITOR_HANDLE = 1461
const ERROR_INCORRECT_SIZE = 1462
const ERROR_EVENTLOG_FILE_CORRUPT = 1500
const ERROR_EVENTLOG_CANT_START = 1501
const ERROR_LOG_FILE_FULL = 1502
const ERROR_EVENTLOG_FILE_CHANGED = 1503
const ERROR_INSTALL_SERVICE_FAILURE = 1601
const ERROR_INSTALL_USEREXIT = 1602
const ERROR_INSTALL_FAILURE = 1603
const ERROR_INSTALL_SUSPEND = 1604
const ERROR_UNKNOWN_PRODUCT = 1605
const ERROR_UNKNOWN_FEATURE = 1606
const ERROR_UNKNOWN_COMPONENT = 1607
const ERROR_UNKNOWN_PROPERTY = 1608
const ERROR_INVALID_HANDLE_STATE = 1609
const ERROR_BAD_CONFIGURATION = 1610
const ERROR_INDEX_ABSENT = 1611
const ERROR_INSTALL_SOURCE_ABSENT = 1612
const ERROR_INSTALL_PACKAGE_VERSION = 1613
const ERROR_PRODUCT_UNINSTALLED = 1614
const ERROR_BAD_QUERY_SYNTAX = 1615
const ERROR_INVALID_FIELD = 1616
const ERROR_DEVICE_REMOVED = 1617
const ERROR_INSTALL_ALREADY_RUNNING = 1618
const ERROR_INSTALL_PACKAGE_OPEN_FAILED = 1619
const ERROR_INSTALL_PACKAGE_INVALID = 1620
const ERROR_INSTALL_UI_FAILURE = 1621
const ERROR_INSTALL_LOG_FAILURE = 1622
const ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 1623
const ERROR_INSTALL_TRANSFORM_FAILURE = 1624
const ERROR_INSTALL_PACKAGE_REJECTED = 1625
const ERROR_FUNCTION_NOT_CALLED = 1626
const ERROR_FUNCTION_FAILED = 1627
const ERROR_INVALID_TABLE = 1628
const ERROR_DATATYPE_MISMATCH = 1629
const ERROR_UNSUPPORTED_TYPE = 1630
const ERROR_CREATE_FAILED = 1631
const ERROR_INSTALL_TEMP_UNWRITABLE = 1632
const ERROR_INSTALL_PLATFORM_UNSUPPORTED = 1633
const ERROR_INSTALL_NOTUSED = 1634
const ERROR_PATCH_PACKAGE_OPEN_FAILED = 1635
const ERROR_PATCH_PACKAGE_INVALID = 1636
const ERROR_PATCH_PACKAGE_UNSUPPORTED = 1637
const ERROR_PRODUCT_VERSION = 1638
const ERROR_INVALID_COMMAND_LINE = 1639
const ERROR_INSTALL_REMOTE_DISALLOWED = 1640
const ERROR_SUCCESS_REBOOT_INITIATED = 1641
const ERROR_PATCH_TARGET_NOT_FOUND = 1642
const ERROR_PATCH_PACKAGE_REJECTED = 1643
const ERROR_INSTALL_TRANSFORM_REJECTED = 1644
const ERROR_INSTALL_REMOTE_PROHIBITED = 1645
const RPC_S_INVALID_STRING_BINDING = 1700
const RPC_S_WRONG_KIND_OF_BINDING = 1701
const RPC_S_INVALID_BINDING = 1702
const RPC_S_PROTSEQ_NOT_SUPPORTED = 1703
const RPC_S_INVALID_RPC_PROTSEQ = 1704
const RPC_S_INVALID_STRING_UUID = 1705
const RPC_S_INVALID_ENDPOINT_FORMAT = 1706
const RPC_S_INVALID_NET_ADDR = 1707
const RPC_S_NO_ENDPOINT_FOUND = 1708
const RPC_S_INVALID_TIMEOUT = 1709
const RPC_S_OBJECT_NOT_FOUND = 1710
const RPC_S_ALREADY_REGISTERED = 1711
const RPC_S_TYPE_ALREADY_REGISTERED = 1712
const RPC_S_ALREADY_LISTENING = 1713
const RPC_S_NO_PROTSEQS_REGISTERED = 1714
const RPC_S_NOT_LISTENING = 1715
const RPC_S_UNKNOWN_MGR_TYPE = 1716
const RPC_S_UNKNOWN_IF = 1717
const RPC_S_NO_BINDINGS = 1718
const RPC_S_NO_PROTSEQS = 1719
const RPC_S_CANT_CREATE_ENDPOINT = 1720
const RPC_S_OUT_OF_RESOURCES = 1721
const RPC_S_SERVER_UNAVAILABLE = 1722
const RPC_S_SERVER_TOO_BUSY = 1723
const RPC_S_INVALID_NETWORK_OPTIONS = 1724
const RPC_S_NO_CALL_ACTIVE = 1725
const RPC_S_CALL_FAILED = 1726
const RPC_S_CALL_FAILED_DNE = 1727
const RPC_S_PROTOCOL_ERROR = 1728
const RPC_S_UNSUPPORTED_TRANS_SYN = 1730
const RPC_S_UNSUPPORTED_TYPE = 1732
const RPC_S_INVALID_TAG = 1733
const RPC_S_INVALID_BOUND = 1734
const RPC_S_NO_ENTRY_NAME = 1735
const RPC_S_INVALID_NAME_SYNTAX = 1736
const RPC_S_UNSUPPORTED_NAME_SYNTAX = 1737
const RPC_S_UUID_NO_ADDRESS = 1739
const RPC_S_DUPLICATE_ENDPOINT = 1740
const RPC_S_UNKNOWN_AUTHN_TYPE = 1741
const RPC_S_MAX_CALLS_TOO_SMALL = 1742
const RPC_S_STRING_TOO_LONG = 1743
const RPC_S_PROTSEQ_NOT_FOUND = 1744
const RPC_S_PROCNUM_OUT_OF_RANGE = 1745
const RPC_S_BINDING_HAS_NO_AUTH = 1746
const RPC_S_UNKNOWN_AUTHN_SERVICE = 1747
const RPC_S_UNKNOWN_AUTHN_LEVEL = 1748
const RPC_S_INVALID_AUTH_IDENTITY = 1749
const RPC_S_UNKNOWN_AUTHZ_SERVICE = 1750
const EPT_S_INVALID_ENTRY = 1751
const EPT_S_CANT_PERFORM_OP = 1752
const EPT_S_NOT_REGISTERED = 1753
const RPC_S_NOTHING_TO_EXPORT = 1754
const RPC_S_INCOMPLETE_NAME = 1755
const RPC_S_INVALID_VERS_OPTION = 1756
const RPC_S_NO_MORE_MEMBERS = 1757
const RPC_S_NOT_ALL_OBJS_UNEXPORTED = 1758
const RPC_S_INTERFACE_NOT_FOUND = 1759
const RPC_S_ENTRY_ALREADY_EXISTS = 1760
const RPC_S_ENTRY_NOT_FOUND = 1761
const RPC_S_NAME_SERVICE_UNAVAILABLE = 1762
const RPC_S_INVALID_NAF_ID = 1763
const RPC_S_CANNOT_SUPPORT = 1764
const RPC_S_NO_CONTEXT_AVAILABLE = 1765
const RPC_S_INTERNAL_ERROR = 1766
const RPC_S_ZERO_DIVIDE = 1767
const RPC_S_ADDRESS_ERROR = 1768
const RPC_S_FP_DIV_ZERO = 1769
const RPC_S_FP_UNDERFLOW = 1770
const RPC_S_FP_OVERFLOW = 1771
const RPC_X_NO_MORE_ENTRIES = 1772
const RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 1773
const RPC_X_SS_CHAR_TRANS_SHORT_FILE = 1774
const RPC_X_SS_IN_NULL_CONTEXT = 1775
const RPC_X_SS_CONTEXT_DAMAGED = 1777
const RPC_X_SS_HANDLES_MISMATCH = 1778
const RPC_X_SS_CANNOT_GET_CALL_HANDLE = 1779
const RPC_X_NULL_REF_POINTER = 1780
const RPC_X_ENUM_VALUE_OUT_OF_RANGE = 1781
const RPC_X_BYTE_COUNT_TOO_SMALL = 1782
const RPC_X_BAD_STUB_DATA = 1783
const ERROR_INVALID_USER_BUFFER = 1784
const ERROR_UNRECOGNIZED_MEDIA = 1785
const ERROR_NO_TRUST_LSA_SECRET = 1786
const ERROR_NO_TRUST_SAM_ACCOUNT = 1787
const ERROR_TRUSTED_DOMAIN_FAILURE = 1788
const ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789
const ERROR_TRUST_FAILURE = 1790
const RPC_S_CALL_IN_PROGRESS = 1791
const ERROR_NETLOGON_NOT_STARTED = 1792
const ERROR_ACCOUNT_EXPIRED = 1793
const ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794
const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795
const ERROR_UNKNOWN_PORT = 1796
const ERROR_UNKNOWN_PRINTER_DRIVER = 1797
const ERROR_UNKNOWN_PRINTPROCESSOR = 1798
const ERROR_INVALID_SEPARATOR_FILE = 1799
const ERROR_INVALID_PRIORITY = 1800
const ERROR_INVALID_PRINTER_NAME = 1801
const ERROR_PRINTER_ALREADY_EXISTS = 1802
const ERROR_INVALID_PRINTER_COMMAND = 1803
const ERROR_INVALID_DATATYPE = 1804
const ERROR_INVALID_ENVIRONMENT = 1805
const RPC_S_NO_MORE_BINDINGS = 1806
const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807
const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808
const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809
const ERROR_DOMAIN_TRUST_INCONSISTENT = 1810
const ERROR_SERVER_HAS_OPEN_HANDLES = 1811
const ERROR_RESOURCE_DATA_NOT_FOUND = 1812
const ERROR_RESOURCE_TYPE_NOT_FOUND = 1813
const ERROR_RESOURCE_NAME_NOT_FOUND = 1814
const ERROR_RESOURCE_LANG_NOT_FOUND = 1815
const ERROR_NOT_ENOUGH_QUOTA = 1816
const RPC_S_NO_INTERFACES = 1817
const RPC_S_CALL_CANCELLED = 1818
const RPC_S_BINDING_INCOMPLETE = 1819
const RPC_S_COMM_FAILURE = 1820
const RPC_S_UNSUPPORTED_AUTHN_LEVEL = 1821
const RPC_S_NO_PRINC_NAME = 1822
const RPC_S_NOT_RPC_ERROR = 1823
const RPC_S_UUID_LOCAL_ONLY = 1824
const RPC_S_SEC_PKG_ERROR = 1825
const RPC_S_NOT_CANCELLED = 1826
const RPC_X_INVALID_ES_ACTION = 1827
const RPC_X_WRONG_ES_VERSION = 1828
const RPC_X_WRONG_STUB_VERSION = 1829
const RPC_X_INVALID_PIPE_OBJECT = 1830
const RPC_X_WRONG_PIPE_ORDER = 1831
const RPC_X_WRONG_PIPE_VERSION = 1832
const RPC_S_GROUP_MEMBER_NOT_FOUND = 1898
const EPT_S_CANT_CREATE = 1899
const RPC_S_INVALID_OBJECT = 1900
const ERROR_INVALID_TIME = 1901
const ERROR_INVALID_FORM_NAME = 1902
const ERROR_INVALID_FORM_SIZE = 1903
const ERROR_ALREADY_WAITING = 1904
const ERROR_PRINTER_DELETED = 1905
const ERROR_INVALID_PRINTER_STATE = 1906
const ERROR_PASSWORD_MUST_CHANGE = 1907
const ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908
const ERROR_ACCOUNT_LOCKED_OUT = 1909
const OR_INVALID_OXID = 1910
const OR_INVALID_OID = 1911
const OR_INVALID_SET = 1912
const RPC_S_SEND_INCOMPLETE = 1913
const RPC_S_INVALID_ASYNC_HANDLE = 1914
const RPC_S_INVALID_ASYNC_CALL = 1915
const RPC_X_PIPE_CLOSED = 1916
const RPC_X_PIPE_DISCIPLINE_ERROR = 1917
const RPC_X_PIPE_EMPTY = 1918
const ERROR_NO_SITENAME = 1919
const ERROR_CANT_ACCESS_FILE = 1920
const ERROR_CANT_RESOLVE_FILENAME = 1921
const RPC_S_ENTRY_TYPE_MISMATCH = 1922
const RPC_S_NOT_ALL_OBJS_EXPORTED = 1923
const RPC_S_INTERFACE_NOT_EXPORTED = 1924
const RPC_S_PROFILE_NOT_ADDED = 1925
const RPC_S_PRF_ELT_NOT_ADDED = 1926
const RPC_S_PRF_ELT_NOT_REMOVED = 1927
const RPC_S_GRP_ELT_NOT_ADDED = 1928
const RPC_S_GRP_ELT_NOT_REMOVED = 1929
const ERROR_KM_DRIVER_BLOCKED = 1930
const ERROR_CONTEXT_EXPIRED = 1931
const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = 1932
const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = 1933
const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = 1934
const ERROR_AUTHENTICATION_FIREWALL_FAILED = 1935
const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = 1936
const ERROR_INVALID_PIXEL_FORMAT = 2000
const ERROR_BAD_DRIVER = 2001
const ERROR_INVALID_WINDOW_STYLE = 2002
const ERROR_METAFILE_NOT_SUPPORTED = 2003
const ERROR_TRANSFORM_NOT_SUPPORTED = 2004
const ERROR_CLIPPING_NOT_SUPPORTED = 2005
const ERROR_INVALID_CMM = 2010
const ERROR_INVALID_PROFILE = 2011
const ERROR_TAG_NOT_FOUND = 2012
const ERROR_TAG_NOT_PRESENT = 2013
const ERROR_DUPLICATE_TAG = 2014
const ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 2015
const ERROR_PROFILE_NOT_FOUND = 2016
const ERROR_INVALID_COLORSPACE = 2017
const ERROR_ICM_NOT_ENABLED = 2018
const ERROR_DELETING_ICM_XFORM = 2019
const ERROR_INVALID_TRANSFORM = 2020
const ERROR_COLORSPACE_MISMATCH = 2021
const ERROR_INVALID_COLORINDEX = 2022
const ERROR_CONNECTED_OTHER_PASSWORD = 2108
const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109
const ERROR_BAD_USERNAME = 2202
const ERROR_NOT_CONNECTED = 2250
const ERROR_OPEN_FILES = 2401
const ERROR_ACTIVE_CONNECTIONS = 2402
const ERROR_DEVICE_IN_USE = 2404
const ERROR_UNKNOWN_PRINT_MONITOR = 3000
const ERROR_PRINTER_DRIVER_IN_USE = 3001
const ERROR_SPOOL_FILE_NOT_FOUND = 3002
const ERROR_SPL_NO_STARTDOC = 3003
const ERROR_SPL_NO_ADDJOB = 3004
const ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005
const ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006
const ERROR_INVALID_PRINT_MONITOR = 3007
const ERROR_PRINT_MONITOR_IN_USE = 3008
const ERROR_PRINTER_HAS_JOBS_QUEUED = 3009
const ERROR_SUCCESS_REBOOT_REQUIRED = 3010
const ERROR_SUCCESS_RESTART_REQUIRED = 3011
const ERROR_PRINTER_NOT_FOUND = 3012
const ERROR_PRINTER_DRIVER_WARNED = 3013
const ERROR_PRINTER_DRIVER_BLOCKED = 3014
const ERROR_WINS_INTERNAL = 4000
const ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001
const ERROR_STATIC_INIT = 4002
const ERROR_INC_BACKUP = 4003
const ERROR_FULL_BACKUP = 4004
const ERROR_REC_NON_EXISTENT = 4005
const ERROR_RPL_NOT_ALLOWED = 4006
const ERROR_DHCP_ADDRESS_CONFLICT = 4100
const ERROR_WMI_GUID_NOT_FOUND = 4200
const ERROR_WMI_INSTANCE_NOT_FOUND = 4201
const ERROR_WMI_ITEMID_NOT_FOUND = 4202
const ERROR_WMI_TRY_AGAIN = 4203
const ERROR_WMI_DP_NOT_FOUND = 4204
const ERROR_WMI_UNRESOLVED_INSTANCE_REF = 4205
const ERROR_WMI_ALREADY_ENABLED = 4206
const ERROR_WMI_GUID_DISCONNECTED = 4207
const ERROR_WMI_SERVER_UNAVAILABLE = 4208
const ERROR_WMI_DP_FAILED = 4209
const ERROR_WMI_INVALID_MOF = 4210
const ERROR_WMI_INVALID_REGINFO = 4211
const ERROR_WMI_ALREADY_DISABLED = 4212
const ERROR_WMI_READ_ONLY = 4213
const ERROR_WMI_SET_FAILURE = 4214
const ERROR_INVALID_MEDIA = 4300
const ERROR_INVALID_LIBRARY = 4301
const ERROR_INVALID_MEDIA_POOL = 4302
const ERROR_DRIVE_MEDIA_MISMATCH = 4303
const ERROR_MEDIA_OFFLINE = 4304
const ERROR_LIBRARY_OFFLINE = 4305
const ERROR_EMPTY = 4306
const ERROR_NOT_EMPTY = 4307
const ERROR_MEDIA_UNAVAILABLE = 4308
const ERROR_RESOURCE_DISABLED = 4309
const ERROR_INVALID_CLEANER = 4310
const ERROR_UNABLE_TO_CLEAN = 4311
const ERROR_OBJECT_NOT_FOUND = 4312
const ERROR_DATABASE_FAILURE = 4313
const ERROR_DATABASE_FULL = 4314
const ERROR_MEDIA_INCOMPATIBLE = 4315
const ERROR_RESOURCE_NOT_PRESENT = 4316
const ERROR_INVALID_OPERATION = 4317
const ERROR_MEDIA_NOT_AVAILABLE = 4318
const ERROR_DEVICE_NOT_AVAILABLE = 4319
const ERROR_REQUEST_REFUSED = 4320
const ERROR_INVALID_DRIVE_OBJECT = 4321
const ERROR_LIBRARY_FULL = 4322
const ERROR_MEDIUM_NOT_ACCESSIBLE = 4323
const ERROR_UNABLE_TO_LOAD_MEDIUM = 4324
const ERROR_UNABLE_TO_INVENTORY_DRIVE = 4325
const ERROR_UNABLE_TO_INVENTORY_SLOT = 4326
const ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 4327
const ERROR_TRANSPORT_FULL = 4328
const ERROR_CONTROLLING_IEPORT = 4329
const ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 4330
const ERROR_CLEANER_SLOT_SET = 4331
const ERROR_CLEANER_SLOT_NOT_SET = 4332
const ERROR_CLEANER_CARTRIDGE_SPENT = 4333
const ERROR_UNEXPECTED_OMID = 4334
const ERROR_CANT_DELETE_LAST_ITEM = 4335
const ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 4336
const ERROR_VOLUME_CONTAINS_SYS_FILES = 4337
const ERROR_INDIGENOUS_TYPE = 4338
const ERROR_NO_SUPPORTING_DRIVES = 4339
const ERROR_CLEANER_CARTRIDGE_INSTALLED = 4340
const ERROR_IEPORT_FULL = 4341
const ERROR_FILE_OFFLINE = 4350
const ERROR_REMOTE_STORAGE_NOT_ACTIVE = 4351
const ERROR_REMOTE_STORAGE_MEDIA_ERROR = 4352
const ERROR_NOT_A_REPARSE_POINT = 4390
const ERROR_REPARSE_ATTRIBUTE_CONFLICT = 4391
const ERROR_INVALID_REPARSE_DATA = 4392
const ERROR_REPARSE_TAG_INVALID = 4393
const ERROR_REPARSE_TAG_MISMATCH = 4394
const ERROR_VOLUME_NOT_SIS_ENABLED = 4500
const ERROR_DEPENDENT_RESOURCE_EXISTS = 5001
const ERROR_DEPENDENCY_NOT_FOUND = 5002
const ERROR_DEPENDENCY_ALREADY_EXISTS = 5003
const ERROR_RESOURCE_NOT_ONLINE = 5004
const ERROR_HOST_NODE_NOT_AVAILABLE = 5005
const ERROR_RESOURCE_NOT_AVAILABLE = 5006
const ERROR_RESOURCE_NOT_FOUND = 5007
const ERROR_SHUTDOWN_CLUSTER = 5008
const ERROR_CANT_EVICT_ACTIVE_NODE = 5009
const ERROR_OBJECT_ALREADY_EXISTS = 5010
const ERROR_OBJECT_IN_LIST = 5011
const ERROR_GROUP_NOT_AVAILABLE = 5012
const ERROR_GROUP_NOT_FOUND = 5013
const ERROR_GROUP_NOT_ONLINE = 5014
const ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 5015
const ERROR_HOST_NODE_NOT_GROUP_OWNER = 5016
const ERROR_RESMON_CREATE_FAILED = 5017
const ERROR_RESMON_ONLINE_FAILED = 5018
const ERROR_RESOURCE_ONLINE = 5019
const ERROR_QUORUM_RESOURCE = 5020
const ERROR_NOT_QUORUM_CAPABLE = 5021
const ERROR_CLUSTER_SHUTTING_DOWN = 5022
const ERROR_INVALID_STATE = 5023
const ERROR_RESOURCE_PROPERTIES_STORED = 5024
const ERROR_NOT_QUORUM_CLASS = 5025
const ERROR_CORE_RESOURCE = 5026
const ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 5027
const ERROR_QUORUMLOG_OPEN_FAILED = 5028
const ERROR_CLUSTERLOG_CORRUPT = 5029
const ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 5030
const ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 5031
const ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 5032
const ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 5033
const ERROR_QUORUM_OWNER_ALIVE = 5034
const ERROR_NETWORK_NOT_AVAILABLE = 5035
const ERROR_NODE_NOT_AVAILABLE = 5036
const ERROR_ALL_NODES_NOT_AVAILABLE = 5037
const ERROR_RESOURCE_FAILED = 5038
const ERROR_CLUSTER_INVALID_NODE = 5039
const ERROR_CLUSTER_NODE_EXISTS = 5040
const ERROR_CLUSTER_JOIN_IN_PROGRESS = 5041
const ERROR_CLUSTER_NODE_NOT_FOUND = 5042
const ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 5043
const ERROR_CLUSTER_NETWORK_EXISTS = 5044
const ERROR_CLUSTER_NETWORK_NOT_FOUND = 5045
const ERROR_CLUSTER_NETINTERFACE_EXISTS = 5046
const ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 5047
const ERROR_CLUSTER_INVALID_REQUEST = 5048
const ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 5049
const ERROR_CLUSTER_NODE_DOWN = 5050
const ERROR_CLUSTER_NODE_UNREACHABLE = 5051
const ERROR_CLUSTER_NODE_NOT_MEMBER = 5052
const ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 5053
const ERROR_CLUSTER_INVALID_NETWORK = 5054
const ERROR_CLUSTER_NODE_UP = 5056
const ERROR_CLUSTER_IPADDR_IN_USE = 5057
const ERROR_CLUSTER_NODE_NOT_PAUSED = 5058
const ERROR_CLUSTER_NO_SECURITY_CONTEXT = 5059
const ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 5060
const ERROR_CLUSTER_NODE_ALREADY_UP = 5061
const ERROR_CLUSTER_NODE_ALREADY_DOWN = 5062
const ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 5063
const ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 5064
const ERROR_CLUSTER_NODE_ALREADY_MEMBER = 5065
const ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 5066
const ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 5067
const ERROR_INVALID_OPERATION_ON_QUORUM = 5068
const ERROR_DEPENDENCY_NOT_ALLOWED = 5069
const ERROR_CLUSTER_NODE_PAUSED = 5070
const ERROR_NODE_CANT_HOST_RESOURCE = 5071
const ERROR_CLUSTER_NODE_NOT_READY = 5072
const ERROR_CLUSTER_NODE_SHUTTING_DOWN = 5073
const ERROR_CLUSTER_JOIN_ABORTED = 5074
const ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 5075
const ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 5076
const ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 5077
const ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 5078
const ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 5079
const ERROR_CLUSTER_RESNAME_NOT_FOUND = 5080
const ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 5081
const ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 5082
const ERROR_CLUSTER_DATABASE_SEQMISMATCH = 5083
const ERROR_RESMON_INVALID_STATE = 5084
const ERROR_CLUSTER_GUM_NOT_LOCKER = 5085
const ERROR_QUORUM_DISK_NOT_FOUND = 5086
const ERROR_DATABASE_BACKUP_CORRUPT = 5087
const ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 5088
const ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 5089
const ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = 5890
const ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = 5891
const ERROR_CLUSTER_MEMBERSHIP_HALT = 5892
const ERROR_CLUSTER_INSTANCE_ID_MISMATCH = 5893
const ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = 5894
const ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = 5895
const ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = 5896
const ERROR_CLUSTER_PARAMETER_MISMATCH = 5897
const ERROR_NODE_CANNOT_BE_CLUSTERED = 5898
const ERROR_CLUSTER_WRONG_OS_VERSION = 5899
const ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = 5900
const ERROR_CLUSCFG_ALREADY_COMMITTED = 5901
const ERROR_CLUSCFG_ROLLBACK_FAILED = 5902
const ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = 5903
const ERROR_CLUSTER_OLD_VERSION = 5904
const ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = 5905
const ERROR_ENCRYPTION_FAILED = 6000
const ERROR_DECRYPTION_FAILED = 6001
const ERROR_FILE_ENCRYPTED = 6002
const ERROR_NO_RECOVERY_POLICY = 6003
const ERROR_NO_EFS = 6004
const ERROR_WRONG_EFS = 6005
const ERROR_NO_USER_KEYS = 6006
const ERROR_FILE_NOT_ENCRYPTED = 6007
const ERROR_NOT_EXPORT_FORMAT = 6008
const ERROR_FILE_READ_ONLY = 6009
const ERROR_DIR_EFS_DISALLOWED = 6010
const ERROR_EFS_SERVER_NOT_TRUSTED = 6011
const ERROR_BAD_RECOVERY_POLICY = 6012
const ERROR_EFS_ALG_BLOB_TOO_BIG = 6013
const ERROR_VOLUME_NOT_SUPPORT_EFS = 6014
const ERROR_EFS_DISABLED = 6015
const ERROR_EFS_VERSION_NOT_SUPPORT = 6016
const ERROR_NO_BROWSER_SERVERS_FOUND = 6118
const SCHED_E_SERVICE_NOT_LOCALSYSTEM = 6200
const ERROR_CTX_WINSTATION_NAME_INVALID = 7001
const ERROR_CTX_INVALID_PD = 7002
const ERROR_CTX_PD_NOT_FOUND = 7003
const ERROR_CTX_WD_NOT_FOUND = 7004
const ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 7005
const ERROR_CTX_SERVICE_NAME_COLLISION = 7006
const ERROR_CTX_CLOSE_PENDING = 7007
const ERROR_CTX_NO_OUTBUF = 7008
const ERROR_CTX_MODEM_INF_NOT_FOUND = 7009
const ERROR_CTX_INVALID_MODEMNAME = 7010
const ERROR_CTX_MODEM_RESPONSE_ERROR = 7011
const ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 7012
const ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 7013
const ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 7014
const ERROR_CTX_MODEM_RESPONSE_BUSY = 7015
const ERROR_CTX_MODEM_RESPONSE_VOICE = 7016
const ERROR_CTX_TD_ERROR = 7017
const ERROR_CTX_WINSTATION_NOT_FOUND = 7022
const ERROR_CTX_WINSTATION_ALREADY_EXISTS = 7023
const ERROR_CTX_WINSTATION_BUSY = 7024
const ERROR_CTX_BAD_VIDEO_MODE = 7025
const ERROR_CTX_GRAPHICS_INVALID = 7035
const ERROR_CTX_LOGON_DISABLED = 7037
const ERROR_CTX_NOT_CONSOLE = 7038
const ERROR_CTX_CLIENT_QUERY_TIMEOUT = 7040
const ERROR_CTX_CONSOLE_DISCONNECT = 7041
const ERROR_CTX_CONSOLE_CONNECT = 7042
const ERROR_CTX_SHADOW_DENIED = 7044
const ERROR_CTX_WINSTATION_ACCESS_DENIED = 7045
const ERROR_CTX_INVALID_WD = 7049
const ERROR_CTX_SHADOW_INVALID = 7050
const ERROR_CTX_SHADOW_DISABLED = 7051
const ERROR_CTX_CLIENT_LICENSE_IN_USE = 7052
const ERROR_CTX_CLIENT_LICENSE_NOT_SET = 7053
const ERROR_CTX_LICENSE_NOT_AVAILABLE = 7054
const ERROR_CTX_LICENSE_CLIENT_INVALID = 7055
const ERROR_CTX_LICENSE_EXPIRED = 7056
const ERROR_CTX_SHADOW_NOT_RUNNING = 7057
const ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = 7058
const ERROR_ACTIVATION_COUNT_EXCEEDED = 7059
const FRS_ERR_INVALID_API_SEQUENCE = 8001
const FRS_ERR_STARTING_SERVICE = 8002
const FRS_ERR_STOPPING_SERVICE = 8003
const FRS_ERR_INTERNAL_API = 8004
const FRS_ERR_INTERNAL = 8005
const FRS_ERR_SERVICE_COMM = 8006
const FRS_ERR_INSUFFICIENT_PRIV = 8007
const FRS_ERR_AUTHENTICATION = 8008
const FRS_ERR_PARENT_INSUFFICIENT_PRIV = 8009
const FRS_ERR_PARENT_AUTHENTICATION = 8010
const FRS_ERR_CHILD_TO_PARENT_COMM = 8011
const FRS_ERR_PARENT_TO_CHILD_COMM = 8012
const FRS_ERR_SYSVOL_POPULATE = 8013
const FRS_ERR_SYSVOL_POPULATE_TIMEOUT = 8014
const FRS_ERR_SYSVOL_IS_BUSY = 8015
const FRS_ERR_SYSVOL_DEMOTE = 8016
const FRS_ERR_INVALID_SERVICE_PARAMETER = 8017
const DS_S_SUCCESS = NO_ERROR
const ERROR_DS_NOT_INSTALLED = 8200
const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 8201
const ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 8202
const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 8203
const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 8204
const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 8205
const ERROR_DS_BUSY = 8206
const ERROR_DS_UNAVAILABLE = 8207
const ERROR_DS_NO_RIDS_ALLOCATED = 8208
const ERROR_DS_NO_MORE_RIDS = 8209
const ERROR_DS_INCORRECT_ROLE_OWNER = 8210
const ERROR_DS_RIDMGR_INIT_ERROR = 8211
const ERROR_DS_OBJ_CLASS_VIOLATION = 8212
const ERROR_DS_CANT_ON_NON_LEAF = 8213
const ERROR_DS_CANT_ON_RDN = 8214
const ERROR_DS_CANT_MOD_OBJ_CLASS = 8215
const ERROR_DS_CROSS_DOM_MOVE_ERROR = 8216
const ERROR_DS_GC_NOT_AVAILABLE = 8217
const ERROR_SHARED_POLICY = 8218
const ERROR_POLICY_OBJECT_NOT_FOUND = 8219
const ERROR_POLICY_ONLY_IN_DS = 8220
const ERROR_PROMOTION_ACTIVE = 8221
const ERROR_NO_PROMOTION_ACTIVE = 8222
const ERROR_DS_OPERATIONS_ERROR = 8224
const ERROR_DS_PROTOCOL_ERROR = 8225
const ERROR_DS_TIMELIMIT_EXCEEDED = 8226
const ERROR_DS_SIZELIMIT_EXCEEDED = 8227
const ERROR_DS_ADMIN_LIMIT_EXCEEDED = 8228
const ERROR_DS_COMPARE_FALSE = 8229
const ERROR_DS_COMPARE_TRUE = 8230
const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 8231
const ERROR_DS_STRONG_AUTH_REQUIRED = 8232
const ERROR_DS_INAPPROPRIATE_AUTH = 8233
const ERROR_DS_AUTH_UNKNOWN = 8234
const ERROR_DS_REFERRAL = 8235
const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 8236
const ERROR_DS_CONFIDENTIALITY_REQUIRED = 8237
const ERROR_DS_INAPPROPRIATE_MATCHING = 8238
const ERROR_DS_CONSTRAINT_VIOLATION = 8239
const ERROR_DS_NO_SUCH_OBJECT = 8240
const ERROR_DS_ALIAS_PROBLEM = 8241
const ERROR_DS_INVALID_DN_SYNTAX = 8242
const ERROR_DS_IS_LEAF = 8243
const ERROR_DS_ALIAS_DEREF_PROBLEM = 8244
const ERROR_DS_UNWILLING_TO_PERFORM = 8245
const ERROR_DS_LOOP_DETECT = 8246
const ERROR_DS_NAMING_VIOLATION = 8247
const ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 8248
const ERROR_DS_AFFECTS_MULTIPLE_DSAS = 8249
const ERROR_DS_SERVER_DOWN = 8250
const ERROR_DS_LOCAL_ERROR = 8251
const ERROR_DS_ENCODING_ERROR = 8252
const ERROR_DS_DECODING_ERROR = 8253
const ERROR_DS_FILTER_UNKNOWN = 8254
const ERROR_DS_PARAM_ERROR = 8255
const ERROR_DS_NOT_SUPPORTED = 8256
const ERROR_DS_NO_RESULTS_RETURNED = 8257
const ERROR_DS_CONTROL_NOT_FOUND = 8258
const ERROR_DS_CLIENT_LOOP = 8259
const ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 8260
const ERROR_DS_SORT_CONTROL_MISSING = 8261
const ERROR_DS_OFFSET_RANGE_ERROR = 8262
const ERROR_DS_ROOT_MUST_BE_NC = 8301
const ERROR_DS_ADD_REPLICA_INHIBITED = 8302
const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 8303
const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 8304
const ERROR_DS_OBJ_STRING_NAME_EXISTS = 8305
const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 8306
const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 8307
const ERROR_DS_NO_REQUESTED_ATTS_FOUND = 8308
const ERROR_DS_USER_BUFFER_TO_SMALL = 8309
const ERROR_DS_ATT_IS_NOT_ON_OBJ = 8310
const ERROR_DS_ILLEGAL_MOD_OPERATION = 8311
const ERROR_DS_OBJ_TOO_LARGE = 8312
const ERROR_DS_BAD_INSTANCE_TYPE = 8313
const ERROR_DS_MASTERDSA_REQUIRED = 8314
const ERROR_DS_OBJECT_CLASS_REQUIRED = 8315
const ERROR_DS_MISSING_REQUIRED_ATT = 8316
const ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 8317
const ERROR_DS_ATT_ALREADY_EXISTS = 8318
const ERROR_DS_CANT_ADD_ATT_VALUES = 8320
const ERROR_DS_SINGLE_VALUE_CONSTRAINT = 8321
const ERROR_DS_RANGE_CONSTRAINT = 8322
const ERROR_DS_ATT_VAL_ALREADY_EXISTS = 8323
const ERROR_DS_CANT_REM_MISSING_ATT = 8324
const ERROR_DS_CANT_REM_MISSING_ATT_VAL = 8325
const ERROR_DS_ROOT_CANT_BE_SUBREF = 8326
const ERROR_DS_NO_CHAINING = 8327
const ERROR_DS_NO_CHAINED_EVAL = 8328
const ERROR_DS_NO_PARENT_OBJECT = 8329
const ERROR_DS_PARENT_IS_AN_ALIAS = 8330
const ERROR_DS_CANT_MIX_MASTER_AND_REPS = 8331
const ERROR_DS_CHILDREN_EXIST = 8332
const ERROR_DS_OBJ_NOT_FOUND = 8333
const ERROR_DS_ALIASED_OBJ_MISSING = 8334
const ERROR_DS_BAD_NAME_SYNTAX = 8335
const ERROR_DS_ALIAS_POINTS_TO_ALIAS = 8336
const ERROR_DS_CANT_DEREF_ALIAS = 8337
const ERROR_DS_OUT_OF_SCOPE = 8338
const ERROR_DS_OBJECT_BEING_REMOVED = 8339
const ERROR_DS_CANT_DELETE_DSA_OBJ = 8340
const ERROR_DS_GENERIC_ERROR = 8341
const ERROR_DS_DSA_MUST_BE_INT_MASTER = 8342
const ERROR_DS_CLASS_NOT_DSA = 8343
const ERROR_DS_INSUFF_ACCESS_RIGHTS = 8344
const ERROR_DS_ILLEGAL_SUPERIOR = 8345
const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 8346
const ERROR_DS_NAME_TOO_MANY_PARTS = 8347
const ERROR_DS_NAME_TOO_LONG = 8348
const ERROR_DS_NAME_VALUE_TOO_LONG = 8349
const ERROR_DS_NAME_UNPARSEABLE = 8350
const ERROR_DS_NAME_TYPE_UNKNOWN = 8351
const ERROR_DS_NOT_AN_OBJECT = 8352
const ERROR_DS_SEC_DESC_TOO_SHORT = 8353
const ERROR_DS_SEC_DESC_INVALID = 8354
const ERROR_DS_NO_DELETED_NAME = 8355
const ERROR_DS_SUBREF_MUST_HAVE_PARENT = 8356
const ERROR_DS_NCNAME_MUST_BE_NC = 8357
const ERROR_DS_CANT_ADD_SYSTEM_ONLY = 8358
const ERROR_DS_CLASS_MUST_BE_CONCRETE = 8359
const ERROR_DS_INVALID_DMD = 8360
const ERROR_DS_OBJ_GUID_EXISTS = 8361
const ERROR_DS_NOT_ON_BACKLINK = 8362
const ERROR_DS_NO_CROSSREF_FOR_NC = 8363
const ERROR_DS_SHUTTING_DOWN = 8364
const ERROR_DS_UNKNOWN_OPERATION = 8365
const ERROR_DS_INVALID_ROLE_OWNER = 8366
const ERROR_DS_COULDNT_CONTACT_FSMO = 8367
const ERROR_DS_CROSS_NC_DN_RENAME = 8368
const ERROR_DS_CANT_MOD_SYSTEM_ONLY = 8369
const ERROR_DS_REPLICATOR_ONLY = 8370
const ERROR_DS_OBJ_CLASS_NOT_DEFINED = 8371
const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 8372
const ERROR_DS_NAME_REFERENCE_INVALID = 8373
const ERROR_DS_CROSS_REF_EXISTS = 8374
const ERROR_DS_CANT_DEL_MASTER_CROSSREF = 8375
const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 8376
const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 8377
const ERROR_DS_DUP_RDN = 8378
const ERROR_DS_DUP_OID = 8379
const ERROR_DS_DUP_MAPI_ID = 8380
const ERROR_DS_DUP_SCHEMA_ID_GUID = 8381
const ERROR_DS_DUP_LDAP_DISPLAY_NAME = 8382
const ERROR_DS_SEMANTIC_ATT_TEST = 8383
const ERROR_DS_SYNTAX_MISMATCH = 8384
const ERROR_DS_EXISTS_IN_MUST_HAVE = 8385
const ERROR_DS_EXISTS_IN_MAY_HAVE = 8386
const ERROR_DS_NONEXISTENT_MAY_HAVE = 8387
const ERROR_DS_NONEXISTENT_MUST_HAVE = 8388
const ERROR_DS_AUX_CLS_TEST_FAIL = 8389
const ERROR_DS_NONEXISTENT_POSS_SUP = 8390
const ERROR_DS_SUB_CLS_TEST_FAIL = 8391
const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 8392
const ERROR_DS_EXISTS_IN_AUX_CLS = 8393
const ERROR_DS_EXISTS_IN_SUB_CLS = 8394
const ERROR_DS_EXISTS_IN_POSS_SUP = 8395
const ERROR_DS_RECALCSCHEMA_FAILED = 8396
const ERROR_DS_TREE_DELETE_NOT_FINISHED = 8397
const ERROR_DS_CANT_DELETE = 8398
const ERROR_DS_ATT_SCHEMA_REQ_ID = 8399
const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 8400
const ERROR_DS_CANT_CACHE_ATT = 8401
const ERROR_DS_CANT_CACHE_CLASS = 8402
const ERROR_DS_CANT_REMOVE_ATT_CACHE = 8403
const ERROR_DS_CANT_REMOVE_CLASS_CACHE = 8404
const ERROR_DS_CANT_RETRIEVE_DN = 8405
const ERROR_DS_MISSING_SUPREF = 8406
const ERROR_DS_CANT_RETRIEVE_INSTANCE = 8407
const ERROR_DS_CODE_INCONSISTENCY = 8408
const ERROR_DS_DATABASE_ERROR = 8409
const ERROR_DS_GOVERNSID_MISSING = 8410
const ERROR_DS_MISSING_EXPECTED_ATT = 8411
const ERROR_DS_NCNAME_MISSING_CR_REF = 8412
const ERROR_DS_SECURITY_CHECKING_ERROR = 8413
const ERROR_DS_SCHEMA_NOT_LOADED = 8414
const ERROR_DS_SCHEMA_ALLOC_FAILED = 8415
const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 8416
const ERROR_DS_GCVERIFY_ERROR = 8417
const ERROR_DS_DRA_SCHEMA_MISMATCH = 8418
const ERROR_DS_CANT_FIND_DSA_OBJ = 8419
const ERROR_DS_CANT_FIND_EXPECTED_NC = 8420
const ERROR_DS_CANT_FIND_NC_IN_CACHE = 8421
const ERROR_DS_CANT_RETRIEVE_CHILD = 8422
const ERROR_DS_SECURITY_ILLEGAL_MODIFY = 8423
const ERROR_DS_CANT_REPLACE_HIDDEN_REC = 8424
const ERROR_DS_BAD_HIERARCHY_FILE = 8425
const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 8426
const ERROR_DS_CONFIG_PARAM_MISSING = 8427
const ERROR_DS_COUNTING_AB_INDICES_FAILED = 8428
const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 8429
const ERROR_DS_INTERNAL_FAILURE = 8430
const ERROR_DS_UNKNOWN_ERROR = 8431
const ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 8432
const ERROR_DS_REFUSING_FSMO_ROLES = 8433
const ERROR_DS_MISSING_FSMO_SETTINGS = 8434
const ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 8435
const ERROR_DS_DRA_GENERIC = 8436
const ERROR_DS_DRA_INVALID_PARAMETER = 8437
const ERROR_DS_DRA_BUSY = 8438
const ERROR_DS_DRA_BAD_DN = 8439
const ERROR_DS_DRA_BAD_NC = 8440
const ERROR_DS_DRA_DN_EXISTS = 8441
const ERROR_DS_DRA_INTERNAL_ERROR = 8442
const ERROR_DS_DRA_INCONSISTENT_DIT = 8443
const ERROR_DS_DRA_CONNECTION_FAILED = 8444
const ERROR_DS_DRA_BAD_INSTANCE_TYPE = 8445
const ERROR_DS_DRA_OUT_OF_MEM = 8446
const ERROR_DS_DRA_MAIL_PROBLEM = 8447
const ERROR_DS_DRA_REF_ALREADY_EXISTS = 8448
const ERROR_DS_DRA_REF_NOT_FOUND = 8449
const ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 8450
const ERROR_DS_DRA_DB_ERROR = 8451
const ERROR_DS_DRA_NO_REPLICA = 8452
const ERROR_DS_DRA_ACCESS_DENIED = 8453
const ERROR_DS_DRA_NOT_SUPPORTED = 8454
const ERROR_DS_DRA_RPC_CANCELLED = 8455
const ERROR_DS_DRA_SOURCE_DISABLED = 8456
const ERROR_DS_DRA_SINK_DISABLED = 8457
const ERROR_DS_DRA_NAME_COLLISION = 8458
const ERROR_DS_DRA_SOURCE_REINSTALLED = 8459
const ERROR_DS_DRA_MISSING_PARENT = 8460
const ERROR_DS_DRA_PREEMPTED = 8461
const ERROR_DS_DRA_ABANDON_SYNC = 8462
const ERROR_DS_DRA_SHUTDOWN = 8463
const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 8464
const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 8465
const ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 8466
const ERROR_DS_INSTALL_SCHEMA_MISMATCH = 8467
const ERROR_DS_DUP_LINK_ID = 8468
const ERROR_DS_NAME_ERROR_RESOLVING = 8469
const ERROR_DS_NAME_ERROR_NOT_FOUND = 8470
const ERROR_DS_NAME_ERROR_NOT_UNIQUE = 8471
const ERROR_DS_NAME_ERROR_NO_MAPPING = 8472
const ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 8473
const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 8474
const ERROR_DS_CONSTRUCTED_ATT_MOD = 8475
const ERROR_DS_WRONG_OM_OBJ_CLASS = 8476
const ERROR_DS_DRA_REPL_PENDING = 8477
const ERROR_DS_DS_REQUIRED = 8478
const ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 8479
const ERROR_DS_NON_BASE_SEARCH = 8480
const ERROR_DS_CANT_RETRIEVE_ATTS = 8481
const ERROR_DS_BACKLINK_WITHOUT_LINK = 8482
const ERROR_DS_EPOCH_MISMATCH = 8483
const ERROR_DS_SRC_NAME_MISMATCH = 8484
const ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 8485
const ERROR_DS_DST_NC_MISMATCH = 8486
const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 8487
const ERROR_DS_SRC_GUID_MISMATCH = 8488
const ERROR_DS_CANT_MOVE_DELETED_OBJECT = 8489
const ERROR_DS_PDC_OPERATION_IN_PROGRESS = 8490
const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 8491
const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 8492
const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 8493
const ERROR_DS_NC_MUST_HAVE_NC_PARENT = 8494
const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 8495
const ERROR_DS_DST_DOMAIN_NOT_NATIVE = 8496
const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 8497
const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 8498
const ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 8499
const ERROR_DS_INVALID_SEARCH_FLAG = 8500
const ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 8501
const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 8502
const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 8503
const ERROR_DS_SAM_INIT_FAILURE = 8504
const ERROR_DS_SENSITIVE_GROUP_VIOLATION = 8505
const ERROR_DS_CANT_MOD_PRIMARYGROUPID = 8506
const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 8507
const ERROR_DS_NONSAFE_SCHEMA_CHANGE = 8508
const ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 8509
const ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 8510
const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 8511
const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 8512
const ERROR_DS_INVALID_GROUP_TYPE = 8513
const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 8514
const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 8515
const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 8516
const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 8517
const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 8518
const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 8519
const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 8520
const ERROR_DS_HAVE_PRIMARY_MEMBERS = 8521
const ERROR_DS_STRING_SD_CONVERSION_FAILED = 8522
const ERROR_DS_NAMING_MASTER_GC = 8523
const ERROR_DS_DNS_LOOKUP_FAILURE = 8524
const ERROR_DS_COULDNT_UPDATE_SPNS = 8525
const ERROR_DS_CANT_RETRIEVE_SD = 8526
const ERROR_DS_KEY_NOT_UNIQUE = 8527
const ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 8528
const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 8529
const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 8530
const ERROR_DS_CANT_START = 8531
const ERROR_DS_INIT_FAILURE = 8532
const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 8533
const ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 8534
const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 8535
const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 8536
const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 8537
const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 8538
const ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 8539
const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 8540
const ERROR_SAM_INIT_FAILURE = 8541
const ERROR_DS_DRA_SCHEMA_INFO_SHIP = 8542
const ERROR_DS_DRA_SCHEMA_CONFLICT = 8543
const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 8544
const ERROR_DS_DRA_OBJ_NC_MISMATCH = 8545
const ERROR_DS_NC_STILL_HAS_DSAS = 8546
const ERROR_DS_GC_REQUIRED = 8547
const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 8548
const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 8549
const ERROR_DS_CANT_ADD_TO_GC = 8550
const ERROR_DS_NO_CHECKPOINT_WITH_PDC = 8551
const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 8552
const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 8553
const ERROR_DS_INVALID_NAME_FOR_SPN = 8554
const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 8555
const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 8556
const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 8557
const ERROR_DS_MUST_BE_RUN_ON_DST_DC = 8558
const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 8559
const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 8560
const ERROR_DS_INIT_FAILURE_CONSOLE = 8561
const ERROR_DS_SAM_INIT_FAILURE_CONSOLE = 8562
const ERROR_DS_FOREST_VERSION_TOO_HIGH = 8563
const ERROR_DS_DOMAIN_VERSION_TOO_HIGH = 8564
const ERROR_DS_FOREST_VERSION_TOO_LOW = 8565
const ERROR_DS_DOMAIN_VERSION_TOO_LOW = 8566
const ERROR_DS_INCOMPATIBLE_VERSION = 8567
const ERROR_DS_LOW_DSA_VERSION = 8568
const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = 8569
const ERROR_DS_NOT_SUPPORTED_SORT_ORDER = 8570
const ERROR_DS_NAME_NOT_UNIQUE = 8571
const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = 8572
const ERROR_DS_OUT_OF_VERSION_STORE = 8573
const ERROR_DS_INCOMPATIBLE_CONTROLS_USED = 8574
const ERROR_DS_NO_REF_DOMAIN = 8575
const ERROR_DS_RESERVED_LINK_ID = 8576
const ERROR_DS_LINK_ID_NOT_AVAILABLE = 8577
const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 8578
const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = 8579
const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = 8580
const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = 8581
const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = 8582
const ERROR_DS_NAME_ERROR_TRUST_REFERRAL = 8583
const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = 8584
const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = 8585
const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = 8586
const ERROR_DS_THREAD_LIMIT_EXCEEDED = 8587
const ERROR_DS_NOT_CLOSEST = 8588
const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = 8589
const ERROR_DS_SINGLE_USER_MODE_FAILED = 8590
const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = 8591
const ERROR_DS_NTDSCRIPT_PROCESS_ERROR = 8592
const ERROR_DS_DIFFERENT_REPL_EPOCHS = 8593
const ERROR_DS_DRS_EXTENSIONS_CHANGED = 8594
const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = 8595
const ERROR_DS_NO_MSDS_INTID = 8596
const ERROR_DS_DUP_MSDS_INTID = 8597
const ERROR_DS_EXISTS_IN_RDNATTID = 8598
const ERROR_DS_AUTHORIZATION_FAILED = 8599
const ERROR_DS_INVALID_SCRIPT = 8600
const ERROR_DS_REMOTE_CROSSREF_OP_FAILED = 8601
const ERROR_DS_CROSS_REF_BUSY = 8602
const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = 8603
const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = 8604
const ERROR_DS_DUPLICATE_ID_FOUND = 8605
const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = 8606
const ERROR_DS_GROUP_CONVERSION_ERROR = 8607
const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = 8608
const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = 8609
const ERROR_DS_ROLE_NOT_VERIFIED = 8610
const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = 8611
const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = 8612
const ERROR_DS_EXISTING_AD_CHILD_NC = 8613
const ERROR_DS_REPL_LIFETIME_EXCEEDED = 8614
const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = 8615
const ERROR_DS_LDAP_SEND_QUEUE_FULL = 8616
const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = 8617
const DNS_ERROR_RESPONSE_CODES_BASE = 9000
const DNS_ERROR_RCODE_NO_ERROR = NO_ERROR
const DNS_ERROR_MASK = &h00002328
const DNS_ERROR_RCODE_FORMAT_ERROR = 9001
const DNS_ERROR_RCODE_SERVER_FAILURE = 9002
const DNS_ERROR_RCODE_NAME_ERROR = 9003
const DNS_ERROR_RCODE_NOT_IMPLEMENTED = 9004
const DNS_ERROR_RCODE_REFUSED = 9005
const DNS_ERROR_RCODE_YXDOMAIN = 9006
const DNS_ERROR_RCODE_YXRRSET = 9007
const DNS_ERROR_RCODE_NXRRSET = 9008
const DNS_ERROR_RCODE_NOTAUTH = 9009
const DNS_ERROR_RCODE_NOTZONE = 9010
const DNS_ERROR_RCODE_BADSIG = 9016
const DNS_ERROR_RCODE_BADKEY = 9017
const DNS_ERROR_RCODE_BADTIME = 9018
const DNS_ERROR_RCODE_LAST = DNS_ERROR_RCODE_BADTIME
const DNS_ERROR_PACKET_FMT_BASE = 9500
const DNS_INFO_NO_RECORDS = 9501
const DNS_ERROR_BAD_PACKET = 9502
const DNS_ERROR_NO_PACKET = 9503
const DNS_ERROR_RCODE = 9504
const DNS_ERROR_UNSECURE_PACKET = 9505
const DNS_STATUS_PACKET_UNSECURE = DNS_ERROR_UNSECURE_PACKET
const DNS_ERROR_NO_MEMORY = ERROR_OUTOFMEMORY
const DNS_ERROR_INVALID_NAME = ERROR_INVALID_NAME
const DNS_ERROR_INVALID_DATA = ERROR_INVALID_DATA
const DNS_ERROR_GENERAL_API_BASE = 9550
const DNS_ERROR_INVALID_TYPE = 9551
const DNS_ERROR_INVALID_IP_ADDRESS = 9552
const DNS_ERROR_INVALID_PROPERTY = 9553
const DNS_ERROR_TRY_AGAIN_LATER = 9554
const DNS_ERROR_NOT_UNIQUE = 9555
const DNS_ERROR_NON_RFC_NAME = 9556
const DNS_STATUS_FQDN = 9557
const DNS_STATUS_DOTTED_NAME = 9558
const DNS_STATUS_SINGLE_PART_NAME = 9559
const DNS_ERROR_INVALID_NAME_CHAR = 9560
const DNS_ERROR_NUMERIC_NAME = 9561
const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = 9562
const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = 9563
const DNS_ERROR_CANNOT_FIND_ROOT_HINTS = 9564
const DNS_ERROR_INCONSISTENT_ROOT_HINTS = 9565
const DNS_ERROR_ZONE_BASE = 9600
const DNS_ERROR_ZONE_DOES_NOT_EXIST = 9601
const DNS_ERROR_NO_ZONE_INFO = 9602
const DNS_ERROR_INVALID_ZONE_OPERATION = 9603
const DNS_ERROR_ZONE_CONFIGURATION_ERROR = 9604
const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 9605
const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 9606
const DNS_ERROR_ZONE_LOCKED = 9607
const DNS_ERROR_ZONE_CREATION_FAILED = 9608
const DNS_ERROR_ZONE_ALREADY_EXISTS = 9609
const DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 9610
const DNS_ERROR_INVALID_ZONE_TYPE = 9611
const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 9612
const DNS_ERROR_ZONE_NOT_SECONDARY = 9613
const DNS_ERROR_NEED_SECONDARY_ADDRESSES = 9614
const DNS_ERROR_WINS_INIT_FAILED = 9615
const DNS_ERROR_NEED_WINS_SERVERS = 9616
const DNS_ERROR_NBSTAT_INIT_FAILED = 9617
const DNS_ERROR_SOA_DELETE_INVALID = 9618
const DNS_ERROR_FORWARDER_ALREADY_EXISTS = 9619
const DNS_ERROR_ZONE_REQUIRES_MASTER_IP = 9620
const DNS_ERROR_ZONE_IS_SHUTDOWN = 9621
const DNS_ERROR_DATAFILE_BASE = 9650
const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 9651
const DNS_ERROR_INVALID_DATAFILE_NAME = 9652
const DNS_ERROR_DATAFILE_OPEN_FAILURE = 9653
const DNS_ERROR_FILE_WRITEBACK_FAILED = 9654
const DNS_ERROR_DATAFILE_PARSING = 9655
const DNS_ERROR_DATABASE_BASE = 9700
const DNS_ERROR_RECORD_DOES_NOT_EXIST = 9701
const DNS_ERROR_RECORD_FORMAT = 9702
const DNS_ERROR_NODE_CREATION_FAILED = 9703
const DNS_ERROR_UNKNOWN_RECORD_TYPE = 9704
const DNS_ERROR_RECORD_TIMED_OUT = 9705
const DNS_ERROR_NAME_NOT_IN_ZONE = 9706
const DNS_ERROR_CNAME_LOOP = 9707
const DNS_ERROR_NODE_IS_CNAME = 9708
const DNS_ERROR_CNAME_COLLISION = 9709
const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 9710
const DNS_ERROR_RECORD_ALREADY_EXISTS = 9711
const DNS_ERROR_SECONDARY_DATA = 9712
const DNS_ERROR_NO_CREATE_CACHE_DATA = 9713
const DNS_ERROR_NAME_DOES_NOT_EXIST = 9714
const DNS_WARNING_PTR_CREATE_FAILED = 9715
const DNS_WARNING_DOMAIN_UNDELETED = 9716
const DNS_ERROR_DS_UNAVAILABLE = 9717
const DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 9718
const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 9719
const DNS_ERROR_OPERATION_BASE = 9750
const DNS_INFO_AXFR_COMPLETE = 9751
const DNS_ERROR_AXFR = 9752
const DNS_INFO_ADDED_LOCAL_WINS = 9753
const DNS_ERROR_SECURE_BASE = 9800
const DNS_STATUS_CONTINUE_NEEDED = 9801
const DNS_ERROR_SETUP_BASE = 9850
const DNS_ERROR_NO_TCPIP = 9851
const DNS_ERROR_NO_DNS_SERVERS = 9852
const DNS_ERROR_DP_BASE = 9900
const DNS_ERROR_DP_DOES_NOT_EXIST = 9901
const DNS_ERROR_DP_ALREADY_EXISTS = 9902
const DNS_ERROR_DP_NOT_ENLISTED = 9903
const DNS_ERROR_DP_ALREADY_ENLISTED = 9904
const DNS_ERROR_DP_NOT_AVAILABLE = 9905
const DNS_ERROR_DP_FSMO_ERROR = 9906
const WSABASEERR = 10000
const WSAEINTR = WSABASEERR + 4
const WSAEBADF = WSABASEERR + 9
const WSAEACCES = WSABASEERR + 13
const WSAEFAULT = WSABASEERR + 14
const WSAEINVAL = WSABASEERR + 22
const WSAEMFILE = WSABASEERR + 24
const WSAEWOULDBLOCK = WSABASEERR + 35
const WSAEINPROGRESS = WSABASEERR + 36
const WSAEALREADY = WSABASEERR + 37
const WSAENOTSOCK = WSABASEERR + 38
const WSAEDESTADDRREQ = WSABASEERR + 39
const WSAEMSGSIZE = WSABASEERR + 40
const WSAEPROTOTYPE = WSABASEERR + 41
const WSAENOPROTOOPT = WSABASEERR + 42
const WSAEPROTONOSUPPORT = WSABASEERR + 43
const WSAESOCKTNOSUPPORT = WSABASEERR + 44
const WSAEOPNOTSUPP = WSABASEERR + 45
const WSAEPFNOSUPPORT = WSABASEERR + 46
const WSAEAFNOSUPPORT = WSABASEERR + 47
const WSAEADDRINUSE = WSABASEERR + 48
const WSAEADDRNOTAVAIL = WSABASEERR + 49
const WSAENETDOWN = WSABASEERR + 50
const WSAENETUNREACH = WSABASEERR + 51
const WSAENETRESET = WSABASEERR + 52
const WSAECONNABORTED = WSABASEERR + 53
const WSAECONNRESET = WSABASEERR + 54
const WSAENOBUFS = WSABASEERR + 55
const WSAEISCONN = WSABASEERR + 56
const WSAENOTCONN = WSABASEERR + 57
const WSAESHUTDOWN = WSABASEERR + 58
const WSAETOOMANYREFS = WSABASEERR + 59
const WSAETIMEDOUT = WSABASEERR + 60
const WSAECONNREFUSED = WSABASEERR + 61
const WSAELOOP = WSABASEERR + 62
const WSAENAMETOOLONG = WSABASEERR + 63
const WSAEHOSTDOWN = WSABASEERR + 64
const WSAEHOSTUNREACH = WSABASEERR + 65
const WSAENOTEMPTY = WSABASEERR + 66
const WSAEPROCLIM = WSABASEERR + 67
const WSAEUSERS = WSABASEERR + 68
const WSAEDQUOT = WSABASEERR + 69
const WSAESTALE = WSABASEERR + 70
const WSAEREMOTE = WSABASEERR + 71
const WSASYSNOTREADY = WSABASEERR + 91
const WSAVERNOTSUPPORTED = WSABASEERR + 92
const WSANOTINITIALISED = WSABASEERR + 93
const WSAEDISCON = WSABASEERR + 101
const WSAENOMORE = WSABASEERR + 102
const WSAECANCELLED = WSABASEERR + 103
const WSAEINVALIDPROCTABLE = WSABASEERR + 104
const WSAEINVALIDPROVIDER = WSABASEERR + 105
const WSAEPROVIDERFAILEDINIT = WSABASEERR + 106
const WSASYSCALLFAILURE = WSABASEERR + 107
const WSASERVICE_NOT_FOUND = WSABASEERR + 108
const WSATYPE_NOT_FOUND = WSABASEERR + 109
const WSA_E_NO_MORE = WSABASEERR + 110
const WSA_E_CANCELLED = WSABASEERR + 111
const WSAEREFUSED = WSABASEERR + 112
const WSAHOST_NOT_FOUND = WSABASEERR + 1001
const WSATRY_AGAIN = WSABASEERR + 1002
const WSANO_RECOVERY = WSABASEERR + 1003
const WSANO_DATA = WSABASEERR + 1004
const WSA_QOS_RECEIVERS = WSABASEERR + 1005
const WSA_QOS_SENDERS = WSABASEERR + 1006
const WSA_QOS_NO_SENDERS = WSABASEERR + 1007
const WSA_QOS_NO_RECEIVERS = WSABASEERR + 1008
const WSA_QOS_REQUEST_CONFIRMED = WSABASEERR + 1009
const WSA_QOS_ADMISSION_FAILURE = WSABASEERR + 1010
const WSA_QOS_POLICY_FAILURE = WSABASEERR + 1011
const WSA_QOS_BAD_STYLE = WSABASEERR + 1012
const WSA_QOS_BAD_OBJECT = WSABASEERR + 1013
const WSA_QOS_TRAFFIC_CTRL_ERROR = WSABASEERR + 1014
const WSA_QOS_GENERIC_ERROR = WSABASEERR + 1015
const WSA_QOS_ESERVICETYPE = WSABASEERR + 1016
const WSA_QOS_EFLOWSPEC = WSABASEERR + 1017
const WSA_QOS_EPROVSPECBUF = WSABASEERR + 1018
const WSA_QOS_EFILTERSTYLE = WSABASEERR + 1019
const WSA_QOS_EFILTERTYPE = WSABASEERR + 1020
const WSA_QOS_EFILTERCOUNT = WSABASEERR + 1021
const WSA_QOS_EOBJLENGTH = WSABASEERR + 1022
const WSA_QOS_EFLOWCOUNT = WSABASEERR + 1023
const WSA_QOS_EUNKNOWNPSOBJ = WSABASEERR + 1024
const WSA_QOS_EUNKOWNPSOBJ = WSA_QOS_EUNKNOWNPSOBJ
const WSA_QOS_EPOLICYOBJ = WSABASEERR + 1025
const WSA_QOS_EFLOWDESC = WSABASEERR + 1026
const WSA_QOS_EPSFLOWSPEC = WSABASEERR + 1027
const WSA_QOS_EPSFILTERSPEC = WSABASEERR + 1028
const WSA_QOS_ESDMODEOBJ = WSABASEERR + 1029
const WSA_QOS_ESHAPERATEOBJ = WSABASEERR + 1030
const WSA_QOS_RESERVED_PETYPE = WSABASEERR + 1031
const ERROR_SXS_SECTION_NOT_FOUND = 14000
const ERROR_SXS_CANT_GEN_ACTCTX = 14001
const ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = 14002
const ERROR_SXS_ASSEMBLY_NOT_FOUND = 14003
const ERROR_SXS_MANIFEST_FORMAT_ERROR = 14004
const ERROR_SXS_MANIFEST_PARSE_ERROR = 14005
const ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = 14006
const ERROR_SXS_KEY_NOT_FOUND = 14007
const ERROR_SXS_VERSION_CONFLICT = 14008
const ERROR_SXS_WRONG_SECTION_TYPE = 14009
const ERROR_SXS_THREAD_QUERIES_DISABLED = 14010
const ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = 14011
const ERROR_SXS_UNKNOWN_ENCODING_GROUP = 14012
const ERROR_SXS_UNKNOWN_ENCODING = 14013
const ERROR_SXS_INVALID_XML_NAMESPACE_URI = 14014
const ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14015
const ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14016
const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = 14017
const ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = 14018
const ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = 14019
const ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = 14020
const ERROR_SXS_DUPLICATE_DLL_NAME = 14021
const ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = 14022
const ERROR_SXS_DUPLICATE_CLSID = 14023
const ERROR_SXS_DUPLICATE_IID = 14024
const ERROR_SXS_DUPLICATE_TLBID = 14025
const ERROR_SXS_DUPLICATE_PROGID = 14026
const ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = 14027
const ERROR_SXS_FILE_HASH_MISMATCH = 14028
const ERROR_SXS_POLICY_PARSE_ERROR = 14029
const ERROR_SXS_XML_E_MISSINGQUOTE = 14030
const ERROR_SXS_XML_E_COMMENTSYNTAX = 14031
const ERROR_SXS_XML_E_BADSTARTNAMECHAR = 14032
const ERROR_SXS_XML_E_BADNAMECHAR = 14033
const ERROR_SXS_XML_E_BADCHARINSTRING = 14034
const ERROR_SXS_XML_E_XMLDECLSYNTAX = 14035
const ERROR_SXS_XML_E_BADCHARDATA = 14036
const ERROR_SXS_XML_E_MISSINGWHITESPACE = 14037
const ERROR_SXS_XML_E_EXPECTINGTAGEND = 14038
const ERROR_SXS_XML_E_MISSINGSEMICOLON = 14039
const ERROR_SXS_XML_E_UNBALANCEDPAREN = 14040
const ERROR_SXS_XML_E_INTERNALERROR = 14041
const ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = 14042
const ERROR_SXS_XML_E_INCOMPLETE_ENCODING = 14043
const ERROR_SXS_XML_E_MISSING_PAREN = 14044
const ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = 14045
const ERROR_SXS_XML_E_MULTIPLE_COLONS = 14046
const ERROR_SXS_XML_E_INVALID_DECIMAL = 14047
const ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = 14048
const ERROR_SXS_XML_E_INVALID_UNICODE = 14049
const ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = 14050
const ERROR_SXS_XML_E_UNEXPECTEDENDTAG = 14051
const ERROR_SXS_XML_E_UNCLOSEDTAG = 14052
const ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = 14053
const ERROR_SXS_XML_E_MULTIPLEROOTS = 14054
const ERROR_SXS_XML_E_INVALIDATROOTLEVEL = 14055
const ERROR_SXS_XML_E_BADXMLDECL = 14056
const ERROR_SXS_XML_E_MISSINGROOT = 14057
const ERROR_SXS_XML_E_UNEXPECTEDEOF = 14058
const ERROR_SXS_XML_E_BADPEREFINSUBSET = 14059
const ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = 14060
const ERROR_SXS_XML_E_UNCLOSEDENDTAG = 14061
const ERROR_SXS_XML_E_UNCLOSEDSTRING = 14062
const ERROR_SXS_XML_E_UNCLOSEDCOMMENT = 14063
const ERROR_SXS_XML_E_UNCLOSEDDECL = 14064
const ERROR_SXS_XML_E_UNCLOSEDCDATA = 14065
const ERROR_SXS_XML_E_RESERVEDNAMESPACE = 14066
const ERROR_SXS_XML_E_INVALIDENCODING = 14067
const ERROR_SXS_XML_E_INVALIDSWITCH = 14068
const ERROR_SXS_XML_E_BADXMLCASE = 14069
const ERROR_SXS_XML_E_INVALID_STANDALONE = 14070
const ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 14071
const ERROR_SXS_XML_E_INVALID_VERSION = 14072
const ERROR_SXS_XML_E_MISSINGEQUALS = 14073
const ERROR_SXS_PROTECTION_RECOVERY_FAILED = 14074
const ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 14075
const ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 14076
const ERROR_SXS_UNTRANSLATABLE_HRESULT = 14077
const ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 14078
const ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 14079
const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 14080
const ERROR_SXS_ASSEMBLY_MISSING = 14081
const ERROR_SXS_CORRUPT_ACTIVATION_STACK = 14082
const ERROR_SXS_CORRUPTION = 14083
const ERROR_SXS_EARLY_DEACTIVATION = 14084
const ERROR_SXS_INVALID_DEACTIVATION = 14085
const ERROR_SXS_MULTIPLE_DEACTIVATION = 14086
const ERROR_SXS_PROCESS_TERMINATION_REQUESTED = 14087
const ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = 14088
const ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = 14089
const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = 14090
const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = 14091
const ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = 14092
const ERROR_SXS_IDENTITY_PARSE_ERROR = 14093
const ERROR_MALFORMED_SUBSTITUTION_STRING = 14094
const ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = 14095
const ERROR_UNMAPPED_SUBSTITUTION_STRING = 14096
const ERROR_SXS_ASSEMBLY_NOT_LOCKED = 14097
const ERROR_SXS_COMPONENT_STORE_CORRUPT = 14098
const ERROR_ADVANCED_INSTALLER_FAILED = 14099
const ERROR_XML_ENCODING_MISMATCH = 14100
const ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = 14101
const ERROR_SXS_IDENTITIES_DIFFERENT = 14102
const ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = 14103
const ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = 14104
const ERROR_SXS_MANIFEST_TOO_BIG = 14105
const ERROR_SXS_SETTING_NOT_REGISTERED = 14106
const ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = 14107
const ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = 14108
const ERROR_GENERIC_COMMAND_FAILED = 14109
const ERROR_SXS_FILE_HASH_MISSING = 14110
const ERROR_IPSEC_QM_POLICY_EXISTS = 13000
const ERROR_IPSEC_QM_POLICY_NOT_FOUND = 13001
const ERROR_IPSEC_QM_POLICY_IN_USE = 13002
const ERROR_IPSEC_MM_POLICY_EXISTS = 13003
const ERROR_IPSEC_MM_POLICY_NOT_FOUND = 13004
const ERROR_IPSEC_MM_POLICY_IN_USE = 13005
const ERROR_IPSEC_MM_FILTER_EXISTS = 13006
const ERROR_IPSEC_MM_FILTER_NOT_FOUND = 13007
const ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = 13008
const ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = 13009
const ERROR_IPSEC_MM_AUTH_EXISTS = 13010
const ERROR_IPSEC_MM_AUTH_NOT_FOUND = 13011
const ERROR_IPSEC_MM_AUTH_IN_USE = 13012
const ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = 13013
const ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = 13014
const ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = 13015
const ERROR_IPSEC_TUNNEL_FILTER_EXISTS = 13016
const ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = 13017
const ERROR_IPSEC_MM_FILTER_PENDING_DELETION = 13018
const ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = 13019
const ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = 13020
const ERROR_IPSEC_MM_POLICY_PENDING_DELETION = 13021
const ERROR_IPSEC_MM_AUTH_PENDING_DELETION = 13022
const ERROR_IPSEC_QM_POLICY_PENDING_DELETION = 13023
const WARNING_IPSEC_MM_POLICY_PRUNED = 13024
const WARNING_IPSEC_QM_POLICY_PRUNED = 13025
const ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = 13800
const ERROR_IPSEC_IKE_AUTH_FAIL = 13801
const ERROR_IPSEC_IKE_ATTRIB_FAIL = 13802
const ERROR_IPSEC_IKE_NEGOTIATION_PENDING = 13803
const ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = 13804
const ERROR_IPSEC_IKE_TIMED_OUT = 13805
const ERROR_IPSEC_IKE_NO_CERT = 13806
const ERROR_IPSEC_IKE_SA_DELETED = 13807
const ERROR_IPSEC_IKE_SA_REAPED = 13808
const ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = 13809
const ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = 13810
const ERROR_IPSEC_IKE_QUEUE_DROP_MM = 13811
const ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = 13812
const ERROR_IPSEC_IKE_DROP_NO_RESPONSE = 13813
const ERROR_IPSEC_IKE_MM_DELAY_DROP = 13814
const ERROR_IPSEC_IKE_QM_DELAY_DROP = 13815
const ERROR_IPSEC_IKE_ERROR = 13816
const ERROR_IPSEC_IKE_CRL_FAILED = 13817
const ERROR_IPSEC_IKE_INVALID_KEY_USAGE = 13818
const ERROR_IPSEC_IKE_INVALID_CERT_TYPE = 13819
const ERROR_IPSEC_IKE_NO_PRIVATE_KEY = 13820
const ERROR_IPSEC_IKE_DH_FAIL = 13822
const ERROR_IPSEC_IKE_INVALID_HEADER = 13824
const ERROR_IPSEC_IKE_NO_POLICY = 13825
const ERROR_IPSEC_IKE_INVALID_SIGNATURE = 13826
const ERROR_IPSEC_IKE_KERBEROS_ERROR = 13827
const ERROR_IPSEC_IKE_NO_PUBLIC_KEY = 13828
const ERROR_IPSEC_IKE_PROCESS_ERR = 13829
const ERROR_IPSEC_IKE_PROCESS_ERR_SA = 13830
const ERROR_IPSEC_IKE_PROCESS_ERR_PROP = 13831
const ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = 13832
const ERROR_IPSEC_IKE_PROCESS_ERR_KE = 13833
const ERROR_IPSEC_IKE_PROCESS_ERR_ID = 13834
const ERROR_IPSEC_IKE_PROCESS_ERR_CERT = 13835
const ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = 13836
const ERROR_IPSEC_IKE_PROCESS_ERR_HASH = 13837
const ERROR_IPSEC_IKE_PROCESS_ERR_SIG = 13838
const ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = 13839
const ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = 13840
const ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = 13841
const ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = 13842
const ERROR_IPSEC_IKE_INVALID_PAYLOAD = 13843
const ERROR_IPSEC_IKE_LOAD_SOFT_SA = 13844
const ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = 13845
const ERROR_IPSEC_IKE_INVALID_COOKIE = 13846
const ERROR_IPSEC_IKE_NO_PEER_CERT = 13847
const ERROR_IPSEC_IKE_PEER_CRL_FAILED = 13848
const ERROR_IPSEC_IKE_POLICY_CHANGE = 13849
const ERROR_IPSEC_IKE_NO_MM_POLICY = 13850
const ERROR_IPSEC_IKE_NOTCBPRIV = 13851
const ERROR_IPSEC_IKE_SECLOADFAIL = 13852
const ERROR_IPSEC_IKE_FAILSSPINIT = 13853
const ERROR_IPSEC_IKE_FAILQUERYSSP = 13854
const ERROR_IPSEC_IKE_SRVACQFAIL = 13855
const ERROR_IPSEC_IKE_SRVQUERYCRED = 13856
const ERROR_IPSEC_IKE_GETSPIFAIL = 13857
const ERROR_IPSEC_IKE_INVALID_FILTER = 13858
const ERROR_IPSEC_IKE_OUT_OF_MEMORY = 13859
const ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = 13860
const ERROR_IPSEC_IKE_INVALID_POLICY = 13861
const ERROR_IPSEC_IKE_UNKNOWN_DOI = 13862
const ERROR_IPSEC_IKE_INVALID_SITUATION = 13863
const ERROR_IPSEC_IKE_DH_FAILURE = 13864
const ERROR_IPSEC_IKE_INVALID_GROUP = 13865
const ERROR_IPSEC_IKE_ENCRYPT = 13866
const ERROR_IPSEC_IKE_DECRYPT = 13867
const ERROR_IPSEC_IKE_POLICY_MATCH = 13868
const ERROR_IPSEC_IKE_UNSUPPORTED_ID = 13869
const ERROR_IPSEC_IKE_INVALID_HASH = 13870
const ERROR_IPSEC_IKE_INVALID_HASH_ALG = 13871
const ERROR_IPSEC_IKE_INVALID_HASH_SIZE = 13872
const ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = 13873
const ERROR_IPSEC_IKE_INVALID_AUTH_ALG = 13874
const ERROR_IPSEC_IKE_INVALID_SIG = 13875
const ERROR_IPSEC_IKE_LOAD_FAILED = 13876
const ERROR_IPSEC_IKE_RPC_DELETE = 13877
const ERROR_IPSEC_IKE_BENIGN_REINIT = 13878
const ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = 13879
const ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = 13881
const ERROR_IPSEC_IKE_MM_LIMIT = 13882
const ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = 13883
const ERROR_IPSEC_IKE_QM_LIMIT = 13884
const ERROR_IPSEC_IKE_MM_EXPIRED = 13885
const ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = 13886
const ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = 13887
const ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = 13888
const ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = 13889
const ERROR_IPSEC_IKE_DOS_COOKIE_SENT = 13890
const ERROR_IPSEC_IKE_SHUTTING_DOWN = 13891
const ERROR_IPSEC_IKE_CGA_AUTH_FAILED = 13892
const ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = 13893
const ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = 13894
const ERROR_IPSEC_IKE_QM_EXPIRED = 13895
const ERROR_IPSEC_IKE_TOO_MANY_FILTERS = 13896
const ERROR_IPSEC_IKE_NEG_STATUS_END = 13897
const ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = 13898
const ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = 13899
const ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = 13900
const ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = 13901
const ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = 13902
const ERROR_IPSEC_IKE_RATELIMIT_DROP = 13903
const ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = 13904
const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = 13905
const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = 13906
const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = 13907
const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = 13908
const ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = 13909
const ERROR_IPSEC_BAD_SPI = 13910
const ERROR_IPSEC_SA_LIFETIME_EXPIRED = 13911
const ERROR_IPSEC_WRONG_SA = 13912
const ERROR_IPSEC_REPLAY_CHECK_FAILED = 13913
const ERROR_IPSEC_INVALID_PACKET = 13914
const ERROR_IPSEC_INTEGRITY_CHECK_FAILED = 13915
const ERROR_IPSEC_CLEAR_TEXT_DROP = 13916
const ERROR_IPSEC_AUTH_FIREWALL_DROP = 13917
const ERROR_IPSEC_THROTTLE_DROP = 13918
const ERROR_IPSEC_DOSP_BLOCK = 13925
const ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = 13926
const ERROR_IPSEC_DOSP_INVALID_PACKET = 13927
const ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = 13928
const ERROR_IPSEC_DOSP_MAX_ENTRIES = 13929
const ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = 13930
const ERROR_IPSEC_DOSP_NOT_INSTALLED = 13931
const ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = 13932
const ERROR_EVT_INVALID_CHANNEL_PATH = 15000
const ERROR_EVT_INVALID_QUERY = 15001
const ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = 15002
const ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = 15003
const ERROR_EVT_INVALID_PUBLISHER_NAME = 15004
const ERROR_EVT_INVALID_EVENT_DATA = 15005
const ERROR_EVT_CHANNEL_NOT_FOUND = 15007
const ERROR_EVT_MALFORMED_XML_TEXT = 15008
const ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = 15009
const ERROR_EVT_CONFIGURATION_ERROR = 15010
const ERROR_EVT_QUERY_RESULT_STALE = 15011
const ERROR_EVT_QUERY_RESULT_INVALID_POSITION = 15012
const ERROR_EVT_NON_VALIDATING_MSXML = 15013
const ERROR_EVT_FILTER_ALREADYSCOPED = 15014
const ERROR_EVT_FILTER_NOTELTSET = 15015
const ERROR_EVT_FILTER_INVARG = 15016
const ERROR_EVT_FILTER_INVTEST = 15017
const ERROR_EVT_FILTER_INVTYPE = 15018
const ERROR_EVT_FILTER_PARSEERR = 15019
const ERROR_EVT_FILTER_UNSUPPORTEDOP = 15020
const ERROR_EVT_FILTER_UNEXPECTEDTOKEN = 15021
const ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = 15022
const ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = 15023
const ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = 15024
const ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = 15025
const ERROR_EVT_FILTER_TOO_COMPLEX = 15026
const ERROR_EVT_MESSAGE_NOT_FOUND = 15027
const ERROR_EVT_MESSAGE_ID_NOT_FOUND = 15028
const ERROR_EVT_UNRESOLVED_VALUE_INSERT = 15029
const ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = 15030
const ERROR_EVT_MAX_INSERTS_REACHED = 15031
const ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = 15032
const ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = 15033
const ERROR_EVT_VERSION_TOO_OLD = 15034
const ERROR_EVT_VERSION_TOO_NEW = 15035
const ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = 15036
const ERROR_EVT_PUBLISHER_DISABLED = 15037
const ERROR_EVT_FILTER_OUT_OF_RANGE = 15038
const ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = 15080
const ERROR_EC_LOG_DISABLED = 15081
const ERROR_EC_CIRCULAR_FORWARDING = 15082
const ERROR_EC_CREDSTORE_FULL = 15083
const ERROR_EC_CRED_NOT_FOUND = 15084
const ERROR_EC_NO_ACTIVE_CHANNEL = 15085
const ERROR_MUI_FILE_NOT_FOUND = 15100
const ERROR_MUI_INVALID_FILE = 15101
const ERROR_MUI_INVALID_RC_CONFIG = 15102
const ERROR_MUI_INVALID_LOCALE_NAME = 15103
const ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = 15104
const ERROR_MUI_FILE_NOT_LOADED = 15105
const ERROR_RESOURCE_ENUM_USER_STOP = 15106
const ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = 15107
const ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = 15108
const ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE = 15110
const ERROR_MRM_INVALID_PRICONFIG = 15111
const ERROR_MRM_INVALID_FILE_TYPE = 15112
const ERROR_MRM_UNKNOWN_QUALIFIER = 15113
const ERROR_MRM_INVALID_QUALIFIER_VALUE = 15114
const ERROR_MRM_NO_CANDIDATE = 15115
const ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE = 15116
const ERROR_MRM_RESOURCE_TYPE_MISMATCH = 15117
const ERROR_MRM_DUPLICATE_MAP_NAME = 15118
const ERROR_MRM_DUPLICATE_ENTRY = 15119
const ERROR_MRM_INVALID_RESOURCE_IDENTIFIER = 15120
const ERROR_MRM_FILEPATH_TOO_LONG = 15121
const ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE = 15122
const ERROR_MRM_INVALID_PRI_FILE = 15126
const ERROR_MRM_NAMED_RESOURCE_NOT_FOUND = 15127
const ERROR_MRM_MAP_NOT_FOUND = 15135
const ERROR_MRM_UNSUPPORTED_PROFILE_TYPE = 15136
const ERROR_MRM_INVALID_QUALIFIER_OPERATOR = 15137
const ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE = 15138
const ERROR_MRM_AUTOMERGE_ENABLED = 15139
const ERROR_MRM_TOO_MANY_RESOURCES = 15140
const ERROR_MCA_INVALID_CAPABILITIES_STRING = 15200
const ERROR_MCA_INVALID_VCP_VERSION = 15201
const ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = 15202
const ERROR_MCA_MCCS_VERSION_MISMATCH = 15203
const ERROR_MCA_UNSUPPORTED_MCCS_VERSION = 15204
const ERROR_MCA_INTERNAL_ERROR = 15205
const ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = 15206
const ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = 15207
const ERROR_AMBIGUOUS_SYSTEM_DEVICE = 15250
const ERROR_SYSTEM_DEVICE_NOT_FOUND = 15299
const ERROR_HASH_NOT_SUPPORTED = 15300
const ERROR_HASH_NOT_PRESENT = 15301
const ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED = 15321
const ERROR_GPIO_CLIENT_INFORMATION_INVALID = 15322
const ERROR_GPIO_VERSION_NOT_SUPPORTED = 15323
const ERROR_GPIO_INVALID_REGISTRATION_PACKET = 15324
const ERROR_GPIO_OPERATION_DENIED = 15325
const ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE = 15326
const ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED = 15327
const ERROR_CANNOT_SWITCH_RUNLEVEL = 15400
const ERROR_INVALID_RUNLEVEL_SETTING = 15401
const ERROR_RUNLEVEL_SWITCH_TIMEOUT = 15402
const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT = 15403
const ERROR_RUNLEVEL_SWITCH_IN_PROGRESS = 15404
const ERROR_SERVICES_FAILED_AUTOSTART = 15405
const ERROR_COM_TASK_STOP_PENDING = 15501
const ERROR_INSTALL_OPEN_PACKAGE_FAILED = 15600
const ERROR_INSTALL_PACKAGE_NOT_FOUND = 15601
const ERROR_INSTALL_INVALID_PACKAGE = 15602
const ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED = 15603
const ERROR_INSTALL_OUT_OF_DISK_SPACE = 15604
const ERROR_INSTALL_NETWORK_FAILURE = 15605
const ERROR_INSTALL_REGISTRATION_FAILURE = 15606
const ERROR_INSTALL_DEREGISTRATION_FAILURE = 15607
const ERROR_INSTALL_CANCEL = 15608
const ERROR_INSTALL_FAILED = 15609
const ERROR_REMOVE_FAILED = 15610
const ERROR_PACKAGE_ALREADY_EXISTS = 15611
const ERROR_NEEDS_REMEDIATION = 15612
const ERROR_INSTALL_PREREQUISITE_FAILED = 15613
const ERROR_PACKAGE_REPOSITORY_CORRUPTED = 15614
const ERROR_INSTALL_POLICY_FAILURE = 15615
const ERROR_PACKAGE_UPDATING = 15616
const ERROR_DEPLOYMENT_BLOCKED_BY_POLICY = 15617
const ERROR_PACKAGES_IN_USE = 15618
const ERROR_RECOVERY_FILE_CORRUPT = 15619
const ERROR_INVALID_STAGED_SIGNATURE = 15620
const ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED = 15621
const ERROR_INSTALL_PACKAGE_DOWNGRADE = 15622
const ERROR_SYSTEM_NEEDS_REMEDIATION = 15623
const ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN = 15624
const ERROR_RESILIENCY_FILE_CORRUPT = 15625
const ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING = 15626
const APPMODEL_ERROR_NO_PACKAGE = 15700
const APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT = 15701
const APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT = 15702
const APPMODEL_ERROR_NO_APPLICATION = 15703
const ERROR_STATE_LOAD_STORE_FAILED = 15800
const ERROR_STATE_GET_VERSION_FAILED = 15801
const ERROR_STATE_SET_VERSION_FAILED = 15802
const ERROR_STATE_STRUCTURED_RESET_FAILED = 15803
const ERROR_STATE_OPEN_CONTAINER_FAILED = 15804
const ERROR_STATE_CREATE_CONTAINER_FAILED = 15805
const ERROR_STATE_DELETE_CONTAINER_FAILED = 15806
const ERROR_STATE_READ_SETTING_FAILED = 15807
const ERROR_STATE_WRITE_SETTING_FAILED = 15808
const ERROR_STATE_DELETE_SETTING_FAILED = 15809
const ERROR_STATE_QUERY_SETTING_FAILED = 15810
const ERROR_STATE_READ_COMPOSITE_SETTING_FAILED = 15811
const ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED = 15812
const ERROR_STATE_ENUMERATE_CONTAINER_FAILED = 15813
const ERROR_STATE_ENUMERATE_SETTINGS_FAILED = 15814
const ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15815
const ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15816
const ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED = 15817
const ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED = 15818
const ERROR_API_UNAVAILABLE = 15841
const SEVERITY_SUCCESS = 0
const SEVERITY_ERROR = 1
const FACILITY_NT_BIT = &h10000000
const NOERROR = 0
const S_OK = cast(HRESULT, &h000000000)
const S_FALSE = cast(HRESULT, &h00000001)
const OLE_E_FIRST = cast(HRESULT, &h80040000)
const OLE_E_LAST = cast(HRESULT, &h800400FF)
const OLE_S_FIRST = cast(HRESULT, &h00040000)
const OLE_S_LAST = cast(HRESULT, &h000400FF)
const DRAGDROP_E_FIRST = &h80040100
const DRAGDROP_E_LAST = &h8004010F
const DRAGDROP_S_FIRST = &h00040100
const DRAGDROP_S_LAST = &h0004010F
const CLASSFACTORY_E_FIRST = &h80040110
const CLASSFACTORY_E_LAST = &h8004011F
const CLASSFACTORY_S_FIRST = &h00040110
const CLASSFACTORY_S_LAST = &h0004011F
const MARSHAL_E_FIRST = &h80040120
const MARSHAL_E_LAST = &h8004012F
const MARSHAL_S_FIRST = &h00040120
const MARSHAL_S_LAST = &h0004012F
const DATA_E_FIRST = &h80040130
const DATA_E_LAST = &h8004013F
const DATA_S_FIRST = &h00040130
const DATA_S_LAST = &h0004013F
const VIEW_E_FIRST = &h80040140
const VIEW_E_LAST = &h8004014F
const VIEW_S_FIRST = &h00040140
const VIEW_S_LAST = &h0004014F
const REGDB_E_FIRST = &h80040150
const REGDB_E_LAST = &h8004015F
const REGDB_S_FIRST = &h00040150
const REGDB_S_LAST = &h0004015F
const CAT_E_FIRST = &h80040160
const CAT_E_LAST = &h80040161
const CS_E_FIRST = &h80040164
const CS_E_LAST = &h8004016F
const CACHE_E_FIRST = &h80040170
const CACHE_E_LAST = &h8004017F
const CACHE_S_FIRST = &h00040170
const CACHE_S_LAST = &h0004017F
const OLEOBJ_E_FIRST = &h80040180
const OLEOBJ_E_LAST = &h8004018F
const OLEOBJ_S_FIRST = &h00040180
const OLEOBJ_S_LAST = &h0004018F
const CLIENTSITE_E_FIRST = &h80040190
const CLIENTSITE_E_LAST = &h8004019F
const CLIENTSITE_S_FIRST = &h00040190
const CLIENTSITE_S_LAST = &h0004019F
const INPLACE_E_FIRST = &h800401A0
const INPLACE_E_LAST = &h800401AF
const INPLACE_S_FIRST = &h000401A0
const INPLACE_S_LAST = &h000401AF
const ENUM_E_FIRST = &h800401B0
const ENUM_E_LAST = &h800401BF
const ENUM_S_FIRST = &h000401B0
const ENUM_S_LAST = &h000401BF
const CONVERT10_E_FIRST = &h800401C0
const CONVERT10_E_LAST = &h800401CF
const CONVERT10_S_FIRST = &h000401C0
const CONVERT10_S_LAST = &h000401CF
const CLIPBRD_E_FIRST = &h800401D0
const CLIPBRD_E_LAST = &h800401DF
const CLIPBRD_S_FIRST = &h000401D0
const CLIPBRD_S_LAST = &h000401DF
const MK_E_FIRST = &h800401E0
const MK_E_LAST = &h800401EF
const MK_S_FIRST = &h000401E0
const MK_S_LAST = &h000401EF
const CO_E_FIRST = &h800401F0
const CO_E_LAST = &h800401FF
const CO_S_FIRST = &h000401F0
const CO_S_LAST = &h000401FF
const EVENT_E_FIRST = &h80040200
const EVENT_E_LAST = &h8004021F
const EVENT_S_FIRST = &h00040200
const EVENT_S_LAST = &h0004021F
const XACT_E_FIRST = &h8004D000
const XACT_E_LAST = &h8004D029
const XACT_S_FIRST = &h0004D000
const XACT_S_LAST = &h0004D010
const CONTEXT_E_FIRST = &h8004E000
const CONTEXT_E_LAST = &h8004E02F
const CONTEXT_S_FIRST = &h0004E000
const CONTEXT_S_LAST = &h0004E02F
const NTE_OP_OK = 0
const SCARD_S_SUCCESS = NO_ERROR


const FACILITY_USERMODE_FILTER_MANAGER = &h1f
const ERROR_FLT_IO_COMPLETE = cast(HRESULT, &h001f0001)
const ERROR_FLT_NO_HANDLER_DEFINED = cast(HRESULT, &h801f0001)
const ERROR_FLT_CONTEXT_ALREADY_DEFINED = cast(HRESULT, &h801f0002)
const ERROR_FLT_INVALID_ASYNCHRONOUS_REQUEST = cast(HRESULT, &h801f0003)
const ERROR_FLT_DISALLOW_FAST_IO = cast(HRESULT, &h801f0004)
const ERROR_FLT_INVALID_NAME_REQUEST = cast(HRESULT, &h801f0005)
const ERROR_FLT_NOT_SAFE_TO_POST_OPERATION = cast(HRESULT, &h801f0006)
const ERROR_FLT_NOT_INITIALIZED = cast(HRESULT, &h801f0007)
const ERROR_FLT_FILTER_NOT_READY = cast(HRESULT, &h801f0008)
const ERROR_FLT_POST_OPERATION_CLEANUP = cast(HRESULT, &h801f0009)
const ERROR_FLT_INTERNAL_ERROR = cast(HRESULT, &h801f000a)
const ERROR_FLT_DELETING_OBJECT = cast(HRESULT, &h801f000b)
const ERROR_FLT_MUST_BE_NONPAGED_POOL = cast(HRESULT, &h801f000c)
const ERROR_FLT_DUPLICATE_ENTRY = cast(HRESULT, &h801f000d)
const ERROR_FLT_CBDQ_DISABLED = cast(HRESULT, &h801f000e)
const ERROR_FLT_DO_NOT_ATTACH = cast(HRESULT, &h801f000f)
const ERROR_FLT_DO_NOT_DETACH = cast(HRESULT, &h801f0010)
const ERROR_FLT_INSTANCE_ALTITUDE_COLLISION = cast(HRESULT, &h801f0011)
const ERROR_FLT_INSTANCE_NAME_COLLISION = cast(HRESULT, &h801f0012)
const ERROR_FLT_FILTER_NOT_FOUND = cast(HRESULT, &h801f0013)
const ERROR_FLT_VOLUME_NOT_FOUND = cast(HRESULT, &h801f0014)
const ERROR_FLT_INSTANCE_NOT_FOUND = cast(HRESULT, &h801f0015)
const ERROR_FLT_CONTEXT_ALLOCATION_NOT_FOUND = cast(HRESULT, &h801f0016)
const ERROR_FLT_INVALID_CONTEXT_REGISTRATION = cast(HRESULT, &h801f0017)
const ERROR_FLT_NAME_CACHE_MISS = cast(HRESULT, &h801f0018)
const ERROR_FLT_NO_DEVICE_OBJECT = cast(HRESULT, &h801f0019)
const ERROR_FLT_VOLUME_ALREADY_MOUNTED = cast(HRESULT, &h801f001a)
const ERROR_FLT_ALREADY_ENLISTED = cast(HRESULT, &h801f001b)
const ERROR_FLT_CONTEXT_ALREADY_LINKED = cast(HRESULT, &h801F001c)
const ERROR_FLT_NO_WAITER_FOR_REPLY = cast(HRESULT, &h801f0020)
const ERROR_FLT_REGISTRATION_BUSY = cast(HRESULT, &h801F0023)
#undef __IN__WINERROR_


extern "Windows"


type _SECURITY_ATTRIBUTES
 nLength as DWORD
 lpSecurityDescriptor as LPVOID
 bInheritHandle as WINBOOL
end type

type SECURITY_ATTRIBUTES as _SECURITY_ATTRIBUTES
type PSECURITY_ATTRIBUTES as _SECURITY_ATTRIBUTES ptr
type LPSECURITY_ATTRIBUTES as _SECURITY_ATTRIBUTES ptr

type _OVERLAPPED
 Internal as ULONG_PTR
 InternalHigh as ULONG_PTR

 union
 type
 Offset as DWORD
 OffsetHigh as DWORD
 end type

 Pointer as PVOID
 end union

 hEvent as HANDLE
end type

type OVERLAPPED as _OVERLAPPED
type LPOVERLAPPED as _OVERLAPPED ptr

type _OVERLAPPED_ENTRY
 lpCompletionKey as ULONG_PTR
 lpOverlapped as LPOVERLAPPED
 Internal as ULONG_PTR
 dwNumberOfBytesTransferred as DWORD
end type

type OVERLAPPED_ENTRY as _OVERLAPPED_ENTRY
type LPOVERLAPPED_ENTRY as _OVERLAPPED_ENTRY ptr

type _SYSTEMTIME
 wYear as WORD
 wMonth as WORD
 wDayOfWeek as WORD
 wDay as WORD
 wHour as WORD
 wMinute as WORD
 wSecond as WORD
 wMilliseconds as WORD
end type

type SYSTEMTIME as _SYSTEMTIME
type PSYSTEMTIME as _SYSTEMTIME ptr
type LPSYSTEMTIME as _SYSTEMTIME ptr

type _WIN32_FIND_DATAA
 dwFileAttributes as DWORD
 ftCreationTime as FILETIME
 ftLastAccessTime as FILETIME
 ftLastWriteTime as FILETIME
 nFileSizeHigh as DWORD
 nFileSizeLow as DWORD
 dwReserved0 as DWORD
 dwReserved1 as DWORD
 cFileName as zstring * 260
 cAlternateFileName as zstring * 14
end type

type WIN32_FIND_DATAA as _WIN32_FIND_DATAA
type PWIN32_FIND_DATAA as _WIN32_FIND_DATAA ptr
type LPWIN32_FIND_DATAA as _WIN32_FIND_DATAA ptr

type _WIN32_FIND_DATAW
 dwFileAttributes as DWORD
 ftCreationTime as FILETIME
 ftLastAccessTime as FILETIME
 ftLastWriteTime as FILETIME
 nFileSizeHigh as DWORD
 nFileSizeLow as DWORD
 dwReserved0 as DWORD
 dwReserved1 as DWORD
 cFileName as wstring * 260
 cAlternateFileName as wstring * 14
end type

type WIN32_FIND_DATAW as _WIN32_FIND_DATAW
type PWIN32_FIND_DATAW as _WIN32_FIND_DATAW ptr
type LPWIN32_FIND_DATAW as _WIN32_FIND_DATAW ptr

 type WIN32_FIND_DATA as WIN32_FIND_DATAA
 type PWIN32_FIND_DATA as PWIN32_FIND_DATAA
 type LPWIN32_FIND_DATA as LPWIN32_FIND_DATAA

type _FINDEX_INFO_LEVELS as long
enum
 FindExInfoStandard
 FindExInfoBasic
 FindExInfoMaxInfoLevel
end enum

type FINDEX_INFO_LEVELS as _FINDEX_INFO_LEVELS
const FIND_FIRST_EX_CASE_SENSITIVE = &h00000001
const FIND_FIRST_EX_LARGE_FETCH = &h00000002

type _FINDEX_SEARCH_OPS as long
enum
 FindExSearchNameMatch
 FindExSearchLimitToDirectories
 FindExSearchLimitToDevices
 FindExSearchMaxSearchOp
end enum

type FINDEX_SEARCH_OPS as _FINDEX_SEARCH_OPS

type _GET_FILEEX_INFO_LEVELS as long
enum
 GetFileExInfoStandard
 GetFileExMaxInfoLevel
end enum

type GET_FILEEX_INFO_LEVELS as _GET_FILEEX_INFO_LEVELS


type CRITICAL_SECTION as RTL_CRITICAL_SECTION
type PCRITICAL_SECTION as PRTL_CRITICAL_SECTION
type LPCRITICAL_SECTION as PRTL_CRITICAL_SECTION
type CRITICAL_SECTION_DEBUG as RTL_CRITICAL_SECTION_DEBUG
type PCRITICAL_SECTION_DEBUG as PRTL_CRITICAL_SECTION_DEBUG
type LPCRITICAL_SECTION_DEBUG as PRTL_CRITICAL_SECTION_DEBUG
type LPOVERLAPPED_COMPLETION_ROUTINE as sub(byval dwErrorCode as DWORD, byval dwNumberOfBytesTransfered as DWORD, byval lpOverlapped as LPOVERLAPPED)
const LOCKFILE_FAIL_IMMEDIATELY = &h1
const LOCKFILE_EXCLUSIVE_LOCK = &h2

type _PROCESS_HEAP_ENTRY_Block
 hMem as HANDLE
 dwReserved(0 to 2) as DWORD
end type

type _PROCESS_HEAP_ENTRY_Region
 dwCommittedSize as DWORD
 dwUnCommittedSize as DWORD
 lpFirstBlock as LPVOID
 lpLastBlock as LPVOID
end type

type _PROCESS_HEAP_ENTRY
 lpData as PVOID
 cbData as DWORD
 cbOverhead as UBYTE
 iRegionIndex as UBYTE
 wFlags as WORD

 union
 Block as _PROCESS_HEAP_ENTRY_Block
 Region as _PROCESS_HEAP_ENTRY_Region
 end union
end type

type PROCESS_HEAP_ENTRY as _PROCESS_HEAP_ENTRY
type LPPROCESS_HEAP_ENTRY as _PROCESS_HEAP_ENTRY ptr
type PPROCESS_HEAP_ENTRY as _PROCESS_HEAP_ENTRY ptr

const PROCESS_HEAP_REGION = &h1
const PROCESS_HEAP_UNCOMMITTED_RANGE = &h2
const PROCESS_HEAP_ENTRY_BUSY = &h4
const PROCESS_HEAP_ENTRY_MOVEABLE = &h10
const PROCESS_HEAP_ENTRY_DDESHARE = &h20

type _REASON_CONTEXT_Reason_Detailed
 LocalizedReasonModule as HMODULE
 LocalizedReasonId as ULONG
 ReasonStringCount as ULONG
 ReasonStrings as LPWSTR ptr
end type

union _REASON_CONTEXT_Reason
 Detailed as _REASON_CONTEXT_Reason_Detailed
 SimpleReasonString as LPWSTR
end union

type _REASON_CONTEXT
 Version as ULONG
 Flags as DWORD
 Reason as _REASON_CONTEXT_Reason
end type

type REASON_CONTEXT as _REASON_CONTEXT
type PREASON_CONTEXT as _REASON_CONTEXT ptr
const EXCEPTION_DEBUG_EVENT = 1
const CREATE_THREAD_DEBUG_EVENT = 2
const CREATE_PROCESS_DEBUG_EVENT = 3
const EXIT_THREAD_DEBUG_EVENT = 4
const EXIT_PROCESS_DEBUG_EVENT = 5
const LOAD_DLL_DEBUG_EVENT = 6
const UNLOAD_DLL_DEBUG_EVENT = 7
const OUTPUT_DEBUG_STRING_EVENT = 8
const RIP_EVENT = 9
type PTHREAD_START_ROUTINE as function(byval lpThreadParameter as LPVOID) as DWORD
type LPTHREAD_START_ROUTINE as PTHREAD_START_ROUTINE

type _EXCEPTION_DEBUG_INFO
 ExceptionRecord as EXCEPTION_RECORD
 dwFirstChance as DWORD
end type

type EXCEPTION_DEBUG_INFO as _EXCEPTION_DEBUG_INFO
type LPEXCEPTION_DEBUG_INFO as _EXCEPTION_DEBUG_INFO ptr

type _CREATE_THREAD_DEBUG_INFO
 hThread as HANDLE
 lpThreadLocalBase as LPVOID
 lpStartAddress as LPTHREAD_START_ROUTINE
end type

type CREATE_THREAD_DEBUG_INFO as _CREATE_THREAD_DEBUG_INFO
type LPCREATE_THREAD_DEBUG_INFO as _CREATE_THREAD_DEBUG_INFO ptr

type _CREATE_PROCESS_DEBUG_INFO
 hFile as HANDLE
 hProcess as HANDLE
 hThread as HANDLE
 lpBaseOfImage as LPVOID
 dwDebugInfoFileOffset as DWORD
 nDebugInfoSize as DWORD
 lpThreadLocalBase as LPVOID
 lpStartAddress as LPTHREAD_START_ROUTINE
 lpImageName as LPVOID
 fUnicode as WORD
end type

type CREATE_PROCESS_DEBUG_INFO as _CREATE_PROCESS_DEBUG_INFO
type LPCREATE_PROCESS_DEBUG_INFO as _CREATE_PROCESS_DEBUG_INFO ptr

type _EXIT_THREAD_DEBUG_INFO
 dwExitCode as DWORD
end type

type EXIT_THREAD_DEBUG_INFO as _EXIT_THREAD_DEBUG_INFO
type LPEXIT_THREAD_DEBUG_INFO as _EXIT_THREAD_DEBUG_INFO ptr

type _EXIT_PROCESS_DEBUG_INFO
 dwExitCode as DWORD
end type

type EXIT_PROCESS_DEBUG_INFO as _EXIT_PROCESS_DEBUG_INFO
type LPEXIT_PROCESS_DEBUG_INFO as _EXIT_PROCESS_DEBUG_INFO ptr

type _LOAD_DLL_DEBUG_INFO
 hFile as HANDLE
 lpBaseOfDll as LPVOID
 dwDebugInfoFileOffset as DWORD
 nDebugInfoSize as DWORD
 lpImageName as LPVOID
 fUnicode as WORD
end type

type LOAD_DLL_DEBUG_INFO as _LOAD_DLL_DEBUG_INFO
type LPLOAD_DLL_DEBUG_INFO as _LOAD_DLL_DEBUG_INFO ptr

type _UNLOAD_DLL_DEBUG_INFO
 lpBaseOfDll as LPVOID
end type

type UNLOAD_DLL_DEBUG_INFO as _UNLOAD_DLL_DEBUG_INFO
type LPUNLOAD_DLL_DEBUG_INFO as _UNLOAD_DLL_DEBUG_INFO ptr

type _OUTPUT_DEBUG_STRING_INFO
 lpDebugStringData as LPSTR
 fUnicode as WORD
 nDebugStringLength as WORD
end type

type OUTPUT_DEBUG_STRING_INFO as _OUTPUT_DEBUG_STRING_INFO
type LPOUTPUT_DEBUG_STRING_INFO as _OUTPUT_DEBUG_STRING_INFO ptr

type _RIP_INFO
 dwError as DWORD
 dwType as DWORD
end type

type RIP_INFO as _RIP_INFO
type LPRIP_INFO as _RIP_INFO ptr

union _DEBUG_EVENT_u
 Exception as EXCEPTION_DEBUG_INFO
 CreateThread as CREATE_THREAD_DEBUG_INFO
 CreateProcessInfo as CREATE_PROCESS_DEBUG_INFO
 ExitThread as EXIT_THREAD_DEBUG_INFO
 ExitProcess as EXIT_PROCESS_DEBUG_INFO
 LoadDll as LOAD_DLL_DEBUG_INFO
 UnloadDll as UNLOAD_DLL_DEBUG_INFO
 DebugString as OUTPUT_DEBUG_STRING_INFO
 RipInfo as RIP_INFO
end union

type _DEBUG_EVENT
 dwDebugEventCode as DWORD
 dwProcessId as DWORD
 dwThreadId as DWORD
 u as _DEBUG_EVENT_u
end type

type DEBUG_EVENT as _DEBUG_EVENT
type LPDEBUG_EVENT as _DEBUG_EVENT ptr
type LPCONTEXT as PCONTEXT

const STILL_ACTIVE = STATUS_PENDING
const EXCEPTION_ACCESS_VIOLATION = STATUS_ACCESS_VIOLATION
const EXCEPTION_DATATYPE_MISALIGNMENT = STATUS_DATATYPE_MISALIGNMENT
const EXCEPTION_BREAKPOINT = STATUS_BREAKPOINT
const EXCEPTION_SINGLE_STEP = STATUS_SINGLE_STEP
const EXCEPTION_ARRAY_BOUNDS_EXCEEDED = STATUS_ARRAY_BOUNDS_EXCEEDED
const EXCEPTION_FLT_DENORMAL_OPERAND = STATUS_FLOAT_DENORMAL_OPERAND
const EXCEPTION_FLT_DIVIDE_BY_ZERO = STATUS_FLOAT_DIVIDE_BY_ZERO
const EXCEPTION_FLT_INEXACT_RESULT = STATUS_FLOAT_INEXACT_RESULT
const EXCEPTION_FLT_INVALID_OPERATION = STATUS_FLOAT_INVALID_OPERATION
const EXCEPTION_FLT_OVERFLOW = STATUS_FLOAT_OVERFLOW
const EXCEPTION_FLT_STACK_CHECK = STATUS_FLOAT_STACK_CHECK
const EXCEPTION_FLT_UNDERFLOW = STATUS_FLOAT_UNDERFLOW
const EXCEPTION_INT_DIVIDE_BY_ZERO = STATUS_INTEGER_DIVIDE_BY_ZERO
const EXCEPTION_INT_OVERFLOW = STATUS_INTEGER_OVERFLOW
const EXCEPTION_PRIV_INSTRUCTION = STATUS_PRIVILEGED_INSTRUCTION
const EXCEPTION_IN_PAGE_ERROR = STATUS_IN_PAGE_ERROR
const EXCEPTION_ILLEGAL_INSTRUCTION = STATUS_ILLEGAL_INSTRUCTION
const EXCEPTION_NONCONTINUABLE_EXCEPTION = STATUS_NONCONTINUABLE_EXCEPTION
const EXCEPTION_STACK_OVERFLOW = STATUS_STACK_OVERFLOW
const EXCEPTION_INVALID_DISPOSITION = STATUS_INVALID_DISPOSITION
const EXCEPTION_GUARD_PAGE = STATUS_GUARD_PAGE_VIOLATION
const EXCEPTION_INVALID_HANDLE = STATUS_INVALID_HANDLE
const CONTROL_C_EXIT = STATUS_CONTROL_C_EXIT
const LMEM_FIXED = &h00
const LMEM_MOVEABLE = &h2
const LMEM_NOCOMPACT = &h10
const LMEM_NODISCARD = &h20
const LMEM_ZEROINIT = &h40
const LMEM_MODIFY = &h80
const LMEM_DISCARDABLE = &hf00
const LMEM_VALID_FLAGS = &hf72
const LMEM_INVALID_HANDLE = &h8000
const LHND = LMEM_MOVEABLE or LMEM_ZEROINIT
const LPTR = LMEM_FIXED or LMEM_ZEROINIT
const NONZEROLHND = LMEM_MOVEABLE
const NONZEROLPTR = LMEM_FIXED
const LMEM_DISCARDED = &h4000
const LMEM_LOCKCOUNT = &hff

type CONTRACT_DESCRIPTION as _CONTRACT_DESCRIPTION
type BEM_REFERENCE as _BEM_REFERENCE
type BEM_FREE_INTERFACE_CALLBACK as sub(byval interfaceInstance as any ptr)

declare function BemCreateReference(byval iid as const GUID const ptr, byval interfaceInstance as any ptr, byval freeCallback as BEM_FREE_INTERFACE_CALLBACK, byval reference as BEM_REFERENCE ptr ptr) as HRESULT
declare function BemCreateContractFrom(byval dllPath as LPCWSTR, byval extensionId as const GUID const ptr, byval contractDescription as const CONTRACT_DESCRIPTION ptr, byval hostContract as any ptr, byval contract as any ptr ptr) as HRESULT
declare function BemCopyReference(byval reference as BEM_REFERENCE ptr, byval copiedReference as BEM_REFERENCE ptr ptr) as HRESULT
declare sub BemFreeReference(byval reference as BEM_REFERENCE ptr)
declare sub BemFreeContract(byval contract as any ptr)
declare function IsDebuggerPresent() as WINBOOL
declare sub OutputDebugStringA(byval lpOutputString as LPCSTR)
declare sub OutputDebugStringW(byval lpOutputString as LPCWSTR)

 declare sub OutputDebugString alias "OutputDebugStringA"(byval lpOutputString as LPCSTR)

declare sub DebugBreak()
declare function ContinueDebugEvent(byval dwProcessId as DWORD, byval dwThreadId as DWORD, byval dwContinueStatus as DWORD) as WINBOOL
declare function WaitForDebugEvent(byval lpDebugEvent as LPDEBUG_EVENT, byval dwMilliseconds as DWORD) as WINBOOL
declare function DebugActiveProcess(byval dwProcessId as DWORD) as WINBOOL
declare function DebugActiveProcessStop(byval dwProcessId as DWORD) as WINBOOL
declare function CheckRemoteDebuggerPresent(byval hProcess as HANDLE, byval pbDebuggerPresent as PBOOL) as WINBOOL
type PTOP_LEVEL_EXCEPTION_FILTER as function(byval ExceptionInfo as _EXCEPTION_POINTERS ptr) as LONG
type LPTOP_LEVEL_EXCEPTION_FILTER as PTOP_LEVEL_EXCEPTION_FILTER
declare function UnhandledExceptionFilter(byval ExceptionInfo as _EXCEPTION_POINTERS ptr) as LONG
declare function SetUnhandledExceptionFilter(byval lpTopLevelExceptionFilter as LPTOP_LEVEL_EXCEPTION_FILTER) as LPTOP_LEVEL_EXCEPTION_FILTER
declare function SetErrorMode(byval uMode as UINT) as UINT
declare function AddVectoredExceptionHandler(byval First as ULONG, byval Handler as PVECTORED_EXCEPTION_HANDLER) as PVOID
declare function RemoveVectoredExceptionHandler(byval Handle as PVOID) as ULONG
declare function AddVectoredContinueHandler(byval First as ULONG, byval Handler as PVECTORED_EXCEPTION_HANDLER) as PVOID
declare function RemoveVectoredContinueHandler(byval Handle as PVOID) as ULONG


declare sub RaiseException(byval dwExceptionCode as DWORD, byval dwExceptionFlags as DWORD, byval nNumberOfArguments as DWORD, byval lpArguments as const ULONG_PTR ptr)
declare function GetLastError() as DWORD
declare sub SetLastError(byval dwErrCode as DWORD)


const CREATE_NEW = 1
const CREATE_ALWAYS = 2
const OPEN_EXISTING = 3
const OPEN_ALWAYS = 4
const TRUNCATE_EXISTING = 5
const INVALID_FILE_SIZE = cast(DWORD, &hffffffff)
const INVALID_SET_FILE_POINTER = cast(DWORD, -1)
const INVALID_FILE_ATTRIBUTES = cast(DWORD, -1)

type _BY_HANDLE_FILE_INFORMATION
 dwFileAttributes as DWORD
 ftCreationTime as FILETIME
 ftLastAccessTime as FILETIME
 ftLastWriteTime as FILETIME
 dwVolumeSerialNumber as DWORD
 nFileSizeHigh as DWORD
 nFileSizeLow as DWORD
 nNumberOfLinks as DWORD
 nFileIndexHigh as DWORD
 nFileIndexLow as DWORD
end type

type BY_HANDLE_FILE_INFORMATION as _BY_HANDLE_FILE_INFORMATION
type PBY_HANDLE_FILE_INFORMATION as _BY_HANDLE_FILE_INFORMATION ptr
type LPBY_HANDLE_FILE_INFORMATION as _BY_HANDLE_FILE_INFORMATION ptr

declare function CompareFileTime(byval lpFileTime1 as const FILETIME ptr, byval lpFileTime2 as const FILETIME ptr) as LONG
declare function CreateFileA(byval lpFileName as LPCSTR, byval dwDesiredAccess as DWORD, byval dwShareMode as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval dwCreationDisposition as DWORD, byval dwFlagsAndAttributes as DWORD, byval hTemplateFile as HANDLE) as HANDLE
declare function CreateFileW(byval lpFileName as LPCWSTR, byval dwDesiredAccess as DWORD, byval dwShareMode as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval dwCreationDisposition as DWORD, byval dwFlagsAndAttributes as DWORD, byval hTemplateFile as HANDLE) as HANDLE
declare function DefineDosDeviceW(byval dwFlags as DWORD, byval lpDeviceName as LPCWSTR, byval lpTargetPath as LPCWSTR) as WINBOOL
declare function DeleteVolumeMountPointW(byval lpszVolumeMountPoint as LPCWSTR) as WINBOOL
declare function FileTimeToLocalFileTime(byval lpFileTime as const FILETIME ptr, byval lpLocalFileTime as LPFILETIME) as WINBOOL
declare function FindCloseChangeNotification(byval hChangeHandle as HANDLE) as WINBOOL
declare function FindFirstChangeNotificationA(byval lpPathName as LPCSTR, byval bWatchSubtree as WINBOOL, byval dwNotifyFilter as DWORD) as HANDLE
declare function FindFirstChangeNotificationW(byval lpPathName as LPCWSTR, byval bWatchSubtree as WINBOOL, byval dwNotifyFilter as DWORD) as HANDLE
declare function FindFirstFileA(byval lpFileName as LPCSTR, byval lpFindFileData as LPWIN32_FIND_DATAA) as HANDLE
declare function FindFirstFileW(byval lpFileName as LPCWSTR, byval lpFindFileData as LPWIN32_FIND_DATAW) as HANDLE
declare function FindFirstVolumeW(byval lpszVolumeName as LPWSTR, byval cchBufferLength as DWORD) as HANDLE
declare function FindNextChangeNotification(byval hChangeHandle as HANDLE) as WINBOOL
declare function FindNextVolumeW(byval hFindVolume as HANDLE, byval lpszVolumeName as LPWSTR, byval cchBufferLength as DWORD) as WINBOOL
declare function FindVolumeClose(byval hFindVolume as HANDLE) as WINBOOL
declare function GetDiskFreeSpaceA(byval lpRootPathName as LPCSTR, byval lpSectorsPerCluster as LPDWORD, byval lpBytesPerSector as LPDWORD, byval lpNumberOfFreeClusters as LPDWORD, byval lpTotalNumberOfClusters as LPDWORD) as WINBOOL
declare function GetDiskFreeSpaceW(byval lpRootPathName as LPCWSTR, byval lpSectorsPerCluster as LPDWORD, byval lpBytesPerSector as LPDWORD, byval lpNumberOfFreeClusters as LPDWORD, byval lpTotalNumberOfClusters as LPDWORD) as WINBOOL
declare function GetDriveTypeA(byval lpRootPathName as LPCSTR) as UINT
declare function GetDriveTypeW(byval lpRootPathName as LPCWSTR) as UINT
declare function GetFileAttributesA(byval lpFileName as LPCSTR) as DWORD
declare function GetFileAttributesW(byval lpFileName as LPCWSTR) as DWORD
declare function GetFileInformationByHandle(byval hFile as HANDLE, byval lpFileInformation as LPBY_HANDLE_FILE_INFORMATION) as WINBOOL
declare function GetFileSize(byval hFile as HANDLE, byval lpFileSizeHigh as LPDWORD) as DWORD
declare function GetFileSizeEx(byval hFile as HANDLE, byval lpFileSize as PLARGE_INTEGER) as WINBOOL
declare function GetFileTime(byval hFile as HANDLE, byval lpCreationTime as LPFILETIME, byval lpLastAccessTime as LPFILETIME, byval lpLastWriteTime as LPFILETIME) as WINBOOL
declare function GetFileType(byval hFile as HANDLE) as DWORD
declare function GetFullPathNameA(byval lpFileName as LPCSTR, byval nBufferLength as DWORD, byval lpBuffer as LPSTR, byval lpFilePart as LPSTR ptr) as DWORD
declare function GetFullPathNameW(byval lpFileName as LPCWSTR, byval nBufferLength as DWORD, byval lpBuffer as LPWSTR, byval lpFilePart as LPWSTR ptr) as DWORD
declare function GetLogicalDrives() as DWORD
declare function GetLogicalDriveStringsW(byval nBufferLength as DWORD, byval lpBuffer as LPWSTR) as DWORD
declare function GetLongPathNameA(byval lpszShortPath as LPCSTR, byval lpszLongPath as LPSTR, byval cchBuffer as DWORD) as DWORD
declare function GetLongPathNameW(byval lpszShortPath as LPCWSTR, byval lpszLongPath as LPWSTR, byval cchBuffer as DWORD) as DWORD
declare function GetShortPathNameW(byval lpszLongPath as LPCWSTR, byval lpszShortPath as LPWSTR, byval cchBuffer as DWORD) as DWORD
declare function GetTempFileNameW(byval lpPathName as LPCWSTR, byval lpPrefixString as LPCWSTR, byval uUnique as UINT, byval lpTempFileName as LPWSTR) as UINT
declare function GetVolumeInformationW(byval lpRootPathName as LPCWSTR, byval lpVolumeNameBuffer as LPWSTR, byval nVolumeNameSize as DWORD, byval lpVolumeSerialNumber as LPDWORD, byval lpMaximumComponentLength as LPDWORD, byval lpFileSystemFlags as LPDWORD, byval lpFileSystemNameBuffer as LPWSTR, byval nFileSystemNameSize as DWORD) as WINBOOL
declare function GetVolumePathNameW(byval lpszFileName as LPCWSTR, byval lpszVolumePathName as LPWSTR, byval cchBufferLength as DWORD) as WINBOOL
declare function LocalFileTimeToFileTime(byval lpLocalFileTime as const FILETIME ptr, byval lpFileTime as LPFILETIME) as WINBOOL
declare function LockFile(byval hFile as HANDLE, byval dwFileOffsetLow as DWORD, byval dwFileOffsetHigh as DWORD, byval nNumberOfBytesToLockLow as DWORD, byval nNumberOfBytesToLockHigh as DWORD) as WINBOOL
declare function QueryDosDeviceW(byval lpDeviceName as LPCWSTR, byval lpTargetPath as LPWSTR, byval ucchMax as DWORD) as DWORD
declare function ReadFileEx(byval hFile as HANDLE, byval lpBuffer as LPVOID, byval nNumberOfBytesToRead as DWORD, byval lpOverlapped as LPOVERLAPPED, byval lpCompletionRoutine as LPOVERLAPPED_COMPLETION_ROUTINE) as WINBOOL
declare function ReadFileScatter(byval hFile as HANDLE, byval aSegmentArray as FILE_SEGMENT_ELEMENT ptr, byval nNumberOfBytesToRead as DWORD, byval lpReserved as LPDWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function SetFilePointer(byval hFile as HANDLE, byval lDistanceToMove as LONG, byval lpDistanceToMoveHigh as PLONG, byval dwMoveMethod as DWORD) as DWORD
declare function SetFileTime(byval hFile as HANDLE, byval lpCreationTime as const FILETIME ptr, byval lpLastAccessTime as const FILETIME ptr, byval lpLastWriteTime as const FILETIME ptr) as WINBOOL
declare function SetFileValidData(byval hFile as HANDLE, byval ValidDataLength as LONGLONG) as WINBOOL
declare function UnlockFile(byval hFile as HANDLE, byval dwFileOffsetLow as DWORD, byval dwFileOffsetHigh as DWORD, byval nNumberOfBytesToUnlockLow as DWORD, byval nNumberOfBytesToUnlockHigh as DWORD) as WINBOOL
declare function WriteFileEx(byval hFile as HANDLE, byval lpBuffer as LPCVOID, byval nNumberOfBytesToWrite as DWORD, byval lpOverlapped as LPOVERLAPPED, byval lpCompletionRoutine as LPOVERLAPPED_COMPLETION_ROUTINE) as WINBOOL
declare function WriteFileGather(byval hFile as HANDLE, byval aSegmentArray as FILE_SEGMENT_ELEMENT ptr, byval nNumberOfBytesToWrite as DWORD, byval lpReserved as LPDWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function GetTempPathW(byval nBufferLength as DWORD, byval lpBuffer as LPWSTR) as DWORD
declare function GetVolumeNameForVolumeMountPointW(byval lpszVolumeMountPoint as LPCWSTR, byval lpszVolumeName as LPWSTR, byval cchBufferLength as DWORD) as WINBOOL
declare function GetVolumePathNamesForVolumeNameW(byval lpszVolumeName as LPCWSTR, byval lpszVolumePathNames as LPWCH, byval cchBufferLength as DWORD, byval lpcchReturnLength as PDWORD) as WINBOOL


 declare function CreateFile alias "CreateFileA"(byval lpFileName as LPCSTR, byval dwDesiredAccess as DWORD, byval dwShareMode as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval dwCreationDisposition as DWORD, byval dwFlagsAndAttributes as DWORD, byval hTemplateFile as HANDLE) as HANDLE
 declare function FindFirstChangeNotification alias "FindFirstChangeNotificationA"(byval lpPathName as LPCSTR, byval bWatchSubtree as WINBOOL, byval dwNotifyFilter as DWORD) as HANDLE
 declare function FindFirstFile alias "FindFirstFileA"(byval lpFileName as LPCSTR, byval lpFindFileData as LPWIN32_FIND_DATAA) as HANDLE
 declare function GetDiskFreeSpace alias "GetDiskFreeSpaceA"(byval lpRootPathName as LPCSTR, byval lpSectorsPerCluster as LPDWORD, byval lpBytesPerSector as LPDWORD, byval lpNumberOfFreeClusters as LPDWORD, byval lpTotalNumberOfClusters as LPDWORD) as WINBOOL
 declare function GetDriveType alias "GetDriveTypeA"(byval lpRootPathName as LPCSTR) as UINT
 declare function GetFileAttributes alias "GetFileAttributesA"(byval lpFileName as LPCSTR) as DWORD
 declare function GetFullPathName alias "GetFullPathNameA"(byval lpFileName as LPCSTR, byval nBufferLength as DWORD, byval lpBuffer as LPSTR, byval lpFilePart as LPSTR ptr) as DWORD
 declare function GetLongPathName alias "GetLongPathNameA"(byval lpszShortPath as LPCSTR, byval lpszLongPath as LPSTR, byval cchBuffer as DWORD) as DWORD


type _WIN32_FILE_ATTRIBUTE_DATA
 dwFileAttributes as DWORD
 ftCreationTime as FILETIME
 ftLastAccessTime as FILETIME
 ftLastWriteTime as FILETIME
 nFileSizeHigh as DWORD
 nFileSizeLow as DWORD
end type

type WIN32_FILE_ATTRIBUTE_DATA as _WIN32_FILE_ATTRIBUTE_DATA
type LPWIN32_FILE_ATTRIBUTE_DATA as _WIN32_FILE_ATTRIBUTE_DATA ptr


declare function CreateDirectoryA(byval lpPathName as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL
declare function CreateDirectoryW(byval lpPathName as LPCWSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL
declare function DeleteFileA(byval lpFileName as LPCSTR) as WINBOOL
declare function DeleteFileW(byval lpFileName as LPCWSTR) as WINBOOL
declare function FindClose(byval hFindFile as HANDLE) as WINBOOL
declare function FindFirstFileExA(byval lpFileName as LPCSTR, byval fInfoLevelId as FINDEX_INFO_LEVELS, byval lpFindFileData as LPVOID, byval fSearchOp as FINDEX_SEARCH_OPS, byval lpSearchFilter as LPVOID, byval dwAdditionalFlags as DWORD) as HANDLE
declare function FindFirstFileExW(byval lpFileName as LPCWSTR, byval fInfoLevelId as FINDEX_INFO_LEVELS, byval lpFindFileData as LPVOID, byval fSearchOp as FINDEX_SEARCH_OPS, byval lpSearchFilter as LPVOID, byval dwAdditionalFlags as DWORD) as HANDLE
declare function FindNextFileA(byval hFindFile as HANDLE, byval lpFindFileData as LPWIN32_FIND_DATAA) as WINBOOL
declare function FindNextFileW(byval hFindFile as HANDLE, byval lpFindFileData as LPWIN32_FIND_DATAW) as WINBOOL
declare function FlushFileBuffers(byval hFile as HANDLE) as WINBOOL
declare function GetDiskFreeSpaceExA(byval lpDirectoryName as LPCSTR, byval lpFreeBytesAvailableToCaller as PULARGE_INTEGER, byval lpTotalNumberOfBytes as PULARGE_INTEGER, byval lpTotalNumberOfFreeBytes as PULARGE_INTEGER) as WINBOOL
declare function GetDiskFreeSpaceExW(byval lpDirectoryName as LPCWSTR, byval lpFreeBytesAvailableToCaller as PULARGE_INTEGER, byval lpTotalNumberOfBytes as PULARGE_INTEGER, byval lpTotalNumberOfFreeBytes as PULARGE_INTEGER) as WINBOOL
declare function GetFileAttributesExA(byval lpFileName as LPCSTR, byval fInfoLevelId as GET_FILEEX_INFO_LEVELS, byval lpFileInformation as LPVOID) as WINBOOL
declare function GetFileAttributesExW(byval lpFileName as LPCWSTR, byval fInfoLevelId as GET_FILEEX_INFO_LEVELS, byval lpFileInformation as LPVOID) as WINBOOL
declare function LockFileEx(byval hFile as HANDLE, byval dwFlags as DWORD, byval dwReserved as DWORD, byval nNumberOfBytesToLockLow as DWORD, byval nNumberOfBytesToLockHigh as DWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function ReadFile(byval hFile as HANDLE, byval lpBuffer as LPVOID, byval nNumberOfBytesToRead as DWORD, byval lpNumberOfBytesRead as LPDWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function RemoveDirectoryA(byval lpPathName as LPCSTR) as WINBOOL
declare function RemoveDirectoryW(byval lpPathName as LPCWSTR) as WINBOOL
declare function SetEndOfFile(byval hFile as HANDLE) as WINBOOL
declare function SetFileAttributesA(byval lpFileName as LPCSTR, byval dwFileAttributes as DWORD) as WINBOOL
declare function SetFileAttributesW(byval lpFileName as LPCWSTR, byval dwFileAttributes as DWORD) as WINBOOL
declare function SetFilePointerEx(byval hFile as HANDLE, byval liDistanceToMove as LARGE_INTEGER, byval lpNewFilePointer as PLARGE_INTEGER, byval dwMoveMethod as DWORD) as WINBOOL
declare function UnlockFileEx(byval hFile as HANDLE, byval dwReserved as DWORD, byval nNumberOfBytesToUnlockLow as DWORD, byval nNumberOfBytesToUnlockHigh as DWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function WriteFile(byval hFile as HANDLE, byval lpBuffer as LPCVOID, byval nNumberOfBytesToWrite as DWORD, byval lpNumberOfBytesWritten as LPDWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL


 declare function CreateDirectory alias "CreateDirectoryA"(byval lpPathName as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL
 declare function DeleteFile alias "DeleteFileA"(byval lpFileName as LPCSTR) as WINBOOL
 declare function FindFirstFileEx alias "FindFirstFileExA"(byval lpFileName as LPCSTR, byval fInfoLevelId as FINDEX_INFO_LEVELS, byval lpFindFileData as LPVOID, byval fSearchOp as FINDEX_SEARCH_OPS, byval lpSearchFilter as LPVOID, byval dwAdditionalFlags as DWORD) as HANDLE
 declare function FindNextFile alias "FindNextFileA"(byval hFindFile as HANDLE, byval lpFindFileData as LPWIN32_FIND_DATAA) as WINBOOL
 declare function GetDiskFreeSpaceEx alias "GetDiskFreeSpaceExA"(byval lpDirectoryName as LPCSTR, byval lpFreeBytesAvailableToCaller as PULARGE_INTEGER, byval lpTotalNumberOfBytes as PULARGE_INTEGER, byval lpTotalNumberOfFreeBytes as PULARGE_INTEGER) as WINBOOL
 declare function GetFileAttributesEx alias "GetFileAttributesExA"(byval lpFileName as LPCSTR, byval fInfoLevelId as GET_FILEEX_INFO_LEVELS, byval lpFileInformation as LPVOID) as WINBOOL
 declare function RemoveDirectory alias "RemoveDirectoryA"(byval lpPathName as LPCSTR) as WINBOOL
 declare function SetFileAttributes alias "SetFileAttributesA"(byval lpFileName as LPCSTR, byval dwFileAttributes as DWORD) as WINBOOL



const INVALID_HANDLE_VALUE = cast(HANDLE, cast(LONG_PTR, -1))
declare function CloseHandle(byval hObject as HANDLE) as WINBOOL
declare function DuplicateHandle(byval hSourceProcessHandle as HANDLE, byval hSourceHandle as HANDLE, byval hTargetProcessHandle as HANDLE, byval lpTargetHandle as LPHANDLE, byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval dwOptions as DWORD) as WINBOOL
declare function GetHandleInformation(byval hObject as HANDLE, byval lpdwFlags as LPDWORD) as WINBOOL
declare function SetHandleInformation(byval hObject as HANDLE, byval dwMask as DWORD, byval dwFlags as DWORD) as WINBOOL

type _HEAP_SUMMARY
 cb as DWORD
 cbAllocated as SIZE_T_
 cbCommitted as SIZE_T_
 cbReserved as SIZE_T_
 cbMaxReserve as SIZE_T_
end type

type HEAP_SUMMARY as _HEAP_SUMMARY
type PHEAP_SUMMARY as _HEAP_SUMMARY ptr
type LPHEAP_SUMMARY as PHEAP_SUMMARY

declare function HeapCreate(byval flOptions as DWORD, byval dwInitialSize as SIZE_T_, byval dwMaximumSize as SIZE_T_) as HANDLE
declare function HeapDestroy(byval hHeap as HANDLE) as WINBOOL
declare function HeapValidate(byval hHeap as HANDLE, byval dwFlags as DWORD, byval lpMem as LPCVOID) as WINBOOL
declare function HeapCompact(byval hHeap as HANDLE, byval dwFlags as DWORD) as SIZE_T_
declare function HeapSummary(byval hHeap as HANDLE, byval dwFlags as DWORD, byval lpSummary as LPHEAP_SUMMARY) as WINBOOL
declare function GetProcessHeaps(byval NumberOfHeaps as DWORD, byval ProcessHeaps as PHANDLE) as DWORD
declare function HeapLock(byval hHeap as HANDLE) as WINBOOL
declare function HeapUnlock(byval hHeap as HANDLE) as WINBOOL
declare function HeapWalk(byval hHeap as HANDLE, byval lpEntry as LPPROCESS_HEAP_ENTRY) as WINBOOL
declare function HeapSetInformation(byval HeapHandle as HANDLE, byval HeapInformationClass as HEAP_INFORMATION_CLASS, byval HeapInformation as PVOID, byval HeapInformationLength as SIZE_T_) as WINBOOL
declare function HeapQueryInformation(byval HeapHandle as HANDLE, byval HeapInformationClass as HEAP_INFORMATION_CLASS, byval HeapInformation as PVOID, byval HeapInformationLength as SIZE_T_, byval ReturnLength as PSIZE_T) as WINBOOL
declare function HeapAlloc(byval hHeap as HANDLE, byval dwFlags as DWORD, byval dwBytes as SIZE_T_) as LPVOID
declare function HeapReAlloc(byval hHeap as HANDLE, byval dwFlags as DWORD, byval lpMem as LPVOID, byval dwBytes as SIZE_T_) as LPVOID
declare function HeapFree(byval hHeap as HANDLE, byval dwFlags as DWORD, byval lpMem as LPVOID) as WINBOOL
declare function HeapSize(byval hHeap as HANDLE, byval dwFlags as DWORD, byval lpMem as LPCVOID) as SIZE_T_
declare function GetProcessHeap() as HANDLE
declare function GetOverlappedResult(byval hFile as HANDLE, byval lpOverlapped as LPOVERLAPPED, byval lpNumberOfBytesTransferred as LPDWORD, byval bWait as WINBOOL) as WINBOOL
declare function CreateIoCompletionPort(byval FileHandle as HANDLE, byval ExistingCompletionPort as HANDLE, byval CompletionKey as ULONG_PTR, byval NumberOfConcurrentThreads as DWORD) as HANDLE
declare function GetQueuedCompletionStatus(byval CompletionPort as HANDLE, byval lpNumberOfBytesTransferred as LPDWORD, byval lpCompletionKey as PULONG_PTR, byval lpOverlapped as LPOVERLAPPED ptr, byval dwMilliseconds as DWORD) as WINBOOL
declare function PostQueuedCompletionStatus(byval CompletionPort as HANDLE, byval dwNumberOfBytesTransferred as DWORD, byval dwCompletionKey as ULONG_PTR, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function DeviceIoControl(byval hDevice as HANDLE, byval dwIoControlCode as DWORD, byval lpInBuffer as LPVOID, byval nInBufferSize as DWORD, byval lpOutBuffer as LPVOID, byval nOutBufferSize as DWORD, byval lpBytesReturned as LPDWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function CancelIo(byval hFile as HANDLE) as WINBOOL


declare function GetOverlappedResultEx(byval hFile as HANDLE, byval lpOverlapped as LPOVERLAPPED, byval lpNumberOfBytesTransferred as LPDWORD, byval dwMilliseconds as DWORD, byval bAlertable as WINBOOL) as WINBOOL


declare sub InitializeSListHead(byval ListHead as PSLIST_HEADER)
declare function InterlockedPopEntrySList(byval ListHead as PSLIST_HEADER) as PSLIST_ENTRY
declare function InterlockedPushEntrySList(byval ListHead as PSLIST_HEADER, byval ListEntry as PSLIST_ENTRY) as PSLIST_ENTRY
declare function InterlockedFlushSList(byval ListHead as PSLIST_HEADER) as PSLIST_ENTRY
declare function QueryDepthSList(byval ListHead as PSLIST_HEADER) as USHORT


declare function IsProcessInJob(byval ProcessHandle as HANDLE, byval JobHandle as HANDLE, byval Result as PBOOL) as WINBOOL

type tagENUMUILANG
 NumOfEnumUILang as ULONG
 SizeOfEnumUIBuffer as ULONG
 pEnumUIBuffer as LANGID ptr
end type

type ENUMUILANG as tagENUMUILANG
type PENUMUILANG as tagENUMUILANG ptr
type ENUMRESLANGPROCA as function(byval hModule as HMODULE, byval lpType as LPCSTR, byval lpName as LPCSTR, byval wLanguage as WORD, byval lParam as LONG_PTR) as WINBOOL
type ENUMRESLANGPROCW as function(byval hModule as HMODULE, byval lpType as LPCWSTR, byval lpName as LPCWSTR, byval wLanguage as WORD, byval lParam as LONG_PTR) as WINBOOL
type ENUMRESNAMEPROCA as function(byval hModule as HMODULE, byval lpType as LPCSTR, byval lpName as LPSTR, byval lParam as LONG_PTR) as WINBOOL
type ENUMRESNAMEPROCW as function(byval hModule as HMODULE, byval lpType as LPCWSTR, byval lpName as LPWSTR, byval lParam as LONG_PTR) as WINBOOL
type ENUMRESTYPEPROCA as function(byval hModule as HMODULE, byval lpType as LPSTR, byval lParam as LONG_PTR) as WINBOOL
type ENUMRESTYPEPROCW as function(byval hModule as HMODULE, byval lpType as LPWSTR, byval lParam as LONG_PTR) as WINBOOL
type PGET_MODULE_HANDLE_EXA as function(byval dwFlags as DWORD, byval lpModuleName as LPCSTR, byval phModule as HMODULE ptr) as WINBOOL
type PGET_MODULE_HANDLE_EXW as function(byval dwFlags as DWORD, byval lpModuleName as LPCWSTR, byval phModule as HMODULE ptr) as WINBOOL
type DLL_DIRECTORY_COOKIE as PVOID
type PDLL_DIRECTORY_COOKIE as PVOID ptr

const FIND_RESOURCE_DIRECTORY_TYPES = &h0100
const FIND_RESOURCE_DIRECTORY_NAMES = &h0200
const FIND_RESOURCE_DIRECTORY_LANGUAGES = &h0400
const RESOURCE_ENUM_LN = &h0001
const RESOURCE_ENUM_MUI = &h0002
const RESOURCE_ENUM_MUI_SYSTEM = &h0004
const RESOURCE_ENUM_VALIDATE = &h0008
const RESOURCE_ENUM_MODULE_EXACT = &h0010
const SUPPORT_LANG_NUMBER = 32
const DONT_RESOLVE_DLL_REFERENCES = &h1
const LOAD_LIBRARY_AS_DATAFILE = &h2
const LOAD_WITH_ALTERED_SEARCH_PATH = &h8
const LOAD_IGNORE_CODE_AUTHZ_LEVEL = &h10
const LOAD_LIBRARY_AS_IMAGE_RESOURCE = &h20
const LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE = &h40
const LOAD_LIBRARY_REQUIRE_SIGNED_TARGET = &h80
const LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR = &h100
const LOAD_LIBRARY_SEARCH_APPLICATION_DIR = &h200
const LOAD_LIBRARY_SEARCH_USER_DIRS = &h400
const LOAD_LIBRARY_SEARCH_SYSTEM32 = &h800
const LOAD_LIBRARY_SEARCH_DEFAULT_DIRS = &h1000
const GET_MODULE_HANDLE_EX_FLAG_PIN = &h1
const GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT = &h2
const GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS = &h4

 type ENUMRESLANGPROC as ENUMRESLANGPROCA
 type ENUMRESNAMEPROC as ENUMRESNAMEPROCA
 type ENUMRESTYPEPROC as ENUMRESTYPEPROCA

declare function FindResourceExW(byval hModule as HMODULE, byval lpType as LPCWSTR, byval lpName as LPCWSTR, byval wLanguage as WORD) as HRSRC
declare sub FreeLibraryAndExitThread(byval hLibModule as HMODULE, byval dwExitCode as DWORD)
declare function FreeResource(byval hResData as HGLOBAL) as WINBOOL
declare function GetModuleFileNameA(byval hModule as HMODULE, byval lpFilename as LPSTR, byval nSize as DWORD) as DWORD
declare function GetModuleFileNameW(byval hModule as HMODULE, byval lpFilename as LPWSTR, byval nSize as DWORD) as DWORD
declare function GetModuleHandleA(byval lpModuleName as LPCSTR) as HMODULE
declare function GetModuleHandleW(byval lpModuleName as LPCWSTR) as HMODULE
declare function LoadLibraryExA(byval lpLibFileName as LPCSTR, byval hFile as HANDLE, byval dwFlags as DWORD) as HMODULE
declare function LoadLibraryExW(byval lpLibFileName as LPCWSTR, byval hFile as HANDLE, byval dwFlags as DWORD) as HMODULE
declare function LoadResource(byval hModule as HMODULE, byval hResInfo as HRSRC) as HGLOBAL
declare function LoadStringA(byval hInstance as HINSTANCE, byval uID as UINT, byval lpBuffer as LPSTR, byval cchBufferMax as long) as long
declare function LoadStringW(byval hInstance as HINSTANCE, byval uID as UINT, byval lpBuffer as LPWSTR, byval cchBufferMax as long) as long
declare function LockResource(byval hResData as HGLOBAL) as LPVOID
declare function SizeofResource(byval hModule as HMODULE, byval hResInfo as HRSRC) as DWORD
declare function AddDllDirectory(byval NewDirectory as PCWSTR) as DLL_DIRECTORY_COOKIE
declare function RemoveDllDirectory(byval Cookie as DLL_DIRECTORY_COOKIE) as WINBOOL
declare function SetDefaultDllDirectories(byval DirectoryFlags as DWORD) as WINBOOL
declare function GetModuleHandleExA(byval dwFlags as DWORD, byval lpModuleName as LPCSTR, byval phModule as HMODULE ptr) as WINBOOL
declare function GetModuleHandleExW(byval dwFlags as DWORD, byval lpModuleName as LPCWSTR, byval phModule as HMODULE ptr) as WINBOOL

 type PGET_MODULE_HANDLE_EX as PGET_MODULE_HANDLE_EXA
 declare function GetModuleHandleEx alias "GetModuleHandleExA"(byval dwFlags as DWORD, byval lpModuleName as LPCSTR, byval phModule as HMODULE ptr) as WINBOOL
 declare function LoadString alias "LoadStringA"(byval hInstance as HINSTANCE, byval uID as UINT, byval lpBuffer as LPSTR, byval cchBufferMax as long) as long
 declare function GetModuleFileName alias "GetModuleFileNameA"(byval hModule as HMODULE, byval lpFilename as LPSTR, byval nSize as DWORD) as DWORD
 declare function GetModuleHandle alias "GetModuleHandleA"(byval lpModuleName as LPCSTR) as HMODULE
 declare function LoadLibraryEx alias "LoadLibraryExA"(byval lpLibFileName as LPCSTR, byval hFile as HANDLE, byval dwFlags as DWORD) as HMODULE



declare function DisableThreadLibraryCalls(byval hLibModule as HMODULE) as WINBOOL
declare function FreeLibrary(byval hLibModule as HMODULE) as WINBOOL
declare function GetProcAddress(byval hModule as HMODULE, byval lpProcName as LPCSTR) as FARPROC



type _MEMORY_RESOURCE_NOTIFICATION_TYPE as long
enum
 LowMemoryResourceNotification
 HighMemoryResourceNotification
end enum

type MEMORY_RESOURCE_NOTIFICATION_TYPE as _MEMORY_RESOURCE_NOTIFICATION_TYPE


const FILE_MAP_WRITE = SECTION_MAP_WRITE
const FILE_MAP_READ = SECTION_MAP_READ
const FILE_MAP_ALL_ACCESS = SECTION_ALL_ACCESS
const FILE_MAP_COPY = &h1
const FILE_MAP_RESERVE = &h80000000

declare function VirtualQuery(byval lpAddress as LPCVOID, byval lpBuffer as PMEMORY_BASIC_INFORMATION, byval dwLength as SIZE_T_) as SIZE_T_
declare function FlushViewOfFile(byval lpBaseAddress as LPCVOID, byval dwNumberOfBytesToFlush as SIZE_T_) as WINBOOL
declare function UnmapViewOfFile(byval lpBaseAddress as LPCVOID) as WINBOOL
declare function CreateFileMappingFromApp(byval hFile as HANDLE, byval SecurityAttributes as PSECURITY_ATTRIBUTES, byval PageProtection as ULONG, byval MaximumSize as ULONG64, byval Name as PCWSTR) as HANDLE
declare function MapViewOfFileFromApp(byval hFileMappingObject as HANDLE, byval DesiredAccess as ULONG, byval FileOffset as ULONG64, byval NumberOfBytesToMap as SIZE_T_) as PVOID

const FILE_MAP_EXECUTE = SECTION_MAP_EXECUTE_EXPLICIT
const FILE_CACHE_MAX_HARD_ENABLE = &h00000001
const FILE_CACHE_MAX_HARD_DISABLE = &h00000002
const FILE_CACHE_MIN_HARD_ENABLE = &h00000004
const FILE_CACHE_MIN_HARD_DISABLE = &h00000008

declare function VirtualAlloc(byval lpAddress as LPVOID, byval dwSize as SIZE_T_, byval flAllocationType as DWORD, byval flProtect as DWORD) as LPVOID
declare function VirtualFree(byval lpAddress as LPVOID, byval dwSize as SIZE_T_, byval dwFreeType as DWORD) as WINBOOL
declare function VirtualProtect(byval lpAddress as LPVOID, byval dwSize as SIZE_T_, byval flNewProtect as DWORD, byval lpflOldProtect as PDWORD) as WINBOOL
declare function VirtualAllocEx(byval hProcess as HANDLE, byval lpAddress as LPVOID, byval dwSize as SIZE_T_, byval flAllocationType as DWORD, byval flProtect as DWORD) as LPVOID
declare function VirtualFreeEx(byval hProcess as HANDLE, byval lpAddress as LPVOID, byval dwSize as SIZE_T_, byval dwFreeType as DWORD) as WINBOOL
declare function VirtualProtectEx(byval hProcess as HANDLE, byval lpAddress as LPVOID, byval dwSize as SIZE_T_, byval flNewProtect as DWORD, byval lpflOldProtect as PDWORD) as WINBOOL
declare function VirtualQueryEx(byval hProcess as HANDLE, byval lpAddress as LPCVOID, byval lpBuffer as PMEMORY_BASIC_INFORMATION, byval dwLength as SIZE_T_) as SIZE_T_
declare function ReadProcessMemory(byval hProcess as HANDLE, byval lpBaseAddress as LPCVOID, byval lpBuffer as LPVOID, byval nSize as SIZE_T_, byval lpNumberOfBytesRead as SIZE_T_ ptr) as WINBOOL
declare function WriteProcessMemory(byval hProcess as HANDLE, byval lpBaseAddress as LPVOID, byval lpBuffer as LPCVOID, byval nSize as SIZE_T_, byval lpNumberOfBytesWritten as SIZE_T_ ptr) as WINBOOL
declare function CreateFileMappingW(byval hFile as HANDLE, byval lpFileMappingAttributes as LPSECURITY_ATTRIBUTES, byval flProtect as DWORD, byval dwMaximumSizeHigh as DWORD, byval dwMaximumSizeLow as DWORD, byval lpName as LPCWSTR) as HANDLE
declare function OpenFileMappingW(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCWSTR) as HANDLE
declare function MapViewOfFile(byval hFileMappingObject as HANDLE, byval dwDesiredAccess as DWORD, byval dwFileOffsetHigh as DWORD, byval dwFileOffsetLow as DWORD, byval dwNumberOfBytesToMap as SIZE_T_) as LPVOID
declare function MapViewOfFileEx(byval hFileMappingObject as HANDLE, byval dwDesiredAccess as DWORD, byval dwFileOffsetHigh as DWORD, byval dwFileOffsetLow as DWORD, byval dwNumberOfBytesToMap as SIZE_T_, byval lpBaseAddress as LPVOID) as LPVOID
declare function GetLargePageMinimum() as SIZE_T_
declare function GetProcessWorkingSetSizeEx(byval hProcess as HANDLE, byval lpMinimumWorkingSetSize as PSIZE_T, byval lpMaximumWorkingSetSize as PSIZE_T, byval Flags as PDWORD) as WINBOOL
declare function SetProcessWorkingSetSizeEx(byval hProcess as HANDLE, byval dwMinimumWorkingSetSize as SIZE_T_, byval dwMaximumWorkingSetSize as SIZE_T_, byval Flags as DWORD) as WINBOOL
declare function VirtualLock(byval lpAddress as LPVOID, byval dwSize as SIZE_T_) as WINBOOL
declare function VirtualUnlock(byval lpAddress as LPVOID, byval dwSize as SIZE_T_) as WINBOOL
declare function GetWriteWatch(byval dwFlags as DWORD, byval lpBaseAddress as PVOID, byval dwRegionSize as SIZE_T_, byval lpAddresses as PVOID ptr, byval lpdwCount as ULONG_PTR ptr, byval lpdwGranularity as LPDWORD) as UINT
declare function ResetWriteWatch(byval lpBaseAddress as LPVOID, byval dwRegionSize as SIZE_T_) as UINT
declare function CreateMemoryResourceNotification(byval NotificationType as MEMORY_RESOURCE_NOTIFICATION_TYPE) as HANDLE
declare function QueryMemoryResourceNotification(byval ResourceNotificationHandle as HANDLE, byval ResourceState as PBOOL) as WINBOOL
declare function GetSystemFileCacheSize(byval lpMinimumFileCacheSize as PSIZE_T, byval lpMaximumFileCacheSize as PSIZE_T, byval lpFlags as PDWORD) as WINBOOL
declare function SetSystemFileCacheSize(byval MinimumFileCacheSize as SIZE_T_, byval MaximumFileCacheSize as SIZE_T_, byval Flags as DWORD) as WINBOOL





declare function ImpersonateNamedPipeClient(byval hNamedPipe as HANDLE) as WINBOOL
declare function CreatePipe(byval hReadPipe as PHANDLE, byval hWritePipe as PHANDLE, byval lpPipeAttributes as LPSECURITY_ATTRIBUTES, byval nSize as DWORD) as WINBOOL
declare function ConnectNamedPipe(byval hNamedPipe as HANDLE, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function DisconnectNamedPipe(byval hNamedPipe as HANDLE) as WINBOOL
declare function SetNamedPipeHandleState(byval hNamedPipe as HANDLE, byval lpMode as LPDWORD, byval lpMaxCollectionCount as LPDWORD, byval lpCollectDataTimeout as LPDWORD) as WINBOOL
declare function PeekNamedPipe(byval hNamedPipe as HANDLE, byval lpBuffer as LPVOID, byval nBufferSize as DWORD, byval lpBytesRead as LPDWORD, byval lpTotalBytesAvail as LPDWORD, byval lpBytesLeftThisMessage as LPDWORD) as WINBOOL
declare function TransactNamedPipe(byval hNamedPipe as HANDLE, byval lpInBuffer as LPVOID, byval nInBufferSize as DWORD, byval lpOutBuffer as LPVOID, byval nOutBufferSize as DWORD, byval lpBytesRead as LPDWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function CreateNamedPipeW(byval lpName as LPCWSTR, byval dwOpenMode as DWORD, byval dwPipeMode as DWORD, byval nMaxInstances as DWORD, byval nOutBufferSize as DWORD, byval nInBufferSize as DWORD, byval nDefaultTimeOut as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as HANDLE
declare function WaitNamedPipeW(byval lpNamedPipeName as LPCWSTR, byval nTimeOut as DWORD) as WINBOOL



const PRIVATE_NAMESPACE_FLAG_DESTROY = &h1
declare function CreatePrivateNamespaceW(byval lpPrivateNamespaceAttributes as LPSECURITY_ATTRIBUTES, byval lpBoundaryDescriptor as LPVOID, byval lpAliasPrefix as LPCWSTR) as HANDLE
declare function OpenPrivateNamespaceW(byval lpBoundaryDescriptor as LPVOID, byval lpAliasPrefix as LPCWSTR) as HANDLE


declare function ClosePrivateNamespace(byval Handle as HANDLE, byval Flags as ULONG) as WINBOOLEAN
declare function CreateBoundaryDescriptorW(byval Name as LPCWSTR, byval Flags as ULONG) as HANDLE


declare function AddSIDToBoundaryDescriptor(byval BoundaryDescriptor as HANDLE ptr, byval RequiredSid as PSID) as WINBOOL
declare sub DeleteBoundaryDescriptor(byval BoundaryDescriptor as HANDLE)
declare function GetEnvironmentStringsA alias "GetEnvironmentStrings"() as LPCH
declare function GetEnvironmentStringsW() as LPWCH
declare function SetEnvironmentStringsW(byval NewEnvironment as LPWCH) as WINBOOL

 declare function GetEnvironmentStrings() as LPCH

declare function FreeEnvironmentStringsA(byval penv as LPCH) as WINBOOL
declare function FreeEnvironmentStringsW(byval penv as LPWCH) as WINBOOL
declare function GetStdHandle(byval nStdHandle as DWORD) as HANDLE
declare function SetStdHandle(byval nStdHandle as DWORD, byval hHandle as HANDLE) as WINBOOL


declare function GetCommandLineA() as LPSTR
declare function GetCommandLineW() as LPWSTR
declare function GetEnvironmentVariableA(byval lpName as LPCSTR, byval lpBuffer as LPSTR, byval nSize as DWORD) as DWORD
declare function GetEnvironmentVariableW(byval lpName as LPCWSTR, byval lpBuffer as LPWSTR, byval nSize as DWORD) as DWORD
declare function SetEnvironmentVariableA(byval lpName as LPCSTR, byval lpValue as LPCSTR) as WINBOOL
declare function SetEnvironmentVariableW(byval lpName as LPCWSTR, byval lpValue as LPCWSTR) as WINBOOL
declare function ExpandEnvironmentStringsA(byval lpSrc as LPCSTR, byval lpDst as LPSTR, byval nSize as DWORD) as DWORD
declare function ExpandEnvironmentStringsW(byval lpSrc as LPCWSTR, byval lpDst as LPWSTR, byval nSize as DWORD) as DWORD
declare function SetCurrentDirectoryA(byval lpPathName as LPCSTR) as WINBOOL
declare function SetCurrentDirectoryW(byval lpPathName as LPCWSTR) as WINBOOL
declare function GetCurrentDirectoryA(byval nBufferLength as DWORD, byval lpBuffer as LPSTR) as DWORD
declare function GetCurrentDirectoryW(byval nBufferLength as DWORD, byval lpBuffer as LPWSTR) as DWORD
declare function SearchPathW(byval lpPath as LPCWSTR, byval lpFileName as LPCWSTR, byval lpExtension as LPCWSTR, byval nBufferLength as DWORD, byval lpBuffer as LPWSTR, byval lpFilePart as LPWSTR ptr) as DWORD
declare function SearchPathA(byval lpPath as LPCSTR, byval lpFileName as LPCSTR, byval lpExtension as LPCSTR, byval nBufferLength as DWORD, byval lpBuffer as LPSTR, byval lpFilePart as LPSTR ptr) as DWORD
declare function NeedCurrentDirectoryForExePathA(byval ExeName as LPCSTR) as WINBOOL
declare function NeedCurrentDirectoryForExePathW(byval ExeName as LPCWSTR) as WINBOOL

 declare function ExpandEnvironmentStrings alias "ExpandEnvironmentStringsA"(byval lpSrc as LPCSTR, byval lpDst as LPSTR, byval nSize as DWORD) as DWORD
 declare function FreeEnvironmentStrings alias "FreeEnvironmentStringsA"(byval penv as LPCH) as WINBOOL
 declare function GetCommandLine alias "GetCommandLineA"() as LPSTR
 declare function GetCurrentDirectory alias "GetCurrentDirectoryA"(byval nBufferLength as DWORD, byval lpBuffer as LPSTR) as DWORD
 declare function GetEnvironmentVariable alias "GetEnvironmentVariableA"(byval lpName as LPCSTR, byval lpBuffer as LPSTR, byval nSize as DWORD) as DWORD
 declare function NeedCurrentDirectoryForExePath alias "NeedCurrentDirectoryForExePathA"(byval ExeName as LPCSTR) as WINBOOL
 declare function SearchPath alias "SearchPathA"(byval lpPath as LPCSTR, byval lpFileName as LPCSTR, byval lpExtension as LPCSTR, byval nBufferLength as DWORD, byval lpBuffer as LPSTR, byval lpFilePart as LPSTR ptr) as DWORD
 declare function SetCurrentDirectory alias "SetCurrentDirectoryA"(byval lpPathName as LPCSTR) as WINBOOL
 declare function SetEnvironmentVariable alias "SetEnvironmentVariableA"(byval lpName as LPCSTR, byval lpValue as LPCSTR) as WINBOOL


 const FLS_OUT_OF_INDEXES = cast(DWORD, &hffffffff)

const TLS_OUT_OF_INDEXES = cast(DWORD, &hffffffff)

type _PROCESS_INFORMATION
 hProcess as HANDLE
 hThread as HANDLE
 dwProcessId as DWORD
 dwThreadId as DWORD
end type

type PROCESS_INFORMATION as _PROCESS_INFORMATION
type PPROCESS_INFORMATION as _PROCESS_INFORMATION ptr
type LPPROCESS_INFORMATION as _PROCESS_INFORMATION ptr

type _STARTUPINFOA
 cb as DWORD
 lpReserved as LPSTR
 lpDesktop as LPSTR
 lpTitle as LPSTR
 dwX as DWORD
 dwY as DWORD
 dwXSize as DWORD
 dwYSize as DWORD
 dwXCountChars as DWORD
 dwYCountChars as DWORD
 dwFillAttribute as DWORD
 dwFlags as DWORD
 wShowWindow as WORD
 cbReserved2 as WORD
 lpReserved2 as LPBYTE
 hStdInput as HANDLE
 hStdOutput as HANDLE
 hStdError as HANDLE
end type

type STARTUPINFOA as _STARTUPINFOA
type LPSTARTUPINFOA as _STARTUPINFOA ptr

type _STARTUPINFOW
 cb as DWORD
 lpReserved as LPWSTR
 lpDesktop as LPWSTR
 lpTitle as LPWSTR
 dwX as DWORD
 dwY as DWORD
 dwXSize as DWORD
 dwYSize as DWORD
 dwXCountChars as DWORD
 dwYCountChars as DWORD
 dwFillAttribute as DWORD
 dwFlags as DWORD
 wShowWindow as WORD
 cbReserved2 as WORD
 lpReserved2 as LPBYTE
 hStdInput as HANDLE
 hStdOutput as HANDLE
 hStdError as HANDLE
end type

type STARTUPINFOW as _STARTUPINFOW
type LPSTARTUPINFOW as _STARTUPINFOW ptr

 type STARTUPINFO as STARTUPINFOA
 type LPSTARTUPINFO as LPSTARTUPINFOA

type PPROC_THREAD_ATTRIBUTE_LIST as _PROC_THREAD_ATTRIBUTE_LIST ptr
type LPPROC_THREAD_ATTRIBUTE_LIST as _PROC_THREAD_ATTRIBUTE_LIST ptr
declare function QueueUserAPC(byval pfnAPC as PAPCFUNC, byval hThread as HANDLE, byval dwData as ULONG_PTR) as DWORD
declare function GetProcessTimes(byval hProcess as HANDLE, byval lpCreationTime as LPFILETIME, byval lpExitTime as LPFILETIME, byval lpKernelTime as LPFILETIME, byval lpUserTime as LPFILETIME) as WINBOOL
declare sub ExitProcess(byval uExitCode as UINT)
declare function TerminateProcess(byval hProcess as HANDLE, byval uExitCode as UINT) as WINBOOL
declare function GetExitCodeProcess(byval hProcess as HANDLE, byval lpExitCode as LPDWORD) as WINBOOL
declare function SwitchToThread() as WINBOOL
declare function CreateRemoteThread(byval hProcess as HANDLE, byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval dwStackSize as SIZE_T_, byval lpStartAddress as LPTHREAD_START_ROUTINE, byval lpParameter as LPVOID, byval dwCreationFlags as DWORD, byval lpThreadId as LPDWORD) as HANDLE
declare function OpenThread(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval dwThreadId as DWORD) as HANDLE
declare function SetThreadPriorityBoost(byval hThread as HANDLE, byval bDisablePriorityBoost as WINBOOL) as WINBOOL
declare function GetThreadPriorityBoost(byval hThread as HANDLE, byval pDisablePriorityBoost as PBOOL) as WINBOOL
declare function TerminateThread(byval hThread as HANDLE, byval dwExitCode as DWORD) as WINBOOL
declare function SetProcessShutdownParameters(byval dwLevel as DWORD, byval dwFlags as DWORD) as WINBOOL
declare function GetProcessVersion(byval ProcessId as DWORD) as DWORD
declare sub GetStartupInfoW(byval lpStartupInfo as LPSTARTUPINFOW)
declare function SetThreadToken(byval Thread as PHANDLE, byval Token as HANDLE) as WINBOOL
declare function OpenProcessToken(byval ProcessHandle as HANDLE, byval DesiredAccess as DWORD, byval TokenHandle as PHANDLE) as WINBOOL
declare function OpenThreadToken(byval ThreadHandle as HANDLE, byval DesiredAccess as DWORD, byval OpenAsSelf as WINBOOL, byval TokenHandle as PHANDLE) as WINBOOL
declare function SetPriorityClass(byval hProcess as HANDLE, byval dwPriorityClass as DWORD) as WINBOOL
declare function SetThreadStackGuarantee(byval StackSizeInBytes as PULONG) as WINBOOL
declare function GetPriorityClass(byval hProcess as HANDLE) as DWORD
declare function ProcessIdToSessionId(byval dwProcessId as DWORD, byval pSessionId as DWORD ptr) as WINBOOL
declare function GetProcessId(byval Process as HANDLE) as DWORD
declare function GetThreadId(byval Thread as HANDLE) as DWORD
declare function CreateRemoteThreadEx(byval hProcess as HANDLE, byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval dwStackSize as SIZE_T_, byval lpStartAddress as LPTHREAD_START_ROUTINE, byval lpParameter as LPVOID, byval dwCreationFlags as DWORD, byval lpAttributeList as LPPROC_THREAD_ATTRIBUTE_LIST, byval lpThreadId as LPDWORD) as HANDLE
declare function GetThreadContext(byval hThread as HANDLE, byval lpContext as LPCONTEXT) as WINBOOL
declare function SetThreadContext(byval hThread as HANDLE, byval lpContext as const CONTEXT ptr) as WINBOOL
declare function FlushInstructionCache(byval hProcess as HANDLE, byval lpBaseAddress as LPCVOID, byval dwSize as SIZE_T_) as WINBOOL
declare function GetThreadTimes(byval hThread as HANDLE, byval lpCreationTime as LPFILETIME, byval lpExitTime as LPFILETIME, byval lpKernelTime as LPFILETIME, byval lpUserTime as LPFILETIME) as WINBOOL
declare function OpenProcess(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval dwProcessId as DWORD) as HANDLE
declare function GetProcessHandleCount(byval hProcess as HANDLE, byval pdwHandleCount as PDWORD) as WINBOOL
declare function GetCurrentProcessorNumber() as DWORD


declare function CreateProcessA(byval lpApplicationName as LPCSTR, byval lpCommandLine as LPSTR, byval lpProcessAttributes as LPSECURITY_ATTRIBUTES, byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval bInheritHandles as WINBOOL, byval dwCreationFlags as DWORD, byval lpEnvironment as LPVOID, byval lpCurrentDirectory as LPCSTR, byval lpStartupInfo as LPSTARTUPINFOA, byval lpProcessInformation as LPPROCESS_INFORMATION) as WINBOOL
declare function CreateProcessW(byval lpApplicationName as LPCWSTR, byval lpCommandLine as LPWSTR, byval lpProcessAttributes as LPSECURITY_ATTRIBUTES, byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval bInheritHandles as WINBOOL, byval dwCreationFlags as DWORD, byval lpEnvironment as LPVOID, byval lpCurrentDirectory as LPCWSTR, byval lpStartupInfo as LPSTARTUPINFOW, byval lpProcessInformation as LPPROCESS_INFORMATION) as WINBOOL

 declare function CreateProcess alias "CreateProcessA"(byval lpApplicationName as LPCSTR, byval lpCommandLine as LPSTR, byval lpProcessAttributes as LPSECURITY_ATTRIBUTES, byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval bInheritHandles as WINBOOL, byval dwCreationFlags as DWORD, byval lpEnvironment as LPVOID, byval lpCurrentDirectory as LPCSTR, byval lpStartupInfo as LPSTARTUPINFOA, byval lpProcessInformation as LPPROCESS_INFORMATION) as WINBOOL

declare function CreateProcessAsUserW(byval hToken as HANDLE, byval lpApplicationName as LPCWSTR, byval lpCommandLine as LPWSTR, byval lpProcessAttributes as LPSECURITY_ATTRIBUTES, byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval bInheritHandles as WINBOOL, byval dwCreationFlags as DWORD, byval lpEnvironment as LPVOID, byval lpCurrentDirectory as LPCWSTR, byval lpStartupInfo as LPSTARTUPINFOW, byval lpProcessInformation as LPPROCESS_INFORMATION) as WINBOOL





declare function GetCurrentProcess() as HANDLE
declare function GetCurrentProcessId() as DWORD
declare function GetCurrentThread() as HANDLE
declare function GetCurrentThreadId() as DWORD
declare function IsProcessorFeaturePresent(byval ProcessorFeature as DWORD) as WINBOOL


declare function CreateThread(byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval dwStackSize as SIZE_T_, byval lpStartAddress as LPTHREAD_START_ROUTINE, byval lpParameter as LPVOID, byval dwCreationFlags as DWORD, byval lpThreadId as LPDWORD) as HANDLE
declare function SetThreadPriority(byval hThread as HANDLE, byval nPriority as long) as WINBOOL
declare function GetThreadPriority(byval hThread as HANDLE) as long
declare sub ExitThread(byval dwExitCode as DWORD)
declare function GetExitCodeThread(byval hThread as HANDLE, byval lpExitCode as LPDWORD) as WINBOOL
declare function SuspendThread(byval hThread as HANDLE) as DWORD
declare function ResumeThread(byval hThread as HANDLE) as DWORD
declare function TlsAlloc() as DWORD
declare function TlsGetValue(byval dwTlsIndex as DWORD) as LPVOID
declare function TlsSetValue(byval dwTlsIndex as DWORD, byval lpTlsValue as LPVOID) as WINBOOL
declare function TlsFree(byval dwTlsIndex as DWORD) as WINBOOL




declare function QueryPerformanceCounter(byval lpPerformanceCount as LARGE_INTEGER ptr) as WINBOOL
declare function QueryPerformanceFrequency(byval lpFrequency as LARGE_INTEGER ptr) as WINBOOL





declare function AccessCheck(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval PrivilegeSet as PPRIVILEGE_SET, byval PrivilegeSetLength as LPDWORD, byval GrantedAccess as LPDWORD, byval AccessStatus as LPBOOL) as WINBOOL
declare function AccessCheckAndAuditAlarmW(byval SubsystemName as LPCWSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPWSTR, byval ObjectName as LPWSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval DesiredAccess as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatus as LPBOOL, byval pfGenerateOnClose as LPBOOL) as WINBOOL


declare function AccessCheckByType(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval PrivilegeSet as PPRIVILEGE_SET, byval PrivilegeSetLength as LPDWORD, byval GrantedAccess as LPDWORD, byval AccessStatus as LPBOOL) as WINBOOL
declare function AccessCheckByTypeResultList(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval PrivilegeSet as PPRIVILEGE_SET, byval PrivilegeSetLength as LPDWORD, byval GrantedAccessList as LPDWORD, byval AccessStatusList as LPDWORD) as WINBOOL
declare function AccessCheckByTypeAndAuditAlarmW(byval SubsystemName as LPCWSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPCWSTR, byval ObjectName as LPCWSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatus as LPBOOL, byval pfGenerateOnClose as LPBOOL) as WINBOOL


declare function AccessCheckByTypeResultListAndAuditAlarmW(byval SubsystemName as LPCWSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPCWSTR, byval ObjectName as LPCWSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccessList as LPDWORD, byval AccessStatusList as LPDWORD, byval pfGenerateOnClose as LPBOOL) as WINBOOL


declare function AccessCheckByTypeResultListAndAuditAlarmByHandleW(byval SubsystemName as LPCWSTR, byval HandleId as LPVOID, byval ClientToken as HANDLE, byval ObjectTypeName as LPCWSTR, byval ObjectName as LPCWSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccessList as LPDWORD, byval AccessStatusList as LPDWORD, byval pfGenerateOnClose as LPBOOL) as WINBOOL


declare function AddAccessAllowedAce(byval pAcl as PACL, byval dwAceRevision as DWORD, byval AccessMask as DWORD, byval pSid as PSID) as WINBOOL
declare function AddAccessAllowedAceEx(byval pAcl as PACL, byval dwAceRevision as DWORD, byval AceFlags as DWORD, byval AccessMask as DWORD, byval pSid as PSID) as WINBOOL
declare function AddAccessAllowedObjectAce(byval pAcl as PACL, byval dwAceRevision as DWORD, byval AceFlags as DWORD, byval AccessMask as DWORD, byval ObjectTypeGuid as GUID ptr, byval InheritedObjectTypeGuid as GUID ptr, byval pSid as PSID) as WINBOOL
declare function AddAccessDeniedAce(byval pAcl as PACL, byval dwAceRevision as DWORD, byval AccessMask as DWORD, byval pSid as PSID) as WINBOOL
declare function AddAccessDeniedAceEx(byval pAcl as PACL, byval dwAceRevision as DWORD, byval AceFlags as DWORD, byval AccessMask as DWORD, byval pSid as PSID) as WINBOOL
declare function AddAccessDeniedObjectAce(byval pAcl as PACL, byval dwAceRevision as DWORD, byval AceFlags as DWORD, byval AccessMask as DWORD, byval ObjectTypeGuid as GUID ptr, byval InheritedObjectTypeGuid as GUID ptr, byval pSid as PSID) as WINBOOL
declare function AddAce(byval pAcl as PACL, byval dwAceRevision as DWORD, byval dwStartingAceIndex as DWORD, byval pAceList as LPVOID, byval nAceListLength as DWORD) as WINBOOL
declare function AddAuditAccessAce(byval pAcl as PACL, byval dwAceRevision as DWORD, byval dwAccessMask as DWORD, byval pSid as PSID, byval bAuditSuccess as WINBOOL, byval bAuditFailure as WINBOOL) as WINBOOL
declare function AddAuditAccessAceEx(byval pAcl as PACL, byval dwAceRevision as DWORD, byval AceFlags as DWORD, byval dwAccessMask as DWORD, byval pSid as PSID, byval bAuditSuccess as WINBOOL, byval bAuditFailure as WINBOOL) as WINBOOL
declare function AddAuditAccessObjectAce(byval pAcl as PACL, byval dwAceRevision as DWORD, byval AceFlags as DWORD, byval AccessMask as DWORD, byval ObjectTypeGuid as GUID ptr, byval InheritedObjectTypeGuid as GUID ptr, byval pSid as PSID, byval bAuditSuccess as WINBOOL, byval bAuditFailure as WINBOOL) as WINBOOL



declare function AdjustTokenGroups(byval TokenHandle as HANDLE, byval ResetToDefault as WINBOOL, byval NewState as PTOKEN_GROUPS, byval BufferLength as DWORD, byval PreviousState as PTOKEN_GROUPS, byval ReturnLength as PDWORD) as WINBOOL
declare function AdjustTokenPrivileges(byval TokenHandle as HANDLE, byval DisableAllPrivileges as WINBOOL, byval NewState as PTOKEN_PRIVILEGES, byval BufferLength as DWORD, byval PreviousState as PTOKEN_PRIVILEGES, byval ReturnLength as PDWORD) as WINBOOL
declare function AllocateAndInitializeSid(byval pIdentifierAuthority as PSID_IDENTIFIER_AUTHORITY, byval nSubAuthorityCount as UBYTE, byval nSubAuthority0 as DWORD, byval nSubAuthority1 as DWORD, byval nSubAuthority2 as DWORD, byval nSubAuthority3 as DWORD, byval nSubAuthority4 as DWORD, byval nSubAuthority5 as DWORD, byval nSubAuthority6 as DWORD, byval nSubAuthority7 as DWORD, byval pSid as PSID ptr) as WINBOOL
declare function AllocateLocallyUniqueId(byval Luid as PLUID) as WINBOOL
declare function AreAllAccessesGranted(byval GrantedAccess as DWORD, byval DesiredAccess as DWORD) as WINBOOL
declare function AreAnyAccessesGranted(byval GrantedAccess as DWORD, byval DesiredAccess as DWORD) as WINBOOL
declare function CheckTokenMembership(byval TokenHandle as HANDLE, byval SidToCheck as PSID, byval IsMember as PBOOL) as WINBOOL


declare function ConvertToAutoInheritPrivateObjectSecurity(byval ParentDescriptor as PSECURITY_DESCRIPTOR, byval CurrentSecurityDescriptor as PSECURITY_DESCRIPTOR, byval NewSecurityDescriptor as PSECURITY_DESCRIPTOR ptr, byval ObjectType as GUID ptr, byval IsDirectoryObject as WINBOOLEAN, byval GenericMapping as PGENERIC_MAPPING) as WINBOOL
declare function CopySid(byval nDestinationSidLength as DWORD, byval pDestinationSid as PSID, byval pSourceSid as PSID) as WINBOOL
declare function CreatePrivateObjectSecurity(byval ParentDescriptor as PSECURITY_DESCRIPTOR, byval CreatorDescriptor as PSECURITY_DESCRIPTOR, byval NewDescriptor as PSECURITY_DESCRIPTOR ptr, byval IsDirectoryObject as WINBOOL, byval Token as HANDLE, byval GenericMapping as PGENERIC_MAPPING) as WINBOOL
declare function CreatePrivateObjectSecurityEx(byval ParentDescriptor as PSECURITY_DESCRIPTOR, byval CreatorDescriptor as PSECURITY_DESCRIPTOR, byval NewDescriptor as PSECURITY_DESCRIPTOR ptr, byval ObjectType as GUID ptr, byval IsContainerObject as WINBOOL, byval AutoInheritFlags as ULONG, byval Token as HANDLE, byval GenericMapping as PGENERIC_MAPPING) as WINBOOL
declare function CreatePrivateObjectSecurityWithMultipleInheritance(byval ParentDescriptor as PSECURITY_DESCRIPTOR, byval CreatorDescriptor as PSECURITY_DESCRIPTOR, byval NewDescriptor as PSECURITY_DESCRIPTOR ptr, byval ObjectTypes as GUID ptr ptr, byval GuidCount as ULONG, byval IsContainerObject as WINBOOL, byval AutoInheritFlags as ULONG, byval Token as HANDLE, byval GenericMapping as PGENERIC_MAPPING) as WINBOOL
declare function CreateRestrictedToken(byval ExistingTokenHandle as HANDLE, byval Flags as DWORD, byval DisableSidCount as DWORD, byval SidsToDisable as PSID_AND_ATTRIBUTES, byval DeletePrivilegeCount as DWORD, byval PrivilegesToDelete as PLUID_AND_ATTRIBUTES, byval RestrictedSidCount as DWORD, byval SidsToRestrict as PSID_AND_ATTRIBUTES, byval NewTokenHandle as PHANDLE) as WINBOOL
declare function CreateWellKnownSid(byval WellKnownSidType as WELL_KNOWN_SID_TYPE, byval DomainSid as PSID, byval pSid as PSID, byval cbSid as DWORD ptr) as WINBOOL
declare function EqualDomainSid(byval pSid1 as PSID, byval pSid2 as PSID, byval pfEqual as WINBOOL ptr) as WINBOOL
declare function DeleteAce(byval pAcl as PACL, byval dwAceIndex as DWORD) as WINBOOL
declare function DestroyPrivateObjectSecurity(byval ObjectDescriptor as PSECURITY_DESCRIPTOR ptr) as WINBOOL
declare function DuplicateToken(byval ExistingTokenHandle as HANDLE, byval ImpersonationLevel as SECURITY_IMPERSONATION_LEVEL, byval DuplicateTokenHandle as PHANDLE) as WINBOOL
declare function DuplicateTokenEx(byval hExistingToken as HANDLE, byval dwDesiredAccess as DWORD, byval lpTokenAttributes as LPSECURITY_ATTRIBUTES, byval ImpersonationLevel as SECURITY_IMPERSONATION_LEVEL, byval TokenType as TOKEN_TYPE, byval phNewToken as PHANDLE) as WINBOOL
declare function EqualPrefixSid(byval pSid1 as PSID, byval pSid2 as PSID) as WINBOOL
declare function EqualSid(byval pSid1 as PSID, byval pSid2 as PSID) as WINBOOL
declare function FindFirstFreeAce(byval pAcl as PACL, byval pAce as LPVOID ptr) as WINBOOL
declare function FreeSid(byval pSid as PSID) as PVOID
declare function GetAce(byval pAcl as PACL, byval dwAceIndex as DWORD, byval pAce as LPVOID ptr) as WINBOOL
declare function GetAclInformation(byval pAcl as PACL, byval pAclInformation as LPVOID, byval nAclInformationLength as DWORD, byval dwAclInformationClass as ACL_INFORMATION_CLASS) as WINBOOL
declare function GetFileSecurityW(byval lpFileName as LPCWSTR, byval RequestedInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval nLength as DWORD, byval lpnLengthNeeded as LPDWORD) as WINBOOL


declare function GetKernelObjectSecurity(byval Handle as HANDLE, byval RequestedInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval nLength as DWORD, byval lpnLengthNeeded as LPDWORD) as WINBOOL
declare function GetLengthSid(byval pSid as PSID) as DWORD
declare function GetPrivateObjectSecurity(byval ObjectDescriptor as PSECURITY_DESCRIPTOR, byval SecurityInformation as SECURITY_INFORMATION, byval ResultantDescriptor as PSECURITY_DESCRIPTOR, byval DescriptorLength as DWORD, byval ReturnLength as PDWORD) as WINBOOL
declare function GetSecurityDescriptorControl(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval pControl as PSECURITY_DESCRIPTOR_CONTROL, byval lpdwRevision as LPDWORD) as WINBOOL
declare function GetSecurityDescriptorDacl(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval lpbDaclPresent as LPBOOL, byval pDacl as PACL ptr, byval lpbDaclDefaulted as LPBOOL) as WINBOOL
declare function GetSecurityDescriptorGroup(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval pGroup as PSID ptr, byval lpbGroupDefaulted as LPBOOL) as WINBOOL
declare function GetSecurityDescriptorLength(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR) as DWORD
declare function GetSecurityDescriptorOwner(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval pOwner as PSID ptr, byval lpbOwnerDefaulted as LPBOOL) as WINBOOL
declare function GetSecurityDescriptorRMControl(byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval RMControl as PUCHAR) as DWORD
declare function GetSecurityDescriptorSacl(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval lpbSaclPresent as LPBOOL, byval pSacl as PACL ptr, byval lpbSaclDefaulted as LPBOOL) as WINBOOL
declare function GetSidIdentifierAuthority(byval pSid as PSID) as PSID_IDENTIFIER_AUTHORITY
declare function GetSidLengthRequired(byval nSubAuthorityCount as UCHAR) as DWORD
declare function GetSidSubAuthority(byval pSid as PSID, byval nSubAuthority as DWORD) as PDWORD
declare function GetSidSubAuthorityCount(byval pSid as PSID) as PUCHAR
declare function GetTokenInformation(byval TokenHandle as HANDLE, byval TokenInformationClass as TOKEN_INFORMATION_CLASS, byval TokenInformation as LPVOID, byval TokenInformationLength as DWORD, byval ReturnLength as PDWORD) as WINBOOL
declare function GetWindowsAccountDomainSid(byval pSid as PSID, byval pDomainSid as PSID, byval cbDomainSid as DWORD ptr) as WINBOOL
declare function ImpersonateAnonymousToken(byval ThreadHandle as HANDLE) as WINBOOL
declare function ImpersonateLoggedOnUser(byval hToken as HANDLE) as WINBOOL
declare function ImpersonateSelf(byval ImpersonationLevel as SECURITY_IMPERSONATION_LEVEL) as WINBOOL
declare function InitializeAcl(byval pAcl as PACL, byval nAclLength as DWORD, byval dwAclRevision as DWORD) as WINBOOL
declare function InitializeSecurityDescriptor(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval dwRevision as DWORD) as WINBOOL
declare function InitializeSid(byval Sid as PSID, byval pIdentifierAuthority as PSID_IDENTIFIER_AUTHORITY, byval nSubAuthorityCount as UBYTE) as WINBOOL
declare function IsTokenRestricted(byval TokenHandle as HANDLE) as WINBOOL
declare function IsValidAcl(byval pAcl as PACL) as WINBOOL
declare function IsValidSecurityDescriptor(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR) as WINBOOL
declare function IsValidSid(byval pSid as PSID) as WINBOOL
declare function IsWellKnownSid(byval pSid as PSID, byval WellKnownSidType as WELL_KNOWN_SID_TYPE) as WINBOOL
declare function MakeAbsoluteSD(byval pSelfRelativeSecurityDescriptor as PSECURITY_DESCRIPTOR, byval pAbsoluteSecurityDescriptor as PSECURITY_DESCRIPTOR, byval lpdwAbsoluteSecurityDescriptorSize as LPDWORD, byval pDacl as PACL, byval lpdwDaclSize as LPDWORD, byval pSacl as PACL, byval lpdwSaclSize as LPDWORD, byval pOwner as PSID, byval lpdwOwnerSize as LPDWORD, byval pPrimaryGroup as PSID, byval lpdwPrimaryGroupSize as LPDWORD) as WINBOOL
declare function MakeSelfRelativeSD(byval pAbsoluteSecurityDescriptor as PSECURITY_DESCRIPTOR, byval pSelfRelativeSecurityDescriptor as PSECURITY_DESCRIPTOR, byval lpdwBufferLength as LPDWORD) as WINBOOL
declare sub MapGenericMask(byval AccessMask as PDWORD, byval GenericMapping as PGENERIC_MAPPING)
declare function ObjectCloseAuditAlarmW(byval SubsystemName as LPCWSTR, byval HandleId as LPVOID, byval GenerateOnClose as WINBOOL) as WINBOOL


declare function ObjectDeleteAuditAlarmW(byval SubsystemName as LPCWSTR, byval HandleId as LPVOID, byval GenerateOnClose as WINBOOL) as WINBOOL


declare function ObjectOpenAuditAlarmW(byval SubsystemName as LPCWSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPWSTR, byval ObjectName as LPWSTR, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval GrantedAccess as DWORD, byval Privileges as PPRIVILEGE_SET, byval ObjectCreation as WINBOOL, byval AccessGranted as WINBOOL, byval GenerateOnClose as LPBOOL) as WINBOOL


declare function ObjectPrivilegeAuditAlarmW(byval SubsystemName as LPCWSTR, byval HandleId as LPVOID, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval Privileges as PPRIVILEGE_SET, byval AccessGranted as WINBOOL) as WINBOOL


declare function PrivilegeCheck(byval ClientToken as HANDLE, byval RequiredPrivileges as PPRIVILEGE_SET, byval pfResult as LPBOOL) as WINBOOL
declare function PrivilegedServiceAuditAlarmW(byval SubsystemName as LPCWSTR, byval ServiceName as LPCWSTR, byval ClientToken as HANDLE, byval Privileges as PPRIVILEGE_SET, byval AccessGranted as WINBOOL) as WINBOOL



declare function RevertToSelf() as WINBOOL
declare function SetAclInformation(byval pAcl as PACL, byval pAclInformation as LPVOID, byval nAclInformationLength as DWORD, byval dwAclInformationClass as ACL_INFORMATION_CLASS) as WINBOOL
declare function SetFileSecurityW(byval lpFileName as LPCWSTR, byval SecurityInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR) as WINBOOL


declare function SetKernelObjectSecurity(byval Handle as HANDLE, byval SecurityInformation as SECURITY_INFORMATION, byval SecurityDescriptor as PSECURITY_DESCRIPTOR) as WINBOOL
declare function SetPrivateObjectSecurity(byval SecurityInformation as SECURITY_INFORMATION, byval ModificationDescriptor as PSECURITY_DESCRIPTOR, byval ObjectsSecurityDescriptor as PSECURITY_DESCRIPTOR ptr, byval GenericMapping as PGENERIC_MAPPING, byval Token as HANDLE) as WINBOOL
declare function SetPrivateObjectSecurityEx(byval SecurityInformation as SECURITY_INFORMATION, byval ModificationDescriptor as PSECURITY_DESCRIPTOR, byval ObjectsSecurityDescriptor as PSECURITY_DESCRIPTOR ptr, byval AutoInheritFlags as ULONG, byval GenericMapping as PGENERIC_MAPPING, byval Token as HANDLE) as WINBOOL


declare function SetSecurityDescriptorControl(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval ControlBitsOfInterest as SECURITY_DESCRIPTOR_CONTROL, byval ControlBitsToSet as SECURITY_DESCRIPTOR_CONTROL) as WINBOOL
declare function SetSecurityDescriptorDacl(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval bDaclPresent as WINBOOL, byval pDacl as PACL, byval bDaclDefaulted as WINBOOL) as WINBOOL
declare function SetSecurityDescriptorGroup(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval pGroup as PSID, byval bGroupDefaulted as WINBOOL) as WINBOOL
declare function SetSecurityDescriptorOwner(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval pOwner as PSID, byval bOwnerDefaulted as WINBOOL) as WINBOOL
declare function SetSecurityDescriptorRMControl(byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval RMControl as PUCHAR) as DWORD
declare function SetSecurityDescriptorSacl(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval bSaclPresent as WINBOOL, byval pSacl as PACL, byval bSaclDefaulted as WINBOOL) as WINBOOL
declare function SetTokenInformation(byval TokenHandle as HANDLE, byval TokenInformationClass as TOKEN_INFORMATION_CLASS, byval TokenInformation as LPVOID, byval TokenInformationLength as DWORD) as WINBOOL


const INIT_ONCE_CHECK_ONLY = RTL_RUN_ONCE_CHECK_ONLY
const INIT_ONCE_ASYNC = RTL_RUN_ONCE_ASYNC
const INIT_ONCE_INIT_FAILED = RTL_RUN_ONCE_INIT_FAILED
const INIT_ONCE_CTX_RESERVED_BITS = RTL_RUN_ONCE_CTX_RESERVED_BITS
const CONDITION_VARIABLE_LOCKMODE_SHARED = RTL_CONDITION_VARIABLE_LOCKMODE_SHARED
const MUTEX_MODIFY_STATE = MUTANT_QUERY_STATE
const MUTEX_ALL_ACCESS = MUTANT_ALL_ACCESS

type SRWLOCK as RTL_SRWLOCK
type PSRWLOCK as RTL_SRWLOCK ptr
type INIT_ONCE as RTL_RUN_ONCE
type PINIT_ONCE as PRTL_RUN_ONCE
type LPINIT_ONCE as PRTL_RUN_ONCE
type PINIT_ONCE_FN as function(byval InitOnce as PINIT_ONCE, byval Parameter as PVOID, byval Context as PVOID ptr) as WINBOOL
type CONDITION_VARIABLE as RTL_CONDITION_VARIABLE
type PCONDITION_VARIABLE as RTL_CONDITION_VARIABLE ptr

declare sub EnterCriticalSection(byval lpCriticalSection as LPCRITICAL_SECTION)
declare sub LeaveCriticalSection(byval lpCriticalSection as LPCRITICAL_SECTION)
declare function TryEnterCriticalSection(byval lpCriticalSection as LPCRITICAL_SECTION) as WINBOOL
declare sub DeleteCriticalSection(byval lpCriticalSection as LPCRITICAL_SECTION)
declare function SetEvent(byval hEvent as HANDLE) as WINBOOL
declare function ResetEvent(byval hEvent as HANDLE) as WINBOOL
declare function ReleaseSemaphore(byval hSemaphore as HANDLE, byval lReleaseCount as LONG, byval lpPreviousCount as LPLONG) as WINBOOL
declare function ReleaseMutex(byval hMutex as HANDLE) as WINBOOL
declare function WaitForSingleObjectEx(byval hHandle as HANDLE, byval dwMilliseconds as DWORD, byval bAlertable as WINBOOL) as DWORD
declare function WaitForMultipleObjectsEx(byval nCount as DWORD, byval lpHandles as const HANDLE ptr, byval bWaitAll as WINBOOL, byval dwMilliseconds as DWORD, byval bAlertable as WINBOOL) as DWORD
declare function OpenMutexW(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCWSTR) as HANDLE
declare function OpenEventA(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
declare function OpenEventW(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCWSTR) as HANDLE
declare function OpenSemaphoreW(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCWSTR) as HANDLE
declare function WaitOnAddress(byval Address as any ptr, byval CompareAddress as PVOID, byval AddressSize as SIZE_T_, byval dwMilliseconds as DWORD) as WINBOOL
declare sub WakeByAddressSingle(byval Address as PVOID)
declare sub WakeByAddressAll(byval Address as PVOID)



 declare function OpenEvent alias "OpenEventA"(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE

type PTIMERAPCROUTINE as sub(byval lpArgToCompletionRoutine as LPVOID, byval dwTimerLowValue as DWORD, byval dwTimerHighValue as DWORD)
type SYNCHRONIZATION_BARRIER as RTL_BARRIER
type PSYNCHRONIZATION_BARRIER as PRTL_BARRIER
type LPSYNCHRONIZATION_BARRIER as PRTL_BARRIER

const SYNCHRONIZATION_BARRIER_FLAGS_SPIN_ONLY = &h01
const SYNCHRONIZATION_BARRIER_FLAGS_BLOCK_ONLY = &h02
const SYNCHRONIZATION_BARRIER_FLAGS_NO_DELETE = &h04

declare sub InitializeCriticalSection(byval lpCriticalSection as LPCRITICAL_SECTION)
declare function InitializeCriticalSectionAndSpinCount(byval lpCriticalSection as LPCRITICAL_SECTION, byval dwSpinCount as DWORD) as WINBOOL
declare function SetCriticalSectionSpinCount(byval lpCriticalSection as LPCRITICAL_SECTION, byval dwSpinCount as DWORD) as DWORD
declare function WaitForSingleObject(byval hHandle as HANDLE, byval dwMilliseconds as DWORD) as DWORD
declare function SleepEx(byval dwMilliseconds as DWORD, byval bAlertable as WINBOOL) as DWORD
declare function CreateMutexA(byval lpMutexAttributes as LPSECURITY_ATTRIBUTES, byval bInitialOwner as WINBOOL, byval lpName as LPCSTR) as HANDLE
declare function CreateMutexW(byval lpMutexAttributes as LPSECURITY_ATTRIBUTES, byval bInitialOwner as WINBOOL, byval lpName as LPCWSTR) as HANDLE
declare function CreateEventA(byval lpEventAttributes as LPSECURITY_ATTRIBUTES, byval bManualReset as WINBOOL, byval bInitialState as WINBOOL, byval lpName as LPCSTR) as HANDLE
declare function CreateEventW(byval lpEventAttributes as LPSECURITY_ATTRIBUTES, byval bManualReset as WINBOOL, byval bInitialState as WINBOOL, byval lpName as LPCWSTR) as HANDLE
declare function SetWaitableTimer(byval hTimer as HANDLE, byval lpDueTime as const LARGE_INTEGER ptr, byval lPeriod as LONG, byval pfnCompletionRoutine as PTIMERAPCROUTINE, byval lpArgToCompletionRoutine as LPVOID, byval fResume as WINBOOL) as WINBOOL
declare function CancelWaitableTimer(byval hTimer as HANDLE) as WINBOOL
declare function OpenWaitableTimerW(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpTimerName as LPCWSTR) as HANDLE
declare function EnterSynchronizationBarrier(byval lpBarrier as LPSYNCHRONIZATION_BARRIER, byval dwFlags as DWORD) as WINBOOL
declare function InitializeSynchronizationBarrier(byval lpBarrier as LPSYNCHRONIZATION_BARRIER, byval lTotalThreads as LONG, byval lSpinCount as LONG) as WINBOOL
declare function DeleteSynchronizationBarrier(byval lpBarrier as LPSYNCHRONIZATION_BARRIER) as WINBOOL
declare sub Sleep_ alias "Sleep"(byval dwMilliseconds as DWORD)
declare function SignalObjectAndWait(byval hObjectToSignal as HANDLE, byval hObjectToWaitOn as HANDLE, byval dwMilliseconds as DWORD, byval bAlertable as WINBOOL) as DWORD




 declare function CreateMutex alias "CreateMutexA"(byval lpMutexAttributes as LPSECURITY_ATTRIBUTES, byval bInitialOwner as WINBOOL, byval lpName as LPCSTR) as HANDLE
 declare function CreateEvent alias "CreateEventA"(byval lpEventAttributes as LPSECURITY_ATTRIBUTES, byval bManualReset as WINBOOL, byval bInitialState as WINBOOL, byval lpName as LPCSTR) as HANDLE


type _SYSTEM_INFO
 union
 dwOemId as DWORD

 type
 wProcessorArchitecture as WORD
 wReserved as WORD
 end type
 end union

 dwPageSize as DWORD
 lpMinimumApplicationAddress as LPVOID
 lpMaximumApplicationAddress as LPVOID
 dwActiveProcessorMask as DWORD_PTR
 dwNumberOfProcessors as DWORD
 dwProcessorType as DWORD
 dwAllocationGranularity as DWORD
 wProcessorLevel as WORD
 wProcessorRevision as WORD
end type

type SYSTEM_INFO as _SYSTEM_INFO
type LPSYSTEM_INFO as _SYSTEM_INFO ptr
declare sub GetSystemTime(byval lpSystemTime as LPSYSTEMTIME)
declare sub GetSystemTimeAsFileTime(byval lpSystemTimeAsFileTime as LPFILETIME)
declare sub GetLocalTime(byval lpSystemTime as LPSYSTEMTIME)
declare sub GetNativeSystemInfo(byval lpSystemInfo as LPSYSTEM_INFO)


declare function GetVersion() as DWORD

type _MEMORYSTATUSEX
 dwLength as DWORD
 dwMemoryLoad as DWORD
 ullTotalPhys as DWORDLONG
 ullAvailPhys as DWORDLONG
 ullTotalPageFile as DWORDLONG
 ullAvailPageFile as DWORDLONG
 ullTotalVirtual as DWORDLONG
 ullAvailVirtual as DWORDLONG
 ullAvailExtendedVirtual as DWORDLONG
end type

type MEMORYSTATUSEX as _MEMORYSTATUSEX
type LPMEMORYSTATUSEX as _MEMORYSTATUSEX ptr

type _COMPUTER_NAME_FORMAT as long
enum
 ComputerNameNetBIOS
 ComputerNameDnsHostname
 ComputerNameDnsDomain
 ComputerNameDnsFullyQualified
 ComputerNamePhysicalNetBIOS
 ComputerNamePhysicalDnsHostname
 ComputerNamePhysicalDnsDomain
 ComputerNamePhysicalDnsFullyQualified
 ComputerNameMax
end enum

type COMPUTER_NAME_FORMAT as _COMPUTER_NAME_FORMAT
declare function GlobalMemoryStatusEx(byval lpBuffer as LPMEMORYSTATUSEX) as WINBOOL
declare function SetLocalTime(byval lpSystemTime as const SYSTEMTIME ptr) as WINBOOL
declare sub GetSystemInfo(byval lpSystemInfo as LPSYSTEM_INFO)
declare function GetTickCount() as DWORD
declare function GetSystemTimeAdjustment(byval lpTimeAdjustment as PDWORD, byval lpTimeIncrement as PDWORD, byval lpTimeAdjustmentDisabled as PBOOL) as WINBOOL
declare function GetSystemDirectoryA(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT
declare function GetSystemDirectoryW(byval lpBuffer as LPWSTR, byval uSize as UINT) as UINT
declare function GetWindowsDirectoryA(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT
declare function GetWindowsDirectoryW(byval lpBuffer as LPWSTR, byval uSize as UINT) as UINT
declare function GetSystemWindowsDirectoryA(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT
declare function GetSystemWindowsDirectoryW(byval lpBuffer as LPWSTR, byval uSize as UINT) as UINT
declare function GetComputerNameExA(byval NameType as COMPUTER_NAME_FORMAT, byval lpBuffer as LPSTR, byval nSize as LPDWORD) as WINBOOL
declare function GetComputerNameExW(byval NameType as COMPUTER_NAME_FORMAT, byval lpBuffer as LPWSTR, byval nSize as LPDWORD) as WINBOOL
declare function SetComputerNameExW(byval NameType as COMPUTER_NAME_FORMAT, byval lpBuffer as LPCWSTR) as WINBOOL
declare function SetSystemTime(byval lpSystemTime as const SYSTEMTIME ptr) as WINBOOL
declare function GetVersionExA(byval lpVersionInformation as LPOSVERSIONINFOA) as WINBOOL
declare function GetVersionExW(byval lpVersionInformation as LPOSVERSIONINFOW) as WINBOOL
declare function GetLogicalProcessorInformation(byval Buffer as PSYSTEM_LOGICAL_PROCESSOR_INFORMATION, byval ReturnedLength as PDWORD) as WINBOOL
declare sub GetSystemTimePreciseAsFileTime(byval lpSystemTimeAsFileTime as LPFILETIME)
declare function EnumSystemFirmwareTables(byval FirmwareTableProviderSignature as DWORD, byval pFirmwareTableEnumBuffer as PVOID, byval BufferSize as DWORD) as UINT
declare function GetSystemFirmwareTable(byval FirmwareTableProviderSignature as DWORD, byval FirmwareTableID as DWORD, byval pFirmwareTableBuffer as PVOID, byval BufferSize as DWORD) as UINT



 declare function GetSystemDirectory alias "GetSystemDirectoryA"(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT
 declare function GetWindowsDirectory alias "GetWindowsDirectoryA"(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT
 declare function GetSystemWindowsDirectory alias "GetSystemWindowsDirectoryA"(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT
 declare function GetComputerNameEx alias "GetComputerNameExA"(byval NameType as COMPUTER_NAME_FORMAT, byval lpBuffer as LPSTR, byval nSize as LPDWORD) as WINBOOL
 declare function GetVersionEx alias "GetVersionExA"(byval lpVersionInformation as LPOSVERSIONINFOA) as WINBOOL

declare function GetNumaHighestNodeNumber(byval HighestNodeNumber as PULONG) as WINBOOL


type PTP_WIN32_IO_CALLBACK as sub(byval Instance as PTP_CALLBACK_INSTANCE, byval Context as PVOID, byval Overlapped as PVOID, byval IoResult as ULONG, byval NumberOfBytesTransferred as ULONG_PTR, byval Io as PTP_IO)


declare function CreateTimerQueueTimer(byval phNewTimer as PHANDLE, byval TimerQueue as HANDLE, byval Callback as WAITORTIMERCALLBACK, byval Parameter as PVOID, byval DueTime as DWORD, byval Period as DWORD, byval Flags as ULONG) as WINBOOL
declare function DeleteTimerQueueTimer(byval TimerQueue as HANDLE, byval Timer as HANDLE, byval CompletionEvent as HANDLE) as WINBOOL
declare function QueueUserWorkItem(byval Function as LPTHREAD_START_ROUTINE, byval Context as PVOID, byval Flags as ULONG) as WINBOOL
declare function UnregisterWaitEx(byval WaitHandle as HANDLE, byval CompletionEvent as HANDLE) as WINBOOL
declare function CreateTimerQueue() as HANDLE
declare function ChangeTimerQueueTimer(byval TimerQueue as HANDLE, byval Timer as HANDLE, byval DueTime as ULONG, byval Period as ULONG) as WINBOOL
declare function DeleteTimerQueueEx(byval TimerQueue as HANDLE, byval CompletionEvent as HANDLE) as WINBOOL
declare function EncodePointer(byval Ptr as PVOID) as PVOID
declare function DecodePointer(byval Ptr as PVOID) as PVOID
declare function EncodeSystemPointer(byval Ptr as PVOID) as PVOID
declare function DecodeSystemPointer(byval Ptr as PVOID) as PVOID
declare function Beep_ alias "Beep"(byval dwFreq as DWORD, byval dwDuration as DWORD) as WINBOOL
declare function Wow64DisableWow64FsRedirection(byval OldValue as PVOID ptr) as WINBOOL
declare function Wow64RevertWow64FsRedirection(byval OlValue as PVOID) as WINBOOL
declare function IsWow64Process(byval hProcess as HANDLE, byval Wow64Process as PBOOL) as WINBOOL

const FILE_BEGIN = 0
const FILE_CURRENT = 1
const FILE_END = 2
const WAIT_FAILED = cast(DWORD, &hffffffff)
const WAIT_OBJECT_0 = STATUS_WAIT_0 + 0
const WAIT_ABANDONED = STATUS_ABANDONED_WAIT_0 + 0
const WAIT_ABANDONED_0 = STATUS_ABANDONED_WAIT_0 + 0
const WAIT_IO_COMPLETION = STATUS_USER_APC
declare function SecureZeroMemory alias "RtlSecureZeroMemory"(byval ptr as PVOID, byval cnt as SIZE_T_) as PVOID
declare function CaptureStackBackTrace alias "RtlCaptureStackBackTrace"(byval FramesToSkip as DWORD, byval FramesToCapture as DWORD, byval BackTrace as PVOID ptr, byval BackTraceHash as PDWORD) as WORD
const FILE_FLAG_WRITE_THROUGH = &h80000000
const FILE_FLAG_OVERLAPPED = &h40000000
const FILE_FLAG_NO_BUFFERING = &h20000000
const FILE_FLAG_RANDOM_ACCESS = &h10000000
const FILE_FLAG_SEQUENTIAL_SCAN = &h8000000
const FILE_FLAG_DELETE_ON_CLOSE = &h4000000
const FILE_FLAG_BACKUP_SEMANTICS = &h2000000
const FILE_FLAG_POSIX_SEMANTICS = &h1000000
const FILE_FLAG_SESSION_AWARE = &h800000
const FILE_FLAG_OPEN_REPARSE_POINT = &h200000
const FILE_FLAG_OPEN_NO_RECALL = &h100000
const FILE_FLAG_FIRST_PIPE_INSTANCE = &h80000


const PROGRESS_CONTINUE = 0
const PROGRESS_CANCEL = 1
const PROGRESS_STOP = 2
const PROGRESS_QUIET = 3
const CALLBACK_CHUNK_FINISHED = &h00
const CALLBACK_STREAM_SWITCH = &h1
const COPY_FILE_FAIL_IF_EXISTS = &h1
const COPY_FILE_RESTARTABLE = &h2
const COPY_FILE_OPEN_SOURCE_FOR_WRITE = &h4
const COPY_FILE_ALLOW_DECRYPTED_DESTINATION = &h8



const REPLACEFILE_WRITE_THROUGH = &h1
const REPLACEFILE_IGNORE_MERGE_ERRORS = &h2


const PIPE_ACCESS_INBOUND = &h1
const PIPE_ACCESS_OUTBOUND = &h2
const PIPE_ACCESS_DUPLEX = &h3
const PIPE_CLIENT_END = &h00
const PIPE_SERVER_END = &h1
const PIPE_WAIT = &h00
const PIPE_NOWAIT = &h1
const PIPE_READMODE_BYTE = &h00
const PIPE_READMODE_MESSAGE = &h2
const PIPE_TYPE_BYTE = &h00
const PIPE_TYPE_MESSAGE = &h4
const PIPE_ACCEPT_REMOTE_CLIENTS = &h00
const PIPE_REJECT_REMOTE_CLIENTS = &h8
const PIPE_UNLIMITED_INSTANCES = 255
const SECURITY_ANONYMOUS = SecurityAnonymous shl 16
const SECURITY_IDENTIFICATION = SecurityIdentification shl 16
const SECURITY_IMPERSONATION = SecurityImpersonation shl 16
const SECURITY_DELEGATION = SecurityDelegation shl 16
const SECURITY_CONTEXT_TRACKING = &h40000
const SECURITY_EFFECTIVE_ONLY = &h80000
const SECURITY_SQOS_PRESENT = &h100000
const SECURITY_VALID_SQOS_FLAGS = &h1f0000
const FAIL_FAST_GENERATE_EXCEPTION_ADDRESS = &h1
const FAIL_FAST_NO_HARD_ERROR_DLG = &h2
type PFIBER_START_ROUTINE as sub(byval lpFiberParameter as LPVOID)
type LPFIBER_START_ROUTINE as PFIBER_START_ROUTINE

 type LPLDT_ENTRY as PLDT_ENTRY

const SP_SERIALCOMM = cast(DWORD, &h1)
const PST_UNSPECIFIED = cast(DWORD, &h00)
const PST_RS232 = cast(DWORD, &h1)
const PST_PARALLELPORT = cast(DWORD, &h2)
const PST_RS422 = cast(DWORD, &h3)
const PST_RS423 = cast(DWORD, &h4)
const PST_RS449 = cast(DWORD, &h5)
const PST_MODEM = cast(DWORD, &h6)
const PST_FAX = cast(DWORD, &h21)
const PST_SCANNER = cast(DWORD, &h22)
const PST_NETWORK_BRIDGE = cast(DWORD, &h100)
const PST_LAT = cast(DWORD, &h101)
const PST_TCPIP_TELNET = cast(DWORD, &h102)
const PST_X25 = cast(DWORD, &h103)
const PCF_DTRDSR = cast(DWORD, &h1)
const PCF_RTSCTS = cast(DWORD, &h2)
const PCF_RLSD = cast(DWORD, &h4)
const PCF_PARITY_CHECK = cast(DWORD, &h8)
const PCF_XONXOFF = cast(DWORD, &h10)
const PCF_SETXCHAR = cast(DWORD, &h20)
const PCF_TOTALTIMEOUTS = cast(DWORD, &h40)
const PCF_INTTIMEOUTS = cast(DWORD, &h80)
const PCF_SPECIALCHARS = cast(DWORD, &h100)
const PCF_16BITMODE = cast(DWORD, &h200)
const SP_PARITY = cast(DWORD, &h1)
const SP_BAUD = cast(DWORD, &h2)
const SP_DATABITS = cast(DWORD, &h4)
const SP_STOPBITS = cast(DWORD, &h8)
const SP_HANDSHAKING = cast(DWORD, &h10)
const SP_PARITY_CHECK = cast(DWORD, &h20)
const SP_RLSD = cast(DWORD, &h40)
const BAUD_075 = cast(DWORD, &h1)
const BAUD_110 = cast(DWORD, &h2)
const BAUD_134_5 = cast(DWORD, &h4)
const BAUD_150 = cast(DWORD, &h8)
const BAUD_300 = cast(DWORD, &h10)
const BAUD_600 = cast(DWORD, &h20)
const BAUD_1200 = cast(DWORD, &h40)
const BAUD_1800 = cast(DWORD, &h80)
const BAUD_2400 = cast(DWORD, &h100)
const BAUD_4800 = cast(DWORD, &h200)
const BAUD_7200 = cast(DWORD, &h400)
const BAUD_9600 = cast(DWORD, &h800)
const BAUD_14400 = cast(DWORD, &h1000)
const BAUD_19200 = cast(DWORD, &h2000)
const BAUD_38400 = cast(DWORD, &h4000)
const BAUD_56K = cast(DWORD, &h8000)
const BAUD_128K = cast(DWORD, &h10000)
const BAUD_115200 = cast(DWORD, &h20000)
const BAUD_57600 = cast(DWORD, &h40000)
const BAUD_USER = cast(DWORD, &h10000000)
const DATABITS_5 = cast(WORD, &h1)
const DATABITS_6 = cast(WORD, &h2)
const DATABITS_7 = cast(WORD, &h4)
const DATABITS_8 = cast(WORD, &h8)
const DATABITS_16 = cast(WORD, &h10)
const DATABITS_16X = cast(WORD, &h20)
const STOPBITS_10 = cast(WORD, &h1)
const STOPBITS_15 = cast(WORD, &h2)
const STOPBITS_20 = cast(WORD, &h4)
const PARITY_NONE = cast(WORD, &h100)
const PARITY_ODD = cast(WORD, &h200)
const PARITY_EVEN = cast(WORD, &h400)
const PARITY_MARK = cast(WORD, &h800)
const PARITY_SPACE = cast(WORD, &h1000)

type _COMMPROP
 wPacketLength as WORD
 wPacketVersion as WORD
 dwServiceMask as DWORD
 dwReserved1 as DWORD
 dwMaxTxQueue as DWORD
 dwMaxRxQueue as DWORD
 dwMaxBaud as DWORD
 dwProvSubType as DWORD
 dwProvCapabilities as DWORD
 dwSettableParams as DWORD
 dwSettableBaud as DWORD
 wSettableData as WORD
 wSettableStopParity as WORD
 dwCurrentTxQueue as DWORD
 dwCurrentRxQueue as DWORD
 dwProvSpec1 as DWORD
 dwProvSpec2 as DWORD
 wcProvChar as wstring * 1
end type

type COMMPROP as _COMMPROP
type LPCOMMPROP as _COMMPROP ptr
const COMMPROP_INITIALIZED = cast(DWORD, &he73cf52e)

type _COMSTAT
 fCtsHold : 1 as DWORD
 fDsrHold : 1 as DWORD
 fRlsdHold : 1 as DWORD
 fXoffHold : 1 as DWORD
 fXoffSent : 1 as DWORD
 fEof : 1 as DWORD
 fTxim : 1 as DWORD
 fReserved : 25 as DWORD
 cbInQue as DWORD
 cbOutQue as DWORD
end type

type COMSTAT as _COMSTAT
type LPCOMSTAT as _COMSTAT ptr
const DTR_CONTROL_DISABLE = &h00
const DTR_CONTROL_ENABLE = &h1
const DTR_CONTROL_HANDSHAKE = &h2
const RTS_CONTROL_DISABLE = &h00
const RTS_CONTROL_ENABLE = &h1
const RTS_CONTROL_HANDSHAKE = &h2
const RTS_CONTROL_TOGGLE = &h3

type _DCB
 DCBlength as DWORD
 BaudRate as DWORD
 fBinary : 1 as DWORD
 fParity : 1 as DWORD
 fOutxCtsFlow : 1 as DWORD
 fOutxDsrFlow : 1 as DWORD
 fDtrControl : 2 as DWORD
 fDsrSensitivity : 1 as DWORD
 fTXContinueOnXoff : 1 as DWORD
 fOutX : 1 as DWORD
 fInX : 1 as DWORD
 fErrorChar : 1 as DWORD
 fNull : 1 as DWORD
 fRtsControl : 2 as DWORD
 fAbortOnError : 1 as DWORD
 fDummy2 : 17 as DWORD
 wReserved as WORD
 XonLim as WORD
 XoffLim as WORD
 ByteSize as UBYTE
 Parity as UBYTE
 StopBits as UBYTE
 XonChar as byte
 XoffChar as byte
 ErrorChar as byte
 EofChar as byte
 EvtChar as byte
 wReserved1 as WORD
end type

type DCB as _DCB
type LPDCB as _DCB ptr

type _COMMTIMEOUTS
 ReadIntervalTimeout as DWORD
 ReadTotalTimeoutMultiplier as DWORD
 ReadTotalTimeoutConstant as DWORD
 WriteTotalTimeoutMultiplier as DWORD
 WriteTotalTimeoutConstant as DWORD
end type

type COMMTIMEOUTS as _COMMTIMEOUTS
type LPCOMMTIMEOUTS as _COMMTIMEOUTS ptr

type _COMMCONFIG
 dwSize as DWORD
 wVersion as WORD
 wReserved as WORD
 dcb as DCB
 dwProviderSubType as DWORD
 dwProviderOffset as DWORD
 dwProviderSize as DWORD
 wcProviderData as wstring * 1
end type

type COMMCONFIG as _COMMCONFIG
type LPCOMMCONFIG as _COMMCONFIG ptr
const GMEM_FIXED = &h00
const GMEM_MOVEABLE = &h2
const GMEM_NOCOMPACT = &h10
const GMEM_NODISCARD = &h20
const GMEM_ZEROINIT = &h40
const GMEM_MODIFY = &h80
const GMEM_DISCARDABLE = &h100
const GMEM_NOT_BANKED = &h1000
const GMEM_SHARE = &h2000
const GMEM_DDESHARE = &h2000
const GMEM_NOTIFY = &h4000
const GMEM_LOWER = GMEM_NOT_BANKED
const GMEM_VALID_FLAGS = &h7f72
const GMEM_INVALID_HANDLE = &h8000
const GHND_ = GMEM_MOVEABLE or GMEM_ZEROINIT
const GPTR_ = GMEM_FIXED or GMEM_ZEROINIT
const GMEM_DISCARDED = &h4000
const GMEM_LOCKCOUNT = &h00ff

type _MEMORYSTATUS
 dwLength as DWORD
 dwMemoryLoad as DWORD
 dwTotalPhys as SIZE_T_
 dwAvailPhys as SIZE_T_
 dwTotalPageFile as SIZE_T_
 dwAvailPageFile as SIZE_T_
 dwTotalVirtual as SIZE_T_
 dwAvailVirtual as SIZE_T_
end type

type MEMORYSTATUS as _MEMORYSTATUS
type LPMEMORYSTATUS as _MEMORYSTATUS ptr
const NUMA_NO_PREFERRED_NODE = cast(DWORD, -1)
const DEBUG_PROCESS = &h1
const DEBUG_ONLY_THIS_PROCESS = &h2
const CREATE_SUSPENDED = &h4
const DETACHED_PROCESS = &h8
const CREATE_NEW_CONSOLE = &h10
const NORMAL_PRIORITY_CLASS = &h20
const IDLE_PRIORITY_CLASS = &h40
const HIGH_PRIORITY_CLASS = &h80
const REALTIME_PRIORITY_CLASS = &h100
const CREATE_NEW_PROCESS_GROUP = &h200
const CREATE_UNICODE_ENVIRONMENT = &h400
const CREATE_SEPARATE_WOW_VDM = &h800
const CREATE_SHARED_WOW_VDM = &h1000
const CREATE_FORCEDOS = &h2000
const BELOW_NORMAL_PRIORITY_CLASS = &h4000
const ABOVE_NORMAL_PRIORITY_CLASS = &h8000
const INHERIT_PARENT_AFFINITY = &h10000
const INHERIT_CALLER_PRIORITY = &h20000
const CREATE_PROTECTED_PROCESS = &h40000
const EXTENDED_STARTUPINFO_PRESENT = &h80000
const PROCESS_MODE_BACKGROUND_BEGIN = &h100000
const PROCESS_MODE_BACKGROUND_END = &h200000
const CREATE_BREAKAWAY_FROM_JOB = &h1000000
const CREATE_PRESERVE_CODE_AUTHZ_LEVEL = &h2000000
const CREATE_DEFAULT_ERROR_MODE = &h4000000
const CREATE_NO_WINDOW = &h8000000
const PROFILE_USER = &h10000000
const PROFILE_KERNEL = &h20000000
const PROFILE_SERVER = &h40000000
const CREATE_IGNORE_SYSTEM_DEFAULT = &h80000000
const STACK_SIZE_PARAM_IS_A_RESERVATION = &h10000
const THREAD_PRIORITY_LOWEST = THREAD_BASE_PRIORITY_MIN
const THREAD_PRIORITY_BELOW_NORMAL = THREAD_PRIORITY_LOWEST + 1
const THREAD_PRIORITY_NORMAL = 0
const THREAD_PRIORITY_HIGHEST = THREAD_BASE_PRIORITY_MAX
const THREAD_PRIORITY_ABOVE_NORMAL = THREAD_PRIORITY_HIGHEST - 1
const THREAD_PRIORITY_ERROR_RETURN = MAXLONG
const THREAD_PRIORITY_TIME_CRITICAL = THREAD_BASE_PRIORITY_LOWRT
const THREAD_PRIORITY_IDLE = THREAD_BASE_PRIORITY_IDLE
const THREAD_MODE_BACKGROUND_BEGIN = &h00010000
const THREAD_MODE_BACKGROUND_END = &h00020000
const VOLUME_NAME_DOS = &h00
const VOLUME_NAME_GUID = &h1
const VOLUME_NAME_NT = &h2
const VOLUME_NAME_NONE = &h4
const FILE_NAME_NORMALIZED = &h00
const FILE_NAME_OPENED = &h8

type _JIT_DEBUG_INFO
 dwSize as DWORD
 dwProcessorArchitecture as DWORD
 dwThreadID as DWORD
 dwReserved0 as DWORD
 lpExceptionAddress as ULONG64
 lpExceptionRecord as ULONG64
 lpContextRecord as ULONG64
end type

type JIT_DEBUG_INFO as _JIT_DEBUG_INFO
type LPJIT_DEBUG_INFO as _JIT_DEBUG_INFO ptr
type JIT_DEBUG_INFO32 as JIT_DEBUG_INFO
type LPJIT_DEBUG_INFO32 as JIT_DEBUG_INFO ptr
type JIT_DEBUG_INFO64 as JIT_DEBUG_INFO
type LPJIT_DEBUG_INFO64 as JIT_DEBUG_INFO ptr
type LPEXCEPTION_RECORD as PEXCEPTION_RECORD
type LPEXCEPTION_POINTERS as PEXCEPTION_POINTERS

const DRIVE_UNKNOWN = 0
const DRIVE_NO_ROOT_DIR = 1
const DRIVE_REMOVABLE = 2
const DRIVE_FIXED = 3
const DRIVE_REMOTE = 4
const DRIVE_CDROM = 5
const DRIVE_RAMDISK = 6
const FILE_TYPE_UNKNOWN = &h00
const FILE_TYPE_DISK = &h1
const FILE_TYPE_CHAR = &h2
const FILE_TYPE_PIPE = &h3
const FILE_TYPE_REMOTE = &h8000
const STD_INPUT_HANDLE = cast(DWORD, -10)
const STD_OUTPUT_HANDLE = cast(DWORD, -11)
const STD_ERROR_HANDLE = cast(DWORD, -12)
const NOPARITY = 0
const ODDPARITY = 1
const EVENPARITY = 2
const MARKPARITY = 3
const SPACEPARITY = 4
const ONESTOPBIT = 0
const ONE5STOPBITS = 1
const TWOSTOPBITS = 2
const IGNORE = 0
const INFINITE = &hffffffff
const CBR_110 = 110
const CBR_300 = 300
const CBR_600 = 600
const CBR_1200 = 1200
const CBR_2400 = 2400
const CBR_4800 = 4800
const CBR_9600 = 9600
const CBR_14400 = 14400
const CBR_19200 = 19200
const CBR_38400 = 38400
const CBR_56000 = 56000
const CBR_57600 = 57600
const CBR_115200 = 115200
const CBR_128000 = 128000
const CBR_256000 = 256000
const CE_RXOVER = &h1
const CE_OVERRUN = &h2
const CE_RXPARITY = &h4
const CE_FRAME = &h8
const CE_BREAK = &h10
const CE_TXFULL = &h100
const CE_PTO = &h200
const CE_IOE = &h400
const CE_DNS = &h800
const CE_OOP = &h1000
const CE_MODE = &h8000
const IE_BADID = -1
const IE_OPEN = -2
const IE_NOPEN = -3
const IE_MEMORY = -4
const IE_DEFAULT = -5
const IE_HARDWARE = -10
const IE_BYTESIZE = -11
const IE_BAUDRATE = -12
const EV_RXCHAR = &h1
const EV_RXFLAG = &h2
const EV_TXEMPTY = &h4
const EV_CTS = &h8
const EV_DSR = &h10
const EV_RLSD = &h20
const EV_BREAK = &h40
const EV_ERR = &h80
const EV_RING = &h100
const EV_PERR = &h200
const EV_RX80FULL = &h400
const EV_EVENT1 = &h800
const EV_EVENT2 = &h1000
const SETXOFF = 1
const SETXON = 2
const SETRTS = 3
const CLRRTS = 4
const SETDTR = 5
const CLRDTR = 6
const RESETDEV = 7
const SETBREAK = 8
const CLRBREAK = 9
const PURGE_TXABORT = &h1
const PURGE_RXABORT = &h2
const PURGE_TXCLEAR = &h4
const PURGE_RXCLEAR = &h8
const LPTx = &h80
const MS_CTS_ON = cast(DWORD, &h10)
const MS_DSR_ON = cast(DWORD, &h20)
const MS_RING_ON = cast(DWORD, &h40)
const MS_RLSD_ON = cast(DWORD, &h80)
const S_QUEUEEMPTY = 0
const S_THRESHOLD = 1
const S_ALLTHRESHOLD = 2
const S_NORMAL = 0
const S_LEGATO = 1
const S_STACCATO = 2
const S_PERIOD512 = 0
const S_PERIOD1024 = 1
const S_PERIOD2048 = 2
const S_PERIODVOICE = 3
const S_WHITE512 = 4
const S_WHITE1024 = 5
const S_WHITE2048 = 6
const S_WHITEVOICE = 7
const S_SERDVNA = -1
const S_SEROFM = -2
const S_SERMACT = -3
const S_SERQFUL = -4
const S_SERBDNT = -5
const S_SERDLN = -6
const S_SERDCC = -7
const S_SERDTP = -8
const S_SERDVL = -9
const S_SERDMD = -10
const S_SERDSH = -11
const S_SERDPT = -12
const S_SERDFQ = -13
const S_SERDDR = -14
const S_SERDSR = -15
const S_SERDST = -16
const NMPWAIT_WAIT_FOREVER = &hffffffff
const NMPWAIT_NOWAIT = &h1
const NMPWAIT_USE_DEFAULT_WAIT = &h00
const FS_CASE_IS_PRESERVED = FILE_CASE_PRESERVED_NAMES
const FS_CASE_SENSITIVE = FILE_CASE_SENSITIVE_SEARCH
const FS_UNICODE_STORED_ON_DISK = FILE_UNICODE_ON_DISK
const FS_PERSISTENT_ACLS = FILE_PERSISTENT_ACLS
const FS_VOL_IS_COMPRESSED = FILE_VOLUME_IS_COMPRESSED
const FS_FILE_COMPRESSION = FILE_FILE_COMPRESSION
const FS_FILE_ENCRYPTION = FILE_SUPPORTS_ENCRYPTION
const OF_READ = &h00
const OF_WRITE = &h1
const OF_READWRITE = &h2
const OF_SHARE_COMPAT = &h00
const OF_SHARE_EXCLUSIVE = &h10
const OF_SHARE_DENY_WRITE = &h20
const OF_SHARE_DENY_READ = &h30
const OF_SHARE_DENY_NONE = &h40
const OF_PARSE = &h100
const OF_DELETE = &h200
const OF_VERIFY = &h400
const OF_CANCEL = &h800
const OF_CREATE = &h1000
const OF_PROMPT = &h2000
const OF_EXIST = &h4000
const OF_REOPEN = &h8000
const OFS_MAXPATHNAME = 128

type _OFSTRUCT
 cBytes as UBYTE
 fFixedDisk as UBYTE
 nErrCode as WORD
 Reserved1 as WORD
 Reserved2 as WORD
 szPathName as zstring * 128
end type

type OFSTRUCT as _OFSTRUCT
type LPOFSTRUCT as _OFSTRUCT ptr
type POFSTRUCT as _OFSTRUCT ptr

 private function InterlockedAnd64 cdecl(byval Destination as LONGLONG ptr, byval Value as LONGLONG) as LONGLONG
 dim Old as LONGLONG
 do
 Old = *Destination
 loop while cast(LONGLONG, _InterlockedCompareExchange64((Destination), (Old and Value), (Old))) <> Old
 return Old
 end function

 private function InterlockedOr64 cdecl(byval Destination as LONGLONG ptr, byval Value as LONGLONG) as LONGLONG
 dim Old as LONGLONG
 do
 Old = *Destination
 loop while cast(LONGLONG, _InterlockedCompareExchange64((Destination), (Old or Value), (Old))) <> Old
 return Old
 end function

 private function InterlockedXor64 cdecl(byval Destination as LONGLONG ptr, byval Value as LONGLONG) as LONGLONG
 dim Old as LONGLONG
 do
 Old = *Destination
 loop while cast(LONGLONG, _InterlockedCompareExchange64((Destination), (Old xor Value), (Old))) <> Old
 return Old
 end function

 private function InterlockedIncrement64 cdecl(byval Addend as LONGLONG ptr) as LONGLONG
 dim Old as LONGLONG
 do
 Old = *Addend
 loop while cast(LONGLONG, _InterlockedCompareExchange64((Addend), (Old + 1), (Old))) <> Old
 return Old + 1
 end function

 private function InterlockedDecrement64 cdecl(byval Addend as LONGLONG ptr) as LONGLONG
 dim Old as LONGLONG
 do
 Old = *Addend
 loop while cast(LONGLONG, _InterlockedCompareExchange64((Addend), (Old - 1), (Old))) <> Old
 return Old - 1
 end function

 private function InterlockedExchange64 cdecl(byval Target as LONGLONG ptr, byval Value as LONGLONG) as LONGLONG
 dim Old as LONGLONG
 do
 Old = *Target
 loop while cast(LONGLONG, _InterlockedCompareExchange64((Target), (Value), (Old))) <> Old
 return Old
 end function

 private function InterlockedExchangeAdd64 cdecl(byval Addend as LONGLONG ptr, byval Value as LONGLONG) as LONGLONG
 dim Old as LONGLONG
 do
 Old = *Addend
 loop while cast(LONGLONG, _InterlockedCompareExchange64((Addend), (Old + Value), (Old))) <> Old
 return Old
 end function










const MAXINTATOM = &hc000
const INVALID_ATOM = cast(ATOM, 0)

declare function GlobalAlloc(byval uFlags as UINT, byval dwBytes as SIZE_T_) as HGLOBAL
declare function GlobalReAlloc(byval hMem as HGLOBAL, byval dwBytes as SIZE_T_, byval uFlags as UINT) as HGLOBAL
declare function GlobalSize(byval hMem as HGLOBAL) as SIZE_T_
declare function GlobalFlags(byval hMem as HGLOBAL) as UINT
declare function GlobalLock(byval hMem as HGLOBAL) as LPVOID
declare function GlobalHandle(byval pMem as LPCVOID) as HGLOBAL
declare function GlobalUnlock(byval hMem as HGLOBAL) as WINBOOL
declare function GlobalFree(byval hMem as HGLOBAL) as HGLOBAL
declare function GlobalCompact(byval dwMinFree as DWORD) as SIZE_T_
declare sub GlobalFix(byval hMem as HGLOBAL)
declare sub GlobalUnfix(byval hMem as HGLOBAL)
declare function GlobalWire(byval hMem as HGLOBAL) as LPVOID
declare function GlobalUnWire(byval hMem as HGLOBAL) as WINBOOL
declare sub GlobalMemoryStatus(byval lpBuffer as LPMEMORYSTATUS)
declare function LocalAlloc(byval uFlags as UINT, byval uBytes as SIZE_T_) as HLOCAL
declare function LocalReAlloc(byval hMem as HLOCAL, byval uBytes as SIZE_T_, byval uFlags as UINT) as HLOCAL
declare function LocalLock(byval hMem as HLOCAL) as LPVOID
declare function LocalHandle(byval pMem as LPCVOID) as HLOCAL
declare function LocalUnlock(byval hMem as HLOCAL) as WINBOOL
declare function LocalSize(byval hMem as HLOCAL) as SIZE_T_
declare function LocalFlags(byval hMem as HLOCAL) as UINT
declare function LocalFree(byval hMem as HLOCAL) as HLOCAL
declare function LocalShrink(byval hMem as HLOCAL, byval cbNewSize as UINT) as SIZE_T_
declare function LocalCompact(byval uMinFree as UINT) as SIZE_T_



const SCS_32BIT_BINARY = 0
const SCS_DOS_BINARY = 1
const SCS_WOW_BINARY = 2
const SCS_PIF_BINARY = 3
const SCS_POSIX_BINARY = 4
const SCS_OS216_BINARY = 5
const SCS_64BIT_BINARY = 6

 const SCS_THIS_PLATFORM_BINARY = SCS_32BIT_BINARY

declare function GetBinaryTypeA(byval lpApplicationName as LPCSTR, byval lpBinaryType as LPDWORD) as WINBOOL
declare function GetBinaryTypeW(byval lpApplicationName as LPCWSTR, byval lpBinaryType as LPDWORD) as WINBOOL
declare function GetShortPathNameA(byval lpszLongPath as LPCSTR, byval lpszShortPath as LPSTR, byval cchBuffer as DWORD) as DWORD


declare function GetProcessAffinityMask(byval hProcess as HANDLE, byval lpProcessAffinityMask as PDWORD_PTR, byval lpSystemAffinityMask as PDWORD_PTR) as WINBOOL
declare function SetProcessAffinityMask(byval hProcess as HANDLE, byval dwProcessAffinityMask as DWORD_PTR) as WINBOOL
declare function GetProcessIoCounters(byval hProcess as HANDLE, byval lpIoCounters as PIO_COUNTERS) as WINBOOL
declare function GetProcessWorkingSetSize(byval hProcess as HANDLE, byval lpMinimumWorkingSetSize as PSIZE_T, byval lpMaximumWorkingSetSize as PSIZE_T) as WINBOOL
declare function SetProcessWorkingSetSize(byval hProcess as HANDLE, byval dwMinimumWorkingSetSize as SIZE_T_, byval dwMaximumWorkingSetSize as SIZE_T_) as WINBOOL
declare sub FatalExit(byval ExitCode as long)
declare function SetEnvironmentStringsA(byval NewEnvironment as LPCH) as WINBOOL


 declare function SetEnvironmentStrings alias "SetEnvironmentStringsA"(byval NewEnvironment as LPCH) as WINBOOL
 declare function GetShortPathName alias "GetShortPathNameA"(byval lpszLongPath as LPCSTR, byval lpszShortPath as LPSTR, byval cchBuffer as DWORD) as DWORD
 declare function GetBinaryType alias "GetBinaryTypeA"(byval lpApplicationName as LPCSTR, byval lpBinaryType as LPDWORD) as WINBOOL


declare sub RaiseFailFastException(byval pExceptionRecord as PEXCEPTION_RECORD, byval pContextRecord as PCONTEXT, byval dwFlags as DWORD)
declare function SetThreadIdealProcessor(byval hThread as HANDLE, byval dwIdealProcessor as DWORD) as DWORD
const FIBER_FLAG_FLOAT_SWITCH = &h1
declare function CreateFiber(byval dwStackSize as SIZE_T_, byval lpStartAddress as LPFIBER_START_ROUTINE, byval lpParameter as LPVOID) as LPVOID
declare function CreateFiberEx(byval dwStackCommitSize as SIZE_T_, byval dwStackReserveSize as SIZE_T_, byval dwFlags as DWORD, byval lpStartAddress as LPFIBER_START_ROUTINE, byval lpParameter as LPVOID) as LPVOID
declare sub DeleteFiber(byval lpFiber as LPVOID)
declare function ConvertThreadToFiber(byval lpParameter as LPVOID) as LPVOID
declare function ConvertThreadToFiberEx(byval lpParameter as LPVOID, byval dwFlags as DWORD) as LPVOID
declare function ConvertFiberToThread() as WINBOOL
declare sub SwitchToFiber(byval lpFiber as LPVOID)
declare function SetThreadAffinityMask(byval hThread as HANDLE, byval dwThreadAffinityMask as DWORD_PTR) as DWORD_PTR

type _THREAD_INFORMATION_CLASS as long
enum
 ThreadMemoryPriority
 ThreadAbsoluteCpuPriority
 ThreadInformationClassMax
end enum

type THREAD_INFORMATION_CLASS as _THREAD_INFORMATION_CLASS

type _PROCESS_INFORMATION_CLASS as long
enum
 ProcessMemoryPriority
 ProcessInformationClassMax
end enum

type PROCESS_INFORMATION_CLASS as _PROCESS_INFORMATION_CLASS



declare function SetProcessPriorityBoost(byval hProcess as HANDLE, byval bDisablePriorityBoost as WINBOOL) as WINBOOL
declare function GetProcessPriorityBoost(byval hProcess as HANDLE, byval pDisablePriorityBoost as PBOOL) as WINBOOL
declare function RequestWakeupLatency(byval latency as LATENCY_TIME) as WINBOOL
declare function IsSystemResumeAutomatic() as WINBOOL
declare function GetThreadIOPendingFlag(byval hThread as HANDLE, byval lpIOIsPending as PBOOL) as WINBOOL
declare function GetThreadSelectorEntry(byval hThread as HANDLE, byval dwSelector as DWORD, byval lpSelectorEntry as LPLDT_ENTRY) as WINBOOL
declare function SetThreadExecutionState(byval esFlags as EXECUTION_STATE) as EXECUTION_STATE




const SEM_FAILCRITICALERRORS = &h0001
const SEM_NOGPFAULTERRORBOX = &h0002
const SEM_NOALIGNMENTFAULTEXCEPT = &h0004
const SEM_NOOPENFILEERRORBOX = &h8000
declare function GetThreadErrorMode() as DWORD
declare function SetThreadErrorMode(byval dwNewMode as DWORD, byval lpOldMode as LPDWORD) as WINBOOL




declare function DebugSetProcessKillOnExit(byval KillOnExit as WINBOOL) as WINBOOL
declare function DebugBreakProcess(byval Process as HANDLE) as WINBOOL
const CRITICAL_SECTION_NO_DEBUG_INFO = RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO

type _DEP_SYSTEM_POLICY_TYPE as long
enum
 DEPPolicyAlwaysOff = 0
 DEPPolicyAlwaysOn
 DEPPolicyOptIn
 DEPPolicyOptOut
 DEPTotalPolicyCount
end enum

type DEP_SYSTEM_POLICY_TYPE as _DEP_SYSTEM_POLICY_TYPE
const HANDLE_FLAG_INHERIT = &h1
const HANDLE_FLAG_PROTECT_FROM_CLOSE = &h2
const HINSTANCE_ERROR = 32
const GET_TAPE_MEDIA_INFORMATION = 0
const GET_TAPE_DRIVE_INFORMATION = 1
const SET_TAPE_MEDIA_INFORMATION = 0
const SET_TAPE_DRIVE_INFORMATION = 1

declare function PulseEvent(byval hEvent as HANDLE) as WINBOOL
declare function WaitForMultipleObjects(byval nCount as DWORD, byval lpHandles as const HANDLE ptr, byval bWaitAll as WINBOOL, byval dwMilliseconds as DWORD) as DWORD
declare function GlobalDeleteAtom(byval nAtom as ATOM) as ATOM
declare function InitAtomTable(byval nSize as DWORD) as WINBOOL
declare function DeleteAtom(byval nAtom as ATOM) as ATOM
declare function SetHandleCount(byval uNumber as UINT) as UINT
declare function RequestDeviceWakeup(byval hDevice as HANDLE) as WINBOOL
declare function CancelDeviceWakeupRequest(byval hDevice as HANDLE) as WINBOOL
declare function GetDevicePowerState(byval hDevice as HANDLE, byval pfOn as WINBOOL ptr) as WINBOOL
declare function SetMessageWaitingIndicator(byval hMsgIndicator as HANDLE, byval ulMsgCount as ULONG) as WINBOOL
declare function SetFileShortNameA(byval hFile as HANDLE, byval lpShortName as LPCSTR) as WINBOOL
declare function SetFileShortNameW(byval hFile as HANDLE, byval lpShortName as LPCWSTR) as WINBOOL
declare function LoadModule(byval lpModuleName as LPCSTR, byval lpParameterBlock as LPVOID) as DWORD
declare function WinExec(byval lpCmdLine as LPCSTR, byval uCmdShow as UINT) as UINT
declare function ClearCommBreak(byval hFile as HANDLE) as WINBOOL
declare function ClearCommError(byval hFile as HANDLE, byval lpErrors as LPDWORD, byval lpStat as LPCOMSTAT) as WINBOOL
declare function SetupComm(byval hFile as HANDLE, byval dwInQueue as DWORD, byval dwOutQueue as DWORD) as WINBOOL
declare function EscapeCommFunction(byval hFile as HANDLE, byval dwFunc as DWORD) as WINBOOL
declare function GetCommConfig(byval hCommDev as HANDLE, byval lpCC as LPCOMMCONFIG, byval lpdwSize as LPDWORD) as WINBOOL
declare function GetCommMask(byval hFile as HANDLE, byval lpEvtMask as LPDWORD) as WINBOOL
declare function GetCommProperties(byval hFile as HANDLE, byval lpCommProp as LPCOMMPROP) as WINBOOL
declare function GetCommModemStatus(byval hFile as HANDLE, byval lpModemStat as LPDWORD) as WINBOOL
declare function GetCommState(byval hFile as HANDLE, byval lpDCB as LPDCB) as WINBOOL
declare function GetCommTimeouts(byval hFile as HANDLE, byval lpCommTimeouts as LPCOMMTIMEOUTS) as WINBOOL
declare function PurgeComm(byval hFile as HANDLE, byval dwFlags as DWORD) as WINBOOL
declare function SetCommBreak(byval hFile as HANDLE) as WINBOOL
declare function SetCommConfig(byval hCommDev as HANDLE, byval lpCC as LPCOMMCONFIG, byval dwSize as DWORD) as WINBOOL
declare function SetCommMask(byval hFile as HANDLE, byval dwEvtMask as DWORD) as WINBOOL
declare function SetCommState(byval hFile as HANDLE, byval lpDCB as LPDCB) as WINBOOL
declare function SetCommTimeouts(byval hFile as HANDLE, byval lpCommTimeouts as LPCOMMTIMEOUTS) as WINBOOL
declare function TransmitCommChar(byval hFile as HANDLE, byval cChar as byte) as WINBOOL
declare function WaitCommEvent(byval hFile as HANDLE, byval lpEvtMask as LPDWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function SetTapePosition(byval hDevice as HANDLE, byval dwPositionMethod as DWORD, byval dwPartition as DWORD, byval dwOffsetLow as DWORD, byval dwOffsetHigh as DWORD, byval bImmediate as WINBOOL) as DWORD
declare function GetTapePosition(byval hDevice as HANDLE, byval dwPositionType as DWORD, byval lpdwPartition as LPDWORD, byval lpdwOffsetLow as LPDWORD, byval lpdwOffsetHigh as LPDWORD) as DWORD
declare function PrepareTape(byval hDevice as HANDLE, byval dwOperation as DWORD, byval bImmediate as WINBOOL) as DWORD
declare function EraseTape(byval hDevice as HANDLE, byval dwEraseType as DWORD, byval bImmediate as WINBOOL) as DWORD
declare function CreateTapePartition(byval hDevice as HANDLE, byval dwPartitionMethod as DWORD, byval dwCount as DWORD, byval dwSize as DWORD) as DWORD
declare function WriteTapemark(byval hDevice as HANDLE, byval dwTapemarkType as DWORD, byval dwTapemarkCount as DWORD, byval bImmediate as WINBOOL) as DWORD
declare function GetTapeStatus(byval hDevice as HANDLE) as DWORD
declare function GetTapeParameters(byval hDevice as HANDLE, byval dwOperation as DWORD, byval lpdwSize as LPDWORD, byval lpTapeInformation as LPVOID) as DWORD
declare function SetTapeParameters(byval hDevice as HANDLE, byval dwOperation as DWORD, byval lpTapeInformation as LPVOID) as DWORD
declare function GetSystemDEPPolicy() as DEP_SYSTEM_POLICY_TYPE
declare function GetSystemRegistryQuota(byval pdwQuotaAllowed as PDWORD, byval pdwQuotaUsed as PDWORD) as WINBOOL
declare function GetSystemTimes(byval lpIdleTime as LPFILETIME, byval lpKernelTime as LPFILETIME, byval lpUserTime as LPFILETIME) as WINBOOL
declare function FileTimeToDosDateTime(byval lpFileTime as const FILETIME ptr, byval lpFatDate as LPWORD, byval lpFatTime as LPWORD) as WINBOOL
declare function DosDateTimeToFileTime(byval wFatDate as WORD, byval wFatTime as WORD, byval lpFileTime as LPFILETIME) as WINBOOL
declare function SetSystemTimeAdjustment(byval dwTimeAdjustment as DWORD, byval bTimeAdjustmentDisabled as WINBOOL) as WINBOOL

 declare function SetFileShortName alias "SetFileShortNameA"(byval hFile as HANDLE, byval lpShortName as LPCSTR) as WINBOOL

declare function MulDiv(byval nNumber as long, byval nNumerator as long, byval nDenominator as long) as long
declare function FormatMessageA(byval dwFlags as DWORD, byval lpSource as LPCVOID, byval dwMessageId as DWORD, byval dwLanguageId as DWORD, byval lpBuffer as LPSTR, byval nSize as DWORD, byval Arguments as va_list ptr) as DWORD
declare function FormatMessageW(byval dwFlags as DWORD, byval lpSource as LPCVOID, byval dwMessageId as DWORD, byval dwLanguageId as DWORD, byval lpBuffer as LPWSTR, byval nSize as DWORD, byval Arguments as va_list ptr) as DWORD

 declare function FormatMessage alias "FormatMessageA"(byval dwFlags as DWORD, byval lpSource as LPCVOID, byval dwMessageId as DWORD, byval dwLanguageId as DWORD, byval lpBuffer as LPSTR, byval nSize as DWORD, byval Arguments as va_list ptr) as DWORD

const FORMAT_MESSAGE_IGNORE_INSERTS = &h00000200
const FORMAT_MESSAGE_FROM_STRING = &h00000400
const FORMAT_MESSAGE_FROM_HMODULE = &h00000800
const FORMAT_MESSAGE_FROM_SYSTEM = &h00001000
const FORMAT_MESSAGE_ARGUMENT_ARRAY = &h00002000
const FORMAT_MESSAGE_MAX_WIDTH_MASK = &h000000ff
type PFE_EXPORT_FUNC as function(byval pbData as PBYTE, byval pvCallbackContext as PVOID, byval ulLength as ULONG) as DWORD
type PFE_IMPORT_FUNC as function(byval pbData as PBYTE, byval pvCallbackContext as PVOID, byval ulLength as PULONG) as DWORD
const FILE_ENCRYPTABLE = 0
const FILE_IS_ENCRYPTED = 1
const FILE_SYSTEM_ATTR = 2
const FILE_ROOT_DIR = 3
const FILE_SYSTEM_DIR = 4
const FILE_UNKNOWN = 5
const FILE_SYSTEM_NOT_SUPPORT = 6
const FILE_USER_DISALLOWED = 7
const FILE_READ_ONLY = 8
const FILE_DIR_DISALLOWED = 9
const FORMAT_MESSAGE_ALLOCATE_BUFFER = &h00000100
const EFS_USE_RECOVERY_KEYS = &h1
const CREATE_FOR_IMPORT = 1
const CREATE_FOR_DIR = 2
const OVERWRITE_HIDDEN = 4
const EFSRPC_SECURE_ONLY = 8

declare function GetNamedPipeInfo(byval hNamedPipe as HANDLE, byval lpFlags as LPDWORD, byval lpOutBufferSize as LPDWORD, byval lpInBufferSize as LPDWORD, byval lpMaxInstances as LPDWORD) as WINBOOL
declare function CreateMailslotA(byval lpName as LPCSTR, byval nMaxMessageSize as DWORD, byval lReadTimeout as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as HANDLE
declare function CreateMailslotW(byval lpName as LPCWSTR, byval nMaxMessageSize as DWORD, byval lReadTimeout as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as HANDLE
declare function GetMailslotInfo(byval hMailslot as HANDLE, byval lpMaxMessageSize as LPDWORD, byval lpNextSize as LPDWORD, byval lpMessageCount as LPDWORD, byval lpReadTimeout as LPDWORD) as WINBOOL
declare function SetMailslotInfo(byval hMailslot as HANDLE, byval lReadTimeout as DWORD) as WINBOOL
declare function EncryptFileA(byval lpFileName as LPCSTR) as WINBOOL
declare function EncryptFileW(byval lpFileName as LPCWSTR) as WINBOOL
declare function DecryptFileA(byval lpFileName as LPCSTR, byval dwReserved as DWORD) as WINBOOL
declare function DecryptFileW(byval lpFileName as LPCWSTR, byval dwReserved as DWORD) as WINBOOL
declare function FileEncryptionStatusA(byval lpFileName as LPCSTR, byval lpStatus as LPDWORD) as WINBOOL
declare function FileEncryptionStatusW(byval lpFileName as LPCWSTR, byval lpStatus as LPDWORD) as WINBOOL
declare function OpenEncryptedFileRawA(byval lpFileName as LPCSTR, byval ulFlags as ULONG, byval pvContext as PVOID ptr) as DWORD
declare function OpenEncryptedFileRawW(byval lpFileName as LPCWSTR, byval ulFlags as ULONG, byval pvContext as PVOID ptr) as DWORD
declare function ReadEncryptedFileRaw(byval pfExportCallback as PFE_EXPORT_FUNC, byval pvCallbackContext as PVOID, byval pvContext as PVOID) as DWORD
declare function WriteEncryptedFileRaw(byval pfImportCallback as PFE_IMPORT_FUNC, byval pvCallbackContext as PVOID, byval pvContext as PVOID) as DWORD
declare sub CloseEncryptedFileRaw(byval pvContext as PVOID)
declare function lstrcmpA(byval lpString1 as LPCSTR, byval lpString2 as LPCSTR) as long
declare function lstrcmpW(byval lpString1 as LPCWSTR, byval lpString2 as LPCWSTR) as long
declare function lstrcmpiA(byval lpString1 as LPCSTR, byval lpString2 as LPCSTR) as long
declare function lstrcmpiW(byval lpString1 as LPCWSTR, byval lpString2 as LPCWSTR) as long
declare function lstrcpynA(byval lpString1 as LPSTR, byval lpString2 as LPCSTR, byval iMaxLength as long) as LPSTR
declare function lstrcpynW(byval lpString1 as LPWSTR, byval lpString2 as LPCWSTR, byval iMaxLength as long) as LPWSTR
declare function lstrcpyA(byval lpString1 as LPSTR, byval lpString2 as LPCSTR) as LPSTR
declare function lstrcpyW(byval lpString1 as LPWSTR, byval lpString2 as LPCWSTR) as LPWSTR
declare function lstrcatA(byval lpString1 as LPSTR, byval lpString2 as LPCSTR) as LPSTR
declare function lstrcatW(byval lpString1 as LPWSTR, byval lpString2 as LPCWSTR) as LPWSTR
declare function lstrlenA(byval lpString as LPCSTR) as long
declare function lstrlenW(byval lpString as LPCWSTR) as long
declare function OpenFile(byval lpFileName as LPCSTR, byval lpReOpenBuff as LPOFSTRUCT, byval uStyle as UINT) as HFILE
declare function _lopen(byval lpPathName as LPCSTR, byval iReadWrite as long) as HFILE
declare function _lcreat(byval lpPathName as LPCSTR, byval iAttribute as long) as HFILE
declare function _lread(byval hFile as HFILE, byval lpBuffer as LPVOID, byval uBytes as UINT) as UINT
declare function _lwrite(byval hFile as HFILE, byval lpBuffer as LPCCH, byval uBytes as UINT) as UINT
declare function _hread(byval hFile as HFILE, byval lpBuffer as LPVOID, byval lBytes as long) as long
declare function _hwrite(byval hFile as HFILE, byval lpBuffer as LPCCH, byval lBytes as long) as long
declare function _lclose(byval hFile as HFILE) as HFILE
declare function _llseek(byval hFile as HFILE, byval lOffset as LONG, byval iOrigin as long) as LONG
declare function IsTextUnicode(byval lpv as const any ptr, byval iSize as long, byval lpiResult as LPINT) as WINBOOL
declare function BackupRead(byval hFile as HANDLE, byval lpBuffer as LPBYTE, byval nNumberOfBytesToRead as DWORD, byval lpNumberOfBytesRead as LPDWORD, byval bAbort as WINBOOL, byval bProcessSecurity as WINBOOL, byval lpContext as LPVOID ptr) as WINBOOL
declare function BackupSeek(byval hFile as HANDLE, byval dwLowBytesToSeek as DWORD, byval dwHighBytesToSeek as DWORD, byval lpdwLowByteSeeked as LPDWORD, byval lpdwHighByteSeeked as LPDWORD, byval lpContext as LPVOID ptr) as WINBOOL
declare function BackupWrite(byval hFile as HANDLE, byval lpBuffer as LPBYTE, byval nNumberOfBytesToWrite as DWORD, byval lpNumberOfBytesWritten as LPDWORD, byval bAbort as WINBOOL, byval bProcessSecurity as WINBOOL, byval lpContext as LPVOID ptr) as WINBOOL

 declare function CreateMailslot alias "CreateMailslotA"(byval lpName as LPCSTR, byval nMaxMessageSize as DWORD, byval lReadTimeout as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as HANDLE
 declare function EncryptFile alias "EncryptFileA"(byval lpFileName as LPCSTR) as WINBOOL
 declare function DecryptFile alias "DecryptFileA"(byval lpFileName as LPCSTR, byval dwReserved as DWORD) as WINBOOL
 declare function FileEncryptionStatus alias "FileEncryptionStatusA"(byval lpFileName as LPCSTR, byval lpStatus as LPDWORD) as WINBOOL
 declare function OpenEncryptedFileRaw alias "OpenEncryptedFileRawA"(byval lpFileName as LPCSTR, byval ulFlags as ULONG, byval pvContext as PVOID ptr) as DWORD
 declare function lstrcmp alias "lstrcmpA"(byval lpString1 as LPCSTR, byval lpString2 as LPCSTR) as long
 declare function lstrcmpi alias "lstrcmpiA"(byval lpString1 as LPCSTR, byval lpString2 as LPCSTR) as long
 declare function lstrcpyn alias "lstrcpynA"(byval lpString1 as LPSTR, byval lpString2 as LPCSTR, byval iMaxLength as long) as LPSTR
 declare function lstrlen alias "lstrlenA"(byval lpString as LPCSTR) as long

type _WIN32_STREAM_ID
 dwStreamId as DWORD
 dwStreamAttributes as DWORD
 Size as LARGE_INTEGER
 dwStreamNameSize as DWORD
 cStreamName as wstring * 1
end type

type WIN32_STREAM_ID as _WIN32_STREAM_ID
type LPWIN32_STREAM_ID as _WIN32_STREAM_ID ptr
const BACKUP_INVALID = &h000000000
const BACKUP_DATA = &h00000001
const BACKUP_EA_DATA = &h00000002
const BACKUP_SECURITY_DATA = &h00000003
const BACKUP_ALTERNATE_DATA = &h00000004
const BACKUP_LINK = &h00000005
const BACKUP_PROPERTY_DATA = &h00000006
const BACKUP_OBJECT_ID = &h00000007
const BACKUP_REPARSE_DATA = &h00000008
const BACKUP_SPARSE_BLOCK = &h00000009
const BACKUP_TXFS_DATA = &h0000000a
const STREAM_NORMAL_ATTRIBUTE = &h000000000
const STREAM_MODIFIED_WHEN_READ = &h00000001
const STREAM_CONTAINS_SECURITY = &h00000002
const STREAM_CONTAINS_PROPERTIES = &h00000004
const STREAM_SPARSE_ATTRIBUTE = &h00000008
const STARTF_USESHOWWINDOW = &h00000001
const STARTF_USESIZE = &h00000002
const STARTF_USEPOSITION = &h00000004
const STARTF_USECOUNTCHARS = &h00000008
const STARTF_USEFILLATTRIBUTE = &h00000010
const STARTF_RUNFULLSCREEN = &h00000020
const STARTF_FORCEONFEEDBACK = &h00000040
const STARTF_FORCEOFFFEEDBACK = &h00000080
const STARTF_USESTDHANDLES = &h00000100
const STARTF_USEHOTKEY = &h00000200
const STARTF_TITLEISLINKNAME = &h00000800
const STARTF_TITLEISAPPID = &h00001000
const STARTF_PREVENTPINNING = &h00002000



const SHUTDOWN_NORETRY = &h1
declare function CreateSemaphoreW(byval lpSemaphoreAttributes as LPSECURITY_ATTRIBUTES, byval lInitialCount as LONG, byval lMaximumCount as LONG, byval lpName as LPCWSTR) as HANDLE


declare function LoadLibraryW(byval lpLibFileName as LPCWSTR) as HMODULE
declare function OpenMutexA(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
declare function CreateSemaphoreA(byval lpSemaphoreAttributes as LPSECURITY_ATTRIBUTES, byval lInitialCount as LONG, byval lMaximumCount as LONG, byval lpName as LPCSTR) as HANDLE

 declare function CreateSemaphore alias "CreateSemaphoreA"(byval lpSemaphoreAttributes as LPSECURITY_ATTRIBUTES, byval lInitialCount as LONG, byval lMaximumCount as LONG, byval lpName as LPCSTR) as HANDLE

declare function OpenSemaphoreA(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
declare function CreateWaitableTimerA(byval lpTimerAttributes as LPSECURITY_ATTRIBUTES, byval bManualReset as WINBOOL, byval lpTimerName as LPCSTR) as HANDLE
declare function CreateWaitableTimerW(byval lpTimerAttributes as LPSECURITY_ATTRIBUTES, byval bManualReset as WINBOOL, byval lpTimerName as LPCWSTR) as HANDLE
declare function OpenWaitableTimerA(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpTimerName as LPCSTR) as HANDLE
declare function CreateFileMappingA(byval hFile as HANDLE, byval lpFileMappingAttributes as LPSECURITY_ATTRIBUTES, byval flProtect as DWORD, byval dwMaximumSizeHigh as DWORD, byval dwMaximumSizeLow as DWORD, byval lpName as LPCSTR) as HANDLE


declare function OpenFileMappingA(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
declare function GetLogicalDriveStringsA(byval nBufferLength as DWORD, byval lpBuffer as LPSTR) as DWORD
declare function LoadLibraryA(byval lpLibFileName as LPCSTR) as HMODULE








 declare function OpenMutex alias "OpenMutexA"(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
 declare function OpenSemaphore alias "OpenSemaphoreA"(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
 declare function OpenWaitableTimer alias "OpenWaitableTimerA"(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpTimerName as LPCSTR) as HANDLE
 declare function CreateFileMapping alias "CreateFileMappingA"(byval hFile as HANDLE, byval lpFileMappingAttributes as LPSECURITY_ATTRIBUTES, byval flProtect as DWORD, byval dwMaximumSizeHigh as DWORD, byval dwMaximumSizeLow as DWORD, byval lpName as LPCSTR) as HANDLE
 declare function OpenFileMapping alias "OpenFileMappingA"(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
 declare function GetLogicalDriveStrings alias "GetLogicalDriveStringsA"(byval nBufferLength as DWORD, byval lpBuffer as LPSTR) as DWORD
 declare function CreateWaitableTimer alias "CreateWaitableTimerA"(byval lpTimerAttributes as LPSECURITY_ATTRIBUTES, byval bManualReset as WINBOOL, byval lpTimerName as LPCSTR) as HANDLE
 declare function LoadLibrary alias "LoadLibraryA"(byval lpLibFileName as LPCSTR) as HMODULE

const ATOM_FLAG_GLOBAL = &h2
declare function GetProcessShutdownParameters(byval lpdwLevel as LPDWORD, byval lpdwFlags as LPDWORD) as WINBOOL
declare sub FatalAppExitA(byval uAction as UINT, byval lpMessageText as LPCSTR)
declare sub FatalAppExitW(byval uAction as UINT, byval lpMessageText as LPCWSTR)
declare sub GetStartupInfoA(byval lpStartupInfo as LPSTARTUPINFOA)
declare function GetFirmwareEnvironmentVariableA(byval lpName as LPCSTR, byval lpGuid as LPCSTR, byval pBuffer as PVOID, byval nSize as DWORD) as DWORD
declare function GetFirmwareEnvironmentVariableW(byval lpName as LPCWSTR, byval lpGuid as LPCWSTR, byval pBuffer as PVOID, byval nSize as DWORD) as DWORD
declare function SetFirmwareEnvironmentVariableA(byval lpName as LPCSTR, byval lpGuid as LPCSTR, byval pValue as PVOID, byval nSize as DWORD) as WINBOOL
declare function SetFirmwareEnvironmentVariableW(byval lpName as LPCWSTR, byval lpGuid as LPCWSTR, byval pValue as PVOID, byval nSize as DWORD) as WINBOOL
declare function FindResourceA(byval hModule as HMODULE, byval lpName as LPCSTR, byval lpType as LPCSTR) as HRSRC
declare function FindResourceW(byval hModule as HMODULE, byval lpName as LPCWSTR, byval lpType as LPCWSTR) as HRSRC
declare function FindResourceExA(byval hModule as HMODULE, byval lpType as LPCSTR, byval lpName as LPCSTR, byval wLanguage as WORD) as HRSRC
declare function EnumResourceTypesA(byval hModule as HMODULE, byval lpEnumFunc as ENUMRESTYPEPROCA, byval lParam as LONG_PTR) as WINBOOL
declare function EnumResourceTypesW(byval hModule as HMODULE, byval lpEnumFunc as ENUMRESTYPEPROCW, byval lParam as LONG_PTR) as WINBOOL
declare function EnumResourceNamesA(byval hModule as HMODULE, byval lpType as LPCSTR, byval lpEnumFunc as ENUMRESNAMEPROCA, byval lParam as LONG_PTR) as WINBOOL
declare function EnumResourceNamesW(byval hModule as HMODULE, byval lpType as LPCWSTR, byval lpEnumFunc as ENUMRESNAMEPROCW, byval lParam as LONG_PTR) as WINBOOL
declare function EnumResourceLanguagesA(byval hModule as HMODULE, byval lpType as LPCSTR, byval lpName as LPCSTR, byval lpEnumFunc as ENUMRESLANGPROCA, byval lParam as LONG_PTR) as WINBOOL
declare function EnumResourceLanguagesW(byval hModule as HMODULE, byval lpType as LPCWSTR, byval lpName as LPCWSTR, byval lpEnumFunc as ENUMRESLANGPROCW, byval lParam as LONG_PTR) as WINBOOL
declare function BeginUpdateResourceA(byval pFileName as LPCSTR, byval bDeleteExistingResources as WINBOOL) as HANDLE
declare function BeginUpdateResourceW(byval pFileName as LPCWSTR, byval bDeleteExistingResources as WINBOOL) as HANDLE
declare function UpdateResourceA(byval hUpdate as HANDLE, byval lpType as LPCSTR, byval lpName as LPCSTR, byval wLanguage as WORD, byval lpData as LPVOID, byval cb as DWORD) as WINBOOL
declare function UpdateResourceW(byval hUpdate as HANDLE, byval lpType as LPCWSTR, byval lpName as LPCWSTR, byval wLanguage as WORD, byval lpData as LPVOID, byval cb as DWORD) as WINBOOL
declare function EndUpdateResourceA(byval hUpdate as HANDLE, byval fDiscard as WINBOOL) as WINBOOL
declare function EndUpdateResourceW(byval hUpdate as HANDLE, byval fDiscard as WINBOOL) as WINBOOL


declare function GlobalAddAtomA(byval lpString as LPCSTR) as ATOM
declare function GlobalAddAtomW(byval lpString as LPCWSTR) as ATOM
declare function GlobalAddAtomExA(byval lpString as LPCSTR, byval Flags as DWORD) as ATOM
declare function GlobalAddAtomExW(byval lpString as LPCWSTR, byval Flags as DWORD) as ATOM
declare function GlobalFindAtomA(byval lpString as LPCSTR) as ATOM
declare function GlobalFindAtomW(byval lpString as LPCWSTR) as ATOM
declare function GlobalGetAtomNameA(byval nAtom as ATOM, byval lpBuffer as LPSTR, byval nSize as long) as UINT
declare function GlobalGetAtomNameW(byval nAtom as ATOM, byval lpBuffer as LPWSTR, byval nSize as long) as UINT
declare function AddAtomA(byval lpString as LPCSTR) as ATOM
declare function AddAtomW(byval lpString as LPCWSTR) as ATOM
declare function FindAtomA(byval lpString as LPCSTR) as ATOM
declare function FindAtomW(byval lpString as LPCWSTR) as ATOM
declare function GetAtomNameA(byval nAtom as ATOM, byval lpBuffer as LPSTR, byval nSize as long) as UINT
declare function GetAtomNameW(byval nAtom as ATOM, byval lpBuffer as LPWSTR, byval nSize as long) as UINT
declare function GetProfileIntA(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval nDefault as INT_) as UINT
declare function GetProfileIntW(byval lpAppName as LPCWSTR, byval lpKeyName as LPCWSTR, byval nDefault as INT_) as UINT
declare function GetProfileStringA(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval lpDefault as LPCSTR, byval lpReturnedString as LPSTR, byval nSize as DWORD) as DWORD
declare function GetProfileStringW(byval lpAppName as LPCWSTR, byval lpKeyName as LPCWSTR, byval lpDefault as LPCWSTR, byval lpReturnedString as LPWSTR, byval nSize as DWORD) as DWORD
declare function WriteProfileStringA(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval lpString as LPCSTR) as WINBOOL
declare function WriteProfileStringW(byval lpAppName as LPCWSTR, byval lpKeyName as LPCWSTR, byval lpString as LPCWSTR) as WINBOOL
declare function GetProfileSectionA(byval lpAppName as LPCSTR, byval lpReturnedString as LPSTR, byval nSize as DWORD) as DWORD
declare function GetProfileSectionW(byval lpAppName as LPCWSTR, byval lpReturnedString as LPWSTR, byval nSize as DWORD) as DWORD
declare function WriteProfileSectionA(byval lpAppName as LPCSTR, byval lpString as LPCSTR) as WINBOOL
declare function WriteProfileSectionW(byval lpAppName as LPCWSTR, byval lpString as LPCWSTR) as WINBOOL
declare function GetPrivateProfileIntA(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval nDefault as INT_, byval lpFileName as LPCSTR) as UINT
declare function GetPrivateProfileIntW(byval lpAppName as LPCWSTR, byval lpKeyName as LPCWSTR, byval nDefault as INT_, byval lpFileName as LPCWSTR) as UINT
declare function GetPrivateProfileStringA(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval lpDefault as LPCSTR, byval lpReturnedString as LPSTR, byval nSize as DWORD, byval lpFileName as LPCSTR) as DWORD
declare function GetPrivateProfileStringW(byval lpAppName as LPCWSTR, byval lpKeyName as LPCWSTR, byval lpDefault as LPCWSTR, byval lpReturnedString as LPWSTR, byval nSize as DWORD, byval lpFileName as LPCWSTR) as DWORD
declare function WritePrivateProfileStringA(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval lpString as LPCSTR, byval lpFileName as LPCSTR) as WINBOOL
declare function WritePrivateProfileStringW(byval lpAppName as LPCWSTR, byval lpKeyName as LPCWSTR, byval lpString as LPCWSTR, byval lpFileName as LPCWSTR) as WINBOOL
declare function GetPrivateProfileSectionA(byval lpAppName as LPCSTR, byval lpReturnedString as LPSTR, byval nSize as DWORD, byval lpFileName as LPCSTR) as DWORD
declare function GetPrivateProfileSectionW(byval lpAppName as LPCWSTR, byval lpReturnedString as LPWSTR, byval nSize as DWORD, byval lpFileName as LPCWSTR) as DWORD
declare function WritePrivateProfileSectionA(byval lpAppName as LPCSTR, byval lpString as LPCSTR, byval lpFileName as LPCSTR) as WINBOOL
declare function WritePrivateProfileSectionW(byval lpAppName as LPCWSTR, byval lpString as LPCWSTR, byval lpFileName as LPCWSTR) as WINBOOL
declare function GetPrivateProfileSectionNamesA(byval lpszReturnBuffer as LPSTR, byval nSize as DWORD, byval lpFileName as LPCSTR) as DWORD
declare function GetPrivateProfileSectionNamesW(byval lpszReturnBuffer as LPWSTR, byval nSize as DWORD, byval lpFileName as LPCWSTR) as DWORD
declare function GetPrivateProfileStructA(byval lpszSection as LPCSTR, byval lpszKey as LPCSTR, byval lpStruct as LPVOID, byval uSizeStruct as UINT, byval szFile as LPCSTR) as WINBOOL
declare function GetPrivateProfileStructW(byval lpszSection as LPCWSTR, byval lpszKey as LPCWSTR, byval lpStruct as LPVOID, byval uSizeStruct as UINT, byval szFile as LPCWSTR) as WINBOOL
declare function WritePrivateProfileStructA(byval lpszSection as LPCSTR, byval lpszKey as LPCSTR, byval lpStruct as LPVOID, byval uSizeStruct as UINT, byval szFile as LPCSTR) as WINBOOL
declare function WritePrivateProfileStructW(byval lpszSection as LPCWSTR, byval lpszKey as LPCWSTR, byval lpStruct as LPVOID, byval uSizeStruct as UINT, byval szFile as LPCWSTR) as WINBOOL
declare function GetTempPathA(byval nBufferLength as DWORD, byval lpBuffer as LPSTR) as DWORD
declare function GetTempFileNameA(byval lpPathName as LPCSTR, byval lpPrefixString as LPCSTR, byval uUnique as UINT, byval lpTempFileName as LPSTR) as UINT


 declare sub GetStartupInfo alias "GetStartupInfoA"(byval lpStartupInfo as LPSTARTUPINFOA)
 declare function FindResourceEx alias "FindResourceExA"(byval hModule as HMODULE, byval lpType as LPCSTR, byval lpName as LPCSTR, byval wLanguage as WORD) as HRSRC
 declare function GetTempPath alias "GetTempPathA"(byval nBufferLength as DWORD, byval lpBuffer as LPSTR) as DWORD
 declare function GetTempFileName alias "GetTempFileNameA"(byval lpPathName as LPCSTR, byval lpPrefixString as LPCSTR, byval uUnique as UINT, byval lpTempFileName as LPSTR) as UINT
 declare sub FatalAppExit alias "FatalAppExitA"(byval uAction as UINT, byval lpMessageText as LPCSTR)
 declare function GetFirmwareEnvironmentVariable alias "GetFirmwareEnvironmentVariableA"(byval lpName as LPCSTR, byval lpGuid as LPCSTR, byval pBuffer as PVOID, byval nSize as DWORD) as DWORD
 declare function SetFirmwareEnvironmentVariable alias "SetFirmwareEnvironmentVariableA"(byval lpName as LPCSTR, byval lpGuid as LPCSTR, byval pValue as PVOID, byval nSize as DWORD) as WINBOOL
 declare function FindResource alias "FindResourceA"(byval hModule as HMODULE, byval lpName as LPCSTR, byval lpType as LPCSTR) as HRSRC
 declare function EnumResourceTypes alias "EnumResourceTypesA"(byval hModule as HMODULE, byval lpEnumFunc as ENUMRESTYPEPROCA, byval lParam as LONG_PTR) as WINBOOL
 declare function EnumResourceNames alias "EnumResourceNamesA"(byval hModule as HMODULE, byval lpType as LPCSTR, byval lpEnumFunc as ENUMRESNAMEPROCA, byval lParam as LONG_PTR) as WINBOOL
 declare function BeginUpdateResource alias "BeginUpdateResourceA"(byval pFileName as LPCSTR, byval bDeleteExistingResources as WINBOOL) as HANDLE
 declare function UpdateResource alias "UpdateResourceA"(byval hUpdate as HANDLE, byval lpType as LPCSTR, byval lpName as LPCSTR, byval wLanguage as WORD, byval lpData as LPVOID, byval cb as DWORD) as WINBOOL
 declare function EndUpdateResource alias "EndUpdateResourceA"(byval hUpdate as HANDLE, byval fDiscard as WINBOOL) as WINBOOL
 declare function GlobalAddAtom alias "GlobalAddAtomA"(byval lpString as LPCSTR) as ATOM
 declare function GlobalAddAtomEx alias "GlobalAddAtomExA"(byval lpString as LPCSTR, byval Flags as DWORD) as ATOM
 declare function GlobalFindAtom alias "GlobalFindAtomA"(byval lpString as LPCSTR) as ATOM
 declare function GlobalGetAtomName alias "GlobalGetAtomNameA"(byval nAtom as ATOM, byval lpBuffer as LPSTR, byval nSize as long) as UINT
 declare function AddAtom alias "AddAtomA"(byval lpString as LPCSTR) as ATOM
 declare function FindAtom alias "FindAtomA"(byval lpString as LPCSTR) as ATOM
 declare function GetAtomName alias "GetAtomNameA"(byval nAtom as ATOM, byval lpBuffer as LPSTR, byval nSize as long) as UINT
 declare function GetProfileInt alias "GetProfileIntA"(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval nDefault as INT_) as UINT
 declare function GetProfileString alias "GetProfileStringA"(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval lpDefault as LPCSTR, byval lpReturnedString as LPSTR, byval nSize as DWORD) as DWORD
 declare function WriteProfileString alias "WriteProfileStringA"(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval lpString as LPCSTR) as WINBOOL
 declare function GetProfileSection alias "GetProfileSectionA"(byval lpAppName as LPCSTR, byval lpReturnedString as LPSTR, byval nSize as DWORD) as DWORD
 declare function WriteProfileSection alias "WriteProfileSectionA"(byval lpAppName as LPCSTR, byval lpString as LPCSTR) as WINBOOL
 declare function GetPrivateProfileInt alias "GetPrivateProfileIntA"(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval nDefault as INT_, byval lpFileName as LPCSTR) as UINT
 declare function GetPrivateProfileString alias "GetPrivateProfileStringA"(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval lpDefault as LPCSTR, byval lpReturnedString as LPSTR, byval nSize as DWORD, byval lpFileName as LPCSTR) as DWORD
 declare function WritePrivateProfileString alias "WritePrivateProfileStringA"(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval lpString as LPCSTR, byval lpFileName as LPCSTR) as WINBOOL
 declare function GetPrivateProfileSection alias "GetPrivateProfileSectionA"(byval lpAppName as LPCSTR, byval lpReturnedString as LPSTR, byval nSize as DWORD, byval lpFileName as LPCSTR) as DWORD
 declare function WritePrivateProfileSection alias "WritePrivateProfileSectionA"(byval lpAppName as LPCSTR, byval lpString as LPCSTR, byval lpFileName as LPCSTR) as WINBOOL
 declare function GetPrivateProfileSectionNames alias "GetPrivateProfileSectionNamesA"(byval lpszReturnBuffer as LPSTR, byval nSize as DWORD, byval lpFileName as LPCSTR) as DWORD
 declare function GetPrivateProfileStruct alias "GetPrivateProfileStructA"(byval lpszSection as LPCSTR, byval lpszKey as LPCSTR, byval lpStruct as LPVOID, byval uSizeStruct as UINT, byval szFile as LPCSTR) as WINBOOL
 declare function WritePrivateProfileStruct alias "WritePrivateProfileStructA"(byval lpszSection as LPCSTR, byval lpszKey as LPCSTR, byval lpStruct as LPVOID, byval uSizeStruct as UINT, byval szFile as LPCSTR) as WINBOOL


declare function GetSystemWow64DirectoryA(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT
declare function GetSystemWow64DirectoryW(byval lpBuffer as LPWSTR, byval uSize as UINT) as UINT

 declare function GetSystemWow64Directory alias "GetSystemWow64DirectoryA"(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT

declare function Wow64EnableWow64FsRedirection(byval Wow64FsEnableRedirection as WINBOOLEAN) as WINBOOLEAN
type PGET_SYSTEM_WOW64_DIRECTORY_A as function(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT
type PGET_SYSTEM_WOW64_DIRECTORY_W as function(byval lpBuffer as LPWSTR, byval uSize as UINT) as UINT


declare function SetDllDirectoryA(byval lpPathName as LPCSTR) as WINBOOL
declare function SetDllDirectoryW(byval lpPathName as LPCWSTR) as WINBOOL
declare function GetDllDirectoryA(byval nBufferLength as DWORD, byval lpBuffer as LPSTR) as DWORD
declare function GetDllDirectoryW(byval nBufferLength as DWORD, byval lpBuffer as LPWSTR) as DWORD

 declare function SetDllDirectory alias "SetDllDirectoryA"(byval lpPathName as LPCSTR) as WINBOOL
 declare function GetDllDirectory alias "GetDllDirectoryA"(byval nBufferLength as DWORD, byval lpBuffer as LPSTR) as DWORD

const BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE = &h1
const BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE = &h10000
const BASE_SEARCH_PATH_PERMANENT = &h8000
const BASE_SEARCH_PATH_INVALID_FLAGS = not &h18001

declare function SetSearchPathMode(byval Flags as DWORD) as WINBOOL
declare function CreateDirectoryExA(byval lpTemplateDirectory as LPCSTR, byval lpNewDirectory as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL
declare function CreateDirectoryExW(byval lpTemplateDirectory as LPCWSTR, byval lpNewDirectory as LPCWSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL



 declare function CreateDirectoryEx alias "CreateDirectoryExA"(byval lpTemplateDirectory as LPCSTR, byval lpNewDirectory as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL

const DDD_RAW_TARGET_PATH = &h00000001
const DDD_REMOVE_DEFINITION = &h00000002
const DDD_EXACT_MATCH_ON_REMOVE = &h00000004
const DDD_NO_BROADCAST_SYSTEM = &h00000008
const DDD_LUID_BROADCAST_DRIVE = &h00000010
declare function DefineDosDeviceA(byval dwFlags as DWORD, byval lpDeviceName as LPCSTR, byval lpTargetPath as LPCSTR) as WINBOOL
declare function QueryDosDeviceA(byval lpDeviceName as LPCSTR, byval lpTargetPath as LPSTR, byval ucchMax as DWORD) as DWORD

 declare function DefineDosDevice alias "DefineDosDeviceA"(byval dwFlags as DWORD, byval lpDeviceName as LPCSTR, byval lpTargetPath as LPCSTR) as WINBOOL
 declare function QueryDosDevice alias "QueryDosDeviceA"(byval lpDeviceName as LPCSTR, byval lpTargetPath as LPSTR, byval ucchMax as DWORD) as DWORD




declare function ReOpenFile(byval hOriginalFile as HANDLE, byval dwDesiredAccess as DWORD, byval dwShareMode as DWORD, byval dwFlagsAndAttributes as DWORD) as HANDLE



declare function GetCompressedFileSizeA(byval lpFileName as LPCSTR, byval lpFileSizeHigh as LPDWORD) as DWORD
declare function GetCompressedFileSizeW(byval lpFileName as LPCWSTR, byval lpFileSizeHigh as LPDWORD) as DWORD



 declare function GetCompressedFileSize alias "GetCompressedFileSizeA"(byval lpFileName as LPCSTR, byval lpFileSizeHigh as LPDWORD) as DWORD

type LPPROGRESS_ROUTINE as function(byval TotalFileSize as LARGE_INTEGER, byval TotalBytesTransferred as LARGE_INTEGER, byval StreamSize as LARGE_INTEGER, byval StreamBytesTransferred as LARGE_INTEGER, byval dwStreamNumber as DWORD, byval dwCallbackReason as DWORD, byval hSourceFile as HANDLE, byval hDestinationFile as HANDLE, byval lpData as LPVOID) as DWORD
declare function CheckNameLegalDOS8Dot3A(byval lpName as LPCSTR, byval lpOemName as LPSTR, byval OemNameSize as DWORD, byval pbNameContainsSpaces as PBOOL, byval pbNameLegal as PBOOL) as WINBOOL
declare function CheckNameLegalDOS8Dot3W(byval lpName as LPCWSTR, byval lpOemName as LPSTR, byval OemNameSize as DWORD, byval pbNameContainsSpaces as PBOOL, byval pbNameLegal as PBOOL) as WINBOOL
declare function CopyFileA(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR, byval bFailIfExists as WINBOOL) as WINBOOL
declare function CopyFileW(byval lpExistingFileName as LPCWSTR, byval lpNewFileName as LPCWSTR, byval bFailIfExists as WINBOOL) as WINBOOL
declare function CopyFileExA(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR, byval lpProgressRoutine as LPPROGRESS_ROUTINE, byval lpData as LPVOID, byval pbCancel as LPBOOL, byval dwCopyFlags as DWORD) as WINBOOL
declare function CopyFileExW(byval lpExistingFileName as LPCWSTR, byval lpNewFileName as LPCWSTR, byval lpProgressRoutine as LPPROGRESS_ROUTINE, byval lpData as LPVOID, byval pbCancel as LPBOOL, byval dwCopyFlags as DWORD) as WINBOOL




 declare function CheckNameLegalDOS8Dot3 alias "CheckNameLegalDOS8Dot3A"(byval lpName as LPCSTR, byval lpOemName as LPSTR, byval OemNameSize as DWORD, byval pbNameContainsSpaces as PBOOL, byval pbNameLegal as PBOOL) as WINBOOL
 declare function CopyFile alias "CopyFileA"(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR, byval bFailIfExists as WINBOOL) as WINBOOL
 declare function CopyFileEx alias "CopyFileExA"(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR, byval lpProgressRoutine as LPPROGRESS_ROUTINE, byval lpData as LPVOID, byval pbCancel as LPBOOL, byval dwCopyFlags as DWORD) as WINBOOL

declare function MoveFileA(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR) as WINBOOL
declare function MoveFileW(byval lpExistingFileName as LPCWSTR, byval lpNewFileName as LPCWSTR) as WINBOOL

 declare function MoveFile alias "MoveFileA"(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR) as WINBOOL

declare function MoveFileExA(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR, byval dwFlags as DWORD) as WINBOOL
declare function MoveFileExW(byval lpExistingFileName as LPCWSTR, byval lpNewFileName as LPCWSTR, byval dwFlags as DWORD) as WINBOOL

 declare function MoveFileEx alias "MoveFileExA"(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR, byval dwFlags as DWORD) as WINBOOL

declare function MoveFileWithProgressA(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR, byval lpProgressRoutine as LPPROGRESS_ROUTINE, byval lpData as LPVOID, byval dwFlags as DWORD) as WINBOOL
declare function MoveFileWithProgressW(byval lpExistingFileName as LPCWSTR, byval lpNewFileName as LPCWSTR, byval lpProgressRoutine as LPPROGRESS_ROUTINE, byval lpData as LPVOID, byval dwFlags as DWORD) as WINBOOL



 declare function MoveFileWithProgress alias "MoveFileWithProgressA"(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR, byval lpProgressRoutine as LPPROGRESS_ROUTINE, byval lpData as LPVOID, byval dwFlags as DWORD) as WINBOOL

const MOVEFILE_REPLACE_EXISTING = &h00000001
const MOVEFILE_COPY_ALLOWED = &h00000002
const MOVEFILE_DELAY_UNTIL_REBOOT = &h00000004
const MOVEFILE_WRITE_THROUGH = &h00000008
const MOVEFILE_CREATE_HARDLINK = &h00000010
const MOVEFILE_FAIL_IF_NOT_TRACKABLE = &h00000020

declare function ReplaceFileA(byval lpReplacedFileName as LPCSTR, byval lpReplacementFileName as LPCSTR, byval lpBackupFileName as LPCSTR, byval dwReplaceFlags as DWORD, byval lpExclude as LPVOID, byval lpReserved as LPVOID) as WINBOOL
declare function ReplaceFileW(byval lpReplacedFileName as LPCWSTR, byval lpReplacementFileName as LPCWSTR, byval lpBackupFileName as LPCWSTR, byval dwReplaceFlags as DWORD, byval lpExclude as LPVOID, byval lpReserved as LPVOID) as WINBOOL
declare function CreateHardLinkA(byval lpFileName as LPCSTR, byval lpExistingFileName as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL
declare function CreateHardLinkW(byval lpFileName as LPCWSTR, byval lpExistingFileName as LPCWSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL



 declare function ReplaceFile alias "ReplaceFileA"(byval lpReplacedFileName as LPCSTR, byval lpReplacementFileName as LPCSTR, byval lpBackupFileName as LPCSTR, byval dwReplaceFlags as DWORD, byval lpExclude as LPVOID, byval lpReserved as LPVOID) as WINBOOL
 declare function CreateHardLink alias "CreateHardLinkA"(byval lpFileName as LPCSTR, byval lpExistingFileName as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL

type _STREAM_INFO_LEVELS as long
enum
 FindStreamInfoStandard
 FindStreamInfoMaxInfoLevel
end enum

type STREAM_INFO_LEVELS as _STREAM_INFO_LEVELS

type _WIN32_FIND_STREAM_DATA
 StreamSize as LARGE_INTEGER
 cStreamName as wstring * 260 + 36
end type

type WIN32_FIND_STREAM_DATA as _WIN32_FIND_STREAM_DATA
type PWIN32_FIND_STREAM_DATA as _WIN32_FIND_STREAM_DATA ptr
declare function FindFirstStreamW(byval lpFileName as LPCWSTR, byval InfoLevel as STREAM_INFO_LEVELS, byval lpFindStreamData as LPVOID, byval dwFlags as DWORD) as HANDLE
declare function FindNextStreamW(byval hFindStream as HANDLE, byval lpFindStreamData as LPVOID) as WINBOOL


declare function CreateNamedPipeA(byval lpName as LPCSTR, byval dwOpenMode as DWORD, byval dwPipeMode as DWORD, byval nMaxInstances as DWORD, byval nOutBufferSize as DWORD, byval nInBufferSize as DWORD, byval nDefaultTimeOut as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as HANDLE
declare function GetNamedPipeHandleStateA(byval hNamedPipe as HANDLE, byval lpState as LPDWORD, byval lpCurInstances as LPDWORD, byval lpMaxCollectionCount as LPDWORD, byval lpCollectDataTimeout as LPDWORD, byval lpUserName as LPSTR, byval nMaxUserNameSize as DWORD) as WINBOOL
declare function GetNamedPipeHandleStateW(byval hNamedPipe as HANDLE, byval lpState as LPDWORD, byval lpCurInstances as LPDWORD, byval lpMaxCollectionCount as LPDWORD, byval lpCollectDataTimeout as LPDWORD, byval lpUserName as LPWSTR, byval nMaxUserNameSize as DWORD) as WINBOOL
declare function CallNamedPipeA(byval lpNamedPipeName as LPCSTR, byval lpInBuffer as LPVOID, byval nInBufferSize as DWORD, byval lpOutBuffer as LPVOID, byval nOutBufferSize as DWORD, byval lpBytesRead as LPDWORD, byval nTimeOut as DWORD) as WINBOOL
declare function CallNamedPipeW(byval lpNamedPipeName as LPCWSTR, byval lpInBuffer as LPVOID, byval nInBufferSize as DWORD, byval lpOutBuffer as LPVOID, byval nOutBufferSize as DWORD, byval lpBytesRead as LPDWORD, byval nTimeOut as DWORD) as WINBOOL
declare function WaitNamedPipeA(byval lpNamedPipeName as LPCSTR, byval nTimeOut as DWORD) as WINBOOL
declare function SetVolumeLabelA(byval lpRootPathName as LPCSTR, byval lpVolumeName as LPCSTR) as WINBOOL
declare function SetVolumeLabelW(byval lpRootPathName as LPCWSTR, byval lpVolumeName as LPCWSTR) as WINBOOL
declare sub SetFileApisToOEM()
declare sub SetFileApisToANSI()
declare function AreFileApisANSI() as WINBOOL
declare function GetVolumeInformationA(byval lpRootPathName as LPCSTR, byval lpVolumeNameBuffer as LPSTR, byval nVolumeNameSize as DWORD, byval lpVolumeSerialNumber as LPDWORD, byval lpMaximumComponentLength as LPDWORD, byval lpFileSystemFlags as LPDWORD, byval lpFileSystemNameBuffer as LPSTR, byval nFileSystemNameSize as DWORD) as WINBOOL
declare function ClearEventLogA(byval hEventLog as HANDLE, byval lpBackupFileName as LPCSTR) as WINBOOL
declare function ClearEventLogW(byval hEventLog as HANDLE, byval lpBackupFileName as LPCWSTR) as WINBOOL
declare function BackupEventLogA(byval hEventLog as HANDLE, byval lpBackupFileName as LPCSTR) as WINBOOL
declare function BackupEventLogW(byval hEventLog as HANDLE, byval lpBackupFileName as LPCWSTR) as WINBOOL
declare function CloseEventLog(byval hEventLog as HANDLE) as WINBOOL
declare function DeregisterEventSource(byval hEventLog as HANDLE) as WINBOOL
declare function NotifyChangeEventLog(byval hEventLog as HANDLE, byval hEvent as HANDLE) as WINBOOL
declare function GetNumberOfEventLogRecords(byval hEventLog as HANDLE, byval NumberOfRecords as PDWORD) as WINBOOL
declare function GetOldestEventLogRecord(byval hEventLog as HANDLE, byval OldestRecord as PDWORD) as WINBOOL
declare function OpenEventLogA(byval lpUNCServerName as LPCSTR, byval lpSourceName as LPCSTR) as HANDLE
declare function OpenEventLogW(byval lpUNCServerName as LPCWSTR, byval lpSourceName as LPCWSTR) as HANDLE
declare function RegisterEventSourceA(byval lpUNCServerName as LPCSTR, byval lpSourceName as LPCSTR) as HANDLE
declare function RegisterEventSourceW(byval lpUNCServerName as LPCWSTR, byval lpSourceName as LPCWSTR) as HANDLE
declare function OpenBackupEventLogA(byval lpUNCServerName as LPCSTR, byval lpFileName as LPCSTR) as HANDLE
declare function OpenBackupEventLogW(byval lpUNCServerName as LPCWSTR, byval lpFileName as LPCWSTR) as HANDLE
declare function ReadEventLogA(byval hEventLog as HANDLE, byval dwReadFlags as DWORD, byval dwRecordOffset as DWORD, byval lpBuffer as LPVOID, byval nNumberOfBytesToRead as DWORD, byval pnBytesRead as DWORD ptr, byval pnMinNumberOfBytesNeeded as DWORD ptr) as WINBOOL
declare function ReadEventLogW(byval hEventLog as HANDLE, byval dwReadFlags as DWORD, byval dwRecordOffset as DWORD, byval lpBuffer as LPVOID, byval nNumberOfBytesToRead as DWORD, byval pnBytesRead as DWORD ptr, byval pnMinNumberOfBytesNeeded as DWORD ptr) as WINBOOL
declare function ReportEventA(byval hEventLog as HANDLE, byval wType as WORD, byval wCategory as WORD, byval dwEventID as DWORD, byval lpUserSid as PSID, byval wNumStrings as WORD, byval dwDataSize as DWORD, byval lpStrings as LPCSTR ptr, byval lpRawData as LPVOID) as WINBOOL
declare function ReportEventW(byval hEventLog as HANDLE, byval wType as WORD, byval wCategory as WORD, byval dwEventID as DWORD, byval lpUserSid as PSID, byval wNumStrings as WORD, byval dwDataSize as DWORD, byval lpStrings as LPCWSTR ptr, byval lpRawData as LPVOID) as WINBOOL

 declare function CreateNamedPipe alias "CreateNamedPipeA"(byval lpName as LPCSTR, byval dwOpenMode as DWORD, byval dwPipeMode as DWORD, byval nMaxInstances as DWORD, byval nOutBufferSize as DWORD, byval nInBufferSize as DWORD, byval nDefaultTimeOut as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as HANDLE
 declare function WaitNamedPipe alias "WaitNamedPipeA"(byval lpNamedPipeName as LPCSTR, byval nTimeOut as DWORD) as WINBOOL
 declare function GetVolumeInformation alias "GetVolumeInformationA"(byval lpRootPathName as LPCSTR, byval lpVolumeNameBuffer as LPSTR, byval nVolumeNameSize as DWORD, byval lpVolumeSerialNumber as LPDWORD, byval lpMaximumComponentLength as LPDWORD, byval lpFileSystemFlags as LPDWORD, byval lpFileSystemNameBuffer as LPSTR, byval nFileSystemNameSize as DWORD) as WINBOOL
 declare function GetNamedPipeHandleState alias "GetNamedPipeHandleStateA"(byval hNamedPipe as HANDLE, byval lpState as LPDWORD, byval lpCurInstances as LPDWORD, byval lpMaxCollectionCount as LPDWORD, byval lpCollectDataTimeout as LPDWORD, byval lpUserName as LPSTR, byval nMaxUserNameSize as DWORD) as WINBOOL
 declare function CallNamedPipe alias "CallNamedPipeA"(byval lpNamedPipeName as LPCSTR, byval lpInBuffer as LPVOID, byval nInBufferSize as DWORD, byval lpOutBuffer as LPVOID, byval nOutBufferSize as DWORD, byval lpBytesRead as LPDWORD, byval nTimeOut as DWORD) as WINBOOL
 declare function SetVolumeLabel alias "SetVolumeLabelA"(byval lpRootPathName as LPCSTR, byval lpVolumeName as LPCSTR) as WINBOOL
 declare function ClearEventLog alias "ClearEventLogA"(byval hEventLog as HANDLE, byval lpBackupFileName as LPCSTR) as WINBOOL
 declare function BackupEventLog alias "BackupEventLogA"(byval hEventLog as HANDLE, byval lpBackupFileName as LPCSTR) as WINBOOL
 declare function OpenEventLog alias "OpenEventLogA"(byval lpUNCServerName as LPCSTR, byval lpSourceName as LPCSTR) as HANDLE
 declare function RegisterEventSource alias "RegisterEventSourceA"(byval lpUNCServerName as LPCSTR, byval lpSourceName as LPCSTR) as HANDLE
 declare function OpenBackupEventLog alias "OpenBackupEventLogA"(byval lpUNCServerName as LPCSTR, byval lpFileName as LPCSTR) as HANDLE
 declare function ReadEventLog alias "ReadEventLogA"(byval hEventLog as HANDLE, byval dwReadFlags as DWORD, byval dwRecordOffset as DWORD, byval lpBuffer as LPVOID, byval nNumberOfBytesToRead as DWORD, byval pnBytesRead as DWORD ptr, byval pnMinNumberOfBytesNeeded as DWORD ptr) as WINBOOL
 declare function ReportEvent alias "ReportEventA"(byval hEventLog as HANDLE, byval wType as WORD, byval wCategory as WORD, byval dwEventID as DWORD, byval lpUserSid as PSID, byval wNumStrings as WORD, byval dwDataSize as DWORD, byval lpStrings as LPCSTR ptr, byval lpRawData as LPVOID) as WINBOOL


const EVENTLOG_FULL_INFO = 0

type _EVENTLOG_FULL_INFORMATION
 dwFull as DWORD
end type

type EVENTLOG_FULL_INFORMATION as _EVENTLOG_FULL_INFORMATION
type LPEVENTLOG_FULL_INFORMATION as _EVENTLOG_FULL_INFORMATION ptr
declare function GetEventLogInformation(byval hEventLog as HANDLE, byval dwInfoLevel as DWORD, byval lpBuffer as LPVOID, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL


declare function AccessCheckAndAuditAlarmA(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPSTR, byval ObjectName as LPSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval DesiredAccess as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatus as LPBOOL, byval pfGenerateOnClose as LPBOOL) as WINBOOL
declare function AccessCheckByTypeAndAuditAlarmA(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPCSTR, byval ObjectName as LPCSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatus as LPBOOL, byval pfGenerateOnClose as LPBOOL) as WINBOOL
declare function AccessCheckByTypeResultListAndAuditAlarmA(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPCSTR, byval ObjectName as LPCSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatusList as LPDWORD, byval pfGenerateOnClose as LPBOOL) as WINBOOL
declare function AccessCheckByTypeResultListAndAuditAlarmByHandleA(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ClientToken as HANDLE, byval ObjectTypeName as LPCSTR, byval ObjectName as LPCSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatusList as LPDWORD, byval pfGenerateOnClose as LPBOOL) as WINBOOL
declare function ObjectOpenAuditAlarmA(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPSTR, byval ObjectName as LPSTR, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval GrantedAccess as DWORD, byval Privileges as PPRIVILEGE_SET, byval ObjectCreation as WINBOOL, byval AccessGranted as WINBOOL, byval GenerateOnClose as LPBOOL) as WINBOOL
declare function ObjectPrivilegeAuditAlarmA(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval Privileges as PPRIVILEGE_SET, byval AccessGranted as WINBOOL) as WINBOOL
declare function ObjectCloseAuditAlarmA(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval GenerateOnClose as WINBOOL) as WINBOOL
declare function ObjectDeleteAuditAlarmA(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval GenerateOnClose as WINBOOL) as WINBOOL
declare function PrivilegedServiceAuditAlarmA(byval SubsystemName as LPCSTR, byval ServiceName as LPCSTR, byval ClientToken as HANDLE, byval Privileges as PPRIVILEGE_SET, byval AccessGranted as WINBOOL) as WINBOOL
declare function SetFileSecurityA(byval lpFileName as LPCSTR, byval SecurityInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR) as WINBOOL
declare function GetFileSecurityA(byval lpFileName as LPCSTR, byval RequestedInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval nLength as DWORD, byval lpnLengthNeeded as LPDWORD) as WINBOOL
declare function ReadDirectoryChangesW(byval hDirectory as HANDLE, byval lpBuffer as LPVOID, byval nBufferLength as DWORD, byval bWatchSubtree as WINBOOL, byval dwNotifyFilter as DWORD, byval lpBytesReturned as LPDWORD, byval lpOverlapped as LPOVERLAPPED, byval lpCompletionRoutine as LPOVERLAPPED_COMPLETION_ROUTINE) as WINBOOL
declare function IsBadReadPtr(byval lp as const any ptr, byval ucb as UINT_PTR) as WINBOOL
declare function IsBadWritePtr(byval lp as LPVOID, byval ucb as UINT_PTR) as WINBOOL
declare function IsBadHugeReadPtr(byval lp as const any ptr, byval ucb as UINT_PTR) as WINBOOL
declare function IsBadHugeWritePtr(byval lp as LPVOID, byval ucb as UINT_PTR) as WINBOOL
declare function IsBadCodePtr(byval lpfn as FARPROC) as WINBOOL
declare function IsBadStringPtrA(byval lpsz as LPCSTR, byval ucchMax as UINT_PTR) as WINBOOL
declare function IsBadStringPtrW(byval lpsz as LPCWSTR, byval ucchMax as UINT_PTR) as WINBOOL



declare function LookupAccountSidA(byval lpSystemName as LPCSTR, byval Sid as PSID, byval Name as LPSTR, byval cchName as LPDWORD, byval ReferencedDomainName as LPSTR, byval cchReferencedDomainName as LPDWORD, byval peUse as PSID_NAME_USE) as WINBOOL
declare function LookupAccountSidW(byval lpSystemName as LPCWSTR, byval Sid as PSID, byval Name as LPWSTR, byval cchName as LPDWORD, byval ReferencedDomainName as LPWSTR, byval cchReferencedDomainName as LPDWORD, byval peUse as PSID_NAME_USE) as WINBOOL
declare function LookupAccountNameA(byval lpSystemName as LPCSTR, byval lpAccountName as LPCSTR, byval Sid as PSID, byval cbSid as LPDWORD, byval ReferencedDomainName as LPSTR, byval cchReferencedDomainName as LPDWORD, byval peUse as PSID_NAME_USE) as WINBOOL
declare function LookupAccountNameW(byval lpSystemName as LPCWSTR, byval lpAccountName as LPCWSTR, byval Sid as PSID, byval cbSid as LPDWORD, byval ReferencedDomainName as LPWSTR, byval cchReferencedDomainName as LPDWORD, byval peUse as PSID_NAME_USE) as WINBOOL

 declare function AccessCheckAndAuditAlarm alias "AccessCheckAndAuditAlarmA"(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPSTR, byval ObjectName as LPSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval DesiredAccess as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatus as LPBOOL, byval pfGenerateOnClose as LPBOOL) as WINBOOL
 declare function AccessCheckByTypeAndAuditAlarm alias "AccessCheckByTypeAndAuditAlarmA"(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPCSTR, byval ObjectName as LPCSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatus as LPBOOL, byval pfGenerateOnClose as LPBOOL) as WINBOOL
 declare function AccessCheckByTypeResultListAndAuditAlarm alias "AccessCheckByTypeResultListAndAuditAlarmA"(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPCSTR, byval ObjectName as LPCSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatusList as LPDWORD, byval pfGenerateOnClose as LPBOOL) as WINBOOL
 declare function AccessCheckByTypeResultListAndAuditAlarmByHandle alias "AccessCheckByTypeResultListAndAuditAlarmByHandleA"(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ClientToken as HANDLE, byval ObjectTypeName as LPCSTR, byval ObjectName as LPCSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatusList as LPDWORD, byval pfGenerateOnClose as LPBOOL) as WINBOOL
 declare function ObjectOpenAuditAlarm alias "ObjectOpenAuditAlarmA"(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPSTR, byval ObjectName as LPSTR, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval GrantedAccess as DWORD, byval Privileges as PPRIVILEGE_SET, byval ObjectCreation as WINBOOL, byval AccessGranted as WINBOOL, byval GenerateOnClose as LPBOOL) as WINBOOL
 declare function ObjectPrivilegeAuditAlarm alias "ObjectPrivilegeAuditAlarmA"(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval Privileges as PPRIVILEGE_SET, byval AccessGranted as WINBOOL) as WINBOOL
 declare function ObjectCloseAuditAlarm alias "ObjectCloseAuditAlarmA"(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval GenerateOnClose as WINBOOL) as WINBOOL
 declare function ObjectDeleteAuditAlarm alias "ObjectDeleteAuditAlarmA"(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval GenerateOnClose as WINBOOL) as WINBOOL
 declare function PrivilegedServiceAuditAlarm alias "PrivilegedServiceAuditAlarmA"(byval SubsystemName as LPCSTR, byval ServiceName as LPCSTR, byval ClientToken as HANDLE, byval Privileges as PPRIVILEGE_SET, byval AccessGranted as WINBOOL) as WINBOOL
 declare function SetFileSecurity alias "SetFileSecurityA"(byval lpFileName as LPCSTR, byval SecurityInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR) as WINBOOL
 declare function GetFileSecurity alias "GetFileSecurityA"(byval lpFileName as LPCSTR, byval RequestedInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval nLength as DWORD, byval lpnLengthNeeded as LPDWORD) as WINBOOL
 declare function IsBadStringPtr alias "IsBadStringPtrA"(byval lpsz as LPCSTR, byval ucchMax as UINT_PTR) as WINBOOL
 declare function LookupAccountSid alias "LookupAccountSidA"(byval lpSystemName as LPCSTR, byval Sid as PSID, byval Name as LPSTR, byval cchName as LPDWORD, byval ReferencedDomainName as LPSTR, byval cchReferencedDomainName as LPDWORD, byval peUse as PSID_NAME_USE) as WINBOOL
 declare function LookupAccountName alias "LookupAccountNameA"(byval lpSystemName as LPCSTR, byval lpAccountName as LPCSTR, byval Sid as PSID, byval cbSid as LPDWORD, byval ReferencedDomainName as LPSTR, byval cchReferencedDomainName as LPDWORD, byval peUse as PSID_NAME_USE) as WINBOOL






declare function LookupPrivilegeValueA(byval lpSystemName as LPCSTR, byval lpName as LPCSTR, byval lpLuid as PLUID) as WINBOOL
declare function LookupPrivilegeValueW(byval lpSystemName as LPCWSTR, byval lpName as LPCWSTR, byval lpLuid as PLUID) as WINBOOL
declare function LookupPrivilegeNameA(byval lpSystemName as LPCSTR, byval lpLuid as PLUID, byval lpName as LPSTR, byval cchName as LPDWORD) as WINBOOL
declare function LookupPrivilegeNameW(byval lpSystemName as LPCWSTR, byval lpLuid as PLUID, byval lpName as LPWSTR, byval cchName as LPDWORD) as WINBOOL
declare function LookupPrivilegeDisplayNameA(byval lpSystemName as LPCSTR, byval lpName as LPCSTR, byval lpDisplayName as LPSTR, byval cchDisplayName as LPDWORD, byval lpLanguageId as LPDWORD) as WINBOOL
declare function LookupPrivilegeDisplayNameW(byval lpSystemName as LPCWSTR, byval lpName as LPCWSTR, byval lpDisplayName as LPWSTR, byval cchDisplayName as LPDWORD, byval lpLanguageId as LPDWORD) as WINBOOL
declare function BuildCommDCBA(byval lpDef as LPCSTR, byval lpDCB as LPDCB) as WINBOOL
declare function BuildCommDCBW(byval lpDef as LPCWSTR, byval lpDCB as LPDCB) as WINBOOL
declare function BuildCommDCBAndTimeoutsA(byval lpDef as LPCSTR, byval lpDCB as LPDCB, byval lpCommTimeouts as LPCOMMTIMEOUTS) as WINBOOL
declare function BuildCommDCBAndTimeoutsW(byval lpDef as LPCWSTR, byval lpDCB as LPDCB, byval lpCommTimeouts as LPCOMMTIMEOUTS) as WINBOOL
declare function CommConfigDialogA(byval lpszName as LPCSTR, byval hWnd as HWND, byval lpCC as LPCOMMCONFIG) as WINBOOL
declare function CommConfigDialogW(byval lpszName as LPCWSTR, byval hWnd as HWND, byval lpCC as LPCOMMCONFIG) as WINBOOL
declare function GetDefaultCommConfigA(byval lpszName as LPCSTR, byval lpCC as LPCOMMCONFIG, byval lpdwSize as LPDWORD) as WINBOOL
declare function GetDefaultCommConfigW(byval lpszName as LPCWSTR, byval lpCC as LPCOMMCONFIG, byval lpdwSize as LPDWORD) as WINBOOL
declare function SetDefaultCommConfigA(byval lpszName as LPCSTR, byval lpCC as LPCOMMCONFIG, byval dwSize as DWORD) as WINBOOL
declare function SetDefaultCommConfigW(byval lpszName as LPCWSTR, byval lpCC as LPCOMMCONFIG, byval dwSize as DWORD) as WINBOOL

 declare function LookupPrivilegeValue alias "LookupPrivilegeValueA"(byval lpSystemName as LPCSTR, byval lpName as LPCSTR, byval lpLuid as PLUID) as WINBOOL
 declare function LookupPrivilegeName alias "LookupPrivilegeNameA"(byval lpSystemName as LPCSTR, byval lpLuid as PLUID, byval lpName as LPSTR, byval cchName as LPDWORD) as WINBOOL
 declare function LookupPrivilegeDisplayName alias "LookupPrivilegeDisplayNameA"(byval lpSystemName as LPCSTR, byval lpName as LPCSTR, byval lpDisplayName as LPSTR, byval cchDisplayName as LPDWORD, byval lpLanguageId as LPDWORD) as WINBOOL
 declare function BuildCommDCB alias "BuildCommDCBA"(byval lpDef as LPCSTR, byval lpDCB as LPDCB) as WINBOOL
 declare function BuildCommDCBAndTimeouts alias "BuildCommDCBAndTimeoutsA"(byval lpDef as LPCSTR, byval lpDCB as LPDCB, byval lpCommTimeouts as LPCOMMTIMEOUTS) as WINBOOL
 declare function CommConfigDialog alias "CommConfigDialogA"(byval lpszName as LPCSTR, byval hWnd as HWND, byval lpCC as LPCOMMCONFIG) as WINBOOL
 declare function GetDefaultCommConfig alias "GetDefaultCommConfigA"(byval lpszName as LPCSTR, byval lpCC as LPCOMMCONFIG, byval lpdwSize as LPDWORD) as WINBOOL
 declare function SetDefaultCommConfig alias "SetDefaultCommConfigA"(byval lpszName as LPCSTR, byval lpCC as LPCOMMCONFIG, byval dwSize as DWORD) as WINBOOL

const MAX_COMPUTERNAME_LENGTH = 15
declare function GetComputerNameA(byval lpBuffer as LPSTR, byval nSize as LPDWORD) as WINBOOL
declare function GetComputerNameW(byval lpBuffer as LPWSTR, byval nSize as LPDWORD) as WINBOOL
declare function SetComputerNameA(byval lpComputerName as LPCSTR) as WINBOOL
declare function SetComputerNameW(byval lpComputerName as LPCWSTR) as WINBOOL
declare function SetComputerNameExA(byval NameType as COMPUTER_NAME_FORMAT, byval lpBuffer as LPCTSTR) as WINBOOL
declare function DnsHostnameToComputerNameA(byval Hostname as LPCSTR, byval ComputerName as LPSTR, byval nSize as LPDWORD) as WINBOOL
declare function DnsHostnameToComputerNameW(byval Hostname as LPCWSTR, byval ComputerName as LPWSTR, byval nSize as LPDWORD) as WINBOOL
declare function GetUserNameA(byval lpBuffer as LPSTR, byval pcbBuffer as LPDWORD) as WINBOOL
declare function GetUserNameW(byval lpBuffer as LPWSTR, byval pcbBuffer as LPDWORD) as WINBOOL

 declare function SetComputerNameEx alias "SetComputerNameExA"(byval NameType as COMPUTER_NAME_FORMAT, byval lpBuffer as LPCTSTR) as WINBOOL
 declare function GetComputerName alias "GetComputerNameA"(byval lpBuffer as LPSTR, byval nSize as LPDWORD) as WINBOOL
 declare function SetComputerName alias "SetComputerNameA"(byval lpComputerName as LPCSTR) as WINBOOL
 declare function DnsHostnameToComputerName alias "DnsHostnameToComputerNameA"(byval Hostname as LPCSTR, byval ComputerName as LPSTR, byval nSize as LPDWORD) as WINBOOL
 declare function GetUserName alias "GetUserNameA"(byval lpBuffer as LPSTR, byval pcbBuffer as LPDWORD) as WINBOOL

const LOGON32_LOGON_INTERACTIVE = 2
const LOGON32_LOGON_NETWORK = 3
const LOGON32_LOGON_BATCH = 4
const LOGON32_LOGON_SERVICE = 5
const LOGON32_LOGON_UNLOCK = 7
const LOGON32_LOGON_NETWORK_CLEARTEXT = 8
const LOGON32_LOGON_NEW_CREDENTIALS = 9
const LOGON32_PROVIDER_DEFAULT = 0
const LOGON32_PROVIDER_WINNT35 = 1
const LOGON32_PROVIDER_WINNT40 = 2
const LOGON32_PROVIDER_WINNT50 = 3


declare function LogonUserA(byval lpszUsername as LPCSTR, byval lpszDomain as LPCSTR, byval lpszPassword as LPCSTR, byval dwLogonType as DWORD, byval dwLogonProvider as DWORD, byval phToken as PHANDLE) as WINBOOL
declare function LogonUserW(byval lpszUsername as LPCWSTR, byval lpszDomain as LPCWSTR, byval lpszPassword as LPCWSTR, byval dwLogonType as DWORD, byval dwLogonProvider as DWORD, byval phToken as PHANDLE) as WINBOOL
declare function LogonUserExA(byval lpszUsername as LPCSTR, byval lpszDomain as LPCSTR, byval lpszPassword as LPCSTR, byval dwLogonType as DWORD, byval dwLogonProvider as DWORD, byval phToken as PHANDLE, byval ppLogonSid as PSID ptr, byval ppProfileBuffer as PVOID ptr, byval pdwProfileLength as LPDWORD, byval pQuotaLimits as PQUOTA_LIMITS) as WINBOOL
declare function LogonUserExW(byval lpszUsername as LPCWSTR, byval lpszDomain as LPCWSTR, byval lpszPassword as LPCWSTR, byval dwLogonType as DWORD, byval dwLogonProvider as DWORD, byval phToken as PHANDLE, byval ppLogonSid as PSID ptr, byval ppProfileBuffer as PVOID ptr, byval pdwProfileLength as LPDWORD, byval pQuotaLimits as PQUOTA_LIMITS) as WINBOOL
declare function CreateProcessAsUserA(byval hToken as HANDLE, byval lpApplicationName as LPCSTR, byval lpCommandLine as LPSTR, byval lpProcessAttributes as LPSECURITY_ATTRIBUTES, byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval bInheritHandles as WINBOOL, byval dwCreationFlags as DWORD, byval lpEnvironment as LPVOID, byval lpCurrentDirectory as LPCSTR, byval lpStartupInfo as LPSTARTUPINFOA, byval lpProcessInformation as LPPROCESS_INFORMATION) as WINBOOL

 declare function CreateProcessAsUser alias "CreateProcessAsUserA"(byval hToken as HANDLE, byval lpApplicationName as LPCSTR, byval lpCommandLine as LPSTR, byval lpProcessAttributes as LPSECURITY_ATTRIBUTES, byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval bInheritHandles as WINBOOL, byval dwCreationFlags as DWORD, byval lpEnvironment as LPVOID, byval lpCurrentDirectory as LPCSTR, byval lpStartupInfo as LPSTARTUPINFOA, byval lpProcessInformation as LPPROCESS_INFORMATION) as WINBOOL
 declare function LogonUser alias "LogonUserA"(byval lpszUsername as LPCSTR, byval lpszDomain as LPCSTR, byval lpszPassword as LPCSTR, byval dwLogonType as DWORD, byval dwLogonProvider as DWORD, byval phToken as PHANDLE) as WINBOOL
 declare function LogonUserEx alias "LogonUserExA"(byval lpszUsername as LPCSTR, byval lpszDomain as LPCSTR, byval lpszPassword as LPCSTR, byval dwLogonType as DWORD, byval dwLogonProvider as DWORD, byval phToken as PHANDLE, byval ppLogonSid as PSID ptr, byval ppProfileBuffer as PVOID ptr, byval pdwProfileLength as LPDWORD, byval pQuotaLimits as PQUOTA_LIMITS) as WINBOOL

const LOGON_WITH_PROFILE = &h00000001
const LOGON_NETCREDENTIALS_ONLY = &h00000002
const LOGON_ZERO_PASSWORD_BUFFER = &h80000000

declare function CreateProcessWithLogonW(byval lpUsername as LPCWSTR, byval lpDomain as LPCWSTR, byval lpPassword as LPCWSTR, byval dwLogonFlags as DWORD, byval lpApplicationName as LPCWSTR, byval lpCommandLine as LPWSTR, byval dwCreationFlags as DWORD, byval lpEnvironment as LPVOID, byval lpCurrentDirectory as LPCWSTR, byval lpStartupInfo as LPSTARTUPINFOW, byval lpProcessInformation as LPPROCESS_INFORMATION) as WINBOOL
declare function CreateProcessWithTokenW(byval hToken as HANDLE, byval dwLogonFlags as DWORD, byval lpApplicationName as LPCWSTR, byval lpCommandLine as LPWSTR, byval dwCreationFlags as DWORD, byval lpEnvironment as LPVOID, byval lpCurrentDirectory as LPCWSTR, byval lpStartupInfo as LPSTARTUPINFOW, byval lpProcessInformation as LPPROCESS_INFORMATION) as WINBOOL
declare function IsTokenUntrusted(byval TokenHandle as HANDLE) as WINBOOL
declare function RegisterWaitForSingleObject(byval phNewWaitObject as PHANDLE, byval hObject as HANDLE, byval Callback as WAITORTIMERCALLBACK, byval Context as PVOID, byval dwMilliseconds as ULONG, byval dwFlags as ULONG) as WINBOOL
declare function UnregisterWait(byval WaitHandle as HANDLE) as WINBOOL
declare function BindIoCompletionCallback(byval FileHandle as HANDLE, byval Function as LPOVERLAPPED_COMPLETION_ROUTINE, byval Flags as ULONG) as WINBOOL
declare function SetTimerQueueTimer(byval TimerQueue as HANDLE, byval Callback as WAITORTIMERCALLBACK, byval Parameter as PVOID, byval DueTime as DWORD, byval Period as DWORD, byval PreferIo as WINBOOL) as HANDLE
declare function CancelTimerQueueTimer(byval TimerQueue as HANDLE, byval Timer as HANDLE) as WINBOOL
declare function DeleteTimerQueue(byval TimerQueue as HANDLE) as WINBOOL
declare function CreatePrivateNamespaceA(byval lpPrivateNamespaceAttributes as LPSECURITY_ATTRIBUTES, byval lpBoundaryDescriptor as LPVOID, byval lpAliasPrefix as LPCSTR) as HANDLE
declare function OpenPrivateNamespaceA(byval lpBoundaryDescriptor as LPVOID, byval lpAliasPrefix as LPCSTR) as HANDLE
declare function CreateBoundaryDescriptorA(byval Name as LPCSTR, byval Flags as ULONG) as HANDLE
declare function AddIntegrityLabelToBoundaryDescriptor(byval BoundaryDescriptor as HANDLE ptr, byval IntegrityLabel as PSID) as WINBOOL

 declare function CreatePrivateNamespace alias "CreatePrivateNamespaceA"(byval lpPrivateNamespaceAttributes as LPSECURITY_ATTRIBUTES, byval lpBoundaryDescriptor as LPVOID, byval lpAliasPrefix as LPCSTR) as HANDLE
 declare function OpenPrivateNamespace alias "OpenPrivateNamespaceA"(byval lpBoundaryDescriptor as LPVOID, byval lpAliasPrefix as LPCSTR) as HANDLE
 declare function CreateBoundaryDescriptor alias "CreateBoundaryDescriptorA"(byval Name as LPCSTR, byval Flags as ULONG) as HANDLE

const HW_PROFILE_GUIDLEN = 39
const MAX_PROFILE_LEN = 80
const DOCKINFO_UNDOCKED = &h1
const DOCKINFO_DOCKED = &h2
const DOCKINFO_USER_SUPPLIED = &h4
const DOCKINFO_USER_UNDOCKED = DOCKINFO_USER_SUPPLIED or DOCKINFO_UNDOCKED
const DOCKINFO_USER_DOCKED = DOCKINFO_USER_SUPPLIED or DOCKINFO_DOCKED

type tagHW_PROFILE_INFOA
 dwDockInfo as DWORD
 szHwProfileGuid as zstring * 39
 szHwProfileName as zstring * 80
end type

type HW_PROFILE_INFOA as tagHW_PROFILE_INFOA
type LPHW_PROFILE_INFOA as tagHW_PROFILE_INFOA ptr

type tagHW_PROFILE_INFOW
 dwDockInfo as DWORD
 szHwProfileGuid as wstring * 39
 szHwProfileName as wstring * 80
end type

type HW_PROFILE_INFOW as tagHW_PROFILE_INFOW
type LPHW_PROFILE_INFOW as tagHW_PROFILE_INFOW ptr

 type HW_PROFILE_INFO as HW_PROFILE_INFOA
 type LPHW_PROFILE_INFO as LPHW_PROFILE_INFOA

declare function GetCurrentHwProfileA(byval lpHwProfileInfo as LPHW_PROFILE_INFOA) as WINBOOL
declare function GetCurrentHwProfileW(byval lpHwProfileInfo as LPHW_PROFILE_INFOW) as WINBOOL
declare function VerifyVersionInfoA(byval lpVersionInformation as LPOSVERSIONINFOEXA, byval dwTypeMask as DWORD, byval dwlConditionMask as DWORDLONG) as WINBOOL
declare function VerifyVersionInfoW(byval lpVersionInformation as LPOSVERSIONINFOEXW, byval dwTypeMask as DWORD, byval dwlConditionMask as DWORDLONG) as WINBOOL

 declare function GetCurrentHwProfile alias "GetCurrentHwProfileA"(byval lpHwProfileInfo as LPHW_PROFILE_INFOA) as WINBOOL
 declare function VerifyVersionInfo alias "VerifyVersionInfoA"(byval lpVersionInformation as LPOSVERSIONINFOEXA, byval dwTypeMask as DWORD, byval dwlConditionMask as DWORDLONG) as WINBOOL

const TIME_ZONE_ID_INVALID = cast(DWORD, &hffffffff)

type _TIME_ZONE_INFORMATION
 Bias as LONG
 StandardName as wstring * 32
 StandardDate as SYSTEMTIME
 StandardBias as LONG
 DaylightName as wstring * 32
 DaylightDate as SYSTEMTIME
 DaylightBias as LONG
end type

type TIME_ZONE_INFORMATION as _TIME_ZONE_INFORMATION
type PTIME_ZONE_INFORMATION as _TIME_ZONE_INFORMATION ptr
type LPTIME_ZONE_INFORMATION as _TIME_ZONE_INFORMATION ptr

type _TIME_DYNAMIC_ZONE_INFORMATION
 Bias as LONG
 StandardName as wstring * 32
 StandardDate as SYSTEMTIME
 StandardBias as LONG
 DaylightName as wstring * 32
 DaylightDate as SYSTEMTIME
 DaylightBias as LONG
 TimeZoneKeyName as wstring * 128
 DynamicDaylightTimeDisabled as WINBOOLEAN
end type

type DYNAMIC_TIME_ZONE_INFORMATION as _TIME_DYNAMIC_ZONE_INFORMATION
type PDYNAMIC_TIME_ZONE_INFORMATION as _TIME_DYNAMIC_ZONE_INFORMATION ptr
declare function SystemTimeToTzSpecificLocalTime(byval lpTimeZoneInformation as const TIME_ZONE_INFORMATION ptr, byval lpUniversalTime as const SYSTEMTIME ptr, byval lpLocalTime as LPSYSTEMTIME) as WINBOOL
declare function TzSpecificLocalTimeToSystemTime(byval lpTimeZoneInformation as const TIME_ZONE_INFORMATION ptr, byval lpLocalTime as const SYSTEMTIME ptr, byval lpUniversalTime as LPSYSTEMTIME) as WINBOOL
declare function FileTimeToSystemTime(byval lpFileTime as const FILETIME ptr, byval lpSystemTime as LPSYSTEMTIME) as WINBOOL
declare function SystemTimeToFileTime(byval lpSystemTime as const SYSTEMTIME ptr, byval lpFileTime as LPFILETIME) as WINBOOL
declare function GetTimeZoneInformation(byval lpTimeZoneInformation as LPTIME_ZONE_INFORMATION) as DWORD




declare function SetTimeZoneInformation(byval lpTimeZoneInformation as const TIME_ZONE_INFORMATION ptr) as WINBOOL


const TC_NORMAL = 0
const TC_HARDERR = 1
const TC_GP_TRAP = 2
const TC_SIGNAL = 3
const AC_LINE_OFFLINE = &h000
const AC_LINE_ONLINE = &h01
const AC_LINE_BACKUP_POWER = &h02
const AC_LINE_UNKNOWN = &hff
const BATTERY_FLAG_HIGH = &h01
const BATTERY_FLAG_LOW = &h02
const BATTERY_FLAG_CRITICAL = &h04
const BATTERY_FLAG_CHARGING = &h08
const BATTERY_FLAG_NO_BATTERY = &h80
const BATTERY_FLAG_UNKNOWN = &hff
const BATTERY_PERCENTAGE_UNKNOWN = &hff
const BATTERY_LIFE_UNKNOWN = &hffffffff

type _SYSTEM_POWER_STATUS
 ACLineStatus as UBYTE
 BatteryFlag as UBYTE
 BatteryLifePercent as UBYTE
 Reserved1 as UBYTE
 BatteryLifeTime as DWORD
 BatteryFullLifeTime as DWORD
end type

type SYSTEM_POWER_STATUS as _SYSTEM_POWER_STATUS
type LPSYSTEM_POWER_STATUS as _SYSTEM_POWER_STATUS ptr
declare function GetSystemPowerStatus(byval lpSystemPowerStatus as LPSYSTEM_POWER_STATUS) as WINBOOL
declare function SetSystemPowerState(byval fSuspend as WINBOOL, byval fForce as WINBOOL) as WINBOOL


declare function AllocateUserPhysicalPages(byval hProcess as HANDLE, byval NumberOfPages as PULONG_PTR, byval PageArray as PULONG_PTR) as WINBOOL
declare function FreeUserPhysicalPages(byval hProcess as HANDLE, byval NumberOfPages as PULONG_PTR, byval PageArray as PULONG_PTR) as WINBOOL
declare function MapUserPhysicalPages(byval VirtualAddress as PVOID, byval NumberOfPages as ULONG_PTR, byval PageArray as PULONG_PTR) as WINBOOL
declare function MapUserPhysicalPagesScatter(byval VirtualAddresses as PVOID ptr, byval NumberOfPages as ULONG_PTR, byval PageArray as PULONG_PTR) as WINBOOL
declare function CreateJobObjectA(byval lpJobAttributes as LPSECURITY_ATTRIBUTES, byval lpName as LPCSTR) as HANDLE
declare function CreateJobObjectW(byval lpJobAttributes as LPSECURITY_ATTRIBUTES, byval lpName as LPCWSTR) as HANDLE
declare function OpenJobObjectA(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
declare function OpenJobObjectW(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCWSTR) as HANDLE
declare function AssignProcessToJobObject(byval hJob as HANDLE, byval hProcess as HANDLE) as WINBOOL
declare function TerminateJobObject(byval hJob as HANDLE, byval uExitCode as UINT) as WINBOOL
declare function QueryInformationJobObject(byval hJob as HANDLE, byval JobObjectInformationClass as JOBOBJECTINFOCLASS, byval lpJobObjectInformation as LPVOID, byval cbJobObjectInformationLength as DWORD, byval lpReturnLength as LPDWORD) as WINBOOL
declare function SetInformationJobObject(byval hJob as HANDLE, byval JobObjectInformationClass as JOBOBJECTINFOCLASS, byval lpJobObjectInformation as LPVOID, byval cbJobObjectInformationLength as DWORD) as WINBOOL
declare function CreateJobSet(byval NumJob as ULONG, byval UserJobSet as PJOB_SET_ARRAY, byval Flags as ULONG) as WINBOOL
declare function FindFirstVolumeA(byval lpszVolumeName as LPSTR, byval cchBufferLength as DWORD) as HANDLE
declare function FindNextVolumeA(byval hFindVolume as HANDLE, byval lpszVolumeName as LPSTR, byval cchBufferLength as DWORD) as WINBOOL
declare function FindFirstVolumeMountPointA(byval lpszRootPathName as LPCSTR, byval lpszVolumeMountPoint as LPSTR, byval cchBufferLength as DWORD) as HANDLE
declare function FindFirstVolumeMountPointW(byval lpszRootPathName as LPCWSTR, byval lpszVolumeMountPoint as LPWSTR, byval cchBufferLength as DWORD) as HANDLE
declare function FindNextVolumeMountPointA(byval hFindVolumeMountPoint as HANDLE, byval lpszVolumeMountPoint as LPSTR, byval cchBufferLength as DWORD) as WINBOOL
declare function FindNextVolumeMountPointW(byval hFindVolumeMountPoint as HANDLE, byval lpszVolumeMountPoint as LPWSTR, byval cchBufferLength as DWORD) as WINBOOL
declare function FindVolumeMountPointClose(byval hFindVolumeMountPoint as HANDLE) as WINBOOL
declare function SetVolumeMountPointA(byval lpszVolumeMountPoint as LPCSTR, byval lpszVolumeName as LPCSTR) as WINBOOL
declare function SetVolumeMountPointW(byval lpszVolumeMountPoint as LPCWSTR, byval lpszVolumeName as LPCWSTR) as WINBOOL
declare function DeleteVolumeMountPointA(byval lpszVolumeMountPoint as LPCSTR) as WINBOOL
declare function GetVolumeNameForVolumeMountPointA(byval lpszVolumeMountPoint as LPCSTR, byval lpszVolumeName as LPSTR, byval cchBufferLength as DWORD) as WINBOOL
declare function GetVolumePathNameA(byval lpszFileName as LPCSTR, byval lpszVolumePathName as LPSTR, byval cchBufferLength as DWORD) as WINBOOL
declare function GetVolumePathNamesForVolumeNameA(byval lpszVolumeName as LPCSTR, byval lpszVolumePathNames as LPCH, byval cchBufferLength as DWORD, byval lpcchReturnLength as PDWORD) as WINBOOL


 declare function FindFirstVolume alias "FindFirstVolumeA"(byval lpszVolumeName as LPSTR, byval cchBufferLength as DWORD) as HANDLE
 declare function FindNextVolume alias "FindNextVolumeA"(byval hFindVolume as HANDLE, byval lpszVolumeName as LPSTR, byval cchBufferLength as DWORD) as WINBOOL
 declare function DeleteVolumeMountPoint alias "DeleteVolumeMountPointA"(byval lpszVolumeMountPoint as LPCSTR) as WINBOOL
 declare function GetVolumeNameForVolumeMountPoint alias "GetVolumeNameForVolumeMountPointA"(byval lpszVolumeMountPoint as LPCSTR, byval lpszVolumeName as LPSTR, byval cchBufferLength as DWORD) as WINBOOL
 declare function GetVolumePathName alias "GetVolumePathNameA"(byval lpszFileName as LPCSTR, byval lpszVolumePathName as LPSTR, byval cchBufferLength as DWORD) as WINBOOL
 declare function GetVolumePathNamesForVolumeName alias "GetVolumePathNamesForVolumeNameA"(byval lpszVolumeName as LPCSTR, byval lpszVolumePathNames as LPCH, byval cchBufferLength as DWORD, byval lpcchReturnLength as PDWORD) as WINBOOL
 declare function CreateJobObject alias "CreateJobObjectA"(byval lpJobAttributes as LPSECURITY_ATTRIBUTES, byval lpName as LPCSTR) as HANDLE
 declare function OpenJobObject alias "OpenJobObjectA"(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
 declare function FindFirstVolumeMountPoint alias "FindFirstVolumeMountPointA"(byval lpszRootPathName as LPCSTR, byval lpszVolumeMountPoint as LPSTR, byval cchBufferLength as DWORD) as HANDLE
 declare function FindNextVolumeMountPoint alias "FindNextVolumeMountPointA"(byval hFindVolumeMountPoint as HANDLE, byval lpszVolumeMountPoint as LPSTR, byval cchBufferLength as DWORD) as WINBOOL
 declare function SetVolumeMountPoint alias "SetVolumeMountPointA"(byval lpszVolumeMountPoint as LPCSTR, byval lpszVolumeName as LPCSTR) as WINBOOL

const ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID = &h00000001
const ACTCTX_FLAG_LANGID_VALID = &h00000002
const ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID = &h00000004
const ACTCTX_FLAG_RESOURCE_NAME_VALID = &h00000008
const ACTCTX_FLAG_SET_PROCESS_DEFAULT = &h00000010
const ACTCTX_FLAG_APPLICATION_NAME_VALID = &h00000020
const ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF = &h00000040
const ACTCTX_FLAG_HMODULE_VALID = &h00000080

type tagACTCTXA
 cbSize as ULONG
 dwFlags as DWORD
 lpSource as LPCSTR
 wProcessorArchitecture as USHORT
 wLangId as LANGID
 lpAssemblyDirectory as LPCSTR
 lpResourceName as LPCSTR
 lpApplicationName as LPCSTR
 hModule as HMODULE
end type

type ACTCTXA as tagACTCTXA
type PACTCTXA as tagACTCTXA ptr

type tagACTCTXW
 cbSize as ULONG
 dwFlags as DWORD
 lpSource as LPCWSTR
 wProcessorArchitecture as USHORT
 wLangId as LANGID
 lpAssemblyDirectory as LPCWSTR
 lpResourceName as LPCWSTR
 lpApplicationName as LPCWSTR
 hModule as HMODULE
end type

type ACTCTXW as tagACTCTXW
type PACTCTXW as tagACTCTXW ptr

 type ACTCTX as ACTCTXA
 type PACTCTX as PACTCTXA

type PCACTCTXA as const ACTCTXA ptr
type PCACTCTXW as const ACTCTXW ptr

 type PCACTCTX as PCACTCTXA

declare function CreateActCtxA(byval pActCtx as PCACTCTXA) as HANDLE
declare function CreateActCtxW(byval pActCtx as PCACTCTXW) as HANDLE
declare sub AddRefActCtx(byval hActCtx as HANDLE)
declare sub ReleaseActCtx(byval hActCtx as HANDLE)
declare function ZombifyActCtx(byval hActCtx as HANDLE) as WINBOOL
declare function ActivateActCtx(byval hActCtx as HANDLE, byval lpCookie as ULONG_PTR ptr) as WINBOOL
declare function DeactivateActCtx(byval dwFlags as DWORD, byval ulCookie as ULONG_PTR) as WINBOOL
declare function GetCurrentActCtx(byval lphActCtx as HANDLE ptr) as WINBOOL

 declare function CreateActCtx alias "CreateActCtxA"(byval pActCtx as PCACTCTXA) as HANDLE

const DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION = &h00000001

type tagACTCTX_SECTION_KEYED_DATA_2600
 cbSize as ULONG
 ulDataFormatVersion as ULONG
 lpData as PVOID
 ulLength as ULONG
 lpSectionGlobalData as PVOID
 ulSectionGlobalDataLength as ULONG
 lpSectionBase as PVOID
 ulSectionTotalLength as ULONG
 hActCtx as HANDLE
 ulAssemblyRosterIndex as ULONG
end type

type ACTCTX_SECTION_KEYED_DATA_2600 as tagACTCTX_SECTION_KEYED_DATA_2600
type PACTCTX_SECTION_KEYED_DATA_2600 as tagACTCTX_SECTION_KEYED_DATA_2600 ptr
type PCACTCTX_SECTION_KEYED_DATA_2600 as const ACTCTX_SECTION_KEYED_DATA_2600 ptr

type tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
 lpInformation as PVOID
 lpSectionBase as PVOID
 ulSectionLength as ULONG
 lpSectionGlobalDataBase as PVOID
 ulSectionGlobalDataLength as ULONG
end type

type ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA as tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
type PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA as tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA ptr
type PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA as const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA ptr

type tagACTCTX_SECTION_KEYED_DATA
 cbSize as ULONG
 ulDataFormatVersion as ULONG
 lpData as PVOID
 ulLength as ULONG
 lpSectionGlobalData as PVOID
 ulSectionGlobalDataLength as ULONG
 lpSectionBase as PVOID
 ulSectionTotalLength as ULONG
 hActCtx as HANDLE
 ulAssemblyRosterIndex as ULONG
 ulFlags as ULONG
 AssemblyMetadata as ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
end type

type ACTCTX_SECTION_KEYED_DATA as tagACTCTX_SECTION_KEYED_DATA
type PACTCTX_SECTION_KEYED_DATA as tagACTCTX_SECTION_KEYED_DATA ptr
type PCACTCTX_SECTION_KEYED_DATA as const ACTCTX_SECTION_KEYED_DATA ptr

const FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX = &h00000001
const FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS = &h00000002
const FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA = &h00000004

declare function FindActCtxSectionStringA(byval dwFlags as DWORD, byval lpExtensionGuid as const GUID ptr, byval ulSectionId as ULONG, byval lpStringToFind as LPCSTR, byval ReturnedData as PACTCTX_SECTION_KEYED_DATA) as WINBOOL
declare function FindActCtxSectionStringW(byval dwFlags as DWORD, byval lpExtensionGuid as const GUID ptr, byval ulSectionId as ULONG, byval lpStringToFind as LPCWSTR, byval ReturnedData as PACTCTX_SECTION_KEYED_DATA) as WINBOOL
declare function FindActCtxSectionGuid(byval dwFlags as DWORD, byval lpExtensionGuid as const GUID ptr, byval ulSectionId as ULONG, byval lpGuidToFind as const GUID ptr, byval ReturnedData as PACTCTX_SECTION_KEYED_DATA) as WINBOOL

 declare function FindActCtxSectionString alias "FindActCtxSectionStringA"(byval dwFlags as DWORD, byval lpExtensionGuid as const GUID ptr, byval ulSectionId as ULONG, byval lpStringToFind as LPCSTR, byval ReturnedData as PACTCTX_SECTION_KEYED_DATA) as WINBOOL

type _ACTIVATION_CONTEXT_BASIC_INFORMATION
 hActCtx as HANDLE
 dwFlags as DWORD
end type

type ACTIVATION_CONTEXT_BASIC_INFORMATION as _ACTIVATION_CONTEXT_BASIC_INFORMATION
type PACTIVATION_CONTEXT_BASIC_INFORMATION as _ACTIVATION_CONTEXT_BASIC_INFORMATION ptr
type PCACTIVATION_CONTEXT_BASIC_INFORMATION as const _ACTIVATION_CONTEXT_BASIC_INFORMATION ptr

const ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED = 1
const QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX = &h00000004
const QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE = &h00000008
const QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS = &h00000010
const QUERY_ACTCTX_FLAG_NO_ADDREF = &h80000000
declare function QueryActCtxW(byval dwFlags as DWORD, byval hActCtx as HANDLE, byval pvSubInstance as PVOID, byval ulInfoClass as ULONG, byval pvBuffer as PVOID, byval cbBuffer as SIZE_T_, byval pcbWrittenOrRequired as SIZE_T_ ptr) as WINBOOL
type PQUERYACTCTXW_FUNC as function(byval dwFlags as DWORD, byval hActCtx as HANDLE, byval pvSubInstance as PVOID, byval ulInfoClass as ULONG, byval pvBuffer as PVOID, byval cbBuffer as SIZE_T_, byval pcbWrittenOrRequired as SIZE_T_ ptr) as WINBOOL

declare function WTSGetActiveConsoleSessionId() as DWORD
declare function GetNumaProcessorNode(byval Processor as UCHAR, byval NodeNumber as PUCHAR) as WINBOOL
declare function GetNumaNodeProcessorMask(byval Node as UCHAR, byval ProcessorMask as PULONGLONG) as WINBOOL
declare function GetNumaAvailableMemoryNode(byval Node as UCHAR, byval AvailableBytes as PULONGLONG) as WINBOOL



type APPLICATION_RECOVERY_CALLBACK as function(byval pvParameter as PVOID) as DWORD
const RESTART_MAX_CMD_LINE = 1024
const RESTART_NO_CRASH = 1
const RESTART_NO_HANG = 2
const RESTART_NO_PATCH = 4
const RESTART_NO_REBOOT = 8
const RECOVERY_DEFAULT_PING_INTERVAL = 5000
const RECOVERY_MAX_PING_INTERVAL = (5 * 60) * 1000









declare function CopyContext(byval Destination as PCONTEXT, byval ContextFlags as DWORD, byval Source as PCONTEXT) as WINBOOL
declare function InitializeContext(byval Buffer as PVOID, byval ContextFlags as DWORD, byval Context as PCONTEXT ptr, byval ContextLength as PDWORD) as WINBOOL
declare function GetEnabledXStateFeatures() as DWORD64
declare function GetXStateFeaturesMask(byval Context as PCONTEXT, byval FeatureMask as PDWORD64) as WINBOOL
declare function LocateXStateFeature(byval Context as PCONTEXT, byval FeatureId as DWORD, byval Length as PDWORD) as PVOID
declare function SetXStateFeaturesMask(byval Context as PCONTEXT, byval FeatureMask as DWORD64) as WINBOOL


const MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS = 0

end extern


#inclib "gdi32"
#inclib "msimg32"



extern "Windows"

const R2_BLACK = 1
const R2_NOTMERGEPEN = 2
const R2_MASKNOTPEN = 3
const R2_NOTCOPYPEN = 4
const R2_MASKPENNOT = 5
const R2_NOT = 6
const R2_XORPEN = 7
const R2_NOTMASKPEN = 8
const R2_MASKPEN = 9
const R2_NOTXORPEN = 10
const R2_NOP = 11
const R2_MERGENOTPEN = 12
const R2_COPYPEN = 13
const R2_MERGEPENNOT = 14
const R2_MERGEPEN = 15
const R2_WHITE = 16
const R2_LAST = 16
const SRCCOPY = cast(DWORD, &h00CC0020)
const SRCPAINT = cast(DWORD, &h00EE0086)
const SRCAND = cast(DWORD, &h008800C6)
const SRCINVERT = cast(DWORD, &h00660046)
const SRCERASE = cast(DWORD, &h00440328)
const NOTSRCCOPY = cast(DWORD, &h00330008)
const NOTSRCERASE = cast(DWORD, &h001100A6)
const MERGECOPY = cast(DWORD, &h00C000CA)
const MERGEPAINT = cast(DWORD, &h00BB0226)
const PATCOPY = cast(DWORD, &h00F00021)
const PATPAINT = cast(DWORD, &h00FB0A09)
const PATINVERT = cast(DWORD, &h005A0049)
const DSTINVERT = cast(DWORD, &h00550009)
const BLACKNESS = cast(DWORD, &h00000042)
const WHITENESS = cast(DWORD, &h00FF0062)
const NOMIRRORBITMAP = cast(DWORD, &h80000000)
const CAPTUREBLT = cast(DWORD, &h40000000)
const GDI_ERROR = &hFFFFFFFF
const ERROR_ = 0
const NULLREGION = 1
const SIMPLEREGION = 2
const COMPLEXREGION = 3
const RGN_ERROR = ERROR_
const RGN_AND = 1
const RGN_OR = 2
const RGN_XOR = 3
const RGN_DIFF = 4
const RGN_COPY = 5
const RGN_MIN = RGN_AND
const RGN_MAX = RGN_COPY
const BLACKONWHITE = 1
const WHITEONBLACK = 2
const COLORONCOLOR = 3
const HALFTONE = 4
const MAXSTRETCHBLTMODE = 4
const STRETCH_ANDSCANS = BLACKONWHITE
const STRETCH_ORSCANS = WHITEONBLACK
const STRETCH_DELETESCANS = COLORONCOLOR
const STRETCH_HALFTONE = HALFTONE
const ALTERNATE = 1
const WINDING = 2
const POLYFILL_LAST = 2
const LAYOUT_RTL = &h00000001
const LAYOUT_BTT = &h00000002
const LAYOUT_VBH = &h00000004
const LAYOUT_ORIENTATIONMASK = (LAYOUT_RTL or LAYOUT_BTT) or LAYOUT_VBH
const LAYOUT_BITMAPORIENTATIONPRESERVED = &h00000008
const TA_NOUPDATECP = 0
const TA_UPDATECP = 1
const TA_LEFT = 0
const TA_RIGHT = 2
const TA_CENTER = 6
const TA_TOP = 0
const TA_BOTTOM = 8
const TA_BASELINE = 24
const TA_RTLREADING = 256
const TA_MASK = ((TA_BASELINE + TA_CENTER) + TA_UPDATECP) + TA_RTLREADING
const VTA_BASELINE = TA_BASELINE
const VTA_LEFT = TA_BOTTOM
const VTA_RIGHT = TA_TOP
const VTA_CENTER = TA_CENTER
const VTA_BOTTOM = TA_RIGHT
const VTA_TOP = TA_LEFT
const ETO_OPAQUE = &h0002
const ETO_CLIPPED = &h0004
const ETO_GLYPH_INDEX = &h0010
const ETO_RTLREADING = &h0080
const ETO_NUMERICSLOCAL = &h0400
const ETO_NUMERICSLATIN = &h0800
const ETO_IGNORELANGUAGE = &h1000
const ETO_PDY = &h2000


const ASPECT_FILTERING = &h0001
const DCB_RESET = &h0001
const DCB_ACCUMULATE = &h0002
const DCB_DIRTY = DCB_ACCUMULATE
const DCB_SET = DCB_RESET or DCB_ACCUMULATE
const DCB_ENABLE = &h0004
const DCB_DISABLE = &h0008
const META_SETBKCOLOR = &h0201
const META_SETBKMODE = &h0102
const META_SETMAPMODE = &h0103
const META_SETROP2 = &h0104
const META_SETRELABS = &h0105
const META_SETPOLYFILLMODE = &h0106
const META_SETSTRETCHBLTMODE = &h0107
const META_SETTEXTCHAREXTRA = &h0108
const META_SETTEXTCOLOR = &h0209
const META_SETTEXTJUSTIFICATION = &h020A
const META_SETWINDOWORG = &h020B
const META_SETWINDOWEXT = &h020C
const META_SETVIEWPORTORG = &h020D
const META_SETVIEWPORTEXT = &h020E
const META_OFFSETWINDOWORG = &h020F
const META_SCALEWINDOWEXT = &h0410
const META_OFFSETVIEWPORTORG = &h0211
const META_SCALEVIEWPORTEXT = &h0412
const META_LINETO = &h0213
const META_MOVETO = &h0214
const META_EXCLUDECLIPRECT = &h0415
const META_INTERSECTCLIPRECT = &h0416
const META_ARC = &h0817
const META_ELLIPSE = &h0418
const META_FLOODFILL = &h0419
const META_PIE = &h081A
const META_RECTANGLE = &h041B
const META_ROUNDRECT = &h061C
const META_PATBLT = &h061D
const META_SAVEDC = &h001E
const META_SETPIXEL = &h041F
const META_OFFSETCLIPRGN = &h0220
const META_TEXTOUT = &h0521
const META_BITBLT = &h0922
const META_STRETCHBLT = &h0B23
const META_POLYGON = &h0324
const META_POLYLINE = &h0325
const META_ESCAPE = &h0626
const META_RESTOREDC = &h0127
const META_FILLREGION = &h0228
const META_FRAMEREGION = &h0429
const META_INVERTREGION = &h012A
const META_PAINTREGION = &h012B
const META_SELECTCLIPREGION = &h012C
const META_SELECTOBJECT = &h012D
const META_SETTEXTALIGN = &h012E
const META_CHORD = &h0830
const META_SETMAPPERFLAGS = &h0231
const META_EXTTEXTOUT = &h0a32
const META_SETDIBTODEV = &h0d33
const META_SELECTPALETTE = &h0234
const META_REALIZEPALETTE = &h0035
const META_ANIMATEPALETTE = &h0436
const META_SETPALENTRIES = &h0037
const META_POLYPOLYGON = &h0538
const META_RESIZEPALETTE = &h0139
const META_DIBBITBLT = &h0940
const META_DIBSTRETCHBLT = &h0b41
const META_DIBCREATEPATTERNBRUSH = &h0142
const META_STRETCHDIB = &h0f43
const META_EXTFLOODFILL = &h0548
const META_SETLAYOUT = &h0149
const META_DELETEOBJECT = &h01f0
const META_CREATEPALETTE = &h00f7
const META_CREATEPATTERNBRUSH = &h01F9
const META_CREATEPENINDIRECT = &h02FA
const META_CREATEFONTINDIRECT = &h02FB
const META_CREATEBRUSHINDIRECT = &h02FC
const META_CREATEREGION = &h06FF

type _DRAWPATRECT
 ptPosition as POINT
 ptSize as POINT
 wStyle as WORD
 wPattern as WORD
end type

type DRAWPATRECT as _DRAWPATRECT
type PDRAWPATRECT as _DRAWPATRECT ptr
const NEWFRAME = 1
const ABORTDOC_ = 2
const NEXTBAND = 3
const SETCOLORTABLE = 4
const GETCOLORTABLE = 5
const FLUSHOUTPUT = 6
const DRAFTMODE = 7
const QUERYESCSUPPORT = 8
const SETABORTPROC_ = 9
const STARTDOC_ = 10
const ENDDOC_ = 11
const GETPHYSPAGESIZE = 12
const GETPRINTINGOFFSET = 13
const GETSCALINGFACTOR = 14
const MFCOMMENT = 15
const GETPENWIDTH = 16
const SETCOPYCOUNT = 17
const SELECTPAPERSOURCE = 18
const DEVICEDATA = 19
const PASSTHROUGH = 19
const GETTECHNOLGY = 20
const GETTECHNOLOGY = 20
const SETLINECAP = 21
const SETLINEJOIN = 22
const SETMITERLIMIT_ = 23
const BANDINFO = 24
const DRAWPATTERNRECT = 25
const GETVECTORPENSIZE = 26
const GETVECTORBRUSHSIZE = 27
const ENABLEDUPLEX = 28
const GETSETPAPERBINS = 29
const GETSETPRINTORIENT = 30
const ENUMPAPERBINS = 31
const SETDIBSCALING = 32
const EPSPRINTING = 33
const ENUMPAPERMETRICS = 34
const GETSETPAPERMETRICS = 35
const POSTSCRIPT_DATA = 37
const POSTSCRIPT_IGNORE = 38
const MOUSETRAILS = 39
const GETDEVICEUNITS = 42
const GETEXTENDEDTEXTMETRICS = 256
const GETEXTENTTABLE = 257
const GETPAIRKERNTABLE = 258
const GETTRACKKERNTABLE = 259
const EXTTEXTOUT_ = 512
const GETFACENAME = 513
const DOWNLOADFACE = 514
const ENABLERELATIVEWIDTHS = 768
const ENABLEPAIRKERNING = 769
const SETKERNTRACK = 770
const SETALLJUSTVALUES = 771
const SETCHARSET = 772
const STRETCHBLT_ = 2048
const METAFILE_DRIVER = 2049
const GETSETSCREENPARAMS = 3072
const QUERYDIBSUPPORT = 3073
const BEGIN_PATH = 4096
const CLIP_TO_PATH = 4097
const END_PATH = 4098
const EXT_DEVICE_CAPS = 4099
const RESTORE_CTM = 4100
const SAVE_CTM = 4101
const SET_ARC_DIRECTION = 4102
const SET_BACKGROUND_COLOR = 4103
const SET_POLY_MODE = 4104
const SET_SCREEN_ANGLE = 4105
const SET_SPREAD = 4106
const TRANSFORM_CTM = 4107
const SET_CLIP_BOX = 4108
const SET_BOUNDS = 4109
const SET_MIRROR_MODE = 4110
const OPENCHANNEL = 4110
const DOWNLOADHEADER = 4111
const CLOSECHANNEL = 4112
const POSTSCRIPT_PASSTHROUGH = 4115
const ENCAPSULATED_POSTSCRIPT = 4116
const POSTSCRIPT_IDENTIFY = 4117
const POSTSCRIPT_INJECTION = 4118
const CHECKJPEGFORMAT = 4119
const CHECKPNGFORMAT = 4120
const GET_PS_FEATURESETTING = 4121
const GDIPLUS_TS_QUERYVER = 4122
const GDIPLUS_TS_RECORD = 4123


const SPCLPASSTHROUGH2 = 4568
const PSIDENT_GDICENTRIC = 0
const PSIDENT_PSCENTRIC = 1

type _PSINJECTDATA
 DataBytes as DWORD
 InjectionPoint as WORD
 PageNumber as WORD
end type

type PSINJECTDATA as _PSINJECTDATA
type PPSINJECTDATA as _PSINJECTDATA ptr
const PSINJECT_BEGINSTREAM = 1
const PSINJECT_PSADOBE = 2
const PSINJECT_PAGESATEND = 3
const PSINJECT_PAGES = 4
const PSINJECT_DOCNEEDEDRES = 5
const PSINJECT_DOCSUPPLIEDRES = 6
const PSINJECT_PAGEORDER = 7
const PSINJECT_ORIENTATION = 8
const PSINJECT_BOUNDINGBOX = 9
const PSINJECT_DOCUMENTPROCESSCOLORS = 10
const PSINJECT_COMMENTS = 11
const PSINJECT_BEGINDEFAULTS = 12
const PSINJECT_ENDDEFAULTS = 13
const PSINJECT_BEGINPROLOG = 14
const PSINJECT_ENDPROLOG = 15
const PSINJECT_BEGINSETUP = 16
const PSINJECT_ENDSETUP = 17
const PSINJECT_TRAILER = 18
const PSINJECT_EOF = 19
const PSINJECT_ENDSTREAM = 20
const PSINJECT_DOCUMENTPROCESSCOLORSATEND = 21
const PSINJECT_PAGENUMBER = 100
const PSINJECT_BEGINPAGESETUP = 101
const PSINJECT_ENDPAGESETUP = 102
const PSINJECT_PAGETRAILER = 103
const PSINJECT_PLATECOLOR = 104
const PSINJECT_SHOWPAGE = 105
const PSINJECT_PAGEBBOX = 106
const PSINJECT_ENDPAGECOMMENTS = 107
const PSINJECT_VMSAVE = 200
const PSINJECT_VMRESTORE = 201
const FEATURESETTING_NUP = 0
const FEATURESETTING_OUTPUT = 1
const FEATURESETTING_PSLEVEL = 2
const FEATURESETTING_CUSTPAPER = 3
const FEATURESETTING_MIRROR = 4
const FEATURESETTING_NEGATIVE = 5
const FEATURESETTING_PROTOCOL = 6
const FEATURESETTING_PRIVATE_BEGIN = &h1000
const FEATURESETTING_PRIVATE_END = &h1FFF

type _PSFEATURE_OUTPUT
 bPageIndependent as WINBOOL
 bSetPageDevice as WINBOOL
end type

type PSFEATURE_OUTPUT as _PSFEATURE_OUTPUT
type PPSFEATURE_OUTPUT as _PSFEATURE_OUTPUT ptr

type _PSFEATURE_CUSTPAPER
 lOrientation as LONG
 lWidth as LONG
 lHeight as LONG
 lWidthOffset as LONG
 lHeightOffset as LONG
end type

type PSFEATURE_CUSTPAPER as _PSFEATURE_CUSTPAPER
type PPSFEATURE_CUSTPAPER as _PSFEATURE_CUSTPAPER ptr
const PSPROTOCOL_ASCII = 0
const PSPROTOCOL_BCP = 1
const PSPROTOCOL_TBCP = 2
const PSPROTOCOL_BINARY = 3
const QDI_SETDIBITS = 1
const QDI_GETDIBITS = 2
const QDI_DIBTOSCREEN = 4
const QDI_STRETCHDIB = 8
const SP_NOTREPORTED = &h4000
const SP_ERROR = -1
const SP_APPABORT = -2
const SP_USERABORT = -3
const SP_OUTOFDISK = -4
const SP_OUTOFMEMORY = -5
const PR_JOBSTATUS = &h00000
const OBJ_PEN = 1
const OBJ_BRUSH = 2
const OBJ_DC = 3
const OBJ_METADC = 4
const OBJ_PAL = 5
const OBJ_FONT = 6
const OBJ_BITMAP = 7
const OBJ_REGION = 8
const OBJ_METAFILE = 9
const OBJ_MEMDC = 10
const OBJ_EXTPEN = 11
const OBJ_ENHMETADC = 12
const OBJ_ENHMETAFILE = 13
const OBJ_COLORSPACE = 14
const GDI_OBJ_LAST = OBJ_COLORSPACE
const MWT_IDENTITY = 1
const MWT_LEFTMULTIPLY = 2
const MWT_RIGHTMULTIPLY = 3
const MWT_MIN = MWT_IDENTITY
const MWT_MAX = MWT_RIGHTMULTIPLY

type tagXFORM
 eM11 as FLOAT
 eM12 as FLOAT
 eM21 as FLOAT
 eM22 as FLOAT
 eDx as FLOAT
 eDy as FLOAT
end type

type XFORM as tagXFORM
type PXFORM as tagXFORM ptr
type LPXFORM as tagXFORM ptr

type tagBITMAP
 bmType as LONG
 bmWidth as LONG
 bmHeight as LONG
 bmWidthBytes as LONG
 bmPlanes as WORD
 bmBitsPixel as WORD
 bmBits as LPVOID
end type

type BITMAP as tagBITMAP
type PBITMAP as tagBITMAP ptr
type NPBITMAP as tagBITMAP ptr
type LPBITMAP as tagBITMAP ptr

type tagRGBTRIPLE field = 1
 rgbtBlue as UBYTE
 rgbtGreen as UBYTE
 rgbtRed as UBYTE
end type

type RGBTRIPLE as tagRGBTRIPLE

type tagRGBQUAD
 rgbBlue as UBYTE
 rgbGreen as UBYTE
 rgbRed as UBYTE
 rgbReserved as UBYTE
end type

type RGBQUAD as tagRGBQUAD
type LPRGBQUAD as RGBQUAD ptr
const CS_ENABLE = &h00000001
const CS_DISABLE = &h00000002
const CS_DELETE_TRANSFORM = &h00000003
type LCSCSTYPE as LONG
const LCS_CALIBRATED_RGB = &h000000000
type LCSGAMUTMATCH as LONG
const LCS_GM_BUSINESS = &h00000001
const LCS_GM_GRAPHICS = &h00000002
const LCS_GM_IMAGES = &h00000004
const LCS_GM_ABS_COLORIMETRIC = &h00000008
const CM_OUT_OF_GAMUT = 255
const CM_IN_GAMUT = 0
const ICM_ADDPROFILE = 1
const ICM_DELETEPROFILE = 2
const ICM_QUERYPROFILE = 3
const ICM_SETDEFAULTPROFILE = 4
const ICM_REGISTERICMATCHER = 5
const ICM_UNREGISTERICMATCHER = 6
const ICM_QUERYMATCH = 7

type FXPT16DOT16 as long
type LPFXPT16DOT16 as long ptr
type FXPT2DOT30 as long
type LPFXPT2DOT30 as long ptr

type tagCIEXYZ
 ciexyzX as FXPT2DOT30
 ciexyzY as FXPT2DOT30
 ciexyzZ as FXPT2DOT30
end type

type CIEXYZ as tagCIEXYZ
type LPCIEXYZ as CIEXYZ ptr

type tagICEXYZTRIPLE
 ciexyzRed as CIEXYZ
 ciexyzGreen as CIEXYZ
 ciexyzBlue as CIEXYZ
end type

type CIEXYZTRIPLE as tagICEXYZTRIPLE
type LPCIEXYZTRIPLE as CIEXYZTRIPLE ptr

type tagLOGCOLORSPACEA
 lcsSignature as DWORD
 lcsVersion as DWORD
 lcsSize as DWORD
 lcsCSType as LCSCSTYPE
 lcsIntent as LCSGAMUTMATCH
 lcsEndpoints as CIEXYZTRIPLE
 lcsGammaRed as DWORD
 lcsGammaGreen as DWORD
 lcsGammaBlue as DWORD
 lcsFilename as zstring * 260
end type

type LOGCOLORSPACEA as tagLOGCOLORSPACEA
type LPLOGCOLORSPACEA as tagLOGCOLORSPACEA ptr

type tagLOGCOLORSPACEW
 lcsSignature as DWORD
 lcsVersion as DWORD
 lcsSize as DWORD
 lcsCSType as LCSCSTYPE
 lcsIntent as LCSGAMUTMATCH
 lcsEndpoints as CIEXYZTRIPLE
 lcsGammaRed as DWORD
 lcsGammaGreen as DWORD
 lcsGammaBlue as DWORD
 lcsFilename as wstring * 260
end type

type LOGCOLORSPACEW as tagLOGCOLORSPACEW
type LPLOGCOLORSPACEW as tagLOGCOLORSPACEW ptr

 type LOGCOLORSPACE as LOGCOLORSPACEA
 type LPLOGCOLORSPACE as LPLOGCOLORSPACEA

type tagBITMAPCOREHEADER
 bcSize as DWORD
 bcWidth as WORD
 bcHeight as WORD
 bcPlanes as WORD
 bcBitCount as WORD
end type

type BITMAPCOREHEADER as tagBITMAPCOREHEADER
type LPBITMAPCOREHEADER as tagBITMAPCOREHEADER ptr
type PBITMAPCOREHEADER as tagBITMAPCOREHEADER ptr

type tagBITMAPINFOHEADER
 biSize as DWORD
 biWidth as LONG
 biHeight as LONG
 biPlanes as WORD
 biBitCount as WORD
 biCompression as DWORD
 biSizeImage as DWORD
 biXPelsPerMeter as LONG
 biYPelsPerMeter as LONG
 biClrUsed as DWORD
 biClrImportant as DWORD
end type

type BITMAPINFOHEADER as tagBITMAPINFOHEADER
type LPBITMAPINFOHEADER as tagBITMAPINFOHEADER ptr
type PBITMAPINFOHEADER as tagBITMAPINFOHEADER ptr

type BITMAPV4HEADER
 bV4Size as DWORD
 bV4Width as LONG
 bV4Height as LONG
 bV4Planes as WORD
 bV4BitCount as WORD
 bV4V4Compression as DWORD
 bV4SizeImage as DWORD
 bV4XPelsPerMeter as LONG
 bV4YPelsPerMeter as LONG
 bV4ClrUsed as DWORD
 bV4ClrImportant as DWORD
 bV4RedMask as DWORD
 bV4GreenMask as DWORD
 bV4BlueMask as DWORD
 bV4AlphaMask as DWORD
 bV4CSType as DWORD
 bV4Endpoints as CIEXYZTRIPLE
 bV4GammaRed as DWORD
 bV4GammaGreen as DWORD
 bV4GammaBlue as DWORD
end type

type LPBITMAPV4HEADER as BITMAPV4HEADER ptr
type PBITMAPV4HEADER as BITMAPV4HEADER ptr

type BITMAPV5HEADER
 bV5Size as DWORD
 bV5Width as LONG
 bV5Height as LONG
 bV5Planes as WORD
 bV5BitCount as WORD
 bV5Compression as DWORD
 bV5SizeImage as DWORD
 bV5XPelsPerMeter as LONG
 bV5YPelsPerMeter as LONG
 bV5ClrUsed as DWORD
 bV5ClrImportant as DWORD
 bV5RedMask as DWORD
 bV5GreenMask as DWORD
 bV5BlueMask as DWORD
 bV5AlphaMask as DWORD
 bV5CSType as DWORD
 bV5Endpoints as CIEXYZTRIPLE
 bV5GammaRed as DWORD
 bV5GammaGreen as DWORD
 bV5GammaBlue as DWORD
 bV5Intent as DWORD
 bV5ProfileData as DWORD
 bV5ProfileSize as DWORD
 bV5Reserved as DWORD
end type

type LPBITMAPV5HEADER as BITMAPV5HEADER ptr
type PBITMAPV5HEADER as BITMAPV5HEADER ptr
const BI_RGB = 0
const BI_RLE8 = 1
const BI_RLE4 = 2
const BI_BITFIELDS = 3
const BI_JPEG = 4
const BI_PNG = 5

type tagBITMAPINFO
 bmiHeader as BITMAPINFOHEADER
 bmiColors(0 to 0) as RGBQUAD
end type

type BITMAPINFO as tagBITMAPINFO
type LPBITMAPINFO as tagBITMAPINFO ptr
type PBITMAPINFO as tagBITMAPINFO ptr

type tagBITMAPCOREINFO
 bmciHeader as BITMAPCOREHEADER
 bmciColors(0 to 0) as RGBTRIPLE
end type

type BITMAPCOREINFO as tagBITMAPCOREINFO
type LPBITMAPCOREINFO as tagBITMAPCOREINFO ptr
type PBITMAPCOREINFO as tagBITMAPCOREINFO ptr

type tagBITMAPFILEHEADER field = 2
 bfType as WORD
 bfSize as DWORD
 bfReserved1 as WORD
 bfReserved2 as WORD
 bfOffBits as DWORD
end type

type BITMAPFILEHEADER as tagBITMAPFILEHEADER
type LPBITMAPFILEHEADER as tagBITMAPFILEHEADER ptr
type PBITMAPFILEHEADER as tagBITMAPFILEHEADER ptr

type tagFONTSIGNATURE
 fsUsb(0 to 3) as DWORD
 fsCsb(0 to 1) as DWORD
end type

type FONTSIGNATURE as tagFONTSIGNATURE
type PFONTSIGNATURE as tagFONTSIGNATURE ptr
type LPFONTSIGNATURE as tagFONTSIGNATURE ptr

type tagCHARSETINFO
 ciCharset as UINT
 ciACP as UINT
 fs as FONTSIGNATURE
end type

type CHARSETINFO as tagCHARSETINFO
type PCHARSETINFO as tagCHARSETINFO ptr
type NPCHARSETINFO as tagCHARSETINFO ptr
type LPCHARSETINFO as tagCHARSETINFO ptr

const TCI_SRCCHARSET = 1
const TCI_SRCCODEPAGE = 2
const TCI_SRCFONTSIG = 3
const TCI_SRCLOCALE = &h1000

type tagLOCALESIGNATURE
 lsUsb(0 to 3) as DWORD
 lsCsbDefault(0 to 1) as DWORD
 lsCsbSupported(0 to 1) as DWORD
end type

type LOCALESIGNATURE as tagLOCALESIGNATURE
type PLOCALESIGNATURE as tagLOCALESIGNATURE ptr
type LPLOCALESIGNATURE as tagLOCALESIGNATURE ptr

type tagHANDLETABLE
 objectHandle(0 to 0) as HGDIOBJ
end type

type HANDLETABLE as tagHANDLETABLE
type PHANDLETABLE as tagHANDLETABLE ptr
type LPHANDLETABLE as tagHANDLETABLE ptr

type tagMETARECORD
 rdSize as DWORD
 rdFunction as WORD
 rdParm(0 to 0) as WORD
end type

type METARECORD as tagMETARECORD
type PMETARECORD as tagMETARECORD ptr
type LPMETARECORD as tagMETARECORD ptr

type tagMETAFILEPICT
 mm as LONG
 xExt as LONG
 yExt as LONG
 hMF as HMETAFILE
end type

type METAFILEPICT as tagMETAFILEPICT
type LPMETAFILEPICT as tagMETAFILEPICT ptr

type tagMETAHEADER field = 2
 mtType as WORD
 mtHeaderSize as WORD
 mtVersion as WORD
 mtSize as DWORD
 mtNoObjects as WORD
 mtMaxRecord as DWORD
 mtNoParameters as WORD
end type

type METAHEADER as tagMETAHEADER
type PMETAHEADER as tagMETAHEADER ptr
type LPMETAHEADER as tagMETAHEADER ptr

type tagENHMETARECORD
 iType as DWORD
 nSize as DWORD
 dParm(0 to 0) as DWORD
end type

type ENHMETARECORD as tagENHMETARECORD
type PENHMETARECORD as tagENHMETARECORD ptr
type LPENHMETARECORD as tagENHMETARECORD ptr

type tagENHMETAHEADER
 iType as DWORD
 nSize as DWORD
 rclBounds as RECTL
 rclFrame as RECTL
 dSignature as DWORD
 nVersion as DWORD
 nBytes as DWORD
 nRecords as DWORD
 nHandles as WORD
 sReserved as WORD
 nDescription as DWORD
 offDescription as DWORD
 nPalEntries as DWORD
 szlDevice as SIZEL
 szlMillimeters as SIZEL
 cbPixelFormat as DWORD
 offPixelFormat as DWORD
 bOpenGL as DWORD
 szlMicrometers as SIZEL
end type

type ENHMETAHEADER as tagENHMETAHEADER
type PENHMETAHEADER as tagENHMETAHEADER ptr
type LPENHMETAHEADER as tagENHMETAHEADER ptr

const TMPF_FIXED_PITCH = &h01
const TMPF_VECTOR = &h02
const TMPF_DEVICE = &h08
const TMPF_TRUETYPE = &h04

 type BCHAR as UBYTE


type tagTEXTMETRICA field = 4
 tmHeight as LONG
 tmAscent as LONG
 tmDescent as LONG
 tmInternalLeading as LONG
 tmExternalLeading as LONG
 tmAveCharWidth as LONG
 tmMaxCharWidth as LONG
 tmWeight as LONG
 tmOverhang as LONG
 tmDigitizedAspectX as LONG
 tmDigitizedAspectY as LONG
 tmFirstChar as UBYTE
 tmLastChar as UBYTE
 tmDefaultChar as UBYTE
 tmBreakChar as UBYTE
 tmItalic as UBYTE
 tmUnderlined as UBYTE
 tmStruckOut as UBYTE
 tmPitchAndFamily as UBYTE
 tmCharSet as UBYTE
end type

type TEXTMETRICA as tagTEXTMETRICA
type PTEXTMETRICA as tagTEXTMETRICA ptr
type NPTEXTMETRICA as tagTEXTMETRICA ptr
type LPTEXTMETRICA as tagTEXTMETRICA ptr

type tagTEXTMETRICW field = 4
 tmHeight as LONG
 tmAscent as LONG
 tmDescent as LONG
 tmInternalLeading as LONG
 tmExternalLeading as LONG
 tmAveCharWidth as LONG
 tmMaxCharWidth as LONG
 tmWeight as LONG
 tmOverhang as LONG
 tmDigitizedAspectX as LONG
 tmDigitizedAspectY as LONG
 tmFirstChar as WCHAR
 tmLastChar as WCHAR
 tmDefaultChar as WCHAR
 tmBreakChar as WCHAR
 tmItalic as UBYTE
 tmUnderlined as UBYTE
 tmStruckOut as UBYTE
 tmPitchAndFamily as UBYTE
 tmCharSet as UBYTE
end type

type TEXTMETRICW as tagTEXTMETRICW
type PTEXTMETRICW as tagTEXTMETRICW ptr
type NPTEXTMETRICW as tagTEXTMETRICW ptr
type LPTEXTMETRICW as tagTEXTMETRICW ptr

 type TEXTMETRIC as TEXTMETRICA
 type PTEXTMETRIC as PTEXTMETRICA
 type NPTEXTMETRIC as NPTEXTMETRICA
 type LPTEXTMETRIC as LPTEXTMETRICA

const NTM_REGULAR = &h00000040
const NTM_BOLD = &h00000020
const NTM_ITALIC = &h00000001
const NTM_NONNEGATIVE_AC = &h00010000
const NTM_PS_OPENTYPE = &h00020000
const NTM_TT_OPENTYPE = &h00040000
const NTM_MULTIPLEMASTER = &h00080000
const NTM_TYPE1 = &h00100000
const NTM_DSIG = &h00200000

type tagNEWTEXTMETRICA field = 4
 tmHeight as LONG
 tmAscent as LONG
 tmDescent as LONG
 tmInternalLeading as LONG
 tmExternalLeading as LONG
 tmAveCharWidth as LONG
 tmMaxCharWidth as LONG
 tmWeight as LONG
 tmOverhang as LONG
 tmDigitizedAspectX as LONG
 tmDigitizedAspectY as LONG
 tmFirstChar as UBYTE
 tmLastChar as UBYTE
 tmDefaultChar as UBYTE
 tmBreakChar as UBYTE
 tmItalic as UBYTE
 tmUnderlined as UBYTE
 tmStruckOut as UBYTE
 tmPitchAndFamily as UBYTE
 tmCharSet as UBYTE
 ntmFlags as DWORD
 ntmSizeEM as UINT
 ntmCellHeight as UINT
 ntmAvgWidth as UINT
end type

type NEWTEXTMETRICA as tagNEWTEXTMETRICA
type PNEWTEXTMETRICA as tagNEWTEXTMETRICA ptr
type NPNEWTEXTMETRICA as tagNEWTEXTMETRICA ptr
type LPNEWTEXTMETRICA as tagNEWTEXTMETRICA ptr

type tagNEWTEXTMETRICW field = 4
 tmHeight as LONG
 tmAscent as LONG
 tmDescent as LONG
 tmInternalLeading as LONG
 tmExternalLeading as LONG
 tmAveCharWidth as LONG
 tmMaxCharWidth as LONG
 tmWeight as LONG
 tmOverhang as LONG
 tmDigitizedAspectX as LONG
 tmDigitizedAspectY as LONG
 tmFirstChar as WCHAR
 tmLastChar as WCHAR
 tmDefaultChar as WCHAR
 tmBreakChar as WCHAR
 tmItalic as UBYTE
 tmUnderlined as UBYTE
 tmStruckOut as UBYTE
 tmPitchAndFamily as UBYTE
 tmCharSet as UBYTE
 ntmFlags as DWORD
 ntmSizeEM as UINT
 ntmCellHeight as UINT
 ntmAvgWidth as UINT
end type

type NEWTEXTMETRICW as tagNEWTEXTMETRICW
type PNEWTEXTMETRICW as tagNEWTEXTMETRICW ptr
type NPNEWTEXTMETRICW as tagNEWTEXTMETRICW ptr
type LPNEWTEXTMETRICW as tagNEWTEXTMETRICW ptr

 type NEWTEXTMETRIC as NEWTEXTMETRICA
 type PNEWTEXTMETRIC as PNEWTEXTMETRICA
 type NPNEWTEXTMETRIC as NPNEWTEXTMETRICA
 type LPNEWTEXTMETRIC as LPNEWTEXTMETRICA

type tagNEWTEXTMETRICEXA
 ntmTm as NEWTEXTMETRICA
 ntmFontSig as FONTSIGNATURE
end type

type NEWTEXTMETRICEXA as tagNEWTEXTMETRICEXA

type tagNEWTEXTMETRICEXW
 ntmTm as NEWTEXTMETRICW
 ntmFontSig as FONTSIGNATURE
end type

type NEWTEXTMETRICEXW as tagNEWTEXTMETRICEXW

 type NEWTEXTMETRICEX as NEWTEXTMETRICEXA

type tagPELARRAY
 paXCount as LONG
 paYCount as LONG
 paXExt as LONG
 paYExt as LONG
 paRGBs as UBYTE
end type

type PELARRAY as tagPELARRAY
type PPELARRAY as tagPELARRAY ptr
type NPPELARRAY as tagPELARRAY ptr
type LPPELARRAY as tagPELARRAY ptr

type tagLOGBRUSH
 lbStyle as UINT
 lbColor as COLORREF
 lbHatch as ULONG_PTR
end type

type LOGBRUSH as tagLOGBRUSH
type PLOGBRUSH as tagLOGBRUSH ptr
type NPLOGBRUSH as tagLOGBRUSH ptr
type LPLOGBRUSH as tagLOGBRUSH ptr

type tagLOGBRUSH32
 lbStyle as UINT
 lbColor as COLORREF
 lbHatch as ULONG
end type

type LOGBRUSH32 as tagLOGBRUSH32
type PLOGBRUSH32 as tagLOGBRUSH32 ptr
type NPLOGBRUSH32 as tagLOGBRUSH32 ptr
type LPLOGBRUSH32 as tagLOGBRUSH32 ptr
type PATTERN as LOGBRUSH
type PPATTERN as PATTERN ptr
type NPPATTERN as PATTERN ptr
type LPPATTERN as PATTERN ptr

type tagLOGPEN
 lopnStyle as UINT
 lopnWidth as POINT
 lopnColor as COLORREF
end type

type LOGPEN as tagLOGPEN
type PLOGPEN as tagLOGPEN ptr
type NPLOGPEN as tagLOGPEN ptr
type LPLOGPEN as tagLOGPEN ptr

type tagEXTLOGPEN
 elpPenStyle as DWORD
 elpWidth as DWORD
 elpBrushStyle as UINT
 elpColor as COLORREF
 elpHatch as ULONG_PTR
 elpNumEntries as DWORD
 elpStyleEntry(0 to 0) as DWORD
end type

type EXTLOGPEN as tagEXTLOGPEN
type PEXTLOGPEN as tagEXTLOGPEN ptr
type NPEXTLOGPEN as tagEXTLOGPEN ptr
type LPEXTLOGPEN as tagEXTLOGPEN ptr

type tagEXTLOGPEN32
 elpPenStyle as DWORD
 elpWidth as DWORD
 elpBrushStyle as UINT
 elpColor as COLORREF
 elpHatch as ULONG
 elpNumEntries as DWORD
 elpStyleEntry(0 to 0) as DWORD
end type

type EXTLOGPEN32 as tagEXTLOGPEN32
type PEXTLOGPEN32 as tagEXTLOGPEN32 ptr
type NPEXTLOGPEN32 as tagEXTLOGPEN32 ptr
type LPEXTLOGPEN32 as tagEXTLOGPEN32 ptr

type tagPALETTEENTRY
 peRed as UBYTE
 peGreen as UBYTE
 peBlue as UBYTE
 peFlags as UBYTE
end type

type PALETTEENTRY as tagPALETTEENTRY
type PPALETTEENTRY as tagPALETTEENTRY ptr
type LPPALETTEENTRY as tagPALETTEENTRY ptr

type tagLOGPALETTE
 palVersion as WORD
 palNumEntries as WORD
 palPalEntry(0 to 0) as PALETTEENTRY
end type

type LOGPALETTE as tagLOGPALETTE
type PLOGPALETTE as tagLOGPALETTE ptr
type NPLOGPALETTE as tagLOGPALETTE ptr
type LPLOGPALETTE as tagLOGPALETTE ptr
const LF_FACESIZE = 32

type tagLOGFONTA
 lfHeight as LONG
 lfWidth as LONG
 lfEscapement as LONG
 lfOrientation as LONG
 lfWeight as LONG
 lfItalic as UBYTE
 lfUnderline as UBYTE
 lfStrikeOut as UBYTE
 lfCharSet as UBYTE
 lfOutPrecision as UBYTE
 lfClipPrecision as UBYTE
 lfQuality as UBYTE
 lfPitchAndFamily as UBYTE
 lfFaceName as zstring * 32
end type

type LOGFONTA as tagLOGFONTA
type PLOGFONTA as tagLOGFONTA ptr
type NPLOGFONTA as tagLOGFONTA ptr
type LPLOGFONTA as tagLOGFONTA ptr

type tagLOGFONTW
 lfHeight as LONG
 lfWidth as LONG
 lfEscapement as LONG
 lfOrientation as LONG
 lfWeight as LONG
 lfItalic as UBYTE
 lfUnderline as UBYTE
 lfStrikeOut as UBYTE
 lfCharSet as UBYTE
 lfOutPrecision as UBYTE
 lfClipPrecision as UBYTE
 lfQuality as UBYTE
 lfPitchAndFamily as UBYTE
 lfFaceName as wstring * 32
end type

type LOGFONTW as tagLOGFONTW
type PLOGFONTW as tagLOGFONTW ptr
type NPLOGFONTW as tagLOGFONTW ptr
type LPLOGFONTW as tagLOGFONTW ptr

 type LOGFONT as LOGFONTA
 type PLOGFONT as PLOGFONTA
 type NPLOGFONT as NPLOGFONTA
 type LPLOGFONT as LPLOGFONTA

const LF_FULLFACESIZE = 64

type tagENUMLOGFONTA
 elfLogFont as LOGFONTA
 elfFullName as zstring * 64
 elfStyle as zstring * 32
end type

type ENUMLOGFONTA as tagENUMLOGFONTA
type LPENUMLOGFONTA as tagENUMLOGFONTA ptr

type tagENUMLOGFONTW
 elfLogFont as LOGFONTW
 elfFullName as wstring * 64
 elfStyle as wstring * 32
end type

type ENUMLOGFONTW as tagENUMLOGFONTW
type LPENUMLOGFONTW as tagENUMLOGFONTW ptr

 type ENUMLOGFONT as ENUMLOGFONTA
 type LPENUMLOGFONT as LPENUMLOGFONTA

type tagENUMLOGFONTEXA
 elfLogFont as LOGFONTA
 elfFullName as zstring * 64
 elfStyle as zstring * 32
 elfScript as zstring * 32
end type

type ENUMLOGFONTEXA as tagENUMLOGFONTEXA
type LPENUMLOGFONTEXA as tagENUMLOGFONTEXA ptr

type tagENUMLOGFONTEXW
 elfLogFont as LOGFONTW
 elfFullName as wstring * 64
 elfStyle as wstring * 32
 elfScript as wstring * 32
end type

type ENUMLOGFONTEXW as tagENUMLOGFONTEXW
type LPENUMLOGFONTEXW as tagENUMLOGFONTEXW ptr

 type ENUMLOGFONTEX as ENUMLOGFONTEXA
 type LPENUMLOGFONTEX as LPENUMLOGFONTEXA

const OUT_DEFAULT_PRECIS = 0
const OUT_STRING_PRECIS = 1
const OUT_CHARACTER_PRECIS = 2
const OUT_STROKE_PRECIS = 3
const OUT_TT_PRECIS = 4
const OUT_DEVICE_PRECIS = 5
const OUT_RASTER_PRECIS = 6
const OUT_TT_ONLY_PRECIS = 7
const OUT_OUTLINE_PRECIS = 8
const OUT_SCREEN_OUTLINE_PRECIS = 9
const OUT_PS_ONLY_PRECIS = 10
const CLIP_DEFAULT_PRECIS = 0
const CLIP_CHARACTER_PRECIS = 1
const CLIP_STROKE_PRECIS = 2
const CLIP_MASK = &hf
const CLIP_LH_ANGLES = 1 shl 4
const CLIP_TT_ALWAYS = 2 shl 4


const CLIP_EMBEDDED = 8 shl 4
const DEFAULT_QUALITY = 0
const DRAFT_QUALITY = 1
const PROOF_QUALITY = 2
const NONANTIALIASED_QUALITY = 3
const ANTIALIASED_QUALITY = 4
const CLEARTYPE_QUALITY = 5
const CLEARTYPE_NATURAL_QUALITY = 6
const DEFAULT_PITCH = 0
const FIXED_PITCH = 1
const VARIABLE_PITCH = 2
const MONO_FONT = 8
const ANSI_CHARSET = 0
const DEFAULT_CHARSET = 1
const SYMBOL_CHARSET = 2
const SHIFTJIS_CHARSET = 128
const HANGEUL_CHARSET = 129
const HANGUL_CHARSET = 129
const GB2312_CHARSET = 134
const CHINESEBIG5_CHARSET = 136
const OEM_CHARSET = 255
const JOHAB_CHARSET = 130
const HEBREW_CHARSET = 177
const ARABIC_CHARSET = 178
const GREEK_CHARSET = 161
const TURKISH_CHARSET = 162
const VIETNAMESE_CHARSET = 163
const THAI_CHARSET = 222
const EASTEUROPE_CHARSET = 238
const RUSSIAN_CHARSET = 204
const MAC_CHARSET = 77
const BALTIC_CHARSET = 186
const FS_LATIN1 = &h00000001
const FS_LATIN2 = &h00000002
const FS_CYRILLIC = &h00000004
const FS_GREEK = &h00000008
const FS_TURKISH = &h00000010
const FS_HEBREW = &h00000020
const FS_ARABIC = &h00000040
const FS_BALTIC = &h00000080
const FS_VIETNAMESE = &h00000100
const FS_THAI = &h00010000
const FS_JISJAPAN = &h00020000
const FS_CHINESESIMP = &h00040000
const FS_WANSUNG = &h00080000
const FS_CHINESETRAD = &h00100000
const FS_JOHAB = &h00200000
const FS_SYMBOL = &h80000000
const FF_DONTCARE = 0 shl 4
const FF_ROMAN = 1 shl 4
const FF_SWISS = 2 shl 4
const FF_MODERN = 3 shl 4
const FF_SCRIPT = 4 shl 4
const FF_DECORATIVE = 5 shl 4
const FW_DONTCARE = 0
const FW_THIN = 100
const FW_EXTRALIGHT = 200
const FW_LIGHT = 300
const FW_NORMAL = 400
const FW_MEDIUM = 500
const FW_SEMIBOLD = 600
const FW_BOLD = 700
const FW_EXTRABOLD = 800
const FW_HEAVY = 900
const FW_ULTRALIGHT = FW_EXTRALIGHT
const FW_REGULAR = FW_NORMAL
const FW_DEMIBOLD = FW_SEMIBOLD
const FW_ULTRABOLD = FW_EXTRABOLD
const FW_BLACK = FW_HEAVY
const PANOSE_COUNT = 10
const PAN_FAMILYTYPE_INDEX = 0
const PAN_SERIFSTYLE_INDEX = 1
const PAN_WEIGHT_INDEX = 2
const PAN_PROPORTION_INDEX = 3
const PAN_CONTRAST_INDEX = 4
const PAN_STROKEVARIATION_INDEX = 5
const PAN_ARMSTYLE_INDEX = 6
const PAN_LETTERFORM_INDEX = 7
const PAN_MIDLINE_INDEX = 8
const PAN_XHEIGHT_INDEX = 9
const PAN_CULTURE_LATIN = 0

type tagPANOSE
 bFamilyType as UBYTE
 bSerifStyle as UBYTE
 bWeight as UBYTE
 bProportion as UBYTE
 bContrast as UBYTE
 bStrokeVariation as UBYTE
 bArmStyle as UBYTE
 bLetterform as UBYTE
 bMidline as UBYTE
 bXHeight as UBYTE
end type

type PANOSE as tagPANOSE
type LPPANOSE as tagPANOSE ptr
const PAN_ANY = 0
const PAN_NO_FIT = 1
const PAN_FAMILY_TEXT_DISPLAY = 2
const PAN_FAMILY_SCRIPT = 3
const PAN_FAMILY_DECORATIVE = 4
const PAN_FAMILY_PICTORIAL = 5
const PAN_SERIF_COVE = 2
const PAN_SERIF_OBTUSE_COVE = 3
const PAN_SERIF_SQUARE_COVE = 4
const PAN_SERIF_OBTUSE_SQUARE_COVE = 5
const PAN_SERIF_SQUARE = 6
const PAN_SERIF_THIN = 7
const PAN_SERIF_BONE = 8
const PAN_SERIF_EXAGGERATED = 9
const PAN_SERIF_TRIANGLE = 10
const PAN_SERIF_NORMAL_SANS = 11
const PAN_SERIF_OBTUSE_SANS = 12
const PAN_SERIF_PERP_SANS = 13
const PAN_SERIF_FLARED = 14
const PAN_SERIF_ROUNDED = 15
const PAN_WEIGHT_VERY_LIGHT = 2
const PAN_WEIGHT_LIGHT = 3
const PAN_WEIGHT_THIN = 4
const PAN_WEIGHT_BOOK = 5
const PAN_WEIGHT_MEDIUM = 6
const PAN_WEIGHT_DEMI = 7
const PAN_WEIGHT_BOLD = 8
const PAN_WEIGHT_HEAVY = 9
const PAN_WEIGHT_BLACK = 10
const PAN_WEIGHT_NORD = 11
const PAN_PROP_OLD_STYLE = 2
const PAN_PROP_MODERN = 3
const PAN_PROP_EVEN_WIDTH = 4
const PAN_PROP_EXPANDED = 5
const PAN_PROP_CONDENSED = 6
const PAN_PROP_VERY_EXPANDED = 7
const PAN_PROP_VERY_CONDENSED = 8
const PAN_PROP_MONOSPACED = 9
const PAN_CONTRAST_NONE = 2
const PAN_CONTRAST_VERY_LOW = 3
const PAN_CONTRAST_LOW = 4
const PAN_CONTRAST_MEDIUM_LOW = 5
const PAN_CONTRAST_MEDIUM = 6
const PAN_CONTRAST_MEDIUM_HIGH = 7
const PAN_CONTRAST_HIGH = 8
const PAN_CONTRAST_VERY_HIGH = 9
const PAN_STROKE_GRADUAL_DIAG = 2
const PAN_STROKE_GRADUAL_TRAN = 3
const PAN_STROKE_GRADUAL_VERT = 4
const PAN_STROKE_GRADUAL_HORZ = 5
const PAN_STROKE_RAPID_VERT = 6
const PAN_STROKE_RAPID_HORZ = 7
const PAN_STROKE_INSTANT_VERT = 8
const PAN_STRAIGHT_ARMS_HORZ = 2
const PAN_STRAIGHT_ARMS_WEDGE = 3
const PAN_STRAIGHT_ARMS_VERT = 4
const PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5
const PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6
const PAN_BENT_ARMS_HORZ = 7
const PAN_BENT_ARMS_WEDGE = 8
const PAN_BENT_ARMS_VERT = 9
const PAN_BENT_ARMS_SINGLE_SERIF = 10
const PAN_BENT_ARMS_DOUBLE_SERIF = 11
const PAN_LETT_NORMAL_CONTACT = 2
const PAN_LETT_NORMAL_WEIGHTED = 3
const PAN_LETT_NORMAL_BOXED = 4
const PAN_LETT_NORMAL_FLATTENED = 5
const PAN_LETT_NORMAL_ROUNDED = 6
const PAN_LETT_NORMAL_OFF_CENTER = 7
const PAN_LETT_NORMAL_SQUARE = 8
const PAN_LETT_OBLIQUE_CONTACT = 9
const PAN_LETT_OBLIQUE_WEIGHTED = 10
const PAN_LETT_OBLIQUE_BOXED = 11
const PAN_LETT_OBLIQUE_FLATTENED = 12
const PAN_LETT_OBLIQUE_ROUNDED = 13
const PAN_LETT_OBLIQUE_OFF_CENTER = 14
const PAN_LETT_OBLIQUE_SQUARE = 15
const PAN_MIDLINE_STANDARD_TRIMMED = 2
const PAN_MIDLINE_STANDARD_POINTED = 3
const PAN_MIDLINE_STANDARD_SERIFED = 4
const PAN_MIDLINE_HIGH_TRIMMED = 5
const PAN_MIDLINE_HIGH_POINTED = 6
const PAN_MIDLINE_HIGH_SERIFED = 7
const PAN_MIDLINE_CONSTANT_TRIMMED = 8
const PAN_MIDLINE_CONSTANT_POINTED = 9
const PAN_MIDLINE_CONSTANT_SERIFED = 10
const PAN_MIDLINE_LOW_TRIMMED = 11
const PAN_MIDLINE_LOW_POINTED = 12
const PAN_MIDLINE_LOW_SERIFED = 13
const PAN_XHEIGHT_CONSTANT_SMALL = 2
const PAN_XHEIGHT_CONSTANT_STD = 3
const PAN_XHEIGHT_CONSTANT_LARGE = 4
const PAN_XHEIGHT_DUCKING_SMALL = 5
const PAN_XHEIGHT_DUCKING_STD = 6
const PAN_XHEIGHT_DUCKING_LARGE = 7
const ELF_VENDOR_SIZE = 4

type tagEXTLOGFONTA
 elfLogFont as LOGFONTA
 elfFullName as zstring * 64
 elfStyle as zstring * 32
 elfVersion as DWORD
 elfStyleSize as DWORD
 elfMatch as DWORD
 elfReserved as DWORD
 elfVendorId(0 to 3) as UBYTE
 elfCulture as DWORD
 elfPanose as PANOSE
end type

type EXTLOGFONTA as tagEXTLOGFONTA
type PEXTLOGFONTA as tagEXTLOGFONTA ptr
type NPEXTLOGFONTA as tagEXTLOGFONTA ptr
type LPEXTLOGFONTA as tagEXTLOGFONTA ptr

type tagEXTLOGFONTW
 elfLogFont as LOGFONTW
 elfFullName as wstring * 64
 elfStyle as wstring * 32
 elfVersion as DWORD
 elfStyleSize as DWORD
 elfMatch as DWORD
 elfReserved as DWORD
 elfVendorId(0 to 3) as UBYTE
 elfCulture as DWORD
 elfPanose as PANOSE
end type

type EXTLOGFONTW as tagEXTLOGFONTW
type PEXTLOGFONTW as tagEXTLOGFONTW ptr
type NPEXTLOGFONTW as tagEXTLOGFONTW ptr
type LPEXTLOGFONTW as tagEXTLOGFONTW ptr

 type EXTLOGFONT as EXTLOGFONTA
 type PEXTLOGFONT as PEXTLOGFONTA
 type NPEXTLOGFONT as NPEXTLOGFONTA
 type LPEXTLOGFONT as LPEXTLOGFONTA

const ELF_VERSION = 0
const ELF_CULTURE_LATIN = 0
const RASTER_FONTTYPE = &h0001
const DEVICE_FONTTYPE = &h002
const TRUETYPE_FONTTYPE = &h004
const PC_RESERVED = &h01
const PC_EXPLICIT = &h02
const PC_NOCOLLAPSE = &h04
const TRANSPARENT = 1
const OPAQUE = 2
const BKMODE_LAST = 2
const GM_COMPATIBLE = 1
const GM_ADVANCED = 2
const GM_LAST = 2
const PT_CLOSEFIGURE = &h01
const PT_LINETO = &h02
const PT_BEZIERTO = &h04
const PT_MOVETO = &h06
const MM_TEXT = 1
const MM_LOMETRIC = 2
const MM_HIMETRIC = 3
const MM_LOENGLISH = 4
const MM_HIENGLISH = 5
const MM_TWIPS = 6
const MM_ISOTROPIC = 7
const MM_ANISOTROPIC = 8
const MM_MIN = MM_TEXT
const MM_MAX = MM_ANISOTROPIC
const MM_MAX_FIXEDSCALE = MM_TWIPS
const ABSOLUTE = 1
const RELATIVE = 2
const WHITE_BRUSH = 0
const LTGRAY_BRUSH = 1
const GRAY_BRUSH = 2
const DKGRAY_BRUSH = 3
const BLACK_BRUSH = 4
const NULL_BRUSH = 5
const HOLLOW_BRUSH = NULL_BRUSH
const WHITE_PEN = 6
const BLACK_PEN = 7
const NULL_PEN = 8
const OEM_FIXED_FONT = 10
const ANSI_FIXED_FONT = 11
const ANSI_VAR_FONT = 12
const SYSTEM_FONT = 13
const DEVICE_DEFAULT_FONT = 14
const DEFAULT_PALETTE = 15
const SYSTEM_FIXED_FONT = 16
const DEFAULT_GUI_FONT = 17
const DC_BRUSH = 18
const DC_PEN = 19
const STOCK_LAST = 19
const CLR_INVALID = &hFFFFFFFF
const BS_SOLID = 0
const BS_NULL = 1
const BS_HOLLOW = BS_NULL
const BS_HATCHED = 2
const BS_PATTERN = 3
const BS_INDEXED = 4
const BS_DIBPATTERN = 5
const BS_DIBPATTERNPT = 6
const BS_PATTERN8X8 = 7
const BS_DIBPATTERN8X8 = 8
const BS_MONOPATTERN = 9
const HS_HORIZONTAL = 0
const HS_VERTICAL = 1
const HS_FDIAGONAL = 2
const HS_BDIAGONAL = 3
const HS_CROSS = 4
const HS_DIAGCROSS = 5
const HS_API_MAX = 12
const PS_SOLID = 0
const PS_DASH = 1
const PS_DOT = 2
const PS_DASHDOT = 3
const PS_DASHDOTDOT = 4
const PS_NULL = 5
const PS_INSIDEFRAME = 6
const PS_USERSTYLE = 7
const PS_ALTERNATE = 8
const PS_STYLE_MASK = &h0000000F
const PS_ENDCAP_ROUND = &h000000000
const PS_ENDCAP_SQUARE = &h00000100
const PS_ENDCAP_FLAT = &h00000200
const PS_ENDCAP_MASK = &h00000F00
const PS_JOIN_ROUND = &h000000000
const PS_JOIN_BEVEL = &h00001000
const PS_JOIN_MITER = &h00002000
const PS_JOIN_MASK = &h0000F000
const PS_COSMETIC = &h000000000
const PS_GEOMETRIC = &h00010000
const PS_TYPE_MASK = &h000F0000
const AD_COUNTERCLOCKWISE = 1
const AD_CLOCKWISE = 2
const DRIVERVERSION = 0
const TECHNOLOGY = 2
const HORZSIZE = 4
const VERTSIZE = 6
const HORZRES = 8
const VERTRES = 10
const BITSPIXEL_ = 12
const PLANES_ = 14
const NUMBRUSHES = 16
const NUMPENS = 18
const NUMMARKERS = 20
const NUMFONTS = 22
const NUMCOLORS = 24
const PDEVICESIZE = 26
const CURVECAPS = 28
const LINECAPS = 30
const POLYGONALCAPS = 32
const TEXTCAPS = 34
const CLIPCAPS = 36
const RASTERCAPS = 38
const ASPECTX = 40
const ASPECTY = 42
const ASPECTXY = 44
const LOGPIXELSX = 88
const LOGPIXELSY = 90
const SIZEPALETTE = 104
const NUMRESERVED = 106
const COLORRES = 108
const PHYSICALWIDTH = 110
const PHYSICALHEIGHT = 111
const PHYSICALOFFSETX = 112
const PHYSICALOFFSETY = 113
const SCALINGFACTORX = 114
const SCALINGFACTORY = 115
const VREFRESH = 116
const DESKTOPVERTRES = 117
const DESKTOPHORZRES = 118
const BLTALIGNMENT = 119
const SHADEBLENDCAPS = 120
const COLORMGMTCAPS = 121
const DT_PLOTTER = 0
const DT_RASDISPLAY = 1
const DT_RASPRINTER = 2
const DT_RASCAMERA = 3
const DT_CHARSTREAM = 4
const DT_METAFILE = 5
const DT_DISPFILE = 6
const CC_NONE = 0
const CC_CIRCLES = 1
const CC_PIE = 2
const CC_CHORD = 4
const CC_ELLIPSES = 8
const CC_WIDE = 16
const CC_STYLED = 32
const CC_WIDESTYLED = 64
const CC_INTERIORS = 128
const CC_ROUNDRECT = 256
const LC_NONE = 0
const LC_POLYLINE = 2
const LC_MARKER = 4
const LC_POLYMARKER = 8
const LC_WIDE = 16
const LC_STYLED = 32
const LC_WIDESTYLED = 64
const LC_INTERIORS = 128
const PC_NONE = 0
const PC_POLYGON = 1
const PC_RECTANGLE = 2
const PC_WINDPOLYGON = 4
const PC_TRAPEZOID = 4
const PC_SCANLINE = 8
const PC_WIDE = 16
const PC_STYLED = 32
const PC_WIDESTYLED = 64
const PC_INTERIORS = 128
const PC_POLYPOLYGON = 256
const PC_PATHS = 512
const CP_NONE = 0
const CP_RECTANGLE = 1
const CP_REGION = 2
const TC_OP_CHARACTER = &h00000001
const TC_OP_STROKE = &h00000002
const TC_CP_STROKE = &h00000004
const TC_CR_90 = &h00000008
const TC_CR_ANY = &h00000010
const TC_SF_X_YINDEP = &h00000020
const TC_SA_DOUBLE = &h00000040
const TC_SA_INTEGER = &h00000080
const TC_SA_CONTIN = &h00000100
const TC_EA_DOUBLE = &h00000200
const TC_IA_ABLE = &h00000400
const TC_UA_ABLE = &h00000800
const TC_SO_ABLE = &h00001000
const TC_RA_ABLE = &h00002000
const TC_VA_ABLE = &h00004000
const TC_RESERVED = &h00008000
const TC_SCROLLBLT = &h00010000
const RC_BITBLT = 1
const RC_BANDING = 2
const RC_SCALING = 4
const RC_BITMAP64 = 8
const RC_GDI20_OUTPUT = &h0010
const RC_GDI20_STATE = &h0020
const RC_SAVEBITMAP = &h0040
const RC_DI_BITMAP = &h0080
const RC_PALETTE = &h0100
const RC_DIBTODEV = &h0200
const RC_BIGFONT = &h0400
const RC_STRETCHBLT = &h0800
const RC_FLOODFILL = &h1000
const RC_STRETCHDIB = &h2000
const RC_OP_DX_OUTPUT = &h4000
const RC_DEVBITS = &h8000
const SB_NONE = &h000000000
const SB_CONST_ALPHA = &h00000001
const SB_PIXEL_ALPHA = &h00000002
const SB_PREMULT_ALPHA = &h00000004
const SB_GRAD_RECT = &h00000010
const SB_GRAD_TRI = &h00000020
const CM_NONE = &h000000000
const CM_DEVICE_ICM = &h00000001
const CM_GAMMA_RAMP = &h00000002
const CM_CMYK_COLOR = &h00000004
const DIB_RGB_COLORS = 0
const DIB_PAL_COLORS = 1
const SYSPAL_ERROR = 0
const SYSPAL_STATIC = 1
const SYSPAL_NOSTATIC = 2
const SYSPAL_NOSTATIC256 = 3
const CBM_INIT = &h04
const FLOODFILLBORDER = 0
const FLOODFILLSURFACE = 1
const CCHDEVICENAME = 32
const CCHFORMNAME = 32

type _devicemodeA
 dmDeviceName as zstring * 32
 dmSpecVersion as WORD
 dmDriverVersion as WORD
 dmSize as WORD
 dmDriverExtra as WORD
 dmFields as DWORD

 union
 type
 dmOrientation as short
 dmPaperSize as short
 dmPaperLength as short
 dmPaperWidth as short
 dmScale as short
 dmCopies as short
 dmDefaultSource as short
 dmPrintQuality as short
 end type

 type
 dmPosition as POINTL
 dmDisplayOrientation as DWORD
 dmDisplayFixedOutput as DWORD
 end type
 end union

 dmColor as short
 dmDuplex as short
 dmYResolution as short
 dmTTOption as short
 dmCollate as short
 dmFormName as zstring * 32
 dmLogPixels as WORD
 dmBitsPerPel as DWORD
 dmPelsWidth as DWORD
 dmPelsHeight as DWORD

 union
 dmDisplayFlags as DWORD
 dmNup as DWORD
 end union

 dmDisplayFrequency as DWORD
 dmICMMethod as DWORD
 dmICMIntent as DWORD
 dmMediaType as DWORD
 dmDitherType as DWORD
 dmReserved1 as DWORD
 dmReserved2 as DWORD
 dmPanningWidth as DWORD
 dmPanningHeight as DWORD
end type

type DEVMODEA as _devicemodeA
type PDEVMODEA as _devicemodeA ptr
type NPDEVMODEA as _devicemodeA ptr
type LPDEVMODEA as _devicemodeA ptr

type _devicemodeW
 dmDeviceName as wstring * 32
 dmSpecVersion as WORD
 dmDriverVersion as WORD
 dmSize as WORD
 dmDriverExtra as WORD
 dmFields as DWORD

 union
 type
 dmOrientation as short
 dmPaperSize as short
 dmPaperLength as short
 dmPaperWidth as short
 dmScale as short
 dmCopies as short
 dmDefaultSource as short
 dmPrintQuality as short
 end type

 type
 dmPosition as POINTL
 dmDisplayOrientation as DWORD
 dmDisplayFixedOutput as DWORD
 end type
 end union

 dmColor as short
 dmDuplex as short
 dmYResolution as short
 dmTTOption as short
 dmCollate as short
 dmFormName as wstring * 32
 dmLogPixels as WORD
 dmBitsPerPel as DWORD
 dmPelsWidth as DWORD
 dmPelsHeight as DWORD

 union
 dmDisplayFlags as DWORD
 dmNup as DWORD
 end union

 dmDisplayFrequency as DWORD
 dmICMMethod as DWORD
 dmICMIntent as DWORD
 dmMediaType as DWORD
 dmDitherType as DWORD
 dmReserved1 as DWORD
 dmReserved2 as DWORD
 dmPanningWidth as DWORD
 dmPanningHeight as DWORD
end type

type DEVMODEW as _devicemodeW
type PDEVMODEW as _devicemodeW ptr
type NPDEVMODEW as _devicemodeW ptr
type LPDEVMODEW as _devicemodeW ptr

 type DEVMODE as DEVMODEA
 type PDEVMODE as PDEVMODEA
 type NPDEVMODE as NPDEVMODEA
 type LPDEVMODE as LPDEVMODEA

const DM_SPECVERSION = &h0401
const DM_ORIENTATION = &h00000001
const DM_PAPERSIZE = &h00000002
const DM_PAPERLENGTH = &h00000004
const DM_PAPERWIDTH = &h00000008
const DM_SCALE = &h00000010
const DM_POSITION = &h00000020
const DM_NUP = &h00000040
const DM_DISPLAYORIENTATION = &h00000080
const DM_COPIES = &h00000100
const DM_DEFAULTSOURCE = &h00000200
const DM_PRINTQUALITY = &h00000400
const DM_COLOR = &h00000800
const DM_DUPLEX = &h00001000
const DM_YRESOLUTION = &h00002000
const DM_TTOPTION = &h00004000
const DM_COLLATE = &h00008000
const DM_FORMNAME = &h00010000
const DM_LOGPIXELS = &h00020000
const DM_BITSPERPEL = &h00040000
const DM_PELSWIDTH = &h00080000
const DM_PELSHEIGHT = &h00100000
const DM_DISPLAYFLAGS = &h00200000
const DM_DISPLAYFREQUENCY = &h00400000
const DM_ICMMETHOD = &h00800000
const DM_ICMINTENT = &h01000000
const DM_MEDIATYPE = &h02000000
const DM_DITHERTYPE = &h04000000
const DM_PANNINGWIDTH = &h08000000
const DM_PANNINGHEIGHT = &h10000000
const DM_DISPLAYFIXEDOUTPUT = &h20000000
const DMORIENT_PORTRAIT = 1
const DMORIENT_LANDSCAPE = 2
const DMPAPER_LETTER = 1
const DMPAPER_FIRST = DMPAPER_LETTER
const DMPAPER_LETTERSMALL = 2
const DMPAPER_TABLOID = 3
const DMPAPER_LEDGER = 4
const DMPAPER_LEGAL = 5
const DMPAPER_STATEMENT = 6
const DMPAPER_EXECUTIVE = 7
const DMPAPER_A3 = 8
const DMPAPER_A4 = 9
const DMPAPER_A4SMALL = 10
const DMPAPER_A5 = 11
const DMPAPER_B4 = 12
const DMPAPER_B5 = 13
const DMPAPER_FOLIO = 14
const DMPAPER_QUARTO = 15
const DMPAPER_10X14 = 16
const DMPAPER_11X17 = 17
const DMPAPER_NOTE = 18
const DMPAPER_ENV_9 = 19
const DMPAPER_ENV_10 = 20
const DMPAPER_ENV_11 = 21
const DMPAPER_ENV_12 = 22
const DMPAPER_ENV_14 = 23
const DMPAPER_CSHEET = 24
const DMPAPER_DSHEET = 25
const DMPAPER_ESHEET = 26
const DMPAPER_ENV_DL = 27
const DMPAPER_ENV_C5 = 28
const DMPAPER_ENV_C3 = 29
const DMPAPER_ENV_C4 = 30
const DMPAPER_ENV_C6 = 31
const DMPAPER_ENV_C65 = 32
const DMPAPER_ENV_B4 = 33
const DMPAPER_ENV_B5 = 34
const DMPAPER_ENV_B6 = 35
const DMPAPER_ENV_ITALY = 36
const DMPAPER_ENV_MONARCH = 37
const DMPAPER_ENV_PERSONAL = 38
const DMPAPER_FANFOLD_US = 39
const DMPAPER_FANFOLD_STD_GERMAN = 40
const DMPAPER_FANFOLD_LGL_GERMAN = 41
const DMPAPER_ISO_B4 = 42
const DMPAPER_JAPANESE_POSTCARD = 43
const DMPAPER_9X11 = 44
const DMPAPER_10X11 = 45
const DMPAPER_15X11 = 46
const DMPAPER_ENV_INVITE = 47
const DMPAPER_RESERVED_48 = 48
const DMPAPER_RESERVED_49 = 49
const DMPAPER_LETTER_EXTRA = 50
const DMPAPER_LEGAL_EXTRA = 51
const DMPAPER_TABLOID_EXTRA = 52
const DMPAPER_A4_EXTRA = 53
const DMPAPER_LETTER_TRANSVERSE = 54
const DMPAPER_A4_TRANSVERSE = 55
const DMPAPER_LETTER_EXTRA_TRANSVERSE = 56
const DMPAPER_A_PLUS = 57
const DMPAPER_B_PLUS = 58
const DMPAPER_LETTER_PLUS = 59
const DMPAPER_A4_PLUS = 60
const DMPAPER_A5_TRANSVERSE = 61
const DMPAPER_B5_TRANSVERSE = 62
const DMPAPER_A3_EXTRA = 63
const DMPAPER_A5_EXTRA = 64
const DMPAPER_B5_EXTRA = 65
const DMPAPER_A2 = 66
const DMPAPER_A3_TRANSVERSE = 67
const DMPAPER_A3_EXTRA_TRANSVERSE = 68
const DMPAPER_DBL_JAPANESE_POSTCARD = 69
const DMPAPER_A6 = 70
const DMPAPER_JENV_KAKU2 = 71
const DMPAPER_JENV_KAKU3 = 72
const DMPAPER_JENV_CHOU3 = 73
const DMPAPER_JENV_CHOU4 = 74
const DMPAPER_LETTER_ROTATED = 75
const DMPAPER_A3_ROTATED = 76
const DMPAPER_A4_ROTATED = 77
const DMPAPER_A5_ROTATED = 78
const DMPAPER_B4_JIS_ROTATED = 79
const DMPAPER_B5_JIS_ROTATED = 80
const DMPAPER_JAPANESE_POSTCARD_ROTATED = 81
const DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED = 82
const DMPAPER_A6_ROTATED = 83
const DMPAPER_JENV_KAKU2_ROTATED = 84
const DMPAPER_JENV_KAKU3_ROTATED = 85
const DMPAPER_JENV_CHOU3_ROTATED = 86
const DMPAPER_JENV_CHOU4_ROTATED = 87
const DMPAPER_B6_JIS = 88
const DMPAPER_B6_JIS_ROTATED = 89
const DMPAPER_12X11 = 90
const DMPAPER_JENV_YOU4 = 91
const DMPAPER_JENV_YOU4_ROTATED = 92
const DMPAPER_P16K = 93
const DMPAPER_P32K = 94
const DMPAPER_P32KBIG = 95
const DMPAPER_PENV_1 = 96
const DMPAPER_PENV_2 = 97
const DMPAPER_PENV_3 = 98
const DMPAPER_PENV_4 = 99
const DMPAPER_PENV_5 = 100
const DMPAPER_PENV_6 = 101
const DMPAPER_PENV_7 = 102
const DMPAPER_PENV_8 = 103
const DMPAPER_PENV_9 = 104
const DMPAPER_PENV_10 = 105
const DMPAPER_P16K_ROTATED = 106
const DMPAPER_P32K_ROTATED = 107
const DMPAPER_P32KBIG_ROTATED = 108
const DMPAPER_PENV_1_ROTATED = 109
const DMPAPER_PENV_2_ROTATED = 110
const DMPAPER_PENV_3_ROTATED = 111
const DMPAPER_PENV_4_ROTATED = 112
const DMPAPER_PENV_5_ROTATED = 113
const DMPAPER_PENV_6_ROTATED = 114
const DMPAPER_PENV_7_ROTATED = 115
const DMPAPER_PENV_8_ROTATED = 116
const DMPAPER_PENV_9_ROTATED = 117
const DMPAPER_PENV_10_ROTATED = 118
const DMPAPER_LAST = DMPAPER_PENV_10_ROTATED
const DMPAPER_USER = 256
const DMBIN_UPPER = 1
const DMBIN_FIRST = DMBIN_UPPER
const DMBIN_ONLYONE = 1
const DMBIN_LOWER = 2
const DMBIN_MIDDLE = 3
const DMBIN_MANUAL = 4
const DMBIN_ENVELOPE = 5
const DMBIN_ENVMANUAL = 6
const DMBIN_AUTO = 7
const DMBIN_TRACTOR = 8
const DMBIN_SMALLFMT = 9
const DMBIN_LARGEFMT = 10
const DMBIN_LARGECAPACITY = 11
const DMBIN_CASSETTE = 14
const DMBIN_FORMSOURCE = 15
const DMBIN_LAST = DMBIN_FORMSOURCE
const DMBIN_USER = 256
const DMRES_DRAFT = -1
const DMRES_LOW = -2
const DMRES_MEDIUM = -3
const DMRES_HIGH = -4
const DMCOLOR_MONOCHROME = 1
const DMCOLOR_COLOR = 2
const DMDUP_SIMPLEX = 1
const DMDUP_VERTICAL = 2
const DMDUP_HORIZONTAL = 3
const DMTT_BITMAP = 1
const DMTT_DOWNLOAD = 2
const DMTT_SUBDEV = 3
const DMTT_DOWNLOAD_OUTLINE = 4
const DMCOLLATE_FALSE = 0
const DMCOLLATE_TRUE = 1
const DMDO_DEFAULT = 0
const DMDO_90 = 1
const DMDO_180 = 2
const DMDO_270 = 3
const DMDFO_DEFAULT = 0
const DMDFO_STRETCH = 1
const DMDFO_CENTER = 2
const DM_INTERLACED = &h00000002
const DMDISPLAYFLAGS_TEXTMODE = &h00000004
const DMNUP_SYSTEM = 1
const DMNUP_ONEUP = 2
const DMICMMETHOD_NONE = 1
const DMICMMETHOD_SYSTEM = 2
const DMICMMETHOD_DRIVER = 3
const DMICMMETHOD_DEVICE = 4
const DMICMMETHOD_USER = 256
const DMICM_SATURATE = 1
const DMICM_CONTRAST = 2
const DMICM_COLORIMETRIC = 3
const DMICM_ABS_COLORIMETRIC = 4
const DMICM_USER = 256
const DMMEDIA_STANDARD = 1
const DMMEDIA_TRANSPARENCY = 2
const DMMEDIA_GLOSSY = 3
const DMMEDIA_USER = 256
const DMDITHER_NONE = 1
const DMDITHER_COARSE = 2
const DMDITHER_FINE = 3
const DMDITHER_LINEART = 4
const DMDITHER_ERRORDIFFUSION = 5
const DMDITHER_RESERVED6 = 6
const DMDITHER_RESERVED7 = 7
const DMDITHER_RESERVED8 = 8
const DMDITHER_RESERVED9 = 9
const DMDITHER_GRAYSCALE = 10
const DMDITHER_USER = 256

type _DISPLAY_DEVICEA
 cb as DWORD
 DeviceName as zstring * 32
 DeviceString as zstring * 128
 StateFlags as DWORD
 DeviceID as zstring * 128
 DeviceKey as zstring * 128
end type

type DISPLAY_DEVICEA as _DISPLAY_DEVICEA
type PDISPLAY_DEVICEA as _DISPLAY_DEVICEA ptr
type LPDISPLAY_DEVICEA as _DISPLAY_DEVICEA ptr

type _DISPLAY_DEVICEW
 cb as DWORD
 DeviceName as wstring * 32
 DeviceString as wstring * 128
 StateFlags as DWORD
 DeviceID as wstring * 128
 DeviceKey as wstring * 128
end type

type DISPLAY_DEVICEW as _DISPLAY_DEVICEW
type PDISPLAY_DEVICEW as _DISPLAY_DEVICEW ptr
type LPDISPLAY_DEVICEW as _DISPLAY_DEVICEW ptr

 type DISPLAY_DEVICE as DISPLAY_DEVICEA
 type PDISPLAY_DEVICE as PDISPLAY_DEVICEA
 type LPDISPLAY_DEVICE as LPDISPLAY_DEVICEA

const DISPLAY_DEVICE_ATTACHED_TO_DESKTOP = &h00000001
const DISPLAY_DEVICE_MULTI_DRIVER = &h00000002
const DISPLAY_DEVICE_PRIMARY_DEVICE = &h00000004
const DISPLAY_DEVICE_MIRRORING_DRIVER = &h00000008
const DISPLAY_DEVICE_VGA_COMPATIBLE = &h00000010
const DISPLAY_DEVICE_REMOVABLE = &h00000020


const DISPLAY_DEVICE_TS_COMPATIBLE = &h00200000


const DISPLAY_DEVICE_MODESPRUNED = &h08000000
const DISPLAY_DEVICE_REMOTE = &h04000000
const DISPLAY_DEVICE_DISCONNECT = &h02000000
const DISPLAY_DEVICE_ACTIVE = &h00000001
const DISPLAY_DEVICE_ATTACHED = &h00000002


const RDH_RECTANGLES = 1

type _RGNDATAHEADER
 dwSize as DWORD
 iType as DWORD
 nCount as DWORD
 nRgnSize as DWORD
 rcBound as RECT
end type

type RGNDATAHEADER as _RGNDATAHEADER
type PRGNDATAHEADER as _RGNDATAHEADER ptr

type _RGNDATA
 rdh as RGNDATAHEADER
 Buffer as zstring * 1
end type

type RGNDATA as _RGNDATA
type PRGNDATA as _RGNDATA ptr
type NPRGNDATA as _RGNDATA ptr
type LPRGNDATA as _RGNDATA ptr
const SYSRGN = 4

type _ABC
 abcA as long
 abcB as UINT
 abcC as long
end type

type ABC as _ABC
type PABC as _ABC ptr
type NPABC as _ABC ptr
type LPABC as _ABC ptr

type _ABCFLOAT
 abcfA as FLOAT
 abcfB as FLOAT
 abcfC as FLOAT
end type

type ABCFLOAT as _ABCFLOAT
type PABCFLOAT as _ABCFLOAT ptr
type NPABCFLOAT as _ABCFLOAT ptr
type LPABCFLOAT as _ABCFLOAT ptr

type _OUTLINETEXTMETRICA
 otmSize as UINT
 otmTextMetrics as TEXTMETRICA
 otmFiller as UBYTE
 otmPanoseNumber as PANOSE
 otmfsSelection as UINT
 otmfsType as UINT
 otmsCharSlopeRise as long
 otmsCharSlopeRun as long
 otmItalicAngle as long
 otmEMSquare as UINT
 otmAscent as long
 otmDescent as long
 otmLineGap as UINT
 otmsCapEmHeight as UINT
 otmsXHeight as UINT
 otmrcFontBox as RECT
 otmMacAscent as long
 otmMacDescent as long
 otmMacLineGap as UINT
 otmusMinimumPPEM as UINT
 otmptSubscriptSize as POINT
 otmptSubscriptOffset as POINT
 otmptSuperscriptSize as POINT
 otmptSuperscriptOffset as POINT
 otmsStrikeoutSize as UINT
 otmsStrikeoutPosition as long
 otmsUnderscoreSize as long
 otmsUnderscorePosition as long
 otmpFamilyName as PSTR
 otmpFaceName as PSTR
 otmpStyleName as PSTR
 otmpFullName as PSTR
end type

type OUTLINETEXTMETRICA as _OUTLINETEXTMETRICA
type POUTLINETEXTMETRICA as _OUTLINETEXTMETRICA ptr
type NPOUTLINETEXTMETRICA as _OUTLINETEXTMETRICA ptr
type LPOUTLINETEXTMETRICA as _OUTLINETEXTMETRICA ptr

type _OUTLINETEXTMETRICW
 otmSize as UINT
 otmTextMetrics as TEXTMETRICW
 otmFiller as UBYTE
 otmPanoseNumber as PANOSE
 otmfsSelection as UINT
 otmfsType as UINT
 otmsCharSlopeRise as long
 otmsCharSlopeRun as long
 otmItalicAngle as long
 otmEMSquare as UINT
 otmAscent as long
 otmDescent as long
 otmLineGap as UINT
 otmsCapEmHeight as UINT
 otmsXHeight as UINT
 otmrcFontBox as RECT
 otmMacAscent as long
 otmMacDescent as long
 otmMacLineGap as UINT
 otmusMinimumPPEM as UINT
 otmptSubscriptSize as POINT
 otmptSubscriptOffset as POINT
 otmptSuperscriptSize as POINT
 otmptSuperscriptOffset as POINT
 otmsStrikeoutSize as UINT
 otmsStrikeoutPosition as long
 otmsUnderscoreSize as long
 otmsUnderscorePosition as long
 otmpFamilyName as PSTR
 otmpFaceName as PSTR
 otmpStyleName as PSTR
 otmpFullName as PSTR
end type

type OUTLINETEXTMETRICW as _OUTLINETEXTMETRICW
type POUTLINETEXTMETRICW as _OUTLINETEXTMETRICW ptr
type NPOUTLINETEXTMETRICW as _OUTLINETEXTMETRICW ptr
type LPOUTLINETEXTMETRICW as _OUTLINETEXTMETRICW ptr

 type OUTLINETEXTMETRIC as OUTLINETEXTMETRICA
 type POUTLINETEXTMETRIC as POUTLINETEXTMETRICA
 type NPOUTLINETEXTMETRIC as NPOUTLINETEXTMETRICA
 type LPOUTLINETEXTMETRIC as LPOUTLINETEXTMETRICA

type tagPOLYTEXTA
 x as long
 y as long
 n as UINT
 lpstr as LPCSTR
 uiFlags as UINT
 rcl as RECT
 pdx as long ptr
end type

type POLYTEXTA as tagPOLYTEXTA
type PPOLYTEXTA as tagPOLYTEXTA ptr
type NPPOLYTEXTA as tagPOLYTEXTA ptr
type LPPOLYTEXTA as tagPOLYTEXTA ptr

type tagPOLYTEXTW
 x as long
 y as long
 n as UINT
 lpstr as LPCWSTR
 uiFlags as UINT
 rcl as RECT
 pdx as long ptr
end type

type POLYTEXTW as tagPOLYTEXTW
type PPOLYTEXTW as tagPOLYTEXTW ptr
type NPPOLYTEXTW as tagPOLYTEXTW ptr
type LPPOLYTEXTW as tagPOLYTEXTW ptr

 type POLYTEXT as POLYTEXTA
 type PPOLYTEXT as PPOLYTEXTA
 type NPPOLYTEXT as NPPOLYTEXTA
 type LPPOLYTEXT as LPPOLYTEXTA

type _FIXED
 fract as WORD
 value as short
end type

type FIXED as _FIXED

type _MAT2
 eM11 as FIXED
 eM12 as FIXED
 eM21 as FIXED
 eM22 as FIXED
end type

type MAT2 as _MAT2
type LPMAT2 as _MAT2 ptr

type _GLYPHMETRICS
 gmBlackBoxX as UINT
 gmBlackBoxY as UINT
 gmptGlyphOrigin as POINT
 gmCellIncX as short
 gmCellIncY as short
end type

type GLYPHMETRICS as _GLYPHMETRICS
type LPGLYPHMETRICS as _GLYPHMETRICS ptr
const GGO_METRICS = 0
const GGO_BITMAP = 1
const GGO_NATIVE = 2
const GGO_BEZIER = 3
const GGO_GRAY2_BITMAP = 4
const GGO_GRAY4_BITMAP = 5
const GGO_GRAY8_BITMAP = 6
const GGO_GLYPH_INDEX = &h0080
const GGO_UNHINTED = &h0100
const TT_POLYGON_TYPE = 24
const TT_PRIM_LINE = 1
const TT_PRIM_QSPLINE = 2
const TT_PRIM_CSPLINE = 3

type tagPOINTFX
 x as FIXED
 y as FIXED
end type

type POINTFX as tagPOINTFX
type LPPOINTFX as tagPOINTFX ptr

type tagTTPOLYCURVE
 wType as WORD
 cpfx as WORD
 apfx(0 to 0) as POINTFX
end type

type TTPOLYCURVE as tagTTPOLYCURVE
type LPTTPOLYCURVE as tagTTPOLYCURVE ptr

type tagTTPOLYGONHEADER
 cb as DWORD
 dwType as DWORD
 pfxStart as POINTFX
end type

type TTPOLYGONHEADER as tagTTPOLYGONHEADER
type LPTTPOLYGONHEADER as tagTTPOLYGONHEADER ptr
const GCP_DBCS = &h0001
const GCP_REORDER = &h0002
const GCP_USEKERNING = &h0008
const GCP_GLYPHSHAPE = &h0010
const GCP_LIGATE = &h0020
const GCP_DIACRITIC = &h0100
const GCP_KASHIDA = &h0400
const GCP_ERROR = &h8000
const FLI_MASK = &h103B
const GCP_JUSTIFY = &h00010000
const FLI_GLYPHS = &h00040000
const GCP_CLASSIN = &h00080000
const GCP_MAXEXTENT = &h00100000
const GCP_JUSTIFYIN = &h00200000
const GCP_DISPLAYZWG = &h00400000
const GCP_SYMSWAPOFF = &h00800000
const GCP_NUMERICOVERRIDE = &h01000000
const GCP_NEUTRALOVERRIDE = &h02000000
const GCP_NUMERICSLATIN = &h04000000
const GCP_NUMERICSLOCAL = &h08000000
const GCPCLASS_LATIN = 1
const GCPCLASS_HEBREW = 2
const GCPCLASS_ARABIC = 2
const GCPCLASS_NEUTRAL = 3
const GCPCLASS_LOCALNUMBER = 4
const GCPCLASS_LATINNUMBER = 5
const GCPCLASS_LATINNUMERICTERMINATOR = 6
const GCPCLASS_LATINNUMERICSEPARATOR = 7
const GCPCLASS_NUMERICSEPARATOR = 8
const GCPCLASS_PREBOUNDLTR = &h80
const GCPCLASS_PREBOUNDRTL = &h40
const GCPCLASS_POSTBOUNDLTR = &h20
const GCPCLASS_POSTBOUNDRTL = &h10
const GCPGLYPH_LINKBEFORE = &h8000
const GCPGLYPH_LINKAFTER = &h4000

type tagGCP_RESULTSA
 lStructSize as DWORD
 lpOutString as LPSTR
 lpOrder as UINT ptr
 lpDx as long ptr
 lpCaretPos as long ptr
 lpClass as LPSTR
 lpGlyphs as LPWSTR
 nGlyphs as UINT
 nMaxFit as long
end type

type GCP_RESULTSA as tagGCP_RESULTSA
type LPGCP_RESULTSA as tagGCP_RESULTSA ptr

type tagGCP_RESULTSW
 lStructSize as DWORD
 lpOutString as LPWSTR
 lpOrder as UINT ptr
 lpDx as long ptr
 lpCaretPos as long ptr
 lpClass as LPSTR
 lpGlyphs as LPWSTR
 nGlyphs as UINT
 nMaxFit as long
end type

type GCP_RESULTSW as tagGCP_RESULTSW
type LPGCP_RESULTSW as tagGCP_RESULTSW ptr

 type GCP_RESULTS as GCP_RESULTSA
 type LPGCP_RESULTS as LPGCP_RESULTSA

type _RASTERIZER_STATUS
 nSize as short
 wFlags as short
 nLanguageID as short
end type

type RASTERIZER_STATUS as _RASTERIZER_STATUS
type LPRASTERIZER_STATUS as _RASTERIZER_STATUS ptr
const TT_AVAILABLE = &h0001
const TT_ENABLED = &h0002

type tagPIXELFORMATDESCRIPTOR
 nSize as WORD
 nVersion as WORD
 dwFlags as DWORD
 iPixelType as UBYTE
 cColorBits as UBYTE
 cRedBits as UBYTE
 cRedShift as UBYTE
 cGreenBits as UBYTE
 cGreenShift as UBYTE
 cBlueBits as UBYTE
 cBlueShift as UBYTE
 cAlphaBits as UBYTE
 cAlphaShift as UBYTE
 cAccumBits as UBYTE
 cAccumRedBits as UBYTE
 cAccumGreenBits as UBYTE
 cAccumBlueBits as UBYTE
 cAccumAlphaBits as UBYTE
 cDepthBits as UBYTE
 cStencilBits as UBYTE
 cAuxBuffers as UBYTE
 iLayerType as UBYTE
 bReserved as UBYTE
 dwLayerMask as DWORD
 dwVisibleMask as DWORD
 dwDamageMask as DWORD
end type

type PIXELFORMATDESCRIPTOR as tagPIXELFORMATDESCRIPTOR
type PPIXELFORMATDESCRIPTOR as tagPIXELFORMATDESCRIPTOR ptr
type LPPIXELFORMATDESCRIPTOR as tagPIXELFORMATDESCRIPTOR ptr

const PFD_TYPE_RGBA = 0
const PFD_TYPE_COLORINDEX = 1
const PFD_MAIN_PLANE = 0
const PFD_OVERLAY_PLANE = 1
const PFD_UNDERLAY_PLANE = -1
const PFD_DOUBLEBUFFER = &h00000001
const PFD_STEREO = &h00000002
const PFD_DRAW_TO_WINDOW = &h00000004
const PFD_DRAW_TO_BITMAP = &h00000008
const PFD_SUPPORT_GDI = &h00000010
const PFD_SUPPORT_OPENGL = &h00000020
const PFD_GENERIC_FORMAT = &h00000040
const PFD_NEED_PALETTE = &h00000080
const PFD_NEED_SYSTEM_PALETTE = &h00000100
const PFD_SWAP_EXCHANGE = &h00000200
const PFD_SWAP_COPY = &h00000400
const PFD_SWAP_LAYER_BUFFERS = &h00000800
const PFD_GENERIC_ACCELERATED = &h00001000
const PFD_SUPPORT_DIRECTDRAW = &h00002000
const PFD_DIRECT3D_ACCELERATED = &h00004000
const PFD_SUPPORT_COMPOSITION = &h00008000
const PFD_DEPTH_DONTCARE = &h20000000
const PFD_DOUBLEBUFFER_DONTCARE = &h40000000
const PFD_STEREO_DONTCARE = &h80000000
type OLDFONTENUMPROCA as function(byval as const LOGFONTA ptr, byval as const TEXTMETRICA ptr, byval as DWORD, byval as LPARAM) as long
type OLDFONTENUMPROCW as function(byval as const LOGFONTW ptr, byval as const TEXTMETRICW ptr, byval as DWORD, byval as LPARAM) as long

 type OLDFONTENUMPROC as OLDFONTENUMPROCA

type FONTENUMPROCA as OLDFONTENUMPROCA
type FONTENUMPROCW as OLDFONTENUMPROCW

 type FONTENUMPROC as FONTENUMPROCA

type GOBJENUMPROC as function(byval as LPVOID, byval as LPARAM) as long
type LINEDDAPROC as sub(byval as long, byval as long, byval as LPARAM)
declare function AddFontResourceA(byval as LPCSTR) as long

 declare function AddFontResource alias "AddFontResourceA"(byval as LPCSTR) as long

declare function AddFontResourceW(byval as LPCWSTR) as long


declare function AnimatePalette(byval hPal as HPALETTE, byval iStartIndex as UINT, byval cEntries as UINT, byval ppe as const PALETTEENTRY ptr) as WINBOOL
declare function Arc(byval hdc as HDC, byval x1 as long, byval y1 as long, byval x2 as long, byval y2 as long, byval x3 as long, byval y3 as long, byval x4 as long, byval y4 as long) as WINBOOL
declare function BitBlt(byval hdc as HDC, byval x as long, byval y as long, byval cx as long, byval cy as long, byval hdcSrc as HDC, byval x1 as long, byval y1 as long, byval rop as DWORD) as WINBOOL
declare function CancelDC(byval hdc as HDC) as WINBOOL
declare function Chord(byval hdc as HDC, byval x1 as long, byval y1 as long, byval x2 as long, byval y2 as long, byval x3 as long, byval y3 as long, byval x4 as long, byval y4 as long) as WINBOOL
declare function ChoosePixelFormat(byval hdc as HDC, byval ppfd as const PIXELFORMATDESCRIPTOR ptr) as long
declare function CloseMetaFile(byval hdc as HDC) as HMETAFILE
declare function CombineRgn(byval hrgnDst as HRGN, byval hrgnSrc1 as HRGN, byval hrgnSrc2 as HRGN, byval iMode as long) as long
declare function CopyMetaFileA(byval as HMETAFILE, byval as LPCSTR) as HMETAFILE

 declare function CopyMetaFile alias "CopyMetaFileA"(byval as HMETAFILE, byval as LPCSTR) as HMETAFILE

declare function CopyMetaFileW(byval as HMETAFILE, byval as LPCWSTR) as HMETAFILE


declare function CreateBitmap(byval nWidth as long, byval nHeight as long, byval nPlanes as UINT, byval nBitCount as UINT, byval lpBits as const any ptr) as HBITMAP
declare function CreateBitmapIndirect(byval pbm as const BITMAP ptr) as HBITMAP
declare function CreateBrushIndirect(byval plbrush as const LOGBRUSH ptr) as HBRUSH
declare function CreateCompatibleBitmap(byval hdc as HDC, byval cx as long, byval cy as long) as HBITMAP
declare function CreateDiscardableBitmap(byval hdc as HDC, byval cx as long, byval cy as long) as HBITMAP
declare function CreateCompatibleDC(byval hdc as HDC) as HDC
declare function CreateDCA(byval pwszDriver as LPCSTR, byval pwszDevice as LPCSTR, byval pszPort as LPCSTR, byval pdm as const DEVMODEA ptr) as HDC

 declare function CreateDC alias "CreateDCA"(byval pwszDriver as LPCSTR, byval pwszDevice as LPCSTR, byval pszPort as LPCSTR, byval pdm as const DEVMODEA ptr) as HDC

declare function CreateDCW(byval pwszDriver as LPCWSTR, byval pwszDevice as LPCWSTR, byval pszPort as LPCWSTR, byval pdm as const DEVMODEW ptr) as HDC


declare function CreateDIBitmap(byval hdc as HDC, byval pbmih as const BITMAPINFOHEADER ptr, byval flInit as DWORD, byval pjBits as const any ptr, byval pbmi as const BITMAPINFO ptr, byval iUsage as UINT) as HBITMAP
declare function CreateDIBPatternBrush(byval h as HGLOBAL, byval iUsage as UINT) as HBRUSH
declare function CreateDIBPatternBrushPt(byval lpPackedDIB as const any ptr, byval iUsage as UINT) as HBRUSH
declare function CreateEllipticRgn(byval x1 as long, byval y1 as long, byval x2 as long, byval y2 as long) as HRGN
declare function CreateEllipticRgnIndirect(byval lprect as const RECT ptr) as HRGN
declare function CreateFontIndirectA(byval lplf as const LOGFONTA ptr) as HFONT

 declare function CreateFontIndirect alias "CreateFontIndirectA"(byval lplf as const LOGFONTA ptr) as HFONT

declare function CreateFontIndirectW(byval lplf as const LOGFONTW ptr) as HFONT


declare function CreateFontA(byval cHeight as long, byval cWidth as long, byval cEscapement as long, byval cOrientation as long, byval cWeight as long, byval bItalic as DWORD, byval bUnderline as DWORD, byval bStrikeOut as DWORD, byval iCharSet as DWORD, byval iOutPrecision as DWORD, byval iClipPrecision as DWORD, byval iQuality as DWORD, byval iPitchAndFamily as DWORD, byval pszFaceName as LPCSTR) as HFONT

 declare function CreateFont alias "CreateFontA"(byval cHeight as long, byval cWidth as long, byval cEscapement as long, byval cOrientation as long, byval cWeight as long, byval bItalic as DWORD, byval bUnderline as DWORD, byval bStrikeOut as DWORD, byval iCharSet as DWORD, byval iOutPrecision as DWORD, byval iClipPrecision as DWORD, byval iQuality as DWORD, byval iPitchAndFamily as DWORD, byval pszFaceName as LPCSTR) as HFONT

declare function CreateFontW(byval cHeight as long, byval cWidth as long, byval cEscapement as long, byval cOrientation as long, byval cWeight as long, byval bItalic as DWORD, byval bUnderline as DWORD, byval bStrikeOut as DWORD, byval iCharSet as DWORD, byval iOutPrecision as DWORD, byval iClipPrecision as DWORD, byval iQuality as DWORD, byval iPitchAndFamily as DWORD, byval pszFaceName as LPCWSTR) as HFONT


declare function CreateHatchBrush(byval iHatch as long, byval color as COLORREF) as HBRUSH
declare function CreateICA(byval pszDriver as LPCSTR, byval pszDevice as LPCSTR, byval pszPort as LPCSTR, byval pdm as const DEVMODEA ptr) as HDC

 declare function CreateIC alias "CreateICA"(byval pszDriver as LPCSTR, byval pszDevice as LPCSTR, byval pszPort as LPCSTR, byval pdm as const DEVMODEA ptr) as HDC

declare function CreateICW(byval pszDriver as LPCWSTR, byval pszDevice as LPCWSTR, byval pszPort as LPCWSTR, byval pdm as const DEVMODEW ptr) as HDC


declare function CreateMetaFileA(byval pszFile as LPCSTR) as HDC

 declare function CreateMetaFile alias "CreateMetaFileA"(byval pszFile as LPCSTR) as HDC

declare function CreateMetaFileW(byval pszFile as LPCWSTR) as HDC


declare function CreatePalette(byval plpal as const LOGPALETTE ptr) as HPALETTE
declare function CreatePen(byval iStyle as long, byval cWidth as long, byval color as COLORREF) as HPEN
declare function CreatePenIndirect(byval plpen as const LOGPEN ptr) as HPEN
declare function CreatePolyPolygonRgn(byval pptl as const POINT ptr, byval pc as const INT_ ptr, byval cPoly as long, byval iMode as long) as HRGN
declare function CreatePatternBrush(byval hbm as HBITMAP) as HBRUSH
declare function CreateRectRgn(byval x1 as long, byval y1 as long, byval x2 as long, byval y2 as long) as HRGN
declare function CreateRectRgnIndirect(byval lprect as const RECT ptr) as HRGN
declare function CreateRoundRectRgn(byval x1 as long, byval y1 as long, byval x2 as long, byval y2 as long, byval w as long, byval h as long) as HRGN
declare function CreateScalableFontResourceA(byval fdwHidden as DWORD, byval lpszFont as LPCSTR, byval lpszFile as LPCSTR, byval lpszPath as LPCSTR) as WINBOOL

 declare function CreateScalableFontResource alias "CreateScalableFontResourceA"(byval fdwHidden as DWORD, byval lpszFont as LPCSTR, byval lpszFile as LPCSTR, byval lpszPath as LPCSTR) as WINBOOL

declare function CreateScalableFontResourceW(byval fdwHidden as DWORD, byval lpszFont as LPCWSTR, byval lpszFile as LPCWSTR, byval lpszPath as LPCWSTR) as WINBOOL


declare function CreateSolidBrush(byval color as COLORREF) as HBRUSH
declare function DeleteDC(byval hdc as HDC) as WINBOOL
declare function DeleteMetaFile(byval hmf as HMETAFILE) as WINBOOL
declare function DeleteObject(byval ho as HGDIOBJ) as WINBOOL
declare function DescribePixelFormat(byval hdc as HDC, byval iPixelFormat as long, byval nBytes as UINT, byval ppfd as LPPIXELFORMATDESCRIPTOR) as long
type LPFNDEVMODE as function(byval as HWND, byval as HMODULE, byval as LPDEVMODE, byval as LPSTR, byval as LPSTR, byval as LPDEVMODE, byval as LPSTR, byval as UINT) as UINT
type LPFNDEVCAPS as function(byval as LPSTR, byval as LPSTR, byval as UINT, byval as LPSTR, byval as LPDEVMODE) as DWORD

const DM_UPDATE = 1
const DM_COPY = 2
const DM_PROMPT = 4
const DM_MODIFY = 8
const DC_FIELDS = 1
const DC_PAPERS = 2
const DC_PAPERSIZE = 3
const DC_MINEXTENT = 4
const DC_MAXEXTENT = 5
const DC_BINS = 6
const DC_DUPLEX = 7
const DC_SIZE = 8
const DC_EXTRA = 9
const DC_VERSION = 10
const DC_DRIVER = 11
const DC_BINNAMES = 12
const DC_ENUMRESOLUTIONS = 13
const DC_FILEDEPENDENCIES = 14
const DC_TRUETYPE = 15
const DC_PAPERNAMES = 16
const DC_ORIENTATION = 17
const DC_COPIES = 18
const DC_BINADJUST = 19
const DC_EMF_COMPLIANT = 20
const DC_DATATYPE_PRODUCED = 21
const DC_COLLATE = 22
const DC_MANUFACTURER = 23
const DC_MODEL = 24
const DC_PERSONALITY = 25
const DC_PRINTRATE = 26
const DC_PRINTRATEUNIT = 27
const PRINTRATEUNIT_PPM = 1
const PRINTRATEUNIT_CPS = 2
const PRINTRATEUNIT_LPM = 3
const PRINTRATEUNIT_IPM = 4
const DC_PRINTERMEM = 28
const DC_MEDIAREADY = 29
const DC_STAPLE = 30
const DC_PRINTRATEPPM = 31
const DC_COLORDEVICE = 32
const DC_NUP = 33
const DC_MEDIATYPENAMES = 34
const DC_MEDIATYPES = 35
const DCTT_BITMAP = &h0000001
const DCTT_DOWNLOAD = &h0000002
const DCTT_SUBDEV = &h0000004
const DCTT_DOWNLOAD_OUTLINE = &h0000008
const DCBA_FACEUPNONE = &h00000
const DCBA_FACEUPCENTER = &h0001
const DCBA_FACEUPLEFT = &h0002
const DCBA_FACEUPRIGHT = &h0003
const DCBA_FACEDOWNNONE = &h0100
const DCBA_FACEDOWNCENTER = &h0101
const DCBA_FACEDOWNLEFT = &h0102
const DCBA_FACEDOWNRIGHT = &h0103
declare function DeviceCapabilitiesA(byval pDevice as LPCSTR, byval pPort as LPCSTR, byval fwCapability as WORD, byval pOutput as LPSTR, byval pDevMode as const DEVMODEA ptr) as long

 declare function DeviceCapabilities alias "DeviceCapabilitiesA"(byval pDevice as LPCSTR, byval pPort as LPCSTR, byval fwCapability as WORD, byval pOutput as LPSTR, byval pDevMode as const DEVMODEA ptr) as long

declare function DeviceCapabilitiesW(byval pDevice as LPCWSTR, byval pPort as LPCWSTR, byval fwCapability as WORD, byval pOutput as LPWSTR, byval pDevMode as const DEVMODEW ptr) as long


declare function DrawEscape(byval hdc as HDC, byval iEscape as long, byval cjIn as long, byval lpIn as LPCSTR) as long
declare function Ellipse(byval hdc as HDC, byval left as long, byval top as long, byval right as long, byval bottom as long) as WINBOOL
declare function EnumFontFamiliesExA(byval hdc as HDC, byval lpLogfont as LPLOGFONTA, byval lpProc as FONTENUMPROCA, byval lParam as LPARAM, byval dwFlags as DWORD) as long

 declare function EnumFontFamiliesEx alias "EnumFontFamiliesExA"(byval hdc as HDC, byval lpLogfont as LPLOGFONTA, byval lpProc as FONTENUMPROCA, byval lParam as LPARAM, byval dwFlags as DWORD) as long

declare function EnumFontFamiliesExW(byval hdc as HDC, byval lpLogfont as LPLOGFONTW, byval lpProc as FONTENUMPROCW, byval lParam as LPARAM, byval dwFlags as DWORD) as long


declare function EnumFontFamiliesA(byval hdc as HDC, byval lpLogfont as LPCSTR, byval lpProc as FONTENUMPROCA, byval lParam as LPARAM) as long

 declare function EnumFontFamilies alias "EnumFontFamiliesA"(byval hdc as HDC, byval lpLogfont as LPCSTR, byval lpProc as FONTENUMPROCA, byval lParam as LPARAM) as long

declare function EnumFontFamiliesW(byval hdc as HDC, byval lpLogfont as LPCWSTR, byval lpProc as FONTENUMPROCW, byval lParam as LPARAM) as long


declare function EnumFontsA(byval hdc as HDC, byval lpLogfont as LPCSTR, byval lpProc as FONTENUMPROCA, byval lParam as LPARAM) as long

 declare function EnumFonts alias "EnumFontsA"(byval hdc as HDC, byval lpLogfont as LPCSTR, byval lpProc as FONTENUMPROCA, byval lParam as LPARAM) as long

declare function EnumFontsW(byval hdc as HDC, byval lpLogfont as LPCWSTR, byval lpProc as FONTENUMPROCW, byval lParam as LPARAM) as long


declare function EnumObjects(byval hdc as HDC, byval nType as long, byval lpFunc as GOBJENUMPROC, byval lParam as LPARAM) as long
declare function EqualRgn(byval hrgn1 as HRGN, byval hrgn2 as HRGN) as WINBOOL
declare function Escape(byval hdc as HDC, byval iEscape as long, byval cjIn as long, byval pvIn as LPCSTR, byval pvOut as LPVOID) as long
declare function ExtEscape(byval hdc as HDC, byval iEscape as long, byval cjInput as long, byval lpInData as LPCSTR, byval cjOutput as long, byval lpOutData as LPSTR) as long
declare function ExcludeClipRect(byval hdc as HDC, byval left as long, byval top as long, byval right as long, byval bottom as long) as long
declare function ExtCreateRegion(byval lpx as const XFORM ptr, byval nCount as DWORD, byval lpData as const RGNDATA ptr) as HRGN
declare function ExtFloodFill(byval hdc as HDC, byval x as long, byval y as long, byval color as COLORREF, byval type as UINT) as WINBOOL
declare function FillRgn(byval hdc as HDC, byval hrgn as HRGN, byval hbr as HBRUSH) as WINBOOL
declare function FloodFill(byval hdc as HDC, byval x as long, byval y as long, byval color as COLORREF) as WINBOOL
declare function FrameRgn(byval hdc as HDC, byval hrgn as HRGN, byval hbr as HBRUSH, byval w as long, byval h as long) as WINBOOL
declare function GetROP2(byval hdc as HDC) as long
declare function GetAspectRatioFilterEx(byval hdc as HDC, byval lpsize as LPSIZE) as WINBOOL
declare function GetBkColor(byval hdc as HDC) as COLORREF
declare function GetDCBrushColor(byval hdc as HDC) as COLORREF
declare function GetDCPenColor(byval hdc as HDC) as COLORREF
declare function GetBkMode(byval hdc as HDC) as long
declare function GetBitmapBits(byval hbit as HBITMAP, byval cb as LONG, byval lpvBits as LPVOID) as LONG
declare function GetBitmapDimensionEx(byval hbit as HBITMAP, byval lpsize as LPSIZE) as WINBOOL
declare function GetBoundsRect(byval hdc as HDC, byval lprect as LPRECT, byval flags as UINT) as UINT
declare function GetBrushOrgEx(byval hdc as HDC, byval lppt as LPPOINT) as WINBOOL
declare function GetCharWidthA(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as LPINT) as WINBOOL

 declare function GetCharWidth alias "GetCharWidthA"(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as LPINT) as WINBOOL

declare function GetCharWidthW(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as LPINT) as WINBOOL


declare function GetCharWidth32A(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as LPINT) as WINBOOL

 declare function GetCharWidth32 alias "GetCharWidth32A"(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as LPINT) as WINBOOL

declare function GetCharWidth32W(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as LPINT) as WINBOOL


declare function GetCharWidthFloatA(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as PFLOAT) as WINBOOL

 declare function GetCharWidthFloat alias "GetCharWidthFloatA"(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as PFLOAT) as WINBOOL

declare function GetCharWidthFloatW(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as PFLOAT) as WINBOOL


declare function GetCharABCWidthsA(byval hdc as HDC, byval wFirst as UINT, byval wLast as UINT, byval lpABC as LPABC) as WINBOOL

 declare function GetCharABCWidths alias "GetCharABCWidthsA"(byval hdc as HDC, byval wFirst as UINT, byval wLast as UINT, byval lpABC as LPABC) as WINBOOL

declare function GetCharABCWidthsW(byval hdc as HDC, byval wFirst as UINT, byval wLast as UINT, byval lpABC as LPABC) as WINBOOL


declare function GetCharABCWidthsFloatA(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpABC as LPABCFLOAT) as WINBOOL

 declare function GetCharABCWidthsFloat alias "GetCharABCWidthsFloatA"(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpABC as LPABCFLOAT) as WINBOOL

declare function GetCharABCWidthsFloatW(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpABC as LPABCFLOAT) as WINBOOL


declare function GetClipBox(byval hdc as HDC, byval lprect as LPRECT) as long
declare function GetClipRgn(byval hdc as HDC, byval hrgn as HRGN) as long
declare function GetMetaRgn(byval hdc as HDC, byval hrgn as HRGN) as long
declare function GetCurrentObject(byval hdc as HDC, byval type as UINT) as HGDIOBJ
declare function GetCurrentPositionEx(byval hdc as HDC, byval lppt as LPPOINT) as WINBOOL
declare function GetDeviceCaps(byval hdc as HDC, byval index as long) as long
declare function GetDIBits(byval hdc as HDC, byval hbm as HBITMAP, byval start as UINT, byval cLines as UINT, byval lpvBits as LPVOID, byval lpbmi as LPBITMAPINFO, byval usage as UINT) as long
declare function GetFontData(byval hdc as HDC, byval dwTable as DWORD, byval dwOffset as DWORD, byval pvBuffer as PVOID, byval cjBuffer as DWORD) as DWORD
declare function GetGlyphOutlineA(byval hdc as HDC, byval uChar as UINT, byval fuFormat as UINT, byval lpgm as LPGLYPHMETRICS, byval cjBuffer as DWORD, byval pvBuffer as LPVOID, byval lpmat2 as const MAT2 ptr) as DWORD

 declare function GetGlyphOutline alias "GetGlyphOutlineA"(byval hdc as HDC, byval uChar as UINT, byval fuFormat as UINT, byval lpgm as LPGLYPHMETRICS, byval cjBuffer as DWORD, byval pvBuffer as LPVOID, byval lpmat2 as const MAT2 ptr) as DWORD

declare function GetGlyphOutlineW(byval hdc as HDC, byval uChar as UINT, byval fuFormat as UINT, byval lpgm as LPGLYPHMETRICS, byval cjBuffer as DWORD, byval pvBuffer as LPVOID, byval lpmat2 as const MAT2 ptr) as DWORD


declare function GetGraphicsMode(byval hdc as HDC) as long
declare function GetMapMode(byval hdc as HDC) as long
declare function GetMetaFileBitsEx(byval hMF as HMETAFILE, byval cbBuffer as UINT, byval lpData as LPVOID) as UINT
declare function GetMetaFileA(byval lpName as LPCSTR) as HMETAFILE

 declare function GetMetaFile alias "GetMetaFileA"(byval lpName as LPCSTR) as HMETAFILE

declare function GetMetaFileW(byval lpName as LPCWSTR) as HMETAFILE


declare function GetNearestColor(byval hdc as HDC, byval color as COLORREF) as COLORREF
declare function GetNearestPaletteIndex(byval h as HPALETTE, byval color as COLORREF) as UINT
declare function GetObjectType(byval h as HGDIOBJ) as DWORD
declare function GetOutlineTextMetricsA(byval hdc as HDC, byval cjCopy as UINT, byval potm as LPOUTLINETEXTMETRICA) as UINT

 declare function GetOutlineTextMetrics alias "GetOutlineTextMetricsA"(byval hdc as HDC, byval cjCopy as UINT, byval potm as LPOUTLINETEXTMETRICA) as UINT

declare function GetOutlineTextMetricsW(byval hdc as HDC, byval cjCopy as UINT, byval potm as LPOUTLINETEXTMETRICW) as UINT


declare function GetPaletteEntries(byval hpal as HPALETTE, byval iStart as UINT, byval cEntries as UINT, byval pPalEntries as LPPALETTEENTRY) as UINT
declare function GetPixel(byval hdc as HDC, byval x as long, byval y as long) as COLORREF
declare function GetPixelFormat(byval hdc as HDC) as long
declare function GetPolyFillMode(byval hdc as HDC) as long
declare function GetRasterizerCaps(byval lpraststat as LPRASTERIZER_STATUS, byval cjBytes as UINT) as WINBOOL
declare function GetRandomRgn(byval hdc as HDC, byval hrgn as HRGN, byval i as INT_) as long
declare function GetRegionData(byval hrgn as HRGN, byval nCount as DWORD, byval lpRgnData as LPRGNDATA) as DWORD
declare function GetRgnBox(byval hrgn as HRGN, byval lprc as LPRECT) as long
declare function GetStockObject(byval i as long) as HGDIOBJ
declare function GetStretchBltMode(byval hdc as HDC) as long
declare function GetSystemPaletteEntries(byval hdc as HDC, byval iStart as UINT, byval cEntries as UINT, byval pPalEntries as LPPALETTEENTRY) as UINT
declare function GetSystemPaletteUse(byval hdc as HDC) as UINT
declare function GetTextCharacterExtra(byval hdc as HDC) as long
declare function GetTextAlign(byval hdc as HDC) as UINT
declare function GetTextColor(byval hdc as HDC) as COLORREF
declare function GetTextExtentPointA(byval hdc as HDC, byval lpString as LPCSTR, byval c as long, byval lpsz as LPSIZE) as WINBOOL

 declare function GetTextExtentPoint alias "GetTextExtentPointA"(byval hdc as HDC, byval lpString as LPCSTR, byval c as long, byval lpsz as LPSIZE) as WINBOOL

declare function GetTextExtentPointW(byval hdc as HDC, byval lpString as LPCWSTR, byval c as long, byval lpsz as LPSIZE) as WINBOOL


declare function GetTextExtentPoint32A(byval hdc as HDC, byval lpString as LPCSTR, byval c as long, byval psizl as LPSIZE) as WINBOOL

 declare function GetTextExtentPoint32 alias "GetTextExtentPoint32A"(byval hdc as HDC, byval lpString as LPCSTR, byval c as long, byval psizl as LPSIZE) as WINBOOL

declare function GetTextExtentPoint32W(byval hdc as HDC, byval lpString as LPCWSTR, byval c as long, byval psizl as LPSIZE) as WINBOOL


declare function GetTextExtentExPointA(byval hdc as HDC, byval lpszString as LPCSTR, byval cchString as long, byval nMaxExtent as long, byval lpnFit as LPINT, byval lpnDx as LPINT, byval lpSize as LPSIZE) as WINBOOL

 declare function GetTextExtentExPoint alias "GetTextExtentExPointA"(byval hdc as HDC, byval lpszString as LPCSTR, byval cchString as long, byval nMaxExtent as long, byval lpnFit as LPINT, byval lpnDx as LPINT, byval lpSize as LPSIZE) as WINBOOL

declare function GetTextExtentExPointW(byval hdc as HDC, byval lpszString as LPCWSTR, byval cchString as long, byval nMaxExtent as long, byval lpnFit as LPINT, byval lpnDx as LPINT, byval lpSize as LPSIZE) as WINBOOL


declare function GetTextCharset(byval hdc as HDC) as long
declare function GetTextCharsetInfo(byval hdc as HDC, byval lpSig as LPFONTSIGNATURE, byval dwFlags as DWORD) as long
declare function TranslateCharsetInfo(byval lpSrc as DWORD ptr, byval lpCs as LPCHARSETINFO, byval dwFlags as DWORD) as WINBOOL
declare function GetFontLanguageInfo(byval hdc as HDC) as DWORD
declare function GetCharacterPlacementA(byval hdc as HDC, byval lpString as LPCSTR, byval nCount as long, byval nMexExtent as long, byval lpResults as LPGCP_RESULTSA, byval dwFlags as DWORD) as DWORD

 declare function GetCharacterPlacement alias "GetCharacterPlacementA"(byval hdc as HDC, byval lpString as LPCSTR, byval nCount as long, byval nMexExtent as long, byval lpResults as LPGCP_RESULTSA, byval dwFlags as DWORD) as DWORD

declare function GetCharacterPlacementW(byval hdc as HDC, byval lpString as LPCWSTR, byval nCount as long, byval nMexExtent as long, byval lpResults as LPGCP_RESULTSW, byval dwFlags as DWORD) as DWORD


type tagWCRANGE
 wcLow as WCHAR
 cGlyphs as USHORT
end type

type WCRANGE as tagWCRANGE
type PWCRANGE as tagWCRANGE ptr
type LPWCRANGE as tagWCRANGE ptr

type tagGLYPHSET
 cbThis as DWORD
 flAccel as DWORD
 cGlyphsSupported as DWORD
 cRanges as DWORD
 ranges(0 to 0) as WCRANGE
end type

type GLYPHSET as tagGLYPHSET
type PGLYPHSET as tagGLYPHSET ptr
type LPGLYPHSET as tagGLYPHSET ptr
const GS_8BIT_INDICES = &h00000001
const GGI_MARK_NONEXISTING_GLYPHS = &h0001
declare function GetFontUnicodeRanges(byval hdc as HDC, byval lpgs as LPGLYPHSET) as DWORD
declare function GetGlyphIndicesA(byval hdc as HDC, byval lpstr as LPCSTR, byval c as long, byval pgi as LPWORD, byval fl as DWORD) as DWORD

 declare function GetGlyphIndices alias "GetGlyphIndicesA"(byval hdc as HDC, byval lpstr as LPCSTR, byval c as long, byval pgi as LPWORD, byval fl as DWORD) as DWORD

declare function GetGlyphIndicesW(byval hdc as HDC, byval lpstr as LPCWSTR, byval c as long, byval pgi as LPWORD, byval fl as DWORD) as DWORD


declare function GetTextExtentPointI(byval hdc as HDC, byval pgiIn as LPWORD, byval cgi as long, byval psize as LPSIZE) as WINBOOL
declare function GetTextExtentExPointI(byval hdc as HDC, byval lpwszString as LPWORD, byval cwchString as long, byval nMaxExtent as long, byval lpnFit as LPINT, byval lpnDx as LPINT, byval lpSize as LPSIZE) as WINBOOL
declare function GetCharWidthI(byval hdc as HDC, byval giFirst as UINT, byval cgi as UINT, byval pgi as LPWORD, byval piWidths as LPINT) as WINBOOL
declare function GetCharABCWidthsI(byval hdc as HDC, byval giFirst as UINT, byval cgi as UINT, byval pgi as LPWORD, byval pabc as LPABC) as WINBOOL

const MM_MAX_NUMAXES = 16

type tagDESIGNVECTOR
 dvReserved as DWORD
 dvNumAxes as DWORD
 dvValues(0 to 15) as LONG
end type

type DESIGNVECTOR as tagDESIGNVECTOR
type PDESIGNVECTOR as tagDESIGNVECTOR ptr
type LPDESIGNVECTOR as tagDESIGNVECTOR ptr
declare function AddFontResourceExA(byval name as LPCSTR, byval fl as DWORD, byval res as PVOID) as long

 declare function AddFontResourceEx alias "AddFontResourceExA"(byval name as LPCSTR, byval fl as DWORD, byval res as PVOID) as long

declare function AddFontResourceExW(byval name as LPCWSTR, byval fl as DWORD, byval res as PVOID) as long


declare function RemoveFontResourceExA(byval name as LPCSTR, byval fl as DWORD, byval pdv as PVOID) as WINBOOL

 declare function RemoveFontResourceEx alias "RemoveFontResourceExA"(byval name as LPCSTR, byval fl as DWORD, byval pdv as PVOID) as WINBOOL

declare function RemoveFontResourceExW(byval name as LPCWSTR, byval fl as DWORD, byval pdv as PVOID) as WINBOOL


declare function AddFontMemResourceEx(byval pFileView as PVOID, byval cjSize as DWORD, byval pvResrved as PVOID, byval pNumFonts as DWORD ptr) as HANDLE
declare function RemoveFontMemResourceEx(byval h as HANDLE) as WINBOOL
const FR_PRIVATE = &h10
const FR_NOT_ENUM = &h20
const MM_MAX_AXES_NAMELEN = 16

type tagAXISINFOA
 axMinValue as LONG
 axMaxValue as LONG
 axAxisName as zstring * 16
end type

type AXISINFOA as tagAXISINFOA
type PAXISINFOA as tagAXISINFOA ptr
type LPAXISINFOA as tagAXISINFOA ptr

type tagAXISINFOW
 axMinValue as LONG
 axMaxValue as LONG
 axAxisName as wstring * 16
end type

type AXISINFOW as tagAXISINFOW
type PAXISINFOW as tagAXISINFOW ptr
type LPAXISINFOW as tagAXISINFOW ptr

 type AXISINFO as AXISINFOA
 type PAXISINFO as PAXISINFOA
 type LPAXISINFO as LPAXISINFOA

type tagAXESLISTA
 axlReserved as DWORD
 axlNumAxes as DWORD
 axlAxisInfo(0 to 15) as AXISINFOA
end type

type AXESLISTA as tagAXESLISTA
type PAXESLISTA as tagAXESLISTA ptr
type LPAXESLISTA as tagAXESLISTA ptr

type tagAXESLISTW
 axlReserved as DWORD
 axlNumAxes as DWORD
 axlAxisInfo(0 to 15) as AXISINFOW
end type

type AXESLISTW as tagAXESLISTW
type PAXESLISTW as tagAXESLISTW ptr
type LPAXESLISTW as tagAXESLISTW ptr

 type AXESLIST as AXESLISTA
 type PAXESLIST as PAXESLISTA
 type LPAXESLIST as LPAXESLISTA

type tagENUMLOGFONTEXDVA
 elfEnumLogfontEx as ENUMLOGFONTEXA
 elfDesignVector as DESIGNVECTOR
end type

type ENUMLOGFONTEXDVA as tagENUMLOGFONTEXDVA
type PENUMLOGFONTEXDVA as tagENUMLOGFONTEXDVA ptr
type LPENUMLOGFONTEXDVA as tagENUMLOGFONTEXDVA ptr

type tagENUMLOGFONTEXDVW
 elfEnumLogfontEx as ENUMLOGFONTEXW
 elfDesignVector as DESIGNVECTOR
end type

type ENUMLOGFONTEXDVW as tagENUMLOGFONTEXDVW
type PENUMLOGFONTEXDVW as tagENUMLOGFONTEXDVW ptr
type LPENUMLOGFONTEXDVW as tagENUMLOGFONTEXDVW ptr

 type ENUMLOGFONTEXDV as ENUMLOGFONTEXDVA
 type PENUMLOGFONTEXDV as PENUMLOGFONTEXDVA
 type LPENUMLOGFONTEXDV as LPENUMLOGFONTEXDVA

declare function CreateFontIndirectExA(byval as const ENUMLOGFONTEXDVA ptr) as HFONT

 declare function CreateFontIndirectEx alias "CreateFontIndirectExA"(byval as const ENUMLOGFONTEXDVA ptr) as HFONT

declare function CreateFontIndirectExW(byval as const ENUMLOGFONTEXDVW ptr) as HFONT


type tagENUMTEXTMETRICA
 etmNewTextMetricEx as NEWTEXTMETRICEXA
 etmAxesList as AXESLISTA
end type

type ENUMTEXTMETRICA as tagENUMTEXTMETRICA
type PENUMTEXTMETRICA as tagENUMTEXTMETRICA ptr
type LPENUMTEXTMETRICA as tagENUMTEXTMETRICA ptr

type tagENUMTEXTMETRICW
 etmNewTextMetricEx as NEWTEXTMETRICEXW
 etmAxesList as AXESLISTW
end type

type ENUMTEXTMETRICW as tagENUMTEXTMETRICW
type PENUMTEXTMETRICW as tagENUMTEXTMETRICW ptr
type LPENUMTEXTMETRICW as tagENUMTEXTMETRICW ptr

 type ENUMTEXTMETRIC as ENUMTEXTMETRICA
 type PENUMTEXTMETRIC as PENUMTEXTMETRICA
 type LPENUMTEXTMETRIC as LPENUMTEXTMETRICA

declare function GetViewportExtEx(byval hdc as HDC, byval lpsize as LPSIZE) as WINBOOL
declare function GetViewportOrgEx(byval hdc as HDC, byval lppoint as LPPOINT) as WINBOOL
declare function GetWindowExtEx(byval hdc as HDC, byval lpsize as LPSIZE) as WINBOOL
declare function GetWindowOrgEx(byval hdc as HDC, byval lppoint as LPPOINT) as WINBOOL
declare function IntersectClipRect(byval hdc as HDC, byval left as long, byval top as long, byval right as long, byval bottom as long) as long
declare function InvertRgn(byval hdc as HDC, byval hrgn as HRGN) as WINBOOL
declare function LineDDA(byval xStart as long, byval yStart as long, byval xEnd as long, byval yEnd as long, byval lpProc as LINEDDAPROC, byval data as LPARAM) as WINBOOL
declare function LineTo(byval hdc as HDC, byval x as long, byval y as long) as WINBOOL
declare function MaskBlt(byval hdcDest as HDC, byval xDest as long, byval yDest as long, byval width as long, byval height as long, byval hdcSrc as HDC, byval xSrc as long, byval ySrc as long, byval hbmMask as HBITMAP, byval xMask as long, byval yMask as long, byval rop as DWORD) as WINBOOL
declare function PlgBlt(byval hdcDest as HDC, byval lpPoint as const POINT ptr, byval hdcSrc as HDC, byval xSrc as long, byval ySrc as long, byval width as long, byval height as long, byval hbmMask as HBITMAP, byval xMask as long, byval yMask as long) as WINBOOL
declare function OffsetClipRgn(byval hdc as HDC, byval x as long, byval y as long) as long
declare function OffsetRgn(byval hrgn as HRGN, byval x as long, byval y as long) as long
declare function PatBlt(byval hdc as HDC, byval x as long, byval y as long, byval w as long, byval h as long, byval rop as DWORD) as WINBOOL
declare function Pie(byval hdc as HDC, byval left as long, byval top as long, byval right as long, byval bottom as long, byval xr1 as long, byval yr1 as long, byval xr2 as long, byval yr2 as long) as WINBOOL
declare function PlayMetaFile(byval hdc as HDC, byval hmf as HMETAFILE) as WINBOOL
declare function PaintRgn(byval hdc as HDC, byval hrgn as HRGN) as WINBOOL
declare function PolyPolygon(byval hdc as HDC, byval apt as const POINT ptr, byval asz as const INT_ ptr, byval csz as long) as WINBOOL
declare function PtInRegion(byval hrgn as HRGN, byval x as long, byval y as long) as WINBOOL
declare function PtVisible(byval hdc as HDC, byval x as long, byval y as long) as WINBOOL
declare function RectInRegion(byval hrgn as HRGN, byval lprect as const RECT ptr) as WINBOOL
declare function RectVisible(byval hdc as HDC, byval lprect as const RECT ptr) as WINBOOL
declare function Rectangle(byval hdc as HDC, byval left as long, byval top as long, byval right as long, byval bottom as long) as WINBOOL
declare function RestoreDC(byval hdc as HDC, byval nSavedDC as long) as WINBOOL
declare function ResetDCA(byval hdc as HDC, byval lpdm as const DEVMODEA ptr) as HDC

 declare function ResetDC alias "ResetDCA"(byval hdc as HDC, byval lpdm as const DEVMODEA ptr) as HDC

declare function ResetDCW(byval hdc as HDC, byval lpdm as const DEVMODEW ptr) as HDC


declare function RealizePalette(byval hdc as HDC) as UINT
declare function RemoveFontResourceA(byval lpFileName as LPCSTR) as WINBOOL

 declare function RemoveFontResource alias "RemoveFontResourceA"(byval lpFileName as LPCSTR) as WINBOOL

declare function RemoveFontResourceW(byval lpFileName as LPCWSTR) as WINBOOL


declare function RoundRect(byval hdc as HDC, byval left as long, byval top as long, byval right as long, byval bottom as long, byval width as long, byval height as long) as WINBOOL
declare function ResizePalette(byval hpal as HPALETTE, byval n as UINT) as WINBOOL
declare function SaveDC(byval hdc as HDC) as long
declare function SelectClipRgn(byval hdc as HDC, byval hrgn as HRGN) as long
declare function ExtSelectClipRgn(byval hdc as HDC, byval hrgn as HRGN, byval mode as long) as long
declare function SetMetaRgn(byval hdc as HDC) as long
declare function SelectObject(byval hdc as HDC, byval h as HGDIOBJ) as HGDIOBJ
declare function SelectPalette(byval hdc as HDC, byval hPal as HPALETTE, byval bForceBkgd as WINBOOL) as HPALETTE
declare function SetBkColor(byval hdc as HDC, byval color as COLORREF) as COLORREF
declare function SetDCBrushColor(byval hdc as HDC, byval color as COLORREF) as COLORREF
declare function SetDCPenColor(byval hdc as HDC, byval color as COLORREF) as COLORREF
declare function SetBkMode(byval hdc as HDC, byval mode as long) as long
declare function SetBitmapBits(byval hbm as HBITMAP, byval cb as DWORD, byval pvBits as const any ptr) as LONG
declare function SetBoundsRect(byval hdc as HDC, byval lprect as const RECT ptr, byval flags as UINT) as UINT
declare function SetDIBits(byval hdc as HDC, byval hbm as HBITMAP, byval start as UINT, byval cLines as UINT, byval lpBits as const any ptr, byval lpbmi as const BITMAPINFO ptr, byval ColorUse as UINT) as long
declare function SetDIBitsToDevice(byval hdc as HDC, byval xDest as long, byval yDest as long, byval w as DWORD, byval h as DWORD, byval xSrc as long, byval ySrc as long, byval StartScan as UINT, byval cLines as UINT, byval lpvBits as const any ptr, byval lpbmi as const BITMAPINFO ptr, byval ColorUse as UINT) as long
declare function SetMapperFlags(byval hdc as HDC, byval flags as DWORD) as DWORD
declare function SetGraphicsMode(byval hdc as HDC, byval iMode as long) as long
declare function SetMapMode(byval hdc as HDC, byval iMode as long) as long
declare function SetLayout(byval hdc as HDC, byval l as DWORD) as DWORD
declare function GetLayout(byval hdc as HDC) as DWORD
declare function SetMetaFileBitsEx(byval cbBuffer as UINT, byval lpData as const UBYTE ptr) as HMETAFILE
declare function SetPaletteEntries(byval hpal as HPALETTE, byval iStart as UINT, byval cEntries as UINT, byval pPalEntries as const PALETTEENTRY ptr) as UINT
declare function SetPixel(byval hdc as HDC, byval x as long, byval y as long, byval color as COLORREF) as COLORREF
declare function SetPixelV(byval hdc as HDC, byval x as long, byval y as long, byval color as COLORREF) as WINBOOL
declare function SetPixelFormat(byval hdc as HDC, byval format as long, byval ppfd as const PIXELFORMATDESCRIPTOR ptr) as WINBOOL
declare function SetPolyFillMode(byval hdc as HDC, byval mode as long) as long
declare function StretchBlt(byval hdcDest as HDC, byval xDest as long, byval yDest as long, byval wDest as long, byval hDest as long, byval hdcSrc as HDC, byval xSrc as long, byval ySrc as long, byval wSrc as long, byval hSrc as long, byval rop as DWORD) as WINBOOL
declare function SetRectRgn(byval hrgn as HRGN, byval left as long, byval top as long, byval right as long, byval bottom as long) as WINBOOL
declare function StretchDIBits(byval hdc as HDC, byval xDest as long, byval yDest as long, byval DestWidth as long, byval DestHeight as long, byval xSrc as long, byval ySrc as long, byval SrcWidth as long, byval SrcHeight as long, byval lpBits as const any ptr, byval lpbmi as const BITMAPINFO ptr, byval iUsage as UINT, byval rop as DWORD) as long
declare function SetROP2(byval hdc as HDC, byval rop2 as long) as long
declare function SetStretchBltMode(byval hdc as HDC, byval mode as long) as long
declare function SetSystemPaletteUse(byval hdc as HDC, byval use as UINT) as UINT
declare function SetTextCharacterExtra(byval hdc as HDC, byval extra as long) as long
declare function SetTextColor(byval hdc as HDC, byval color as COLORREF) as COLORREF
declare function SetTextAlign(byval hdc as HDC, byval align as UINT) as UINT
declare function SetTextJustification(byval hdc as HDC, byval extra as long, byval count as long) as WINBOOL
declare function UpdateColors(byval hdc as HDC) as WINBOOL
type COLOR16 as USHORT

type _TRIVERTEX
 x as LONG
 y as LONG
 Red as COLOR16
 Green as COLOR16
 Blue as COLOR16
 Alpha as COLOR16
end type

type TRIVERTEX as _TRIVERTEX
type PTRIVERTEX as _TRIVERTEX ptr
type LPTRIVERTEX as _TRIVERTEX ptr

type _GRADIENT_TRIANGLE
 Vertex1 as ULONG
 Vertex2 as ULONG
 Vertex3 as ULONG
end type

type GRADIENT_TRIANGLE as _GRADIENT_TRIANGLE
type PGRADIENT_TRIANGLE as _GRADIENT_TRIANGLE ptr
type LPGRADIENT_TRIANGLE as _GRADIENT_TRIANGLE ptr

type _GRADIENT_RECT
 UpperLeft as ULONG
 LowerRight as ULONG
end type

type GRADIENT_RECT as _GRADIENT_RECT
type PGRADIENT_RECT as _GRADIENT_RECT ptr
type LPGRADIENT_RECT as _GRADIENT_RECT ptr

type _BLENDFUNCTION
 BlendOp as UBYTE
 BlendFlags as UBYTE
 SourceConstantAlpha as UBYTE
 AlphaFormat as UBYTE
end type

type BLENDFUNCTION as _BLENDFUNCTION
type PBLENDFUNCTION as _BLENDFUNCTION ptr
const AC_SRC_OVER = &h000
const AC_SRC_ALPHA = &h01
declare function AlphaBlend(byval hdcDest as HDC, byval xoriginDest as long, byval yoriginDest as long, byval wDest as long, byval hDest as long, byval hdcSrc as HDC, byval xoriginSrc as long, byval yoriginSrc as long, byval wSrc as long, byval hSrc as long, byval ftn as BLENDFUNCTION) as WINBOOL
declare function GdiAlphaBlend(byval hdcDest as HDC, byval xoriginDest as long, byval yoriginDest as long, byval wDest as long, byval hDest as long, byval hdcSrc as HDC, byval xoriginSrc as long, byval yoriginSrc as long, byval wSrc as long, byval hSrc as long, byval ftn as BLENDFUNCTION) as WINBOOL
declare function TransparentBlt(byval hdcDest as HDC, byval xoriginDest as long, byval yoriginDest as long, byval wDest as long, byval hDest as long, byval hdcSrc as HDC, byval xoriginSrc as long, byval yoriginSrc as long, byval wSrc as long, byval hSrc as long, byval crTransparent as UINT) as WINBOOL
declare function GdiTransparentBlt(byval hdcDest as HDC, byval xoriginDest as long, byval yoriginDest as long, byval wDest as long, byval hDest as long, byval hdcSrc as HDC, byval xoriginSrc as long, byval yoriginSrc as long, byval wSrc as long, byval hSrc as long, byval crTransparent as UINT) as WINBOOL

const GRADIENT_FILL_RECT_H = &h000000000
const GRADIENT_FILL_RECT_V = &h00000001
const GRADIENT_FILL_TRIANGLE = &h00000002
const GRADIENT_FILL_OP_FLAG = &h000000ff

declare function GradientFill(byval hdc as HDC, byval pVertex as PTRIVERTEX, byval nVertex as ULONG, byval pMesh as PVOID, byval nMesh as ULONG, byval ulMode as ULONG) as WINBOOL
declare function GdiGradientFill(byval hdc as HDC, byval pVertex as PTRIVERTEX, byval nVertex as ULONG, byval pMesh as PVOID, byval nMesh as ULONG, byval ulMode as ULONG) as WINBOOL
declare function PlayMetaFileRecord(byval hdc as HDC, byval lpHandleTable as LPHANDLETABLE, byval lpMR as LPMETARECORD, byval noObjs as UINT) as WINBOOL
type MFENUMPROC as function(byval hdc as HDC, byval lpht as HANDLETABLE ptr, byval lpMR as METARECORD ptr, byval nObj as long, byval lParam as LPARAM) as long
declare function EnumMetaFile(byval hdc as HDC, byval hmf as HMETAFILE, byval lpProc as MFENUMPROC, byval lParam as LPARAM) as WINBOOL
type ENHMFENUMPROC as function(byval hdc as HDC, byval lpht as HANDLETABLE ptr, byval lpmr as const ENHMETARECORD ptr, byval hHandles as long, byval data as LPARAM) as long
declare function CloseEnhMetaFile(byval hdc as HDC) as HENHMETAFILE
declare function CopyEnhMetaFileA(byval hEnh as HENHMETAFILE, byval lpFileName as LPCSTR) as HENHMETAFILE

 declare function CopyEnhMetaFile alias "CopyEnhMetaFileA"(byval hEnh as HENHMETAFILE, byval lpFileName as LPCSTR) as HENHMETAFILE

declare function CopyEnhMetaFileW(byval hEnh as HENHMETAFILE, byval lpFileName as LPCWSTR) as HENHMETAFILE


declare function CreateEnhMetaFileA(byval hdc as HDC, byval lpFilename as LPCSTR, byval lprc as const RECT ptr, byval lpDesc as LPCSTR) as HDC

 declare function CreateEnhMetaFile alias "CreateEnhMetaFileA"(byval hdc as HDC, byval lpFilename as LPCSTR, byval lprc as const RECT ptr, byval lpDesc as LPCSTR) as HDC

declare function CreateEnhMetaFileW(byval hdc as HDC, byval lpFilename as LPCWSTR, byval lprc as const RECT ptr, byval lpDesc as LPCWSTR) as HDC


declare function DeleteEnhMetaFile(byval hmf as HENHMETAFILE) as WINBOOL
declare function EnumEnhMetaFile(byval hdc as HDC, byval hmf as HENHMETAFILE, byval lpProc as ENHMFENUMPROC, byval lpParam as LPVOID, byval lpRect as const RECT ptr) as WINBOOL
declare function GetEnhMetaFileA(byval lpName as LPCSTR) as HENHMETAFILE

 declare function GetEnhMetaFile alias "GetEnhMetaFileA"(byval lpName as LPCSTR) as HENHMETAFILE

declare function GetEnhMetaFileW(byval lpName as LPCWSTR) as HENHMETAFILE


declare function GetEnhMetaFileBits(byval hEMF as HENHMETAFILE, byval nSize as UINT, byval lpData as LPBYTE) as UINT
declare function GetEnhMetaFileDescriptionA(byval hemf as HENHMETAFILE, byval cchBuffer as UINT, byval lpDescription as LPSTR) as UINT

 declare function GetEnhMetaFileDescription alias "GetEnhMetaFileDescriptionA"(byval hemf as HENHMETAFILE, byval cchBuffer as UINT, byval lpDescription as LPSTR) as UINT

declare function GetEnhMetaFileDescriptionW(byval hemf as HENHMETAFILE, byval cchBuffer as UINT, byval lpDescription as LPWSTR) as UINT


declare function GetEnhMetaFileHeader(byval hemf as HENHMETAFILE, byval nSize as UINT, byval lpEnhMetaHeader as LPENHMETAHEADER) as UINT
declare function GetEnhMetaFilePaletteEntries(byval hemf as HENHMETAFILE, byval nNumEntries as UINT, byval lpPaletteEntries as LPPALETTEENTRY) as UINT
declare function GetEnhMetaFilePixelFormat(byval hemf as HENHMETAFILE, byval cbBuffer as UINT, byval ppfd as PIXELFORMATDESCRIPTOR ptr) as UINT
declare function GetWinMetaFileBits(byval hemf as HENHMETAFILE, byval cbData16 as UINT, byval pData16 as LPBYTE, byval iMapMode as INT_, byval hdcRef as HDC) as UINT
declare function PlayEnhMetaFile(byval hdc as HDC, byval hmf as HENHMETAFILE, byval lprect as const RECT ptr) as WINBOOL
declare function PlayEnhMetaFileRecord(byval hdc as HDC, byval pht as LPHANDLETABLE, byval pmr as const ENHMETARECORD ptr, byval cht as UINT) as WINBOOL
declare function SetEnhMetaFileBits(byval nSize as UINT, byval pb as const UBYTE ptr) as HENHMETAFILE
declare function SetWinMetaFileBits(byval nSize as UINT, byval lpMeta16Data as const UBYTE ptr, byval hdcRef as HDC, byval lpMFP as const METAFILEPICT ptr) as HENHMETAFILE
declare function GdiComment(byval hdc as HDC, byval nSize as UINT, byval lpData as const UBYTE ptr) as WINBOOL
declare function GetTextMetricsA(byval hdc as HDC, byval lptm as LPTEXTMETRICA) as WINBOOL

 declare function GetTextMetrics alias "GetTextMetricsA"(byval hdc as HDC, byval lptm as LPTEXTMETRICA) as WINBOOL

declare function GetTextMetricsW(byval hdc as HDC, byval lptm as LPTEXTMETRICW) as WINBOOL


type tagDIBSECTION
 dsBm as BITMAP
 dsBmih as BITMAPINFOHEADER
 dsBitfields(0 to 2) as DWORD
 dshSection as HANDLE
 dsOffset as DWORD
end type

type DIBSECTION as tagDIBSECTION
type LPDIBSECTION as tagDIBSECTION ptr
type PDIBSECTION as tagDIBSECTION ptr

declare function AngleArc(byval hdc as HDC, byval x as long, byval y as long, byval r as DWORD, byval StartAngle as FLOAT, byval SweepAngle as FLOAT) as WINBOOL
declare function PolyPolyline(byval hdc as HDC, byval apt as const POINT ptr, byval asz as const DWORD ptr, byval csz as DWORD) as WINBOOL
declare function GetWorldTransform(byval hdc as HDC, byval lpxf as LPXFORM) as WINBOOL
declare function SetWorldTransform(byval hdc as HDC, byval lpxf as const XFORM ptr) as WINBOOL
declare function ModifyWorldTransform(byval hdc as HDC, byval lpxf as const XFORM ptr, byval mode as DWORD) as WINBOOL
declare function CombineTransform(byval lpxfOut as LPXFORM, byval lpxf1 as const XFORM ptr, byval lpxf2 as const XFORM ptr) as WINBOOL
declare function CreateDIBSection(byval hdc as HDC, byval lpbmi as const BITMAPINFO ptr, byval usage as UINT, byval ppvBits as any ptr ptr, byval hSection as HANDLE, byval offset as DWORD) as HBITMAP
declare function GetDIBColorTable(byval hdc as HDC, byval iStart as UINT, byval cEntries as UINT, byval prgbq as RGBQUAD ptr) as UINT
declare function SetDIBColorTable(byval hdc as HDC, byval iStart as UINT, byval cEntries as UINT, byval prgbq as const RGBQUAD ptr) as UINT

const CA_NEGATIVE = &h0001
const CA_LOG_FILTER = &h0002
const ILLUMINANT_DEVICE_DEFAULT = 0
const ILLUMINANT_A = 1
const ILLUMINANT_B = 2
const ILLUMINANT_C = 3
const ILLUMINANT_D50 = 4
const ILLUMINANT_D55 = 5
const ILLUMINANT_D65 = 6
const ILLUMINANT_D75 = 7
const ILLUMINANT_F2 = 8
const ILLUMINANT_MAX_INDEX = ILLUMINANT_F2
const ILLUMINANT_TUNGSTEN = ILLUMINANT_A
const ILLUMINANT_DAYLIGHT = ILLUMINANT_C
const ILLUMINANT_FLUORESCENT = ILLUMINANT_F2
const ILLUMINANT_NTSC = ILLUMINANT_C
const RGB_GAMMA_MIN = cast(WORD, &o2500)
const RGB_GAMMA_MAX = cast(WORD, 65000)
const REFERENCE_WHITE_MIN = cast(WORD, 6000)
const REFERENCE_WHITE_MAX = cast(WORD, 10000)
const REFERENCE_BLACK_MIN = cast(WORD, 0)
const REFERENCE_BLACK_MAX = cast(WORD, 4000)

type tagCOLORADJUSTMENT
 caSize as WORD
 caFlags as WORD
 caIlluminantIndex as WORD
 caRedGamma as WORD
 caGreenGamma as WORD
 caBlueGamma as WORD
 caReferenceBlack as WORD
 caReferenceWhite as WORD
 caContrast as SHORT
 caBrightness as SHORT
 caColorfulness as SHORT
 caRedGreenTint as SHORT
end type

type COLORADJUSTMENT as tagCOLORADJUSTMENT
type PCOLORADJUSTMENT as tagCOLORADJUSTMENT ptr
type LPCOLORADJUSTMENT as tagCOLORADJUSTMENT ptr

declare function SetColorAdjustment(byval hdc as HDC, byval lpca as const COLORADJUSTMENT ptr) as WINBOOL
declare function GetColorAdjustment(byval hdc as HDC, byval lpca as LPCOLORADJUSTMENT) as WINBOOL
declare function CreateHalftonePalette(byval hdc as HDC) as HPALETTE
type ABORTPROC as function(byval as HDC, byval as long) as WINBOOL

type _DOCINFOA
 cbSize as long
 lpszDocName as LPCSTR
 lpszOutput as LPCSTR
 lpszDatatype as LPCSTR
 fwType as DWORD
end type

type DOCINFOA as _DOCINFOA
type LPDOCINFOA as _DOCINFOA ptr

type _DOCINFOW
 cbSize as long
 lpszDocName as LPCWSTR
 lpszOutput as LPCWSTR
 lpszDatatype as LPCWSTR
 fwType as DWORD
end type

type DOCINFOW as _DOCINFOW
type LPDOCINFOW as _DOCINFOW ptr

 type DOCINFO as DOCINFOA
 type LPDOCINFO as LPDOCINFOA

const DI_APPBANDING = &h00000001
const DI_ROPS_READ_DESTINATION = &h00000002
declare function StartDocA(byval hdc as HDC, byval lpdi as const DOCINFOA ptr) as long

 declare function StartDoc alias "StartDocA"(byval hdc as HDC, byval lpdi as const DOCINFOA ptr) as long

declare function StartDocW(byval hdc as HDC, byval lpdi as const DOCINFOW ptr) as long


declare function EndDoc(byval hdc as HDC) as long
declare function StartPage(byval hdc as HDC) as long
declare function EndPage(byval hdc as HDC) as long
declare function AbortDoc(byval hdc as HDC) as long
declare function SetAbortProc(byval hdc as HDC, byval lpProc as ABORTPROC) as long
declare function AbortPath(byval hdc as HDC) as WINBOOL
declare function ArcTo(byval hdc as HDC, byval left as long, byval top as long, byval right as long, byval bottom as long, byval xr1 as long, byval yr1 as long, byval xr2 as long, byval yr2 as long) as WINBOOL
declare function BeginPath(byval hdc as HDC) as WINBOOL
declare function CloseFigure(byval hdc as HDC) as WINBOOL
declare function EndPath(byval hdc as HDC) as WINBOOL
declare function FillPath(byval hdc as HDC) as WINBOOL
declare function FlattenPath(byval hdc as HDC) as WINBOOL
declare function GetPath(byval hdc as HDC, byval apt as LPPOINT, byval aj as LPBYTE, byval cpt as long) as long
declare function PathToRegion(byval hdc as HDC) as HRGN
declare function PolyDraw(byval hdc as HDC, byval apt as const POINT ptr, byval aj as const UBYTE ptr, byval cpt as long) as WINBOOL
declare function SelectClipPath(byval hdc as HDC, byval mode as long) as WINBOOL
declare function SetArcDirection(byval hdc as HDC, byval dir as long) as long
declare function SetMiterLimit(byval hdc as HDC, byval limit as FLOAT, byval old as PFLOAT) as WINBOOL
declare function StrokeAndFillPath(byval hdc as HDC) as WINBOOL
declare function StrokePath(byval hdc as HDC) as WINBOOL
declare function WidenPath(byval hdc as HDC) as WINBOOL
declare function ExtCreatePen(byval iPenStyle as DWORD, byval cWidth as DWORD, byval plbrush as const LOGBRUSH ptr, byval cStyle as DWORD, byval pstyle as const DWORD ptr) as HPEN
declare function GetMiterLimit(byval hdc as HDC, byval plimit as PFLOAT) as WINBOOL
declare function GetArcDirection(byval hdc as HDC) as long
declare function GetObjectA(byval h as HANDLE, byval c as long, byval pv as LPVOID) as long

 declare function GetObject alias "GetObjectA"(byval h as HANDLE, byval c as long, byval pv as LPVOID) as long

declare function GetObjectW(byval h as HANDLE, byval c as long, byval pv as LPVOID) as long


declare function MoveToEx(byval hdc as HDC, byval x as long, byval y as long, byval lppt as LPPOINT) as WINBOOL
declare function TextOutA(byval hdc as HDC, byval x as long, byval y as long, byval lpString as LPCSTR, byval c as long) as WINBOOL

 declare function TextOut alias "TextOutA"(byval hdc as HDC, byval x as long, byval y as long, byval lpString as LPCSTR, byval c as long) as WINBOOL

declare function TextOutW(byval hdc as HDC, byval x as long, byval y as long, byval lpString as LPCWSTR, byval c as long) as WINBOOL


declare function ExtTextOutA(byval hdc as HDC, byval x as long, byval y as long, byval options as UINT, byval lprect as const RECT ptr, byval lpString as LPCSTR, byval c as UINT, byval lpDx as const INT_ ptr) as WINBOOL

 declare function ExtTextOut alias "ExtTextOutA"(byval hdc as HDC, byval x as long, byval y as long, byval options as UINT, byval lprect as const RECT ptr, byval lpString as LPCSTR, byval c as UINT, byval lpDx as const INT_ ptr) as WINBOOL

declare function ExtTextOutW(byval hdc as HDC, byval x as long, byval y as long, byval options as UINT, byval lprect as const RECT ptr, byval lpString as LPCWSTR, byval c as UINT, byval lpDx as const INT_ ptr) as WINBOOL


declare function PolyTextOutA(byval hdc as HDC, byval ppt as const POLYTEXTA ptr, byval nstrings as long) as WINBOOL

 declare function PolyTextOut alias "PolyTextOutA"(byval hdc as HDC, byval ppt as const POLYTEXTA ptr, byval nstrings as long) as WINBOOL

declare function PolyTextOutW(byval hdc as HDC, byval ppt as const POLYTEXTW ptr, byval nstrings as long) as WINBOOL


declare function CreatePolygonRgn(byval pptl as const POINT ptr, byval cPoint as long, byval iMode as long) as HRGN
declare function DPtoLP(byval hdc as HDC, byval lppt as LPPOINT, byval c as long) as WINBOOL
declare function LPtoDP(byval hdc as HDC, byval lppt as LPPOINT, byval c as long) as WINBOOL
declare function Polygon(byval hdc as HDC, byval apt as const POINT ptr, byval cpt as long) as WINBOOL
declare function Polyline(byval hdc as HDC, byval apt as const POINT ptr, byval cpt as long) as WINBOOL
declare function PolyBezier(byval hdc as HDC, byval apt as const POINT ptr, byval cpt as DWORD) as WINBOOL
declare function PolyBezierTo(byval hdc as HDC, byval apt as const POINT ptr, byval cpt as DWORD) as WINBOOL
declare function PolylineTo(byval hdc as HDC, byval apt as const POINT ptr, byval cpt as DWORD) as WINBOOL
declare function SetViewportExtEx(byval hdc as HDC, byval x as long, byval y as long, byval lpsz as LPSIZE) as WINBOOL
declare function SetViewportOrgEx(byval hdc as HDC, byval x as long, byval y as long, byval lppt as LPPOINT) as WINBOOL
declare function SetWindowExtEx(byval hdc as HDC, byval x as long, byval y as long, byval lpsz as LPSIZE) as WINBOOL
declare function SetWindowOrgEx(byval hdc as HDC, byval x as long, byval y as long, byval lppt as LPPOINT) as WINBOOL
declare function OffsetViewportOrgEx(byval hdc as HDC, byval x as long, byval y as long, byval lppt as LPPOINT) as WINBOOL
declare function OffsetWindowOrgEx(byval hdc as HDC, byval x as long, byval y as long, byval lppt as LPPOINT) as WINBOOL
declare function ScaleViewportExtEx(byval hdc as HDC, byval xn as long, byval dx as long, byval yn as long, byval yd as long, byval lpsz as LPSIZE) as WINBOOL
declare function ScaleWindowExtEx(byval hdc as HDC, byval xn as long, byval xd as long, byval yn as long, byval yd as long, byval lpsz as LPSIZE) as WINBOOL
declare function SetBitmapDimensionEx(byval hbm as HBITMAP, byval w as long, byval h as long, byval lpsz as LPSIZE) as WINBOOL
declare function SetBrushOrgEx(byval hdc as HDC, byval x as long, byval y as long, byval lppt as LPPOINT) as WINBOOL
declare function GetTextFaceA(byval hdc as HDC, byval c as long, byval lpName as LPSTR) as long

 declare function GetTextFace alias "GetTextFaceA"(byval hdc as HDC, byval c as long, byval lpName as LPSTR) as long

declare function GetTextFaceW(byval hdc as HDC, byval c as long, byval lpName as LPWSTR) as long


const FONTMAPPER_MAX = 10

type tagKERNINGPAIR
 wFirst as WORD
 wSecond as WORD
 iKernAmount as long
end type

type KERNINGPAIR as tagKERNINGPAIR
type LPKERNINGPAIR as tagKERNINGPAIR ptr
declare function GetKerningPairsA(byval hdc as HDC, byval nPairs as DWORD, byval lpKernPair as LPKERNINGPAIR) as DWORD

 declare function GetKerningPairs alias "GetKerningPairsA"(byval hdc as HDC, byval nPairs as DWORD, byval lpKernPair as LPKERNINGPAIR) as DWORD

declare function GetKerningPairsW(byval hdc as HDC, byval nPairs as DWORD, byval lpKernPair as LPKERNINGPAIR) as DWORD


declare function GetDCOrgEx(byval hdc as HDC, byval lppt as LPPOINT) as WINBOOL
declare function FixBrushOrgEx(byval hdc as HDC, byval x as long, byval y as long, byval ptl as LPPOINT) as WINBOOL
declare function UnrealizeObject(byval h as HGDIOBJ) as WINBOOL
declare function GdiFlush() as WINBOOL
declare function GdiSetBatchLimit(byval dw as DWORD) as DWORD
declare function GdiGetBatchLimit() as DWORD

const ICM_OFF = 1
const ICM_ON = 2
const ICM_QUERY = 3
const ICM_DONE_OUTSIDEDC = 4
type ICMENUMPROCA as function(byval as LPSTR, byval as LPARAM) as long
type ICMENUMPROCW as function(byval as LPWSTR, byval as LPARAM) as long

 type ICMENUMPROC as ICMENUMPROCA

declare function SetICMMode(byval hdc as HDC, byval mode as long) as long
declare function CheckColorsInGamut(byval hdc as HDC, byval lpRGBTriple as LPVOID, byval dlpBuffer as LPVOID, byval nCount as DWORD) as WINBOOL
declare function GetColorSpace(byval hdc as HDC) as HCOLORSPACE
declare function GetLogColorSpaceA(byval hColorSpace as HCOLORSPACE, byval lpBuffer as LPLOGCOLORSPACEA, byval nSize as DWORD) as WINBOOL

 declare function GetLogColorSpace alias "GetLogColorSpaceA"(byval hColorSpace as HCOLORSPACE, byval lpBuffer as LPLOGCOLORSPACEA, byval nSize as DWORD) as WINBOOL

declare function GetLogColorSpaceW(byval hColorSpace as HCOLORSPACE, byval lpBuffer as LPLOGCOLORSPACEW, byval nSize as DWORD) as WINBOOL


declare function CreateColorSpaceA(byval lplcs as LPLOGCOLORSPACEA) as HCOLORSPACE

 declare function CreateColorSpace alias "CreateColorSpaceA"(byval lplcs as LPLOGCOLORSPACEA) as HCOLORSPACE

declare function CreateColorSpaceW(byval lplcs as LPLOGCOLORSPACEW) as HCOLORSPACE


declare function SetColorSpace(byval hdc as HDC, byval hcs as HCOLORSPACE) as HCOLORSPACE
declare function DeleteColorSpace(byval hcs as HCOLORSPACE) as WINBOOL
declare function GetICMProfileA(byval hdc as HDC, byval pBufSize as LPDWORD, byval pszFilename as LPSTR) as WINBOOL

 declare function GetICMProfile alias "GetICMProfileA"(byval hdc as HDC, byval pBufSize as LPDWORD, byval pszFilename as LPSTR) as WINBOOL

declare function GetICMProfileW(byval hdc as HDC, byval pBufSize as LPDWORD, byval pszFilename as LPWSTR) as WINBOOL


declare function SetICMProfileA(byval hdc as HDC, byval lpFileName as LPSTR) as WINBOOL

 declare function SetICMProfile alias "SetICMProfileA"(byval hdc as HDC, byval lpFileName as LPSTR) as WINBOOL

declare function SetICMProfileW(byval hdc as HDC, byval lpFileName as LPWSTR) as WINBOOL


declare function GetDeviceGammaRamp(byval hdc as HDC, byval lpRamp as LPVOID) as WINBOOL
declare function SetDeviceGammaRamp(byval hdc as HDC, byval lpRamp as LPVOID) as WINBOOL
declare function ColorMatchToTarget(byval hdc as HDC, byval hdcTarget as HDC, byval action as DWORD) as WINBOOL
declare function EnumICMProfilesA(byval hdc as HDC, byval lpProc as ICMENUMPROCA, byval lParam as LPARAM) as long

 declare function EnumICMProfiles alias "EnumICMProfilesA"(byval hdc as HDC, byval lpProc as ICMENUMPROCA, byval lParam as LPARAM) as long

declare function EnumICMProfilesW(byval hdc as HDC, byval lpProc as ICMENUMPROCW, byval lParam as LPARAM) as long


declare function UpdateICMRegKeyA(byval reserved as DWORD, byval lpszCMID as LPSTR, byval lpszFileName as LPSTR, byval command as UINT) as WINBOOL

 declare function UpdateICMRegKey alias "UpdateICMRegKeyA"(byval reserved as DWORD, byval lpszCMID as LPSTR, byval lpszFileName as LPSTR, byval command as UINT) as WINBOOL

declare function UpdateICMRegKeyW(byval reserved as DWORD, byval lpszCMID as LPWSTR, byval lpszFileName as LPWSTR, byval command as UINT) as WINBOOL


declare function ColorCorrectPalette(byval hdc as HDC, byval hPal as HPALETTE, byval deFirst as DWORD, byval num as DWORD) as WINBOOL
const ENHMETA_SIGNATURE = &h464D4520
const ENHMETA_STOCK_OBJECT = &h80000000
const EMR_HEADER = 1
const EMR_POLYBEZIER = 2
const EMR_POLYGON = 3
const EMR_POLYLINE = 4
const EMR_POLYBEZIERTO = 5
const EMR_POLYLINETO = 6
const EMR_POLYPOLYLINE = 7
const EMR_POLYPOLYGON = 8
const EMR_SETWINDOWEXTEX = 9
const EMR_SETWINDOWORGEX = 10
const EMR_SETVIEWPORTEXTEX = 11
const EMR_SETVIEWPORTORGEX = 12
const EMR_SETBRUSHORGEX = 13
const EMR_EOF = 14
const EMR_SETPIXELV = 15
const EMR_SETMAPPERFLAGS = 16
const EMR_SETMAPMODE = 17
const EMR_SETBKMODE = 18
const EMR_SETPOLYFILLMODE = 19
const EMR_SETROP2 = 20
const EMR_SETSTRETCHBLTMODE = 21
const EMR_SETTEXTALIGN = 22
const EMR_SETCOLORADJUSTMENT = 23
const EMR_SETTEXTCOLOR = 24
const EMR_SETBKCOLOR = 25
const EMR_OFFSETCLIPRGN = 26
const EMR_MOVETOEX = 27
const EMR_SETMETARGN = 28
const EMR_EXCLUDECLIPRECT = 29
const EMR_INTERSECTCLIPRECT = 30
const EMR_SCALEVIEWPORTEXTEX = 31
const EMR_SCALEWINDOWEXTEX = 32
const EMR_SAVEDC = 33
const EMR_RESTOREDC = 34
const EMR_SETWORLDTRANSFORM = 35
const EMR_MODIFYWORLDTRANSFORM = 36
const EMR_SELECTOBJECT = 37
const EMR_CREATEPEN = 38
const EMR_CREATEBRUSHINDIRECT = 39
const EMR_DELETEOBJECT = 40
const EMR_ANGLEARC = 41
const EMR_ELLIPSE = 42
const EMR_RECTANGLE = 43
const EMR_ROUNDRECT = 44
const EMR_ARC = 45
const EMR_CHORD = 46
const EMR_PIE = 47
const EMR_SELECTPALETTE = 48
const EMR_CREATEPALETTE = 49
const EMR_SETPALETTEENTRIES = 50
const EMR_RESIZEPALETTE = 51
const EMR_REALIZEPALETTE = 52
const EMR_EXTFLOODFILL = 53
const EMR_LINETO = 54
const EMR_ARCTO = 55
const EMR_POLYDRAW = 56
const EMR_SETARCDIRECTION = 57
const EMR_SETMITERLIMIT = 58
const EMR_BEGINPATH = 59
const EMR_ENDPATH = 60
const EMR_CLOSEFIGURE = 61
const EMR_FILLPATH = 62
const EMR_STROKEANDFILLPATH = 63
const EMR_STROKEPATH = 64
const EMR_FLATTENPATH = 65
const EMR_WIDENPATH = 66
const EMR_SELECTCLIPPATH = 67
const EMR_ABORTPATH = 68
const EMR_GDICOMMENT = 70
const EMR_FILLRGN = 71
const EMR_FRAMERGN = 72
const EMR_INVERTRGN = 73
const EMR_PAINTRGN = 74
const EMR_EXTSELECTCLIPRGN = 75
const EMR_BITBLT = 76
const EMR_STRETCHBLT = 77
const EMR_MASKBLT = 78
const EMR_PLGBLT = 79
const EMR_SETDIBITSTODEVICE = 80
const EMR_STRETCHDIBITS = 81
const EMR_EXTCREATEFONTINDIRECTW = 82
const EMR_EXTTEXTOUTA = 83
const EMR_EXTTEXTOUTW = 84
const EMR_POLYBEZIER16 = 85
const EMR_POLYGON16 = 86
const EMR_POLYLINE16 = 87
const EMR_POLYBEZIERTO16 = 88
const EMR_POLYLINETO16 = 89
const EMR_POLYPOLYLINE16 = 90
const EMR_POLYPOLYGON16 = 91
const EMR_POLYDRAW16 = 92
const EMR_CREATEMONOBRUSH = 93
const EMR_CREATEDIBPATTERNBRUSHPT = 94
const EMR_EXTCREATEPEN = 95
const EMR_POLYTEXTOUTA = 96
const EMR_POLYTEXTOUTW = 97
const EMR_SETICMMODE = 98
const EMR_CREATECOLORSPACE = 99
const EMR_SETCOLORSPACE = 100
const EMR_DELETECOLORSPACE = 101
const EMR_GLSRECORD = 102
const EMR_GLSBOUNDEDRECORD = 103
const EMR_PIXELFORMAT = 104
const EMR_RESERVED_105 = 105
const EMR_RESERVED_106 = 106
const EMR_RESERVED_107 = 107
const EMR_RESERVED_108 = 108
const EMR_RESERVED_109 = 109
const EMR_RESERVED_110 = 110
const EMR_COLORCORRECTPALETTE = 111
const EMR_SETICMPROFILEA = 112
const EMR_SETICMPROFILEW = 113
const EMR_ALPHABLEND = 114
const EMR_SETLAYOUT = 115
const EMR_TRANSPARENTBLT = 116
const EMR_RESERVED_117 = 117
const EMR_GRADIENTFILL = 118
const EMR_RESERVED_119 = 119
const EMR_RESERVED_120 = 120
const EMR_COLORMATCHTOTARGETW = 121
const EMR_CREATECOLORSPACEW = 122
const EMR_MIN = 1
const EMR_MAX = 122

type tagEMR
 iType as DWORD
 nSize as DWORD
end type

type EMR as tagEMR
type PEMR as tagEMR ptr

type tagEMRTEXT
 ptlReference as POINTL
 nChars as DWORD
 offString as DWORD
 fOptions as DWORD
 rcl as RECTL
 offDx as DWORD
end type

type EMRTEXT as tagEMRTEXT
type PEMRTEXT as tagEMRTEXT ptr

type tagABORTPATH
 emr as EMR
end type

type EMRABORTPATH as tagABORTPATH
type PEMRABORTPATH as tagABORTPATH ptr
type EMRBEGINPATH as tagABORTPATH
type PEMRBEGINPATH as tagABORTPATH ptr
type EMRENDPATH as tagABORTPATH
type PEMRENDPATH as tagABORTPATH ptr
type EMRCLOSEFIGURE as tagABORTPATH
type PEMRCLOSEFIGURE as tagABORTPATH ptr
type EMRFLATTENPATH as tagABORTPATH
type PEMRFLATTENPATH as tagABORTPATH ptr
type EMRWIDENPATH as tagABORTPATH
type PEMRWIDENPATH as tagABORTPATH ptr
type EMRSETMETARGN as tagABORTPATH
type PEMRSETMETARGN as tagABORTPATH ptr
type EMRSAVEDC as tagABORTPATH
type PEMRSAVEDC as tagABORTPATH ptr
type EMRREALIZEPALETTE as tagABORTPATH
type PEMRREALIZEPALETTE as tagABORTPATH ptr

type tagEMRSELECTCLIPPATH
 emr as EMR
 iMode as DWORD
end type

type EMRSELECTCLIPPATH as tagEMRSELECTCLIPPATH
type PEMRSELECTCLIPPATH as tagEMRSELECTCLIPPATH ptr
type EMRSETBKMODE as tagEMRSELECTCLIPPATH
type PEMRSETBKMODE as tagEMRSELECTCLIPPATH ptr
type EMRSETMAPMODE as tagEMRSELECTCLIPPATH
type PEMRSETMAPMODE as tagEMRSELECTCLIPPATH ptr
type EMRSETLAYOUT as tagEMRSELECTCLIPPATH
type PEMRSETLAYOUT as tagEMRSELECTCLIPPATH ptr
type EMRSETPOLYFILLMODE as tagEMRSELECTCLIPPATH
type PEMRSETPOLYFILLMODE as tagEMRSELECTCLIPPATH ptr
type EMRSETROP2 as tagEMRSELECTCLIPPATH
type PEMRSETROP2 as tagEMRSELECTCLIPPATH ptr
type EMRSETSTRETCHBLTMODE as tagEMRSELECTCLIPPATH
type PEMRSETSTRETCHBLTMODE as tagEMRSELECTCLIPPATH ptr
type EMRSETICMMODE as tagEMRSELECTCLIPPATH
type PEMRSETICMMODE as tagEMRSELECTCLIPPATH ptr
type EMRSETTEXTALIGN as tagEMRSELECTCLIPPATH
type PEMRSETTEXTALIGN as tagEMRSELECTCLIPPATH ptr

type tagEMRSETMITERLIMIT
 emr as EMR
 eMiterLimit as FLOAT
end type

type EMRSETMITERLIMIT as tagEMRSETMITERLIMIT
type PEMRSETMITERLIMIT as tagEMRSETMITERLIMIT ptr

type tagEMRRESTOREDC
 emr as EMR
 iRelative as LONG
end type

type EMRRESTOREDC as tagEMRRESTOREDC
type PEMRRESTOREDC as tagEMRRESTOREDC ptr

type tagEMRSETARCDIRECTION
 emr as EMR
 iArcDirection as DWORD
end type

type EMRSETARCDIRECTION as tagEMRSETARCDIRECTION
type PEMRSETARCDIRECTION as tagEMRSETARCDIRECTION ptr

type tagEMRSETMAPPERFLAGS
 emr as EMR
 dwFlags as DWORD
end type

type EMRSETMAPPERFLAGS as tagEMRSETMAPPERFLAGS
type PEMRSETMAPPERFLAGS as tagEMRSETMAPPERFLAGS ptr

type tagEMRSETTEXTCOLOR
 emr as EMR
 crColor as COLORREF
end type

type EMRSETBKCOLOR as tagEMRSETTEXTCOLOR
type PEMRSETBKCOLOR as tagEMRSETTEXTCOLOR ptr
type EMRSETTEXTCOLOR as tagEMRSETTEXTCOLOR
type PEMRSETTEXTCOLOR as tagEMRSETTEXTCOLOR ptr

type tagEMRSELECTOBJECT
 emr as EMR
 ihObject as DWORD
end type

type EMRSELECTOBJECT as tagEMRSELECTOBJECT
type PEMRSELECTOBJECT as tagEMRSELECTOBJECT ptr
type EMRDELETEOBJECT as tagEMRSELECTOBJECT
type PEMRDELETEOBJECT as tagEMRSELECTOBJECT ptr

type tagEMRSELECTPALETTE
 emr as EMR
 ihPal as DWORD
end type

type EMRSELECTPALETTE as tagEMRSELECTPALETTE
type PEMRSELECTPALETTE as tagEMRSELECTPALETTE ptr

type tagEMRRESIZEPALETTE
 emr as EMR
 ihPal as DWORD
 cEntries as DWORD
end type

type EMRRESIZEPALETTE as tagEMRRESIZEPALETTE
type PEMRRESIZEPALETTE as tagEMRRESIZEPALETTE ptr

type tagEMRSETPALETTEENTRIES
 emr as EMR
 ihPal as DWORD
 iStart as DWORD
 cEntries as DWORD
 aPalEntries(0 to 0) as PALETTEENTRY
end type

type EMRSETPALETTEENTRIES as tagEMRSETPALETTEENTRIES
type PEMRSETPALETTEENTRIES as tagEMRSETPALETTEENTRIES ptr

type tagEMRSETCOLORADJUSTMENT
 emr as EMR
 ColorAdjustment as COLORADJUSTMENT
end type

type EMRSETCOLORADJUSTMENT as tagEMRSETCOLORADJUSTMENT
type PEMRSETCOLORADJUSTMENT as tagEMRSETCOLORADJUSTMENT ptr

type tagEMRGDICOMMENT
 emr as EMR
 cbData as DWORD
 Data(0 to 0) as UBYTE
end type

type EMRGDICOMMENT as tagEMRGDICOMMENT
type PEMRGDICOMMENT as tagEMRGDICOMMENT ptr

type tagEMREOF
 emr as EMR
 nPalEntries as DWORD
 offPalEntries as DWORD
 nSizeLast as DWORD
end type

type EMREOF as tagEMREOF
type PEMREOF as tagEMREOF ptr

type tagEMRLINETO
 emr as EMR
 ptl as POINTL
end type

type EMRLINETO as tagEMRLINETO
type PEMRLINETO as tagEMRLINETO ptr
type EMRMOVETOEX as tagEMRLINETO
type PEMRMOVETOEX as tagEMRLINETO ptr

type tagEMROFFSETCLIPRGN
 emr as EMR
 ptlOffset as POINTL
end type

type EMROFFSETCLIPRGN as tagEMROFFSETCLIPRGN
type PEMROFFSETCLIPRGN as tagEMROFFSETCLIPRGN ptr

type tagEMRFILLPATH
 emr as EMR
 rclBounds as RECTL
end type

type EMRFILLPATH as tagEMRFILLPATH
type PEMRFILLPATH as tagEMRFILLPATH ptr
type EMRSTROKEANDFILLPATH as tagEMRFILLPATH
type PEMRSTROKEANDFILLPATH as tagEMRFILLPATH ptr
type EMRSTROKEPATH as tagEMRFILLPATH
type PEMRSTROKEPATH as tagEMRFILLPATH ptr

type tagEMREXCLUDECLIPRECT
 emr as EMR
 rclClip as RECTL
end type

type EMREXCLUDECLIPRECT as tagEMREXCLUDECLIPRECT
type PEMREXCLUDECLIPRECT as tagEMREXCLUDECLIPRECT ptr
type EMRINTERSECTCLIPRECT as tagEMREXCLUDECLIPRECT
type PEMRINTERSECTCLIPRECT as tagEMREXCLUDECLIPRECT ptr

type tagEMRSETVIEWPORTORGEX
 emr as EMR
 ptlOrigin as POINTL
end type

type EMRSETVIEWPORTORGEX as tagEMRSETVIEWPORTORGEX
type PEMRSETVIEWPORTORGEX as tagEMRSETVIEWPORTORGEX ptr
type EMRSETWINDOWORGEX as tagEMRSETVIEWPORTORGEX
type PEMRSETWINDOWORGEX as tagEMRSETVIEWPORTORGEX ptr
type EMRSETBRUSHORGEX as tagEMRSETVIEWPORTORGEX
type PEMRSETBRUSHORGEX as tagEMRSETVIEWPORTORGEX ptr

type tagEMRSETVIEWPORTEXTEX
 emr as EMR
 szlExtent as SIZEL
end type

type EMRSETVIEWPORTEXTEX as tagEMRSETVIEWPORTEXTEX
type PEMRSETVIEWPORTEXTEX as tagEMRSETVIEWPORTEXTEX ptr
type EMRSETWINDOWEXTEX as tagEMRSETVIEWPORTEXTEX
type PEMRSETWINDOWEXTEX as tagEMRSETVIEWPORTEXTEX ptr

type tagEMRSCALEVIEWPORTEXTEX
 emr as EMR
 xNum as LONG
 xDenom as LONG
 yNum as LONG
 yDenom as LONG
end type

type EMRSCALEVIEWPORTEXTEX as tagEMRSCALEVIEWPORTEXTEX
type PEMRSCALEVIEWPORTEXTEX as tagEMRSCALEVIEWPORTEXTEX ptr
type EMRSCALEWINDOWEXTEX as tagEMRSCALEVIEWPORTEXTEX
type PEMRSCALEWINDOWEXTEX as tagEMRSCALEVIEWPORTEXTEX ptr

type tagEMRSETWORLDTRANSFORM
 emr as EMR
 xform as XFORM
end type

type EMRSETWORLDTRANSFORM as tagEMRSETWORLDTRANSFORM
type PEMRSETWORLDTRANSFORM as tagEMRSETWORLDTRANSFORM ptr

type tagEMRMODIFYWORLDTRANSFORM
 emr as EMR
 xform as XFORM
 iMode as DWORD
end type

type EMRMODIFYWORLDTRANSFORM as tagEMRMODIFYWORLDTRANSFORM
type PEMRMODIFYWORLDTRANSFORM as tagEMRMODIFYWORLDTRANSFORM ptr

type tagEMRSETPIXELV
 emr as EMR
 ptlPixel as POINTL
 crColor as COLORREF
end type

type EMRSETPIXELV as tagEMRSETPIXELV
type PEMRSETPIXELV as tagEMRSETPIXELV ptr

type tagEMREXTFLOODFILL
 emr as EMR
 ptlStart as POINTL
 crColor as COLORREF
 iMode as DWORD
end type

type EMREXTFLOODFILL as tagEMREXTFLOODFILL
type PEMREXTFLOODFILL as tagEMREXTFLOODFILL ptr

type tagEMRELLIPSE
 emr as EMR
 rclBox as RECTL
end type

type EMRELLIPSE as tagEMRELLIPSE
type PEMRELLIPSE as tagEMRELLIPSE ptr
type EMRRECTANGLE as tagEMRELLIPSE
type PEMRRECTANGLE as tagEMRELLIPSE ptr

type tagEMRROUNDRECT
 emr as EMR
 rclBox as RECTL
 szlCorner as SIZEL
end type

type EMRROUNDRECT as tagEMRROUNDRECT
type PEMRROUNDRECT as tagEMRROUNDRECT ptr

type tagEMRARC
 emr as EMR
 rclBox as RECTL
 ptlStart as POINTL
 ptlEnd as POINTL
end type

type EMRARC as tagEMRARC
type PEMRARC as tagEMRARC ptr
type EMRARCTO as tagEMRARC
type PEMRARCTO as tagEMRARC ptr
type EMRCHORD as tagEMRARC
type PEMRCHORD as tagEMRARC ptr
type EMRPIE as tagEMRARC
type PEMRPIE as tagEMRARC ptr

type tagEMRANGLEARC
 emr as EMR
 ptlCenter as POINTL
 nRadius as DWORD
 eStartAngle as FLOAT
 eSweepAngle as FLOAT
end type

type EMRANGLEARC as tagEMRANGLEARC
type PEMRANGLEARC as tagEMRANGLEARC ptr

type tagEMRPOLYLINE
 emr as EMR
 rclBounds as RECTL
 cptl as DWORD
 aptl(0 to 0) as POINTL
end type

type EMRPOLYLINE as tagEMRPOLYLINE
type PEMRPOLYLINE as tagEMRPOLYLINE ptr
type EMRPOLYBEZIER as tagEMRPOLYLINE
type PEMRPOLYBEZIER as tagEMRPOLYLINE ptr
type EMRPOLYGON as tagEMRPOLYLINE
type PEMRPOLYGON as tagEMRPOLYLINE ptr
type EMRPOLYBEZIERTO as tagEMRPOLYLINE
type PEMRPOLYBEZIERTO as tagEMRPOLYLINE ptr
type EMRPOLYLINETO as tagEMRPOLYLINE
type PEMRPOLYLINETO as tagEMRPOLYLINE ptr

type tagEMRPOLYLINE16
 emr as EMR
 rclBounds as RECTL
 cpts as DWORD
 apts(0 to 0) as POINTS
end type

type EMRPOLYLINE16 as tagEMRPOLYLINE16
type PEMRPOLYLINE16 as tagEMRPOLYLINE16 ptr
type EMRPOLYBEZIER16 as tagEMRPOLYLINE16
type PEMRPOLYBEZIER16 as tagEMRPOLYLINE16 ptr
type EMRPOLYGON16 as tagEMRPOLYLINE16
type PEMRPOLYGON16 as tagEMRPOLYLINE16 ptr
type EMRPOLYBEZIERTO16 as tagEMRPOLYLINE16
type PEMRPOLYBEZIERTO16 as tagEMRPOLYLINE16 ptr
type EMRPOLYLINETO16 as tagEMRPOLYLINE16
type PEMRPOLYLINETO16 as tagEMRPOLYLINE16 ptr

type tagEMRPOLYDRAW
 emr as EMR
 rclBounds as RECTL
 cptl as DWORD
 aptl(0 to 0) as POINTL
 abTypes(0 to 0) as UBYTE
end type

type EMRPOLYDRAW as tagEMRPOLYDRAW
type PEMRPOLYDRAW as tagEMRPOLYDRAW ptr

type tagEMRPOLYDRAW16
 emr as EMR
 rclBounds as RECTL
 cpts as DWORD
 apts(0 to 0) as POINTS
 abTypes(0 to 0) as UBYTE
end type

type EMRPOLYDRAW16 as tagEMRPOLYDRAW16
type PEMRPOLYDRAW16 as tagEMRPOLYDRAW16 ptr

type tagEMRPOLYPOLYLINE
 emr as EMR
 rclBounds as RECTL
 nPolys as DWORD
 cptl as DWORD
 aPolyCounts(0 to 0) as DWORD
 aptl(0 to 0) as POINTL
end type

type EMRPOLYPOLYLINE as tagEMRPOLYPOLYLINE
type PEMRPOLYPOLYLINE as tagEMRPOLYPOLYLINE ptr
type EMRPOLYPOLYGON as tagEMRPOLYPOLYLINE
type PEMRPOLYPOLYGON as tagEMRPOLYPOLYLINE ptr

type tagEMRPOLYPOLYLINE16
 emr as EMR
 rclBounds as RECTL
 nPolys as DWORD
 cpts as DWORD
 aPolyCounts(0 to 0) as DWORD
 apts(0 to 0) as POINTS
end type

type EMRPOLYPOLYLINE16 as tagEMRPOLYPOLYLINE16
type PEMRPOLYPOLYLINE16 as tagEMRPOLYPOLYLINE16 ptr
type EMRPOLYPOLYGON16 as tagEMRPOLYPOLYLINE16
type PEMRPOLYPOLYGON16 as tagEMRPOLYPOLYLINE16 ptr

type tagEMRINVERTRGN
 emr as EMR
 rclBounds as RECTL
 cbRgnData as DWORD
 RgnData(0 to 0) as UBYTE
end type

type EMRINVERTRGN as tagEMRINVERTRGN
type PEMRINVERTRGN as tagEMRINVERTRGN ptr
type EMRPAINTRGN as tagEMRINVERTRGN
type PEMRPAINTRGN as tagEMRINVERTRGN ptr

type tagEMRFILLRGN
 emr as EMR
 rclBounds as RECTL
 cbRgnData as DWORD
 ihBrush as DWORD
 RgnData(0 to 0) as UBYTE
end type

type EMRFILLRGN as tagEMRFILLRGN
type PEMRFILLRGN as tagEMRFILLRGN ptr

type tagEMRFRAMERGN
 emr as EMR
 rclBounds as RECTL
 cbRgnData as DWORD
 ihBrush as DWORD
 szlStroke as SIZEL
 RgnData(0 to 0) as UBYTE
end type

type EMRFRAMERGN as tagEMRFRAMERGN
type PEMRFRAMERGN as tagEMRFRAMERGN ptr

type tagEMREXTSELECTCLIPRGN
 emr as EMR
 cbRgnData as DWORD
 iMode as DWORD
 RgnData(0 to 0) as UBYTE
end type

type EMREXTSELECTCLIPRGN as tagEMREXTSELECTCLIPRGN
type PEMREXTSELECTCLIPRGN as tagEMREXTSELECTCLIPRGN ptr

type tagEMREXTTEXTOUTA
 emr as EMR
 rclBounds as RECTL
 iGraphicsMode as DWORD
 exScale as FLOAT
 eyScale as FLOAT
 emrtext as EMRTEXT
end type

type EMREXTTEXTOUTA as tagEMREXTTEXTOUTA
type PEMREXTTEXTOUTA as tagEMREXTTEXTOUTA ptr
type EMREXTTEXTOUTW as tagEMREXTTEXTOUTA
type PEMREXTTEXTOUTW as tagEMREXTTEXTOUTA ptr

type tagEMRPOLYTEXTOUTA
 emr as EMR
 rclBounds as RECTL
 iGraphicsMode as DWORD
 exScale as FLOAT
 eyScale as FLOAT
 cStrings as LONG
 aemrtext(0 to 0) as EMRTEXT
end type

type EMRPOLYTEXTOUTA as tagEMRPOLYTEXTOUTA
type PEMRPOLYTEXTOUTA as tagEMRPOLYTEXTOUTA ptr
type EMRPOLYTEXTOUTW as tagEMRPOLYTEXTOUTA
type PEMRPOLYTEXTOUTW as tagEMRPOLYTEXTOUTA ptr

type tagEMRBITBLT
 emr as EMR
 rclBounds as RECTL
 xDest as LONG
 yDest as LONG
 cxDest as LONG
 cyDest as LONG
 dwRop as DWORD
 xSrc as LONG
 ySrc as LONG
 xformSrc as XFORM
 crBkColorSrc as COLORREF
 iUsageSrc as DWORD
 offBmiSrc as DWORD
 cbBmiSrc as DWORD
 offBitsSrc as DWORD
 cbBitsSrc as DWORD
end type

type EMRBITBLT as tagEMRBITBLT
type PEMRBITBLT as tagEMRBITBLT ptr

type tagEMRSTRETCHBLT
 emr as EMR
 rclBounds as RECTL
 xDest as LONG
 yDest as LONG
 cxDest as LONG
 cyDest as LONG
 dwRop as DWORD
 xSrc as LONG
 ySrc as LONG
 xformSrc as XFORM
 crBkColorSrc as COLORREF
 iUsageSrc as DWORD
 offBmiSrc as DWORD
 cbBmiSrc as DWORD
 offBitsSrc as DWORD
 cbBitsSrc as DWORD
 cxSrc as LONG
 cySrc as LONG
end type

type EMRSTRETCHBLT as tagEMRSTRETCHBLT
type PEMRSTRETCHBLT as tagEMRSTRETCHBLT ptr

type tagEMRMASKBLT
 emr as EMR
 rclBounds as RECTL
 xDest as LONG
 yDest as LONG
 cxDest as LONG
 cyDest as LONG
 dwRop as DWORD
 xSrc as LONG
 ySrc as LONG
 xformSrc as XFORM
 crBkColorSrc as COLORREF
 iUsageSrc as DWORD
 offBmiSrc as DWORD
 cbBmiSrc as DWORD
 offBitsSrc as DWORD
 cbBitsSrc as DWORD
 xMask as LONG
 yMask as LONG
 iUsageMask as DWORD
 offBmiMask as DWORD
 cbBmiMask as DWORD
 offBitsMask as DWORD
 cbBitsMask as DWORD
end type

type EMRMASKBLT as tagEMRMASKBLT
type PEMRMASKBLT as tagEMRMASKBLT ptr

type tagEMRPLGBLT
 emr as EMR
 rclBounds as RECTL
 aptlDest(0 to 2) as POINTL
 xSrc as LONG
 ySrc as LONG
 cxSrc as LONG
 cySrc as LONG
 xformSrc as XFORM
 crBkColorSrc as COLORREF
 iUsageSrc as DWORD
 offBmiSrc as DWORD
 cbBmiSrc as DWORD
 offBitsSrc as DWORD
 cbBitsSrc as DWORD
 xMask as LONG
 yMask as LONG
 iUsageMask as DWORD
 offBmiMask as DWORD
 cbBmiMask as DWORD
 offBitsMask as DWORD
 cbBitsMask as DWORD
end type

type EMRPLGBLT as tagEMRPLGBLT
type PEMRPLGBLT as tagEMRPLGBLT ptr

type tagEMRSETDIBITSTODEVICE
 emr as EMR
 rclBounds as RECTL
 xDest as LONG
 yDest as LONG
 xSrc as LONG
 ySrc as LONG
 cxSrc as LONG
 cySrc as LONG
 offBmiSrc as DWORD
 cbBmiSrc as DWORD
 offBitsSrc as DWORD
 cbBitsSrc as DWORD
 iUsageSrc as DWORD
 iStartScan as DWORD
 cScans as DWORD
end type

type EMRSETDIBITSTODEVICE as tagEMRSETDIBITSTODEVICE
type PEMRSETDIBITSTODEVICE as tagEMRSETDIBITSTODEVICE ptr

type tagEMRSTRETCHDIBITS
 emr as EMR
 rclBounds as RECTL
 xDest as LONG
 yDest as LONG
 xSrc as LONG
 ySrc as LONG
 cxSrc as LONG
 cySrc as LONG
 offBmiSrc as DWORD
 cbBmiSrc as DWORD
 offBitsSrc as DWORD
 cbBitsSrc as DWORD
 iUsageSrc as DWORD
 dwRop as DWORD
 cxDest as LONG
 cyDest as LONG
end type

type EMRSTRETCHDIBITS as tagEMRSTRETCHDIBITS
type PEMRSTRETCHDIBITS as tagEMRSTRETCHDIBITS ptr

type tagEMREXTCREATEFONTINDIRECTW
 emr as EMR
 ihFont as DWORD
 elfw as EXTLOGFONTW
end type

type EMREXTCREATEFONTINDIRECTW as tagEMREXTCREATEFONTINDIRECTW
type PEMREXTCREATEFONTINDIRECTW as tagEMREXTCREATEFONTINDIRECTW ptr

type tagEMRCREATEPALETTE
 emr as EMR
 ihPal as DWORD
 lgpl as LOGPALETTE
end type

type EMRCREATEPALETTE as tagEMRCREATEPALETTE
type PEMRCREATEPALETTE as tagEMRCREATEPALETTE ptr

type tagEMRCREATEPEN
 emr as EMR
 ihPen as DWORD
 lopn as LOGPEN
end type

type EMRCREATEPEN as tagEMRCREATEPEN
type PEMRCREATEPEN as tagEMRCREATEPEN ptr

type tagEMREXTCREATEPEN
 emr as EMR
 ihPen as DWORD
 offBmi as DWORD
 cbBmi as DWORD
 offBits as DWORD
 cbBits as DWORD
 elp as EXTLOGPEN
end type

type EMREXTCREATEPEN as tagEMREXTCREATEPEN
type PEMREXTCREATEPEN as tagEMREXTCREATEPEN ptr

type tagEMRCREATEBRUSHINDIRECT
 emr as EMR
 ihBrush as DWORD
 lb as LOGBRUSH32
end type

type EMRCREATEBRUSHINDIRECT as tagEMRCREATEBRUSHINDIRECT
type PEMRCREATEBRUSHINDIRECT as tagEMRCREATEBRUSHINDIRECT ptr

type tagEMRCREATEMONOBRUSH
 emr as EMR
 ihBrush as DWORD
 iUsage as DWORD
 offBmi as DWORD
 cbBmi as DWORD
 offBits as DWORD
 cbBits as DWORD
end type

type EMRCREATEMONOBRUSH as tagEMRCREATEMONOBRUSH
type PEMRCREATEMONOBRUSH as tagEMRCREATEMONOBRUSH ptr

type tagEMRCREATEDIBPATTERNBRUSHPT
 emr as EMR
 ihBrush as DWORD
 iUsage as DWORD
 offBmi as DWORD
 cbBmi as DWORD
 offBits as DWORD
 cbBits as DWORD
end type

type EMRCREATEDIBPATTERNBRUSHPT as tagEMRCREATEDIBPATTERNBRUSHPT
type PEMRCREATEDIBPATTERNBRUSHPT as tagEMRCREATEDIBPATTERNBRUSHPT ptr

type tagEMRFORMAT
 dSignature as DWORD
 nVersion as DWORD
 cbData as DWORD
 offData as DWORD
end type

type EMRFORMAT as tagEMRFORMAT
type PEMRFORMAT as tagEMRFORMAT ptr

type tagEMRGLSRECORD
 emr as EMR
 cbData as DWORD
 Data(0 to 0) as UBYTE
end type

type EMRGLSRECORD as tagEMRGLSRECORD
type PEMRGLSRECORD as tagEMRGLSRECORD ptr

type tagEMRGLSBOUNDEDRECORD
 emr as EMR
 rclBounds as RECTL
 cbData as DWORD
 Data(0 to 0) as UBYTE
end type

type EMRGLSBOUNDEDRECORD as tagEMRGLSBOUNDEDRECORD
type PEMRGLSBOUNDEDRECORD as tagEMRGLSBOUNDEDRECORD ptr

type tagEMRPIXELFORMAT
 emr as EMR
 pfd as PIXELFORMATDESCRIPTOR
end type

type EMRPIXELFORMAT as tagEMRPIXELFORMAT
type PEMRPIXELFORMAT as tagEMRPIXELFORMAT ptr

type tagEMRCREATECOLORSPACE
 emr as EMR
 ihCS as DWORD
 lcs as LOGCOLORSPACEA
end type

type EMRCREATECOLORSPACE as tagEMRCREATECOLORSPACE
type PEMRCREATECOLORSPACE as tagEMRCREATECOLORSPACE ptr

type tagEMRSETCOLORSPACE
 emr as EMR
 ihCS as DWORD
end type

type EMRSETCOLORSPACE as tagEMRSETCOLORSPACE
type PEMRSETCOLORSPACE as tagEMRSETCOLORSPACE ptr
type EMRSELECTCOLORSPACE as tagEMRSETCOLORSPACE
type PEMRSELECTCOLORSPACE as tagEMRSETCOLORSPACE ptr
type EMRDELETECOLORSPACE as tagEMRSETCOLORSPACE
type PEMRDELETECOLORSPACE as tagEMRSETCOLORSPACE ptr

type tagEMREXTESCAPE
 emr as EMR
 iEscape as INT_
 cbEscData as INT_
 EscData(0 to 0) as UBYTE
end type

type EMREXTESCAPE as tagEMREXTESCAPE
type PEMREXTESCAPE as tagEMREXTESCAPE ptr
type EMRDRAWESCAPE as tagEMREXTESCAPE
type PEMRDRAWESCAPE as tagEMREXTESCAPE ptr

type tagEMRNAMEDESCAPE
 emr as EMR
 iEscape as INT_
 cbDriver as INT_
 cbEscData as INT_
 EscData(0 to 0) as UBYTE
end type

type EMRNAMEDESCAPE as tagEMRNAMEDESCAPE
type PEMRNAMEDESCAPE as tagEMRNAMEDESCAPE ptr
const SETICMPROFILE_EMBEDED = &h00000001

type tagEMRSETICMPROFILE
 emr as EMR
 dwFlags as DWORD
 cbName as DWORD
 cbData as DWORD
 Data(0 to 0) as UBYTE
end type

type EMRSETICMPROFILE as tagEMRSETICMPROFILE
type PEMRSETICMPROFILE as tagEMRSETICMPROFILE ptr
type EMRSETICMPROFILEA as tagEMRSETICMPROFILE
type PEMRSETICMPROFILEA as tagEMRSETICMPROFILE ptr
type EMRSETICMPROFILEW as tagEMRSETICMPROFILE
type PEMRSETICMPROFILEW as tagEMRSETICMPROFILE ptr
const CREATECOLORSPACE_EMBEDED = &h00000001

type tagEMRCREATECOLORSPACEW
 emr as EMR
 ihCS as DWORD
 lcs as LOGCOLORSPACEW
 dwFlags as DWORD
 cbData as DWORD
 Data(0 to 0) as UBYTE
end type

type EMRCREATECOLORSPACEW as tagEMRCREATECOLORSPACEW
type PEMRCREATECOLORSPACEW as tagEMRCREATECOLORSPACEW ptr
const COLORMATCHTOTARGET_EMBEDED = &h00000001

type tagCOLORMATCHTOTARGET
 emr as EMR
 dwAction as DWORD
 dwFlags as DWORD
 cbName as DWORD
 cbData as DWORD
 Data(0 to 0) as UBYTE
end type

type EMRCOLORMATCHTOTARGET as tagCOLORMATCHTOTARGET
type PEMRCOLORMATCHTOTARGET as tagCOLORMATCHTOTARGET ptr

type tagCOLORCORRECTPALETTE
 emr as EMR
 ihPalette as DWORD
 nFirstEntry as DWORD
 nPalEntries as DWORD
 nReserved as DWORD
end type

type EMRCOLORCORRECTPALETTE as tagCOLORCORRECTPALETTE
type PEMRCOLORCORRECTPALETTE as tagCOLORCORRECTPALETTE ptr

type tagEMRALPHABLEND
 emr as EMR
 rclBounds as RECTL
 xDest as LONG
 yDest as LONG
 cxDest as LONG
 cyDest as LONG
 dwRop as DWORD
 xSrc as LONG
 ySrc as LONG
 xformSrc as XFORM
 crBkColorSrc as COLORREF
 iUsageSrc as DWORD
 offBmiSrc as DWORD
 cbBmiSrc as DWORD
 offBitsSrc as DWORD
 cbBitsSrc as DWORD
 cxSrc as LONG
 cySrc as LONG
end type

type EMRALPHABLEND as tagEMRALPHABLEND
type PEMRALPHABLEND as tagEMRALPHABLEND ptr

type tagEMRGRADIENTFILL
 emr as EMR
 rclBounds as RECTL
 nVer as DWORD
 nTri as DWORD
 ulMode as ULONG
 Ver(0 to 0) as TRIVERTEX
end type

type EMRGRADIENTFILL as tagEMRGRADIENTFILL
type PEMRGRADIENTFILL as tagEMRGRADIENTFILL ptr

type tagEMRTRANSPARENTBLT
 emr as EMR
 rclBounds as RECTL
 xDest as LONG
 yDest as LONG
 cxDest as LONG
 cyDest as LONG
 dwRop as DWORD
 xSrc as LONG
 ySrc as LONG
 xformSrc as XFORM
 crBkColorSrc as COLORREF
 iUsageSrc as DWORD
 offBmiSrc as DWORD
 cbBmiSrc as DWORD
 offBitsSrc as DWORD
 cbBitsSrc as DWORD
 cxSrc as LONG
 cySrc as LONG
end type

type EMRTRANSPARENTBLT as tagEMRTRANSPARENTBLT
type PEMRTRANSPARENTBLT as tagEMRTRANSPARENTBLT ptr
const GDICOMMENT_IDENTIFIER = &h43494447
const GDICOMMENT_WINDOWS_METAFILE = &h80000001
const GDICOMMENT_BEGINGROUP = &h00000002
const GDICOMMENT_ENDGROUP = &h00000003
const GDICOMMENT_MULTIFORMATS = &h40000004
const EPS_SIGNATURE = &h46535045
const GDICOMMENT_UNICODE_STRING = &h00000040
const GDICOMMENT_UNICODE_END = &h00000080

declare function wglCopyContext(byval as HGLRC, byval as HGLRC, byval as UINT) as WINBOOL
declare function wglCreateContext(byval as HDC) as HGLRC
declare function wglCreateLayerContext(byval as HDC, byval as long) as HGLRC
declare function wglDeleteContext(byval as HGLRC) as WINBOOL
declare function wglGetCurrentContext() as HGLRC
declare function wglGetCurrentDC() as HDC
declare function wglGetProcAddress(byval as LPCSTR) as PROC
declare function wglMakeCurrent(byval as HDC, byval as HGLRC) as WINBOOL
declare function wglShareLists(byval as HGLRC, byval as HGLRC) as WINBOOL
declare function wglUseFontBitmapsA(byval as HDC, byval as DWORD, byval as DWORD, byval as DWORD) as WINBOOL

 declare function wglUseFontBitmaps alias "wglUseFontBitmapsA"(byval as HDC, byval as DWORD, byval as DWORD, byval as DWORD) as WINBOOL

declare function wglUseFontBitmapsW(byval as HDC, byval as DWORD, byval as DWORD, byval as DWORD) as WINBOOL


declare function SwapBuffers(byval as HDC) as WINBOOL

type _POINTFLOAT
 x as FLOAT
 y as FLOAT
end type

type POINTFLOAT as _POINTFLOAT
type PPOINTFLOAT as _POINTFLOAT ptr

type _GLYPHMETRICSFLOAT
 gmfBlackBoxX as FLOAT
 gmfBlackBoxY as FLOAT
 gmfptGlyphOrigin as POINTFLOAT
 gmfCellIncX as FLOAT
 gmfCellIncY as FLOAT
end type

type GLYPHMETRICSFLOAT as _GLYPHMETRICSFLOAT
type PGLYPHMETRICSFLOAT as _GLYPHMETRICSFLOAT ptr
type LPGLYPHMETRICSFLOAT as _GLYPHMETRICSFLOAT ptr
const WGL_FONT_LINES = 0
const WGL_FONT_POLYGONS = 1
declare function wglUseFontOutlinesA(byval as HDC, byval as DWORD, byval as DWORD, byval as DWORD, byval as FLOAT, byval as FLOAT, byval as long, byval as LPGLYPHMETRICSFLOAT) as WINBOOL

 declare function wglUseFontOutlines alias "wglUseFontOutlinesA"(byval as HDC, byval as DWORD, byval as DWORD, byval as DWORD, byval as FLOAT, byval as FLOAT, byval as long, byval as LPGLYPHMETRICSFLOAT) as WINBOOL

declare function wglUseFontOutlinesW(byval as HDC, byval as DWORD, byval as DWORD, byval as DWORD, byval as FLOAT, byval as FLOAT, byval as long, byval as LPGLYPHMETRICSFLOAT) as WINBOOL


type tagLAYERPLANEDESCRIPTOR
 nSize as WORD
 nVersion as WORD
 dwFlags as DWORD
 iPixelType as UBYTE
 cColorBits as UBYTE
 cRedBits as UBYTE
 cRedShift as UBYTE
 cGreenBits as UBYTE
 cGreenShift as UBYTE
 cBlueBits as UBYTE
 cBlueShift as UBYTE
 cAlphaBits as UBYTE
 cAlphaShift as UBYTE
 cAccumBits as UBYTE
 cAccumRedBits as UBYTE
 cAccumGreenBits as UBYTE
 cAccumBlueBits as UBYTE
 cAccumAlphaBits as UBYTE
 cDepthBits as UBYTE
 cStencilBits as UBYTE
 cAuxBuffers as UBYTE
 iLayerPlane as UBYTE
 bReserved as UBYTE
 crTransparent as COLORREF
end type

type LAYERPLANEDESCRIPTOR as tagLAYERPLANEDESCRIPTOR
type PLAYERPLANEDESCRIPTOR as tagLAYERPLANEDESCRIPTOR ptr
type LPLAYERPLANEDESCRIPTOR as tagLAYERPLANEDESCRIPTOR ptr

const LPD_DOUBLEBUFFER = &h00000001
const LPD_STEREO = &h00000002
const LPD_SUPPORT_GDI = &h00000010
const LPD_SUPPORT_OPENGL = &h00000020
const LPD_SHARE_DEPTH = &h00000040
const LPD_SHARE_STENCIL = &h00000080
const LPD_SHARE_ACCUM = &h00000100
const LPD_SWAP_EXCHANGE = &h00000200
const LPD_SWAP_COPY = &h00000400
const LPD_TRANSPARENT = &h00001000
const LPD_TYPE_RGBA = 0
const LPD_TYPE_COLORINDEX = 1
const WGL_SWAP_MAIN_PLANE = &h00000001
const WGL_SWAP_OVERLAY1 = &h00000002
const WGL_SWAP_OVERLAY2 = &h00000004
const WGL_SWAP_OVERLAY3 = &h00000008
const WGL_SWAP_OVERLAY4 = &h00000010
const WGL_SWAP_OVERLAY5 = &h00000020
const WGL_SWAP_OVERLAY6 = &h00000040
const WGL_SWAP_OVERLAY7 = &h00000080
const WGL_SWAP_OVERLAY8 = &h00000100
const WGL_SWAP_OVERLAY9 = &h00000200
const WGL_SWAP_OVERLAY10 = &h00000400
const WGL_SWAP_OVERLAY11 = &h00000800
const WGL_SWAP_OVERLAY12 = &h00001000
const WGL_SWAP_OVERLAY13 = &h00002000
const WGL_SWAP_OVERLAY14 = &h00004000
const WGL_SWAP_OVERLAY15 = &h00008000
const WGL_SWAP_UNDERLAY1 = &h00010000
const WGL_SWAP_UNDERLAY2 = &h00020000
const WGL_SWAP_UNDERLAY3 = &h00040000
const WGL_SWAP_UNDERLAY4 = &h00080000
const WGL_SWAP_UNDERLAY5 = &h00100000
const WGL_SWAP_UNDERLAY6 = &h00200000
const WGL_SWAP_UNDERLAY7 = &h00400000
const WGL_SWAP_UNDERLAY8 = &h00800000
const WGL_SWAP_UNDERLAY9 = &h01000000
const WGL_SWAP_UNDERLAY10 = &h02000000
const WGL_SWAP_UNDERLAY11 = &h04000000
const WGL_SWAP_UNDERLAY12 = &h08000000
const WGL_SWAP_UNDERLAY13 = &h10000000
const WGL_SWAP_UNDERLAY14 = &h20000000
const WGL_SWAP_UNDERLAY15 = &h40000000

declare function wglDescribeLayerPlane(byval as HDC, byval as long, byval as long, byval as UINT, byval as LPLAYERPLANEDESCRIPTOR) as WINBOOL
declare function wglSetLayerPaletteEntries(byval as HDC, byval as long, byval as long, byval as long, byval as const COLORREF ptr) as long
declare function wglGetLayerPaletteEntries(byval as HDC, byval as long, byval as long, byval as long, byval as COLORREF ptr) as long
declare function wglRealizeLayerPalette(byval as HDC, byval as long, byval as WINBOOL) as WINBOOL
declare function wglSwapLayerBuffers(byval as HDC, byval as UINT) as WINBOOL

type _WGLSWAP
 hdc as HDC
 uiFlags as UINT
end type

type WGLSWAP as _WGLSWAP
type PWGLSWAP as _WGLSWAP ptr
type LPWGLSWAP as _WGLSWAP ptr
const WGL_SWAPMULTIPLE_MAX = 16
declare function wglSwapMultipleBuffers(byval as UINT, byval as const WGLSWAP ptr) as DWORD

end extern


#inclib "user32"



extern "Windows"

type HDWP as HANDLE
type MENUTEMPLATEA as any
type MENUTEMPLATEW as any
type LPMENUTEMPLATEA as PVOID
type LPMENUTEMPLATEW as PVOID

 type MENUTEMPLATE as MENUTEMPLATEA
 type LPMENUTEMPLATE as LPMENUTEMPLATEA

type WNDPROC as function(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as LRESULT
type DLGPROC as function(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as INT_PTR
type TIMERPROC as sub(byval as HWND, byval as UINT, byval as UINT_PTR, byval as DWORD)
type GRAYSTRINGPROC as function(byval as HDC, byval as LPARAM, byval as long) as WINBOOL
type WNDENUMPROC as function(byval as HWND, byval as LPARAM) as WINBOOL
type ENUMWINDOWSPROC as WNDENUMPROC
type HOOKPROC as function(byval code as long, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT
type SENDASYNCPROC as sub(byval as HWND, byval as UINT, byval as ULONG_PTR, byval as LRESULT)
type PROPENUMPROCA as function(byval as HWND, byval as LPCSTR, byval as HANDLE) as WINBOOL
type PROPENUMPROCW as function(byval as HWND, byval as LPCWSTR, byval as HANDLE) as WINBOOL
type PROPENUMPROCEXA as function(byval as HWND, byval as LPSTR, byval as HANDLE, byval as ULONG_PTR) as WINBOOL
type PROPENUMPROCEXW as function(byval as HWND, byval as LPWSTR, byval as HANDLE, byval as ULONG_PTR) as WINBOOL
type EDITWORDBREAKPROCA as function(byval lpch as LPSTR, byval ichCurrent as long, byval cch as long, byval code as long) as long
type EDITWORDBREAKPROCW as function(byval lpch as LPWSTR, byval ichCurrent as long, byval cch as long, byval code as long) as long
type DRAWSTATEPROC as function(byval hdc as HDC, byval lData as LPARAM, byval wData as WPARAM, byval cx as long, byval cy as long) as WINBOOL

 type PROPENUMPROC as PROPENUMPROCA
 type PROPENUMPROCEX as PROPENUMPROCEXA
 type EDITWORDBREAKPROC as EDITWORDBREAKPROCA

type NAMEENUMPROCA as function(byval as LPSTR, byval as LPARAM) as WINBOOL
type NAMEENUMPROCW as function(byval as LPWSTR, byval as LPARAM) as WINBOOL
type WINSTAENUMPROCA as NAMEENUMPROCA
type WINSTAENUMPROCW as NAMEENUMPROCW
type DESKTOPENUMPROCA as NAMEENUMPROCA
type DESKTOPENUMPROCW as NAMEENUMPROCW

 type WINSTAENUMPROC as WINSTAENUMPROCA
 type DESKTOPENUMPROC as DESKTOPENUMPROCA



const DIFFERENCE = 11


declare function wvsprintfA(byval as LPSTR, byval as LPCSTR, byval arglist as va_list) as long
declare function wvsprintfW(byval as LPWSTR, byval as LPCWSTR, byval arglist as va_list) as long
declare function wsprintfA cdecl(byval as LPSTR, byval as LPCSTR, ...) as long
declare function wsprintfW cdecl(byval as LPWSTR, byval as LPCWSTR, ...) as long

const SETWALLPAPER_DEFAULT = cast(LPWSTR, -1)
const SB_HORZ = 0
const SB_VERT = 1
const SB_CTL = 2
const SB_BOTH = 3
const SB_LINEUP = 0
const SB_LINELEFT = 0
const SB_LINEDOWN = 1
const SB_LINERIGHT = 1
const SB_PAGEUP = 2
const SB_PAGELEFT = 2
const SB_PAGEDOWN = 3
const SB_PAGERIGHT = 3
const SB_THUMBPOSITION = 4
const SB_THUMBTRACK = 5
const SB_TOP = 6
const SB_LEFT = 6
const SB_BOTTOM = 7
const SB_RIGHT = 7
const SB_ENDSCROLL = 8
const SW_HIDE = 0
const SW_SHOWNORMAL = 1
const SW_NORMAL = 1
const SW_SHOWMINIMIZED = 2
const SW_SHOWMAXIMIZED = 3
const SW_MAXIMIZE = 3
const SW_SHOWNOACTIVATE = 4
const SW_SHOW = 5
const SW_MINIMIZE = 6
const SW_SHOWMINNOACTIVE = 7
const SW_SHOWNA = 8
const SW_RESTORE = 9
const SW_SHOWDEFAULT = 10
const SW_FORCEMINIMIZE = 11
const SW_MAX = 11
const HIDE_WINDOW = 0
const SHOW_OPENWINDOW = 1
const SHOW_ICONWINDOW = 2
const SHOW_FULLSCREEN = 3
const SHOW_OPENNOACTIVATE = 4
const SW_PARENTCLOSING = 1
const SW_OTHERZOOM = 2
const SW_PARENTOPENING = 3
const SW_OTHERUNZOOM = 4
const AW_HOR_POSITIVE = &h00000001
const AW_HOR_NEGATIVE = &h00000002
const AW_VER_POSITIVE = &h00000004
const AW_VER_NEGATIVE = &h00000008
const AW_CENTER = &h00000010
const AW_HIDE = &h00010000
const AW_ACTIVATE = &h00020000
const AW_SLIDE = &h00040000
const AW_BLEND = &h00080000
const KF_EXTENDED = &h0100
const KF_DLGMODE = &h0800
const KF_MENUMODE = &h1000
const KF_ALTDOWN = &h2000
const KF_REPEAT = &h4000
const KF_UP = &h8000
const VK_LBUTTON = &h01
const VK_RBUTTON = &h02
const VK_CANCEL = &h03
const VK_MBUTTON = &h04
const VK_XBUTTON1 = &h05
const VK_XBUTTON2 = &h06
const VK_BACK = &h08
const VK_TAB = &h09
const VK_CLEAR = &h0C
const VK_RETURN = &h0D
const VK_SHIFT = &h10
const VK_CONTROL = &h11
const VK_MENU = &h12
const VK_PAUSE = &h13
const VK_CAPITAL = &h14
const VK_KANA = &h15
const VK_HANGEUL = &h15
const VK_HANGUL = &h15
const VK_JUNJA = &h17
const VK_FINAL = &h18
const VK_HANJA = &h19
const VK_KANJI = &h19
const VK_ESCAPE = &h1B
const VK_CONVERT = &h1C
const VK_NONCONVERT = &h1D
const VK_ACCEPT = &h1E
const VK_MODECHANGE = &h1F
const VK_SPACE = &h20
const VK_PRIOR = &h21
const VK_NEXT = &h22
const VK_END = &h23
const VK_HOME = &h24
const VK_LEFT = &h25
const VK_UP = &h26
const VK_RIGHT = &h27
const VK_DOWN = &h28
const VK_SELECT = &h29
const VK_PRINT = &h2A
const VK_EXECUTE = &h2B
const VK_SNAPSHOT = &h2C
const VK_INSERT = &h2D
const VK_DELETE = &h2E
const VK_HELP = &h2F
const VK_0 = &h30
const VK_1 = &h31
const VK_2 = &h32
const VK_3 = &h33
const VK_4 = &h34
const VK_5 = &h35
const VK_6 = &h36
const VK_7 = &h37
const VK_8 = &h38
const VK_9 = &h39
const VK_A = &h41
const VK_B = &h42
const VK_C = &h43
const VK_D = &h44
const VK_E = &h45
const VK_F = &h46
const VK_G = &h47
const VK_H = &h48
const VK_I = &h49
const VK_J = &h4A
const VK_K = &h4B
const VK_L = &h4C
const VK_M = &h4D
const VK_N = &h4E
const VK_O = &h4F
const VK_P = &h50
const VK_Q = &h51
const VK_R = &h52
const VK_S = &h53
const VK_T = &h54
const VK_U = &h55
const VK_V = &h56
const VK_W = &h57
const VK_X = &h58
const VK_Y = &h59
const VK_Z = &h5A
const VK_LWIN = &h5B
const VK_RWIN = &h5C
const VK_APPS = &h5D
const VK_SLEEP = &h5F
const VK_NUMPAD0 = &h60
const VK_NUMPAD1 = &h61
const VK_NUMPAD2 = &h62
const VK_NUMPAD3 = &h63
const VK_NUMPAD4 = &h64
const VK_NUMPAD5 = &h65
const VK_NUMPAD6 = &h66
const VK_NUMPAD7 = &h67
const VK_NUMPAD8 = &h68
const VK_NUMPAD9 = &h69
const VK_MULTIPLY = &h6A
const VK_ADD = &h6B
const VK_SEPARATOR = &h6C
const VK_SUBTRACT = &h6D
const VK_DECIMAL = &h6E
const VK_DIVIDE = &h6F
const VK_F1 = &h70
const VK_F2 = &h71
const VK_F3 = &h72
const VK_F4 = &h73
const VK_F5 = &h74
const VK_F6 = &h75
const VK_F7 = &h76
const VK_F8 = &h77
const VK_F9 = &h78
const VK_F10 = &h79
const VK_F11 = &h7A
const VK_F12 = &h7B
const VK_F13 = &h7C
const VK_F14 = &h7D
const VK_F15 = &h7E
const VK_F16 = &h7F
const VK_F17 = &h80
const VK_F18 = &h81
const VK_F19 = &h82
const VK_F20 = &h83
const VK_F21 = &h84
const VK_F22 = &h85
const VK_F23 = &h86
const VK_F24 = &h87
const VK_NUMLOCK = &h90
const VK_SCROLL = &h91
const VK_OEM_NEC_EQUAL = &h92
const VK_OEM_FJ_JISHO = &h92
const VK_OEM_FJ_MASSHOU = &h93
const VK_OEM_FJ_TOUROKU = &h94
const VK_OEM_FJ_LOYA = &h95
const VK_OEM_FJ_ROYA = &h96
const VK_LSHIFT = &hA0
const VK_RSHIFT = &hA1
const VK_LCONTROL = &hA2
const VK_RCONTROL = &hA3
const VK_LMENU = &hA4
const VK_RMENU = &hA5
const VK_BROWSER_BACK = &hA6
const VK_BROWSER_FORWARD = &hA7
const VK_BROWSER_REFRESH = &hA8
const VK_BROWSER_STOP = &hA9
const VK_BROWSER_SEARCH = &hAA
const VK_BROWSER_FAVORITES = &hAB
const VK_BROWSER_HOME = &hAC
const VK_VOLUME_MUTE = &hAD
const VK_VOLUME_DOWN = &hAE
const VK_VOLUME_UP = &hAF
const VK_MEDIA_NEXT_TRACK = &hB0
const VK_MEDIA_PREV_TRACK = &hB1
const VK_MEDIA_STOP = &hB2
const VK_MEDIA_PLAY_PAUSE = &hB3
const VK_LAUNCH_MAIL = &hB4
const VK_LAUNCH_MEDIA_SELECT = &hB5
const VK_LAUNCH_APP1 = &hB6
const VK_LAUNCH_APP2 = &hB7
const VK_OEM_1 = &hBA
const VK_OEM_PLUS = &hBB
const VK_OEM_COMMA = &hBC
const VK_OEM_MINUS = &hBD
const VK_OEM_PERIOD = &hBE
const VK_OEM_2 = &hBF
const VK_OEM_3 = &hC0
const VK_OEM_4 = &hDB
const VK_OEM_5 = &hDC
const VK_OEM_6 = &hDD
const VK_OEM_7 = &hDE
const VK_OEM_8 = &hDF
const VK_OEM_AX = &hE1
const VK_OEM_102 = &hE2
const VK_ICO_HELP = &hE3
const VK_ICO_00 = &hE4
const VK_PROCESSKEY = &hE5
const VK_ICO_CLEAR = &hE6
const VK_PACKET = &hE7
const VK_OEM_RESET = &hE9
const VK_OEM_JUMP = &hEA
const VK_OEM_PA1 = &hEB
const VK_OEM_PA2 = &hEC
const VK_OEM_PA3 = &hED
const VK_OEM_WSCTRL = &hEE
const VK_OEM_CUSEL = &hEF
const VK_OEM_ATTN = &hF0
const VK_OEM_FINISH = &hF1
const VK_OEM_COPY = &hF2
const VK_OEM_AUTO = &hF3
const VK_OEM_ENLW = &hF4
const VK_OEM_BACKTAB = &hF5
const VK_ATTN = &hF6
const VK_CRSEL = &hF7
const VK_EXSEL = &hF8
const VK_EREOF = &hF9
const VK_PLAY = &hFA
const VK_ZOOM = &hFB
const VK_NONAME = &hFC
const VK_PA1 = &hFD
const VK_OEM_CLEAR = &hFE
const WH_MIN = -1
const WH_MSGFILTER = -1
const WH_JOURNALRECORD = 0
const WH_JOURNALPLAYBACK = 1
const WH_KEYBOARD = 2
const WH_GETMESSAGE = 3
const WH_CALLWNDPROC = 4
const WH_CBT = 5
const WH_SYSMSGFILTER = 6
const WH_MOUSE = 7
const WH_HARDWARE = 8
const WH_DEBUG = 9
const WH_SHELL = 10
const WH_FOREGROUNDIDLE = 11
const WH_CALLWNDPROCRET = 12
const WH_KEYBOARD_LL = 13
const WH_MOUSE_LL = 14
const WH_MAX = 14
const WH_MINHOOK = WH_MIN
const WH_MAXHOOK = WH_MAX
const HC_ACTION = 0
const HC_GETNEXT = 1
const HC_SKIP = 2
const HC_NOREMOVE = 3
const HC_NOREM = HC_NOREMOVE
const HC_SYSMODALON = 4
const HC_SYSMODALOFF = 5
const HCBT_MOVESIZE = 0
const HCBT_MINMAX = 1
const HCBT_QS = 2
const HCBT_CREATEWND = 3
const HCBT_DESTROYWND = 4
const HCBT_ACTIVATE = 5
const HCBT_CLICKSKIPPED = 6
const HCBT_KEYSKIPPED = 7
const HCBT_SYSCOMMAND = 8
const HCBT_SETFOCUS = 9
type tagCREATESTRUCTA as tagCREATESTRUCTA_

type tagCBT_CREATEWNDA
 lpcs as tagCREATESTRUCTA ptr
 hwndInsertAfter as HWND
end type

type CBT_CREATEWNDA as tagCBT_CREATEWNDA
type LPCBT_CREATEWNDA as tagCBT_CREATEWNDA ptr
type tagCREATESTRUCTW as tagCREATESTRUCTW_

type tagCBT_CREATEWNDW
 lpcs as tagCREATESTRUCTW ptr
 hwndInsertAfter as HWND
end type

type CBT_CREATEWNDW as tagCBT_CREATEWNDW
type LPCBT_CREATEWNDW as tagCBT_CREATEWNDW ptr

 type CBT_CREATEWND as CBT_CREATEWNDA
 type LPCBT_CREATEWND as LPCBT_CREATEWNDA

type tagCBTACTIVATESTRUCT
 fMouse as WINBOOL
 hWndActive as HWND
end type

type CBTACTIVATESTRUCT as tagCBTACTIVATESTRUCT
type LPCBTACTIVATESTRUCT as tagCBTACTIVATESTRUCT ptr

type tagWTSSESSION_NOTIFICATION
 cbSize as DWORD
 dwSessionId as DWORD
end type

type WTSSESSION_NOTIFICATION as tagWTSSESSION_NOTIFICATION
type PWTSSESSION_NOTIFICATION as tagWTSSESSION_NOTIFICATION ptr
const WTS_CONSOLE_CONNECT = &h1
const WTS_CONSOLE_DISCONNECT = &h2
const WTS_REMOTE_CONNECT = &h3
const WTS_REMOTE_DISCONNECT = &h4
const WTS_SESSION_LOGON = &h5
const WTS_SESSION_LOGOFF = &h6
const WTS_SESSION_LOCK = &h7
const WTS_SESSION_UNLOCK = &h8
const WTS_SESSION_REMOTE_CONTROL = &h9
const WTS_SESSION_CREATE = &ha
const WTS_SESSION_TERMINATE = &hb
const MSGF_DIALOGBOX = 0
const MSGF_MESSAGEBOX = 1
const MSGF_MENU = 2
const MSGF_SCROLLBAR = 5
const MSGF_NEXTWINDOW = 6
const MSGF_MAX = 8
const MSGF_USER = 4096
const HSHELL_WINDOWCREATED = 1
const HSHELL_WINDOWDESTROYED = 2
const HSHELL_ACTIVATESHELLWINDOW = 3
const HSHELL_WINDOWACTIVATED = 4
const HSHELL_GETMINRECT = 5
const HSHELL_REDRAW = 6
const HSHELL_TASKMAN = 7
const HSHELL_LANGUAGE = 8
const HSHELL_SYSMENU = 9
const HSHELL_ENDTASK = 10
const HSHELL_ACCESSIBILITYSTATE = 11
const HSHELL_APPCOMMAND = 12
const HSHELL_WINDOWREPLACED = 13
const HSHELL_WINDOWREPLACING = 14


const HSHELL_HIGHBIT = &h8000
const HSHELL_FLASH = HSHELL_REDRAW or HSHELL_HIGHBIT
const HSHELL_RUDEAPPACTIVATED = HSHELL_WINDOWACTIVATED or HSHELL_HIGHBIT
const ACCESS_STICKYKEYS = &h0001
const ACCESS_FILTERKEYS = &h0002
const ACCESS_MOUSEKEYS = &h0003
const APPCOMMAND_BROWSER_BACKWARD = 1
const APPCOMMAND_BROWSER_FORWARD = 2
const APPCOMMAND_BROWSER_REFRESH = 3
const APPCOMMAND_BROWSER_STOP = 4
const APPCOMMAND_BROWSER_SEARCH = 5
const APPCOMMAND_BROWSER_FAVORITES = 6
const APPCOMMAND_BROWSER_HOME = 7
const APPCOMMAND_VOLUME_MUTE = 8
const APPCOMMAND_VOLUME_DOWN = 9
const APPCOMMAND_VOLUME_UP = 10
const APPCOMMAND_MEDIA_NEXTTRACK = 11
const APPCOMMAND_MEDIA_PREVIOUSTRACK = 12
const APPCOMMAND_MEDIA_STOP = 13
const APPCOMMAND_MEDIA_PLAY_PAUSE = 14
const APPCOMMAND_LAUNCH_MAIL = 15
const APPCOMMAND_LAUNCH_MEDIA_SELECT = 16
const APPCOMMAND_LAUNCH_APP1 = 17
const APPCOMMAND_LAUNCH_APP2 = 18
const APPCOMMAND_BASS_DOWN = 19
const APPCOMMAND_BASS_BOOST = 20
const APPCOMMAND_BASS_UP = 21
const APPCOMMAND_TREBLE_DOWN = 22
const APPCOMMAND_TREBLE_UP = 23
const APPCOMMAND_MICROPHONE_VOLUME_MUTE = 24
const APPCOMMAND_MICROPHONE_VOLUME_DOWN = 25
const APPCOMMAND_MICROPHONE_VOLUME_UP = 26
const APPCOMMAND_HELP = 27
const APPCOMMAND_FIND = 28
const APPCOMMAND_NEW = 29
const APPCOMMAND_OPEN = 30
const APPCOMMAND_CLOSE = 31
const APPCOMMAND_SAVE = 32
const APPCOMMAND_PRINT = 33
const APPCOMMAND_UNDO = 34
const APPCOMMAND_REDO = 35
const APPCOMMAND_COPY = 36
const APPCOMMAND_CUT = 37
const APPCOMMAND_PASTE = 38
const APPCOMMAND_REPLY_TO_MAIL = 39
const APPCOMMAND_FORWARD_MAIL = 40
const APPCOMMAND_SEND_MAIL = 41
const APPCOMMAND_SPELL_CHECK = 42
const APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE = 43
const APPCOMMAND_MIC_ON_OFF_TOGGLE = 44
const APPCOMMAND_CORRECTION_LIST = 45
const APPCOMMAND_MEDIA_PLAY = 46
const APPCOMMAND_MEDIA_PAUSE = 47
const APPCOMMAND_MEDIA_RECORD = 48
const APPCOMMAND_MEDIA_FAST_FORWARD = 49
const APPCOMMAND_MEDIA_REWIND = 50
const APPCOMMAND_MEDIA_CHANNEL_UP = 51
const APPCOMMAND_MEDIA_CHANNEL_DOWN = 52


const FAPPCOMMAND_MOUSE = &h8000
const FAPPCOMMAND_KEY = 0
const FAPPCOMMAND_OEM = &h1000
const FAPPCOMMAND_MASK = &hF000

type SHELLHOOKINFO
 hwnd as HWND
 rc as RECT
end type

type LPSHELLHOOKINFO as SHELLHOOKINFO ptr

type tagEVENTMSG
 message as UINT
 paramL as UINT
 paramH as UINT
 time as DWORD
 hwnd as HWND
end type

type EVENTMSG as tagEVENTMSG
type PEVENTMSGMSG as tagEVENTMSG ptr
type NPEVENTMSGMSG as tagEVENTMSG ptr
type LPEVENTMSGMSG as tagEVENTMSG ptr
type PEVENTMSG as tagEVENTMSG ptr
type NPEVENTMSG as tagEVENTMSG ptr
type LPEVENTMSG as tagEVENTMSG ptr

type tagCWPSTRUCT
 lParam as LPARAM
 wParam as WPARAM
 message as UINT
 hwnd as HWND
end type

type CWPSTRUCT as tagCWPSTRUCT
type PCWPSTRUCT as tagCWPSTRUCT ptr
type NPCWPSTRUCT as tagCWPSTRUCT ptr
type LPCWPSTRUCT as tagCWPSTRUCT ptr

type tagCWPRETSTRUCT
 lResult as LRESULT
 lParam as LPARAM
 wParam as WPARAM
 message as UINT
 hwnd as HWND
end type

type CWPRETSTRUCT as tagCWPRETSTRUCT
type PCWPRETSTRUCT as tagCWPRETSTRUCT ptr
type NPCWPRETSTRUCT as tagCWPRETSTRUCT ptr
type LPCWPRETSTRUCT as tagCWPRETSTRUCT ptr

const LLKHF_EXTENDED = KF_EXTENDED shr 8
const LLKHF_INJECTED = &h00000010
const LLKHF_ALTDOWN = KF_ALTDOWN shr 8
const LLKHF_UP = KF_UP shr 8
const LLMHF_INJECTED = &h00000001

type tagKBDLLHOOKSTRUCT
 vkCode as DWORD
 scanCode as DWORD
 flags as DWORD
 time as DWORD
 dwExtraInfo as ULONG_PTR
end type

type KBDLLHOOKSTRUCT as tagKBDLLHOOKSTRUCT
type LPKBDLLHOOKSTRUCT as tagKBDLLHOOKSTRUCT ptr
type PKBDLLHOOKSTRUCT as tagKBDLLHOOKSTRUCT ptr

type tagMSLLHOOKSTRUCT
 pt as POINT
 mouseData as DWORD
 flags as DWORD
 time as DWORD
 dwExtraInfo as ULONG_PTR
end type

type MSLLHOOKSTRUCT as tagMSLLHOOKSTRUCT
type LPMSLLHOOKSTRUCT as tagMSLLHOOKSTRUCT ptr
type PMSLLHOOKSTRUCT as tagMSLLHOOKSTRUCT ptr

type tagDEBUGHOOKINFO
 idThread as DWORD
 idThreadInstaller as DWORD
 lParam as LPARAM
 wParam as WPARAM
 code as long
end type

type DEBUGHOOKINFO as tagDEBUGHOOKINFO
type PDEBUGHOOKINFO as tagDEBUGHOOKINFO ptr
type NPDEBUGHOOKINFO as tagDEBUGHOOKINFO ptr
type LPDEBUGHOOKINFO as tagDEBUGHOOKINFO ptr

type tagMOUSEHOOKSTRUCT
 pt as POINT
 hwnd as HWND
 wHitTestCode as UINT
 dwExtraInfo as ULONG_PTR
end type

type MOUSEHOOKSTRUCT as tagMOUSEHOOKSTRUCT
type LPMOUSEHOOKSTRUCT as tagMOUSEHOOKSTRUCT ptr
type PMOUSEHOOKSTRUCT as tagMOUSEHOOKSTRUCT ptr

type tagMOUSEHOOKSTRUCTEX
 __unnamed as MOUSEHOOKSTRUCT
 mouseData as DWORD
end type

type MOUSEHOOKSTRUCTEX as tagMOUSEHOOKSTRUCTEX
type LPMOUSEHOOKSTRUCTEX as tagMOUSEHOOKSTRUCTEX ptr
type PMOUSEHOOKSTRUCTEX as tagMOUSEHOOKSTRUCTEX ptr

type tagHARDWAREHOOKSTRUCT
 hwnd as HWND
 message as UINT
 wParam as WPARAM
 lParam as LPARAM
end type

type HARDWAREHOOKSTRUCT as tagHARDWAREHOOKSTRUCT
type LPHARDWAREHOOKSTRUCT as tagHARDWAREHOOKSTRUCT ptr
type PHARDWAREHOOKSTRUCT as tagHARDWAREHOOKSTRUCT ptr

const HKL_PREV = 0
const HKL_NEXT = 1
const KLF_ACTIVATE = &h00000001
const KLF_SUBSTITUTE_OK = &h00000002
const KLF_REORDER = &h00000008
const KLF_REPLACELANG = &h00000010
const KLF_NOTELLSHELL = &h00000080
const KLF_SETFORPROCESS = &h00000100
const KLF_SHIFTLOCK = &h00010000
const KLF_RESET = &h40000000
const INPUTLANGCHANGE_SYSCHARSET = &h0001
const INPUTLANGCHANGE_FORWARD = &h0002
const INPUTLANGCHANGE_BACKWARD = &h0004
const KL_NAMELENGTH = 9
declare function LoadKeyboardLayoutA(byval pwszKLID as LPCSTR, byval Flags as UINT) as HKL

 declare function LoadKeyboardLayout alias "LoadKeyboardLayoutA"(byval pwszKLID as LPCSTR, byval Flags as UINT) as HKL

declare function LoadKeyboardLayoutW(byval pwszKLID as LPCWSTR, byval Flags as UINT) as HKL


declare function ActivateKeyboardLayout(byval hkl as HKL, byval Flags as UINT) as HKL
declare function ToUnicodeEx(byval wVirtKey as UINT, byval wScanCode as UINT, byval lpKeyState as const UBYTE ptr, byval pwszBuff as LPWSTR, byval cchBuff as long, byval wFlags as UINT, byval dwhkl as HKL) as long
declare function UnloadKeyboardLayout(byval hkl as HKL) as WINBOOL
declare function GetKeyboardLayoutNameA(byval pwszKLID as LPSTR) as WINBOOL

 declare function GetKeyboardLayoutName alias "GetKeyboardLayoutNameA"(byval pwszKLID as LPSTR) as WINBOOL

declare function GetKeyboardLayoutNameW(byval pwszKLID as LPWSTR) as WINBOOL


declare function GetKeyboardLayoutList(byval nBuff as long, byval lpList as HKL ptr) as long
declare function GetKeyboardLayout(byval idThread as DWORD) as HKL

type tagMOUSEMOVEPOINT
 x as long
 y as long
 time as DWORD
 dwExtraInfo as ULONG_PTR
end type

type MOUSEMOVEPOINT as tagMOUSEMOVEPOINT
type PMOUSEMOVEPOINT as tagMOUSEMOVEPOINT ptr
type LPMOUSEMOVEPOINT as tagMOUSEMOVEPOINT ptr
declare function GetMouseMovePointsEx(byval cbSize as UINT, byval lppt as LPMOUSEMOVEPOINT, byval lpptBuf as LPMOUSEMOVEPOINT, byval nBufPoints as long, byval resolution as DWORD) as long

const GMMP_USE_DISPLAY_POINTS = 1
const GMMP_USE_HIGH_RESOLUTION_POINTS = 2
const DESKTOP_READOBJECTS = &h0001
const DESKTOP_CREATEWINDOW = &h0002
const DESKTOP_CREATEMENU = &h0004
const DESKTOP_HOOKCONTROL = &h0008
const DESKTOP_JOURNALRECORD = &h0010
const DESKTOP_JOURNALPLAYBACK = &h0020
const DESKTOP_ENUMERATE = &h0040
const DESKTOP_WRITEOBJECTS = &h0080
const DESKTOP_SWITCHDESKTOP = &h0100
const DF_ALLOWOTHERACCOUNTHOOK = &h0001
declare function CreateDesktopA(byval lpszDesktop as LPCSTR, byval lpszDevice as LPCSTR, byval pDevmode as LPDEVMODEA, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES) as HDESK

 declare function CreateDesktop alias "CreateDesktopA"(byval lpszDesktop as LPCSTR, byval lpszDevice as LPCSTR, byval pDevmode as LPDEVMODEA, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES) as HDESK

declare function CreateDesktopW(byval lpszDesktop as LPCWSTR, byval lpszDevice as LPCWSTR, byval pDevmode as LPDEVMODEW, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES) as HDESK


declare function CreateDesktopExA(byval lpszDesktop as LPCSTR, byval lpszDevice as LPCSTR, byval pDevmode as DEVMODEA ptr, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES, byval ulHeapSize as ULONG, byval pvoid as PVOID) as HDESK

 declare function CreateDesktopEx alias "CreateDesktopExA"(byval lpszDesktop as LPCSTR, byval lpszDevice as LPCSTR, byval pDevmode as DEVMODEA ptr, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES, byval ulHeapSize as ULONG, byval pvoid as PVOID) as HDESK

declare function CreateDesktopExW(byval lpszDesktop as LPCWSTR, byval lpszDevice as LPCWSTR, byval pDevmode as DEVMODEW ptr, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES, byval ulHeapSize as ULONG, byval pvoid as PVOID) as HDESK


declare function OpenDesktopA(byval lpszDesktop as LPCSTR, byval dwFlags as DWORD, byval fInherit as WINBOOL, byval dwDesiredAccess as ACCESS_MASK) as HDESK

 declare function OpenDesktop alias "OpenDesktopA"(byval lpszDesktop as LPCSTR, byval dwFlags as DWORD, byval fInherit as WINBOOL, byval dwDesiredAccess as ACCESS_MASK) as HDESK

declare function OpenDesktopW(byval lpszDesktop as LPCWSTR, byval dwFlags as DWORD, byval fInherit as WINBOOL, byval dwDesiredAccess as ACCESS_MASK) as HDESK


declare function OpenInputDesktop(byval dwFlags as DWORD, byval fInherit as WINBOOL, byval dwDesiredAccess as ACCESS_MASK) as HDESK
declare function EnumDesktopsA(byval hwinsta as HWINSTA, byval lpEnumFunc as DESKTOPENUMPROCA, byval lParam as LPARAM) as WINBOOL

 declare function EnumDesktops alias "EnumDesktopsA"(byval hwinsta as HWINSTA, byval lpEnumFunc as DESKTOPENUMPROCA, byval lParam as LPARAM) as WINBOOL

declare function EnumDesktopsW(byval hwinsta as HWINSTA, byval lpEnumFunc as DESKTOPENUMPROCW, byval lParam as LPARAM) as WINBOOL


declare function EnumDesktopWindows(byval hDesktop as HDESK, byval lpfn as WNDENUMPROC, byval lParam as LPARAM) as WINBOOL
declare function SwitchDesktop(byval hDesktop as HDESK) as WINBOOL
declare function SetThreadDesktop(byval hDesktop as HDESK) as WINBOOL
declare function CloseDesktop(byval hDesktop as HDESK) as WINBOOL
declare function GetThreadDesktop(byval dwThreadId as DWORD) as HDESK

const WINSTA_ENUMDESKTOPS = &h0001
const WINSTA_READATTRIBUTES = &h0002
const WINSTA_ACCESSCLIPBOARD = &h0004
const WINSTA_CREATEDESKTOP = &h0008
const WINSTA_WRITEATTRIBUTES = &h0010
const WINSTA_ACCESSGLOBALATOMS = &h0020
const WINSTA_EXITWINDOWS = &h0040
const WINSTA_ENUMERATE = &h0100
const WINSTA_READSCREEN = &h0200
const WINSTA_ALL_ACCESS = (((((((WINSTA_ENUMDESKTOPS or WINSTA_READATTRIBUTES) or WINSTA_ACCESSCLIPBOARD) or WINSTA_CREATEDESKTOP) or WINSTA_WRITEATTRIBUTES) or WINSTA_ACCESSGLOBALATOMS) or WINSTA_EXITWINDOWS) or WINSTA_ENUMERATE) or WINSTA_READSCREEN
const CWF_CREATE_ONLY = &h00000001
const WSF_VISIBLE = &h0001
declare function CreateWindowStationA(byval lpwinsta as LPCSTR, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES) as HWINSTA

 declare function CreateWindowStation alias "CreateWindowStationA"(byval lpwinsta as LPCSTR, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES) as HWINSTA

declare function CreateWindowStationW(byval lpwinsta as LPCWSTR, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES) as HWINSTA


declare function OpenWindowStationA(byval lpszWinSta as LPCSTR, byval fInherit as WINBOOL, byval dwDesiredAccess as ACCESS_MASK) as HWINSTA

 declare function OpenWindowStation alias "OpenWindowStationA"(byval lpszWinSta as LPCSTR, byval fInherit as WINBOOL, byval dwDesiredAccess as ACCESS_MASK) as HWINSTA

declare function OpenWindowStationW(byval lpszWinSta as LPCWSTR, byval fInherit as WINBOOL, byval dwDesiredAccess as ACCESS_MASK) as HWINSTA


declare function EnumWindowStationsA(byval lpEnumFunc as WINSTAENUMPROCA, byval lParam as LPARAM) as WINBOOL

 declare function EnumWindowStations alias "EnumWindowStationsA"(byval lpEnumFunc as WINSTAENUMPROCA, byval lParam as LPARAM) as WINBOOL

declare function EnumWindowStationsW(byval lpEnumFunc as WINSTAENUMPROCW, byval lParam as LPARAM) as WINBOOL


declare function CloseWindowStation(byval hWinSta as HWINSTA) as WINBOOL
declare function SetProcessWindowStation(byval hWinSta as HWINSTA) as WINBOOL
declare function GetProcessWindowStation() as HWINSTA
declare function SetUserObjectSecurity(byval hObj as HANDLE, byval pSIRequested as PSECURITY_INFORMATION, byval pSID as PSECURITY_DESCRIPTOR) as WINBOOL
declare function GetUserObjectSecurity(byval hObj as HANDLE, byval pSIRequested as PSECURITY_INFORMATION, byval pSID as PSECURITY_DESCRIPTOR, byval nLength as DWORD, byval lpnLengthNeeded as LPDWORD) as WINBOOL

const UOI_FLAGS = 1
const UOI_NAME = 2
const UOI_TYPE = 3
const UOI_USER_SID = 4


type tagUSEROBJECTFLAGS
 fInherit as WINBOOL
 fReserved as WINBOOL
 dwFlags as DWORD
end type

type USEROBJECTFLAGS as tagUSEROBJECTFLAGS
type PUSEROBJECTFLAGS as tagUSEROBJECTFLAGS ptr
declare function GetUserObjectInformationA(byval hObj as HANDLE, byval nIndex as long, byval pvInfo as PVOID, byval nLength as DWORD, byval lpnLengthNeeded as LPDWORD) as WINBOOL

 declare function GetUserObjectInformation alias "GetUserObjectInformationA"(byval hObj as HANDLE, byval nIndex as long, byval pvInfo as PVOID, byval nLength as DWORD, byval lpnLengthNeeded as LPDWORD) as WINBOOL

declare function GetUserObjectInformationW(byval hObj as HANDLE, byval nIndex as long, byval pvInfo as PVOID, byval nLength as DWORD, byval lpnLengthNeeded as LPDWORD) as WINBOOL


declare function SetUserObjectInformationA(byval hObj as HANDLE, byval nIndex as long, byval pvInfo as PVOID, byval nLength as DWORD) as WINBOOL

 declare function SetUserObjectInformation alias "SetUserObjectInformationA"(byval hObj as HANDLE, byval nIndex as long, byval pvInfo as PVOID, byval nLength as DWORD) as WINBOOL

declare function SetUserObjectInformationW(byval hObj as HANDLE, byval nIndex as long, byval pvInfo as PVOID, byval nLength as DWORD) as WINBOOL


type tagWNDCLASSEXA
 cbSize as UINT
 style as UINT
 lpfnWndProc as WNDPROC
 cbClsExtra as long
 cbWndExtra as long
 hInstance as HINSTANCE
 hIcon as HICON
 hCursor as HCURSOR
 hbrBackground as HBRUSH
 lpszMenuName as LPCSTR
 lpszClassName as LPCSTR
 hIconSm as HICON
end type

type WNDCLASSEXA as tagWNDCLASSEXA
type PWNDCLASSEXA as tagWNDCLASSEXA ptr
type NPWNDCLASSEXA as tagWNDCLASSEXA ptr
type LPWNDCLASSEXA as tagWNDCLASSEXA ptr

type tagWNDCLASSEXW
 cbSize as UINT
 style as UINT
 lpfnWndProc as WNDPROC
 cbClsExtra as long
 cbWndExtra as long
 hInstance as HINSTANCE
 hIcon as HICON
 hCursor as HCURSOR
 hbrBackground as HBRUSH
 lpszMenuName as LPCWSTR
 lpszClassName as LPCWSTR
 hIconSm as HICON
end type

type WNDCLASSEXW as tagWNDCLASSEXW
type PWNDCLASSEXW as tagWNDCLASSEXW ptr
type NPWNDCLASSEXW as tagWNDCLASSEXW ptr
type LPWNDCLASSEXW as tagWNDCLASSEXW ptr

 type WNDCLASSEX as WNDCLASSEXA
 type PWNDCLASSEX as PWNDCLASSEXA
 type NPWNDCLASSEX as NPWNDCLASSEXA
 type LPWNDCLASSEX as LPWNDCLASSEXA

type tagWNDCLASSA
 style as UINT
 lpfnWndProc as WNDPROC
 cbClsExtra as long
 cbWndExtra as long
 hInstance as HINSTANCE
 hIcon as HICON
 hCursor as HCURSOR
 hbrBackground as HBRUSH
 lpszMenuName as LPCSTR
 lpszClassName as LPCSTR
end type

type WNDCLASSA as tagWNDCLASSA
type PWNDCLASSA as tagWNDCLASSA ptr
type NPWNDCLASSA as tagWNDCLASSA ptr
type LPWNDCLASSA as tagWNDCLASSA ptr

type tagWNDCLASSW
 style as UINT
 lpfnWndProc as WNDPROC
 cbClsExtra as long
 cbWndExtra as long
 hInstance as HINSTANCE
 hIcon as HICON
 hCursor as HCURSOR
 hbrBackground as HBRUSH
 lpszMenuName as LPCWSTR
 lpszClassName as LPCWSTR
end type

type WNDCLASSW as tagWNDCLASSW
type PWNDCLASSW as tagWNDCLASSW ptr
type NPWNDCLASSW as tagWNDCLASSW ptr
type LPWNDCLASSW as tagWNDCLASSW ptr

 type WNDCLASS as WNDCLASSA
 type PWNDCLASS as PWNDCLASSA
 type NPWNDCLASS as NPWNDCLASSA
 type LPWNDCLASS as LPWNDCLASSA

declare function IsHungAppWindow(byval hwnd as HWND) as WINBOOL
declare sub DisableProcessWindowsGhosting()

type tagMSG
 hwnd as HWND
 message as UINT
 wParam as WPARAM
 lParam as LPARAM
 time as DWORD
 pt as POINT
end type

type MSG as tagMSG
type PMSG as tagMSG ptr
type NPMSG as tagMSG ptr
type LPMSG as tagMSG ptr

const GWL_WNDPROC = -4
const GWL_HINSTANCE = -6
const GWL_HWNDPARENT = -8
const GWL_STYLE = -16
const GWL_EXSTYLE = -20
const GWL_USERDATA = -21
const GWL_ID = -12


const GWLP_WNDPROC = -4
const GWLP_HINSTANCE = -6
const GWLP_HWNDPARENT = -8
const GWLP_USERDATA = -21
const GWLP_ID = -12
const GCL_MENUNAME = -8
const GCL_HBRBACKGROUND = -10
const GCL_HCURSOR = -12
const GCL_HICON = -14
const GCL_HMODULE = -16
const GCL_CBWNDEXTRA = -18
const GCL_CBCLSEXTRA = -20
const GCL_WNDPROC = -24
const GCL_STYLE = -26
const GCW_ATOM = -32
const GCL_HICONSM = -34


const GCLP_MENUNAME = -8
const GCLP_HBRBACKGROUND = -10
const GCLP_HCURSOR = -12
const GCLP_HICON = -14
const GCLP_HMODULE = -16
const GCLP_WNDPROC = -24
const GCLP_HICONSM = -34
const WM_NULL = &h00000
const WM_CREATE = &h0001
const WM_DESTROY = &h0002
const WM_MOVE = &h0003
const WM_SIZE = &h0005
const WM_ACTIVATE = &h0006
const WA_INACTIVE = 0
const WA_ACTIVE = 1
const WA_CLICKACTIVE = 2
const WM_SETFOCUS = &h0007
const WM_KILLFOCUS = &h0008
const WM_ENABLE = &h000A
const WM_SETREDRAW = &h000B
const WM_SETTEXT = &h000C
const WM_GETTEXT = &h000D
const WM_GETTEXTLENGTH = &h000E
const WM_PAINT = &h000F
const WM_CLOSE = &h0010
const WM_QUERYENDSESSION = &h0011
const WM_QUERYOPEN = &h0013
const WM_ENDSESSION = &h0016
const WM_QUIT = &h0012
const WM_ERASEBKGND = &h0014
const WM_SYSCOLORCHANGE = &h0015
const WM_SHOWWINDOW = &h0018
const WM_WININICHANGE = &h001A
const WM_SETTINGCHANGE = WM_WININICHANGE
const WM_DEVMODECHANGE = &h001B
const WM_ACTIVATEAPP = &h001C
const WM_FONTCHANGE = &h001D
const WM_TIMECHANGE = &h001E
const WM_CANCELMODE = &h001F
const WM_SETCURSOR = &h0020
const WM_MOUSEACTIVATE = &h0021
const WM_CHILDACTIVATE = &h0022
const WM_QUEUESYNC = &h0023
const WM_GETMINMAXINFO = &h0024

type tagMINMAXINFO
 ptReserved as POINT
 ptMaxSize as POINT
 ptMaxPosition as POINT
 ptMinTrackSize as POINT
 ptMaxTrackSize as POINT
end type

type MINMAXINFO as tagMINMAXINFO
type PMINMAXINFO as tagMINMAXINFO ptr
type LPMINMAXINFO as tagMINMAXINFO ptr

const WM_PAINTICON = &h0026
const WM_ICONERASEBKGND = &h0027
const WM_NEXTDLGCTL = &h0028
const WM_SPOOLERSTATUS = &h002A
const WM_DRAWITEM = &h002B
const WM_MEASUREITEM = &h002C
const WM_DELETEITEM = &h002D
const WM_VKEYTOITEM = &h002E
const WM_CHARTOITEM = &h002F
const WM_SETFONT = &h0030
const WM_GETFONT = &h0031
const WM_SETHOTKEY = &h0032
const WM_GETHOTKEY = &h0033
const WM_QUERYDRAGICON = &h0037
const WM_COMPAREITEM = &h0039
const WM_GETOBJECT = &h003D
const WM_COMPACTING = &h0041
const WM_COMMNOTIFY = &h0044
const WM_WINDOWPOSCHANGING = &h0046
const WM_WINDOWPOSCHANGED = &h0047
const WM_POWER = &h0048
const PWR_OK = 1
const PWR_FAIL = -1
const PWR_SUSPENDREQUEST = 1
const PWR_SUSPENDRESUME = 2
const PWR_CRITICALRESUME = 3
const WM_COPYDATA = &h004A
const WM_CANCELJOURNAL = &h004B

type tagCOPYDATASTRUCT
 dwData as ULONG_PTR
 cbData as DWORD
 lpData as PVOID
end type

type COPYDATASTRUCT as tagCOPYDATASTRUCT
type PCOPYDATASTRUCT as tagCOPYDATASTRUCT ptr

type tagMDINEXTMENU
 hmenuIn as HMENU
 hmenuNext as HMENU
 hwndNext as HWND
end type

type MDINEXTMENU as tagMDINEXTMENU
type PMDINEXTMENU as tagMDINEXTMENU ptr
type LPMDINEXTMENU as tagMDINEXTMENU ptr

const WM_NOTIFY = &h004E
const WM_INPUTLANGCHANGEREQUEST = &h0050
const WM_INPUTLANGCHANGE = &h0051
const WM_TCARD = &h0052
const WM_HELP = &h0053
const WM_USERCHANGED = &h0054
const WM_NOTIFYFORMAT = &h0055
const NFR_ANSI = 1
const NFR_UNICODE = 2
const NF_QUERY = 3
const NF_REQUERY = 4
const WM_CONTEXTMENU = &h007B
const WM_STYLECHANGING = &h007C
const WM_STYLECHANGED = &h007D
const WM_DISPLAYCHANGE = &h007E
const WM_GETICON = &h007F
const WM_SETICON = &h0080
const WM_NCCREATE = &h0081
const WM_NCDESTROY = &h0082
const WM_NCCALCSIZE = &h0083
const WM_NCHITTEST = &h0084
const WM_NCPAINT = &h0085
const WM_NCACTIVATE = &h0086
const WM_GETDLGCODE = &h0087
const WM_SYNCPAINT = &h0088
const WM_NCMOUSEMOVE = &h00A0
const WM_NCLBUTTONDOWN = &h00A1
const WM_NCLBUTTONUP = &h00A2
const WM_NCLBUTTONDBLCLK = &h00A3
const WM_NCRBUTTONDOWN = &h00A4
const WM_NCRBUTTONUP = &h00A5
const WM_NCRBUTTONDBLCLK = &h00A6
const WM_NCMBUTTONDOWN = &h00A7
const WM_NCMBUTTONUP = &h00A8
const WM_NCMBUTTONDBLCLK = &h00A9
const WM_NCXBUTTONDOWN = &h00AB
const WM_NCXBUTTONUP = &h00AC
const WM_NCXBUTTONDBLCLK = &h00AD
const WM_INPUT_DEVICE_CHANGE = &h00fe
const WM_INPUT = &h00FF
const WM_KEYFIRST = &h0100
const WM_KEYDOWN = &h0100
const WM_KEYUP = &h0101
const WM_CHAR = &h0102
const WM_DEADCHAR = &h0103
const WM_SYSKEYDOWN = &h0104
const WM_SYSKEYUP = &h0105
const WM_SYSCHAR = &h0106
const WM_SYSDEADCHAR = &h0107
const WM_UNICHAR = &h0109
const WM_KEYLAST = &h0109
const UNICODE_NOCHAR = &hFFFF
const WM_IME_STARTCOMPOSITION = &h010D
const WM_IME_ENDCOMPOSITION = &h010E
const WM_IME_COMPOSITION = &h010F
const WM_IME_KEYLAST = &h010F
const WM_INITDIALOG = &h0110
const WM_COMMAND = &h0111
const WM_SYSCOMMAND = &h0112
const WM_TIMER = &h0113
const WM_HSCROLL = &h0114
const WM_VSCROLL = &h0115
const WM_INITMENU = &h0116
const WM_INITMENUPOPUP = &h0117
const WM_MENUSELECT = &h011F


const WM_MENUCHAR = &h0120
const WM_ENTERIDLE = &h0121
const WM_MENURBUTTONUP = &h0122
const WM_MENUDRAG = &h0123
const WM_MENUGETOBJECT = &h0124
const WM_UNINITMENUPOPUP = &h0125
const WM_MENUCOMMAND = &h0126
const WM_CHANGEUISTATE = &h0127
const WM_UPDATEUISTATE = &h0128
const WM_QUERYUISTATE = &h0129
const UIS_SET = 1
const UIS_CLEAR = 2
const UIS_INITIALIZE = 3
const UISF_HIDEFOCUS = &h1
const UISF_HIDEACCEL = &h2
const UISF_ACTIVE = &h4
const WM_CTLCOLORMSGBOX = &h0132
const WM_CTLCOLOREDIT = &h0133
const WM_CTLCOLORLISTBOX = &h0134
const WM_CTLCOLORBTN = &h0135
const WM_CTLCOLORDLG = &h0136
const WM_CTLCOLORSCROLLBAR = &h0137
const WM_CTLCOLORSTATIC = &h0138
const MN_GETHMENU = &h01E1
const WM_MOUSEFIRST = &h0200
const WM_MOUSEMOVE = &h0200
const WM_LBUTTONDOWN = &h0201
const WM_LBUTTONUP = &h0202
const WM_LBUTTONDBLCLK = &h0203
const WM_RBUTTONDOWN = &h0204
const WM_RBUTTONUP = &h0205
const WM_RBUTTONDBLCLK = &h0206
const WM_MBUTTONDOWN = &h0207
const WM_MBUTTONUP = &h0208
const WM_MBUTTONDBLCLK = &h0209
const WM_MOUSEWHEEL = &h020A
const WM_XBUTTONDOWN = &h020B
const WM_XBUTTONUP = &h020C
const WM_XBUTTONDBLCLK = &h020D

 const WM_MOUSELAST = &h020d

const WHEEL_DELTA = 120
const XBUTTON1 = &h0001
const XBUTTON2 = &h0002
const WM_PARENTNOTIFY = &h0210
const WM_ENTERMENULOOP = &h0211
const WM_EXITMENULOOP = &h0212
const WM_NEXTMENU = &h0213
const WM_SIZING = &h0214
const WM_CAPTURECHANGED = &h0215
const WM_MOVING = &h0216
const WM_POWERBROADCAST = &h0218
const PBT_APMQUERYSUSPEND = &h00000
const PBT_APMQUERYSTANDBY = &h0001
const PBT_APMQUERYSUSPENDFAILED = &h0002
const PBT_APMQUERYSTANDBYFAILED = &h0003
const PBT_APMSUSPEND = &h0004
const PBT_APMSTANDBY = &h0005
const PBT_APMRESUMECRITICAL = &h0006
const PBT_APMRESUMESUSPEND = &h0007
const PBT_APMRESUMESTANDBY = &h0008
const PBTF_APMRESUMEFROMFAILURE = &h00000001
const PBT_APMBATTERYLOW = &h0009
const PBT_APMPOWERSTATUSCHANGE = &h000A
const PBT_APMOEMEVENT = &h000B
const PBT_APMRESUMEAUTOMATIC = &h0012

 const PBT_POWERSETTINGCHANGE = 32787

 type POWERBROADCAST_SETTING
 PowerSetting as GUID
 DataLength as DWORD
 Data(0 to 0) as UCHAR
 end type

 type PPOWERBROADCAST_SETTING as POWERBROADCAST_SETTING ptr

const WM_DEVICECHANGE = &h0219
const WM_MDICREATE = &h0220
const WM_MDIDESTROY = &h0221
const WM_MDIACTIVATE = &h0222
const WM_MDIRESTORE = &h0223
const WM_MDINEXT = &h0224
const WM_MDIMAXIMIZE = &h0225
const WM_MDITILE = &h0226
const WM_MDICASCADE = &h0227
const WM_MDIICONARRANGE = &h0228
const WM_MDIGETACTIVE = &h0229
const WM_MDISETMENU = &h0230
const WM_ENTERSIZEMOVE = &h0231
const WM_EXITSIZEMOVE = &h0232
const WM_DROPFILES = &h0233
const WM_MDIREFRESHMENU = &h0234




const WM_IME_SETCONTEXT = &h0281
const WM_IME_NOTIFY = &h0282
const WM_IME_CONTROL = &h0283
const WM_IME_COMPOSITIONFULL = &h0284
const WM_IME_SELECT = &h0285
const WM_IME_CHAR = &h0286
const WM_IME_REQUEST = &h0288
const WM_IME_KEYDOWN = &h0290
const WM_IME_KEYUP = &h0291
const WM_MOUSEHOVER = &h02A1
const WM_MOUSELEAVE = &h02A3
const WM_NCMOUSEHOVER = &h02A0
const WM_NCMOUSELEAVE = &h02A2
const WM_WTSSESSION_CHANGE = &h02B1
const WM_TABLET_FIRST = &h02c0
const WM_TABLET_LAST = &h02df
const WM_CUT = &h0300
const WM_COPY = &h0301
const WM_PASTE = &h0302
const WM_CLEAR = &h0303
const WM_UNDO = &h0304
const WM_RENDERFORMAT = &h0305
const WM_RENDERALLFORMATS = &h0306
const WM_DESTROYCLIPBOARD = &h0307
const WM_DRAWCLIPBOARD = &h0308
const WM_PAINTCLIPBOARD = &h0309
const WM_VSCROLLCLIPBOARD = &h030A
const WM_SIZECLIPBOARD = &h030B
const WM_ASKCBFORMATNAME = &h030C
const WM_CHANGECBCHAIN = &h030D
const WM_HSCROLLCLIPBOARD = &h030E
const WM_QUERYNEWPALETTE = &h030F
const WM_PALETTEISCHANGING = &h0310
const WM_PALETTECHANGED = &h0311
const WM_HOTKEY = &h0312
const WM_PRINT = &h0317
const WM_PRINTCLIENT = &h0318
const WM_APPCOMMAND = &h0319
const WM_THEMECHANGED = &h031A
const WM_CLIPBOARDUPDATE = &h031d




const WM_HANDHELDFIRST = &h0358
const WM_HANDHELDLAST = &h035F
const WM_AFXFIRST = &h0360
const WM_AFXLAST = &h037F
const WM_PENWINFIRST = &h0380
const WM_PENWINLAST = &h038F
const WM_APP = &h8000
const WM_USER = &h0400
const WMSZ_LEFT = 1
const WMSZ_RIGHT = 2
const WMSZ_TOP = 3
const WMSZ_TOPLEFT = 4
const WMSZ_TOPRIGHT = 5
const WMSZ_BOTTOM = 6
const WMSZ_BOTTOMLEFT = 7
const WMSZ_BOTTOMRIGHT = 8
const HTERROR = -2
const HTTRANSPARENT = -1
const HTNOWHERE = 0
const HTCLIENT = 1
const HTCAPTION = 2
const HTSYSMENU = 3
const HTGROWBOX = 4
const HTSIZE = HTGROWBOX
const HTMENU = 5
const HTHSCROLL = 6
const HTVSCROLL = 7
const HTMINBUTTON = 8
const HTMAXBUTTON = 9
const HTLEFT = 10
const HTRIGHT = 11
const HTTOP = 12
const HTTOPLEFT = 13
const HTTOPRIGHT = 14
const HTBOTTOM = 15
const HTBOTTOMLEFT = 16
const HTBOTTOMRIGHT = 17
const HTBORDER = 18
const HTREDUCE = HTMINBUTTON
const HTZOOM = HTMAXBUTTON
const HTSIZEFIRST = HTLEFT
const HTSIZELAST = HTBOTTOMRIGHT
const HTOBJECT = 19
const HTCLOSE = 20
const HTHELP = 21
const SMTO_NORMAL = &h00000
const SMTO_BLOCK = &h0001
const SMTO_ABORTIFHUNG = &h0002
const SMTO_NOTIMEOUTIFNOTHUNG = &h0008


const MA_ACTIVATE = 1
const MA_ACTIVATEANDEAT = 2
const MA_NOACTIVATE = 3
const MA_NOACTIVATEANDEAT = 4
const ICON_SMALL = 0
const ICON_BIG = 1
const ICON_SMALL2 = 2
declare function RegisterWindowMessageA(byval lpString as LPCSTR) as UINT

 declare function RegisterWindowMessage alias "RegisterWindowMessageA"(byval lpString as LPCSTR) as UINT

declare function RegisterWindowMessageW(byval lpString as LPCWSTR) as UINT


const SIZE_RESTORED = 0
const SIZE_MINIMIZED = 1
const SIZE_MAXIMIZED = 2
const SIZE_MAXSHOW = 3
const SIZE_MAXHIDE = 4
const SIZENORMAL = SIZE_RESTORED
const SIZEICONIC = SIZE_MINIMIZED
const SIZEFULLSCREEN = SIZE_MAXIMIZED
const SIZEZOOMSHOW = SIZE_MAXSHOW
const SIZEZOOMHIDE = SIZE_MAXHIDE

type tagWINDOWPOS
 hwnd as HWND
 hwndInsertAfter as HWND
 x as long
 y as long
 cx as long
 cy as long
 flags as UINT
end type

type WINDOWPOS as tagWINDOWPOS
type LPWINDOWPOS as tagWINDOWPOS ptr
type PWINDOWPOS as tagWINDOWPOS ptr

type tagNCCALCSIZE_PARAMS
 rgrc(0 to 2) as RECT
 lppos as PWINDOWPOS
end type

type NCCALCSIZE_PARAMS as tagNCCALCSIZE_PARAMS
type LPNCCALCSIZE_PARAMS as tagNCCALCSIZE_PARAMS ptr
const WVR_ALIGNTOP = &h0010
const WVR_ALIGNLEFT = &h0020
const WVR_ALIGNBOTTOM = &h0040
const WVR_ALIGNRIGHT = &h0080
const WVR_HREDRAW = &h0100
const WVR_VREDRAW = &h0200
const WVR_REDRAW = WVR_HREDRAW or WVR_VREDRAW
const WVR_VALIDRECTS = &h0400
const MK_LBUTTON = &h0001
const MK_RBUTTON = &h0002
const MK_SHIFT = &h0004
const MK_CONTROL = &h0008
const MK_MBUTTON = &h0010
const MK_XBUTTON1 = &h0020
const MK_XBUTTON2 = &h0040
const TME_HOVER = &h00000001
const TME_LEAVE = &h00000002
const TME_NONCLIENT = &h00000010
const TME_QUERY = &h40000000
const TME_CANCEL = &h80000000
const HOVER_DEFAULT = &hFFFFFFFF

type tagTRACKMOUSEEVENT
 cbSize as DWORD
 dwFlags as DWORD
 hwndTrack as HWND
 dwHoverTime as DWORD
end type

type TRACKMOUSEEVENT as tagTRACKMOUSEEVENT
type LPTRACKMOUSEEVENT as tagTRACKMOUSEEVENT ptr
declare function TrackMouseEvent(byval lpEventTrack as LPTRACKMOUSEEVENT) as WINBOOL
const WS_OVERLAPPED = &h000000000
const WS_POPUP = &h80000000
const WS_CHILD = &h40000000
const WS_MINIMIZE = &h20000000
const WS_VISIBLE = &h10000000
const WS_DISABLED = &h08000000
const WS_CLIPSIBLINGS = &h04000000
const WS_CLIPCHILDREN = &h02000000
const WS_MAXIMIZE = &h01000000
const WS_CAPTION = &h00C00000
const WS_BORDER = &h00800000
const WS_DLGFRAME = &h00400000
const WS_VSCROLL = &h00200000
const WS_HSCROLL = &h00100000
const WS_SYSMENU = &h00080000
const WS_THICKFRAME = &h00040000
const WS_GROUP = &h00020000
const WS_TABSTOP = &h00010000
const WS_MINIMIZEBOX = &h00020000
const WS_MAXIMIZEBOX = &h00010000
const WS_TILED = WS_OVERLAPPED
const WS_ICONIC = WS_MINIMIZE
const WS_SIZEBOX = WS_THICKFRAME
const WS_OVERLAPPEDWINDOW = ((((WS_OVERLAPPED or WS_CAPTION) or WS_SYSMENU) or WS_THICKFRAME) or WS_MINIMIZEBOX) or WS_MAXIMIZEBOX
const WS_TILEDWINDOW = WS_OVERLAPPEDWINDOW
const WS_POPUPWINDOW = (WS_POPUP or WS_BORDER) or WS_SYSMENU
const WS_CHILDWINDOW = WS_CHILD
const WS_EX_DLGMODALFRAME = &h00000001
const WS_EX_NOPARENTNOTIFY = &h00000004
const WS_EX_TOPMOST = &h00000008
const WS_EX_ACCEPTFILES = &h00000010
const WS_EX_TRANSPARENT = &h00000020
const WS_EX_MDICHILD = &h00000040
const WS_EX_TOOLWINDOW = &h00000080
const WS_EX_WINDOWEDGE = &h00000100
const WS_EX_CLIENTEDGE = &h00000200
const WS_EX_CONTEXTHELP = &h00000400
const WS_EX_RIGHT = &h00001000
const WS_EX_LEFT = &h000000000
const WS_EX_RTLREADING = &h00002000
const WS_EX_LTRREADING = &h000000000
const WS_EX_LEFTSCROLLBAR = &h00004000
const WS_EX_RIGHTSCROLLBAR = &h000000000
const WS_EX_CONTROLPARENT = &h00010000
const WS_EX_STATICEDGE = &h00020000
const WS_EX_APPWINDOW = &h00040000
const WS_EX_OVERLAPPEDWINDOW = WS_EX_WINDOWEDGE or WS_EX_CLIENTEDGE
const WS_EX_PALETTEWINDOW = (WS_EX_WINDOWEDGE or WS_EX_TOOLWINDOW) or WS_EX_TOPMOST
const WS_EX_LAYERED = &h00080000
const WS_EX_NOINHERITLAYOUT = &h00100000


const WS_EX_LAYOUTRTL = &h00400000
const WS_EX_COMPOSITED = &h02000000
const WS_EX_NOACTIVATE = &h08000000
const CS_VREDRAW = &h0001
const CS_HREDRAW = &h0002
const CS_DBLCLKS = &h0008
const CS_OWNDC = &h0020
const CS_CLASSDC = &h0040
const CS_PARENTDC = &h0080
const CS_NOCLOSE = &h0200
const CS_SAVEBITS = &h0800
const CS_BYTEALIGNCLIENT = &h1000
const CS_BYTEALIGNWINDOW = &h2000
const CS_GLOBALCLASS = &h4000
const CS_IME = &h00010000
const CS_DROPSHADOW = &h00020000
const PRF_CHECKVISIBLE = &h00000001
const PRF_NONCLIENT = &h00000002
const PRF_CLIENT = &h00000004
const PRF_ERASEBKGND = &h00000008
const PRF_CHILDREN = &h00000010
const PRF_OWNED = &h00000020
const BDR_RAISEDOUTER = &h0001
const BDR_SUNKENOUTER = &h0002
const BDR_RAISEDINNER = &h0004
const BDR_SUNKENINNER = &h0008
const BDR_OUTER = BDR_RAISEDOUTER or BDR_SUNKENOUTER
const BDR_INNER = BDR_RAISEDINNER or BDR_SUNKENINNER
const BDR_RAISED = BDR_RAISEDOUTER or BDR_RAISEDINNER
const BDR_SUNKEN = BDR_SUNKENOUTER or BDR_SUNKENINNER
const EDGE_RAISED = BDR_RAISEDOUTER or BDR_RAISEDINNER
const EDGE_SUNKEN = BDR_SUNKENOUTER or BDR_SUNKENINNER
const EDGE_ETCHED = BDR_SUNKENOUTER or BDR_RAISEDINNER
const EDGE_BUMP = BDR_RAISEDOUTER or BDR_SUNKENINNER
const BF_LEFT = &h0001
const BF_TOP = &h0002
const BF_RIGHT = &h0004
const BF_BOTTOM = &h0008
const BF_TOPLEFT = BF_TOP or BF_LEFT
const BF_TOPRIGHT = BF_TOP or BF_RIGHT
const BF_BOTTOMLEFT = BF_BOTTOM or BF_LEFT
const BF_BOTTOMRIGHT = BF_BOTTOM or BF_RIGHT
const BF_RECT = ((BF_LEFT or BF_TOP) or BF_RIGHT) or BF_BOTTOM
const BF_DIAGONAL = &h0010
const BF_DIAGONAL_ENDTOPRIGHT = (BF_DIAGONAL or BF_TOP) or BF_RIGHT
const BF_DIAGONAL_ENDTOPLEFT = (BF_DIAGONAL or BF_TOP) or BF_LEFT
const BF_DIAGONAL_ENDBOTTOMLEFT = (BF_DIAGONAL or BF_BOTTOM) or BF_LEFT
const BF_DIAGONAL_ENDBOTTOMRIGHT = (BF_DIAGONAL or BF_BOTTOM) or BF_RIGHT
const BF_MIDDLE = &h0800
const BF_SOFT = &h1000
const BF_ADJUST = &h2000
const BF_FLAT = &h4000
const BF_MONO = &h8000
declare function DrawEdge(byval hdc as HDC, byval qrc as LPRECT, byval edge as UINT, byval grfFlags as UINT) as WINBOOL
const DFC_CAPTION = 1
const DFC_MENU = 2
const DFC_SCROLL = 3
const DFC_BUTTON = 4
const DFC_POPUPMENU = 5
const DFCS_CAPTIONCLOSE = &h00000
const DFCS_CAPTIONMIN = &h0001
const DFCS_CAPTIONMAX = &h0002
const DFCS_CAPTIONRESTORE = &h0003
const DFCS_CAPTIONHELP = &h0004
const DFCS_MENUARROW = &h00000
const DFCS_MENUCHECK = &h0001
const DFCS_MENUBULLET = &h0002
const DFCS_MENUARROWRIGHT = &h0004
const DFCS_SCROLLUP = &h00000
const DFCS_SCROLLDOWN = &h0001
const DFCS_SCROLLLEFT = &h0002
const DFCS_SCROLLRIGHT = &h0003
const DFCS_SCROLLCOMBOBOX = &h0005
const DFCS_SCROLLSIZEGRIP = &h0008
const DFCS_SCROLLSIZEGRIPRIGHT = &h0010
const DFCS_BUTTONCHECK = &h00000
const DFCS_BUTTONRADIOIMAGE = &h0001
const DFCS_BUTTONRADIOMASK = &h0002
const DFCS_BUTTONRADIO = &h0004
const DFCS_BUTTON3STATE = &h0008
const DFCS_BUTTONPUSH = &h0010
const DFCS_INACTIVE = &h0100
const DFCS_PUSHED = &h0200
const DFCS_CHECKED = &h0400
const DFCS_TRANSPARENT = &h0800
const DFCS_HOT = &h1000
const DFCS_ADJUSTRECT = &h2000
const DFCS_FLAT = &h4000
const DFCS_MONO = &h8000
declare function DrawFrameControl(byval as HDC, byval as LPRECT, byval as UINT, byval as UINT) as WINBOOL
const DC_ACTIVE = &h0001
const DC_SMALLCAP = &h0002
const DC_ICON = &h0004
const DC_TEXT = &h0008
const DC_INBUTTON = &h0010
const DC_GRADIENT = &h0020
const DC_BUTTONS = &h1000
declare function DrawCaption(byval hwnd as HWND, byval hdc as HDC, byval lprect as const RECT ptr, byval flags as UINT) as WINBOOL
const IDANI_OPEN = 1
const IDANI_CAPTION = 3
declare function DrawAnimatedRects(byval hwnd as HWND, byval idAni as long, byval lprcFrom as const RECT ptr, byval lprcTo as const RECT ptr) as WINBOOL
const CF_TEXT = 1
const CF_BITMAP = 2
const CF_METAFILEPICT = 3
const CF_SYLK = 4
const CF_DIF = 5
const CF_TIFF = 6
const CF_OEMTEXT = 7
const CF_DIB = 8
const CF_PALETTE = 9
const CF_PENDATA = 10
const CF_RIFF = 11
const CF_WAVE = 12
const CF_UNICODETEXT = 13
const CF_ENHMETAFILE = 14
const CF_HDROP = 15
const CF_LOCALE = 16
const CF_DIBV5 = 17
const CF_MAX = 18
const CF_OWNERDISPLAY = &h0080
const CF_DSPTEXT = &h0081
const CF_DSPBITMAP = &h0082
const CF_DSPMETAFILEPICT = &h0083
const CF_DSPENHMETAFILE = &h008E
const CF_PRIVATEFIRST = &h0200
const CF_PRIVATELAST = &h02FF
const CF_GDIOBJFIRST = &h0300
const CF_GDIOBJLAST = &h03FF
const FVIRTKEY = CTRUE
const FNOINVERT = &h02
const FSHIFT = &h04
const FCONTROL = &h08
const FALT = &h10

type tagACCEL
 fVirt as UBYTE
 key as WORD
 cmd as WORD
end type

type ACCEL as tagACCEL
type LPACCEL as tagACCEL ptr

type tagPAINTSTRUCT
 hdc as HDC
 fErase as WINBOOL
 rcPaint as RECT
 fRestore as WINBOOL
 fIncUpdate as WINBOOL
 rgbReserved(0 to 31) as UBYTE
end type

type PAINTSTRUCT as tagPAINTSTRUCT
type PPAINTSTRUCT as tagPAINTSTRUCT ptr
type NPPAINTSTRUCT as tagPAINTSTRUCT ptr
type LPPAINTSTRUCT as tagPAINTSTRUCT ptr

type tagCREATESTRUCTA_
 lpCreateParams as LPVOID
 hInstance as HINSTANCE
 hMenu as HMENU
 hwndParent as HWND
 cy as long
 cx as long
 y as long
 x as long
 style as LONG
 lpszName as LPCSTR
 lpszClass as LPCSTR
 dwExStyle as DWORD
end type

type CREATESTRUCTA as tagCREATESTRUCTA
type LPCREATESTRUCTA as tagCREATESTRUCTA ptr

type tagCREATESTRUCTW_
 lpCreateParams as LPVOID
 hInstance as HINSTANCE
 hMenu as HMENU
 hwndParent as HWND
 cy as long
 cx as long
 y as long
 x as long
 style as LONG
 lpszName as LPCWSTR
 lpszClass as LPCWSTR
 dwExStyle as DWORD
end type

type CREATESTRUCTW as tagCREATESTRUCTW
type LPCREATESTRUCTW as tagCREATESTRUCTW ptr

 type CREATESTRUCT as CREATESTRUCTA
 type LPCREATESTRUCT as LPCREATESTRUCTA

type tagWINDOWPLACEMENT
 length as UINT
 flags as UINT
 showCmd as UINT
 ptMinPosition as POINT
 ptMaxPosition as POINT
 rcNormalPosition as RECT
end type

type WINDOWPLACEMENT as tagWINDOWPLACEMENT
type PWINDOWPLACEMENT as WINDOWPLACEMENT ptr
type LPWINDOWPLACEMENT as WINDOWPLACEMENT ptr

const WPF_SETMINPOSITION = &h0001
const WPF_RESTORETOMAXIMIZED = &h0002
const WPF_ASYNCWINDOWPLACEMENT = &h0004

type tagNMHDR
 hwndFrom as HWND
 idFrom as UINT_PTR
 code as UINT
end type

type NMHDR as tagNMHDR
type LPNMHDR as NMHDR ptr

type tagSTYLESTRUCT
 styleOld as DWORD
 styleNew as DWORD
end type

type STYLESTRUCT as tagSTYLESTRUCT
type LPSTYLESTRUCT as tagSTYLESTRUCT ptr
const ODT_MENU = 1
const ODT_LISTBOX = 2
const ODT_COMBOBOX = 3
const ODT_BUTTON = 4
const ODT_STATIC = 5
const ODA_DRAWENTIRE = &h0001
const ODA_SELECT = &h0002
const ODA_FOCUS = &h0004
const ODS_SELECTED = &h0001
const ODS_GRAYED = &h0002
const ODS_DISABLED = &h0004
const ODS_CHECKED = &h0008
const ODS_FOCUS = &h0010
const ODS_DEFAULT = &h0020
const ODS_COMBOBOXEDIT = &h1000
const ODS_HOTLIGHT = &h0040
const ODS_INACTIVE = &h0080
const ODS_NOACCEL = &h0100
const ODS_NOFOCUSRECT = &h0200

type tagMEASUREITEMSTRUCT
 CtlType as UINT
 CtlID as UINT
 itemID as UINT
 itemWidth as UINT
 itemHeight as UINT
 itemData as ULONG_PTR
end type

type MEASUREITEMSTRUCT as tagMEASUREITEMSTRUCT
type PMEASUREITEMSTRUCT as tagMEASUREITEMSTRUCT ptr
type LPMEASUREITEMSTRUCT as tagMEASUREITEMSTRUCT ptr

type tagDRAWITEMSTRUCT
 CtlType as UINT
 CtlID as UINT
 itemID as UINT
 itemAction as UINT
 itemState as UINT
 hwndItem as HWND
 hDC as HDC
 rcItem as RECT
 itemData as ULONG_PTR
end type

type DRAWITEMSTRUCT as tagDRAWITEMSTRUCT
type PDRAWITEMSTRUCT as tagDRAWITEMSTRUCT ptr
type LPDRAWITEMSTRUCT as tagDRAWITEMSTRUCT ptr

type tagDELETEITEMSTRUCT
 CtlType as UINT
 CtlID as UINT
 itemID as UINT
 hwndItem as HWND
 itemData as ULONG_PTR
end type

type DELETEITEMSTRUCT as tagDELETEITEMSTRUCT
type PDELETEITEMSTRUCT as tagDELETEITEMSTRUCT ptr
type LPDELETEITEMSTRUCT as tagDELETEITEMSTRUCT ptr

type tagCOMPAREITEMSTRUCT
 CtlType as UINT
 CtlID as UINT
 hwndItem as HWND
 itemID1 as UINT
 itemData1 as ULONG_PTR
 itemID2 as UINT
 itemData2 as ULONG_PTR
 dwLocaleId as DWORD
end type

type COMPAREITEMSTRUCT as tagCOMPAREITEMSTRUCT
type PCOMPAREITEMSTRUCT as tagCOMPAREITEMSTRUCT ptr
type LPCOMPAREITEMSTRUCT as tagCOMPAREITEMSTRUCT ptr
declare function GetMessageA(byval lpMsg as LPMSG, byval hWnd as HWND, byval wMsgFilterMin as UINT, byval wMsgFilterMax as UINT) as WINBOOL

 declare function GetMessage alias "GetMessageA"(byval lpMsg as LPMSG, byval hWnd as HWND, byval wMsgFilterMin as UINT, byval wMsgFilterMax as UINT) as WINBOOL

declare function GetMessageW(byval lpMsg as LPMSG, byval hWnd as HWND, byval wMsgFilterMin as UINT, byval wMsgFilterMax as UINT) as WINBOOL


declare function TranslateMessage(byval lpMsg as const MSG ptr) as WINBOOL
declare function DispatchMessageA(byval lpMsg as const MSG ptr) as LRESULT

 declare function DispatchMessage alias "DispatchMessageA"(byval lpMsg as const MSG ptr) as LRESULT

declare function DispatchMessageW(byval lpMsg as const MSG ptr) as LRESULT


declare function SetMessageQueue(byval cMessagesMax as long) as WINBOOL
declare function PeekMessageA(byval lpMsg as LPMSG, byval hWnd as HWND, byval wMsgFilterMin as UINT, byval wMsgFilterMax as UINT, byval wRemoveMsg as UINT) as WINBOOL

 declare function PeekMessage alias "PeekMessageA"(byval lpMsg as LPMSG, byval hWnd as HWND, byval wMsgFilterMin as UINT, byval wMsgFilterMax as UINT, byval wRemoveMsg as UINT) as WINBOOL

declare function PeekMessageW(byval lpMsg as LPMSG, byval hWnd as HWND, byval wMsgFilterMin as UINT, byval wMsgFilterMax as UINT, byval wRemoveMsg as UINT) as WINBOOL


const PM_NOREMOVE = &h00000
const PM_REMOVE = &h0001
const PM_NOYIELD = &h0002
declare function RegisterHotKey(byval hWnd as HWND, byval id as long, byval fsModifiers as UINT, byval vk as UINT) as WINBOOL
declare function UnregisterHotKey(byval hWnd as HWND, byval id as long) as WINBOOL
const MOD_ALT = &h0001
const MOD_CONTROL = &h0002
const MOD_SHIFT = &h0004
const MOD_WIN = &h0008


const IDHOT_SNAPWINDOW = -1
const IDHOT_SNAPDESKTOP = -2
const ENDSESSION_CLOSEAPP = &h00000001
const ENDSESSION_CRITICAL = &h40000000
const ENDSESSION_LOGOFF = &h80000000
const EWX_LOGOFF = &h000000000
const EWX_SHUTDOWN = &h00000001
const EWX_REBOOT = &h00000002
const EWX_FORCE = &h00000004
const EWX_POWEROFF = &h00000008
const EWX_FORCEIFHUNG = &h00000010
const EWX_QUICKRESOLVE = &h00000020


const EWX_HYBRID_SHUTDOWN = &h00400000
const EWX_BOOTOPTIONS = &h01000000

declare function ExitWindowsEx(byval uFlags as UINT, byval dwReason as DWORD) as WINBOOL
declare function SwapMouseButton(byval fSwap as WINBOOL) as WINBOOL
declare function GetMessagePos() as DWORD
declare function GetMessageTime() as LONG
declare function GetMessageExtraInfo() as LPARAM


declare function IsWow64Message() as WINBOOL
declare function SetMessageExtraInfo(byval lParam as LPARAM) as LPARAM
declare function SendMessageA(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

 declare function SendMessage alias "SendMessageA"(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

declare function SendMessageW(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT


declare function SendMessageTimeoutA(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval fuFlags as UINT, byval uTimeout as UINT, byval lpdwResult as PDWORD_PTR) as LRESULT

 declare function SendMessageTimeout alias "SendMessageTimeoutA"(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval fuFlags as UINT, byval uTimeout as UINT, byval lpdwResult as PDWORD_PTR) as LRESULT

declare function SendMessageTimeoutW(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval fuFlags as UINT, byval uTimeout as UINT, byval lpdwResult as PDWORD_PTR) as LRESULT


declare function SendNotifyMessageA(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL

 declare function SendNotifyMessage alias "SendNotifyMessageA"(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL

declare function SendNotifyMessageW(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL


declare function SendMessageCallbackA(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval lpResultCallBack as SENDASYNCPROC, byval dwData as ULONG_PTR) as WINBOOL

 declare function SendMessageCallback alias "SendMessageCallbackA"(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval lpResultCallBack as SENDASYNCPROC, byval dwData as ULONG_PTR) as WINBOOL

declare function SendMessageCallbackW(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval lpResultCallBack as SENDASYNCPROC, byval dwData as ULONG_PTR) as WINBOOL


type BSMINFO
 cbSize as UINT
 hdesk as HDESK
 hwnd as HWND
 luid as LUID
end type

type PBSMINFO as BSMINFO ptr
declare function BroadcastSystemMessageExA(byval flags as DWORD, byval lpInfo as LPDWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval pbsmInfo as PBSMINFO) as long

 declare function BroadcastSystemMessageEx alias "BroadcastSystemMessageExA"(byval flags as DWORD, byval lpInfo as LPDWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval pbsmInfo as PBSMINFO) as long

declare function BroadcastSystemMessageExW(byval flags as DWORD, byval lpInfo as LPDWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval pbsmInfo as PBSMINFO) as long


declare function BroadcastSystemMessageA(byval flags as DWORD, byval lpInfo as LPDWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as long

 declare function BroadcastSystemMessage alias "BroadcastSystemMessageA"(byval flags as DWORD, byval lpInfo as LPDWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as long

declare function BroadcastSystemMessageW(byval flags as DWORD, byval lpInfo as LPDWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as long


const BSM_ALLCOMPONENTS = &h000000000
const BSM_VXDS = &h00000001
const BSM_NETDRIVER = &h00000002
const BSM_INSTALLABLEDRIVERS = &h00000004
const BSM_APPLICATIONS = &h00000008
const BSM_ALLDESKTOPS = &h00000010
const BSF_QUERY = &h00000001
const BSF_IGNORECURRENTTASK = &h00000002
const BSF_FLUSHDISK = &h00000004
const BSF_NOHANG = &h00000008
const BSF_POSTMESSAGE = &h00000010
const BSF_FORCEIFHUNG = &h00000020
const BSF_NOTIMEOUTIFNOTHUNG = &h00000040
const BSF_ALLOWSFW = &h00000080
const BSF_SENDNOTIFYMESSAGE = &h00000100
const BSF_RETURNHDESK = &h00000200
const BSF_LUID = &h00000400
const BROADCAST_QUERY_DENY = &h424D5144
type HDEVNOTIFY as PVOID
type PHDEVNOTIFY as HDEVNOTIFY ptr
const DEVICE_NOTIFY_WINDOW_HANDLE = &h000000000
const DEVICE_NOTIFY_SERVICE_HANDLE = &h00000001
const DEVICE_NOTIFY_ALL_INTERFACE_CLASSES = &h00000004


 type HPOWERNOTIFY as HANDLE
 type PHPOWERNOTIFY as HPOWERNOTIFY ptr
 declare function RegisterPowerSettingNotification(byval hRecipient as HANDLE, byval PowerSettingGuid as LPCGUID, byval Flags as DWORD) as HPOWERNOTIFY
 declare function UnregisterPowerSettingNotification(byval Handle as HPOWERNOTIFY) as WINBOOL
 declare function RegisterSuspendResumeNotification(byval hRecipient as HANDLE, byval Flags as DWORD) as HPOWERNOTIFY
 declare function UnregisterSuspendResumeNotification(byval Handle as HPOWERNOTIFY) as WINBOOL

declare function PostMessageA(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL

 declare function PostMessage alias "PostMessageA"(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL

declare function PostMessageW(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL


declare function PostThreadMessageA(byval idThread as DWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL

 declare function PostThreadMessage alias "PostThreadMessageA"(byval idThread as DWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL

declare function PostThreadMessageW(byval idThread as DWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL


declare function AttachThreadInput(byval idAttach as DWORD, byval idAttachTo as DWORD, byval fAttach as WINBOOL) as WINBOOL
declare function ReplyMessage(byval lResult as LRESULT) as WINBOOL
declare function WaitMessage() as WINBOOL
declare function WaitForInputIdle(byval hProcess as HANDLE, byval dwMilliseconds as DWORD) as DWORD
declare function DefWindowProcA(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

 declare function DefWindowProc alias "DefWindowProcA"(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

declare function DefWindowProcW(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT


declare sub PostQuitMessage(byval nExitCode as long)
declare function InSendMessage() as WINBOOL
declare function InSendMessageEx(byval lpReserved as LPVOID) as DWORD
declare function GetDoubleClickTime() as UINT
declare function SetDoubleClickTime(byval as UINT) as WINBOOL
declare function RegisterClassA(byval lpWndClass as const WNDCLASSA ptr) as ATOM

 declare function RegisterClass alias "RegisterClassA"(byval lpWndClass as const WNDCLASSA ptr) as ATOM

declare function RegisterClassW(byval lpWndClass as const WNDCLASSW ptr) as ATOM


declare function UnregisterClassA(byval lpClassName as LPCSTR, byval hInstance as HINSTANCE) as WINBOOL

 declare function UnregisterClass alias "UnregisterClassA"(byval lpClassName as LPCSTR, byval hInstance as HINSTANCE) as WINBOOL

declare function UnregisterClassW(byval lpClassName as LPCWSTR, byval hInstance as HINSTANCE) as WINBOOL


declare function GetClassInfoA(byval hInstance as HINSTANCE, byval lpClassName as LPCSTR, byval lpWndClass as LPWNDCLASSA) as WINBOOL

 declare function GetClassInfo alias "GetClassInfoA"(byval hInstance as HINSTANCE, byval lpClassName as LPCSTR, byval lpWndClass as LPWNDCLASSA) as WINBOOL

declare function GetClassInfoW(byval hInstance as HINSTANCE, byval lpClassName as LPCWSTR, byval lpWndClass as LPWNDCLASSW) as WINBOOL


declare function RegisterClassExA(byval as const WNDCLASSEXA ptr) as ATOM

 declare function RegisterClassEx alias "RegisterClassExA"(byval as const WNDCLASSEXA ptr) as ATOM

declare function RegisterClassExW(byval as const WNDCLASSEXW ptr) as ATOM


declare function GetClassInfoExA(byval hInstance as HINSTANCE, byval lpszClass as LPCSTR, byval lpwcx as LPWNDCLASSEXA) as WINBOOL

 declare function GetClassInfoEx alias "GetClassInfoExA"(byval hInstance as HINSTANCE, byval lpszClass as LPCSTR, byval lpwcx as LPWNDCLASSEXA) as WINBOOL

declare function GetClassInfoExW(byval hInstance as HINSTANCE, byval lpszClass as LPCWSTR, byval lpwcx as LPWNDCLASSEXW) as WINBOOL


declare function CallWindowProcA(byval lpPrevWndFunc as WNDPROC, byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

 declare function CallWindowProc alias "CallWindowProcA"(byval lpPrevWndFunc as WNDPROC, byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

declare function CallWindowProcW(byval lpPrevWndFunc as WNDPROC, byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT


const CW_USEDEFAULT = clng(&h80000000)
const HWND_BROADCAST = cast(HWND, &hffff)
const HWND_MESSAGE = cast(HWND, -3)
const HWND_DESKTOP = cast(HWND, 0)
const ISMEX_NOSEND = &h000000000
const ISMEX_SEND = &h00000001
const ISMEX_NOTIFY = &h00000002
const ISMEX_CALLBACK = &h00000004
const ISMEX_REPLIED = &h00000008

 extern GUID_POWERSCHEME_PERSONALITY as const GUID
 extern GUID_MIN_POWER_SAVINGS as const GUID
 extern GUID_MAX_POWER_SAVINGS as const GUID
 extern GUID_TYPICAL_POWER_SAVINGS as const GUID
 extern GUID_ACDC_POWER_SOURCE as const GUID
 extern GUID_BATTERY_PERCENTAGE_REMAINING as const GUID
 extern GUID_IDLE_BACKGROUND_TASK as const GUID
 extern GUID_SYSTEM_AWAYMODE as const GUID
 extern GUID_MONITOR_POWER_ON as const GUID

declare function RegisterDeviceNotificationA(byval hRecipient as HANDLE, byval NotificationFilter as LPVOID, byval Flags as DWORD) as HDEVNOTIFY

 declare function RegisterDeviceNotification alias "RegisterDeviceNotificationA"(byval hRecipient as HANDLE, byval NotificationFilter as LPVOID, byval Flags as DWORD) as HDEVNOTIFY

declare function RegisterDeviceNotificationW(byval hRecipient as HANDLE, byval NotificationFilter as LPVOID, byval Flags as DWORD) as HDEVNOTIFY


declare function UnregisterDeviceNotification(byval Handle as HDEVNOTIFY) as WINBOOL
type PREGISTERCLASSNAMEW as function(byval as LPCWSTR) as WINBOOLEAN


declare function CreateWindowExA(byval dwExStyle as DWORD, byval lpClassName as LPCSTR, byval lpWindowName as LPCSTR, byval dwStyle as DWORD, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long, byval hWndParent as HWND, byval hMenu as HMENU, byval hInstance as HINSTANCE, byval lpParam as LPVOID) as HWND

 declare function CreateWindowEx alias "CreateWindowExA"(byval dwExStyle as DWORD, byval lpClassName as LPCSTR, byval lpWindowName as LPCSTR, byval dwStyle as DWORD, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long, byval hWndParent as HWND, byval hMenu as HMENU, byval hInstance as HINSTANCE, byval lpParam as LPVOID) as HWND

declare function CreateWindowExW(byval dwExStyle as DWORD, byval lpClassName as LPCWSTR, byval lpWindowName as LPCWSTR, byval dwStyle as DWORD, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long, byval hWndParent as HWND, byval hMenu as HMENU, byval hInstance as HINSTANCE, byval lpParam as LPVOID) as HWND


declare function IsWindow(byval hWnd as HWND) as WINBOOL
declare function IsMenu(byval hMenu as HMENU) as WINBOOL
declare function IsChild(byval hWndParent as HWND, byval hWnd as HWND) as WINBOOL
declare function DestroyWindow(byval hWnd as HWND) as WINBOOL
declare function ShowWindow(byval hWnd as HWND, byval nCmdShow as long) as WINBOOL
declare function AnimateWindow(byval hWnd as HWND, byval dwTime as DWORD, byval dwFlags as DWORD) as WINBOOL
declare function UpdateLayeredWindow(byval hWnd as HWND, byval hdcDst as HDC, byval pptDst as POINT ptr, byval psize as SIZE ptr, byval hdcSrc as HDC, byval pptSrc as POINT ptr, byval crKey as COLORREF, byval pblend as BLENDFUNCTION ptr, byval dwFlags as DWORD) as WINBOOL

type tagUPDATELAYEREDWINDOWINFO
 cbSize as DWORD
 hdcDst as HDC
 pptDst as const POINT ptr
 psize as const SIZE ptr
 hdcSrc as HDC
 pptSrc as const POINT ptr
 crKey as COLORREF
 pblend as const BLENDFUNCTION ptr
 dwFlags as DWORD
 prcDirty as const RECT ptr
end type

type UPDATELAYEREDWINDOWINFO as tagUPDATELAYEREDWINDOWINFO
type PUPDATELAYEREDWINDOWINFO as tagUPDATELAYEREDWINDOWINFO ptr

 declare function UpdateLayeredWindowIndirect(byval hWnd as HWND, byval pULWInfo as const UPDATELAYEREDWINDOWINFO ptr) as WINBOOL

declare function GetLayeredWindowAttributes(byval hwnd as HWND, byval pcrKey as COLORREF ptr, byval pbAlpha as UBYTE ptr, byval pdwFlags as DWORD ptr) as WINBOOL
const PW_CLIENTONLY = &h00000001
declare function PrintWindow(byval hwnd as HWND, byval hdcBlt as HDC, byval nFlags as UINT) as WINBOOL
declare function SetLayeredWindowAttributes(byval hwnd as HWND, byval crKey as COLORREF, byval bAlpha as UBYTE, byval dwFlags as DWORD) as WINBOOL
const LWA_COLORKEY = &h00000001
const LWA_ALPHA = &h00000002
const ULW_COLORKEY = &h00000001
const ULW_ALPHA = &h00000002
const ULW_OPAQUE = &h00000004
const ULW_EX_NORESIZE = &h00000008
const FLASHW_STOP = 0
const FLASHW_CAPTION = &h00000001
const FLASHW_TRAY = &h00000002
const FLASHW_ALL = FLASHW_CAPTION or FLASHW_TRAY
const FLASHW_TIMER = &h00000004
const FLASHW_TIMERNOFG = &h0000000c

type FLASHWINFO
 cbSize as UINT
 hwnd as HWND
 dwFlags as DWORD
 uCount as UINT
 dwTimeout as DWORD
end type

type PFLASHWINFO as FLASHWINFO ptr
declare function ShowWindowAsync(byval hWnd as HWND, byval nCmdShow as long) as WINBOOL
declare function FlashWindow(byval hWnd as HWND, byval bInvert as WINBOOL) as WINBOOL
declare function FlashWindowEx(byval pfwi as PFLASHWINFO) as WINBOOL
declare function ShowOwnedPopups(byval hWnd as HWND, byval fShow as WINBOOL) as WINBOOL
declare function OpenIcon(byval hWnd as HWND) as WINBOOL
declare function CloseWindow(byval hWnd as HWND) as WINBOOL
declare function MoveWindow(byval hWnd as HWND, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long, byval bRepaint as WINBOOL) as WINBOOL
declare function SetWindowPos(byval hWnd as HWND, byval hWndInsertAfter as HWND, byval X as long, byval Y as long, byval cx as long, byval cy as long, byval uFlags as UINT) as WINBOOL
declare function GetWindowPlacement(byval hWnd as HWND, byval lpwndpl as WINDOWPLACEMENT ptr) as WINBOOL
declare function SetWindowPlacement(byval hWnd as HWND, byval lpwndpl as const WINDOWPLACEMENT ptr) as WINBOOL


declare function BeginDeferWindowPos(byval nNumWindows as long) as HDWP
declare function DeferWindowPos(byval hWinPosInfo as HDWP, byval hWnd as HWND, byval hWndInsertAfter as HWND, byval x as long, byval y as long, byval cx as long, byval cy as long, byval uFlags as UINT) as HDWP
declare function EndDeferWindowPos(byval hWinPosInfo as HDWP) as WINBOOL
declare function IsWindowVisible(byval hWnd as HWND) as WINBOOL
declare function IsIconic(byval hWnd as HWND) as WINBOOL
declare function AnyPopup() as WINBOOL
declare function BringWindowToTop(byval hWnd as HWND) as WINBOOL
declare function IsZoomed(byval hWnd as HWND) as WINBOOL

const SWP_NOSIZE = &h0001
const SWP_NOMOVE = &h0002
const SWP_NOZORDER = &h0004
const SWP_NOREDRAW = &h0008
const SWP_NOACTIVATE = &h0010
const SWP_FRAMECHANGED = &h0020
const SWP_SHOWWINDOW = &h0040
const SWP_HIDEWINDOW = &h0080
const SWP_NOCOPYBITS = &h0100
const SWP_NOOWNERZORDER = &h0200
const SWP_NOSENDCHANGING = &h0400
const SWP_DRAWFRAME = SWP_FRAMECHANGED
const SWP_NOREPOSITION = SWP_NOOWNERZORDER
const SWP_DEFERERASE = &h2000
const SWP_ASYNCWINDOWPOS = &h4000
const HWND_TOP = cast(HWND, 0)
const HWND_BOTTOM = cast(HWND, 1)
const HWND_TOPMOST = cast(HWND, -1)
const HWND_NOTOPMOST = cast(HWND, -2)

type DLGTEMPLATE field = 2
 style as DWORD
 dwExtendedStyle as DWORD
 cdit as WORD
 x as short
 y as short
 cx as short
 cy as short
end type

type LPDLGTEMPLATEA as DLGTEMPLATE ptr
type LPDLGTEMPLATEW as DLGTEMPLATE ptr

 type LPDLGTEMPLATE as LPDLGTEMPLATEA

type LPCDLGTEMPLATEA as const DLGTEMPLATE ptr
type LPCDLGTEMPLATEW as const DLGTEMPLATE ptr

 type LPCDLGTEMPLATE as LPCDLGTEMPLATEA

type DLGITEMTEMPLATE field = 2
 style as DWORD
 dwExtendedStyle as DWORD
 x as short
 y as short
 cx as short
 cy as short
 id as WORD
end type

type PDLGITEMTEMPLATEA as DLGITEMTEMPLATE ptr
type PDLGITEMTEMPLATEW as DLGITEMTEMPLATE ptr

 type PDLGITEMTEMPLATE as PDLGITEMTEMPLATEA

type LPDLGITEMTEMPLATEA as DLGITEMTEMPLATE ptr
type LPDLGITEMTEMPLATEW as DLGITEMTEMPLATE ptr

 type LPDLGITEMTEMPLATE as LPDLGITEMTEMPLATEA

declare function CreateDialogParamA(byval hInstance as HINSTANCE, byval lpTemplateName as LPCSTR, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as HWND

 declare function CreateDialogParam alias "CreateDialogParamA"(byval hInstance as HINSTANCE, byval lpTemplateName as LPCSTR, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as HWND

declare function CreateDialogParamW(byval hInstance as HINSTANCE, byval lpTemplateName as LPCWSTR, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as HWND


declare function CreateDialogIndirectParamA(byval hInstance as HINSTANCE, byval lpTemplate as LPCDLGTEMPLATEA, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as HWND

 declare function CreateDialogIndirectParam alias "CreateDialogIndirectParamA"(byval hInstance as HINSTANCE, byval lpTemplate as LPCDLGTEMPLATEA, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as HWND

declare function CreateDialogIndirectParamW(byval hInstance as HINSTANCE, byval lpTemplate as LPCDLGTEMPLATEW, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as HWND


declare function DialogBoxParamA(byval hInstance as HINSTANCE, byval lpTemplateName as LPCSTR, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as INT_PTR

 declare function DialogBoxParam alias "DialogBoxParamA"(byval hInstance as HINSTANCE, byval lpTemplateName as LPCSTR, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as INT_PTR

declare function DialogBoxParamW(byval hInstance as HINSTANCE, byval lpTemplateName as LPCWSTR, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as INT_PTR


declare function DialogBoxIndirectParamA(byval hInstance as HINSTANCE, byval hDialogTemplate as LPCDLGTEMPLATEA, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as INT_PTR

 declare function DialogBoxIndirectParam alias "DialogBoxIndirectParamA"(byval hInstance as HINSTANCE, byval hDialogTemplate as LPCDLGTEMPLATEA, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as INT_PTR

declare function DialogBoxIndirectParamW(byval hInstance as HINSTANCE, byval hDialogTemplate as LPCDLGTEMPLATEW, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as INT_PTR



declare function EndDialog(byval hDlg as HWND, byval nResult as INT_PTR) as WINBOOL
declare function GetDlgItem(byval hDlg as HWND, byval nIDDlgItem as long) as HWND
declare function SetDlgItemInt(byval hDlg as HWND, byval nIDDlgItem as long, byval uValue as UINT, byval bSigned as WINBOOL) as WINBOOL
declare function GetDlgItemInt(byval hDlg as HWND, byval nIDDlgItem as long, byval lpTranslated as WINBOOL ptr, byval bSigned as WINBOOL) as UINT
declare function SetDlgItemTextA(byval hDlg as HWND, byval nIDDlgItem as long, byval lpString as LPCSTR) as WINBOOL

 declare function SetDlgItemText alias "SetDlgItemTextA"(byval hDlg as HWND, byval nIDDlgItem as long, byval lpString as LPCSTR) as WINBOOL

declare function SetDlgItemTextW(byval hDlg as HWND, byval nIDDlgItem as long, byval lpString as LPCWSTR) as WINBOOL


declare function GetDlgItemTextA(byval hDlg as HWND, byval nIDDlgItem as long, byval lpString as LPSTR, byval cchMax as long) as UINT

 declare function GetDlgItemText alias "GetDlgItemTextA"(byval hDlg as HWND, byval nIDDlgItem as long, byval lpString as LPSTR, byval cchMax as long) as UINT

declare function GetDlgItemTextW(byval hDlg as HWND, byval nIDDlgItem as long, byval lpString as LPWSTR, byval cchMax as long) as UINT


declare function CheckDlgButton(byval hDlg as HWND, byval nIDButton as long, byval uCheck as UINT) as WINBOOL
declare function CheckRadioButton(byval hDlg as HWND, byval nIDFirstButton as long, byval nIDLastButton as long, byval nIDCheckButton as long) as WINBOOL
declare function IsDlgButtonChecked(byval hDlg as HWND, byval nIDButton as long) as UINT
declare function SendDlgItemMessageA(byval hDlg as HWND, byval nIDDlgItem as long, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

 declare function SendDlgItemMessage alias "SendDlgItemMessageA"(byval hDlg as HWND, byval nIDDlgItem as long, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

declare function SendDlgItemMessageW(byval hDlg as HWND, byval nIDDlgItem as long, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT


declare function GetNextDlgGroupItem(byval hDlg as HWND, byval hCtl as HWND, byval bPrevious as WINBOOL) as HWND
declare function GetNextDlgTabItem(byval hDlg as HWND, byval hCtl as HWND, byval bPrevious as WINBOOL) as HWND
declare function GetDlgCtrlID(byval hWnd as HWND) as long
declare function GetDialogBaseUnits() as long
declare function DefDlgProcA(byval hDlg as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

 declare function DefDlgProc alias "DefDlgProcA"(byval hDlg as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

declare function DefDlgProcW(byval hDlg as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT


const DLGWINDOWEXTRA = 30
declare function CallMsgFilterA(byval lpMsg as LPMSG, byval nCode as long) as WINBOOL

 declare function CallMsgFilter alias "CallMsgFilterA"(byval lpMsg as LPMSG, byval nCode as long) as WINBOOL

declare function CallMsgFilterW(byval lpMsg as LPMSG, byval nCode as long) as WINBOOL


declare function OpenClipboard(byval hWndNewOwner as HWND) as WINBOOL
declare function CloseClipboard() as WINBOOL
declare function GetClipboardSequenceNumber() as DWORD
declare function GetClipboardOwner() as HWND
declare function SetClipboardViewer(byval hWndNewViewer as HWND) as HWND
declare function GetClipboardViewer() as HWND
declare function ChangeClipboardChain(byval hWndRemove as HWND, byval hWndNewNext as HWND) as WINBOOL
declare function SetClipboardData(byval uFormat as UINT, byval hMem as HANDLE) as HANDLE
declare function GetClipboardData(byval uFormat as UINT) as HANDLE
declare function RegisterClipboardFormatA(byval lpszFormat as LPCSTR) as UINT

 declare function RegisterClipboardFormat alias "RegisterClipboardFormatA"(byval lpszFormat as LPCSTR) as UINT

declare function RegisterClipboardFormatW(byval lpszFormat as LPCWSTR) as UINT


declare function CountClipboardFormats() as long
declare function EnumClipboardFormats(byval format as UINT) as UINT
declare function GetClipboardFormatNameA(byval format as UINT, byval lpszFormatName as LPSTR, byval cchMaxCount as long) as long

 declare function GetClipboardFormatName alias "GetClipboardFormatNameA"(byval format as UINT, byval lpszFormatName as LPSTR, byval cchMaxCount as long) as long

declare function GetClipboardFormatNameW(byval format as UINT, byval lpszFormatName as LPWSTR, byval cchMaxCount as long) as long


declare function EmptyClipboard() as WINBOOL
declare function IsClipboardFormatAvailable(byval format as UINT) as WINBOOL
declare function GetPriorityClipboardFormat(byval paFormatPriorityList as UINT ptr, byval cFormats as long) as long
declare function GetOpenClipboardWindow() as HWND


declare function CharToOemA(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR) as WINBOOL

 declare function CharToOem alias "CharToOemA"(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR) as WINBOOL

declare function CharToOemW(byval lpszSrc as LPCWSTR, byval lpszDst as LPSTR) as WINBOOL


declare function OemToCharA(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR) as WINBOOL

 declare function OemToChar alias "OemToCharA"(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR) as WINBOOL

declare function OemToCharW(byval lpszSrc as LPCSTR, byval lpszDst as LPWSTR) as WINBOOL


declare function CharToOemBuffA(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR, byval cchDstLength as DWORD) as WINBOOL

 declare function CharToOemBuff alias "CharToOemBuffA"(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR, byval cchDstLength as DWORD) as WINBOOL

declare function CharToOemBuffW(byval lpszSrc as LPCWSTR, byval lpszDst as LPSTR, byval cchDstLength as DWORD) as WINBOOL


declare function OemToCharBuffA(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR, byval cchDstLength as DWORD) as WINBOOL

 declare function OemToCharBuff alias "OemToCharBuffA"(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR, byval cchDstLength as DWORD) as WINBOOL

declare function OemToCharBuffW(byval lpszSrc as LPCSTR, byval lpszDst as LPWSTR, byval cchDstLength as DWORD) as WINBOOL


declare function CharUpperA(byval lpsz as LPSTR) as LPSTR

 declare function CharUpper alias "CharUpperA"(byval lpsz as LPSTR) as LPSTR

declare function CharUpperW(byval lpsz as LPWSTR) as LPWSTR


declare function CharUpperBuffA(byval lpsz as LPSTR, byval cchLength as DWORD) as DWORD

 declare function CharUpperBuff alias "CharUpperBuffA"(byval lpsz as LPSTR, byval cchLength as DWORD) as DWORD

declare function CharUpperBuffW(byval lpsz as LPWSTR, byval cchLength as DWORD) as DWORD


declare function CharLowerA(byval lpsz as LPSTR) as LPSTR

 declare function CharLower alias "CharLowerA"(byval lpsz as LPSTR) as LPSTR

declare function CharLowerW(byval lpsz as LPWSTR) as LPWSTR


declare function CharLowerBuffA(byval lpsz as LPSTR, byval cchLength as DWORD) as DWORD

 declare function CharLowerBuff alias "CharLowerBuffA"(byval lpsz as LPSTR, byval cchLength as DWORD) as DWORD

declare function CharLowerBuffW(byval lpsz as LPWSTR, byval cchLength as DWORD) as DWORD


declare function CharNextA(byval lpsz as LPCSTR) as LPSTR

 declare function CharNext alias "CharNextA"(byval lpsz as LPCSTR) as LPSTR

declare function CharNextW(byval lpsz as LPCWSTR) as LPWSTR


declare function CharPrevA(byval lpszStart as LPCSTR, byval lpszCurrent as LPCSTR) as LPSTR

 declare function CharPrev alias "CharPrevA"(byval lpszStart as LPCSTR, byval lpszCurrent as LPCSTR) as LPSTR

declare function CharPrevW(byval lpszStart as LPCWSTR, byval lpszCurrent as LPCWSTR) as LPWSTR


declare function CharNextExA(byval CodePage as WORD, byval lpCurrentChar as LPCSTR, byval dwFlags as DWORD) as LPSTR
declare function CharPrevExA(byval CodePage as WORD, byval lpStart as LPCSTR, byval lpCurrentChar as LPCSTR, byval dwFlags as DWORD) as LPSTR
declare function AnsiToOem alias "CharToOemA"(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR) as WINBOOL
declare function OemToAnsi alias "OemToCharA"(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR) as WINBOOL
declare function AnsiToOemBuff alias "CharToOemBuffA"(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR, byval cchDstLength as DWORD) as WINBOOL
declare function OemToAnsiBuff alias "OemToCharBuffA"(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR, byval cchDstLength as DWORD) as WINBOOL
declare function AnsiUpper alias "CharUpperA"(byval lpsz as LPSTR) as LPSTR
declare function AnsiUpperBuff alias "CharUpperBuffA"(byval lpsz as LPSTR, byval cchLength as DWORD) as DWORD
declare function AnsiLower alias "CharLowerA"(byval lpsz as LPSTR) as LPSTR
declare function AnsiLowerBuff alias "CharLowerBuffA"(byval lpsz as LPSTR, byval cchLength as DWORD) as DWORD
declare function AnsiNext alias "CharNextA"(byval lpsz as LPCSTR) as LPSTR
declare function AnsiPrev alias "CharPrevA"(byval lpszStart as LPCSTR, byval lpszCurrent as LPCSTR) as LPSTR
declare function IsCharAlphaA(byval ch as CHAR) as WINBOOL

 declare function IsCharAlpha alias "IsCharAlphaA"(byval ch as CHAR) as WINBOOL

declare function IsCharAlphaW(byval ch as WCHAR) as WINBOOL


declare function IsCharAlphaNumericA(byval ch as CHAR) as WINBOOL

 declare function IsCharAlphaNumeric alias "IsCharAlphaNumericA"(byval ch as CHAR) as WINBOOL

declare function IsCharAlphaNumericW(byval ch as WCHAR) as WINBOOL


declare function IsCharUpperA(byval ch as CHAR) as WINBOOL

 declare function IsCharUpper alias "IsCharUpperA"(byval ch as CHAR) as WINBOOL

declare function IsCharUpperW(byval ch as WCHAR) as WINBOOL


declare function IsCharLowerA(byval ch as CHAR) as WINBOOL

 declare function IsCharLower alias "IsCharLowerA"(byval ch as CHAR) as WINBOOL

declare function IsCharLowerW(byval ch as WCHAR) as WINBOOL


declare function SetFocus(byval hWnd as HWND) as HWND
declare function GetActiveWindow() as HWND
declare function GetFocus() as HWND
declare function GetKBCodePage() as UINT
declare function GetKeyState(byval nVirtKey as long) as SHORT
declare function GetAsyncKeyState(byval vKey as long) as SHORT
declare function GetKeyboardState(byval lpKeyState as PBYTE) as WINBOOL
declare function SetKeyboardState(byval lpKeyState as LPBYTE) as WINBOOL
declare function GetKeyNameTextA(byval lParam as LONG, byval lpString as LPSTR, byval cchSize as long) as long

 declare function GetKeyNameText alias "GetKeyNameTextA"(byval lParam as LONG, byval lpString as LPSTR, byval cchSize as long) as long

declare function GetKeyNameTextW(byval lParam as LONG, byval lpString as LPWSTR, byval cchSize as long) as long


declare function GetKeyboardType(byval nTypeFlag as long) as long
declare function ToAscii_ alias "ToAscii"(byval uVirtKey as UINT, byval uScanCode as UINT, byval lpKeyState as const UBYTE ptr, byval lpChar as LPWORD, byval uFlags as UINT) as long
declare function ToAsciiEx(byval uVirtKey as UINT, byval uScanCode as UINT, byval lpKeyState as const UBYTE ptr, byval lpChar as LPWORD, byval uFlags as UINT, byval dwhkl as HKL) as long
declare function ToUnicode(byval wVirtKey as UINT, byval wScanCode as UINT, byval lpKeyState as const UBYTE ptr, byval pwszBuff as LPWSTR, byval cchBuff as long, byval wFlags as UINT) as long
declare function OemKeyScan(byval wOemChar as WORD) as DWORD
declare function VkKeyScanA(byval ch as CHAR) as SHORT

 declare function VkKeyScan alias "VkKeyScanA"(byval ch as CHAR) as SHORT

declare function VkKeyScanW(byval ch as WCHAR) as SHORT


declare function VkKeyScanExA(byval ch as CHAR, byval dwhkl as HKL) as SHORT

 declare function VkKeyScanEx alias "VkKeyScanExA"(byval ch as CHAR, byval dwhkl as HKL) as SHORT

declare function VkKeyScanExW(byval ch as WCHAR, byval dwhkl as HKL) as SHORT


declare sub keybd_event(byval bVk as UBYTE, byval bScan as UBYTE, byval dwFlags as DWORD, byval dwExtraInfo as ULONG_PTR)
const KEYEVENTF_EXTENDEDKEY = &h0001
const KEYEVENTF_KEYUP = &h0002
const KEYEVENTF_UNICODE = &h0004
const KEYEVENTF_SCANCODE = &h0008
const MOUSEEVENTF_MOVE = &h0001
const MOUSEEVENTF_LEFTDOWN = &h0002
const MOUSEEVENTF_LEFTUP = &h0004
const MOUSEEVENTF_RIGHTDOWN = &h0008
const MOUSEEVENTF_RIGHTUP = &h0010
const MOUSEEVENTF_MIDDLEDOWN = &h0020
const MOUSEEVENTF_MIDDLEUP = &h0040
const MOUSEEVENTF_XDOWN = &h0080
const MOUSEEVENTF_XUP = &h0100
const MOUSEEVENTF_WHEEL = &h0800


const MOUSEEVENTF_VIRTUALDESK = &h4000
const MOUSEEVENTF_ABSOLUTE = &h8000
const INPUT_MOUSE = 0
const INPUT_KEYBOARD = 1
const INPUT_HARDWARE = 2



declare sub mouse_event(byval dwFlags as DWORD, byval dx as DWORD, byval dy as DWORD, byval dwData as DWORD, byval dwExtraInfo as ULONG_PTR)

type tagMOUSEINPUT
 dx as LONG
 dy as LONG
 mouseData as DWORD
 dwFlags as DWORD
 time as DWORD
 dwExtraInfo as ULONG_PTR
end type

type MOUSEINPUT as tagMOUSEINPUT
type PMOUSEINPUT as tagMOUSEINPUT ptr
type LPMOUSEINPUT as tagMOUSEINPUT ptr

type tagKEYBDINPUT
 wVk as WORD
 wScan as WORD
 dwFlags as DWORD
 time as DWORD
 dwExtraInfo as ULONG_PTR
end type

type KEYBDINPUT as tagKEYBDINPUT
type PKEYBDINPUT as tagKEYBDINPUT ptr
type LPKEYBDINPUT as tagKEYBDINPUT ptr

type tagHARDWAREINPUT
 uMsg as DWORD
 wParamL as WORD
 wParamH as WORD
end type

type HARDWAREINPUT as tagHARDWAREINPUT
type PHARDWAREINPUT as tagHARDWAREINPUT ptr
type LPHARDWAREINPUT as tagHARDWAREINPUT ptr

type tagINPUT
 as DWORD type

 union
 mi as MOUSEINPUT
 ki as KEYBDINPUT
 hi as HARDWAREINPUT
 end union
end type

type INPUT_ as tagINPUT
type PINPUT as tagINPUT ptr
type LPINPUT as tagINPUT ptr
declare function SendInput(byval cInputs as UINT, byval pInputs as LPINPUT, byval cbSize as long) as UINT



type tagLASTINPUTINFO
 cbSize as UINT
 dwTime as DWORD
end type

type LASTINPUTINFO as tagLASTINPUTINFO
type PLASTINPUTINFO as tagLASTINPUTINFO ptr
declare function GetLastInputInfo(byval plii as PLASTINPUTINFO) as WINBOOL
declare function MapVirtualKeyA(byval uCode as UINT, byval uMapType as UINT) as UINT

 declare function MapVirtualKey alias "MapVirtualKeyA"(byval uCode as UINT, byval uMapType as UINT) as UINT

declare function MapVirtualKeyW(byval uCode as UINT, byval uMapType as UINT) as UINT


declare function MapVirtualKeyExA(byval uCode as UINT, byval uMapType as UINT, byval dwhkl as HKL) as UINT

 declare function MapVirtualKeyEx alias "MapVirtualKeyExA"(byval uCode as UINT, byval uMapType as UINT, byval dwhkl as HKL) as UINT

declare function MapVirtualKeyExW(byval uCode as UINT, byval uMapType as UINT, byval dwhkl as HKL) as UINT


declare function GetInputState() as WINBOOL
declare function GetQueueStatus(byval flags as UINT) as DWORD
declare function GetCapture() as HWND
declare function SetCapture(byval hWnd as HWND) as HWND
declare function ReleaseCapture() as WINBOOL
declare function MsgWaitForMultipleObjects(byval nCount as DWORD, byval pHandles as const HANDLE ptr, byval fWaitAll as WINBOOL, byval dwMilliseconds as DWORD, byval dwWakeMask as DWORD) as DWORD
declare function MsgWaitForMultipleObjectsEx(byval nCount as DWORD, byval pHandles as const HANDLE ptr, byval dwMilliseconds as DWORD, byval dwWakeMask as DWORD, byval dwFlags as DWORD) as DWORD

const MAPVK_VK_TO_VSC = 0
const MAPVK_VSC_TO_VK = 1
const MAPVK_VK_TO_CHAR = 2
const MAPVK_VSC_TO_VK_EX = 3


const MWMO_WAITALL = &h0001
const MWMO_ALERTABLE = &h0002
const MWMO_INPUTAVAILABLE = &h0004
const QS_KEY = &h0001
const QS_MOUSEMOVE = &h0002
const QS_MOUSEBUTTON = &h0004
const QS_POSTMESSAGE = &h0008
const QS_TIMER = &h0010
const QS_PAINT = &h0020
const QS_SENDMESSAGE = &h0040
const QS_HOTKEY = &h0080
const QS_ALLPOSTMESSAGE = &h0100
const QS_RAWINPUT = &h0400


const QS_MOUSE = QS_MOUSEMOVE or QS_MOUSEBUTTON

 const QS_INPUT = (QS_MOUSE or QS_KEY) or QS_RAWINPUT

const QS_ALLEVENTS = (((QS_INPUT or QS_POSTMESSAGE) or QS_TIMER) or QS_PAINT) or QS_HOTKEY
const QS_ALLINPUT = ((((QS_INPUT or QS_POSTMESSAGE) or QS_TIMER) or QS_PAINT) or QS_HOTKEY) or QS_SENDMESSAGE
const USER_TIMER_MAXIMUM = &h7FFFFFFF
const USER_TIMER_MINIMUM = &h0000000A


declare function SetTimer(byval hWnd as HWND, byval nIDEvent as UINT_PTR, byval uElapse as UINT, byval lpTimerFunc as TIMERPROC) as UINT_PTR
declare function KillTimer(byval hWnd as HWND, byval uIDEvent as UINT_PTR) as WINBOOL
declare function IsWindowUnicode(byval hWnd as HWND) as WINBOOL
declare function EnableWindow(byval hWnd as HWND, byval bEnable as WINBOOL) as WINBOOL
declare function IsWindowEnabled(byval hWnd as HWND) as WINBOOL
declare function LoadAcceleratorsA(byval hInstance as HINSTANCE, byval lpTableName as LPCSTR) as HACCEL

 declare function LoadAccelerators alias "LoadAcceleratorsA"(byval hInstance as HINSTANCE, byval lpTableName as LPCSTR) as HACCEL

declare function LoadAcceleratorsW(byval hInstance as HINSTANCE, byval lpTableName as LPCWSTR) as HACCEL


declare function CreateAcceleratorTableA(byval paccel as LPACCEL, byval cAccel as long) as HACCEL

 declare function CreateAcceleratorTable alias "CreateAcceleratorTableA"(byval paccel as LPACCEL, byval cAccel as long) as HACCEL

declare function CreateAcceleratorTableW(byval paccel as LPACCEL, byval cAccel as long) as HACCEL


declare function DestroyAcceleratorTable(byval hAccel as HACCEL) as WINBOOL
declare function CopyAcceleratorTableA(byval hAccelSrc as HACCEL, byval lpAccelDst as LPACCEL, byval cAccelEntries as long) as long

 declare function CopyAcceleratorTable alias "CopyAcceleratorTableA"(byval hAccelSrc as HACCEL, byval lpAccelDst as LPACCEL, byval cAccelEntries as long) as long

declare function CopyAcceleratorTableW(byval hAccelSrc as HACCEL, byval lpAccelDst as LPACCEL, byval cAccelEntries as long) as long


declare function TranslateAcceleratorA(byval hWnd as HWND, byval hAccTable as HACCEL, byval lpMsg as LPMSG) as long

 declare function TranslateAccelerator alias "TranslateAcceleratorA"(byval hWnd as HWND, byval hAccTable as HACCEL, byval lpMsg as LPMSG) as long

declare function TranslateAcceleratorW(byval hWnd as HWND, byval hAccTable as HACCEL, byval lpMsg as LPMSG) as long



const SM_CXSCREEN = 0
const SM_CYSCREEN = 1
const SM_CXVSCROLL = 2
const SM_CYHSCROLL = 3
const SM_CYCAPTION = 4
const SM_CXBORDER = 5
const SM_CYBORDER = 6
const SM_CXDLGFRAME = 7
const SM_CYDLGFRAME = 8
const SM_CYVTHUMB = 9
const SM_CXHTHUMB = 10
const SM_CXICON = 11
const SM_CYICON = 12
const SM_CXCURSOR = 13
const SM_CYCURSOR = 14
const SM_CYMENU = 15
const SM_CXFULLSCREEN = 16
const SM_CYFULLSCREEN = 17
const SM_CYKANJIWINDOW = 18
const SM_MOUSEPRESENT = 19
const SM_CYVSCROLL = 20
const SM_CXHSCROLL = 21
const SM_DEBUG = 22
const SM_SWAPBUTTON = 23
const SM_RESERVED1 = 24
const SM_RESERVED2 = 25
const SM_RESERVED3 = 26
const SM_RESERVED4 = 27
const SM_CXMIN = 28
const SM_CYMIN = 29
const SM_CXSIZE = 30
const SM_CYSIZE = 31
const SM_CXFRAME = 32
const SM_CYFRAME = 33
const SM_CXMINTRACK = 34
const SM_CYMINTRACK = 35
const SM_CXDOUBLECLK = 36
const SM_CYDOUBLECLK = 37
const SM_CXICONSPACING = 38
const SM_CYICONSPACING = 39
const SM_MENUDROPALIGNMENT = 40
const SM_PENWINDOWS = 41
const SM_DBCSENABLED = 42
const SM_CMOUSEBUTTONS = 43
const SM_CXFIXEDFRAME = SM_CXDLGFRAME
const SM_CYFIXEDFRAME = SM_CYDLGFRAME
const SM_CXSIZEFRAME = SM_CXFRAME
const SM_CYSIZEFRAME = SM_CYFRAME
const SM_SECURE = 44
const SM_CXEDGE = 45
const SM_CYEDGE = 46
const SM_CXMINSPACING = 47
const SM_CYMINSPACING = 48
const SM_CXSMICON = 49
const SM_CYSMICON = 50
const SM_CYSMCAPTION = 51
const SM_CXSMSIZE = 52
const SM_CYSMSIZE = 53
const SM_CXMENUSIZE = 54
const SM_CYMENUSIZE = 55
const SM_ARRANGE = 56
const SM_CXMINIMIZED = 57
const SM_CYMINIMIZED = 58
const SM_CXMAXTRACK = 59
const SM_CYMAXTRACK = 60
const SM_CXMAXIMIZED = 61
const SM_CYMAXIMIZED = 62
const SM_NETWORK = 63
const SM_CLEANBOOT = 67
const SM_CXDRAG = 68
const SM_CYDRAG = 69
const SM_SHOWSOUNDS = 70
const SM_CXMENUCHECK = 71
const SM_CYMENUCHECK = 72
const SM_SLOWMACHINE = 73
const SM_MIDEASTENABLED = 74
const SM_MOUSEWHEELPRESENT = 75
const SM_XVIRTUALSCREEN = 76
const SM_YVIRTUALSCREEN = 77
const SM_CXVIRTUALSCREEN = 78
const SM_CYVIRTUALSCREEN = 79
const SM_CMONITORS = 80
const SM_SAMEDISPLAYFORMAT = 81
const SM_IMMENABLED = 82
const SM_CXFOCUSBORDER = 83
const SM_CYFOCUSBORDER = 84
const SM_TABLETPC = 86
const SM_MEDIACENTER = 87
const SM_STARTER = 88
const SM_SERVERR2 = 89



 const SM_CMETRICS = 97

const SM_REMOTESESSION = &h1000
const SM_SHUTTINGDOWN = &h2000
const SM_REMOTECONTROL = &h2001
const SM_CARETBLINKINGENABLED = &h2002


declare function GetSystemMetrics(byval nIndex as long) as long
const PMB_ACTIVE = &h00000001
const MNC_IGNORE = 0
const MNC_CLOSE = 1
const MNC_EXECUTE = 2
const MNC_SELECT = 3
const MNS_NOCHECK = &h80000000
const MNS_MODELESS = &h40000000
const MNS_DRAGDROP = &h20000000
const MNS_AUTODISMISS = &h10000000
const MNS_NOTIFYBYPOS = &h08000000
const MNS_CHECKORBMP = &h04000000
const MIM_MAXHEIGHT = &h00000001
const MIM_BACKGROUND = &h00000002
const MIM_HELPID = &h00000004
const MIM_MENUDATA = &h00000008
const MIM_STYLE = &h00000010
const MIM_APPLYTOSUBMENUS = &h80000000
const MND_CONTINUE = 0
const MND_ENDMENU = 1
const MNGOF_TOPGAP = &h00000001
const MNGOF_BOTTOMGAP = &h00000002
const MNGO_NOINTERFACE = &h000000000
const MNGO_NOERROR = &h00000001
const MIIM_STATE = &h00000001
const MIIM_ID = &h00000002
const MIIM_SUBMENU = &h00000004
const MIIM_CHECKMARKS = &h00000008
const MIIM_TYPE = &h00000010
const MIIM_DATA = &h00000020
const MIIM_STRING = &h00000040
const MIIM_BITMAP = &h00000080
const MIIM_FTYPE = &h00000100
const HBMMENU_CALLBACK = cast(HBITMAP, -1)
const HBMMENU_SYSTEM = cast(HBITMAP, 1)
const HBMMENU_MBAR_RESTORE = cast(HBITMAP, 2)
const HBMMENU_MBAR_MINIMIZE = cast(HBITMAP, 3)
const HBMMENU_MBAR_CLOSE = cast(HBITMAP, 5)
const HBMMENU_MBAR_CLOSE_D = cast(HBITMAP, 6)
const HBMMENU_MBAR_MINIMIZE_D = cast(HBITMAP, 7)
const HBMMENU_POPUP_CLOSE = cast(HBITMAP, 8)
const HBMMENU_POPUP_RESTORE = cast(HBITMAP, 9)
const HBMMENU_POPUP_MAXIMIZE = cast(HBITMAP, 10)
const HBMMENU_POPUP_MINIMIZE = cast(HBITMAP, 11)
declare function LoadMenuA(byval hInstance as HINSTANCE, byval lpMenuName as LPCSTR) as HMENU

 declare function LoadMenu alias "LoadMenuA"(byval hInstance as HINSTANCE, byval lpMenuName as LPCSTR) as HMENU

declare function LoadMenuW(byval hInstance as HINSTANCE, byval lpMenuName as LPCWSTR) as HMENU


declare function LoadMenuIndirectA(byval lpMenuTemplate as const MENUTEMPLATEA ptr) as HMENU

 declare function LoadMenuIndirect alias "LoadMenuIndirectA"(byval lpMenuTemplate as const MENUTEMPLATEA ptr) as HMENU

declare function LoadMenuIndirectW(byval lpMenuTemplate as const MENUTEMPLATEW ptr) as HMENU


declare function GetMenu(byval hWnd as HWND) as HMENU
declare function SetMenu(byval hWnd as HWND, byval hMenu as HMENU) as WINBOOL
declare function ChangeMenuA(byval hMenu as HMENU, byval cmd as UINT, byval lpszNewItem as LPCSTR, byval cmdInsert as UINT, byval flags as UINT) as WINBOOL

 declare function ChangeMenu alias "ChangeMenuA"(byval hMenu as HMENU, byval cmd as UINT, byval lpszNewItem as LPCSTR, byval cmdInsert as UINT, byval flags as UINT) as WINBOOL

declare function ChangeMenuW(byval hMenu as HMENU, byval cmd as UINT, byval lpszNewItem as LPCWSTR, byval cmdInsert as UINT, byval flags as UINT) as WINBOOL


declare function HiliteMenuItem(byval hWnd as HWND, byval hMenu as HMENU, byval uIDHiliteItem as UINT, byval uHilite as UINT) as WINBOOL
declare function GetMenuStringA(byval hMenu as HMENU, byval uIDItem as UINT, byval lpString as LPSTR, byval cchMax as long, byval flags as UINT) as long

 declare function GetMenuString alias "GetMenuStringA"(byval hMenu as HMENU, byval uIDItem as UINT, byval lpString as LPSTR, byval cchMax as long, byval flags as UINT) as long

declare function GetMenuStringW(byval hMenu as HMENU, byval uIDItem as UINT, byval lpString as LPWSTR, byval cchMax as long, byval flags as UINT) as long


declare function GetMenuState(byval hMenu as HMENU, byval uId as UINT, byval uFlags as UINT) as UINT
declare function DrawMenuBar(byval hWnd as HWND) as WINBOOL
declare function GetSystemMenu(byval hWnd as HWND, byval bRevert as WINBOOL) as HMENU
declare function CreateMenu() as HMENU
declare function CreatePopupMenu() as HMENU
declare function DestroyMenu(byval hMenu as HMENU) as WINBOOL
declare function CheckMenuItem(byval hMenu as HMENU, byval uIDCheckItem as UINT, byval uCheck as UINT) as DWORD
declare function EnableMenuItem(byval hMenu as HMENU, byval uIDEnableItem as UINT, byval uEnable as UINT) as WINBOOL
declare function GetSubMenu(byval hMenu as HMENU, byval nPos as long) as HMENU
declare function GetMenuItemID(byval hMenu as HMENU, byval nPos as long) as UINT
declare function GetMenuItemCount(byval hMenu as HMENU) as long
declare function InsertMenuA(byval hMenu as HMENU, byval uPosition as UINT, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCSTR) as WINBOOL

 declare function InsertMenu alias "InsertMenuA"(byval hMenu as HMENU, byval uPosition as UINT, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCSTR) as WINBOOL

declare function InsertMenuW(byval hMenu as HMENU, byval uPosition as UINT, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCWSTR) as WINBOOL


declare function AppendMenuA(byval hMenu as HMENU, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCSTR) as WINBOOL

 declare function AppendMenu alias "AppendMenuA"(byval hMenu as HMENU, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCSTR) as WINBOOL

declare function AppendMenuW(byval hMenu as HMENU, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCWSTR) as WINBOOL


declare function ModifyMenuA(byval hMnu as HMENU, byval uPosition as UINT, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCSTR) as WINBOOL

 declare function ModifyMenu alias "ModifyMenuA"(byval hMnu as HMENU, byval uPosition as UINT, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCSTR) as WINBOOL

declare function ModifyMenuW(byval hMnu as HMENU, byval uPosition as UINT, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCWSTR) as WINBOOL


declare function RemoveMenu(byval hMenu as HMENU, byval uPosition as UINT, byval uFlags as UINT) as WINBOOL
declare function DeleteMenu(byval hMenu as HMENU, byval uPosition as UINT, byval uFlags as UINT) as WINBOOL
declare function SetMenuItemBitmaps(byval hMenu as HMENU, byval uPosition as UINT, byval uFlags as UINT, byval hBitmapUnchecked as HBITMAP, byval hBitmapChecked as HBITMAP) as WINBOOL
declare function GetMenuCheckMarkDimensions() as LONG
declare function TrackPopupMenu(byval hMenu as HMENU, byval uFlags as UINT, byval x as long, byval y as long, byval nReserved as long, byval hWnd as HWND, byval prcRect as const RECT ptr) as WINBOOL

type tagTPMPARAMS
 cbSize as UINT
 rcExclude as RECT
end type

type TPMPARAMS as tagTPMPARAMS

type tagMENUINFO
 cbSize as DWORD
 fMask as DWORD
 dwStyle as DWORD
 cyMax as UINT
 hbrBack as HBRUSH
 dwContextHelpID as DWORD
 dwMenuData as ULONG_PTR
end type

type MENUINFO as tagMENUINFO
type LPMENUINFO as tagMENUINFO ptr
type LPTPMPARAMS as TPMPARAMS ptr
type LPCMENUINFO as const MENUINFO ptr

declare function TrackPopupMenuEx(byval as HMENU, byval as UINT, byval as long, byval as long, byval as HWND, byval as LPTPMPARAMS) as WINBOOL
declare function GetMenuInfo(byval as HMENU, byval as LPMENUINFO) as WINBOOL
declare function SetMenuInfo(byval as HMENU, byval as LPCMENUINFO) as WINBOOL
declare function EndMenu() as WINBOOL


type tagMENUGETOBJECTINFO
 dwFlags as DWORD
 uPos as UINT
 hmenu as HMENU
 riid as PVOID
 pvObj as PVOID
end type

type MENUGETOBJECTINFO as tagMENUGETOBJECTINFO
type PMENUGETOBJECTINFO as tagMENUGETOBJECTINFO ptr

type tagMENUITEMINFOA
 cbSize as UINT
 fMask as UINT
 fType as UINT
 fState as UINT
 wID as UINT
 hSubMenu as HMENU
 hbmpChecked as HBITMAP
 hbmpUnchecked as HBITMAP
 dwItemData as ULONG_PTR
 dwTypeData as LPSTR
 cch as UINT
 hbmpItem as HBITMAP
end type

type MENUITEMINFOA as tagMENUITEMINFOA
type LPMENUITEMINFOA as tagMENUITEMINFOA ptr

type tagMENUITEMINFOW
 cbSize as UINT
 fMask as UINT
 fType as UINT
 fState as UINT
 wID as UINT
 hSubMenu as HMENU
 hbmpChecked as HBITMAP
 hbmpUnchecked as HBITMAP
 dwItemData as ULONG_PTR
 dwTypeData as LPWSTR
 cch as UINT
 hbmpItem as HBITMAP
end type

type MENUITEMINFOW as tagMENUITEMINFOW
type LPMENUITEMINFOW as tagMENUITEMINFOW ptr

 type MENUITEMINFO as MENUITEMINFOA
 type LPMENUITEMINFO as LPMENUITEMINFOA

type LPCMENUITEMINFOA as const MENUITEMINFOA ptr
type LPCMENUITEMINFOW as const MENUITEMINFOW ptr

 type LPCMENUITEMINFO as LPCMENUITEMINFOA

declare function InsertMenuItemA(byval hmenu as HMENU, byval item as UINT, byval fByPosition as WINBOOL, byval lpmi as LPCMENUITEMINFOA) as WINBOOL

 declare function InsertMenuItem alias "InsertMenuItemA"(byval hmenu as HMENU, byval item as UINT, byval fByPosition as WINBOOL, byval lpmi as LPCMENUITEMINFOA) as WINBOOL

declare function InsertMenuItemW(byval hmenu as HMENU, byval item as UINT, byval fByPosition as WINBOOL, byval lpmi as LPCMENUITEMINFOW) as WINBOOL


declare function GetMenuItemInfoA(byval hmenu as HMENU, byval item as UINT, byval fByPosition as WINBOOL, byval lpmii as LPMENUITEMINFOA) as WINBOOL

 declare function GetMenuItemInfo alias "GetMenuItemInfoA"(byval hmenu as HMENU, byval item as UINT, byval fByPosition as WINBOOL, byval lpmii as LPMENUITEMINFOA) as WINBOOL

declare function GetMenuItemInfoW(byval hmenu as HMENU, byval item as UINT, byval fByPosition as WINBOOL, byval lpmii as LPMENUITEMINFOW) as WINBOOL


declare function SetMenuItemInfoA(byval hmenu as HMENU, byval item as UINT, byval fByPositon as WINBOOL, byval lpmii as LPCMENUITEMINFOA) as WINBOOL

 declare function SetMenuItemInfo alias "SetMenuItemInfoA"(byval hmenu as HMENU, byval item as UINT, byval fByPositon as WINBOOL, byval lpmii as LPCMENUITEMINFOA) as WINBOOL

declare function SetMenuItemInfoW(byval hmenu as HMENU, byval item as UINT, byval fByPositon as WINBOOL, byval lpmii as LPCMENUITEMINFOW) as WINBOOL


const GMDI_USEDISABLED = &h0001
const GMDI_GOINTOPOPUPS = &h0002
declare function GetMenuDefaultItem(byval hMenu as HMENU, byval fByPos as UINT, byval gmdiFlags as UINT) as UINT
declare function SetMenuDefaultItem(byval hMenu as HMENU, byval uItem as UINT, byval fByPos as UINT) as WINBOOL
declare function GetMenuItemRect(byval hWnd as HWND, byval hMenu as HMENU, byval uItem as UINT, byval lprcItem as LPRECT) as WINBOOL
declare function MenuItemFromPoint(byval hWnd as HWND, byval hMenu as HMENU, byval ptScreen as POINT) as long

const TPM_LEFTBUTTON = &h00000
const TPM_RIGHTBUTTON = &h0002
const TPM_LEFTALIGN = &h00000
const TPM_CENTERALIGN = &h0004
const TPM_RIGHTALIGN = &h0008
const TPM_TOPALIGN = &h00000
const TPM_VCENTERALIGN = &h0010
const TPM_BOTTOMALIGN = &h0020
const TPM_HORIZONTAL = &h00000
const TPM_VERTICAL = &h0040
const TPM_NONOTIFY = &h0080
const TPM_RETURNCMD = &h0100
const TPM_RECURSE = &h0001
const TPM_HORPOSANIMATION = &h0400
const TPM_HORNEGANIMATION = &h0800
const TPM_VERPOSANIMATION = &h1000
const TPM_VERNEGANIMATION = &h2000
const TPM_NOANIMATION = &h4000
const TPM_LAYOUTRTL = &h8000


type tagDROPSTRUCT
 hwndSource as HWND
 hwndSink as HWND
 wFmt as DWORD
 dwData as ULONG_PTR
 ptDrop as POINT
 dwControlData as DWORD
end type

type DROPSTRUCT as tagDROPSTRUCT
type PDROPSTRUCT as tagDROPSTRUCT ptr
type LPDROPSTRUCT as tagDROPSTRUCT ptr

const DOF_EXECUTABLE = &h8001
const DOF_DOCUMENT = &h8002
const DOF_DIRECTORY = &h8003
const DOF_MULTIPLE = &h8004
const DOF_PROGMAN = &h0001
const DOF_SHELLDATA = &h0002
const DO_DROPFILE = &h454C4946
const DO_PRINTFILE = &h544E5250

declare function DragObject(byval hwndParent as HWND, byval hwndFrom as HWND, byval fmt as UINT, byval data as ULONG_PTR, byval hcur as HCURSOR) as DWORD
declare function DragDetect(byval hwnd as HWND, byval pt as POINT) as WINBOOL
declare function DrawIcon(byval hDC as HDC, byval X as long, byval Y as long, byval hIcon as HICON) as WINBOOL

const DT_TOP = &h000000000
const DT_LEFT = &h000000000
const DT_CENTER = &h00000001
const DT_RIGHT = &h00000002
const DT_VCENTER = &h00000004
const DT_BOTTOM = &h00000008
const DT_WORDBREAK = &h00000010
const DT_SINGLELINE = &h00000020
const DT_EXPANDTABS = &h00000040
const DT_TABSTOP = &h00000080
const DT_NOCLIP = &h00000100
const DT_EXTERNALLEADING = &h00000200
const DT_CALCRECT = &h00000400
const DT_NOPREFIX = &h00000800
const DT_INTERNAL = &h00001000
const DT_EDITCONTROL = &h00002000
const DT_PATH_ELLIPSIS = &h00004000
const DT_END_ELLIPSIS = &h00008000
const DT_MODIFYSTRING = &h00010000
const DT_RTLREADING = &h00020000
const DT_WORD_ELLIPSIS = &h00040000
const DT_NOFULLWIDTHCHARBREAK = &h00080000
const DT_HIDEPREFIX = &h00100000
const DT_PREFIXONLY = &h00200000

type tagDRAWTEXTPARAMS
 cbSize as UINT
 iTabLength as long
 iLeftMargin as long
 iRightMargin as long
 uiLengthDrawn as UINT
end type

type DRAWTEXTPARAMS as tagDRAWTEXTPARAMS
type LPDRAWTEXTPARAMS as tagDRAWTEXTPARAMS ptr
declare function DrawTextA(byval hdc as HDC, byval lpchText as LPCSTR, byval cchText as long, byval lprc as LPRECT, byval format as UINT) as long

 declare function DrawText alias "DrawTextA"(byval hdc as HDC, byval lpchText as LPCSTR, byval cchText as long, byval lprc as LPRECT, byval format as UINT) as long

declare function DrawTextW(byval hdc as HDC, byval lpchText as LPCWSTR, byval cchText as long, byval lprc as LPRECT, byval format as UINT) as long


declare function DrawTextExA(byval hdc as HDC, byval lpchText as LPSTR, byval cchText as long, byval lprc as LPRECT, byval format as UINT, byval lpdtp as LPDRAWTEXTPARAMS) as long

 declare function DrawTextEx alias "DrawTextExA"(byval hdc as HDC, byval lpchText as LPSTR, byval cchText as long, byval lprc as LPRECT, byval format as UINT, byval lpdtp as LPDRAWTEXTPARAMS) as long

declare function DrawTextExW(byval hdc as HDC, byval lpchText as LPWSTR, byval cchText as long, byval lprc as LPRECT, byval format as UINT, byval lpdtp as LPDRAWTEXTPARAMS) as long


declare function GrayStringA(byval hDC as HDC, byval hBrush as HBRUSH, byval lpOutputFunc as GRAYSTRINGPROC, byval lpData as LPARAM, byval nCount as long, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long) as WINBOOL

 declare function GrayString alias "GrayStringA"(byval hDC as HDC, byval hBrush as HBRUSH, byval lpOutputFunc as GRAYSTRINGPROC, byval lpData as LPARAM, byval nCount as long, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long) as WINBOOL

declare function GrayStringW(byval hDC as HDC, byval hBrush as HBRUSH, byval lpOutputFunc as GRAYSTRINGPROC, byval lpData as LPARAM, byval nCount as long, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long) as WINBOOL


declare function DrawStateA(byval hdc as HDC, byval hbrFore as HBRUSH, byval qfnCallBack as DRAWSTATEPROC, byval lData as LPARAM, byval wData as WPARAM, byval x as long, byval y as long, byval cx as long, byval cy as long, byval uFlags as UINT) as WINBOOL

 declare function DrawState alias "DrawStateA"(byval hdc as HDC, byval hbrFore as HBRUSH, byval qfnCallBack as DRAWSTATEPROC, byval lData as LPARAM, byval wData as WPARAM, byval x as long, byval y as long, byval cx as long, byval cy as long, byval uFlags as UINT) as WINBOOL

declare function DrawStateW(byval hdc as HDC, byval hbrFore as HBRUSH, byval qfnCallBack as DRAWSTATEPROC, byval lData as LPARAM, byval wData as WPARAM, byval x as long, byval y as long, byval cx as long, byval cy as long, byval uFlags as UINT) as WINBOOL


declare function TabbedTextOutA(byval hdc as HDC, byval x as long, byval y as long, byval lpString as LPCSTR, byval chCount as long, byval nTabPositions as long, byval lpnTabStopPositions as const INT_ ptr, byval nTabOrigin as long) as LONG

 declare function TabbedTextOut alias "TabbedTextOutA"(byval hdc as HDC, byval x as long, byval y as long, byval lpString as LPCSTR, byval chCount as long, byval nTabPositions as long, byval lpnTabStopPositions as const INT_ ptr, byval nTabOrigin as long) as LONG

declare function TabbedTextOutW(byval hdc as HDC, byval x as long, byval y as long, byval lpString as LPCWSTR, byval chCount as long, byval nTabPositions as long, byval lpnTabStopPositions as const INT_ ptr, byval nTabOrigin as long) as LONG


declare function GetTabbedTextExtentA(byval hdc as HDC, byval lpString as LPCSTR, byval chCount as long, byval nTabPositions as long, byval lpnTabStopPositions as const INT_ ptr) as DWORD

 declare function GetTabbedTextExtent alias "GetTabbedTextExtentA"(byval hdc as HDC, byval lpString as LPCSTR, byval chCount as long, byval nTabPositions as long, byval lpnTabStopPositions as const INT_ ptr) as DWORD

declare function GetTabbedTextExtentW(byval hdc as HDC, byval lpString as LPCWSTR, byval chCount as long, byval nTabPositions as long, byval lpnTabStopPositions as const INT_ ptr) as DWORD


declare function UpdateWindow(byval hWnd as HWND) as WINBOOL
declare function SetActiveWindow(byval hWnd as HWND) as HWND
declare function GetForegroundWindow() as HWND
declare function PaintDesktop(byval hdc as HDC) as WINBOOL
declare sub SwitchToThisWindow(byval hwnd as HWND, byval fUnknown as WINBOOL)
declare function SetForegroundWindow(byval hWnd as HWND) as WINBOOL
declare function AllowSetForegroundWindow(byval dwProcessId as DWORD) as WINBOOL
declare function LockSetForegroundWindow(byval uLockCode as UINT) as WINBOOL
declare function WindowFromDC(byval hDC as HDC) as HWND
declare function GetDC(byval hWnd as HWND) as HDC
declare function GetDCEx(byval hWnd as HWND, byval hrgnClip as HRGN, byval flags as DWORD) as HDC

const DST_COMPLEX = &h00000
const DST_TEXT = &h0001
const DST_PREFIXTEXT = &h0002
const DST_ICON = &h0003
const DST_BITMAP = &h0004
const DSS_NORMAL = &h00000
const DSS_UNION = &h0010
const DSS_DISABLED = &h0020
const DSS_MONO = &h0080
const DSS_HIDEPREFIX = &h0200
const DSS_PREFIXONLY = &h0400
const DSS_RIGHT = &h8000
const ASFW_ANY = cast(DWORD, -1)
const LSFW_LOCK = 1
const LSFW_UNLOCK = 2
const DCX_WINDOW = &h00000001
const DCX_CACHE = &h00000002
const DCX_NORESETATTRS = &h00000004
const DCX_CLIPCHILDREN = &h00000008
const DCX_CLIPSIBLINGS = &h00000010
const DCX_PARENTCLIP = &h00000020
const DCX_EXCLUDERGN = &h00000040
const DCX_INTERSECTRGN = &h00000080
const DCX_EXCLUDEUPDATE = &h00000100
const DCX_INTERSECTUPDATE = &h00000200
const DCX_LOCKWINDOWUPDATE = &h00000400
const DCX_VALIDATE = &h00200000

declare function GetWindowDC(byval hWnd as HWND) as HDC
declare function ReleaseDC(byval hWnd as HWND, byval hDC as HDC) as long
declare function BeginPaint(byval hWnd as HWND, byval lpPaint as LPPAINTSTRUCT) as HDC
declare function EndPaint(byval hWnd as HWND, byval lpPaint as const PAINTSTRUCT ptr) as WINBOOL
declare function GetUpdateRect(byval hWnd as HWND, byval lpRect as LPRECT, byval bErase as WINBOOL) as WINBOOL
declare function GetUpdateRgn(byval hWnd as HWND, byval hRgn as HRGN, byval bErase as WINBOOL) as long
declare function SetWindowRgn(byval hWnd as HWND, byval hRgn as HRGN, byval bRedraw as WINBOOL) as long
declare function GetWindowRgn(byval hWnd as HWND, byval hRgn as HRGN) as long
declare function GetWindowRgnBox(byval hWnd as HWND, byval lprc as LPRECT) as long
declare function ExcludeUpdateRgn(byval hDC as HDC, byval hWnd as HWND) as long
declare function InvalidateRect(byval hWnd as HWND, byval lpRect as const RECT ptr, byval bErase as WINBOOL) as WINBOOL
declare function ValidateRect(byval hWnd as HWND, byval lpRect as const RECT ptr) as WINBOOL
declare function InvalidateRgn(byval hWnd as HWND, byval hRgn as HRGN, byval bErase as WINBOOL) as WINBOOL
declare function ValidateRgn(byval hWnd as HWND, byval hRgn as HRGN) as WINBOOL
declare function RedrawWindow(byval hWnd as HWND, byval lprcUpdate as const RECT ptr, byval hrgnUpdate as HRGN, byval flags as UINT) as WINBOOL

const RDW_INVALIDATE = &h0001
const RDW_INTERNALPAINT = &h0002
const RDW_ERASE = &h0004
const RDW_VALIDATE = &h0008
const RDW_NOINTERNALPAINT = &h0010
const RDW_NOERASE = &h0020
const RDW_NOCHILDREN = &h0040
const RDW_ALLCHILDREN = &h0080
const RDW_UPDATENOW = &h0100
const RDW_ERASENOW = &h0200
const RDW_FRAME = &h0400
const RDW_NOFRAME = &h0800

declare function LockWindowUpdate(byval hWndLock as HWND) as WINBOOL
declare function ScrollWindow(byval hWnd as HWND, byval XAmount as long, byval YAmount as long, byval lpRect as const RECT ptr, byval lpClipRect as const RECT ptr) as WINBOOL
declare function ScrollDC(byval hDC as HDC, byval dx as long, byval dy as long, byval lprcScroll as const RECT ptr, byval lprcClip as const RECT ptr, byval hrgnUpdate as HRGN, byval lprcUpdate as LPRECT) as WINBOOL
declare function ScrollWindowEx(byval hWnd as HWND, byval dx as long, byval dy as long, byval prcScroll as const RECT ptr, byval prcClip as const RECT ptr, byval hrgnUpdate as HRGN, byval prcUpdate as LPRECT, byval flags as UINT) as long

const SW_SCROLLCHILDREN = &h0001
const SW_INVALIDATE = &h0002
const SW_ERASE = &h0004
const SW_SMOOTHSCROLL = &h0010

declare function SetScrollPos(byval hWnd as HWND, byval nBar as long, byval nPos as long, byval bRedraw as WINBOOL) as long
declare function GetScrollPos(byval hWnd as HWND, byval nBar as long) as long
declare function SetScrollRange(byval hWnd as HWND, byval nBar as long, byval nMinPos as long, byval nMaxPos as long, byval bRedraw as WINBOOL) as WINBOOL
declare function GetScrollRange(byval hWnd as HWND, byval nBar as long, byval lpMinPos as LPINT, byval lpMaxPos as LPINT) as WINBOOL
declare function ShowScrollBar(byval hWnd as HWND, byval wBar as long, byval bShow as WINBOOL) as WINBOOL
declare function EnableScrollBar(byval hWnd as HWND, byval wSBflags as UINT, byval wArrows as UINT) as WINBOOL

const ESB_ENABLE_BOTH = &h00000
const ESB_DISABLE_BOTH = &h0003
const ESB_DISABLE_LEFT = &h0001
const ESB_DISABLE_RIGHT = &h0002
const ESB_DISABLE_UP = &h0001
const ESB_DISABLE_DOWN = &h0002
const ESB_DISABLE_LTUP = ESB_DISABLE_LEFT
const ESB_DISABLE_RTDN = ESB_DISABLE_RIGHT
declare function SetPropA(byval hWnd as HWND, byval lpString as LPCSTR, byval hData as HANDLE) as WINBOOL

 declare function SetProp alias "SetPropA"(byval hWnd as HWND, byval lpString as LPCSTR, byval hData as HANDLE) as WINBOOL

declare function SetPropW(byval hWnd as HWND, byval lpString as LPCWSTR, byval hData as HANDLE) as WINBOOL


declare function GetPropA(byval hWnd as HWND, byval lpString as LPCSTR) as HANDLE

 declare function GetProp alias "GetPropA"(byval hWnd as HWND, byval lpString as LPCSTR) as HANDLE

declare function GetPropW(byval hWnd as HWND, byval lpString as LPCWSTR) as HANDLE


declare function RemovePropA(byval hWnd as HWND, byval lpString as LPCSTR) as HANDLE

 declare function RemoveProp alias "RemovePropA"(byval hWnd as HWND, byval lpString as LPCSTR) as HANDLE

declare function RemovePropW(byval hWnd as HWND, byval lpString as LPCWSTR) as HANDLE


declare function EnumPropsExA(byval hWnd as HWND, byval lpEnumFunc as PROPENUMPROCEXA, byval lParam as LPARAM) as long

 declare function EnumPropsEx alias "EnumPropsExA"(byval hWnd as HWND, byval lpEnumFunc as PROPENUMPROCEXA, byval lParam as LPARAM) as long

declare function EnumPropsExW(byval hWnd as HWND, byval lpEnumFunc as PROPENUMPROCEXW, byval lParam as LPARAM) as long


declare function EnumPropsA(byval hWnd as HWND, byval lpEnumFunc as PROPENUMPROCA) as long

 declare function EnumProps alias "EnumPropsA"(byval hWnd as HWND, byval lpEnumFunc as PROPENUMPROCA) as long

declare function EnumPropsW(byval hWnd as HWND, byval lpEnumFunc as PROPENUMPROCW) as long


declare function SetWindowTextA(byval hWnd as HWND, byval lpString as LPCSTR) as WINBOOL

 declare function SetWindowText alias "SetWindowTextA"(byval hWnd as HWND, byval lpString as LPCSTR) as WINBOOL

declare function SetWindowTextW(byval hWnd as HWND, byval lpString as LPCWSTR) as WINBOOL


declare function GetWindowTextA(byval hWnd as HWND, byval lpString as LPSTR, byval nMaxCount as long) as long

 declare function GetWindowText alias "GetWindowTextA"(byval hWnd as HWND, byval lpString as LPSTR, byval nMaxCount as long) as long

declare function GetWindowTextW(byval hWnd as HWND, byval lpString as LPWSTR, byval nMaxCount as long) as long


declare function GetWindowTextLengthA(byval hWnd as HWND) as long

 declare function GetWindowTextLength alias "GetWindowTextLengthA"(byval hWnd as HWND) as long

declare function GetWindowTextLengthW(byval hWnd as HWND) as long


declare function GetClientRect(byval hWnd as HWND, byval lpRect as LPRECT) as WINBOOL
declare function GetWindowRect(byval hWnd as HWND, byval lpRect as LPRECT) as WINBOOL
declare function AdjustWindowRect(byval lpRect as LPRECT, byval dwStyle as DWORD, byval bMenu as WINBOOL) as WINBOOL
declare function AdjustWindowRectEx(byval lpRect as LPRECT, byval dwStyle as DWORD, byval bMenu as WINBOOL, byval dwExStyle as DWORD) as WINBOOL
const HELPINFO_WINDOW = &h0001
const HELPINFO_MENUITEM = &h0002

type tagHELPINFO
 cbSize as UINT
 iContextType as long
 iCtrlId as long
 hItemHandle as HANDLE
 dwContextId as DWORD_PTR
 MousePos as POINT
end type

type HELPINFO as tagHELPINFO
type LPHELPINFO as tagHELPINFO ptr
declare function SetWindowContextHelpId(byval as HWND, byval as DWORD) as WINBOOL
declare function GetWindowContextHelpId(byval as HWND) as DWORD
declare function SetMenuContextHelpId(byval as HMENU, byval as DWORD) as WINBOOL
declare function GetMenuContextHelpId(byval as HMENU) as DWORD

const MB_OK = &h000000000
const MB_OKCANCEL = &h00000001
const MB_ABORTRETRYIGNORE = &h00000002
const MB_YESNOCANCEL = &h00000003
const MB_YESNO = &h00000004
const MB_RETRYCANCEL = &h00000005
const MB_CANCELTRYCONTINUE = &h00000006
const MB_ICONHAND = &h00000010
const MB_ICONQUESTION = &h00000020
const MB_ICONEXCLAMATION = &h00000030
const MB_ICONASTERISK = &h00000040
const MB_USERICON = &h00000080
const MB_ICONWARNING = MB_ICONEXCLAMATION
const MB_ICONERROR = MB_ICONHAND
const MB_ICONINFORMATION = MB_ICONASTERISK
const MB_ICONSTOP = MB_ICONHAND
const MB_DEFBUTTON1 = &h000000000
const MB_DEFBUTTON2 = &h00000100
const MB_DEFBUTTON3 = &h00000200
const MB_DEFBUTTON4 = &h00000300
const MB_APPLMODAL = &h000000000
const MB_SYSTEMMODAL = &h00001000
const MB_TASKMODAL = &h00002000
const MB_HELP = &h00004000
const MB_NOFOCUS = &h00008000
const MB_SETFOREGROUND = &h00010000
const MB_DEFAULT_DESKTOP_ONLY = &h00020000
const MB_TOPMOST = &h00040000
const MB_RIGHT = &h00080000
const MB_RTLREADING = &h00100000
const MB_SERVICE_NOTIFICATION = &h00200000
const MB_SERVICE_NOTIFICATION_NT3X = &h00040000
const MB_TYPEMASK = &h0000000F
const MB_ICONMASK = &h000000F0
const MB_DEFMASK = &h00000F00
const MB_MODEMASK = &h00003000
const MB_MISCMASK = &h0000C000
declare function MessageBoxA(byval hWnd as HWND, byval lpText as LPCSTR, byval lpCaption as LPCSTR, byval uType as UINT) as long

 declare function MessageBox alias "MessageBoxA"(byval hWnd as HWND, byval lpText as LPCSTR, byval lpCaption as LPCSTR, byval uType as UINT) as long

declare function MessageBoxW(byval hWnd as HWND, byval lpText as LPCWSTR, byval lpCaption as LPCWSTR, byval uType as UINT) as long


declare function MessageBoxExA(byval hWnd as HWND, byval lpText as LPCSTR, byval lpCaption as LPCSTR, byval uType as UINT, byval wLanguageId as WORD) as long

 declare function MessageBoxEx alias "MessageBoxExA"(byval hWnd as HWND, byval lpText as LPCSTR, byval lpCaption as LPCSTR, byval uType as UINT, byval wLanguageId as WORD) as long

declare function MessageBoxExW(byval hWnd as HWND, byval lpText as LPCWSTR, byval lpCaption as LPCWSTR, byval uType as UINT, byval wLanguageId as WORD) as long


type MSGBOXCALLBACK as sub(byval lpHelpInfo as LPHELPINFO)

type tagMSGBOXPARAMSA
 cbSize as UINT
 hwndOwner as HWND
 hInstance as HINSTANCE
 lpszText as LPCSTR
 lpszCaption as LPCSTR
 dwStyle as DWORD
 lpszIcon as LPCSTR
 dwContextHelpId as DWORD_PTR
 lpfnMsgBoxCallback as MSGBOXCALLBACK
 dwLanguageId as DWORD
end type

type MSGBOXPARAMSA as tagMSGBOXPARAMSA
type PMSGBOXPARAMSA as tagMSGBOXPARAMSA ptr
type LPMSGBOXPARAMSA as tagMSGBOXPARAMSA ptr

type tagMSGBOXPARAMSW
 cbSize as UINT
 hwndOwner as HWND
 hInstance as HINSTANCE
 lpszText as LPCWSTR
 lpszCaption as LPCWSTR
 dwStyle as DWORD
 lpszIcon as LPCWSTR
 dwContextHelpId as DWORD_PTR
 lpfnMsgBoxCallback as MSGBOXCALLBACK
 dwLanguageId as DWORD
end type

type MSGBOXPARAMSW as tagMSGBOXPARAMSW
type PMSGBOXPARAMSW as tagMSGBOXPARAMSW ptr
type LPMSGBOXPARAMSW as tagMSGBOXPARAMSW ptr

 type MSGBOXPARAMS as MSGBOXPARAMSA
 type PMSGBOXPARAMS as PMSGBOXPARAMSA
 type LPMSGBOXPARAMS as LPMSGBOXPARAMSA

declare function MessageBoxIndirectA(byval lpmbp as const MSGBOXPARAMSA ptr) as long

 declare function MessageBoxIndirect alias "MessageBoxIndirectA"(byval lpmbp as const MSGBOXPARAMSA ptr) as long

declare function MessageBoxIndirectW(byval lpmbp as const MSGBOXPARAMSW ptr) as long


declare function MessageBeep(byval uType as UINT) as WINBOOL
declare function ShowCursor(byval bShow as WINBOOL) as long
declare function SetCursorPos(byval X as long, byval Y as long) as WINBOOL
declare function SetCursor(byval hCursor as HCURSOR) as HCURSOR
declare function GetCursorPos(byval lpPoint as LPPOINT) as WINBOOL
declare function ClipCursor(byval lpRect as const RECT ptr) as WINBOOL
declare function GetClipCursor(byval lpRect as LPRECT) as WINBOOL
declare function GetCursor() as HCURSOR
declare function CreateCaret(byval hWnd as HWND, byval hBitmap as HBITMAP, byval nWidth as long, byval nHeight as long) as WINBOOL
declare function GetCaretBlinkTime() as UINT
declare function SetCaretBlinkTime(byval uMSeconds as UINT) as WINBOOL
declare function DestroyCaret() as WINBOOL
declare function HideCaret(byval hWnd as HWND) as WINBOOL
declare function ShowCaret(byval hWnd as HWND) as WINBOOL
declare function SetCaretPos(byval X as long, byval Y as long) as WINBOOL
declare function GetCaretPos(byval lpPoint as LPPOINT) as WINBOOL
declare function ClientToScreen(byval hWnd as HWND, byval lpPoint as LPPOINT) as WINBOOL
declare function ScreenToClient(byval hWnd as HWND, byval lpPoint as LPPOINT) as WINBOOL
declare function MapWindowPoints(byval hWndFrom as HWND, byval hWndTo as HWND, byval lpPoints as LPPOINT, byval cPoints as UINT) as long
declare function WindowFromPoint(byval Point as POINT) as HWND
declare function ChildWindowFromPoint(byval hWndParent as HWND, byval Point as POINT) as HWND
declare function ChildWindowFromPointEx(byval hwnd as HWND, byval pt as POINT, byval flags as UINT) as HWND


const CWP_ALL = &h00000
const CWP_SKIPINVISIBLE = &h0001
const CWP_SKIPDISABLED = &h0002
const CWP_SKIPTRANSPARENT = &h0004
const CTLCOLOR_MSGBOX = 0
const CTLCOLOR_EDIT = 1
const CTLCOLOR_LISTBOX = 2
const CTLCOLOR_BTN = 3
const CTLCOLOR_DLG = 4
const CTLCOLOR_SCROLLBAR = 5
const CTLCOLOR_STATIC = 6
const CTLCOLOR_MAX = 7
const COLOR_SCROLLBAR = 0
const COLOR_BACKGROUND = 1
const COLOR_ACTIVECAPTION = 2
const COLOR_INACTIVECAPTION = 3
const COLOR_MENU = 4
const COLOR_WINDOW = 5
const COLOR_WINDOWFRAME = 6
const COLOR_MENUTEXT = 7
const COLOR_WINDOWTEXT = 8
const COLOR_CAPTIONTEXT = 9
const COLOR_ACTIVEBORDER = 10
const COLOR_INACTIVEBORDER = 11
const COLOR_APPWORKSPACE = 12
const COLOR_HIGHLIGHT = 13
const COLOR_HIGHLIGHTTEXT = 14
const COLOR_BTNFACE = 15
const COLOR_BTNSHADOW = 16
const COLOR_GRAYTEXT = 17
const COLOR_BTNTEXT = 18
const COLOR_INACTIVECAPTIONTEXT = 19
const COLOR_BTNHIGHLIGHT = 20
const COLOR_3DDKSHADOW = 21
const COLOR_3DLIGHT = 22
const COLOR_INFOTEXT = 23
const COLOR_INFOBK = 24
const COLOR_HOTLIGHT = 26
const COLOR_GRADIENTACTIVECAPTION = 27
const COLOR_GRADIENTINACTIVECAPTION = 28
const COLOR_MENUHILIGHT = 29
const COLOR_MENUBAR = 30
const COLOR_DESKTOP = COLOR_BACKGROUND
const COLOR_3DFACE = COLOR_BTNFACE
const COLOR_3DSHADOW = COLOR_BTNSHADOW
const COLOR_3DHIGHLIGHT = COLOR_BTNHIGHLIGHT
const COLOR_3DHILIGHT = COLOR_BTNHIGHLIGHT
const COLOR_BTNHILIGHT = COLOR_BTNHIGHLIGHT

declare function GetSysColor(byval nIndex as long) as DWORD
declare function GetSysColorBrush(byval nIndex as long) as HBRUSH
declare function SetSysColors(byval cElements as long, byval lpaElements as const INT_ ptr, byval lpaRgbValues as const COLORREF ptr) as WINBOOL
declare function DrawFocusRect(byval hDC as HDC, byval lprc as const RECT ptr) as WINBOOL
declare function FillRect(byval hDC as HDC, byval lprc as const RECT ptr, byval hbr as HBRUSH) as long
declare function FrameRect(byval hDC as HDC, byval lprc as const RECT ptr, byval hbr as HBRUSH) as long
declare function InvertRect(byval hDC as HDC, byval lprc as const RECT ptr) as WINBOOL
declare function SetRect(byval lprc as LPRECT, byval xLeft as long, byval yTop as long, byval xRight as long, byval yBottom as long) as WINBOOL
declare function SetRectEmpty(byval lprc as LPRECT) as WINBOOL
declare function CopyRect(byval lprcDst as LPRECT, byval lprcSrc as const RECT ptr) as WINBOOL
declare function InflateRect(byval lprc as LPRECT, byval dx as long, byval dy as long) as WINBOOL
declare function IntersectRect(byval lprcDst as LPRECT, byval lprcSrc1 as const RECT ptr, byval lprcSrc2 as const RECT ptr) as WINBOOL
declare function UnionRect(byval lprcDst as LPRECT, byval lprcSrc1 as const RECT ptr, byval lprcSrc2 as const RECT ptr) as WINBOOL
declare function SubtractRect(byval lprcDst as LPRECT, byval lprcSrc1 as const RECT ptr, byval lprcSrc2 as const RECT ptr) as WINBOOL
declare function OffsetRect(byval lprc as LPRECT, byval dx as long, byval dy as long) as WINBOOL
declare function IsRectEmpty(byval lprc as const RECT ptr) as WINBOOL
declare function EqualRect(byval lprc1 as const RECT ptr, byval lprc2 as const RECT ptr) as WINBOOL
declare function PtInRect(byval lprc as const RECT ptr, byval pt as POINT) as WINBOOL
declare function GetWindowWord(byval hWnd as HWND, byval nIndex as long) as WORD
declare function SetWindowWord(byval hWnd as HWND, byval nIndex as long, byval wNewWord as WORD) as WORD
declare function GetWindowLongA(byval hWnd as HWND, byval nIndex as long) as LONG

 declare function GetWindowLong alias "GetWindowLongA"(byval hWnd as HWND, byval nIndex as long) as LONG

declare function GetWindowLongW(byval hWnd as HWND, byval nIndex as long) as LONG


declare function SetWindowLongA(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as LONG

 declare function SetWindowLong alias "SetWindowLongA"(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as LONG

declare function SetWindowLongW(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as LONG


 declare function GetWindowLongPtrA alias "GetWindowLongA"(byval hWnd as HWND, byval nIndex as long) as LONG

 declare function GetWindowLongPtr alias "GetWindowLongA"(byval hWnd as HWND, byval nIndex as long) as LONG

 declare function GetWindowLongPtrW alias "GetWindowLongW"(byval hWnd as HWND, byval nIndex as long) as LONG


 declare function SetWindowLongPtrA alias "SetWindowLongA"(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as LONG

 declare function SetWindowLongPtr alias "SetWindowLongA"(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as LONG

 declare function SetWindowLongPtrW alias "SetWindowLongW"(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as LONG



declare function GetClassWord(byval hWnd as HWND, byval nIndex as long) as WORD
declare function SetClassWord(byval hWnd as HWND, byval nIndex as long, byval wNewWord as WORD) as WORD
declare function GetClassLongA(byval hWnd as HWND, byval nIndex as long) as DWORD

 declare function GetClassLong alias "GetClassLongA"(byval hWnd as HWND, byval nIndex as long) as DWORD

declare function GetClassLongW(byval hWnd as HWND, byval nIndex as long) as DWORD


declare function SetClassLongA(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as DWORD

 declare function SetClassLong alias "SetClassLongA"(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as DWORD

declare function SetClassLongW(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as DWORD


 declare function GetClassLongPtrA alias "GetClassLongA"(byval hWnd as HWND, byval nIndex as long) as DWORD

 declare function GetClassLongPtr alias "GetClassLongA"(byval hWnd as HWND, byval nIndex as long) as DWORD

 declare function GetClassLongPtrW alias "GetClassLongW"(byval hWnd as HWND, byval nIndex as long) as DWORD


 declare function SetClassLongPtrA alias "SetClassLongA"(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as DWORD

 declare function SetClassLongPtr alias "SetClassLongA"(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as DWORD

 declare function SetClassLongPtrW alias "SetClassLongW"(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as DWORD



declare function GetProcessDefaultLayout(byval pdwDefaultLayout as DWORD ptr) as WINBOOL
declare function SetProcessDefaultLayout(byval dwDefaultLayout as DWORD) as WINBOOL
declare function GetDesktopWindow() as HWND
declare function GetParent(byval hWnd as HWND) as HWND
declare function SetParent(byval hWndChild as HWND, byval hWndNewParent as HWND) as HWND
declare function EnumChildWindows(byval hWndParent as HWND, byval lpEnumFunc as WNDENUMPROC, byval lParam as LPARAM) as WINBOOL
declare function FindWindowA(byval lpClassName as LPCSTR, byval lpWindowName as LPCSTR) as HWND

 declare function FindWindow alias "FindWindowA"(byval lpClassName as LPCSTR, byval lpWindowName as LPCSTR) as HWND

declare function FindWindowW(byval lpClassName as LPCWSTR, byval lpWindowName as LPCWSTR) as HWND


declare function FindWindowExA(byval hWndParent as HWND, byval hWndChildAfter as HWND, byval lpszClass as LPCSTR, byval lpszWindow as LPCSTR) as HWND

 declare function FindWindowEx alias "FindWindowExA"(byval hWndParent as HWND, byval hWndChildAfter as HWND, byval lpszClass as LPCSTR, byval lpszWindow as LPCSTR) as HWND

declare function FindWindowExW(byval hWndParent as HWND, byval hWndChildAfter as HWND, byval lpszClass as LPCWSTR, byval lpszWindow as LPCWSTR) as HWND


declare function GetShellWindow() as HWND
declare function RegisterShellHookWindow(byval hwnd as HWND) as WINBOOL
declare function DeregisterShellHookWindow(byval hwnd as HWND) as WINBOOL
declare function EnumWindows(byval lpEnumFunc as WNDENUMPROC, byval lParam as LPARAM) as WINBOOL
declare function EnumThreadWindows(byval dwThreadId as DWORD, byval lpfn as WNDENUMPROC, byval lParam as LPARAM) as WINBOOL
declare function GetClassNameA(byval hWnd as HWND, byval lpClassName as LPSTR, byval nMaxCount as long) as long

 declare function GetClassName alias "GetClassNameA"(byval hWnd as HWND, byval lpClassName as LPSTR, byval nMaxCount as long) as long

declare function GetClassNameW(byval hWnd as HWND, byval lpClassName as LPWSTR, byval nMaxCount as long) as long


declare function GetTopWindow(byval hWnd as HWND) as HWND
declare function GetWindowThreadProcessId(byval hWnd as HWND, byval lpdwProcessId as LPDWORD) as DWORD
declare function IsGUIThread(byval bConvert as WINBOOL) as WINBOOL
declare function GetLastActivePopup(byval hWnd as HWND) as HWND
const GW_HWNDFIRST = 0
const GW_HWNDLAST = 1
const GW_HWNDNEXT = 2
const GW_HWNDPREV = 3
const GW_OWNER = 4
const GW_CHILD = 5
const GW_ENABLEDPOPUP = 6
const GW_MAX = 6
declare function GetWindow(byval hWnd as HWND, byval uCmd as UINT) as HWND
declare function SetWindowsHookA(byval nFilterType as long, byval pfnFilterProc as HOOKPROC) as HHOOK

 declare function SetWindowsHook alias "SetWindowsHookA"(byval nFilterType as long, byval pfnFilterProc as HOOKPROC) as HHOOK

declare function SetWindowsHookW(byval nFilterType as long, byval pfnFilterProc as HOOKPROC) as HHOOK


declare function UnhookWindowsHook(byval nCode as long, byval pfnFilterProc as HOOKPROC) as WINBOOL
declare function SetWindowsHookExA(byval idHook as long, byval lpfn as HOOKPROC, byval hmod as HINSTANCE, byval dwThreadId as DWORD) as HHOOK

 declare function SetWindowsHookEx alias "SetWindowsHookExA"(byval idHook as long, byval lpfn as HOOKPROC, byval hmod as HINSTANCE, byval dwThreadId as DWORD) as HHOOK

declare function SetWindowsHookExW(byval idHook as long, byval lpfn as HOOKPROC, byval hmod as HINSTANCE, byval dwThreadId as DWORD) as HHOOK


declare function UnhookWindowsHookEx(byval hhk as HHOOK) as WINBOOL
declare function CallNextHookEx(byval hhk as HHOOK, byval nCode as long, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT
const MF_INSERT = &h000000000
const MF_CHANGE = &h00000080
const MF_APPEND = &h00000100
const MF_DELETE = &h00000200
const MF_REMOVE = &h00001000
const MF_BYCOMMAND = &h000000000
const MF_BYPOSITION = &h00000400
const MF_SEPARATOR = &h00000800
const MF_ENABLED = &h000000000
const MF_GRAYED = &h00000001
const MF_DISABLED = &h00000002
const MF_UNCHECKED = &h000000000
const MF_CHECKED = &h00000008
const MF_USECHECKBITMAPS = &h00000200
const MF_STRING = &h000000000
const MF_BITMAP = &h00000004
const MF_OWNERDRAW = &h00000100
const MF_POPUP = &h00000010
const MF_MENUBARBREAK = &h00000020
const MF_MENUBREAK = &h00000040
const MF_UNHILITE = &h000000000
const MF_HILITE = &h00000080
const MF_DEFAULT = &h00001000
const MF_SYSMENU = &h00002000
const MF_HELP = &h00004000
const MF_RIGHTJUSTIFY = &h00004000
const MF_MOUSESELECT = &h00008000
const MF_END = &h00000080
const MFT_STRING = MF_STRING
const MFT_BITMAP = MF_BITMAP
const MFT_MENUBARBREAK = MF_MENUBARBREAK
const MFT_MENUBREAK = MF_MENUBREAK
const MFT_OWNERDRAW = MF_OWNERDRAW
const MFT_RADIOCHECK = &h00000200
const MFT_SEPARATOR = MF_SEPARATOR
const MFT_RIGHTORDER = &h00002000
const MFT_RIGHTJUSTIFY = MF_RIGHTJUSTIFY
const MFS_GRAYED = &h00000003
const MFS_DISABLED = MFS_GRAYED
const MFS_CHECKED = MF_CHECKED
const MFS_HILITE = MF_HILITE
const MFS_ENABLED = MF_ENABLED
const MFS_UNCHECKED = MF_UNCHECKED
const MFS_UNHILITE = MF_UNHILITE
const MFS_DEFAULT = MF_DEFAULT
declare function CheckMenuRadioItem(byval hmenu as HMENU, byval first as UINT, byval last as UINT, byval check as UINT, byval flags as UINT) as WINBOOL

type MENUITEMTEMPLATEHEADER
 versionNumber as WORD
 offset as WORD
end type

type PMENUITEMTEMPLATEHEADER as MENUITEMTEMPLATEHEADER ptr

type MENUITEMTEMPLATE
 mtOption as WORD
 mtID as WORD
 mtString as wstring * 1
end type

type PMENUITEMTEMPLATE as MENUITEMTEMPLATE ptr
const MF_END = &h00000080
const SC_SIZE = &hF000
const SC_MOVE = &hF010
const SC_MINIMIZE = &hF020
const SC_MAXIMIZE = &hF030
const SC_NEXTWINDOW = &hF040
const SC_PREVWINDOW = &hF050
const SC_CLOSE = &hF060
const SC_VSCROLL = &hF070
const SC_HSCROLL = &hF080
const SC_MOUSEMENU = &hF090
const SC_KEYMENU = &hF100
const SC_ARRANGE = &hF110
const SC_RESTORE = &hF120
const SC_TASKLIST = &hF130
const SC_SCREENSAVE = &hF140
const SC_HOTKEY = &hF150
const SC_DEFAULT = &hF160
const SC_MONITORPOWER = &hF170
const SC_CONTEXTHELP = &hF180
const SC_SEPARATOR = &hF00F


const SC_ICON = SC_MINIMIZE
const SC_ZOOM = SC_MAXIMIZE
declare function LoadBitmapA(byval hInstance as HINSTANCE, byval lpBitmapName as LPCSTR) as HBITMAP

 declare function LoadBitmap alias "LoadBitmapA"(byval hInstance as HINSTANCE, byval lpBitmapName as LPCSTR) as HBITMAP

declare function LoadBitmapW(byval hInstance as HINSTANCE, byval lpBitmapName as LPCWSTR) as HBITMAP


declare function LoadCursorA(byval hInstance as HINSTANCE, byval lpCursorName as LPCSTR) as HCURSOR

 declare function LoadCursor alias "LoadCursorA"(byval hInstance as HINSTANCE, byval lpCursorName as LPCSTR) as HCURSOR

declare function LoadCursorW(byval hInstance as HINSTANCE, byval lpCursorName as LPCWSTR) as HCURSOR


declare function LoadCursorFromFileA(byval lpFileName as LPCSTR) as HCURSOR

 declare function LoadCursorFromFile alias "LoadCursorFromFileA"(byval lpFileName as LPCSTR) as HCURSOR

declare function LoadCursorFromFileW(byval lpFileName as LPCWSTR) as HCURSOR


declare function CreateCursor(byval hInst as HINSTANCE, byval xHotSpot as long, byval yHotSpot as long, byval nWidth as long, byval nHeight as long, byval pvANDPlane as const any ptr, byval pvXORPlane as const any ptr) as HCURSOR
declare function DestroyCursor(byval hCursor as HCURSOR) as WINBOOL

type _ICONINFO
 fIcon as WINBOOL
 xHotspot as DWORD
 yHotspot as DWORD
 hbmMask as HBITMAP
 hbmColor as HBITMAP
end type

type ICONINFO as _ICONINFO
type PICONINFO as ICONINFO ptr
declare function SetSystemCursor(byval hcur as HCURSOR, byval id as DWORD) as WINBOOL
declare function LoadIconA(byval hInstance as HINSTANCE, byval lpIconName as LPCSTR) as HICON

 declare function LoadIcon alias "LoadIconA"(byval hInstance as HINSTANCE, byval lpIconName as LPCSTR) as HICON

declare function LoadIconW(byval hInstance as HINSTANCE, byval lpIconName as LPCWSTR) as HICON


declare function PrivateExtractIconsA(byval szFileName as LPCSTR, byval nIconIndex as long, byval cxIcon as long, byval cyIcon as long, byval phicon as HICON ptr, byval piconid as UINT ptr, byval nIcons as UINT, byval flags as UINT) as UINT

 declare function PrivateExtractIcons alias "PrivateExtractIconsA"(byval szFileName as LPCSTR, byval nIconIndex as long, byval cxIcon as long, byval cyIcon as long, byval phicon as HICON ptr, byval piconid as UINT ptr, byval nIcons as UINT, byval flags as UINT) as UINT

declare function PrivateExtractIconsW(byval szFileName as LPCWSTR, byval nIconIndex as long, byval cxIcon as long, byval cyIcon as long, byval phicon as HICON ptr, byval piconid as UINT ptr, byval nIcons as UINT, byval flags as UINT) as UINT


declare function CreateIcon(byval hInstance as HINSTANCE, byval nWidth as long, byval nHeight as long, byval cPlanes as UBYTE, byval cBitsPixel as UBYTE, byval lpbANDbits as const UBYTE ptr, byval lpbXORbits as const UBYTE ptr) as HICON
declare function DestroyIcon(byval hIcon as HICON) as WINBOOL
declare function LookupIconIdFromDirectory(byval presbits as PBYTE, byval fIcon as WINBOOL) as long
declare function LookupIconIdFromDirectoryEx(byval presbits as PBYTE, byval fIcon as WINBOOL, byval cxDesired as long, byval cyDesired as long, byval Flags as UINT) as long
declare function CreateIconFromResource(byval presbits as PBYTE, byval dwResSize as DWORD, byval fIcon as WINBOOL, byval dwVer as DWORD) as HICON
declare function CreateIconFromResourceEx(byval presbits as PBYTE, byval dwResSize as DWORD, byval fIcon as WINBOOL, byval dwVer as DWORD, byval cxDesired as long, byval cyDesired as long, byval Flags as UINT) as HICON

type tagCURSORSHAPE
 xHotSpot as long
 yHotSpot as long
 cx as long
 cy as long
 cbWidth as long
 Planes as UBYTE
 BitsPixel as UBYTE
end type

type CURSORSHAPE as tagCURSORSHAPE
type LPCURSORSHAPE as tagCURSORSHAPE ptr
const IMAGE_BITMAP = 0
const IMAGE_ICON = 1
const IMAGE_CURSOR = 2
const IMAGE_ENHMETAFILE = 3
const LR_DEFAULTCOLOR = &h00000
const LR_MONOCHROME = &h0001
const LR_COLOR = &h0002
const LR_COPYRETURNORG = &h0004
const LR_COPYDELETEORG = &h0008
const LR_LOADFROMFILE = &h0010
const LR_LOADTRANSPARENT = &h0020
const LR_DEFAULTSIZE = &h0040
const LR_VGACOLOR = &h0080
const LR_LOADMAP3DCOLORS = &h1000
const LR_CREATEDIBSECTION = &h2000
const LR_COPYFROMRESOURCE = &h4000
const LR_SHARED = &h8000
declare function LoadImageA(byval hInst as HINSTANCE, byval name as LPCSTR, byval type as UINT, byval cx as long, byval cy as long, byval fuLoad as UINT) as HANDLE

 declare function LoadImage alias "LoadImageA"(byval hInst as HINSTANCE, byval name as LPCSTR, byval type as UINT, byval cx as long, byval cy as long, byval fuLoad as UINT) as HANDLE

declare function LoadImageW(byval hInst as HINSTANCE, byval name as LPCWSTR, byval type as UINT, byval cx as long, byval cy as long, byval fuLoad as UINT) as HANDLE


declare function CopyImage(byval h as HANDLE, byval type as UINT, byval cx as long, byval cy as long, byval flags as UINT) as HANDLE
declare function DrawIconEx(byval hdc as HDC, byval xLeft as long, byval yTop as long, byval hIcon as HICON, byval cxWidth as long, byval cyWidth as long, byval istepIfAniCur as UINT, byval hbrFlickerFreeDraw as HBRUSH, byval diFlags as UINT) as WINBOOL
declare function CreateIconIndirect(byval piconinfo as PICONINFO) as HICON
declare function CopyIcon(byval hIcon as HICON) as HICON
declare function GetIconInfo(byval hIcon as HICON, byval piconinfo as PICONINFO) as WINBOOL







const DI_MASK = &h0001
const DI_IMAGE = &h0002
const DI_NORMAL = &h0003
const DI_COMPAT = &h0004
const DI_DEFAULTSIZE = &h0008
const DI_NOMIRROR = &h0010
const RES_ICON = 1
const RES_CURSOR = 2
const OBM_CLOSE = 32754
const OBM_UPARROW = 32753
const OBM_DNARROW = 32752
const OBM_RGARROW = 32751
const OBM_LFARROW = 32750
const OBM_REDUCE = 32749
const OBM_ZOOM = 32748
const OBM_RESTORE = 32747
const OBM_REDUCED = 32746
const OBM_ZOOMD = 32745
const OBM_RESTORED = 32744
const OBM_UPARROWD = 32743
const OBM_DNARROWD = 32742
const OBM_RGARROWD = 32741
const OBM_LFARROWD = 32740
const OBM_MNARROW = 32739
const OBM_COMBO = 32738
const OBM_UPARROWI = 32737
const OBM_DNARROWI = 32736
const OBM_RGARROWI = 32735
const OBM_LFARROWI = 32734
const OBM_OLD_CLOSE = 32767
const OBM_SIZE = 32766
const OBM_OLD_UPARROW = 32765
const OBM_OLD_DNARROW = 32764
const OBM_OLD_RGARROW = 32763
const OBM_OLD_LFARROW = 32762
const OBM_BTSIZE = 32761
const OBM_CHECK = 32760
const OBM_CHECKBOXES = 32759
const OBM_BTNCORNERS = 32758
const OBM_OLD_REDUCE = 32757
const OBM_OLD_ZOOM = 32756
const OBM_OLD_RESTORE = 32755
const OCR_NORMAL = 32512
const OCR_IBEAM = 32513
const OCR_WAIT = 32514
const OCR_CROSS = 32515
const OCR_UP = 32516
const OCR_SIZE = 32640
const OCR_ICON = 32641
const OCR_SIZENWSE = 32642
const OCR_SIZENESW = 32643
const OCR_SIZEWE = 32644
const OCR_SIZENS = 32645
const OCR_SIZEALL = 32646
const OCR_ICOCUR = 32647
const OCR_NO = 32648
const OCR_HAND = 32649
const OCR_APPSTARTING = 32650
const OIC_SAMPLE = 32512
const OIC_HAND = 32513
const OIC_QUES = 32514
const OIC_BANG = 32515
const OIC_NOTE = 32516
const OIC_WINLOGO = 32517
const OIC_WARNING = OIC_BANG
const OIC_ERROR = OIC_HAND
const OIC_INFORMATION = OIC_NOTE


const ORD_LANGDRIVER = 1


const IDOK = 1
const IDCANCEL = 2
const IDABORT = 3
const IDRETRY = 4
const IDIGNORE = 5
const IDYES = 6
const IDNO = 7
const IDCLOSE = 8
const IDHELP = 9
const IDTRYAGAIN = 10
const IDCONTINUE = 11
const IDTIMEOUT = 32000
const ES_LEFT = &h00000
const ES_CENTER = &h0001
const ES_RIGHT = &h0002
const ES_MULTILINE = &h0004
const ES_UPPERCASE = &h0008
const ES_LOWERCASE = &h0010
const ES_PASSWORD = &h0020
const ES_AUTOVSCROLL = &h0040
const ES_AUTOHSCROLL = &h0080
const ES_NOHIDESEL = &h0100
const ES_OEMCONVERT = &h0400
const ES_READONLY = &h0800
const ES_WANTRETURN = &h1000
const ES_NUMBER = &h2000
const EN_SETFOCUS = &h0100
const EN_KILLFOCUS = &h0200
const EN_CHANGE = &h0300
const EN_UPDATE = &h0400
const EN_ERRSPACE = &h0500
const EN_MAXTEXT = &h0501
const EN_HSCROLL = &h0601
const EN_VSCROLL = &h0602
const EN_ALIGN_LTR_EC = &h0700
const EN_ALIGN_RTL_EC = &h0701
const EC_LEFTMARGIN = &h0001
const EC_RIGHTMARGIN = &h0002
const EC_USEFONTINFO = &hffff
const EMSIS_COMPOSITIONSTRING = &h0001
const EIMES_GETCOMPSTRATONCE = &h0001
const EIMES_CANCELCOMPSTRINFOCUS = &h0002
const EIMES_COMPLETECOMPSTRKILLFOCUS = &h0004
const EM_GETSEL = &h00B0
const EM_SETSEL = &h00B1
const EM_GETRECT = &h00B2
const EM_SETRECT = &h00B3
const EM_SETRECTNP = &h00B4
const EM_SCROLL = &h00B5
const EM_LINESCROLL = &h00B6
const EM_SCROLLCARET = &h00B7
const EM_GETMODIFY = &h00B8
const EM_SETMODIFY = &h00B9
const EM_GETLINECOUNT = &h00BA
const EM_LINEINDEX = &h00BB
const EM_SETHANDLE = &h00BC
const EM_GETHANDLE = &h00BD
const EM_GETTHUMB = &h00BE
const EM_LINELENGTH = &h00C1
const EM_REPLACESEL = &h00C2
const EM_GETLINE = &h00C4
const EM_LIMITTEXT = &h00C5
const EM_CANUNDO = &h00C6
const EM_UNDO = &h00C7
const EM_FMTLINES = &h00C8
const EM_LINEFROMCHAR = &h00C9
const EM_SETTABSTOPS = &h00CB
const EM_SETPASSWORDCHAR = &h00CC
const EM_EMPTYUNDOBUFFER = &h00CD
const EM_GETFIRSTVISIBLELINE = &h00CE
const EM_SETREADONLY = &h00CF
const EM_SETWORDBREAKPROC = &h00D0
const EM_GETWORDBREAKPROC = &h00D1
const EM_GETPASSWORDCHAR = &h00D2
const EM_SETMARGINS = &h00D3
const EM_GETMARGINS = &h00D4
const EM_SETLIMITTEXT = EM_LIMITTEXT
const EM_GETLIMITTEXT = &h00D5
const EM_POSFROMCHAR = &h00D6
const EM_CHARFROMPOS = &h00D7
const EM_SETIMESTATUS = &h00D8
const EM_GETIMESTATUS = &h00D9
const WB_LEFT = 0
const WB_RIGHT = 1
const WB_ISDELIMITER = 2
const BS_PUSHBUTTON = &h000000000
const BS_DEFPUSHBUTTON = &h00000001
const BS_CHECKBOX = &h00000002
const BS_AUTOCHECKBOX = &h00000003
const BS_RADIOBUTTON = &h00000004
const BS_3STATE = &h00000005
const BS_AUTO3STATE = &h00000006
const BS_GROUPBOX = &h00000007
const BS_USERBUTTON = &h00000008
const BS_AUTORADIOBUTTON = &h00000009
const BS_PUSHBOX = &h0000000A
const BS_OWNERDRAW = &h0000000B
const BS_TYPEMASK = &h0000000F
const BS_LEFTTEXT = &h00000020
const BS_TEXT = &h000000000
const BS_ICON = &h00000040
const BS_BITMAP = &h00000080
const BS_LEFT = &h00000100
const BS_RIGHT = &h00000200
const BS_CENTER = &h00000300
const BS_TOP = &h00000400
const BS_BOTTOM = &h00000800
const BS_VCENTER = &h00000C00
const BS_PUSHLIKE = &h00001000
const BS_MULTILINE = &h00002000
const BS_NOTIFY = &h00004000
const BS_FLAT = &h00008000
const BS_RIGHTBUTTON = BS_LEFTTEXT
const BN_CLICKED = 0
const BN_PAINT = 1
const BN_HILITE = 2
const BN_UNHILITE = 3
const BN_DISABLE = 4
const BN_DOUBLECLICKED = 5
const BN_PUSHED = BN_HILITE
const BN_UNPUSHED = BN_UNHILITE
const BN_DBLCLK = BN_DOUBLECLICKED
const BN_SETFOCUS = 6
const BN_KILLFOCUS = 7
const BM_GETCHECK = &h00F0
const BM_SETCHECK = &h00F1
const BM_GETSTATE = &h00F2
const BM_SETSTATE = &h00F3
const BM_SETSTYLE = &h00F4
const BM_CLICK = &h00F5
const BM_GETIMAGE = &h00F6
const BM_SETIMAGE = &h00F7


const BST_UNCHECKED = &h00000
const BST_CHECKED = &h0001
const BST_INDETERMINATE = &h0002
const BST_PUSHED = &h0004
const BST_FOCUS = &h0008
const SS_LEFT = &h000000000
const SS_CENTER = &h00000001
const SS_RIGHT = &h00000002
const SS_ICON = &h00000003
const SS_BLACKRECT = &h00000004
const SS_GRAYRECT = &h00000005
const SS_WHITERECT = &h00000006
const SS_BLACKFRAME = &h00000007
const SS_GRAYFRAME = &h00000008
const SS_WHITEFRAME = &h00000009
const SS_USERITEM = &h0000000A
const SS_SIMPLE = &h0000000B
const SS_LEFTNOWORDWRAP = &h0000000C
const SS_OWNERDRAW = &h0000000D
const SS_BITMAP = &h0000000E
const SS_ENHMETAFILE = &h0000000F
const SS_ETCHEDHORZ = &h00000010
const SS_ETCHEDVERT = &h00000011
const SS_ETCHEDFRAME = &h00000012
const SS_TYPEMASK = &h0000001F
const SS_REALSIZECONTROL = &h00000040
const SS_NOPREFIX = &h00000080
const SS_NOTIFY = &h00000100
const SS_CENTERIMAGE = &h00000200
const SS_RIGHTJUST = &h00000400
const SS_REALSIZEIMAGE = &h00000800
const SS_SUNKEN = &h00001000
const SS_EDITCONTROL = &h00002000
const SS_ENDELLIPSIS = &h00004000
const SS_PATHELLIPSIS = &h00008000
const SS_WORDELLIPSIS = &h0000C000
const SS_ELLIPSISMASK = &h0000C000
const STM_SETICON = &h0170
const STM_GETICON = &h0171
const STM_SETIMAGE = &h0172
const STM_GETIMAGE = &h0173
const STN_CLICKED = 0
const STN_DBLCLK = 1
const STN_ENABLE = 2
const STN_DISABLE = 3
const STM_MSGMAX = &h0174
const DWL_MSGRESULT = 0
const DWL_DLGPROC = 4
const DWL_USER = 8


const DWLP_MSGRESULT = 0
const DDL_READWRITE = &h00000
const DDL_READONLY = &h0001
const DDL_HIDDEN = &h0002
const DDL_SYSTEM = &h0004
const DDL_DIRECTORY = &h0010
const DDL_ARCHIVE = &h0020
const DDL_POSTMSGS = &h2000
const DDL_DRIVES = &h4000
const DDL_EXCLUSIVE = &h8000
declare function IsDialogMessageA(byval hDlg as HWND, byval lpMsg as LPMSG) as WINBOOL

 declare function IsDialogMessage alias "IsDialogMessageA"(byval hDlg as HWND, byval lpMsg as LPMSG) as WINBOOL

declare function IsDialogMessageW(byval hDlg as HWND, byval lpMsg as LPMSG) as WINBOOL


declare function MapDialogRect(byval hDlg as HWND, byval lpRect as LPRECT) as WINBOOL
declare function DlgDirListA(byval hDlg as HWND, byval lpPathSpec as LPSTR, byval nIDListBox as long, byval nIDStaticPath as long, byval uFileType as UINT) as long

 declare function DlgDirList alias "DlgDirListA"(byval hDlg as HWND, byval lpPathSpec as LPSTR, byval nIDListBox as long, byval nIDStaticPath as long, byval uFileType as UINT) as long

declare function DlgDirListW(byval hDlg as HWND, byval lpPathSpec as LPWSTR, byval nIDListBox as long, byval nIDStaticPath as long, byval uFileType as UINT) as long


declare function DlgDirSelectExA(byval hwndDlg as HWND, byval lpString as LPSTR, byval chCount as long, byval idListBox as long) as WINBOOL

 declare function DlgDirSelectEx alias "DlgDirSelectExA"(byval hwndDlg as HWND, byval lpString as LPSTR, byval chCount as long, byval idListBox as long) as WINBOOL

declare function DlgDirSelectExW(byval hwndDlg as HWND, byval lpString as LPWSTR, byval chCount as long, byval idListBox as long) as WINBOOL


declare function DlgDirListComboBoxA(byval hDlg as HWND, byval lpPathSpec as LPSTR, byval nIDComboBox as long, byval nIDStaticPath as long, byval uFiletype as UINT) as long

 declare function DlgDirListComboBox alias "DlgDirListComboBoxA"(byval hDlg as HWND, byval lpPathSpec as LPSTR, byval nIDComboBox as long, byval nIDStaticPath as long, byval uFiletype as UINT) as long

declare function DlgDirListComboBoxW(byval hDlg as HWND, byval lpPathSpec as LPWSTR, byval nIDComboBox as long, byval nIDStaticPath as long, byval uFiletype as UINT) as long


declare function DlgDirSelectComboBoxExA(byval hwndDlg as HWND, byval lpString as LPSTR, byval cchOut as long, byval idComboBox as long) as WINBOOL

 declare function DlgDirSelectComboBoxEx alias "DlgDirSelectComboBoxExA"(byval hwndDlg as HWND, byval lpString as LPSTR, byval cchOut as long, byval idComboBox as long) as WINBOOL

declare function DlgDirSelectComboBoxExW(byval hwndDlg as HWND, byval lpString as LPWSTR, byval cchOut as long, byval idComboBox as long) as WINBOOL


const DS_ABSALIGN = &h01
const DS_SYSMODAL = &h02
const DS_LOCALEDIT = &h20
const DS_SETFONT = &h40
const DS_MODALFRAME = &h80
const DS_NOIDLEMSG = &h100
const DS_SETFOREGROUND = &h200
const DS_3DLOOK = &h0004
const DS_FIXEDSYS = &h0008
const DS_NOFAILCREATE = &h0010
const DS_CONTROL = &h0400
const DS_CENTER = &h0800
const DS_CENTERMOUSE = &h1000
const DS_CONTEXTHELP = &h2000
const DS_SHELLFONT = DS_SETFONT or DS_FIXEDSYS
const DM_GETDEFID = WM_USER + 0
const DM_SETDEFID = WM_USER + 1
const DM_REPOSITION = WM_USER + 2
const DC_HASDEFID = &h534B
const DLGC_WANTARROWS = &h0001
const DLGC_WANTTAB = &h0002
const DLGC_WANTALLKEYS = &h0004
const DLGC_WANTMESSAGE = &h0004
const DLGC_HASSETSEL = &h0008
const DLGC_DEFPUSHBUTTON = &h0010
const DLGC_UNDEFPUSHBUTTON = &h0020
const DLGC_RADIOBUTTON = &h0040
const DLGC_WANTCHARS = &h0080
const DLGC_STATIC = &h0100
const DLGC_BUTTON = &h2000
const LB_CTLCODE = 0
const LB_OKAY = 0
const LB_ERR = -1
const LB_ERRSPACE = -2
const LBN_ERRSPACE = -2
const LBN_SELCHANGE = 1
const LBN_DBLCLK = 2
const LBN_SELCANCEL = 3
const LBN_SETFOCUS = 4
const LBN_KILLFOCUS = 5
const LB_ADDSTRING = &h0180
const LB_INSERTSTRING = &h0181
const LB_DELETESTRING = &h0182
const LB_SELITEMRANGEEX = &h0183
const LB_RESETCONTENT = &h0184
const LB_SETSEL = &h0185
const LB_SETCURSEL = &h0186
const LB_GETSEL = &h0187
const LB_GETCURSEL = &h0188
const LB_GETTEXT = &h0189
const LB_GETTEXTLEN = &h018A
const LB_GETCOUNT = &h018B
const LB_SELECTSTRING = &h018C
const LB_DIR = &h018D
const LB_GETTOPINDEX = &h018E
const LB_FINDSTRING = &h018F
const LB_GETSELCOUNT = &h0190
const LB_GETSELITEMS = &h0191
const LB_SETTABSTOPS = &h0192
const LB_GETHORIZONTALEXTENT = &h0193
const LB_SETHORIZONTALEXTENT = &h0194
const LB_SETCOLUMNWIDTH = &h0195
const LB_ADDFILE = &h0196
const LB_SETTOPINDEX = &h0197
const LB_GETITEMRECT = &h0198
const LB_GETITEMDATA = &h0199
const LB_SETITEMDATA = &h019A
const LB_SELITEMRANGE = &h019B
const LB_SETANCHORINDEX = &h019C
const LB_GETANCHORINDEX = &h019D
const LB_SETCARETINDEX = &h019E
const LB_GETCARETINDEX = &h019F
const LB_SETITEMHEIGHT = &h01A0
const LB_GETITEMHEIGHT = &h01A1
const LB_FINDSTRINGEXACT = &h01A2
const LB_SETLOCALE = &h01A5
const LB_GETLOCALE = &h01A6
const LB_SETCOUNT = &h01A7
const LB_INITSTORAGE = &h01A8
const LB_ITEMFROMPOINT = &h01A9
const LB_GETLISTBOXINFO = &h01B2
const LB_MSGMAX = &h01B3
const LBS_NOTIFY = &h0001
const LBS_SORT = &h0002
const LBS_NOREDRAW = &h0004
const LBS_MULTIPLESEL = &h0008
const LBS_OWNERDRAWFIXED = &h0010
const LBS_OWNERDRAWVARIABLE = &h0020
const LBS_HASSTRINGS = &h0040
const LBS_USETABSTOPS = &h0080
const LBS_NOINTEGRALHEIGHT = &h0100
const LBS_MULTICOLUMN = &h0200
const LBS_WANTKEYBOARDINPUT = &h0400
const LBS_EXTENDEDSEL = &h0800
const LBS_DISABLENOSCROLL = &h1000
const LBS_NODATA = &h2000
const LBS_NOSEL = &h4000
const LBS_COMBOBOX = &h8000
const LBS_STANDARD = ((LBS_NOTIFY or LBS_SORT) or WS_VSCROLL) or WS_BORDER
const CB_OKAY = 0
const CB_ERR = -1
const CB_ERRSPACE = -2
const CBN_ERRSPACE = -1
const CBN_SELCHANGE = 1
const CBN_DBLCLK = 2
const CBN_SETFOCUS = 3
const CBN_KILLFOCUS = 4
const CBN_EDITCHANGE = 5
const CBN_EDITUPDATE = 6
const CBN_DROPDOWN = 7
const CBN_CLOSEUP = 8
const CBN_SELENDOK = 9
const CBN_SELENDCANCEL = 10
const CBS_SIMPLE = &h0001
const CBS_DROPDOWN = &h0002
const CBS_DROPDOWNLIST = &h0003
const CBS_OWNERDRAWFIXED = &h0010
const CBS_OWNERDRAWVARIABLE = &h0020
const CBS_AUTOHSCROLL = &h0040
const CBS_OEMCONVERT = &h0080
const CBS_SORT = &h0100
const CBS_HASSTRINGS = &h0200
const CBS_NOINTEGRALHEIGHT = &h0400
const CBS_DISABLENOSCROLL = &h0800
const CBS_UPPERCASE = &h2000
const CBS_LOWERCASE = &h4000
const CB_GETEDITSEL = &h0140
const CB_LIMITTEXT = &h0141
const CB_SETEDITSEL = &h0142
const CB_ADDSTRING = &h0143
const CB_DELETESTRING = &h0144
const CB_DIR = &h0145
const CB_GETCOUNT = &h0146
const CB_GETCURSEL = &h0147
const CB_GETLBTEXT = &h0148
const CB_GETLBTEXTLEN = &h0149
const CB_INSERTSTRING = &h014A
const CB_RESETCONTENT = &h014B
const CB_FINDSTRING = &h014C
const CB_SELECTSTRING = &h014D
const CB_SETCURSEL = &h014E
const CB_SHOWDROPDOWN = &h014F
const CB_GETITEMDATA = &h0150
const CB_SETITEMDATA = &h0151
const CB_GETDROPPEDCONTROLRECT = &h0152
const CB_SETITEMHEIGHT = &h0153
const CB_GETITEMHEIGHT = &h0154
const CB_SETEXTENDEDUI = &h0155
const CB_GETEXTENDEDUI = &h0156
const CB_GETDROPPEDSTATE = &h0157
const CB_FINDSTRINGEXACT = &h0158
const CB_SETLOCALE = &h0159
const CB_GETLOCALE = &h015A
const CB_GETTOPINDEX = &h015b
const CB_SETTOPINDEX = &h015c
const CB_GETHORIZONTALEXTENT = &h015d
const CB_SETHORIZONTALEXTENT = &h015e
const CB_GETDROPPEDWIDTH = &h015f
const CB_SETDROPPEDWIDTH = &h0160
const CB_INITSTORAGE = &h0161
const CB_GETCOMBOBOXINFO = &h0164
const CB_MSGMAX = &h0165
const SBS_HORZ = &h00000
const SBS_VERT = &h0001
const SBS_TOPALIGN = &h0002
const SBS_LEFTALIGN = &h0002
const SBS_BOTTOMALIGN = &h0004
const SBS_RIGHTALIGN = &h0004
const SBS_SIZEBOXTOPLEFTALIGN = &h0002
const SBS_SIZEBOXBOTTOMRIGHTALIGN = &h0004
const SBS_SIZEBOX = &h0008
const SBS_SIZEGRIP = &h0010
const SBM_SETPOS = &h00E0
const SBM_GETPOS = &h00E1
const SBM_SETRANGE = &h00E2
const SBM_SETRANGEREDRAW = &h00E6
const SBM_GETRANGE = &h00E3
const SBM_ENABLE_ARROWS = &h00E4
const SBM_SETSCROLLINFO = &h00E9
const SBM_GETSCROLLINFO = &h00EA
const SBM_GETSCROLLBARINFO = &h00EB
const SIF_RANGE = &h0001
const SIF_PAGE = &h0002
const SIF_POS = &h0004
const SIF_DISABLENOSCROLL = &h0008
const SIF_TRACKPOS = &h0010
const SIF_ALL = ((SIF_RANGE or SIF_PAGE) or SIF_POS) or SIF_TRACKPOS

type tagSCROLLINFO
 cbSize as UINT
 fMask as UINT
 nMin as long
 nMax as long
 nPage as UINT
 nPos as long
 nTrackPos as long
end type

type SCROLLINFO as tagSCROLLINFO
type LPSCROLLINFO as tagSCROLLINFO ptr
type LPCSCROLLINFO as const SCROLLINFO ptr
declare function SetScrollInfo(byval hwnd as HWND, byval nBar as long, byval lpsi as LPCSCROLLINFO, byval redraw as WINBOOL) as long
declare function GetScrollInfo(byval hwnd as HWND, byval nBar as long, byval lpsi as LPSCROLLINFO) as WINBOOL

const MDIS_ALLCHILDSTYLES = &h0001
const MDITILE_VERTICAL = &h00000
const MDITILE_HORIZONTAL = &h0001
const MDITILE_SKIPDISABLED = &h0002
const MDITILE_ZORDER = &h0004

type tagMDICREATESTRUCTA
 szClass as LPCSTR
 szTitle as LPCSTR
 hOwner as HANDLE
 x as long
 y as long
 cx as long
 cy as long
 style as DWORD
 lParam as LPARAM
end type

type MDICREATESTRUCTA as tagMDICREATESTRUCTA
type LPMDICREATESTRUCTA as tagMDICREATESTRUCTA ptr

type tagMDICREATESTRUCTW
 szClass as LPCWSTR
 szTitle as LPCWSTR
 hOwner as HANDLE
 x as long
 y as long
 cx as long
 cy as long
 style as DWORD
 lParam as LPARAM
end type

type MDICREATESTRUCTW as tagMDICREATESTRUCTW
type LPMDICREATESTRUCTW as tagMDICREATESTRUCTW ptr

 type MDICREATESTRUCT as MDICREATESTRUCTA
 type LPMDICREATESTRUCT as LPMDICREATESTRUCTA

type tagCLIENTCREATESTRUCT
 hWindowMenu as HANDLE
 idFirstChild as UINT
end type

type CLIENTCREATESTRUCT as tagCLIENTCREATESTRUCT
type LPCLIENTCREATESTRUCT as tagCLIENTCREATESTRUCT ptr
declare function DefFrameProcA(byval hWnd as HWND, byval hWndMDIClient as HWND, byval uMsg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

 declare function DefFrameProc alias "DefFrameProcA"(byval hWnd as HWND, byval hWndMDIClient as HWND, byval uMsg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

declare function DefFrameProcW(byval hWnd as HWND, byval hWndMDIClient as HWND, byval uMsg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT


declare function DefMDIChildProcA(byval hWnd as HWND, byval uMsg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

 declare function DefMDIChildProc alias "DefMDIChildProcA"(byval hWnd as HWND, byval uMsg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

declare function DefMDIChildProcW(byval hWnd as HWND, byval uMsg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT


declare function TranslateMDISysAccel(byval hWndClient as HWND, byval lpMsg as LPMSG) as WINBOOL
declare function ArrangeIconicWindows(byval hWnd as HWND) as UINT
declare function CreateMDIWindowA(byval lpClassName as LPCSTR, byval lpWindowName as LPCSTR, byval dwStyle as DWORD, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long, byval hWndParent as HWND, byval hInstance as HINSTANCE, byval lParam as LPARAM) as HWND

 declare function CreateMDIWindow alias "CreateMDIWindowA"(byval lpClassName as LPCSTR, byval lpWindowName as LPCSTR, byval dwStyle as DWORD, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long, byval hWndParent as HWND, byval hInstance as HINSTANCE, byval lParam as LPARAM) as HWND

declare function CreateMDIWindowW(byval lpClassName as LPCWSTR, byval lpWindowName as LPCWSTR, byval dwStyle as DWORD, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long, byval hWndParent as HWND, byval hInstance as HINSTANCE, byval lParam as LPARAM) as HWND


declare function TileWindows(byval hwndParent as HWND, byval wHow as UINT, byval lpRect as const RECT ptr, byval cKids as UINT, byval lpKids as const HWND ptr) as WORD
declare function CascadeWindows(byval hwndParent as HWND, byval wHow as UINT, byval lpRect as const RECT ptr, byval cKids as UINT, byval lpKids as const HWND ptr) as WORD
type HELPPOLY as DWORD

type tagMULTIKEYHELPA
 mkSize as DWORD
 mkKeylist as byte
 szKeyphrase as zstring * 1
end type

type MULTIKEYHELPA as tagMULTIKEYHELPA
type PMULTIKEYHELPA as tagMULTIKEYHELPA ptr
type LPMULTIKEYHELPA as tagMULTIKEYHELPA ptr

type tagMULTIKEYHELPW
 mkSize as DWORD
 mkKeylist as wchar_t
 szKeyphrase as wstring * 1
end type

type MULTIKEYHELPW as tagMULTIKEYHELPW
type PMULTIKEYHELPW as tagMULTIKEYHELPW ptr
type LPMULTIKEYHELPW as tagMULTIKEYHELPW ptr

 type MULTIKEYHELP as MULTIKEYHELPA
 type PMULTIKEYHELP as PMULTIKEYHELPA
 type LPMULTIKEYHELP as LPMULTIKEYHELPA

type tagHELPWININFOA
 wStructSize as long
 x as long
 y as long
 dx as long
 dy as long
 wMax as long
 rgchMember as zstring * 2
end type

type HELPWININFOA as tagHELPWININFOA
type PHELPWININFOA as tagHELPWININFOA ptr
type LPHELPWININFOA as tagHELPWININFOA ptr

type tagHELPWININFOW
 wStructSize as long
 x as long
 y as long
 dx as long
 dy as long
 wMax as long
 rgchMember as wstring * 2
end type

type HELPWININFOW as tagHELPWININFOW
type PHELPWININFOW as tagHELPWININFOW ptr
type LPHELPWININFOW as tagHELPWININFOW ptr

 type HELPWININFO as HELPWININFOA
 type PHELPWININFO as PHELPWININFOA
 type LPHELPWININFO as LPHELPWININFOA

declare function WinHelpA(byval hWndMain as HWND, byval lpszHelp as LPCSTR, byval uCommand as UINT, byval dwData as ULONG_PTR) as WINBOOL

 declare function WinHelp alias "WinHelpA"(byval hWndMain as HWND, byval lpszHelp as LPCSTR, byval uCommand as UINT, byval dwData as ULONG_PTR) as WINBOOL

declare function WinHelpW(byval hWndMain as HWND, byval lpszHelp as LPCWSTR, byval uCommand as UINT, byval dwData as ULONG_PTR) as WINBOOL


const HELP_CONTEXT = &h0001
const HELP_QUIT = &h0002
const HELP_INDEX = &h0003
const HELP_CONTENTS = &h0003
const HELP_HELPONHELP = &h0004
const HELP_SETINDEX = &h0005
const HELP_SETCONTENTS = &h0005
const HELP_CONTEXTPOPUP = &h0008
const HELP_FORCEFILE = &h0009
const HELP_KEY = &h0101
const HELP_COMMAND = &h0102
const HELP_PARTIALKEY = &h0105
const HELP_MULTIKEY = &h0201
const HELP_SETWINPOS = &h0203
const HELP_CONTEXTMENU = &h000a
const HELP_FINDER = &h000b
const HELP_WM_HELP = &h000c
const HELP_SETPOPUP_POS = &h000d
const HELP_TCARD = &h8000
const HELP_TCARD_DATA = &h0010
const HELP_TCARD_OTHER_CALLER = &h0011
const IDH_NO_HELP = 28440
const IDH_MISSING_CONTEXT = 28441
const IDH_GENERIC_HELP_BUTTON = 28442
const IDH_OK = 28443
const IDH_CANCEL = 28444
const IDH_HELP = 28445
const GR_GDIOBJECTS = 0
const GR_USEROBJECTS = 1


declare function GetGuiResources(byval hProcess as HANDLE, byval uiFlags as DWORD) as DWORD
const SPI_GETBEEP = &h0001
const SPI_SETBEEP = &h0002
const SPI_GETMOUSE = &h0003
const SPI_SETMOUSE = &h0004
const SPI_GETBORDER = &h0005
const SPI_SETBORDER = &h0006
const SPI_GETKEYBOARDSPEED = &h000A
const SPI_SETKEYBOARDSPEED = &h000B
const SPI_LANGDRIVER = &h000C
const SPI_ICONHORIZONTALSPACING = &h000D
const SPI_GETSCREENSAVETIMEOUT = &h000E
const SPI_SETSCREENSAVETIMEOUT = &h000F
const SPI_GETSCREENSAVEACTIVE = &h0010
const SPI_SETSCREENSAVEACTIVE = &h0011
const SPI_GETGRIDGRANULARITY = &h0012
const SPI_SETGRIDGRANULARITY = &h0013
const SPI_SETDESKWALLPAPER = &h0014
const SPI_SETDESKPATTERN = &h0015
const SPI_GETKEYBOARDDELAY = &h0016
const SPI_SETKEYBOARDDELAY = &h0017
const SPI_ICONVERTICALSPACING = &h0018
const SPI_GETICONTITLEWRAP = &h0019
const SPI_SETICONTITLEWRAP = &h001A
const SPI_GETMENUDROPALIGNMENT = &h001B
const SPI_SETMENUDROPALIGNMENT = &h001C
const SPI_SETDOUBLECLKWIDTH = &h001D
const SPI_SETDOUBLECLKHEIGHT = &h001E
const SPI_GETICONTITLELOGFONT = &h001F
const SPI_SETDOUBLECLICKTIME = &h0020
const SPI_SETMOUSEBUTTONSWAP = &h0021
const SPI_SETICONTITLELOGFONT = &h0022
const SPI_GETFASTTASKSWITCH = &h0023
const SPI_SETFASTTASKSWITCH = &h0024
const SPI_SETDRAGFULLWINDOWS = &h0025
const SPI_GETDRAGFULLWINDOWS = &h0026
const SPI_GETNONCLIENTMETRICS = &h0029
const SPI_SETNONCLIENTMETRICS = &h002A
const SPI_GETMINIMIZEDMETRICS = &h002B
const SPI_SETMINIMIZEDMETRICS = &h002C
const SPI_GETICONMETRICS = &h002D
const SPI_SETICONMETRICS = &h002E
const SPI_SETWORKAREA = &h002F
const SPI_GETWORKAREA = &h0030
const SPI_SETPENWINDOWS = &h0031
const SPI_GETHIGHCONTRAST = &h0042
const SPI_SETHIGHCONTRAST = &h0043
const SPI_GETKEYBOARDPREF = &h0044
const SPI_SETKEYBOARDPREF = &h0045
const SPI_GETSCREENREADER = &h0046
const SPI_SETSCREENREADER = &h0047
const SPI_GETANIMATION = &h0048
const SPI_SETANIMATION = &h0049
const SPI_GETFONTSMOOTHING = &h004A
const SPI_SETFONTSMOOTHING = &h004B
const SPI_SETDRAGWIDTH = &h004C
const SPI_SETDRAGHEIGHT = &h004D
const SPI_SETHANDHELD = &h004E
const SPI_GETLOWPOWERTIMEOUT = &h004F
const SPI_GETPOWEROFFTIMEOUT = &h0050
const SPI_SETLOWPOWERTIMEOUT = &h0051
const SPI_SETPOWEROFFTIMEOUT = &h0052
const SPI_GETLOWPOWERACTIVE = &h0053
const SPI_GETPOWEROFFACTIVE = &h0054
const SPI_SETLOWPOWERACTIVE = &h0055
const SPI_SETPOWEROFFACTIVE = &h0056
const SPI_SETCURSORS = &h0057
const SPI_SETICONS = &h0058
const SPI_GETDEFAULTINPUTLANG = &h0059
const SPI_SETDEFAULTINPUTLANG = &h005A
const SPI_SETLANGTOGGLE = &h005B
const SPI_GETWINDOWSEXTENSION = &h005C
const SPI_SETMOUSETRAILS = &h005D
const SPI_GETMOUSETRAILS = &h005E
const SPI_SETSCREENSAVERRUNNING = &h0061
const SPI_SCREENSAVERRUNNING = SPI_SETSCREENSAVERRUNNING
const SPI_GETFILTERKEYS = &h0032
const SPI_SETFILTERKEYS = &h0033
const SPI_GETTOGGLEKEYS = &h0034
const SPI_SETTOGGLEKEYS = &h0035
const SPI_GETMOUSEKEYS = &h0036
const SPI_SETMOUSEKEYS = &h0037
const SPI_GETSHOWSOUNDS = &h0038
const SPI_SETSHOWSOUNDS = &h0039
const SPI_GETSTICKYKEYS = &h003A
const SPI_SETSTICKYKEYS = &h003B
const SPI_GETACCESSTIMEOUT = &h003C
const SPI_SETACCESSTIMEOUT = &h003D
const SPI_GETSERIALKEYS = &h003E
const SPI_SETSERIALKEYS = &h003F
const SPI_GETSOUNDSENTRY = &h0040
const SPI_SETSOUNDSENTRY = &h0041
const SPI_GETSNAPTODEFBUTTON = &h005F
const SPI_SETSNAPTODEFBUTTON = &h0060
const SPI_GETMOUSEHOVERWIDTH = &h0062
const SPI_SETMOUSEHOVERWIDTH = &h0063
const SPI_GETMOUSEHOVERHEIGHT = &h0064
const SPI_SETMOUSEHOVERHEIGHT = &h0065
const SPI_GETMOUSEHOVERTIME = &h0066
const SPI_SETMOUSEHOVERTIME = &h0067
const SPI_GETWHEELSCROLLLINES = &h0068
const SPI_SETWHEELSCROLLLINES = &h0069
const SPI_GETMENUSHOWDELAY = &h006A
const SPI_SETMENUSHOWDELAY = &h006B


const SPI_GETSHOWIMEUI = &h006E
const SPI_SETSHOWIMEUI = &h006F
const SPI_GETMOUSESPEED = &h0070
const SPI_SETMOUSESPEED = &h0071
const SPI_GETSCREENSAVERRUNNING = &h0072
const SPI_GETDESKWALLPAPER = &h0073




const SPI_GETACTIVEWINDOWTRACKING = &h1000
const SPI_SETACTIVEWINDOWTRACKING = &h1001
const SPI_GETMENUANIMATION = &h1002
const SPI_SETMENUANIMATION = &h1003
const SPI_GETCOMBOBOXANIMATION = &h1004
const SPI_SETCOMBOBOXANIMATION = &h1005
const SPI_GETLISTBOXSMOOTHSCROLLING = &h1006
const SPI_SETLISTBOXSMOOTHSCROLLING = &h1007
const SPI_GETGRADIENTCAPTIONS = &h1008
const SPI_SETGRADIENTCAPTIONS = &h1009
const SPI_GETKEYBOARDCUES = &h100A
const SPI_SETKEYBOARDCUES = &h100B
const SPI_GETMENUUNDERLINES = SPI_GETKEYBOARDCUES
const SPI_SETMENUUNDERLINES = SPI_SETKEYBOARDCUES
const SPI_GETACTIVEWNDTRKZORDER = &h100C
const SPI_SETACTIVEWNDTRKZORDER = &h100D
const SPI_GETHOTTRACKING = &h100E
const SPI_SETHOTTRACKING = &h100F
const SPI_GETMENUFADE = &h1012
const SPI_SETMENUFADE = &h1013
const SPI_GETSELECTIONFADE = &h1014
const SPI_SETSELECTIONFADE = &h1015
const SPI_GETTOOLTIPANIMATION = &h1016
const SPI_SETTOOLTIPANIMATION = &h1017
const SPI_GETTOOLTIPFADE = &h1018
const SPI_SETTOOLTIPFADE = &h1019
const SPI_GETCURSORSHADOW = &h101A
const SPI_SETCURSORSHADOW = &h101B
const SPI_GETMOUSESONAR = &h101C
const SPI_SETMOUSESONAR = &h101D
const SPI_GETMOUSECLICKLOCK = &h101E
const SPI_SETMOUSECLICKLOCK = &h101F
const SPI_GETMOUSEVANISH = &h1020
const SPI_SETMOUSEVANISH = &h1021
const SPI_GETFLATMENU = &h1022
const SPI_SETFLATMENU = &h1023
const SPI_GETDROPSHADOW = &h1024
const SPI_SETDROPSHADOW = &h1025
const SPI_GETBLOCKSENDINPUTRESETS = &h1026
const SPI_SETBLOCKSENDINPUTRESETS = &h1027
const SPI_GETUIEFFECTS = &h103E
const SPI_SETUIEFFECTS = &h103F



const SPI_GETFOREGROUNDLOCKTIMEOUT = &h2000
const SPI_SETFOREGROUNDLOCKTIMEOUT = &h2001
const SPI_GETACTIVEWNDTRKTIMEOUT = &h2002
const SPI_SETACTIVEWNDTRKTIMEOUT = &h2003
const SPI_GETFOREGROUNDFLASHCOUNT = &h2004
const SPI_SETFOREGROUNDFLASHCOUNT = &h2005
const SPI_GETCARETWIDTH = &h2006
const SPI_SETCARETWIDTH = &h2007
const SPI_GETMOUSECLICKLOCKTIME = &h2008
const SPI_SETMOUSECLICKLOCKTIME = &h2009
const SPI_GETFONTSMOOTHINGTYPE = &h200A
const SPI_SETFONTSMOOTHINGTYPE = &h200B
const FE_FONTSMOOTHINGSTANDARD = &h0001
const FE_FONTSMOOTHINGCLEARTYPE = &h0002
const FE_FONTSMOOTHINGDOCKING = &h8000
const SPI_GETFONTSMOOTHINGCONTRAST = &h200C
const SPI_SETFONTSMOOTHINGCONTRAST = &h200D
const SPI_GETFOCUSBORDERWIDTH = &h200E
const SPI_SETFOCUSBORDERWIDTH = &h200F
const SPI_GETFOCUSBORDERHEIGHT = &h2010
const SPI_SETFOCUSBORDERHEIGHT = &h2011
const SPI_GETFONTSMOOTHINGORIENTATION = &h2012
const SPI_SETFONTSMOOTHINGORIENTATION = &h2013



const FE_FONTSMOOTHINGORIENTATIONBGR = &h00000
const FE_FONTSMOOTHINGORIENTATIONRGB = &h0001
const SPIF_UPDATEINIFILE = &h0001
const SPIF_SENDWININICHANGE = &h0002
const SPIF_SENDCHANGE = SPIF_SENDWININICHANGE
const METRICS_USEDEFAULT = -1

type tagNONCLIENTMETRICSA
 cbSize as UINT
 iBorderWidth as long
 iScrollWidth as long
 iScrollHeight as long
 iCaptionWidth as long
 iCaptionHeight as long
 lfCaptionFont as LOGFONTA
 iSmCaptionWidth as long
 iSmCaptionHeight as long
 lfSmCaptionFont as LOGFONTA
 iMenuWidth as long
 iMenuHeight as long
 lfMenuFont as LOGFONTA
 lfStatusFont as LOGFONTA
 lfMessageFont as LOGFONTA

end type

type NONCLIENTMETRICSA as tagNONCLIENTMETRICSA
type PNONCLIENTMETRICSA as tagNONCLIENTMETRICSA ptr
type LPNONCLIENTMETRICSA as tagNONCLIENTMETRICSA ptr

type tagNONCLIENTMETRICSW
 cbSize as UINT
 iBorderWidth as long
 iScrollWidth as long
 iScrollHeight as long
 iCaptionWidth as long
 iCaptionHeight as long
 lfCaptionFont as LOGFONTW
 iSmCaptionWidth as long
 iSmCaptionHeight as long
 lfSmCaptionFont as LOGFONTW
 iMenuWidth as long
 iMenuHeight as long
 lfMenuFont as LOGFONTW
 lfStatusFont as LOGFONTW
 lfMessageFont as LOGFONTW

end type

type NONCLIENTMETRICSW as tagNONCLIENTMETRICSW
type PNONCLIENTMETRICSW as tagNONCLIENTMETRICSW ptr
type LPNONCLIENTMETRICSW as tagNONCLIENTMETRICSW ptr

 type NONCLIENTMETRICS as NONCLIENTMETRICSA
 type PNONCLIENTMETRICS as PNONCLIENTMETRICSA
 type LPNONCLIENTMETRICS as LPNONCLIENTMETRICSA

const ARW_BOTTOMLEFT = &h00000
const ARW_BOTTOMRIGHT = &h0001
const ARW_TOPLEFT = &h0002
const ARW_TOPRIGHT = &h0003
const ARW_STARTMASK = &h0003
const ARW_STARTRIGHT = &h0001
const ARW_STARTTOP = &h0002
const ARW_LEFT = &h00000
const ARW_RIGHT = &h00000
const ARW_UP = &h0004
const ARW_DOWN = &h0004
const ARW_HIDE = &h0008

type tagMINIMIZEDMETRICS
 cbSize as UINT
 iWidth as long
 iHorzGap as long
 iVertGap as long
 iArrange as long
end type

type MINIMIZEDMETRICS as tagMINIMIZEDMETRICS
type PMINIMIZEDMETRICS as tagMINIMIZEDMETRICS ptr
type LPMINIMIZEDMETRICS as tagMINIMIZEDMETRICS ptr

type tagICONMETRICSA
 cbSize as UINT
 iHorzSpacing as long
 iVertSpacing as long
 iTitleWrap as long
 lfFont as LOGFONTA
end type

type ICONMETRICSA as tagICONMETRICSA
type PICONMETRICSA as tagICONMETRICSA ptr
type LPICONMETRICSA as tagICONMETRICSA ptr

type tagICONMETRICSW
 cbSize as UINT
 iHorzSpacing as long
 iVertSpacing as long
 iTitleWrap as long
 lfFont as LOGFONTW
end type

type ICONMETRICSW as tagICONMETRICSW
type PICONMETRICSW as tagICONMETRICSW ptr
type LPICONMETRICSW as tagICONMETRICSW ptr

 type ICONMETRICS as ICONMETRICSA
 type PICONMETRICS as PICONMETRICSA
 type LPICONMETRICS as LPICONMETRICSA

type tagANIMATIONINFO
 cbSize as UINT
 iMinAnimate as long
end type

type ANIMATIONINFO as tagANIMATIONINFO
type LPANIMATIONINFO as tagANIMATIONINFO ptr

type tagSERIALKEYSA
 cbSize as UINT
 dwFlags as DWORD
 lpszActivePort as LPSTR
 lpszPort as LPSTR
 iBaudRate as UINT
 iPortState as UINT
 iActive as UINT
end type

type SERIALKEYSA as tagSERIALKEYSA
type LPSERIALKEYSA as tagSERIALKEYSA ptr

type tagSERIALKEYSW
 cbSize as UINT
 dwFlags as DWORD
 lpszActivePort as LPWSTR
 lpszPort as LPWSTR
 iBaudRate as UINT
 iPortState as UINT
 iActive as UINT
end type

type SERIALKEYSW as tagSERIALKEYSW
type LPSERIALKEYSW as tagSERIALKEYSW ptr

 type SERIALKEYS as SERIALKEYSA
 type LPSERIALKEYS as LPSERIALKEYSA

type tagHIGHCONTRASTA
 cbSize as UINT
 dwFlags as DWORD
 lpszDefaultScheme as LPSTR
end type

type HIGHCONTRASTA as tagHIGHCONTRASTA
type LPHIGHCONTRASTA as tagHIGHCONTRASTA ptr

type tagHIGHCONTRASTW
 cbSize as UINT
 dwFlags as DWORD
 lpszDefaultScheme as LPWSTR
end type

type HIGHCONTRASTW as tagHIGHCONTRASTW
type LPHIGHCONTRASTW as tagHIGHCONTRASTW ptr

 type HIGHCONTRAST as HIGHCONTRASTA
 type LPHIGHCONTRAST as LPHIGHCONTRASTA

const SERKF_SERIALKEYSON = &h00000001
const SERKF_AVAILABLE = &h00000002
const SERKF_INDICATOR = &h00000004
const HCF_HIGHCONTRASTON = &h00000001
const HCF_AVAILABLE = &h00000002
const HCF_HOTKEYACTIVE = &h00000004
const HCF_CONFIRMHOTKEY = &h00000008
const HCF_HOTKEYSOUND = &h00000010
const HCF_INDICATOR = &h00000020
const HCF_HOTKEYAVAILABLE = &h00000040
const HCF_LOGONDESKTOP = &h00000100
const HCF_DEFAULTDESKTOP = &h00000200
const CDS_UPDATEREGISTRY = &h00000001
const CDS_TEST = &h00000002
const CDS_FULLSCREEN = &h00000004
const CDS_GLOBAL = &h00000008
const CDS_SET_PRIMARY = &h00000010
const CDS_VIDEOPARAMETERS = &h00000020


const CDS_RESET = &h40000000
const CDS_RESET_EX = &h20000000
const CDS_NORESET = &h10000000

type _VIDEOPARAMETERS
 Guid as GUID
 dwOffset as ULONG
 dwCommand as ULONG
 dwFlags as ULONG
 dwMode as ULONG
 dwTVStandard as ULONG
 dwAvailableModes as ULONG
 dwAvailableTVStandard as ULONG
 dwFlickerFilter as ULONG
 dwOverScanX as ULONG
 dwOverScanY as ULONG
 dwMaxUnscaledX as ULONG
 dwMaxUnscaledY as ULONG
 dwPositionX as ULONG
 dwPositionY as ULONG
 dwBrightness as ULONG
 dwContrast as ULONG
 dwCPType as ULONG
 dwCPCommand as ULONG
 dwCPStandard as ULONG
 dwCPKey as ULONG
 bCP_APSTriggerBits as ULONG
 bOEMCopyProtection(0 to 255) as UCHAR
end type

type VIDEOPARAMETERS as _VIDEOPARAMETERS
type PVIDEOPARAMETERS as _VIDEOPARAMETERS ptr
type LPVIDEOPARAMETERS as _VIDEOPARAMETERS ptr

const VP_COMMAND_GET = &h0001
const VP_COMMAND_SET = &h0002
const VP_FLAGS_TV_MODE = &h0001
const VP_FLAGS_TV_STANDARD = &h0002
const VP_FLAGS_FLICKER = &h0004
const VP_FLAGS_OVERSCAN = &h0008
const VP_FLAGS_MAX_UNSCALED = &h0010
const VP_FLAGS_POSITION = &h0020
const VP_FLAGS_BRIGHTNESS = &h0040
const VP_FLAGS_CONTRAST = &h0080
const VP_FLAGS_COPYPROTECT = &h0100
const VP_MODE_WIN_GRAPHICS = &h0001
const VP_MODE_TV_PLAYBACK = &h0002
const VP_TV_STANDARD_NTSC_M = &h0001
const VP_TV_STANDARD_NTSC_M_J = &h0002
const VP_TV_STANDARD_PAL_B = &h0004
const VP_TV_STANDARD_PAL_D = &h0008
const VP_TV_STANDARD_PAL_H = &h0010
const VP_TV_STANDARD_PAL_I = &h0020
const VP_TV_STANDARD_PAL_M = &h0040
const VP_TV_STANDARD_PAL_N = &h0080
const VP_TV_STANDARD_SECAM_B = &h0100
const VP_TV_STANDARD_SECAM_D = &h0200
const VP_TV_STANDARD_SECAM_G = &h0400
const VP_TV_STANDARD_SECAM_H = &h0800
const VP_TV_STANDARD_SECAM_K = &h1000
const VP_TV_STANDARD_SECAM_K1 = &h2000
const VP_TV_STANDARD_SECAM_L = &h4000
const VP_TV_STANDARD_WIN_VGA = &h8000
const VP_TV_STANDARD_NTSC_433 = &h00010000
const VP_TV_STANDARD_PAL_G = &h00020000
const VP_TV_STANDARD_PAL_60 = &h00040000
const VP_TV_STANDARD_SECAM_L1 = &h00080000
const VP_CP_TYPE_APS_TRIGGER = &h0001
const VP_CP_TYPE_MACROVISION = &h0002
const VP_CP_CMD_ACTIVATE = &h0001
const VP_CP_CMD_DEACTIVATE = &h0002
const VP_CP_CMD_CHANGE = &h0004
const DISP_CHANGE_SUCCESSFUL = 0
const DISP_CHANGE_RESTART = 1
const DISP_CHANGE_FAILED = -1
const DISP_CHANGE_BADMODE = -2
const DISP_CHANGE_NOTUPDATED = -3
const DISP_CHANGE_BADFLAGS = -4
const DISP_CHANGE_BADPARAM = -5
const DISP_CHANGE_BADDUALVIEW = -6
declare function ChangeDisplaySettingsA(byval lpDevMode as LPDEVMODEA, byval dwFlags as DWORD) as LONG

 declare function ChangeDisplaySettings alias "ChangeDisplaySettingsA"(byval lpDevMode as LPDEVMODEA, byval dwFlags as DWORD) as LONG

declare function ChangeDisplaySettingsW(byval lpDevMode as LPDEVMODEW, byval dwFlags as DWORD) as LONG


declare function ChangeDisplaySettingsExA(byval lpszDeviceName as LPCSTR, byval lpDevMode as LPDEVMODEA, byval hwnd as HWND, byval dwflags as DWORD, byval lParam as LPVOID) as LONG

 declare function ChangeDisplaySettingsEx alias "ChangeDisplaySettingsExA"(byval lpszDeviceName as LPCSTR, byval lpDevMode as LPDEVMODEA, byval hwnd as HWND, byval dwflags as DWORD, byval lParam as LPVOID) as LONG

declare function ChangeDisplaySettingsExW(byval lpszDeviceName as LPCWSTR, byval lpDevMode as LPDEVMODEW, byval hwnd as HWND, byval dwflags as DWORD, byval lParam as LPVOID) as LONG


const ENUM_CURRENT_SETTINGS = cast(DWORD, -1)
const ENUM_REGISTRY_SETTINGS = cast(DWORD, -2)
declare function EnumDisplaySettingsA(byval lpszDeviceName as LPCSTR, byval iModeNum as DWORD, byval lpDevMode as LPDEVMODEA) as WINBOOL

 declare function EnumDisplaySettings alias "EnumDisplaySettingsA"(byval lpszDeviceName as LPCSTR, byval iModeNum as DWORD, byval lpDevMode as LPDEVMODEA) as WINBOOL

declare function EnumDisplaySettingsW(byval lpszDeviceName as LPCWSTR, byval iModeNum as DWORD, byval lpDevMode as LPDEVMODEW) as WINBOOL


declare function EnumDisplaySettingsExA(byval lpszDeviceName as LPCSTR, byval iModeNum as DWORD, byval lpDevMode as LPDEVMODEA, byval dwFlags as DWORD) as WINBOOL

 declare function EnumDisplaySettingsEx alias "EnumDisplaySettingsExA"(byval lpszDeviceName as LPCSTR, byval iModeNum as DWORD, byval lpDevMode as LPDEVMODEA, byval dwFlags as DWORD) as WINBOOL

declare function EnumDisplaySettingsExW(byval lpszDeviceName as LPCWSTR, byval iModeNum as DWORD, byval lpDevMode as LPDEVMODEW, byval dwFlags as DWORD) as WINBOOL


const EDS_RAWMODE = &h00000002
declare function EnumDisplayDevicesA(byval lpDevice as LPCSTR, byval iDevNum as DWORD, byval lpDisplayDevice as PDISPLAY_DEVICEA, byval dwFlags as DWORD) as WINBOOL

 declare function EnumDisplayDevices alias "EnumDisplayDevicesA"(byval lpDevice as LPCSTR, byval iDevNum as DWORD, byval lpDisplayDevice as PDISPLAY_DEVICEA, byval dwFlags as DWORD) as WINBOOL

declare function EnumDisplayDevicesW(byval lpDevice as LPCWSTR, byval iDevNum as DWORD, byval lpDisplayDevice as PDISPLAY_DEVICEW, byval dwFlags as DWORD) as WINBOOL


const EDD_GET_DEVICE_INTERFACE_NAME = &h00000001


declare function SystemParametersInfoA(byval uiAction as UINT, byval uiParam as UINT, byval pvParam as PVOID, byval fWinIni as UINT) as WINBOOL

 declare function SystemParametersInfo alias "SystemParametersInfoA"(byval uiAction as UINT, byval uiParam as UINT, byval pvParam as PVOID, byval fWinIni as UINT) as WINBOOL

declare function SystemParametersInfoW(byval uiAction as UINT, byval uiParam as UINT, byval pvParam as PVOID, byval fWinIni as UINT) as WINBOOL


type tagFILTERKEYS
 cbSize as UINT
 dwFlags as DWORD
 iWaitMSec as DWORD
 iDelayMSec as DWORD
 iRepeatMSec as DWORD
 iBounceMSec as DWORD
end type

type FILTERKEYS as tagFILTERKEYS
type LPFILTERKEYS as tagFILTERKEYS ptr
const FKF_FILTERKEYSON = &h00000001
const FKF_AVAILABLE = &h00000002
const FKF_HOTKEYACTIVE = &h00000004
const FKF_CONFIRMHOTKEY = &h00000008
const FKF_HOTKEYSOUND = &h00000010
const FKF_INDICATOR = &h00000020
const FKF_CLICKON = &h00000040

type tagSTICKYKEYS
 cbSize as UINT
 dwFlags as DWORD
end type

type STICKYKEYS as tagSTICKYKEYS
type LPSTICKYKEYS as tagSTICKYKEYS ptr
const SKF_STICKYKEYSON = &h00000001
const SKF_AVAILABLE = &h00000002
const SKF_HOTKEYACTIVE = &h00000004
const SKF_CONFIRMHOTKEY = &h00000008
const SKF_HOTKEYSOUND = &h00000010
const SKF_INDICATOR = &h00000020
const SKF_AUDIBLEFEEDBACK = &h00000040
const SKF_TRISTATE = &h00000080
const SKF_TWOKEYSOFF = &h00000100
const SKF_LALTLATCHED = &h10000000
const SKF_LCTLLATCHED = &h04000000
const SKF_LSHIFTLATCHED = &h01000000
const SKF_RALTLATCHED = &h20000000
const SKF_RCTLLATCHED = &h08000000
const SKF_RSHIFTLATCHED = &h02000000
const SKF_LWINLATCHED = &h40000000
const SKF_RWINLATCHED = &h80000000
const SKF_LALTLOCKED = &h00100000
const SKF_LCTLLOCKED = &h00040000
const SKF_LSHIFTLOCKED = &h00010000
const SKF_RALTLOCKED = &h00200000
const SKF_RCTLLOCKED = &h00080000
const SKF_RSHIFTLOCKED = &h00020000
const SKF_LWINLOCKED = &h00400000
const SKF_RWINLOCKED = &h00800000

type tagMOUSEKEYS
 cbSize as UINT
 dwFlags as DWORD
 iMaxSpeed as DWORD
 iTimeToMaxSpeed as DWORD
 iCtrlSpeed as DWORD
 dwReserved1 as DWORD
 dwReserved2 as DWORD
end type

type MOUSEKEYS as tagMOUSEKEYS
type LPMOUSEKEYS as tagMOUSEKEYS ptr
const MKF_MOUSEKEYSON = &h00000001
const MKF_AVAILABLE = &h00000002
const MKF_HOTKEYACTIVE = &h00000004
const MKF_CONFIRMHOTKEY = &h00000008
const MKF_HOTKEYSOUND = &h00000010
const MKF_INDICATOR = &h00000020
const MKF_MODIFIERS = &h00000040
const MKF_REPLACENUMBERS = &h00000080
const MKF_LEFTBUTTONSEL = &h10000000
const MKF_RIGHTBUTTONSEL = &h20000000
const MKF_LEFTBUTTONDOWN = &h01000000
const MKF_RIGHTBUTTONDOWN = &h02000000
const MKF_MOUSEMODE = &h80000000

type tagACCESSTIMEOUT
 cbSize as UINT
 dwFlags as DWORD
 iTimeOutMSec as DWORD
end type

type ACCESSTIMEOUT as tagACCESSTIMEOUT
type LPACCESSTIMEOUT as tagACCESSTIMEOUT ptr
const ATF_TIMEOUTON = &h00000001
const ATF_ONOFFFEEDBACK = &h00000002
const SSGF_NONE = 0
const SSGF_DISPLAY = 3
const SSTF_NONE = 0
const SSTF_CHARS = 1
const SSTF_BORDER = 2
const SSTF_DISPLAY = 3
const SSWF_NONE = 0
const SSWF_TITLE = 1
const SSWF_WINDOW = 2
const SSWF_DISPLAY = 3
const SSWF_CUSTOM = 4

type tagSOUNDSENTRYA
 cbSize as UINT
 dwFlags as DWORD
 iFSTextEffect as DWORD
 iFSTextEffectMSec as DWORD
 iFSTextEffectColorBits as DWORD
 iFSGrafEffect as DWORD
 iFSGrafEffectMSec as DWORD
 iFSGrafEffectColor as DWORD
 iWindowsEffect as DWORD
 iWindowsEffectMSec as DWORD
 lpszWindowsEffectDLL as LPSTR
 iWindowsEffectOrdinal as DWORD
end type

type SOUNDSENTRYA as tagSOUNDSENTRYA
type LPSOUNDSENTRYA as tagSOUNDSENTRYA ptr

type tagSOUNDSENTRYW
 cbSize as UINT
 dwFlags as DWORD
 iFSTextEffect as DWORD
 iFSTextEffectMSec as DWORD
 iFSTextEffectColorBits as DWORD
 iFSGrafEffect as DWORD
 iFSGrafEffectMSec as DWORD
 iFSGrafEffectColor as DWORD
 iWindowsEffect as DWORD
 iWindowsEffectMSec as DWORD
 lpszWindowsEffectDLL as LPWSTR
 iWindowsEffectOrdinal as DWORD
end type

type SOUNDSENTRYW as tagSOUNDSENTRYW
type LPSOUNDSENTRYW as tagSOUNDSENTRYW ptr

 type SOUNDSENTRY as SOUNDSENTRYA
 type LPSOUNDSENTRY as LPSOUNDSENTRYA

const SSF_SOUNDSENTRYON = &h00000001
const SSF_AVAILABLE = &h00000002
const SSF_INDICATOR = &h00000004

type tagTOGGLEKEYS
 cbSize as UINT
 dwFlags as DWORD
end type

type TOGGLEKEYS as tagTOGGLEKEYS
type LPTOGGLEKEYS as tagTOGGLEKEYS ptr

type tagMONITORINFO
 cbSize as DWORD
 rcMonitor as RECT
 rcWork as RECT
 dwFlags as DWORD
end type

type MONITORINFO as tagMONITORINFO
type LPMONITORINFO as tagMONITORINFO ptr


type tagMONITORINFOEXA
 union
 type
 cbSize as DWORD
 rcMonitor as RECT
 rcWork as RECT
 dwFlags as DWORD
 end type
 end union

 szDevice as zstring * 32
end type

type MONITORINFOEXA as tagMONITORINFOEXA
type LPMONITORINFOEXA as tagMONITORINFOEXA ptr

type tagMONITORINFOEXW
 union
 type
 cbSize as DWORD
 rcMonitor as RECT
 rcWork as RECT
 dwFlags as DWORD
 end type
 end union

 szDevice as wstring * 32
end type

type MONITORINFOEXW as tagMONITORINFOEXW
type LPMONITORINFOEXW as tagMONITORINFOEXW ptr

 type MONITORINFOEX as MONITORINFOEXA
 type LPMONITORINFOEX as LPMONITORINFOEXA

type MONITORENUMPROC as function(byval as HMONITOR, byval as HDC, byval as LPRECT, byval as LPARAM) as WINBOOL
declare sub SetDebugErrorLevel(byval dwLevel as DWORD)
declare sub SetLastErrorEx(byval dwErrCode as DWORD, byval dwType as DWORD)
declare function InternalGetWindowText(byval hWnd as HWND, byval pString as LPWSTR, byval cchMaxCount as long) as long
declare function CancelShutdown() as WINBOOL
declare function MonitorFromPoint(byval pt as POINT, byval dwFlags as DWORD) as HMONITOR
declare function MonitorFromRect(byval lprc as LPCRECT, byval dwFlags as DWORD) as HMONITOR
declare function MonitorFromWindow(byval hwnd as HWND, byval dwFlags as DWORD) as HMONITOR
declare function EndTask(byval hWnd as HWND, byval fShutDown as WINBOOL, byval fForce as WINBOOL) as WINBOOL


declare function GetMonitorInfoA(byval hMonitor as HMONITOR, byval lpmi as LPMONITORINFO) as WINBOOL

 declare function GetMonitorInfo alias "GetMonitorInfoA"(byval hMonitor as HMONITOR, byval lpmi as LPMONITORINFO) as WINBOOL

declare function GetMonitorInfoW(byval hMonitor as HMONITOR, byval lpmi as LPMONITORINFO) as WINBOOL


declare function EnumDisplayMonitors(byval hdc as HDC, byval lprcClip as LPCRECT, byval lpfnEnum as MONITORENUMPROC, byval dwData as LPARAM) as WINBOOL
const TKF_TOGGLEKEYSON = &h00000001
const TKF_AVAILABLE = &h00000002
const TKF_HOTKEYACTIVE = &h00000004
const TKF_CONFIRMHOTKEY = &h00000008
const TKF_HOTKEYSOUND = &h00000010
const TKF_INDICATOR = &h00000020
const SLE_ERROR = &h00000001
const SLE_MINORERROR = &h00000002
const SLE_WARNING = &h00000003
const MONITOR_DEFAULTTONULL = &h000000000
const MONITOR_DEFAULTTOPRIMARY = &h00000001
const MONITOR_DEFAULTTONEAREST = &h00000002
const MONITORINFOF_PRIMARY = &h00000001
type WINEVENTPROC as sub(byval hWinEventHook as HWINEVENTHOOK, byval event as DWORD, byval hwnd as HWND, byval idObject as LONG, byval idChild as LONG, byval idEventThread as DWORD, byval dwmsEventTime as DWORD)

declare sub NotifyWinEvent(byval event as DWORD, byval hwnd as HWND, byval idObject as LONG, byval idChild as LONG)
declare function SetWinEventHook(byval eventMin as DWORD, byval eventMax as DWORD, byval hmodWinEventProc as HMODULE, byval pfnWinEventProc as WINEVENTPROC, byval idProcess as DWORD, byval idThread as DWORD, byval dwFlags as DWORD) as HWINEVENTHOOK
declare function IsWinEventHookInstalled(byval event as DWORD) as WINBOOL

const WINEVENT_OUTOFCONTEXT = &h00000
const WINEVENT_SKIPOWNTHREAD = &h0001
const WINEVENT_SKIPOWNPROCESS = &h0002
const WINEVENT_INCONTEXT = &h0004
declare function UnhookWinEvent(byval hWinEventHook as HWINEVENTHOOK) as WINBOOL
const CHILDID_SELF = 0
const INDEXID_OBJECT = 0
const INDEXID_CONTAINER = 0
const EVENT_MIN = &h00000001
const EVENT_MAX = &h7FFFFFFF
const EVENT_SYSTEM_SOUND = &h0001
const EVENT_SYSTEM_ALERT = &h0002
const EVENT_SYSTEM_FOREGROUND = &h0003
const EVENT_SYSTEM_MENUSTART = &h0004
const EVENT_SYSTEM_MENUEND = &h0005
const EVENT_SYSTEM_MENUPOPUPSTART = &h0006
const EVENT_SYSTEM_MENUPOPUPEND = &h0007
const EVENT_SYSTEM_CAPTURESTART = &h0008
const EVENT_SYSTEM_CAPTUREEND = &h0009
const EVENT_SYSTEM_MOVESIZESTART = &h000A
const EVENT_SYSTEM_MOVESIZEEND = &h000B
const EVENT_SYSTEM_CONTEXTHELPSTART = &h000C
const EVENT_SYSTEM_CONTEXTHELPEND = &h000D
const EVENT_SYSTEM_DRAGDROPSTART = &h000E
const EVENT_SYSTEM_DRAGDROPEND = &h000F
const EVENT_SYSTEM_DIALOGSTART = &h0010
const EVENT_SYSTEM_DIALOGEND = &h0011
const EVENT_SYSTEM_SCROLLINGSTART = &h0012
const EVENT_SYSTEM_SCROLLINGEND = &h0013
const EVENT_SYSTEM_SWITCHSTART = &h0014
const EVENT_SYSTEM_SWITCHEND = &h0015
const EVENT_SYSTEM_MINIMIZESTART = &h0016
const EVENT_SYSTEM_MINIMIZEEND = &h0017




const EVENT_CONSOLE_CARET = &h4001
const EVENT_CONSOLE_UPDATE_REGION = &h4002
const EVENT_CONSOLE_UPDATE_SIMPLE = &h4003
const EVENT_CONSOLE_UPDATE_SCROLL = &h4004
const EVENT_CONSOLE_LAYOUT = &h4005
const EVENT_CONSOLE_START_APPLICATION = &h4006
const EVENT_CONSOLE_END_APPLICATION = &h4007

 const CONSOLE_APPLICATION_16BIT = &h0001

const CONSOLE_CARET_SELECTION = &h0001
const CONSOLE_CARET_VISIBLE = &h0002


const EVENT_OBJECT_CREATE = &h8000
const EVENT_OBJECT_DESTROY = &h8001
const EVENT_OBJECT_SHOW = &h8002
const EVENT_OBJECT_HIDE = &h8003
const EVENT_OBJECT_REORDER = &h8004
const EVENT_OBJECT_FOCUS = &h8005
const EVENT_OBJECT_SELECTION = &h8006
const EVENT_OBJECT_SELECTIONADD = &h8007
const EVENT_OBJECT_SELECTIONREMOVE = &h8008
const EVENT_OBJECT_SELECTIONWITHIN = &h8009
const EVENT_OBJECT_STATECHANGE = &h800A
const EVENT_OBJECT_LOCATIONCHANGE = &h800B
const EVENT_OBJECT_NAMECHANGE = &h800C
const EVENT_OBJECT_DESCRIPTIONCHANGE = &h800D
const EVENT_OBJECT_VALUECHANGE = &h800E
const EVENT_OBJECT_PARENTCHANGE = &h800F
const EVENT_OBJECT_HELPCHANGE = &h8010
const EVENT_OBJECT_DEFACTIONCHANGE = &h8011
const EVENT_OBJECT_ACCELERATORCHANGE = &h8012





const SOUND_SYSTEM_STARTUP = 1
const SOUND_SYSTEM_SHUTDOWN = 2
const SOUND_SYSTEM_BEEP = 3
const SOUND_SYSTEM_ERROR = 4
const SOUND_SYSTEM_QUESTION = 5
const SOUND_SYSTEM_WARNING = 6
const SOUND_SYSTEM_INFORMATION = 7
const SOUND_SYSTEM_MAXIMIZE = 8
const SOUND_SYSTEM_MINIMIZE = 9
const SOUND_SYSTEM_RESTOREUP = 10
const SOUND_SYSTEM_RESTOREDOWN = 11
const SOUND_SYSTEM_APPSTART = 12
const SOUND_SYSTEM_FAULT = 13
const SOUND_SYSTEM_APPEND = 14
const SOUND_SYSTEM_MENUCOMMAND = 15
const SOUND_SYSTEM_MENUPOPUP = 16
const CSOUND_SYSTEM = 16
const ALERT_SYSTEM_INFORMATIONAL = 1
const ALERT_SYSTEM_WARNING = 2
const ALERT_SYSTEM_ERROR = 3
const ALERT_SYSTEM_QUERY = 4
const ALERT_SYSTEM_CRITICAL = 5
const CALERT_SYSTEM = 6

type tagGUITHREADINFO
 cbSize as DWORD
 flags as DWORD
 hwndActive as HWND
 hwndFocus as HWND
 hwndCapture as HWND
 hwndMenuOwner as HWND
 hwndMoveSize as HWND
 hwndCaret as HWND
 rcCaret as RECT
end type

type GUITHREADINFO as tagGUITHREADINFO
type PGUITHREADINFO as tagGUITHREADINFO ptr
type LPGUITHREADINFO as tagGUITHREADINFO ptr

const GUI_CARETBLINKING = &h00000001
const GUI_INMOVESIZE = &h00000002
const GUI_INMENUMODE = &h00000004
const GUI_SYSTEMMENUMODE = &h00000008
const GUI_POPUPMENUMODE = &h00000010

 const GUI_16BITTASK = &h00000020

declare function GetGUIThreadInfo(byval idThread as DWORD, byval pgui as PGUITHREADINFO) as WINBOOL
declare function BlockInput(byval fBlockIt as WINBOOL) as WINBOOL
declare function GetWindowModuleFileNameA(byval hwnd as HWND, byval pszFileName as LPSTR, byval cchFileNameMax as UINT) as UINT

 declare function GetWindowModuleFileName alias "GetWindowModuleFileNameA"(byval hwnd as HWND, byval pszFileName as LPSTR, byval cchFileNameMax as UINT) as UINT

declare function GetWindowModuleFileNameW(byval hwnd as HWND, byval pszFileName as LPWSTR, byval cchFileNameMax as UINT) as UINT



const STATE_SYSTEM_UNAVAILABLE = &h00000001
const STATE_SYSTEM_SELECTED = &h00000002
const STATE_SYSTEM_FOCUSED = &h00000004
const STATE_SYSTEM_PRESSED = &h00000008
const STATE_SYSTEM_CHECKED = &h00000010
const STATE_SYSTEM_MIXED = &h00000020
const STATE_SYSTEM_INDETERMINATE = STATE_SYSTEM_MIXED
const STATE_SYSTEM_READONLY = &h00000040
const STATE_SYSTEM_HOTTRACKED = &h00000080
const STATE_SYSTEM_DEFAULT = &h00000100
const STATE_SYSTEM_EXPANDED = &h00000200
const STATE_SYSTEM_COLLAPSED = &h00000400
const STATE_SYSTEM_BUSY = &h00000800
const STATE_SYSTEM_FLOATING = &h00001000
const STATE_SYSTEM_MARQUEED = &h00002000
const STATE_SYSTEM_ANIMATED = &h00004000
const STATE_SYSTEM_INVISIBLE = &h00008000
const STATE_SYSTEM_OFFSCREEN = &h00010000
const STATE_SYSTEM_SIZEABLE = &h00020000
const STATE_SYSTEM_MOVEABLE = &h00040000
const STATE_SYSTEM_SELFVOICING = &h00080000
const STATE_SYSTEM_FOCUSABLE = &h00100000
const STATE_SYSTEM_SELECTABLE = &h00200000
const STATE_SYSTEM_LINKED = &h00400000
const STATE_SYSTEM_TRAVERSED = &h00800000
const STATE_SYSTEM_MULTISELECTABLE = &h01000000
const STATE_SYSTEM_EXTSELECTABLE = &h02000000
const STATE_SYSTEM_ALERT_LOW = &h04000000
const STATE_SYSTEM_ALERT_MEDIUM = &h08000000
const STATE_SYSTEM_ALERT_HIGH = &h10000000
const STATE_SYSTEM_PROTECTED = &h20000000
const STATE_SYSTEM_VALID = &h3FFFFFFF
const CCHILDREN_TITLEBAR = 5
const CCHILDREN_SCROLLBAR = 5

type tagCURSORINFO
 cbSize as DWORD
 flags as DWORD
 hCursor as HCURSOR
 ptScreenPos as POINT
end type

type CURSORINFO as tagCURSORINFO
type PCURSORINFO as tagCURSORINFO ptr
type LPCURSORINFO as tagCURSORINFO ptr
const CURSOR_SHOWING = &h00000001


declare function GetCursorInfo(byval pci as PCURSORINFO) as WINBOOL

type tagWINDOWINFO
 cbSize as DWORD
 rcWindow as RECT
 rcClient as RECT
 dwStyle as DWORD
 dwExStyle as DWORD
 dwWindowStatus as DWORD
 cxWindowBorders as UINT
 cyWindowBorders as UINT
 atomWindowType as ATOM
 wCreatorVersion as WORD
end type

type WINDOWINFO as tagWINDOWINFO
type PWINDOWINFO as tagWINDOWINFO ptr
type LPWINDOWINFO as tagWINDOWINFO ptr
const WS_ACTIVECAPTION = &h0001
declare function GetWindowInfo(byval hwnd as HWND, byval pwi as PWINDOWINFO) as WINBOOL

type tagTITLEBARINFO
 cbSize as DWORD
 rcTitleBar as RECT
 rgstate(0 to (5 + 1) - 1) as DWORD
end type

type TITLEBARINFO as tagTITLEBARINFO
type PTITLEBARINFO as tagTITLEBARINFO ptr
type LPTITLEBARINFO as tagTITLEBARINFO ptr
declare function GetTitleBarInfo(byval hwnd as HWND, byval pti as PTITLEBARINFO) as WINBOOL


type tagMENUBARINFO
 cbSize as DWORD
 rcBar as RECT
 hMenu as HMENU
 hwndMenu as HWND
 fBarFocused : 1 as WINBOOL
 fFocused : 1 as WINBOOL
end type

type MENUBARINFO as tagMENUBARINFO
type PMENUBARINFO as tagMENUBARINFO ptr
type LPMENUBARINFO as tagMENUBARINFO ptr
declare function GetMenuBarInfo(byval hwnd as HWND, byval idObject as LONG, byval idItem as LONG, byval pmbi as PMENUBARINFO) as WINBOOL

type tagSCROLLBARINFO
 cbSize as DWORD
 rcScrollBar as RECT
 dxyLineButton as long
 xyThumbTop as long
 xyThumbBottom as long
 reserved as long
 rgstate(0 to (5 + 1) - 1) as DWORD
end type

type SCROLLBARINFO as tagSCROLLBARINFO
type PSCROLLBARINFO as tagSCROLLBARINFO ptr
type LPSCROLLBARINFO as tagSCROLLBARINFO ptr
declare function GetScrollBarInfo(byval hwnd as HWND, byval idObject as LONG, byval psbi as PSCROLLBARINFO) as WINBOOL

type tagCOMBOBOXINFO
 cbSize as DWORD
 rcItem as RECT
 rcButton as RECT
 stateButton as DWORD
 hwndCombo as HWND
 hwndItem as HWND
 hwndList as HWND
end type

type COMBOBOXINFO as tagCOMBOBOXINFO
type PCOMBOBOXINFO as tagCOMBOBOXINFO ptr
type LPCOMBOBOXINFO as tagCOMBOBOXINFO ptr
declare function GetComboBoxInfo(byval hwndCombo as HWND, byval pcbi as PCOMBOBOXINFO) as WINBOOL

const GA_PARENT = 1
const GA_ROOT = 2
const GA_ROOTOWNER = 3

declare function GetAncestor(byval hwnd as HWND, byval gaFlags as UINT) as HWND
declare function RealChildWindowFromPoint(byval hwndParent as HWND, byval ptParentClientCoords as POINT) as HWND
declare function RealGetWindowClassA(byval hwnd as HWND, byval ptszClassName as LPSTR, byval cchClassNameMax as UINT) as UINT

 declare function RealGetWindowClass alias "RealGetWindowClassA"(byval hwnd as HWND, byval ptszClassName as LPSTR, byval cchClassNameMax as UINT) as UINT

declare function RealGetWindowClassW(byval hwnd as HWND, byval ptszClassName as LPWSTR, byval cchClassNameMax as UINT) as UINT


type tagALTTABINFO
 cbSize as DWORD
 cItems as long
 cColumns as long
 cRows as long
 iColFocus as long
 iRowFocus as long
 cxItem as long
 cyItem as long
 ptStart as POINT
end type

type ALTTABINFO as tagALTTABINFO
type PALTTABINFO as tagALTTABINFO ptr
type LPALTTABINFO as tagALTTABINFO ptr
declare function GetAltTabInfoA(byval hwnd as HWND, byval iItem as long, byval pati as PALTTABINFO, byval pszItemText as LPSTR, byval cchItemText as UINT) as WINBOOL

 declare function GetAltTabInfo alias "GetAltTabInfoA"(byval hwnd as HWND, byval iItem as long, byval pati as PALTTABINFO, byval pszItemText as LPSTR, byval cchItemText as UINT) as WINBOOL

declare function GetAltTabInfoW(byval hwnd as HWND, byval iItem as long, byval pati as PALTTABINFO, byval pszItemText as LPWSTR, byval cchItemText as UINT) as WINBOOL


declare function GetListBoxInfo(byval hwnd as HWND) as DWORD
declare function LockWorkStation() as WINBOOL
declare function UserHandleGrantAccess(byval hUserHandle as HANDLE, byval hJob as HANDLE, byval bGrant as WINBOOL) as WINBOOL

type HRAWINPUT__
 unused as long
end type

type HRAWINPUT as HRAWINPUT__ ptr
const RIM_INPUT = 0
const RIM_INPUTSINK = 1

type tagRAWINPUTHEADER
 dwType as DWORD
 dwSize as DWORD
 hDevice as HANDLE
 wParam as WPARAM
end type

type RAWINPUTHEADER as tagRAWINPUTHEADER
type PRAWINPUTHEADER as tagRAWINPUTHEADER ptr
type LPRAWINPUTHEADER as tagRAWINPUTHEADER ptr

const RIM_TYPEMOUSE = 0
const RIM_TYPEKEYBOARD = 1
const RIM_TYPEHID = 2

type tagRAWMOUSE
 usFlags as USHORT

 union
 ulButtons as ULONG

 type
 usButtonFlags as USHORT
 usButtonData as USHORT
 end type
 end union

 ulRawButtons as ULONG
 lLastX as LONG
 lLastY as LONG
 ulExtraInformation as ULONG
end type

type RAWMOUSE as tagRAWMOUSE
type PRAWMOUSE as tagRAWMOUSE ptr
type LPRAWMOUSE as tagRAWMOUSE ptr

const RI_MOUSE_LEFT_BUTTON_DOWN = &h0001
const RI_MOUSE_LEFT_BUTTON_UP = &h0002
const RI_MOUSE_RIGHT_BUTTON_DOWN = &h0004
const RI_MOUSE_RIGHT_BUTTON_UP = &h0008
const RI_MOUSE_MIDDLE_BUTTON_DOWN = &h0010
const RI_MOUSE_MIDDLE_BUTTON_UP = &h0020
const RI_MOUSE_BUTTON_4_DOWN = &h0040
const RI_MOUSE_BUTTON_4_UP = &h0080
const RI_MOUSE_BUTTON_5_DOWN = &h0100
const RI_MOUSE_BUTTON_5_UP = &h0200
const RI_MOUSE_WHEEL = &h0400
const RI_MOUSE_BUTTON_1_DOWN = RI_MOUSE_LEFT_BUTTON_DOWN
const RI_MOUSE_BUTTON_1_UP = RI_MOUSE_LEFT_BUTTON_UP
const RI_MOUSE_BUTTON_2_DOWN = RI_MOUSE_RIGHT_BUTTON_DOWN
const RI_MOUSE_BUTTON_2_UP = RI_MOUSE_RIGHT_BUTTON_UP
const RI_MOUSE_BUTTON_3_DOWN = RI_MOUSE_MIDDLE_BUTTON_DOWN
const RI_MOUSE_BUTTON_3_UP = RI_MOUSE_MIDDLE_BUTTON_UP
const MOUSE_MOVE_RELATIVE = 0
const MOUSE_MOVE_ABSOLUTE = 1
const MOUSE_VIRTUAL_DESKTOP = &h02
const MOUSE_ATTRIBUTES_CHANGED = &h04


type tagRAWKEYBOARD
 MakeCode as USHORT
 Flags as USHORT
 Reserved as USHORT
 VKey as USHORT
 Message as UINT
 ExtraInformation as ULONG
end type

type RAWKEYBOARD as tagRAWKEYBOARD
type PRAWKEYBOARD as tagRAWKEYBOARD ptr
type LPRAWKEYBOARD as tagRAWKEYBOARD ptr

const KEYBOARD_OVERRUN_MAKE_CODE = &hFF
const RI_KEY_MAKE = 0
const RI_KEY_BREAK = 1
const RI_KEY_E0 = 2
const RI_KEY_E1 = 4
const RI_KEY_TERMSRV_SET_LED = 8
const RI_KEY_TERMSRV_SHADOW = &h10

type tagRAWHID
 dwSizeHid as DWORD
 dwCount as DWORD
 bRawData(0 to 0) as UBYTE
end type

type RAWHID as tagRAWHID
type PRAWHID as tagRAWHID ptr
type LPRAWHID as tagRAWHID ptr

union tagRAWINPUT_data
 mouse as RAWMOUSE
 keyboard as RAWKEYBOARD
 hid as RAWHID
end union

type tagRAWINPUT
 header as RAWINPUTHEADER
 data as tagRAWINPUT_data
end type

type RAWINPUT as tagRAWINPUT
type PRAWINPUT as tagRAWINPUT ptr
type LPRAWINPUT as tagRAWINPUT ptr


const RID_INPUT = &h10000003
const RID_HEADER = &h10000005
declare function GetRawInputData(byval hRawInput as HRAWINPUT, byval uiCommand as UINT, byval pData as LPVOID, byval pcbSize as PUINT, byval cbSizeHeader as UINT) as UINT
const RIDI_PREPARSEDDATA = &h20000005
const RIDI_DEVICENAME = &h20000007
const RIDI_DEVICEINFO = &h2000000b

type tagRID_DEVICE_INFO_MOUSE
 dwId as DWORD
 dwNumberOfButtons as DWORD
 dwSampleRate as DWORD
 fHasHorizontalWheel as WINBOOL
end type

type RID_DEVICE_INFO_MOUSE as tagRID_DEVICE_INFO_MOUSE
type PRID_DEVICE_INFO_MOUSE as tagRID_DEVICE_INFO_MOUSE ptr

type tagRID_DEVICE_INFO_KEYBOARD
 dwType as DWORD
 dwSubType as DWORD
 dwKeyboardMode as DWORD
 dwNumberOfFunctionKeys as DWORD
 dwNumberOfIndicators as DWORD
 dwNumberOfKeysTotal as DWORD
end type

type RID_DEVICE_INFO_KEYBOARD as tagRID_DEVICE_INFO_KEYBOARD
type PRID_DEVICE_INFO_KEYBOARD as tagRID_DEVICE_INFO_KEYBOARD ptr

type tagRID_DEVICE_INFO_HID
 dwVendorId as DWORD
 dwProductId as DWORD
 dwVersionNumber as DWORD
 usUsagePage as USHORT
 usUsage as USHORT
end type

type RID_DEVICE_INFO_HID as tagRID_DEVICE_INFO_HID
type PRID_DEVICE_INFO_HID as tagRID_DEVICE_INFO_HID ptr

type tagRID_DEVICE_INFO
 cbSize as DWORD
 dwType as DWORD

 union
 mouse as RID_DEVICE_INFO_MOUSE
 keyboard as RID_DEVICE_INFO_KEYBOARD
 hid as RID_DEVICE_INFO_HID
 end union
end type

type RID_DEVICE_INFO as tagRID_DEVICE_INFO
type PRID_DEVICE_INFO as tagRID_DEVICE_INFO ptr
type LPRID_DEVICE_INFO as tagRID_DEVICE_INFO ptr
declare function GetRawInputDeviceInfoA(byval hDevice as HANDLE, byval uiCommand as UINT, byval pData as LPVOID, byval pcbSize as PUINT) as UINT

 declare function GetRawInputDeviceInfo alias "GetRawInputDeviceInfoA"(byval hDevice as HANDLE, byval uiCommand as UINT, byval pData as LPVOID, byval pcbSize as PUINT) as UINT

declare function GetRawInputDeviceInfoW(byval hDevice as HANDLE, byval uiCommand as UINT, byval pData as LPVOID, byval pcbSize as PUINT) as UINT


declare function GetRawInputBuffer(byval pData as PRAWINPUT, byval pcbSize as PUINT, byval cbSizeHeader as UINT) as UINT

type tagRAWINPUTDEVICE
 usUsagePage as USHORT
 usUsage as USHORT
 dwFlags as DWORD
 hwndTarget as HWND
end type

type RAWINPUTDEVICE as tagRAWINPUTDEVICE
type PRAWINPUTDEVICE as tagRAWINPUTDEVICE ptr
type LPRAWINPUTDEVICE as tagRAWINPUTDEVICE ptr
type PCRAWINPUTDEVICE as const RAWINPUTDEVICE ptr

const RIDEV_REMOVE = &h00000001
const RIDEV_EXCLUDE = &h00000010
const RIDEV_PAGEONLY = &h00000020
const RIDEV_NOLEGACY = &h00000030
const RIDEV_INPUTSINK = &h00000100
const RIDEV_CAPTUREMOUSE = &h00000200
const RIDEV_NOHOTKEYS = &h00000200
const RIDEV_APPKEYS = &h00000400
const RIDEV_EXINPUTSINK = &h00001000
const RIDEV_DEVNOTIFY = &h00002000
const RIDEV_EXMODEMASK = &h000000F0
const GIDC_ARRIVAL = 1
const GIDC_REMOVAL = 2


type tagRAWINPUTDEVICELIST
 hDevice as HANDLE
 dwType as DWORD
end type

type RAWINPUTDEVICELIST as tagRAWINPUTDEVICELIST
type PRAWINPUTDEVICELIST as tagRAWINPUTDEVICELIST ptr
declare function RegisterRawInputDevices(byval pRawInputDevices as PCRAWINPUTDEVICE, byval uiNumDevices as UINT, byval cbSize as UINT) as WINBOOL
declare function GetRegisteredRawInputDevices(byval pRawInputDevices as PRAWINPUTDEVICE, byval puiNumDevices as PUINT, byval cbSize as UINT) as UINT
declare function GetRawInputDeviceList(byval pRawInputDeviceList as PRAWINPUTDEVICELIST, byval puiNumDevices as PUINT, byval cbSize as UINT) as UINT
declare function DefRawInputProc(byval paRawInput as PRAWINPUT ptr, byval nInput as INT_, byval cbSizeHeader as UINT) as LRESULT




const MAX_STR_BLOCKREASON = 256
declare function ShutdownBlockReasonCreate(byval hWnd as HWND, byval pwszReason as LPCWSTR) as WINBOOL
declare function ShutdownBlockReasonQuery(byval hWnd as HWND, byval pwszBuff as LPWSTR, byval pcchBuff as DWORD ptr) as WINBOOL
declare function ShutdownBlockReasonDestroy(byval hWnd as HWND) as WINBOOL



end extern



extern "Windows"

declare function GetTimeFormatEx(byval lpLocaleName as LPCWSTR, byval dwFlags as DWORD, byval lpTime as const SYSTEMTIME ptr, byval lpFormat as LPCWSTR, byval lpTimeStr as LPWSTR, byval cchTime as long) as long
declare function GetDateFormatEx(byval lpLocaleName as LPCWSTR, byval dwFlags as DWORD, byval lpDate as const SYSTEMTIME ptr, byval lpFormat as LPCWSTR, byval lpDateStr as LPWSTR, byval cchDate as long, byval lpCalendar as LPCWSTR) as long
declare function GetDateFormatA(byval Locale as LCID, byval dwFlags as DWORD, byval lpDate as const SYSTEMTIME ptr, byval lpFormat as LPCSTR, byval lpDateStr as LPSTR, byval cchDate as long) as long
declare function GetDateFormatW(byval Locale as LCID, byval dwFlags as DWORD, byval lpDate as const SYSTEMTIME ptr, byval lpFormat as LPCWSTR, byval lpDateStr as LPWSTR, byval cchDate as long) as long
declare function GetTimeFormatA(byval Locale as LCID, byval dwFlags as DWORD, byval lpTime as const SYSTEMTIME ptr, byval lpFormat as LPCSTR, byval lpTimeStr as LPSTR, byval cchTime as long) as long
declare function GetTimeFormatW(byval Locale as LCID, byval dwFlags as DWORD, byval lpTime as const SYSTEMTIME ptr, byval lpFormat as LPCWSTR, byval lpTimeStr as LPWSTR, byval cchTime as long) as long

 declare function GetDateFormat alias "GetDateFormatA"(byval Locale as LCID, byval dwFlags as DWORD, byval lpDate as const SYSTEMTIME ptr, byval lpFormat as LPCSTR, byval lpDateStr as LPSTR, byval cchDate as long) as long
 declare function GetTimeFormat alias "GetTimeFormatA"(byval Locale as LCID, byval dwFlags as DWORD, byval lpTime as const SYSTEMTIME ptr, byval lpFormat as LPCSTR, byval lpTimeStr as LPSTR, byval cchTime as long) as long

const MAX_LEADBYTES = 12
const MAX_DEFAULTCHAR = 2
const HIGH_SURROGATE_START = &hd800
const HIGH_SURROGATE_END = &hdbff
const LOW_SURROGATE_START = &hdc00
const LOW_SURROGATE_END = &hdfff
const MB_PRECOMPOSED = &h00000001
const MB_COMPOSITE = &h00000002
const MB_USEGLYPHCHARS = &h00000004
const MB_ERR_INVALID_CHARS = &h00000008
const WC_DISCARDNS = &h00000010
const WC_SEPCHARS = &h00000020
const WC_DEFAULTCHAR = &h00000040


const WC_COMPOSITECHECK = &h00000200
const WC_NO_BEST_FIT_CHARS = &h00000400
const CT_CTYPE1 = &h00000001
const CT_CTYPE2 = &h00000002
const CT_CTYPE3 = &h00000004
const C1_UPPER = &h0001
const C1_LOWER = &h0002
const C1_DIGIT = &h0004
const C1_SPACE = &h0008
const C1_PUNCT = &h0010
const C1_CNTRL = &h0020
const C1_BLANK = &h0040
const C1_XDIGIT = &h0080
const C1_ALPHA = &h0100
const C1_DEFINED = &h0200
const C2_LEFTTORIGHT = &h0001
const C2_RIGHTTOLEFT = &h0002
const C2_EUROPENUMBER = &h0003
const C2_EUROPESEPARATOR = &h0004
const C2_EUROPETERMINATOR = &h0005
const C2_ARABICNUMBER = &h0006
const C2_COMMONSEPARATOR = &h0007
const C2_BLOCKSEPARATOR = &h0008
const C2_SEGMENTSEPARATOR = &h0009
const C2_WHITESPACE = &h000a
const C2_OTHERNEUTRAL = &h000b
const C2_NOTAPPLICABLE = &h00000
const C3_NONSPACING = &h0001
const C3_DIACRITIC = &h0002
const C3_VOWELMARK = &h0004
const C3_SYMBOL = &h0008
const C3_KATAKANA = &h0010
const C3_HIRAGANA = &h0020
const C3_HALFWIDTH = &h0040
const C3_FULLWIDTH = &h0080
const C3_IDEOGRAPH = &h0100
const C3_KASHIDA = &h0200
const C3_LEXICAL = &h0400
const C3_HIGHSURROGATE = &h0800
const C3_LOWSURROGATE = &h1000
const C3_ALPHA = &h8000
const C3_NOTAPPLICABLE = &h00000
const NORM_IGNORECASE = &h00000001
const NORM_IGNORENONSPACE = &h00000002
const NORM_IGNORESYMBOLS = &h00000004
const LINGUISTIC_IGNORECASE = &h00000010
const LINGUISTIC_IGNOREDIACRITIC = &h00000020
const NORM_IGNOREKANATYPE = &h00010000
const NORM_IGNOREWIDTH = &h00020000
const NORM_LINGUISTIC_CASING = &h08000000
const MAP_FOLDCZONE = &h00000010
const MAP_PRECOMPOSED = &h00000020
const MAP_COMPOSITE = &h00000040
const MAP_FOLDDIGITS = &h00000080
const MAP_EXPAND_LIGATURES = &h00002000
const LCMAP_LOWERCASE = &h00000100
const LCMAP_UPPERCASE = &h00000200


const LCMAP_SORTKEY = &h00000400
const LCMAP_BYTEREV = &h00000800
const LCMAP_HIRAGANA = &h00100000
const LCMAP_KATAKANA = &h00200000
const LCMAP_HALFWIDTH = &h00400000
const LCMAP_FULLWIDTH = &h00800000
const LCMAP_LINGUISTIC_CASING = &h01000000
const LCMAP_SIMPLIFIED_CHINESE = &h02000000
const LCMAP_TRADITIONAL_CHINESE = &h04000000


const FIND_STARTSWITH = &h00100000
const FIND_ENDSWITH = &h00200000
const FIND_FROMSTART = &h00400000
const FIND_FROMEND = &h00800000
const LGRPID_INSTALLED = &h00000001
const LGRPID_SUPPORTED = &h00000002
const LCID_INSTALLED = &h00000001
const LCID_SUPPORTED = &h00000002
const LCID_ALTERNATE_SORTS = &h00000004



const CP_INSTALLED = &h00000001
const CP_SUPPORTED = &h00000002
const SORT_STRINGSORT = &h00001000


const CSTR_LESS_THAN = 1
const CSTR_EQUAL = 2
const CSTR_GREATER_THAN = 3
const CP_ACP = 0
const CP_OEMCP = 1
const CP_MACCP = 2
const CP_THREAD_ACP = 3
const CP_SYMBOL = 42
const CP_UTF7 = 65000
const CP_UTF8 = 65001
const CTRY_DEFAULT = 0
const CTRY_ALBANIA = 355
const CTRY_ALGERIA = 213
const CTRY_ARGENTINA = 54
const CTRY_ARMENIA = 374
const CTRY_AUSTRALIA = 61
const CTRY_AUSTRIA = 43
const CTRY_AZERBAIJAN = 994
const CTRY_BAHRAIN = 973
const CTRY_BELARUS = 375
const CTRY_BELGIUM = 32
const CTRY_BELIZE = 501
const CTRY_BOLIVIA = 591
const CTRY_BRAZIL = 55
const CTRY_BRUNEI_DARUSSALAM = 673
const CTRY_BULGARIA = 359
const CTRY_CANADA = 2
const CTRY_CARIBBEAN = 1
const CTRY_CHILE = 56
const CTRY_COLOMBIA = 57
const CTRY_COSTA_RICA = 506
const CTRY_CROATIA = 385
const CTRY_CZECH = 420
const CTRY_DENMARK = 45
const CTRY_DOMINICAN_REPUBLIC = 1
const CTRY_ECUADOR = 593
const CTRY_EGYPT = 20
const CTRY_EL_SALVADOR = 503
const CTRY_ESTONIA = 372
const CTRY_FAEROE_ISLANDS = 298
const CTRY_FINLAND = 358
const CTRY_FRANCE = 33
const CTRY_GEORGIA = 995
const CTRY_GERMANY = 49
const CTRY_GREECE = 30
const CTRY_GUATEMALA = 502
const CTRY_HONDURAS = 504
const CTRY_HONG_KONG = 852
const CTRY_HUNGARY = 36
const CTRY_ICELAND = 354
const CTRY_INDIA = 91
const CTRY_INDONESIA = 62
const CTRY_IRAN = 981
const CTRY_IRAQ = 964
const CTRY_IRELAND = 353
const CTRY_ISRAEL = 972
const CTRY_ITALY = 39
const CTRY_JAMAICA = 1
const CTRY_JAPAN = 81
const CTRY_JORDAN = 962
const CTRY_KAZAKSTAN = 7
const CTRY_KENYA = 254
const CTRY_KUWAIT = 965
const CTRY_KYRGYZSTAN = 996
const CTRY_LATVIA = 371
const CTRY_LEBANON = 961
const CTRY_LIBYA = 218
const CTRY_LIECHTENSTEIN = 41
const CTRY_LITHUANIA = 370
const CTRY_LUXEMBOURG = 352
const CTRY_MACAU = 853
const CTRY_MACEDONIA = 389
const CTRY_MALAYSIA = 60
const CTRY_MALDIVES = 960
const CTRY_MEXICO = 52
const CTRY_MONACO = 33
const CTRY_MONGOLIA = 976
const CTRY_MOROCCO = 212
const CTRY_NETHERLANDS = 31
const CTRY_NEW_ZEALAND = 64
const CTRY_NICARAGUA = 505
const CTRY_NORWAY = 47
const CTRY_OMAN = 968
const CTRY_PAKISTAN = 92
const CTRY_PANAMA = 507
const CTRY_PARAGUAY = 595
const CTRY_PERU = 51
const CTRY_PHILIPPINES = 63
const CTRY_POLAND = 48
const CTRY_PORTUGAL = 351
const CTRY_PRCHINA = 86
const CTRY_PUERTO_RICO = 1
const CTRY_QATAR = 974
const CTRY_ROMANIA = 40
const CTRY_RUSSIA = 7
const CTRY_SAUDI_ARABIA = 966
const CTRY_SERBIA = 381
const CTRY_SINGAPORE = 65
const CTRY_SLOVAK = 421
const CTRY_SLOVENIA = 386
const CTRY_SOUTH_AFRICA = 27
const CTRY_SOUTH_KOREA = 82
const CTRY_SPAIN = 34
const CTRY_SWEDEN = 46
const CTRY_SWITZERLAND = 41
const CTRY_SYRIA = 963
const CTRY_TAIWAN = 886
const CTRY_TATARSTAN = 7
const CTRY_THAILAND = 66
const CTRY_TRINIDAD_Y_TOBAGO = 1
const CTRY_TUNISIA = 216
const CTRY_TURKEY = 90
const CTRY_UAE = 971
const CTRY_UKRAINE = 380
const CTRY_UNITED_KINGDOM = 44
const CTRY_UNITED_STATES = 1
const CTRY_URUGUAY = 598
const CTRY_UZBEKISTAN = 7
const CTRY_VENEZUELA = 58
const CTRY_VIET_NAM = 84
const CTRY_YEMEN = 967
const CTRY_ZIMBABWE = 263
const LOCALE_SLOCALIZEDDISPLAYNAME = &h00000002


const LOCALE_RETURN_NUMBER = &h20000000
const LOCALE_USE_CP_ACP = &h40000000
const LOCALE_NOUSEROVERRIDE = &h80000000



const LOCALE_SENGLISHLANGUAGENAME = &h00001001
const LOCALE_SNATIVELANGUAGENAME = &h00000004
const LOCALE_SLOCALIZEDCOUNTRYNAME = &h00000006
const LOCALE_SENGLISHCOUNTRYNAME = &h00001002
const LOCALE_SNATIVECOUNTRYNAME = &h00000008
const LOCALE_SLANGUAGE = &h00000002


const LOCALE_SENGLANGUAGE = &h00001001
const LOCALE_SNATIVELANGNAME = &h00000004
const LOCALE_SCOUNTRY = &h00000006
const LOCALE_SENGCOUNTRY = &h00001002
const LOCALE_SNATIVECTRYNAME = &h00000008
const LOCALE_ILANGUAGE = &h00000001
const LOCALE_SABBREVLANGNAME = &h00000003
const LOCALE_ICOUNTRY = &h00000005
const LOCALE_SABBREVCTRYNAME = &h00000007
const LOCALE_IGEOID = &h0000005b
const LOCALE_IDEFAULTLANGUAGE = &h00000009
const LOCALE_IDEFAULTCOUNTRY = &h0000000a
const LOCALE_IDEFAULTCODEPAGE = &h0000000b
const LOCALE_IDEFAULTANSICODEPAGE = &h00001004
const LOCALE_IDEFAULTMACCODEPAGE = &h00001011
const LOCALE_SLIST = &h0000000c
const LOCALE_IMEASURE = &h0000000d
const LOCALE_SDECIMAL = &h0000000e
const LOCALE_STHOUSAND = &h0000000f
const LOCALE_SGROUPING = &h00000010
const LOCALE_IDIGITS = &h00000011
const LOCALE_ILZERO = &h00000012
const LOCALE_INEGNUMBER = &h00001010
const LOCALE_SNATIVEDIGITS = &h00000013
const LOCALE_SCURRENCY = &h00000014
const LOCALE_SINTLSYMBOL = &h00000015
const LOCALE_SMONDECIMALSEP = &h00000016
const LOCALE_SMONTHOUSANDSEP = &h00000017
const LOCALE_SMONGROUPING = &h00000018
const LOCALE_ICURRDIGITS = &h00000019
const LOCALE_IINTLCURRDIGITS = &h0000001a
const LOCALE_ICURRENCY = &h0000001b
const LOCALE_INEGCURR = &h0000001c
const LOCALE_SDATE = &h0000001d
const LOCALE_STIME = &h0000001e
const LOCALE_SSHORTDATE = &h0000001f
const LOCALE_SLONGDATE = &h00000020
const LOCALE_STIMEFORMAT = &h00001003
const LOCALE_IDATE = &h00000021
const LOCALE_ILDATE = &h00000022
const LOCALE_ITIME = &h00000023
const LOCALE_ITIMEMARKPOSN = &h00001005
const LOCALE_ICENTURY = &h00000024
const LOCALE_ITLZERO = &h00000025
const LOCALE_IDAYLZERO = &h00000026
const LOCALE_IMONLZERO = &h00000027
const LOCALE_S1159 = &h00000028
const LOCALE_S2359 = &h00000029
const LOCALE_ICALENDARTYPE = &h00001009
const LOCALE_IOPTIONALCALENDAR = &h0000100b
const LOCALE_IFIRSTDAYOFWEEK = &h0000100c
const LOCALE_IFIRSTWEEKOFYEAR = &h0000100d
const LOCALE_SDAYNAME1 = &h0000002a
const LOCALE_SDAYNAME2 = &h0000002b
const LOCALE_SDAYNAME3 = &h0000002c
const LOCALE_SDAYNAME4 = &h0000002d
const LOCALE_SDAYNAME5 = &h0000002e
const LOCALE_SDAYNAME6 = &h0000002f
const LOCALE_SDAYNAME7 = &h00000030
const LOCALE_SABBREVDAYNAME1 = &h00000031
const LOCALE_SABBREVDAYNAME2 = &h00000032
const LOCALE_SABBREVDAYNAME3 = &h00000033
const LOCALE_SABBREVDAYNAME4 = &h00000034
const LOCALE_SABBREVDAYNAME5 = &h00000035
const LOCALE_SABBREVDAYNAME6 = &h00000036
const LOCALE_SABBREVDAYNAME7 = &h00000037
const LOCALE_SMONTHNAME1 = &h00000038
const LOCALE_SMONTHNAME2 = &h00000039
const LOCALE_SMONTHNAME3 = &h0000003a
const LOCALE_SMONTHNAME4 = &h0000003b
const LOCALE_SMONTHNAME5 = &h0000003c
const LOCALE_SMONTHNAME6 = &h0000003d
const LOCALE_SMONTHNAME7 = &h0000003e
const LOCALE_SMONTHNAME8 = &h0000003f
const LOCALE_SMONTHNAME9 = &h00000040
const LOCALE_SMONTHNAME10 = &h00000041
const LOCALE_SMONTHNAME11 = &h00000042
const LOCALE_SMONTHNAME12 = &h00000043
const LOCALE_SMONTHNAME13 = &h0000100e
const LOCALE_SABBREVMONTHNAME1 = &h00000044
const LOCALE_SABBREVMONTHNAME2 = &h00000045
const LOCALE_SABBREVMONTHNAME3 = &h00000046
const LOCALE_SABBREVMONTHNAME4 = &h00000047
const LOCALE_SABBREVMONTHNAME5 = &h00000048
const LOCALE_SABBREVMONTHNAME6 = &h00000049
const LOCALE_SABBREVMONTHNAME7 = &h0000004a
const LOCALE_SABBREVMONTHNAME8 = &h0000004b
const LOCALE_SABBREVMONTHNAME9 = &h0000004c
const LOCALE_SABBREVMONTHNAME10 = &h0000004d
const LOCALE_SABBREVMONTHNAME11 = &h0000004e
const LOCALE_SABBREVMONTHNAME12 = &h0000004f
const LOCALE_SABBREVMONTHNAME13 = &h0000100f
const LOCALE_SPOSITIVESIGN = &h00000050
const LOCALE_SNEGATIVESIGN = &h00000051
const LOCALE_IPOSSIGNPOSN = &h00000052
const LOCALE_INEGSIGNPOSN = &h00000053
const LOCALE_IPOSSYMPRECEDES = &h00000054
const LOCALE_IPOSSEPBYSPACE = &h00000055
const LOCALE_INEGSYMPRECEDES = &h00000056
const LOCALE_INEGSEPBYSPACE = &h00000057
const LOCALE_FONTSIGNATURE = &h00000058
const LOCALE_SISO639LANGNAME = &h00000059
const LOCALE_SISO3166CTRYNAME = &h0000005a
const LOCALE_IDEFAULTEBCDICCODEPAGE = &h00001012
const LOCALE_IPAPERSIZE = &h0000100a
const LOCALE_SENGCURRNAME = &h00001007
const LOCALE_SNATIVECURRNAME = &h00001008
const LOCALE_SYEARMONTH = &h00001006
const LOCALE_SSORTNAME = &h00001013
const LOCALE_IDIGITSUBSTITUTION = &h00001014



const TIME_NOMINUTESORSECONDS = &h00000001
const TIME_NOSECONDS = &h00000002
const TIME_NOTIMEMARKER = &h00000004
const TIME_FORCE24HOURFORMAT = &h00000008
const DATE_SHORTDATE = &h00000001
const DATE_LONGDATE = &h00000002
const DATE_USE_ALT_CALENDAR = &h00000004
const DATE_YEARMONTH = &h00000008
const DATE_LTRREADING = &h00000010
const DATE_RTLREADING = &h00000020


const CAL_NOUSEROVERRIDE = LOCALE_NOUSEROVERRIDE
const CAL_USE_CP_ACP = LOCALE_USE_CP_ACP
const CAL_RETURN_NUMBER = LOCALE_RETURN_NUMBER


const CAL_ICALINTVALUE = &h00000001
const CAL_SCALNAME = &h00000002
const CAL_IYEAROFFSETRANGE = &h00000003
const CAL_SERASTRING = &h00000004
const CAL_SSHORTDATE = &h00000005
const CAL_SLONGDATE = &h00000006
const CAL_SDAYNAME1 = &h00000007
const CAL_SDAYNAME2 = &h00000008
const CAL_SDAYNAME3 = &h00000009
const CAL_SDAYNAME4 = &h0000000a
const CAL_SDAYNAME5 = &h0000000b
const CAL_SDAYNAME6 = &h0000000c
const CAL_SDAYNAME7 = &h0000000d
const CAL_SABBREVDAYNAME1 = &h0000000e
const CAL_SABBREVDAYNAME2 = &h0000000f
const CAL_SABBREVDAYNAME3 = &h00000010
const CAL_SABBREVDAYNAME4 = &h00000011
const CAL_SABBREVDAYNAME5 = &h00000012
const CAL_SABBREVDAYNAME6 = &h00000013
const CAL_SABBREVDAYNAME7 = &h00000014
const CAL_SMONTHNAME1 = &h00000015
const CAL_SMONTHNAME2 = &h00000016
const CAL_SMONTHNAME3 = &h00000017
const CAL_SMONTHNAME4 = &h00000018
const CAL_SMONTHNAME5 = &h00000019
const CAL_SMONTHNAME6 = &h0000001a
const CAL_SMONTHNAME7 = &h0000001b
const CAL_SMONTHNAME8 = &h0000001c
const CAL_SMONTHNAME9 = &h0000001d
const CAL_SMONTHNAME10 = &h0000001e
const CAL_SMONTHNAME11 = &h0000001f
const CAL_SMONTHNAME12 = &h00000020
const CAL_SMONTHNAME13 = &h00000021
const CAL_SABBREVMONTHNAME1 = &h00000022
const CAL_SABBREVMONTHNAME2 = &h00000023
const CAL_SABBREVMONTHNAME3 = &h00000024
const CAL_SABBREVMONTHNAME4 = &h00000025
const CAL_SABBREVMONTHNAME5 = &h00000026
const CAL_SABBREVMONTHNAME6 = &h00000027
const CAL_SABBREVMONTHNAME7 = &h00000028
const CAL_SABBREVMONTHNAME8 = &h00000029
const CAL_SABBREVMONTHNAME9 = &h0000002a
const CAL_SABBREVMONTHNAME10 = &h0000002b
const CAL_SABBREVMONTHNAME11 = &h0000002c
const CAL_SABBREVMONTHNAME12 = &h0000002d
const CAL_SABBREVMONTHNAME13 = &h0000002e
const CAL_SYEARMONTH = &h0000002f
const CAL_ITWODIGITYEARMAX = &h00000030



const ENUM_ALL_CALENDARS = &hffffffff
const CAL_GREGORIAN = 1
const CAL_GREGORIAN_US = 2
const CAL_JAPAN = 3
const CAL_TAIWAN = 4
const CAL_KOREA = 5
const CAL_HIJRI = 6
const CAL_THAI = 7
const CAL_HEBREW = 8
const CAL_GREGORIAN_ME_FRENCH = 9
const CAL_GREGORIAN_ARABIC = 10
const CAL_GREGORIAN_XLIT_ENGLISH = 11
const CAL_GREGORIAN_XLIT_FRENCH = 12
const CAL_UMALQURA = 23
const LGRPID_WESTERN_EUROPE = &h0001
const LGRPID_CENTRAL_EUROPE = &h0002
const LGRPID_BALTIC = &h0003
const LGRPID_GREEK = &h0004
const LGRPID_CYRILLIC = &h0005
const LGRPID_TURKIC = &h0006
const LGRPID_TURKISH = &h0006
const LGRPID_JAPANESE = &h0007
const LGRPID_KOREAN = &h0008
const LGRPID_TRADITIONAL_CHINESE = &h0009
const LGRPID_SIMPLIFIED_CHINESE = &h000a
const LGRPID_THAI = &h000b
const LGRPID_HEBREW = &h000c
const LGRPID_ARABIC = &h000d
const LGRPID_VIETNAMESE = &h000e
const LGRPID_INDIC = &h000f
const LGRPID_GEORGIAN = &h0010
const LGRPID_ARMENIAN = &h0011


type LGRPID as DWORD
type LCTYPE as DWORD
type CALTYPE as DWORD
type CALID as DWORD

type _cpinfo
 MaxCharSize as UINT
 DefaultChar(0 to 1) as UBYTE
 LeadByte(0 to 11) as UBYTE
end type

type CPINFO as _cpinfo
type LPCPINFO as _cpinfo ptr

type _cpinfoexA
 MaxCharSize as UINT
 DefaultChar(0 to 1) as UBYTE
 LeadByte(0 to 11) as UBYTE
 UnicodeDefaultChar as WCHAR
 CodePage as UINT
 CodePageName as zstring * 260
end type

type CPINFOEXA as _cpinfoexA
type LPCPINFOEXA as _cpinfoexA ptr

type _cpinfoexW
 MaxCharSize as UINT
 DefaultChar(0 to 1) as UBYTE
 LeadByte(0 to 11) as UBYTE
 UnicodeDefaultChar as WCHAR
 CodePage as UINT
 CodePageName as wstring * 260
end type

type CPINFOEXW as _cpinfoexW
type LPCPINFOEXW as _cpinfoexW ptr

 type CPINFOEX as CPINFOEXA
 type LPCPINFOEX as LPCPINFOEXA

type _numberfmtA
 NumDigits as UINT
 LeadingZero as UINT
 Grouping as UINT
 lpDecimalSep as LPSTR
 lpThousandSep as LPSTR
 NegativeOrder as UINT
end type

type NUMBERFMTA as _numberfmtA
type LPNUMBERFMTA as _numberfmtA ptr

type _numberfmtW
 NumDigits as UINT
 LeadingZero as UINT
 Grouping as UINT
 lpDecimalSep as LPWSTR
 lpThousandSep as LPWSTR
 NegativeOrder as UINT
end type

type NUMBERFMTW as _numberfmtW
type LPNUMBERFMTW as _numberfmtW ptr

 type NUMBERFMT as NUMBERFMTA
 type LPNUMBERFMT as LPNUMBERFMTA

type _currencyfmtA
 NumDigits as UINT
 LeadingZero as UINT
 Grouping as UINT
 lpDecimalSep as LPSTR
 lpThousandSep as LPSTR
 NegativeOrder as UINT
 PositiveOrder as UINT
 lpCurrencySymbol as LPSTR
end type

type CURRENCYFMTA as _currencyfmtA
type LPCURRENCYFMTA as _currencyfmtA ptr

type _currencyfmtW
 NumDigits as UINT
 LeadingZero as UINT
 Grouping as UINT
 lpDecimalSep as LPWSTR
 lpThousandSep as LPWSTR
 NegativeOrder as UINT
 PositiveOrder as UINT
 lpCurrencySymbol as LPWSTR
end type

type CURRENCYFMTW as _currencyfmtW
type LPCURRENCYFMTW as _currencyfmtW ptr

 type CURRENCYFMT as CURRENCYFMTA
 type LPCURRENCYFMT as LPCURRENCYFMTA

type SYSNLS_FUNCTION as long
enum
 COMPARE_STRING = &h1
end enum

type NLS_FUNCTION as DWORD

type _nlsversioninfo
 dwNLSVersionInfoSize as DWORD
 dwNLSVersion as DWORD
 dwDefinedVersion as DWORD

end type

type NLSVERSIONINFO as _nlsversioninfo
type LPNLSVERSIONINFO as _nlsversioninfo ptr

type _nlsversioninfoex
 dwNLSVersionInfoSize as DWORD
 dwNLSVersion as DWORD
 dwDefinedVersion as DWORD
 dwEffectiveId as DWORD
 guidCustomVersion as GUID
end type

type NLSVERSIONINFOEX as _nlsversioninfoex
type LPNLSVERSIONINFOEX as _nlsversioninfoex ptr
type GEOID as LONG
type GEOTYPE as DWORD
type GEOCLASS as DWORD
const GEOID_NOT_AVAILABLE = -1

type SYSGEOTYPE as long
enum
 GEO_NATION = &h0001
 GEO_LATITUDE = &h0002
 GEO_LONGITUDE = &h0003
 GEO_ISO2 = &h0004
 GEO_ISO3 = &h0005
 GEO_RFC1766 = &h0006
 GEO_LCID = &h0007
 GEO_FRIENDLYNAME = &h0008
 GEO_OFFICIALNAME = &h0009
 GEO_TIMEZONES = &h000a
 GEO_OFFICIALLANGUAGES = &h000b
 GEO_ISO_UN_NUMBER = &h000c
 GEO_PARENT = &h000d
end enum

type SYSGEOCLASS as long
enum
 GEOCLASS_NATION = 16
 GEOCLASS_REGION = 14
 GEOCLASS_ALL = 0
end enum


type LANGUAGEGROUP_ENUMPROCA as function(byval as LGRPID, byval as LPSTR, byval as LPSTR, byval as DWORD, byval as LONG_PTR) as WINBOOL
type LANGGROUPLOCALE_ENUMPROCA as function(byval as LGRPID, byval as LCID, byval as LPSTR, byval as LONG_PTR) as WINBOOL
type UILANGUAGE_ENUMPROCA as function(byval as LPSTR, byval as LONG_PTR) as WINBOOL
type CODEPAGE_ENUMPROCA as function(byval as LPSTR) as WINBOOL
type DATEFMT_ENUMPROCA as function(byval as LPSTR) as WINBOOL
type DATEFMT_ENUMPROCEXA as function(byval as LPSTR, byval as CALID) as WINBOOL
type TIMEFMT_ENUMPROCA as function(byval as LPSTR) as WINBOOL
type CALINFO_ENUMPROCA as function(byval as LPSTR) as WINBOOL
type CALINFO_ENUMPROCEXA as function(byval as LPSTR, byval as CALID) as WINBOOL
type LOCALE_ENUMPROCA as function(byval as LPSTR) as WINBOOL
type LOCALE_ENUMPROCW as function(byval as LPWSTR) as WINBOOL
type LANGUAGEGROUP_ENUMPROCW as function(byval as LGRPID, byval as LPWSTR, byval as LPWSTR, byval as DWORD, byval as LONG_PTR) as WINBOOL
type LANGGROUPLOCALE_ENUMPROCW as function(byval as LGRPID, byval as LCID, byval as LPWSTR, byval as LONG_PTR) as WINBOOL
type UILANGUAGE_ENUMPROCW as function(byval as LPWSTR, byval as LONG_PTR) as WINBOOL
type CODEPAGE_ENUMPROCW as function(byval as LPWSTR) as WINBOOL
type DATEFMT_ENUMPROCW as function(byval as LPWSTR) as WINBOOL
type DATEFMT_ENUMPROCEXW as function(byval as LPWSTR, byval as CALID) as WINBOOL
type TIMEFMT_ENUMPROCW as function(byval as LPWSTR) as WINBOOL
type CALINFO_ENUMPROCW as function(byval as LPWSTR) as WINBOOL
type CALINFO_ENUMPROCEXW as function(byval as LPWSTR, byval as CALID) as WINBOOL
type GEO_ENUMPROC as function(byval as GEOID) as WINBOOL

 type LANGUAGEGROUP_ENUMPROC as LANGUAGEGROUP_ENUMPROCA
 type LANGGROUPLOCALE_ENUMPROC as LANGGROUPLOCALE_ENUMPROCA
 type UILANGUAGE_ENUMPROC as UILANGUAGE_ENUMPROCA
 type CODEPAGE_ENUMPROC as CODEPAGE_ENUMPROCA
 type DATEFMT_ENUMPROC as DATEFMT_ENUMPROCA
 type DATEFMT_ENUMPROCEX as DATEFMT_ENUMPROCEXA
 type TIMEFMT_ENUMPROC as TIMEFMT_ENUMPROCA
 type CALINFO_ENUMPROC as CALINFO_ENUMPROCA
 type CALINFO_ENUMPROCEX as CALINFO_ENUMPROCEXA
 type LOCALE_ENUMPROC as LOCALE_ENUMPROCA

type _FILEMUIINFO
 dwSize as DWORD
 dwVersion as DWORD
 dwFileType as DWORD
 pChecksum(0 to 15) as UBYTE
 pServiceChecksum(0 to 15) as UBYTE
 dwLanguageNameOffset as DWORD
 dwTypeIDMainSize as DWORD
 dwTypeIDMainOffset as DWORD
 dwTypeNameMainOffset as DWORD
 dwTypeIDMUISize as DWORD
 dwTypeIDMUIOffset as DWORD
 dwTypeNameMUIOffset as DWORD
 abBuffer(0 to 7) as UBYTE
end type

type FILEMUIINFO as _FILEMUIINFO
type PFILEMUIINFO as _FILEMUIINFO ptr
declare function CompareStringW(byval Locale as LCID, byval dwCmpFlags as DWORD, byval lpString1 as PCNZWCH, byval cchCount1 as long, byval lpString2 as PCNZWCH, byval cchCount2 as long) as long
declare function FoldStringW(byval dwMapFlags as DWORD, byval lpSrcStr as LPCWCH, byval cchSrc as long, byval lpDestStr as LPWSTR, byval cchDest as long) as long


declare function GetStringTypeExW(byval Locale as LCID, byval dwInfoType as DWORD, byval lpSrcStr as LPCWCH, byval cchSrc as long, byval lpCharType as LPWORD) as WINBOOL



declare function GetStringTypeW(byval dwInfoType as DWORD, byval lpSrcStr as LPCWCH, byval cchSrc as long, byval lpCharType as LPWORD) as WINBOOL
declare function MultiByteToWideChar(byval CodePage as UINT, byval dwFlags as DWORD, byval lpMultiByteStr as LPCCH, byval cbMultiByte as long, byval lpWideCharStr as LPWSTR, byval cchWideChar as long) as long
declare function WideCharToMultiByte(byval CodePage as UINT, byval dwFlags as DWORD, byval lpWideCharStr as LPCWCH, byval cchWideChar as long, byval lpMultiByteStr as LPSTR, byval cbMultiByte as long, byval lpDefaultChar as LPCCH, byval lpUsedDefaultChar as LPBOOL) as long


declare function IsValidCodePage(byval CodePage as UINT) as WINBOOL
declare function GetACP() as UINT
declare function GetOEMCP() as UINT
declare function CompareStringA(byval Locale as LCID, byval dwCmpFlags as DWORD, byval lpString1 as PCNZCH, byval cchCount1 as long, byval lpString2 as PCNZCH, byval cchCount2 as long) as long
declare function LCMapStringW(byval Locale as LCID, byval dwMapFlags as DWORD, byval lpSrcStr as LPCWSTR, byval cchSrc as long, byval lpDestStr as LPWSTR, byval cchDest as long) as long
declare function LCMapStringA(byval Locale as LCID, byval dwMapFlags as DWORD, byval lpSrcStr as LPCSTR, byval cchSrc as long, byval lpDestStr as LPSTR, byval cchDest as long) as long
declare function GetLocaleInfoW(byval Locale as LCID, byval LCType as LCTYPE, byval lpLCData as LPWSTR, byval cchData as long) as long
declare function GetLocaleInfoA(byval Locale as LCID, byval LCType as LCTYPE, byval lpLCData as LPSTR, byval cchData as long) as long
declare function IsDBCSLeadByte(byval TestChar as UBYTE) as WINBOOL
declare function IsDBCSLeadByteEx(byval CodePage as UINT, byval TestChar as UBYTE) as WINBOOL
declare function GetNumberFormatA(byval Locale as LCID, byval dwFlags as DWORD, byval lpValue as LPCSTR, byval lpFormat as const NUMBERFMTA ptr, byval lpNumberStr as LPSTR, byval cchNumber as long) as long
declare function GetNumberFormatW(byval Locale as LCID, byval dwFlags as DWORD, byval lpValue as LPCWSTR, byval lpFormat as const NUMBERFMTW ptr, byval lpNumberStr as LPWSTR, byval cchNumber as long) as long
declare function GetCurrencyFormatA(byval Locale as LCID, byval dwFlags as DWORD, byval lpValue as LPCSTR, byval lpFormat as const CURRENCYFMTA ptr, byval lpCurrencyStr as LPSTR, byval cchCurrency as long) as long
declare function GetCurrencyFormatW(byval Locale as LCID, byval dwFlags as DWORD, byval lpValue as LPCWSTR, byval lpFormat as const CURRENCYFMTW ptr, byval lpCurrencyStr as LPWSTR, byval cchCurrency as long) as long
declare function EnumCalendarInfoA(byval lpCalInfoEnumProc as CALINFO_ENUMPROCA, byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE) as WINBOOL
declare function EnumCalendarInfoW(byval lpCalInfoEnumProc as CALINFO_ENUMPROCW, byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE) as WINBOOL
declare function EnumCalendarInfoExA(byval lpCalInfoEnumProcEx as CALINFO_ENUMPROCEXA, byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE) as WINBOOL
declare function EnumCalendarInfoExW(byval lpCalInfoEnumProcEx as CALINFO_ENUMPROCEXW, byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE) as WINBOOL
declare function EnumTimeFormatsA(byval lpTimeFmtEnumProc as TIMEFMT_ENUMPROCA, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
declare function EnumTimeFormatsW(byval lpTimeFmtEnumProc as TIMEFMT_ENUMPROCW, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
declare function EnumDateFormatsA(byval lpDateFmtEnumProc as DATEFMT_ENUMPROCA, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
declare function EnumDateFormatsW(byval lpDateFmtEnumProc as DATEFMT_ENUMPROCW, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
declare function EnumDateFormatsExA(byval lpDateFmtEnumProcEx as DATEFMT_ENUMPROCEXA, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
declare function EnumDateFormatsExW(byval lpDateFmtEnumProcEx as DATEFMT_ENUMPROCEXW, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
declare function IsValidLanguageGroup(byval LanguageGroup as LGRPID, byval dwFlags as DWORD) as WINBOOL
declare function GetNLSVersion(byval Function as NLS_FUNCTION, byval Locale as LCID, byval lpVersionInformation as LPNLSVERSIONINFO) as WINBOOL
declare function IsNLSDefinedString(byval Function as NLS_FUNCTION, byval dwFlags as DWORD, byval lpVersionInformation as LPNLSVERSIONINFO, byval lpString as LPCWSTR, byval cchStr as INT_) as WINBOOL
declare function IsValidLocale(byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
declare function SetLocaleInfoA(byval Locale as LCID, byval LCType as LCTYPE, byval lpLCData as LPCSTR) as WINBOOL
declare function SetLocaleInfoW(byval Locale as LCID, byval LCType as LCTYPE, byval lpLCData as LPCWSTR) as WINBOOL
declare function GetCalendarInfoA(byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE, byval lpCalData as LPSTR, byval cchData as long, byval lpValue as LPDWORD) as long
declare function GetCalendarInfoW(byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE, byval lpCalData as LPWSTR, byval cchData as long, byval lpValue as LPDWORD) as long
declare function SetCalendarInfoA(byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE, byval lpCalData as LPCSTR) as WINBOOL
declare function SetCalendarInfoW(byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE, byval lpCalData as LPCWSTR) as WINBOOL





 declare function SetLocaleInfo alias "SetLocaleInfoA"(byval Locale as LCID, byval LCType as LCTYPE, byval lpLCData as LPCSTR) as WINBOOL
 declare function GetCalendarInfo alias "GetCalendarInfoA"(byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE, byval lpCalData as LPSTR, byval cchData as long, byval lpValue as LPDWORD) as long
 declare function SetCalendarInfo alias "SetCalendarInfoA"(byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE, byval lpCalData as LPCSTR) as WINBOOL

 declare function CompareString alias "CompareStringA"(byval Locale as LCID, byval dwCmpFlags as DWORD, byval lpString1 as PCNZCH, byval cchCount1 as long, byval lpString2 as PCNZCH, byval cchCount2 as long) as long
 declare function LCMapString alias "LCMapStringA"(byval Locale as LCID, byval dwMapFlags as DWORD, byval lpSrcStr as LPCSTR, byval cchSrc as long, byval lpDestStr as LPSTR, byval cchDest as long) as long
 declare function GetLocaleInfo alias "GetLocaleInfoA"(byval Locale as LCID, byval LCType as LCTYPE, byval lpLCData as LPSTR, byval cchData as long) as long
 declare function GetNumberFormat alias "GetNumberFormatA"(byval Locale as LCID, byval dwFlags as DWORD, byval lpValue as LPCSTR, byval lpFormat as const NUMBERFMTA ptr, byval lpNumberStr as LPSTR, byval cchNumber as long) as long
 declare function GetCurrencyFormat alias "GetCurrencyFormatA"(byval Locale as LCID, byval dwFlags as DWORD, byval lpValue as LPCSTR, byval lpFormat as const CURRENCYFMTA ptr, byval lpCurrencyStr as LPSTR, byval cchCurrency as long) as long
 declare function EnumCalendarInfo alias "EnumCalendarInfoA"(byval lpCalInfoEnumProc as CALINFO_ENUMPROCA, byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE) as WINBOOL
 declare function EnumCalendarInfoEx alias "EnumCalendarInfoExA"(byval lpCalInfoEnumProcEx as CALINFO_ENUMPROCEXA, byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE) as WINBOOL
 declare function EnumTimeFormats alias "EnumTimeFormatsA"(byval lpTimeFmtEnumProc as TIMEFMT_ENUMPROCA, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
 declare function EnumDateFormats alias "EnumDateFormatsA"(byval lpDateFmtEnumProc as DATEFMT_ENUMPROCA, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
 declare function EnumDateFormatsEx alias "EnumDateFormatsExA"(byval lpDateFmtEnumProcEx as DATEFMT_ENUMPROCEXA, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL

declare function GetGeoInfoA(byval Location as GEOID, byval GeoType as GEOTYPE, byval lpGeoData as LPSTR, byval cchData as long, byval LangId as LANGID) as long
declare function GetGeoInfoW(byval Location as GEOID, byval GeoType as GEOTYPE, byval lpGeoData as LPWSTR, byval cchData as long, byval LangId as LANGID) as long
declare function EnumSystemGeoID(byval GeoClass as GEOCLASS, byval ParentGeoId as GEOID, byval lpGeoEnumProc as GEO_ENUMPROC) as WINBOOL
declare function GetUserGeoID(byval GeoClass as GEOCLASS) as GEOID
declare function GetCPInfo(byval CodePage as UINT, byval lpCPInfo as LPCPINFO) as WINBOOL
declare function GetCPInfoExA(byval CodePage as UINT, byval dwFlags as DWORD, byval lpCPInfoEx as LPCPINFOEXA) as WINBOOL
declare function GetCPInfoExW(byval CodePage as UINT, byval dwFlags as DWORD, byval lpCPInfoEx as LPCPINFOEXW) as WINBOOL


 declare function GetGeoInfo alias "GetGeoInfoA"(byval Location as GEOID, byval GeoType as GEOTYPE, byval lpGeoData as LPSTR, byval cchData as long, byval LangId as LANGID) as long
 declare function GetCPInfoEx alias "GetCPInfoExA"(byval CodePage as UINT, byval dwFlags as DWORD, byval lpCPInfoEx as LPCPINFOEXA) as WINBOOL

declare function SetUserGeoID(byval GeoId as GEOID) as WINBOOL
declare function ConvertDefaultLocale(byval Locale as LCID) as LCID
declare function GetThreadLocale() as LCID
declare function SetThreadLocale(byval Locale as LCID) as WINBOOL
declare function GetSystemDefaultUILanguage() as LANGID
declare function GetUserDefaultUILanguage() as LANGID
declare function GetSystemDefaultLangID() as LANGID
declare function GetUserDefaultLangID() as LANGID
declare function GetSystemDefaultLCID() as LCID
declare function GetUserDefaultLCID() as LCID
declare function SetThreadUILanguage(byval LangId as LANGID) as LANGID
declare function GetStringTypeExA(byval Locale as LCID, byval dwInfoType as DWORD, byval lpSrcStr as LPCSTR, byval cchSrc as long, byval lpCharType as LPWORD) as WINBOOL
declare function GetStringTypeA(byval Locale as LCID, byval dwInfoType as DWORD, byval lpSrcStr as LPCSTR, byval cchSrc as long, byval lpCharType as LPWORD) as WINBOOL
declare function FoldStringA(byval dwMapFlags as DWORD, byval lpSrcStr as LPCSTR, byval cchSrc as long, byval lpDestStr as LPSTR, byval cchDest as long) as long
declare function EnumSystemLocalesA(byval lpLocaleEnumProc as LOCALE_ENUMPROCA, byval dwFlags as DWORD) as WINBOOL
declare function EnumSystemLocalesW(byval lpLocaleEnumProc as LOCALE_ENUMPROCW, byval dwFlags as DWORD) as WINBOOL
declare function EnumSystemLanguageGroupsA(byval lpLanguageGroupEnumProc as LANGUAGEGROUP_ENUMPROCA, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL
declare function EnumSystemLanguageGroupsW(byval lpLanguageGroupEnumProc as LANGUAGEGROUP_ENUMPROCW, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL
declare function EnumLanguageGroupLocalesA(byval lpLangGroupLocaleEnumProc as LANGGROUPLOCALE_ENUMPROCA, byval LanguageGroup as LGRPID, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL
declare function EnumLanguageGroupLocalesW(byval lpLangGroupLocaleEnumProc as LANGGROUPLOCALE_ENUMPROCW, byval LanguageGroup as LGRPID, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL
declare function EnumUILanguagesA(byval lpUILanguageEnumProc as UILANGUAGE_ENUMPROCA, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL
declare function EnumUILanguagesW(byval lpUILanguageEnumProc as UILANGUAGE_ENUMPROCW, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL


 declare function FoldString alias "FoldStringA"(byval dwMapFlags as DWORD, byval lpSrcStr as LPCSTR, byval cchSrc as long, byval lpDestStr as LPSTR, byval cchDest as long) as long
 declare function GetStringTypeEx alias "GetStringTypeExA"(byval Locale as LCID, byval dwInfoType as DWORD, byval lpSrcStr as LPCSTR, byval cchSrc as long, byval lpCharType as LPWORD) as WINBOOL
 declare function EnumSystemLocales alias "EnumSystemLocalesA"(byval lpLocaleEnumProc as LOCALE_ENUMPROCA, byval dwFlags as DWORD) as WINBOOL
 declare function EnumSystemLanguageGroups alias "EnumSystemLanguageGroupsA"(byval lpLanguageGroupEnumProc as LANGUAGEGROUP_ENUMPROCA, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL
 declare function EnumLanguageGroupLocales alias "EnumLanguageGroupLocalesA"(byval lpLangGroupLocaleEnumProc as LANGGROUPLOCALE_ENUMPROCA, byval LanguageGroup as LGRPID, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL
 declare function EnumUILanguages alias "EnumUILanguagesA"(byval lpUILanguageEnumProc as UILANGUAGE_ENUMPROCA, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL

declare function EnumSystemCodePagesA(byval lpCodePageEnumProc as CODEPAGE_ENUMPROCA, byval dwFlags as DWORD) as WINBOOL
declare function EnumSystemCodePagesW(byval lpCodePageEnumProc as CODEPAGE_ENUMPROCW, byval dwFlags as DWORD) as WINBOOL




 declare function EnumSystemCodePages alias "EnumSystemCodePagesA"(byval lpCodePageEnumProc as CODEPAGE_ENUMPROCA, byval dwFlags as DWORD) as WINBOOL

end extern




extern "Windows"


type _COORD
 X as SHORT
 Y as SHORT
end type

type COORD as _COORD
type PCOORD as _COORD ptr

type _SMALL_RECT
 Left as SHORT
 Top as SHORT
 Right as SHORT
 Bottom as SHORT
end type

type SMALL_RECT as _SMALL_RECT
type PSMALL_RECT as _SMALL_RECT ptr

union _KEY_EVENT_RECORD_uChar
 UnicodeChar as WCHAR
 AsciiChar as CHAR
end union

type _KEY_EVENT_RECORD
 bKeyDown as WINBOOL
 wRepeatCount as WORD
 wVirtualKeyCode as WORD
 wVirtualScanCode as WORD
 uChar as _KEY_EVENT_RECORD_uChar
 dwControlKeyState as DWORD
end type

type KEY_EVENT_RECORD as _KEY_EVENT_RECORD
type PKEY_EVENT_RECORD as _KEY_EVENT_RECORD ptr
const RIGHT_ALT_PRESSED = &h1
const LEFT_ALT_PRESSED = &h2
const RIGHT_CTRL_PRESSED = &h4
const LEFT_CTRL_PRESSED = &h8
const SHIFT_PRESSED = &h10
const NUMLOCK_ON = &h20
const SCROLLLOCK_ON = &h40
const CAPSLOCK_ON = &h80
const ENHANCED_KEY = &h100
const NLS_DBCSCHAR = &h10000
const NLS_ALPHANUMERIC = &h00
const NLS_KATAKANA = &h20000
const NLS_HIRAGANA = &h40000
const NLS_ROMAN = &h400000
const NLS_IME_CONVERSION = &h800000
const NLS_IME_DISABLE = &h20000000

type _MOUSE_EVENT_RECORD
 dwMousePosition as COORD
 dwButtonState as DWORD
 dwControlKeyState as DWORD
 dwEventFlags as DWORD
end type

type MOUSE_EVENT_RECORD as _MOUSE_EVENT_RECORD
type PMOUSE_EVENT_RECORD as _MOUSE_EVENT_RECORD ptr
const FROM_LEFT_1ST_BUTTON_PRESSED = &h1
const RIGHTMOST_BUTTON_PRESSED = &h2
const FROM_LEFT_2ND_BUTTON_PRESSED = &h4
const FROM_LEFT_3RD_BUTTON_PRESSED = &h8
const FROM_LEFT_4TH_BUTTON_PRESSED = &h10
const MOUSE_MOVED = &h1
const DOUBLE_CLICK = &h2
const MOUSE_WHEELED = &h4


type _WINDOW_BUFFER_SIZE_RECORD
 dwSize as COORD
end type

type WINDOW_BUFFER_SIZE_RECORD as _WINDOW_BUFFER_SIZE_RECORD
type PWINDOW_BUFFER_SIZE_RECORD as _WINDOW_BUFFER_SIZE_RECORD ptr

type _MENU_EVENT_RECORD
 dwCommandId as UINT
end type

type MENU_EVENT_RECORD as _MENU_EVENT_RECORD
type PMENU_EVENT_RECORD as _MENU_EVENT_RECORD ptr

type _FOCUS_EVENT_RECORD
 bSetFocus as WINBOOL
end type

type FOCUS_EVENT_RECORD as _FOCUS_EVENT_RECORD
type PFOCUS_EVENT_RECORD as _FOCUS_EVENT_RECORD ptr

union _INPUT_RECORD_Event
 KeyEvent as KEY_EVENT_RECORD
 MouseEvent as MOUSE_EVENT_RECORD
 WindowBufferSizeEvent as WINDOW_BUFFER_SIZE_RECORD
 MenuEvent as MENU_EVENT_RECORD
 FocusEvent as FOCUS_EVENT_RECORD
end union

type _INPUT_RECORD
 EventType as WORD
 Event as _INPUT_RECORD_Event
end type

type INPUT_RECORD as _INPUT_RECORD
type PINPUT_RECORD as _INPUT_RECORD ptr
const KEY_EVENT = &h1
const MOUSE_EVENT_ = &h2
const WINDOW_BUFFER_SIZE_EVENT = &h4
const MENU_EVENT = &h8
const FOCUS_EVENT = &h10

union _CHAR_INFO_Char
 UnicodeChar as WCHAR
 AsciiChar as CHAR
end union

type _CHAR_INFO
 Char as _CHAR_INFO_Char
 Attributes as WORD
end type

type CHAR_INFO as _CHAR_INFO
type PCHAR_INFO as _CHAR_INFO ptr
const FOREGROUND_BLUE = &h1
const FOREGROUND_GREEN = &h2
const FOREGROUND_RED = &h4
const FOREGROUND_INTENSITY = &h8
const BACKGROUND_BLUE = &h10
const BACKGROUND_GREEN = &h20
const BACKGROUND_RED = &h40
const BACKGROUND_INTENSITY = &h80
const COMMON_LVB_LEADING_BYTE = &h100
const COMMON_LVB_TRAILING_BYTE = &h200
const COMMON_LVB_GRID_HORIZONTAL = &h400
const COMMON_LVB_GRID_LVERTICAL = &h800
const COMMON_LVB_GRID_RVERTICAL = &h1000
const COMMON_LVB_REVERSE_VIDEO = &h4000
const COMMON_LVB_UNDERSCORE = &h8000
const COMMON_LVB_SBCSDBCS = &h300

type _CONSOLE_SCREEN_BUFFER_INFO
 dwSize as COORD
 dwCursorPosition as COORD
 wAttributes as WORD
 srWindow as SMALL_RECT
 dwMaximumWindowSize as COORD
end type

type CONSOLE_SCREEN_BUFFER_INFO as _CONSOLE_SCREEN_BUFFER_INFO
type PCONSOLE_SCREEN_BUFFER_INFO as _CONSOLE_SCREEN_BUFFER_INFO ptr

type _CONSOLE_CURSOR_INFO
 dwSize as DWORD
 bVisible as WINBOOL
end type

type CONSOLE_CURSOR_INFO as _CONSOLE_CURSOR_INFO
type PCONSOLE_CURSOR_INFO as _CONSOLE_CURSOR_INFO ptr

type _CONSOLE_FONT_INFO
 nFont as DWORD
 dwFontSize as COORD
end type

type CONSOLE_FONT_INFO as _CONSOLE_FONT_INFO
type PCONSOLE_FONT_INFO as _CONSOLE_FONT_INFO ptr

type _CONSOLE_SELECTION_INFO
 dwFlags as DWORD
 dwSelectionAnchor as COORD
 srSelection as SMALL_RECT
end type

type CONSOLE_SELECTION_INFO as _CONSOLE_SELECTION_INFO
type PCONSOLE_SELECTION_INFO as _CONSOLE_SELECTION_INFO ptr
const CONSOLE_NO_SELECTION = &h00
const CONSOLE_SELECTION_IN_PROGRESS = &h1
const CONSOLE_SELECTION_NOT_EMPTY = &h2
const CONSOLE_MOUSE_SELECTION = &h4
const CONSOLE_MOUSE_DOWN = &h8
type PHANDLER_ROUTINE as function(byval CtrlType as DWORD) as WINBOOL
const CTRL_C_EVENT = 0
const CTRL_BREAK_EVENT = 1
const CTRL_CLOSE_EVENT = 2
const CTRL_LOGOFF_EVENT = 5
const CTRL_SHUTDOWN_EVENT = 6
const ENABLE_PROCESSED_INPUT = &h1
const ENABLE_LINE_INPUT = &h2
const ENABLE_ECHO_INPUT = &h4
const ENABLE_WINDOW_INPUT = &h8
const ENABLE_MOUSE_INPUT = &h10
const ENABLE_INSERT_MODE = &h20
const ENABLE_QUICK_EDIT_MODE = &h40
const ENABLE_EXTENDED_FLAGS = &h80
const ENABLE_AUTO_POSITION = &h100
const ENABLE_PROCESSED_OUTPUT = &h1
const ENABLE_WRAP_AT_EOL_OUTPUT = &h2
declare function PeekConsoleInputA(byval hConsoleInput as HANDLE, byval lpBuffer as PINPUT_RECORD, byval nLength as DWORD, byval lpNumberOfEventsRead as LPDWORD) as WINBOOL

 declare function PeekConsoleInput alias "PeekConsoleInputA"(byval hConsoleInput as HANDLE, byval lpBuffer as PINPUT_RECORD, byval nLength as DWORD, byval lpNumberOfEventsRead as LPDWORD) as WINBOOL

declare function PeekConsoleInputW(byval hConsoleInput as HANDLE, byval lpBuffer as PINPUT_RECORD, byval nLength as DWORD, byval lpNumberOfEventsRead as LPDWORD) as WINBOOL


declare function ReadConsoleInputA(byval hConsoleInput as HANDLE, byval lpBuffer as PINPUT_RECORD, byval nLength as DWORD, byval lpNumberOfEventsRead as LPDWORD) as WINBOOL

 declare function ReadConsoleInput alias "ReadConsoleInputA"(byval hConsoleInput as HANDLE, byval lpBuffer as PINPUT_RECORD, byval nLength as DWORD, byval lpNumberOfEventsRead as LPDWORD) as WINBOOL

declare function ReadConsoleInputW(byval hConsoleInput as HANDLE, byval lpBuffer as PINPUT_RECORD, byval nLength as DWORD, byval lpNumberOfEventsRead as LPDWORD) as WINBOOL


declare function WriteConsoleInputA(byval hConsoleInput as HANDLE, byval lpBuffer as const INPUT_RECORD ptr, byval nLength as DWORD, byval lpNumberOfEventsWritten as LPDWORD) as WINBOOL

 declare function WriteConsoleInput alias "WriteConsoleInputA"(byval hConsoleInput as HANDLE, byval lpBuffer as const INPUT_RECORD ptr, byval nLength as DWORD, byval lpNumberOfEventsWritten as LPDWORD) as WINBOOL

declare function WriteConsoleInputW(byval hConsoleInput as HANDLE, byval lpBuffer as const INPUT_RECORD ptr, byval nLength as DWORD, byval lpNumberOfEventsWritten as LPDWORD) as WINBOOL


declare function ReadConsoleOutputA(byval hConsoleOutput as HANDLE, byval lpBuffer as PCHAR_INFO, byval dwBufferSize as COORD, byval dwBufferCoord as COORD, byval lpReadRegion as PSMALL_RECT) as WINBOOL

 declare function ReadConsoleOutput alias "ReadConsoleOutputA"(byval hConsoleOutput as HANDLE, byval lpBuffer as PCHAR_INFO, byval dwBufferSize as COORD, byval dwBufferCoord as COORD, byval lpReadRegion as PSMALL_RECT) as WINBOOL

declare function ReadConsoleOutputW(byval hConsoleOutput as HANDLE, byval lpBuffer as PCHAR_INFO, byval dwBufferSize as COORD, byval dwBufferCoord as COORD, byval lpReadRegion as PSMALL_RECT) as WINBOOL


declare function WriteConsoleOutputA(byval hConsoleOutput as HANDLE, byval lpBuffer as const CHAR_INFO ptr, byval dwBufferSize as COORD, byval dwBufferCoord as COORD, byval lpWriteRegion as PSMALL_RECT) as WINBOOL

 declare function WriteConsoleOutput alias "WriteConsoleOutputA"(byval hConsoleOutput as HANDLE, byval lpBuffer as const CHAR_INFO ptr, byval dwBufferSize as COORD, byval dwBufferCoord as COORD, byval lpWriteRegion as PSMALL_RECT) as WINBOOL

declare function WriteConsoleOutputW(byval hConsoleOutput as HANDLE, byval lpBuffer as const CHAR_INFO ptr, byval dwBufferSize as COORD, byval dwBufferCoord as COORD, byval lpWriteRegion as PSMALL_RECT) as WINBOOL


declare function ReadConsoleOutputCharacterA(byval hConsoleOutput as HANDLE, byval lpCharacter as LPSTR, byval nLength as DWORD, byval dwReadCoord as COORD, byval lpNumberOfCharsRead as LPDWORD) as WINBOOL

 declare function ReadConsoleOutputCharacter alias "ReadConsoleOutputCharacterA"(byval hConsoleOutput as HANDLE, byval lpCharacter as LPSTR, byval nLength as DWORD, byval dwReadCoord as COORD, byval lpNumberOfCharsRead as LPDWORD) as WINBOOL

declare function ReadConsoleOutputCharacterW(byval hConsoleOutput as HANDLE, byval lpCharacter as LPWSTR, byval nLength as DWORD, byval dwReadCoord as COORD, byval lpNumberOfCharsRead as LPDWORD) as WINBOOL


declare function ReadConsoleOutputAttribute(byval hConsoleOutput as HANDLE, byval lpAttribute as LPWORD, byval nLength as DWORD, byval dwReadCoord as COORD, byval lpNumberOfAttrsRead as LPDWORD) as WINBOOL
declare function WriteConsoleOutputCharacterA(byval hConsoleOutput as HANDLE, byval lpCharacter as LPCSTR, byval nLength as DWORD, byval dwWriteCoord as COORD, byval lpNumberOfCharsWritten as LPDWORD) as WINBOOL

 declare function WriteConsoleOutputCharacter alias "WriteConsoleOutputCharacterA"(byval hConsoleOutput as HANDLE, byval lpCharacter as LPCSTR, byval nLength as DWORD, byval dwWriteCoord as COORD, byval lpNumberOfCharsWritten as LPDWORD) as WINBOOL

declare function WriteConsoleOutputCharacterW(byval hConsoleOutput as HANDLE, byval lpCharacter as LPCWSTR, byval nLength as DWORD, byval dwWriteCoord as COORD, byval lpNumberOfCharsWritten as LPDWORD) as WINBOOL


declare function WriteConsoleOutputAttribute(byval hConsoleOutput as HANDLE, byval lpAttribute as const WORD ptr, byval nLength as DWORD, byval dwWriteCoord as COORD, byval lpNumberOfAttrsWritten as LPDWORD) as WINBOOL
declare function FillConsoleOutputCharacterA(byval hConsoleOutput as HANDLE, byval cCharacter as CHAR, byval nLength as DWORD, byval dwWriteCoord as COORD, byval lpNumberOfCharsWritten as LPDWORD) as WINBOOL

 declare function FillConsoleOutputCharacter alias "FillConsoleOutputCharacterA"(byval hConsoleOutput as HANDLE, byval cCharacter as CHAR, byval nLength as DWORD, byval dwWriteCoord as COORD, byval lpNumberOfCharsWritten as LPDWORD) as WINBOOL

declare function FillConsoleOutputCharacterW(byval hConsoleOutput as HANDLE, byval cCharacter as WCHAR, byval nLength as DWORD, byval dwWriteCoord as COORD, byval lpNumberOfCharsWritten as LPDWORD) as WINBOOL


declare function FillConsoleOutputAttribute(byval hConsoleOutput as HANDLE, byval wAttribute as WORD, byval nLength as DWORD, byval dwWriteCoord as COORD, byval lpNumberOfAttrsWritten as LPDWORD) as WINBOOL
declare function GetConsoleMode(byval hConsoleHandle as HANDLE, byval lpMode as LPDWORD) as WINBOOL
declare function GetNumberOfConsoleInputEvents(byval hConsoleInput as HANDLE, byval lpNumberOfEvents as LPDWORD) as WINBOOL
declare function GetConsoleScreenBufferInfo(byval hConsoleOutput as HANDLE, byval lpConsoleScreenBufferInfo as PCONSOLE_SCREEN_BUFFER_INFO) as WINBOOL
declare function GetLargestConsoleWindowSize(byval hConsoleOutput as HANDLE) as COORD
declare function GetConsoleCursorInfo(byval hConsoleOutput as HANDLE, byval lpConsoleCursorInfo as PCONSOLE_CURSOR_INFO) as WINBOOL
declare function GetCurrentConsoleFont(byval hConsoleOutput as HANDLE, byval bMaximumWindow as WINBOOL, byval lpConsoleCurrentFont as PCONSOLE_FONT_INFO) as WINBOOL
declare function GetConsoleFontSize(byval hConsoleOutput as HANDLE, byval nFont as DWORD) as COORD
declare function GetConsoleSelectionInfo(byval lpConsoleSelectionInfo as PCONSOLE_SELECTION_INFO) as WINBOOL
declare function GetNumberOfConsoleMouseButtons(byval lpNumberOfMouseButtons as LPDWORD) as WINBOOL
declare function SetConsoleMode(byval hConsoleHandle as HANDLE, byval dwMode as DWORD) as WINBOOL
declare function SetConsoleActiveScreenBuffer(byval hConsoleOutput as HANDLE) as WINBOOL
declare function FlushConsoleInputBuffer(byval hConsoleInput as HANDLE) as WINBOOL
declare function SetConsoleScreenBufferSize(byval hConsoleOutput as HANDLE, byval dwSize as COORD) as WINBOOL
declare function SetConsoleCursorPosition(byval hConsoleOutput as HANDLE, byval dwCursorPosition as COORD) as WINBOOL
declare function SetConsoleCursorInfo(byval hConsoleOutput as HANDLE, byval lpConsoleCursorInfo as const CONSOLE_CURSOR_INFO ptr) as WINBOOL
declare function ScrollConsoleScreenBufferA(byval hConsoleOutput as HANDLE, byval lpScrollRectangle as const SMALL_RECT ptr, byval lpClipRectangle as const SMALL_RECT ptr, byval dwDestinationOrigin as COORD, byval lpFill as const CHAR_INFO ptr) as WINBOOL

 declare function ScrollConsoleScreenBuffer alias "ScrollConsoleScreenBufferA"(byval hConsoleOutput as HANDLE, byval lpScrollRectangle as const SMALL_RECT ptr, byval lpClipRectangle as const SMALL_RECT ptr, byval dwDestinationOrigin as COORD, byval lpFill as const CHAR_INFO ptr) as WINBOOL

declare function ScrollConsoleScreenBufferW(byval hConsoleOutput as HANDLE, byval lpScrollRectangle as const SMALL_RECT ptr, byval lpClipRectangle as const SMALL_RECT ptr, byval dwDestinationOrigin as COORD, byval lpFill as const CHAR_INFO ptr) as WINBOOL


declare function SetConsoleWindowInfo(byval hConsoleOutput as HANDLE, byval bAbsolute as WINBOOL, byval lpConsoleWindow as const SMALL_RECT ptr) as WINBOOL
declare function SetConsoleTextAttribute(byval hConsoleOutput as HANDLE, byval wAttributes as WORD) as WINBOOL
declare function SetConsoleCtrlHandler(byval HandlerRoutine as PHANDLER_ROUTINE, byval Add as WINBOOL) as WINBOOL
declare function GenerateConsoleCtrlEvent(byval dwCtrlEvent as DWORD, byval dwProcessGroupId as DWORD) as WINBOOL
declare function AllocConsole() as WINBOOL
declare function FreeConsole() as WINBOOL
declare function AttachConsole(byval dwProcessId as DWORD) as WINBOOL
const ATTACH_PARENT_PROCESS = cast(DWORD, -1)
declare function GetConsoleTitleA(byval lpConsoleTitle as LPSTR, byval nSize as DWORD) as DWORD

 declare function GetConsoleTitle alias "GetConsoleTitleA"(byval lpConsoleTitle as LPSTR, byval nSize as DWORD) as DWORD

declare function GetConsoleTitleW(byval lpConsoleTitle as LPWSTR, byval nSize as DWORD) as DWORD


declare function SetConsoleTitleA(byval lpConsoleTitle as LPCSTR) as WINBOOL

 declare function SetConsoleTitle alias "SetConsoleTitleA"(byval lpConsoleTitle as LPCSTR) as WINBOOL

declare function SetConsoleTitleW(byval lpConsoleTitle as LPCWSTR) as WINBOOL


declare function ReadConsoleA(byval hConsoleInput as HANDLE, byval lpBuffer as LPVOID, byval nNumberOfCharsToRead as DWORD, byval lpNumberOfCharsRead as LPDWORD, byval lpReserved as LPVOID) as WINBOOL

 declare function ReadConsole alias "ReadConsoleA"(byval hConsoleInput as HANDLE, byval lpBuffer as LPVOID, byval nNumberOfCharsToRead as DWORD, byval lpNumberOfCharsRead as LPDWORD, byval lpReserved as LPVOID) as WINBOOL

declare function ReadConsoleW(byval hConsoleInput as HANDLE, byval lpBuffer as LPVOID, byval nNumberOfCharsToRead as DWORD, byval lpNumberOfCharsRead as LPDWORD, byval lpReserved as LPVOID) as WINBOOL


declare function WriteConsoleA(byval hConsoleOutput as HANDLE, byval lpBuffer as const any ptr, byval nNumberOfCharsToWrite as DWORD, byval lpNumberOfCharsWritten as LPDWORD, byval lpReserved as LPVOID) as WINBOOL

 declare function WriteConsole alias "WriteConsoleA"(byval hConsoleOutput as HANDLE, byval lpBuffer as const any ptr, byval nNumberOfCharsToWrite as DWORD, byval lpNumberOfCharsWritten as LPDWORD, byval lpReserved as LPVOID) as WINBOOL

declare function WriteConsoleW(byval hConsoleOutput as HANDLE, byval lpBuffer as const any ptr, byval nNumberOfCharsToWrite as DWORD, byval lpNumberOfCharsWritten as LPDWORD, byval lpReserved as LPVOID) as WINBOOL


const CONSOLE_TEXTMODE_BUFFER = 1
declare function CreateConsoleScreenBuffer(byval dwDesiredAccess as DWORD, byval dwShareMode as DWORD, byval lpSecurityAttributes as const SECURITY_ATTRIBUTES ptr, byval dwFlags as DWORD, byval lpScreenBufferData as LPVOID) as HANDLE
declare function GetConsoleCP() as UINT
declare function SetConsoleCP(byval wCodePageID as UINT) as WINBOOL
declare function GetConsoleOutputCP() as UINT
declare function SetConsoleOutputCP(byval wCodePageID as UINT) as WINBOOL
const CONSOLE_FULLSCREEN = 1
const CONSOLE_FULLSCREEN_HARDWARE = 2
declare function GetConsoleDisplayMode(byval lpModeFlags as LPDWORD) as WINBOOL
const CONSOLE_FULLSCREEN_MODE = 1
const CONSOLE_WINDOWED_MODE = 2
declare function SetConsoleDisplayMode(byval hConsoleOutput as HANDLE, byval dwFlags as DWORD, byval lpNewScreenBufferDimensions as PCOORD) as WINBOOL
declare function GetConsoleWindow() as HWND
declare function GetConsoleProcessList(byval lpdwProcessList as LPDWORD, byval dwProcessCount as DWORD) as DWORD
declare function AddConsoleAliasA(byval Source as LPSTR, byval Target as LPSTR, byval ExeName as LPSTR) as WINBOOL

 declare function AddConsoleAlias alias "AddConsoleAliasA"(byval Source as LPSTR, byval Target as LPSTR, byval ExeName as LPSTR) as WINBOOL

declare function AddConsoleAliasW(byval Source as LPWSTR, byval Target as LPWSTR, byval ExeName as LPWSTR) as WINBOOL


declare function GetConsoleAliasA(byval Source as LPSTR, byval TargetBuffer as LPSTR, byval TargetBufferLength as DWORD, byval ExeName as LPSTR) as DWORD

 declare function GetConsoleAlias alias "GetConsoleAliasA"(byval Source as LPSTR, byval TargetBuffer as LPSTR, byval TargetBufferLength as DWORD, byval ExeName as LPSTR) as DWORD

declare function GetConsoleAliasW(byval Source as LPWSTR, byval TargetBuffer as LPWSTR, byval TargetBufferLength as DWORD, byval ExeName as LPWSTR) as DWORD


declare function GetConsoleAliasesLengthA(byval ExeName as LPSTR) as DWORD

 declare function GetConsoleAliasesLength alias "GetConsoleAliasesLengthA"(byval ExeName as LPSTR) as DWORD

declare function GetConsoleAliasesLengthW(byval ExeName as LPWSTR) as DWORD


declare function GetConsoleAliasExesLengthA() as DWORD

 declare function GetConsoleAliasExesLength alias "GetConsoleAliasExesLengthA"() as DWORD

declare function GetConsoleAliasExesLengthW() as DWORD


declare function GetConsoleAliasesA(byval AliasBuffer as LPSTR, byval AliasBufferLength as DWORD, byval ExeName as LPSTR) as DWORD

 declare function GetConsoleAliases alias "GetConsoleAliasesA"(byval AliasBuffer as LPSTR, byval AliasBufferLength as DWORD, byval ExeName as LPSTR) as DWORD

declare function GetConsoleAliasesW(byval AliasBuffer as LPWSTR, byval AliasBufferLength as DWORD, byval ExeName as LPWSTR) as DWORD


declare function GetConsoleAliasExesA(byval ExeNameBuffer as LPSTR, byval ExeNameBufferLength as DWORD) as DWORD

 declare function GetConsoleAliasExes alias "GetConsoleAliasExesA"(byval ExeNameBuffer as LPSTR, byval ExeNameBufferLength as DWORD) as DWORD

declare function GetConsoleAliasExesW(byval ExeNameBuffer as LPWSTR, byval ExeNameBufferLength as DWORD) as DWORD


type _CONSOLE_FONT_INFOEX
 cbSize as ULONG
 nFont as DWORD
 dwFontSize as COORD
 FontFamily as UINT
 FontWeight as UINT
 FaceName as wstring * 32
end type

type CONSOLE_FONT_INFOEX as _CONSOLE_FONT_INFOEX
type PCONSOLE_FONT_INFOEX as _CONSOLE_FONT_INFOEX ptr

type _CONSOLE_HISTORY_INFO
 cbSize as UINT
 HistoryBufferSize as UINT
 NumberOfHistoryBuffers as UINT
 dwFlags as DWORD
end type

type CONSOLE_HISTORY_INFO as _CONSOLE_HISTORY_INFO
type PCONSOLE_HISTORY_INFO as _CONSOLE_HISTORY_INFO ptr

type _CONSOLE_READCONSOLE_CONTROL
 nLength as ULONG
 nInitialChars as ULONG
 dwCtrlWakeupMask as ULONG
 dwControlKeyState as ULONG
end type

type CONSOLE_READCONSOLE_CONTROL as _CONSOLE_READCONSOLE_CONTROL
type PCONSOLE_READCONSOLE_CONTROL as _CONSOLE_READCONSOLE_CONTROL ptr

type _CONSOLE_SCREEN_BUFFER_INFOEX
 cbSize as ULONG
 dwSize as COORD
 dwCursorPosition as COORD
 wAttributes as WORD
 srWindow as SMALL_RECT
 dwMaximumWindowSize as COORD
 wPopupAttributes as WORD
 bFullscreenSupported as WINBOOL
 ColorTable(0 to 15) as COLORREF
end type

type CONSOLE_SCREEN_BUFFER_INFOEX as _CONSOLE_SCREEN_BUFFER_INFOEX
type PCONSOLE_SCREEN_BUFFER_INFOEX as _CONSOLE_SCREEN_BUFFER_INFOEX ptr
declare function GetConsoleHistoryInfo(byval lpConsoleHistoryInfo as PCONSOLE_HISTORY_INFO) as WINBOOL





declare function GetConsoleScreenBufferInfoEx(byval hConsoleOutput as HANDLE, byval lpConsoleScreenBufferInfoEx as PCONSOLE_SCREEN_BUFFER_INFOEX) as WINBOOL
declare function GetCurrentConsoleFontEx(byval hConsoleOutput as HANDLE, byval bMaximumWindow as WINBOOL, byval lpConsoleCurrentFontEx as PCONSOLE_FONT_INFOEX) as WINBOOL
declare function SetConsoleHistoryInfo(byval lpConsoleHistoryInfo as PCONSOLE_HISTORY_INFO) as WINBOOL
declare function SetConsoleScreenBufferInfoEx(byval hConsoleOutput as HANDLE, byval lpConsoleScreenBufferInfoEx as PCONSOLE_SCREEN_BUFFER_INFOEX) as WINBOOL
declare function SetCurrentConsoleFontEx(byval hConsoleOutput as HANDLE, byval bMaximumWindow as WINBOOL, byval lpConsoleCurrentFontEx as PCONSOLE_FONT_INFOEX) as WINBOOL

end extern


#inclib "version"


extern "Windows"

const VS_VERSION_INFO = 1
const VS_USER_DEFINED = 100
const VS_FFI_SIGNATURE = &hFEEF04BD
const VS_FFI_STRUCVERSION = &h00010000
const VS_FFI_FILEFLAGSMASK = &h0000003F
const VS_FF_DEBUG = &h00000001
const VS_FF_PRERELEASE = &h00000002
const VS_FF_PATCHED = &h00000004
const VS_FF_PRIVATEBUILD = &h00000008
const VS_FF_INFOINFERRED = &h00000010
const VS_FF_SPECIALBUILD = &h00000020
const VOS_UNKNOWN = &h000000000
const VOS_DOS = &h00010000
const VOS_OS216 = &h00020000
const VOS_OS232 = &h00030000
const VOS_NT = &h00040000
const VOS_WINCE = &h00050000
const VOS__BASE = &h000000000
const VOS__WINDOWS16 = &h00000001
const VOS__PM16 = &h00000002
const VOS__PM32 = &h00000003
const VOS__WINDOWS32 = &h00000004
const VOS_DOS_WINDOWS16 = &h00010001
const VOS_DOS_WINDOWS32 = &h00010004
const VOS_OS216_PM16 = &h00020002
const VOS_OS232_PM32 = &h00030003
const VOS_NT_WINDOWS32 = &h00040004
const VFT_UNKNOWN = &h000000000
const VFT_APP = &h00000001
const VFT_DLL = &h00000002
const VFT_DRV = &h00000003
const VFT_FONT = &h00000004
const VFT_VXD = &h00000005
const VFT_STATIC_LIB = &h00000007
const VFT2_UNKNOWN = &h000000000
const VFT2_DRV_PRINTER = &h00000001
const VFT2_DRV_KEYBOARD = &h00000002
const VFT2_DRV_LANGUAGE = &h00000003
const VFT2_DRV_DISPLAY = &h00000004
const VFT2_DRV_MOUSE = &h00000005
const VFT2_DRV_NETWORK = &h00000006
const VFT2_DRV_SYSTEM = &h00000007
const VFT2_DRV_INSTALLABLE = &h00000008
const VFT2_DRV_SOUND = &h00000009
const VFT2_DRV_COMM = &h0000000A
const VFT2_DRV_INPUTMETHOD = &h0000000B
const VFT2_DRV_VERSIONED_PRINTER = &h0000000C
const VFT2_FONT_RASTER = &h00000001
const VFT2_FONT_VECTOR = &h00000002
const VFT2_FONT_TRUETYPE = &h00000003
const VFFF_ISSHAREDFILE = &h0001
const VFF_CURNEDEST = &h0001
const VFF_FILEINUSE = &h0002
const VFF_BUFFTOOSMALL = &h0004
const VIFF_FORCEINSTALL = &h0001
const VIFF_DONTDELETEOLD = &h0002
const VIF_TEMPFILE = &h00000001
const VIF_MISMATCH = &h00000002
const VIF_SRCOLD = &h00000004
const VIF_DIFFLANG = &h00000008
const VIF_DIFFCODEPG = &h00000010
const VIF_DIFFTYPE = &h00000020
const VIF_WRITEPROT = &h00000040
const VIF_FILEINUSE = &h00000080
const VIF_OUTOFSPACE = &h00000100
const VIF_ACCESSVIOLATION = &h00000200
const VIF_SHARINGVIOLATION = &h00000400
const VIF_CANNOTCREATE = &h00000800
const VIF_CANNOTDELETE = &h00001000
const VIF_CANNOTRENAME = &h00002000
const VIF_CANNOTDELETECUR = &h00004000
const VIF_OUTOFMEMORY = &h00008000
const VIF_CANNOTREADSRC = &h00010000
const VIF_CANNOTREADDST = &h00020000
const VIF_BUFFTOOSMALL = &h00040000
const VIF_CANNOTLOADLZ32 = &h00080000
const VIF_CANNOTLOADCABINET = &h00100000

type tagVS_FIXEDFILEINFO
 dwSignature as DWORD
 dwStrucVersion as DWORD
 dwFileVersionMS as DWORD
 dwFileVersionLS as DWORD
 dwProductVersionMS as DWORD
 dwProductVersionLS as DWORD
 dwFileFlagsMask as DWORD
 dwFileFlags as DWORD
 dwFileOS as DWORD
 dwFileType as DWORD
 dwFileSubtype as DWORD
 dwFileDateMS as DWORD
 dwFileDateLS as DWORD
end type

type VS_FIXEDFILEINFO as tagVS_FIXEDFILEINFO
declare function VerFindFileA(byval uFlags as DWORD, byval szFileName as LPSTR, byval szWinDir as LPSTR, byval szAppDir as LPSTR, byval szCurDir as LPSTR, byval lpuCurDirLen as PUINT, byval szDestDir as LPSTR, byval lpuDestDirLen as PUINT) as DWORD

 declare function VerFindFile alias "VerFindFileA"(byval uFlags as DWORD, byval szFileName as LPSTR, byval szWinDir as LPSTR, byval szAppDir as LPSTR, byval szCurDir as LPSTR, byval lpuCurDirLen as PUINT, byval szDestDir as LPSTR, byval lpuDestDirLen as PUINT) as DWORD

declare function VerFindFileW(byval uFlags as DWORD, byval szFileName as LPWSTR, byval szWinDir as LPWSTR, byval szAppDir as LPWSTR, byval szCurDir as LPWSTR, byval lpuCurDirLen as PUINT, byval szDestDir as LPWSTR, byval lpuDestDirLen as PUINT) as DWORD


declare function VerInstallFileA(byval uFlags as DWORD, byval szSrcFileName as LPSTR, byval szDestFileName as LPSTR, byval szSrcDir as LPSTR, byval szDestDir as LPSTR, byval szCurDir as LPSTR, byval szTmpFile as LPSTR, byval lpuTmpFileLen as PUINT) as DWORD

 declare function VerInstallFile alias "VerInstallFileA"(byval uFlags as DWORD, byval szSrcFileName as LPSTR, byval szDestFileName as LPSTR, byval szSrcDir as LPSTR, byval szDestDir as LPSTR, byval szCurDir as LPSTR, byval szTmpFile as LPSTR, byval lpuTmpFileLen as PUINT) as DWORD

declare function VerInstallFileW(byval uFlags as DWORD, byval szSrcFileName as LPWSTR, byval szDestFileName as LPWSTR, byval szSrcDir as LPWSTR, byval szDestDir as LPWSTR, byval szCurDir as LPWSTR, byval szTmpFile as LPWSTR, byval lpuTmpFileLen as PUINT) as DWORD


declare function GetFileVersionInfoSizeA(byval lptstrFilename as LPCSTR, byval lpdwHandle as LPDWORD) as DWORD

 declare function GetFileVersionInfoSize alias "GetFileVersionInfoSizeA"(byval lptstrFilename as LPCSTR, byval lpdwHandle as LPDWORD) as DWORD

declare function GetFileVersionInfoSizeW(byval lptstrFilename as LPCWSTR, byval lpdwHandle as LPDWORD) as DWORD


declare function GetFileVersionInfoA(byval lptstrFilename as LPCSTR, byval dwHandle as DWORD, byval dwLen as DWORD, byval lpData as LPVOID) as WINBOOL

 declare function GetFileVersionInfo alias "GetFileVersionInfoA"(byval lptstrFilename as LPCSTR, byval dwHandle as DWORD, byval dwLen as DWORD, byval lpData as LPVOID) as WINBOOL

declare function GetFileVersionInfoW(byval lptstrFilename as LPCWSTR, byval dwHandle as DWORD, byval dwLen as DWORD, byval lpData as LPVOID) as WINBOOL


declare function VerLanguageNameA(byval wLang as DWORD, byval szLang as LPSTR, byval nSize as DWORD) as DWORD

 declare function VerLanguageName alias "VerLanguageNameA"(byval wLang as DWORD, byval szLang as LPSTR, byval nSize as DWORD) as DWORD

declare function VerLanguageNameW(byval wLang as DWORD, byval szLang as LPWSTR, byval nSize as DWORD) as DWORD


declare function VerQueryValueA(byval pBlock as const LPVOID, byval lpSubBlock as LPCSTR, byval lplpBuffer as LPVOID ptr, byval puLen as PUINT) as WINBOOL

 declare function VerQueryValue alias "VerQueryValueA"(byval pBlock as const LPVOID, byval lpSubBlock as LPCSTR, byval lplpBuffer as LPVOID ptr, byval puLen as PUINT) as WINBOOL

declare function VerQueryValueW(byval pBlock as const LPVOID, byval lpSubBlock as LPCWSTR, byval lplpBuffer as LPVOID ptr, byval puLen as PUINT) as WINBOOL


end extern


#inclib "advapi32"



const SHTDN_REASON_FLAG_COMMENT_REQUIRED = &h01000000
const SHTDN_REASON_FLAG_DIRTY_PROBLEM_ID_REQUIRED = &h02000000
const SHTDN_REASON_FLAG_CLEAN_UI = &h04000000
const SHTDN_REASON_FLAG_DIRTY_UI = &h08000000
const SHTDN_REASON_FLAG_USER_DEFINED = &h40000000
const SHTDN_REASON_FLAG_PLANNED = &h80000000
const SHTDN_REASON_MAJOR_OTHER = &h000000000
const SHTDN_REASON_MAJOR_NONE = &h000000000
const SHTDN_REASON_MAJOR_HARDWARE = &h00010000
const SHTDN_REASON_MAJOR_OPERATINGSYSTEM = &h00020000
const SHTDN_REASON_MAJOR_SOFTWARE = &h00030000
const SHTDN_REASON_MAJOR_APPLICATION = &h00040000
const SHTDN_REASON_MAJOR_SYSTEM = &h00050000
const SHTDN_REASON_MAJOR_POWER = &h00060000
const SHTDN_REASON_MAJOR_LEGACY_API = &h00070000
const SHTDN_REASON_MINOR_OTHER = &h000000000
const SHTDN_REASON_MINOR_NONE = &h000000ff
const SHTDN_REASON_MINOR_MAINTENANCE = &h00000001
const SHTDN_REASON_MINOR_INSTALLATION = &h00000002
const SHTDN_REASON_MINOR_UPGRADE = &h00000003
const SHTDN_REASON_MINOR_RECONFIG = &h00000004
const SHTDN_REASON_MINOR_HUNG = &h00000005
const SHTDN_REASON_MINOR_UNSTABLE = &h00000006
const SHTDN_REASON_MINOR_DISK = &h00000007
const SHTDN_REASON_MINOR_PROCESSOR = &h00000008
const SHTDN_REASON_MINOR_NETWORKCARD = &h00000009
const SHTDN_REASON_MINOR_POWER_SUPPLY = &h0000000a
const SHTDN_REASON_MINOR_CORDUNPLUGGED = &h0000000b
const SHTDN_REASON_MINOR_ENVIRONMENT = &h0000000c
const SHTDN_REASON_MINOR_HARDWARE_DRIVER = &h0000000d
const SHTDN_REASON_MINOR_OTHERDRIVER = &h0000000e
const SHTDN_REASON_MINOR_BLUESCREEN = &h0000000F
const SHTDN_REASON_MINOR_SERVICEPACK = &h00000010
const SHTDN_REASON_MINOR_HOTFIX = &h00000011
const SHTDN_REASON_MINOR_SECURITYFIX = &h00000012
const SHTDN_REASON_MINOR_SECURITY = &h00000013
const SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY = &h00000014
const SHTDN_REASON_MINOR_WMI = &h00000015
const SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL = &h00000016
const SHTDN_REASON_MINOR_HOTFIX_UNINSTALL = &h00000017
const SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL = &h00000018
const SHTDN_REASON_MINOR_MMC = &h00000019
const SHTDN_REASON_MINOR_SYSTEMRESTORE = &h0000001a
const SHTDN_REASON_MINOR_TERMSRV = &h00000020
const SHTDN_REASON_MINOR_DC_PROMOTION = &h00000021
const SHTDN_REASON_MINOR_DC_DEMOTION = &h00000022
const SHTDN_REASON_UNKNOWN = SHTDN_REASON_MINOR_NONE
const SHTDN_REASON_LEGACY_API = SHTDN_REASON_MAJOR_LEGACY_API or SHTDN_REASON_FLAG_PLANNED
const SHTDN_REASON_VALID_BIT_MASK = &hc0ffffff
const PCLEANUI = SHTDN_REASON_FLAG_PLANNED or SHTDN_REASON_FLAG_CLEAN_UI
const UCLEANUI = SHTDN_REASON_FLAG_CLEAN_UI
const PDIRTYUI = SHTDN_REASON_FLAG_PLANNED or SHTDN_REASON_FLAG_DIRTY_UI
const UDIRTYUI = SHTDN_REASON_FLAG_DIRTY_UI
const MAX_REASON_NAME_LEN = 64
const MAX_REASON_DESC_LEN = 256
const MAX_REASON_BUGID_LEN = 32
const MAX_REASON_COMMENT_LEN = 512
const SHUTDOWN_TYPE_LEN = 32
const POLICY_SHOWREASONUI_NEVER = 0
const POLICY_SHOWREASONUI_ALWAYS = 1
const POLICY_SHOWREASONUI_WORKSTATIONONLY = 2
const POLICY_SHOWREASONUI_SERVERONLY = 3
const SNAPSHOT_POLICY_NEVER = 0
const SNAPSHOT_POLICY_ALWAYS = 1
const SNAPSHOT_POLICY_UNPLANNED = 2
const MAX_NUM_REASONS = 256

extern "Windows"

const RRF_RT_REG_NONE = &h00000001
const RRF_RT_REG_SZ = &h00000002
const RRF_RT_REG_EXPAND_SZ = &h00000004
const RRF_RT_REG_BINARY = &h00000008
const RRF_RT_REG_DWORD = &h00000010
const RRF_RT_REG_MULTI_SZ = &h00000020
const RRF_RT_REG_QWORD = &h00000040
const RRF_RT_DWORD = RRF_RT_REG_BINARY or RRF_RT_REG_DWORD
const RRF_RT_QWORD = RRF_RT_REG_BINARY or RRF_RT_REG_QWORD
const RRF_RT_ANY = &h0000ffff
const RRF_NOEXPAND = &h10000000
const RRF_ZEROONFAILURE = &h20000000
type REGSAM as ACCESS_MASK
type LSTATUS as LONG
const REG_SECURE_CONNECTION = 1
const PROVIDER_KEEPS_VALUE_LENGTH = &h1

type val_context
 valuelen as long
 value_context as LPVOID
 val_buff_ptr as LPVOID
end type

type PVALCONTEXT as val_context ptr

type PVALUEA
 pv_valuename as LPSTR
 pv_valuelen as long
 pv_value_context as LPVOID
 pv_type as DWORD
end type

type PPVALUEA as PVALUEA ptr

type PVALUEW
 pv_valuename as LPWSTR
 pv_valuelen as long
 pv_value_context as LPVOID
 pv_type as DWORD
end type

type PPVALUEW as PVALUEW ptr

 type PVALUE as PVALUEA
 type PPVALUE as PPVALUEA

type PQUERYHANDLER as function cdecl(byval keycontext as LPVOID, byval val_list as PVALCONTEXT, byval num_vals as DWORD, byval outputbuffer as LPVOID, byval total_outlen as DWORD ptr, byval input_blen as DWORD) as DWORD

type provider_info
 pi_R0_1val as PQUERYHANDLER
 pi_R0_allvals as PQUERYHANDLER
 pi_R3_1val as PQUERYHANDLER
 pi_R3_allvals as PQUERYHANDLER
 pi_flags as DWORD
 pi_key_context as LPVOID
end type

type REG_PROVIDER as provider_info
type PPROVIDER as provider_info ptr

type value_entA
 ve_valuename as LPSTR
 ve_valuelen as DWORD
 ve_valueptr as DWORD_PTR
 ve_type as DWORD
end type

type VALENTA as value_entA
type PVALENTA as value_entA ptr

type value_entW
 ve_valuename as LPWSTR
 ve_valuelen as DWORD
 ve_valueptr as DWORD_PTR
 ve_type as DWORD
end type

type VALENTW as value_entW
type PVALENTW as value_entW ptr

 type VALENT as VALENTA
 type PVALENT as PVALENTA

declare function RegCloseKey(byval hKey as HKEY) as LONG
declare function RegOverridePredefKey(byval hKey as HKEY, byval hNewHKey as HKEY) as LONG
declare function RegOpenUserClassesRoot(byval hToken as HANDLE, byval dwOptions as DWORD, byval samDesired as REGSAM, byval phkResult as PHKEY) as LONG
declare function RegOpenCurrentUser(byval samDesired as REGSAM, byval phkResult as PHKEY) as LONG
declare function RegDisablePredefinedCache() as LONG
declare function RegConnectRegistryA(byval lpMachineName as LPCSTR, byval hKey as HKEY, byval phkResult as PHKEY) as LONG

 declare function RegConnectRegistry alias "RegConnectRegistryA"(byval lpMachineName as LPCSTR, byval hKey as HKEY, byval phkResult as PHKEY) as LONG

declare function RegConnectRegistryW(byval lpMachineName as LPCWSTR, byval hKey as HKEY, byval phkResult as PHKEY) as LONG


declare function RegConnectRegistryExA(byval lpMachineName as LPCSTR, byval hKey as HKEY, byval Flags as ULONG, byval phkResult as PHKEY) as LONG

 declare function RegConnectRegistryEx alias "RegConnectRegistryExA"(byval lpMachineName as LPCSTR, byval hKey as HKEY, byval Flags as ULONG, byval phkResult as PHKEY) as LONG

declare function RegConnectRegistryExW(byval lpMachineName as LPCWSTR, byval hKey as HKEY, byval Flags as ULONG, byval phkResult as PHKEY) as LONG


declare function RegCreateKeyA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval phkResult as PHKEY) as LONG

 declare function RegCreateKey alias "RegCreateKeyA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval phkResult as PHKEY) as LONG

declare function RegCreateKeyW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval phkResult as PHKEY) as LONG


declare function RegCreateKeyExA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval Reserved as DWORD, byval lpClass as LPSTR, byval dwOptions as DWORD, byval samDesired as REGSAM, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval phkResult as PHKEY, byval lpdwDisposition as LPDWORD) as LONG

 declare function RegCreateKeyEx alias "RegCreateKeyExA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval Reserved as DWORD, byval lpClass as LPSTR, byval dwOptions as DWORD, byval samDesired as REGSAM, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval phkResult as PHKEY, byval lpdwDisposition as LPDWORD) as LONG

declare function RegCreateKeyExW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval Reserved as DWORD, byval lpClass as LPWSTR, byval dwOptions as DWORD, byval samDesired as REGSAM, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval phkResult as PHKEY, byval lpdwDisposition as LPDWORD) as LONG


declare function RegDeleteKeyA(byval hKey as HKEY, byval lpSubKey as LPCSTR) as LONG

 declare function RegDeleteKey alias "RegDeleteKeyA"(byval hKey as HKEY, byval lpSubKey as LPCSTR) as LONG

declare function RegDeleteKeyW(byval hKey as HKEY, byval lpSubKey as LPCWSTR) as LONG


declare function RegDeleteKeyExA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval samDesired as REGSAM, byval Reserved as DWORD) as LONG

 declare function RegDeleteKeyEx alias "RegDeleteKeyExA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval samDesired as REGSAM, byval Reserved as DWORD) as LONG

declare function RegDeleteKeyExW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval samDesired as REGSAM, byval Reserved as DWORD) as LONG


declare function RegDisableReflectionKey(byval hBase as HKEY) as LONG
declare function RegEnableReflectionKey(byval hBase as HKEY) as LONG
declare function RegQueryReflectionKey(byval hBase as HKEY, byval bIsReflectionDisabled as WINBOOL ptr) as LONG
declare function RegDeleteValueA(byval hKey as HKEY, byval lpValueName as LPCSTR) as LONG

 declare function RegDeleteValue alias "RegDeleteValueA"(byval hKey as HKEY, byval lpValueName as LPCSTR) as LONG

declare function RegDeleteValueW(byval hKey as HKEY, byval lpValueName as LPCWSTR) as LONG


declare function RegEnumKeyA(byval hKey as HKEY, byval dwIndex as DWORD, byval lpName as LPSTR, byval cchName as DWORD) as LONG

 declare function RegEnumKey alias "RegEnumKeyA"(byval hKey as HKEY, byval dwIndex as DWORD, byval lpName as LPSTR, byval cchName as DWORD) as LONG

declare function RegEnumKeyW(byval hKey as HKEY, byval dwIndex as DWORD, byval lpName as LPWSTR, byval cchName as DWORD) as LONG


declare function RegEnumKeyExA(byval hKey as HKEY, byval dwIndex as DWORD, byval lpName as LPSTR, byval lpcchName as LPDWORD, byval lpReserved as LPDWORD, byval lpClass as LPSTR, byval lpcchClass as LPDWORD, byval lpftLastWriteTime as PFILETIME) as LONG

 declare function RegEnumKeyEx alias "RegEnumKeyExA"(byval hKey as HKEY, byval dwIndex as DWORD, byval lpName as LPSTR, byval lpcchName as LPDWORD, byval lpReserved as LPDWORD, byval lpClass as LPSTR, byval lpcchClass as LPDWORD, byval lpftLastWriteTime as PFILETIME) as LONG

declare function RegEnumKeyExW(byval hKey as HKEY, byval dwIndex as DWORD, byval lpName as LPWSTR, byval lpcchName as LPDWORD, byval lpReserved as LPDWORD, byval lpClass as LPWSTR, byval lpcchClass as LPDWORD, byval lpftLastWriteTime as PFILETIME) as LONG


declare function RegEnumValueA(byval hKey as HKEY, byval dwIndex as DWORD, byval lpValueName as LPSTR, byval lpcchValueName as LPDWORD, byval lpReserved as LPDWORD, byval lpType as LPDWORD, byval lpData as LPBYTE, byval lpcbData as LPDWORD) as LONG

 declare function RegEnumValue alias "RegEnumValueA"(byval hKey as HKEY, byval dwIndex as DWORD, byval lpValueName as LPSTR, byval lpcchValueName as LPDWORD, byval lpReserved as LPDWORD, byval lpType as LPDWORD, byval lpData as LPBYTE, byval lpcbData as LPDWORD) as LONG

declare function RegEnumValueW(byval hKey as HKEY, byval dwIndex as DWORD, byval lpValueName as LPWSTR, byval lpcchValueName as LPDWORD, byval lpReserved as LPDWORD, byval lpType as LPDWORD, byval lpData as LPBYTE, byval lpcbData as LPDWORD) as LONG


declare function RegFlushKey(byval hKey as HKEY) as LONG
declare function RegGetKeySecurity(byval hKey as HKEY, byval SecurityInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval lpcbSecurityDescriptor as LPDWORD) as LONG
declare function RegLoadKeyA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval lpFile as LPCSTR) as LONG

 declare function RegLoadKey alias "RegLoadKeyA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval lpFile as LPCSTR) as LONG

declare function RegLoadKeyW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval lpFile as LPCWSTR) as LONG


declare function RegNotifyChangeKeyValue(byval hKey as HKEY, byval bWatchSubtree as WINBOOL, byval dwNotifyFilter as DWORD, byval hEvent as HANDLE, byval fAsynchronous as WINBOOL) as LONG
declare function RegOpenKeyA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval phkResult as PHKEY) as LONG

 declare function RegOpenKey alias "RegOpenKeyA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval phkResult as PHKEY) as LONG

declare function RegOpenKeyW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval phkResult as PHKEY) as LONG


declare function RegOpenKeyExA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval ulOptions as DWORD, byval samDesired as REGSAM, byval phkResult as PHKEY) as LONG

 declare function RegOpenKeyEx alias "RegOpenKeyExA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval ulOptions as DWORD, byval samDesired as REGSAM, byval phkResult as PHKEY) as LONG

declare function RegOpenKeyExW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval ulOptions as DWORD, byval samDesired as REGSAM, byval phkResult as PHKEY) as LONG


declare function RegQueryInfoKeyA(byval hKey as HKEY, byval lpClass as LPSTR, byval lpcchClass as LPDWORD, byval lpReserved as LPDWORD, byval lpcSubKeys as LPDWORD, byval lpcbMaxSubKeyLen as LPDWORD, byval lpcbMaxClassLen as LPDWORD, byval lpcValues as LPDWORD, byval lpcbMaxValueNameLen as LPDWORD, byval lpcbMaxValueLen as LPDWORD, byval lpcbSecurityDescriptor as LPDWORD, byval lpftLastWriteTime as PFILETIME) as LONG

 declare function RegQueryInfoKey alias "RegQueryInfoKeyA"(byval hKey as HKEY, byval lpClass as LPSTR, byval lpcchClass as LPDWORD, byval lpReserved as LPDWORD, byval lpcSubKeys as LPDWORD, byval lpcbMaxSubKeyLen as LPDWORD, byval lpcbMaxClassLen as LPDWORD, byval lpcValues as LPDWORD, byval lpcbMaxValueNameLen as LPDWORD, byval lpcbMaxValueLen as LPDWORD, byval lpcbSecurityDescriptor as LPDWORD, byval lpftLastWriteTime as PFILETIME) as LONG

declare function RegQueryInfoKeyW(byval hKey as HKEY, byval lpClass as LPWSTR, byval lpcchClass as LPDWORD, byval lpReserved as LPDWORD, byval lpcSubKeys as LPDWORD, byval lpcbMaxSubKeyLen as LPDWORD, byval lpcbMaxClassLen as LPDWORD, byval lpcValues as LPDWORD, byval lpcbMaxValueNameLen as LPDWORD, byval lpcbMaxValueLen as LPDWORD, byval lpcbSecurityDescriptor as LPDWORD, byval lpftLastWriteTime as PFILETIME) as LONG


declare function RegQueryValueA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval lpData as LPSTR, byval lpcbData as PLONG) as LONG

 declare function RegQueryValue alias "RegQueryValueA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval lpData as LPSTR, byval lpcbData as PLONG) as LONG

declare function RegQueryValueW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval lpData as LPWSTR, byval lpcbData as PLONG) as LONG


declare function RegQueryMultipleValuesA(byval hKey as HKEY, byval val_list as PVALENTA, byval num_vals as DWORD, byval lpValueBuf as LPSTR, byval ldwTotsize as LPDWORD) as LONG

 declare function RegQueryMultipleValues alias "RegQueryMultipleValuesA"(byval hKey as HKEY, byval val_list as PVALENTA, byval num_vals as DWORD, byval lpValueBuf as LPSTR, byval ldwTotsize as LPDWORD) as LONG

declare function RegQueryMultipleValuesW(byval hKey as HKEY, byval val_list as PVALENTW, byval num_vals as DWORD, byval lpValueBuf as LPWSTR, byval ldwTotsize as LPDWORD) as LONG


declare function RegQueryValueExA(byval hKey as HKEY, byval lpValueName as LPCSTR, byval lpReserved as LPDWORD, byval lpType as LPDWORD, byval lpData as LPBYTE, byval lpcbData as LPDWORD) as LONG

 declare function RegQueryValueEx alias "RegQueryValueExA"(byval hKey as HKEY, byval lpValueName as LPCSTR, byval lpReserved as LPDWORD, byval lpType as LPDWORD, byval lpData as LPBYTE, byval lpcbData as LPDWORD) as LONG

declare function RegQueryValueExW(byval hKey as HKEY, byval lpValueName as LPCWSTR, byval lpReserved as LPDWORD, byval lpType as LPDWORD, byval lpData as LPBYTE, byval lpcbData as LPDWORD) as LONG


declare function RegReplaceKeyA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval lpNewFile as LPCSTR, byval lpOldFile as LPCSTR) as LONG

 declare function RegReplaceKey alias "RegReplaceKeyA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval lpNewFile as LPCSTR, byval lpOldFile as LPCSTR) as LONG

declare function RegReplaceKeyW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval lpNewFile as LPCWSTR, byval lpOldFile as LPCWSTR) as LONG


declare function RegRestoreKeyA(byval hKey as HKEY, byval lpFile as LPCSTR, byval dwFlags as DWORD) as LONG

 declare function RegRestoreKey alias "RegRestoreKeyA"(byval hKey as HKEY, byval lpFile as LPCSTR, byval dwFlags as DWORD) as LONG

declare function RegRestoreKeyW(byval hKey as HKEY, byval lpFile as LPCWSTR, byval dwFlags as DWORD) as LONG


declare function RegSaveKeyA(byval hKey as HKEY, byval lpFile as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as LONG

 declare function RegSaveKey alias "RegSaveKeyA"(byval hKey as HKEY, byval lpFile as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as LONG

declare function RegSaveKeyW(byval hKey as HKEY, byval lpFile as LPCWSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as LONG


declare function RegSetKeySecurity(byval hKey as HKEY, byval SecurityInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR) as LONG
declare function RegSetValueA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval dwType as DWORD, byval lpData as LPCSTR, byval cbData as DWORD) as LONG

 declare function RegSetValue alias "RegSetValueA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval dwType as DWORD, byval lpData as LPCSTR, byval cbData as DWORD) as LONG

declare function RegSetValueW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval dwType as DWORD, byval lpData as LPCWSTR, byval cbData as DWORD) as LONG


declare function RegSetValueExA(byval hKey as HKEY, byval lpValueName as LPCSTR, byval Reserved as DWORD, byval dwType as DWORD, byval lpData as const UBYTE ptr, byval cbData as DWORD) as LONG

 declare function RegSetValueEx alias "RegSetValueExA"(byval hKey as HKEY, byval lpValueName as LPCSTR, byval Reserved as DWORD, byval dwType as DWORD, byval lpData as const UBYTE ptr, byval cbData as DWORD) as LONG

declare function RegSetValueExW(byval hKey as HKEY, byval lpValueName as LPCWSTR, byval Reserved as DWORD, byval dwType as DWORD, byval lpData as const UBYTE ptr, byval cbData as DWORD) as LONG


declare function RegUnLoadKeyA(byval hKey as HKEY, byval lpSubKey as LPCSTR) as LONG

 declare function RegUnLoadKey alias "RegUnLoadKeyA"(byval hKey as HKEY, byval lpSubKey as LPCSTR) as LONG

declare function RegUnLoadKeyW(byval hKey as HKEY, byval lpSubKey as LPCWSTR) as LONG


declare function RegGetValueA(byval hkey as HKEY, byval lpSubKey as LPCSTR, byval lpValue as LPCSTR, byval dwFlags as DWORD, byval pdwType as LPDWORD, byval pvData as PVOID, byval pcbData as LPDWORD) as LONG

 declare function RegGetValue alias "RegGetValueA"(byval hkey as HKEY, byval lpSubKey as LPCSTR, byval lpValue as LPCSTR, byval dwFlags as DWORD, byval pdwType as LPDWORD, byval pvData as PVOID, byval pcbData as LPDWORD) as LONG

declare function RegGetValueW(byval hkey as HKEY, byval lpSubKey as LPCWSTR, byval lpValue as LPCWSTR, byval dwFlags as DWORD, byval pdwType as LPDWORD, byval pvData as PVOID, byval pcbData as LPDWORD) as LONG


declare function InitiateSystemShutdownA(byval lpMachineName as LPSTR, byval lpMessage as LPSTR, byval dwTimeout as DWORD, byval bForceAppsClosed as WINBOOL, byval bRebootAfterShutdown as WINBOOL) as WINBOOL

 declare function InitiateSystemShutdown alias "InitiateSystemShutdownA"(byval lpMachineName as LPSTR, byval lpMessage as LPSTR, byval dwTimeout as DWORD, byval bForceAppsClosed as WINBOOL, byval bRebootAfterShutdown as WINBOOL) as WINBOOL

declare function InitiateSystemShutdownW(byval lpMachineName as LPWSTR, byval lpMessage as LPWSTR, byval dwTimeout as DWORD, byval bForceAppsClosed as WINBOOL, byval bRebootAfterShutdown as WINBOOL) as WINBOOL


declare function AbortSystemShutdownA(byval lpMachineName as LPSTR) as WINBOOL

 declare function AbortSystemShutdown alias "AbortSystemShutdownA"(byval lpMachineName as LPSTR) as WINBOOL

declare function AbortSystemShutdownW(byval lpMachineName as LPWSTR) as WINBOOL


const REASON_SWINSTALL = SHTDN_REASON_MAJOR_SOFTWARE or SHTDN_REASON_MINOR_INSTALLATION
const REASON_HWINSTALL = SHTDN_REASON_MAJOR_HARDWARE or SHTDN_REASON_MINOR_INSTALLATION
const REASON_SERVICEHANG = SHTDN_REASON_MAJOR_SOFTWARE or SHTDN_REASON_MINOR_HUNG
const REASON_UNSTABLE = SHTDN_REASON_MAJOR_SYSTEM or SHTDN_REASON_MINOR_UNSTABLE
const REASON_SWHWRECONF = SHTDN_REASON_MAJOR_SOFTWARE or SHTDN_REASON_MINOR_RECONFIG
const REASON_OTHER = SHTDN_REASON_MAJOR_OTHER or SHTDN_REASON_MINOR_OTHER
const REASON_UNKNOWN = SHTDN_REASON_UNKNOWN
const REASON_LEGACY_API = SHTDN_REASON_LEGACY_API
const REASON_PLANNED_FLAG = SHTDN_REASON_FLAG_PLANNED
const MAX_SHUTDOWN_TIMEOUT = (((10 * 365) * 24) * 60) * 60
declare function InitiateSystemShutdownExA(byval lpMachineName as LPSTR, byval lpMessage as LPSTR, byval dwTimeout as DWORD, byval bForceAppsClosed as WINBOOL, byval bRebootAfterShutdown as WINBOOL, byval dwReason as DWORD) as WINBOOL

 declare function InitiateSystemShutdownEx alias "InitiateSystemShutdownExA"(byval lpMachineName as LPSTR, byval lpMessage as LPSTR, byval dwTimeout as DWORD, byval bForceAppsClosed as WINBOOL, byval bRebootAfterShutdown as WINBOOL, byval dwReason as DWORD) as WINBOOL

declare function InitiateSystemShutdownExW(byval lpMachineName as LPWSTR, byval lpMessage as LPWSTR, byval dwTimeout as DWORD, byval bForceAppsClosed as WINBOOL, byval bRebootAfterShutdown as WINBOOL, byval dwReason as DWORD) as WINBOOL


declare function RegSaveKeyExA(byval hKey as HKEY, byval lpFile as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval Flags as DWORD) as LONG

 declare function RegSaveKeyEx alias "RegSaveKeyExA"(byval hKey as HKEY, byval lpFile as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval Flags as DWORD) as LONG

declare function RegSaveKeyExW(byval hKey as HKEY, byval lpFile as LPCWSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval Flags as DWORD) as LONG


declare function Wow64Win32ApiEntry(byval dwFuncNumber as DWORD, byval dwFlag as DWORD, byval dwRes as DWORD) as LONG































end extern



extern "Windows"

const WNNC_NET_MSNET = &h00010000
const WNNC_NET_SMB = &h00020000
const WNNC_NET_LANMAN = WNNC_NET_SMB
const WNNC_NET_NETWARE = &h00030000
const WNNC_NET_VINES = &h00040000
const WNNC_NET_10NET = &h00050000
const WNNC_NET_LOCUS = &h00060000
const WNNC_NET_SUN_PC_NFS = &h00070000
const WNNC_NET_LANSTEP = &h00080000
const WNNC_NET_9TILES = &h00090000
const WNNC_NET_LANTASTIC = &h000a0000
const WNNC_NET_AS400 = &h000b0000
const WNNC_NET_FTP_NFS = &h000c0000
const WNNC_NET_PATHWORKS = &h000d0000
const WNNC_NET_LIFENET = &h000e0000
const WNNC_NET_POWERLAN = &h000f0000
const WNNC_NET_BWNFS = &h00100000
const WNNC_NET_COGENT = &h00110000
const WNNC_NET_FARALLON = &h00120000
const WNNC_NET_APPLETALK = &h00130000
const WNNC_NET_INTERGRAPH = &h00140000
const WNNC_NET_SYMFONET = &h00150000
const WNNC_NET_CLEARCASE = &h00160000
const WNNC_NET_FRONTIER = &h00170000
const WNNC_NET_BMC = &h00180000
const WNNC_NET_DCE = &h00190000
const WNNC_NET_AVID = &h001a0000
const WNNC_NET_DOCUSPACE = &h001b0000
const WNNC_NET_MANGOSOFT = &h001c0000
const WNNC_NET_SERNET = &h001d0000
const WNNC_NET_RIVERFRONT1 = &h001e0000
const WNNC_NET_RIVERFRONT2 = &h001f0000
const WNNC_NET_DECORB = &h00200000
const WNNC_NET_PROTSTOR = &h00210000
const WNNC_NET_FJ_REDIR = &h00220000
const WNNC_NET_DISTINCT = &h00230000
const WNNC_NET_TWINS = &h00240000
const WNNC_NET_RDR2SAMPLE = &h00250000
const WNNC_NET_CSC = &h00260000
const WNNC_NET_3IN1 = &h00270000
const WNNC_NET_EXTENDNET = &h00290000
const WNNC_NET_STAC = &h002a0000
const WNNC_NET_FOXBAT = &h002b0000
const WNNC_NET_YAHOO = &h002c0000
const WNNC_NET_EXIFS = &h002d0000
const WNNC_NET_DAV = &h002e0000
const WNNC_NET_KNOWARE = &h002f0000
const WNNC_NET_OBJECT_DIRE = &h00300000
const WNNC_NET_MASFAX = &h00310000
const WNNC_NET_HOB_NFS = &h00320000
const WNNC_NET_SHIVA = &h00330000
const WNNC_NET_IBMAL = &h00340000
const WNNC_NET_LOCK = &h00350000
const WNNC_NET_TERMSRV = &h00360000
const WNNC_NET_SRT = &h00370000
const WNNC_NET_QUINCY = &h00380000
const WNNC_NET_OPENAFS = &h00390000
const WNNC_NET_AVID1 = &h003a0000
const WNNC_NET_DFS = &h003b0000
const WNNC_NET_KWNP = &h003c0000
const WNNC_NET_ZENWORKS = &h003d0000
const WNNC_NET_DRIVEONWEB = &h003e0000
const WNNC_NET_VMWARE = &h003f0000
const WNNC_NET_RSFX = &h00400000
const WNNC_NET_MFILES = &h00410000
const WNNC_NET_MS_NFS = &h00420000
const WNNC_NET_GOOGLE = &h00430000
const WNNC_NET_NDFS = &h00440000
const WNNC_CRED_MANAGER = &hffff0000
const RESOURCE_CONNECTED = &h00000001
const RESOURCE_GLOBALNET = &h00000002
const RESOURCE_REMEMBERED = &h00000003
const RESOURCE_RECENT = &h00000004
const RESOURCE_CONTEXT = &h00000005
const RESOURCETYPE_ANY = &h000000000
const RESOURCETYPE_DISK = &h00000001
const RESOURCETYPE_PRINT = &h00000002
const RESOURCETYPE_RESERVED = &h00000008
const RESOURCETYPE_UNKNOWN = &hFFFFFFFF
const RESOURCEUSAGE_CONNECTABLE = &h00000001
const RESOURCEUSAGE_CONTAINER = &h00000002
const RESOURCEUSAGE_NOLOCALDEVICE = &h00000004
const RESOURCEUSAGE_SIBLING = &h00000008
const RESOURCEUSAGE_ATTACHED = &h00000010
const RESOURCEUSAGE_ALL = (RESOURCEUSAGE_CONNECTABLE or RESOURCEUSAGE_CONTAINER) or RESOURCEUSAGE_ATTACHED
const RESOURCEUSAGE_RESERVED = &h80000000
const RESOURCEDISPLAYTYPE_GENERIC = &h000000000
const RESOURCEDISPLAYTYPE_DOMAIN = &h00000001
const RESOURCEDISPLAYTYPE_SERVER = &h00000002
const RESOURCEDISPLAYTYPE_SHARE = &h00000003
const RESOURCEDISPLAYTYPE_FILE = &h00000004
const RESOURCEDISPLAYTYPE_GROUP = &h00000005
const RESOURCEDISPLAYTYPE_NETWORK = &h00000006
const RESOURCEDISPLAYTYPE_ROOT = &h00000007
const RESOURCEDISPLAYTYPE_SHAREADMIN = &h00000008
const RESOURCEDISPLAYTYPE_DIRECTORY = &h00000009
const RESOURCEDISPLAYTYPE_TREE = &h0000000a
const RESOURCEDISPLAYTYPE_NDSCONTAINER = &h0000000b

type _NETRESOURCEA
 dwScope as DWORD
 dwType as DWORD
 dwDisplayType as DWORD
 dwUsage as DWORD
 lpLocalName as LPSTR
 lpRemoteName as LPSTR
 lpComment as LPSTR
 lpProvider as LPSTR
end type

type NETRESOURCEA as _NETRESOURCEA
type LPNETRESOURCEA as _NETRESOURCEA ptr

type _NETRESOURCEW
 dwScope as DWORD
 dwType as DWORD
 dwDisplayType as DWORD
 dwUsage as DWORD
 lpLocalName as LPWSTR
 lpRemoteName as LPWSTR
 lpComment as LPWSTR
 lpProvider as LPWSTR
end type

type NETRESOURCEW as _NETRESOURCEW
type LPNETRESOURCEW as _NETRESOURCEW ptr

 type NETRESOURCE as NETRESOURCEA
 type LPNETRESOURCE as LPNETRESOURCEA

const NETPROPERTY_PERSISTENT = 1
const CONNECT_UPDATE_PROFILE = &h00000001
const CONNECT_UPDATE_RECENT = &h00000002
const CONNECT_TEMPORARY = &h00000004
const CONNECT_INTERACTIVE = &h00000008
const CONNECT_PROMPT = &h00000010
const CONNECT_NEED_DRIVE = &h00000020
const CONNECT_REFCOUNT = &h00000040
const CONNECT_REDIRECT = &h00000080
const CONNECT_LOCALDRIVE = &h00000100
const CONNECT_CURRENT_MEDIA = &h00000200
const CONNECT_DEFERRED = &h00000400
const CONNECT_RESERVED = &hFF000000
const CONNECT_COMMANDLINE = &h00000800
const CONNECT_CMD_SAVECRED = &h00001000



declare function WNetAddConnectionA(byval lpRemoteName as LPCSTR, byval lpPassword as LPCSTR, byval lpLocalName as LPCSTR) as DWORD

 declare function WNetAddConnection alias "WNetAddConnectionA"(byval lpRemoteName as LPCSTR, byval lpPassword as LPCSTR, byval lpLocalName as LPCSTR) as DWORD

declare function WNetAddConnectionW(byval lpRemoteName as LPCWSTR, byval lpPassword as LPCWSTR, byval lpLocalName as LPCWSTR) as DWORD


declare function WNetAddConnection2A(byval lpNetResource as LPNETRESOURCEA, byval lpPassword as LPCSTR, byval lpUserName as LPCSTR, byval dwFlags as DWORD) as DWORD

 declare function WNetAddConnection2 alias "WNetAddConnection2A"(byval lpNetResource as LPNETRESOURCEA, byval lpPassword as LPCSTR, byval lpUserName as LPCSTR, byval dwFlags as DWORD) as DWORD

declare function WNetAddConnection2W(byval lpNetResource as LPNETRESOURCEW, byval lpPassword as LPCWSTR, byval lpUserName as LPCWSTR, byval dwFlags as DWORD) as DWORD


declare function WNetAddConnection3A(byval hwndOwner as HWND, byval lpNetResource as LPNETRESOURCEA, byval lpPassword as LPCSTR, byval lpUserName as LPCSTR, byval dwFlags as DWORD) as DWORD

 declare function WNetAddConnection3 alias "WNetAddConnection3A"(byval hwndOwner as HWND, byval lpNetResource as LPNETRESOURCEA, byval lpPassword as LPCSTR, byval lpUserName as LPCSTR, byval dwFlags as DWORD) as DWORD

declare function WNetAddConnection3W(byval hwndOwner as HWND, byval lpNetResource as LPNETRESOURCEW, byval lpPassword as LPCWSTR, byval lpUserName as LPCWSTR, byval dwFlags as DWORD) as DWORD


declare function WNetCancelConnectionA(byval lpName as LPCSTR, byval fForce as WINBOOL) as DWORD

 declare function WNetCancelConnection alias "WNetCancelConnectionA"(byval lpName as LPCSTR, byval fForce as WINBOOL) as DWORD

declare function WNetCancelConnectionW(byval lpName as LPCWSTR, byval fForce as WINBOOL) as DWORD


declare function WNetCancelConnection2A(byval lpName as LPCSTR, byval dwFlags as DWORD, byval fForce as WINBOOL) as DWORD

 declare function WNetCancelConnection2 alias "WNetCancelConnection2A"(byval lpName as LPCSTR, byval dwFlags as DWORD, byval fForce as WINBOOL) as DWORD

declare function WNetCancelConnection2W(byval lpName as LPCWSTR, byval dwFlags as DWORD, byval fForce as WINBOOL) as DWORD


declare function WNetGetConnectionA(byval lpLocalName as LPCSTR, byval lpRemoteName as LPSTR, byval lpnLength as LPDWORD) as DWORD

 declare function WNetGetConnection alias "WNetGetConnectionA"(byval lpLocalName as LPCSTR, byval lpRemoteName as LPSTR, byval lpnLength as LPDWORD) as DWORD

declare function WNetGetConnectionW(byval lpLocalName as LPCWSTR, byval lpRemoteName as LPWSTR, byval lpnLength as LPDWORD) as DWORD


declare function WNetRestoreConnectionA(byval hwndParent as HWND, byval lpDevice as LPCSTR) as DWORD

 declare function WNetRestoreConnection alias "WNetRestoreConnectionA"(byval hwndParent as HWND, byval lpDevice as LPCSTR) as DWORD

declare function WNetUseConnectionA(byval hwndOwner as HWND, byval lpNetResource as LPNETRESOURCEA, byval lpPassword as LPCSTR, byval lpUserID as LPCSTR, byval dwFlags as DWORD, byval lpAccessName as LPSTR, byval lpBufferSize as LPDWORD, byval lpResult as LPDWORD) as DWORD

 declare function WNetUseConnection alias "WNetUseConnectionA"(byval hwndOwner as HWND, byval lpNetResource as LPNETRESOURCEA, byval lpPassword as LPCSTR, byval lpUserID as LPCSTR, byval dwFlags as DWORD, byval lpAccessName as LPSTR, byval lpBufferSize as LPDWORD, byval lpResult as LPDWORD) as DWORD

declare function WNetUseConnectionW(byval hwndOwner as HWND, byval lpNetResource as LPNETRESOURCEW, byval lpPassword as LPCWSTR, byval lpUserID as LPCWSTR, byval dwFlags as DWORD, byval lpAccessName as LPWSTR, byval lpBufferSize as LPDWORD, byval lpResult as LPDWORD) as DWORD


declare function WNetConnectionDialog(byval hwnd as HWND, byval dwType as DWORD) as DWORD
declare function WNetDisconnectDialog(byval hwnd as HWND, byval dwType as DWORD) as DWORD

 declare function WNetRestoreConnectionW(byval hwndParent as HWND, byval lpDevice as LPCWSTR) as DWORD


type _CONNECTDLGSTRUCTA
 cbStructure as DWORD
 hwndOwner as HWND
 lpConnRes as LPNETRESOURCEA
 dwFlags as DWORD
 dwDevNum as DWORD
end type

type CONNECTDLGSTRUCTA as _CONNECTDLGSTRUCTA
type LPCONNECTDLGSTRUCTA as _CONNECTDLGSTRUCTA ptr

type _CONNECTDLGSTRUCTW
 cbStructure as DWORD
 hwndOwner as HWND
 lpConnRes as LPNETRESOURCEW
 dwFlags as DWORD
 dwDevNum as DWORD
end type

type CONNECTDLGSTRUCTW as _CONNECTDLGSTRUCTW
type LPCONNECTDLGSTRUCTW as _CONNECTDLGSTRUCTW ptr

 type CONNECTDLGSTRUCT as CONNECTDLGSTRUCTA
 type LPCONNECTDLGSTRUCT as LPCONNECTDLGSTRUCTA

const CONNDLG_RO_PATH = &h00000001
const CONNDLG_CONN_POINT = &h00000002
const CONNDLG_USE_MRU = &h00000004
const CONNDLG_HIDE_BOX = &h00000008
const CONNDLG_PERSIST = &h00000010
const CONNDLG_NOT_PERSIST = &h00000020
declare function WNetConnectionDialog1A(byval lpConnDlgStruct as LPCONNECTDLGSTRUCTA) as DWORD

 declare function WNetConnectionDialog1 alias "WNetConnectionDialog1A"(byval lpConnDlgStruct as LPCONNECTDLGSTRUCTA) as DWORD

declare function WNetConnectionDialog1W(byval lpConnDlgStruct as LPCONNECTDLGSTRUCTW) as DWORD


type _DISCDLGSTRUCTA
 cbStructure as DWORD
 hwndOwner as HWND
 lpLocalName as LPSTR
 lpRemoteName as LPSTR
 dwFlags as DWORD
end type

type DISCDLGSTRUCTA as _DISCDLGSTRUCTA
type LPDISCDLGSTRUCTA as _DISCDLGSTRUCTA ptr

type _DISCDLGSTRUCTW
 cbStructure as DWORD
 hwndOwner as HWND
 lpLocalName as LPWSTR
 lpRemoteName as LPWSTR
 dwFlags as DWORD
end type

type DISCDLGSTRUCTW as _DISCDLGSTRUCTW
type LPDISCDLGSTRUCTW as _DISCDLGSTRUCTW ptr

 type DISCDLGSTRUCT as DISCDLGSTRUCTA
 type LPDISCDLGSTRUCT as LPDISCDLGSTRUCTA

const DISC_UPDATE_PROFILE = &h00000001
const DISC_NO_FORCE = &h00000040
declare function WNetDisconnectDialog1A(byval lpConnDlgStruct as LPDISCDLGSTRUCTA) as DWORD

 declare function WNetDisconnectDialog1 alias "WNetDisconnectDialog1A"(byval lpConnDlgStruct as LPDISCDLGSTRUCTA) as DWORD

declare function WNetDisconnectDialog1W(byval lpConnDlgStruct as LPDISCDLGSTRUCTW) as DWORD


declare function WNetOpenEnumA(byval dwScope as DWORD, byval dwType as DWORD, byval dwUsage as DWORD, byval lpNetResource as LPNETRESOURCEA, byval lphEnum as LPHANDLE) as DWORD

 declare function WNetOpenEnum alias "WNetOpenEnumA"(byval dwScope as DWORD, byval dwType as DWORD, byval dwUsage as DWORD, byval lpNetResource as LPNETRESOURCEA, byval lphEnum as LPHANDLE) as DWORD

declare function WNetOpenEnumW(byval dwScope as DWORD, byval dwType as DWORD, byval dwUsage as DWORD, byval lpNetResource as LPNETRESOURCEW, byval lphEnum as LPHANDLE) as DWORD


declare function WNetEnumResourceA(byval hEnum as HANDLE, byval lpcCount as LPDWORD, byval lpBuffer as LPVOID, byval lpBufferSize as LPDWORD) as DWORD

 declare function WNetEnumResource alias "WNetEnumResourceA"(byval hEnum as HANDLE, byval lpcCount as LPDWORD, byval lpBuffer as LPVOID, byval lpBufferSize as LPDWORD) as DWORD

declare function WNetEnumResourceW(byval hEnum as HANDLE, byval lpcCount as LPDWORD, byval lpBuffer as LPVOID, byval lpBufferSize as LPDWORD) as DWORD


declare function WNetCloseEnum(byval hEnum as HANDLE) as DWORD
declare function WNetGetResourceParentA(byval lpNetResource as LPNETRESOURCEA, byval lpBuffer as LPVOID, byval lpcbBuffer as LPDWORD) as DWORD

 declare function WNetGetResourceParent alias "WNetGetResourceParentA"(byval lpNetResource as LPNETRESOURCEA, byval lpBuffer as LPVOID, byval lpcbBuffer as LPDWORD) as DWORD

declare function WNetGetResourceParentW(byval lpNetResource as LPNETRESOURCEW, byval lpBuffer as LPVOID, byval lpcbBuffer as LPDWORD) as DWORD


declare function WNetGetResourceInformationA(byval lpNetResource as LPNETRESOURCEA, byval lpBuffer as LPVOID, byval lpcbBuffer as LPDWORD, byval lplpSystem as LPSTR ptr) as DWORD

 declare function WNetGetResourceInformation alias "WNetGetResourceInformationA"(byval lpNetResource as LPNETRESOURCEA, byval lpBuffer as LPVOID, byval lpcbBuffer as LPDWORD, byval lplpSystem as LPSTR ptr) as DWORD

declare function WNetGetResourceInformationW(byval lpNetResource as LPNETRESOURCEW, byval lpBuffer as LPVOID, byval lpcbBuffer as LPDWORD, byval lplpSystem as LPWSTR ptr) as DWORD


const UNIVERSAL_NAME_INFO_LEVEL = &h00000001
const REMOTE_NAME_INFO_LEVEL = &h00000002

type _UNIVERSAL_NAME_INFOA
 lpUniversalName as LPSTR
end type

type UNIVERSAL_NAME_INFOA as _UNIVERSAL_NAME_INFOA
type LPUNIVERSAL_NAME_INFOA as _UNIVERSAL_NAME_INFOA ptr

type _UNIVERSAL_NAME_INFOW
 lpUniversalName as LPWSTR
end type

type UNIVERSAL_NAME_INFOW as _UNIVERSAL_NAME_INFOW
type LPUNIVERSAL_NAME_INFOW as _UNIVERSAL_NAME_INFOW ptr

 type UNIVERSAL_NAME_INFO as UNIVERSAL_NAME_INFOA
 type LPUNIVERSAL_NAME_INFO as LPUNIVERSAL_NAME_INFOA

type _REMOTE_NAME_INFOA
 lpUniversalName as LPSTR
 lpConnectionName as LPSTR
 lpRemainingPath as LPSTR
end type

type REMOTE_NAME_INFOA as _REMOTE_NAME_INFOA
type LPREMOTE_NAME_INFOA as _REMOTE_NAME_INFOA ptr

type _REMOTE_NAME_INFOW
 lpUniversalName as LPWSTR
 lpConnectionName as LPWSTR
 lpRemainingPath as LPWSTR
end type

type REMOTE_NAME_INFOW as _REMOTE_NAME_INFOW
type LPREMOTE_NAME_INFOW as _REMOTE_NAME_INFOW ptr

 type REMOTE_NAME_INFO as REMOTE_NAME_INFOA
 type LPREMOTE_NAME_INFO as LPREMOTE_NAME_INFOA

declare function WNetGetUniversalNameA(byval lpLocalPath as LPCSTR, byval dwInfoLevel as DWORD, byval lpBuffer as LPVOID, byval lpBufferSize as LPDWORD) as DWORD

 declare function WNetGetUniversalName alias "WNetGetUniversalNameA"(byval lpLocalPath as LPCSTR, byval dwInfoLevel as DWORD, byval lpBuffer as LPVOID, byval lpBufferSize as LPDWORD) as DWORD

declare function WNetGetUniversalNameW(byval lpLocalPath as LPCWSTR, byval dwInfoLevel as DWORD, byval lpBuffer as LPVOID, byval lpBufferSize as LPDWORD) as DWORD


declare function WNetGetUserA(byval lpName as LPCSTR, byval lpUserName as LPSTR, byval lpnLength as LPDWORD) as DWORD

 declare function WNetGetUser alias "WNetGetUserA"(byval lpName as LPCSTR, byval lpUserName as LPSTR, byval lpnLength as LPDWORD) as DWORD

declare function WNetGetUserW(byval lpName as LPCWSTR, byval lpUserName as LPWSTR, byval lpnLength as LPDWORD) as DWORD


const WNFMT_MULTILINE = &h01
const WNFMT_ABBREVIATED = &h02
const WNFMT_INENUM = &h10
const WNFMT_CONNECTION = &h20
declare function WNetGetProviderNameA(byval dwNetType as DWORD, byval lpProviderName as LPSTR, byval lpBufferSize as LPDWORD) as DWORD

 declare function WNetGetProviderName alias "WNetGetProviderNameA"(byval dwNetType as DWORD, byval lpProviderName as LPSTR, byval lpBufferSize as LPDWORD) as DWORD

declare function WNetGetProviderNameW(byval dwNetType as DWORD, byval lpProviderName as LPWSTR, byval lpBufferSize as LPDWORD) as DWORD


type _NETINFOSTRUCT
 cbStructure as DWORD
 dwProviderVersion as DWORD
 dwStatus as DWORD
 dwCharacteristics as DWORD
 dwHandle as ULONG_PTR
 wNetType as WORD
 dwPrinters as DWORD
 dwDrives as DWORD
end type

type NETINFOSTRUCT as _NETINFOSTRUCT
type LPNETINFOSTRUCT as _NETINFOSTRUCT ptr
const NETINFO_DLL16 = &h00000001
const NETINFO_DISKRED = &h00000004
const NETINFO_PRINTERRED = &h00000008
declare function WNetGetNetworkInformationA(byval lpProvider as LPCSTR, byval lpNetInfoStruct as LPNETINFOSTRUCT) as DWORD

 declare function WNetGetNetworkInformation alias "WNetGetNetworkInformationA"(byval lpProvider as LPCSTR, byval lpNetInfoStruct as LPNETINFOSTRUCT) as DWORD

declare function WNetGetNetworkInformationW(byval lpProvider as LPCWSTR, byval lpNetInfoStruct as LPNETINFOSTRUCT) as DWORD


type PFNGETPROFILEPATHA as function(byval pszUsername as LPCSTR, byval pszBuffer as LPSTR, byval cbBuffer as UINT) as UINT
type PFNGETPROFILEPATHW as function(byval pszUsername as LPCWSTR, byval pszBuffer as LPWSTR, byval cbBuffer as UINT) as UINT

 type PFNGETPROFILEPATH as PFNGETPROFILEPATHA

type PFNRECONCILEPROFILEA as function(byval pszCentralFile as LPCSTR, byval pszLocalFile as LPCSTR, byval dwFlags as DWORD) as UINT
type PFNRECONCILEPROFILEW as function(byval pszCentralFile as LPCWSTR, byval pszLocalFile as LPCWSTR, byval dwFlags as DWORD) as UINT

 type PFNRECONCILEPROFILE as PFNRECONCILEPROFILEA

const RP_LOGON = &h01
const RP_INIFILE = &h02
type PFNPROCESSPOLICIESA as function(byval hwnd as HWND, byval pszPath as LPCSTR, byval pszUsername as LPCSTR, byval pszComputerName as LPCSTR, byval dwFlags as DWORD) as WINBOOL
type PFNPROCESSPOLICIESW as function(byval hwnd as HWND, byval pszPath as LPCWSTR, byval pszUsername as LPCWSTR, byval pszComputerName as LPCWSTR, byval dwFlags as DWORD) as WINBOOL

 type PFNPROCESSPOLICIES as PFNPROCESSPOLICIESA

const PP_DISPLAYERRORS = &h01
declare function WNetGetLastErrorA(byval lpError as LPDWORD, byval lpErrorBuf as LPSTR, byval nErrorBufSize as DWORD, byval lpNameBuf as LPSTR, byval nNameBufSize as DWORD) as DWORD

 declare function WNetGetLastError alias "WNetGetLastErrorA"(byval lpError as LPDWORD, byval lpErrorBuf as LPSTR, byval nErrorBufSize as DWORD, byval lpNameBuf as LPSTR, byval nNameBufSize as DWORD) as DWORD

declare function WNetGetLastErrorW(byval lpError as LPDWORD, byval lpErrorBuf as LPWSTR, byval nErrorBufSize as DWORD, byval lpNameBuf as LPWSTR, byval nNameBufSize as DWORD) as DWORD


const WN_SUCCESS = NO_ERROR
const WN_NO_ERROR = NO_ERROR
const WN_NOT_SUPPORTED = ERROR_NOT_SUPPORTED
const WN_CANCEL = ERROR_CANCELLED
const WN_RETRY = ERROR_RETRY
const WN_NET_ERROR = ERROR_UNEXP_NET_ERR
const WN_MORE_DATA = ERROR_MORE_DATA
const WN_BAD_POINTER = ERROR_INVALID_ADDRESS
const WN_BAD_VALUE = ERROR_INVALID_PARAMETER
const WN_BAD_USER = ERROR_BAD_USERNAME
const WN_BAD_PASSWORD = ERROR_INVALID_PASSWORD
const WN_ACCESS_DENIED = ERROR_ACCESS_DENIED
const WN_FUNCTION_BUSY = ERROR_BUSY
const WN_WINDOWS_ERROR = ERROR_UNEXP_NET_ERR
const WN_OUT_OF_MEMORY = ERROR_NOT_ENOUGH_MEMORY
const WN_NO_NETWORK = ERROR_NO_NETWORK
const WN_EXTENDED_ERROR = ERROR_EXTENDED_ERROR
const WN_BAD_LEVEL = ERROR_INVALID_LEVEL
const WN_BAD_HANDLE = ERROR_INVALID_HANDLE
const WN_NOT_INITIALIZING = ERROR_ALREADY_INITIALIZED
const WN_NO_MORE_DEVICES = ERROR_NO_MORE_DEVICES
const WN_NOT_CONNECTED = ERROR_NOT_CONNECTED
const WN_OPEN_FILES = ERROR_OPEN_FILES
const WN_DEVICE_IN_USE = ERROR_DEVICE_IN_USE
const WN_BAD_NETNAME = ERROR_BAD_NET_NAME
const WN_BAD_LOCALNAME = ERROR_BAD_DEVICE
const WN_ALREADY_CONNECTED = ERROR_ALREADY_ASSIGNED
const WN_DEVICE_ERROR = ERROR_GEN_FAILURE
const WN_CONNECTION_CLOSED = ERROR_CONNECTION_UNAVAIL
const WN_NO_NET_OR_BAD_PATH = ERROR_NO_NET_OR_BAD_PATH
const WN_BAD_PROVIDER = ERROR_BAD_PROVIDER
const WN_CANNOT_OPEN_PROFILE = ERROR_CANNOT_OPEN_PROFILE
const WN_BAD_PROFILE = ERROR_BAD_PROFILE
const WN_BAD_DEV_TYPE = ERROR_BAD_DEV_TYPE
const WN_DEVICE_ALREADY_REMEMBERED = ERROR_DEVICE_ALREADY_REMEMBERED
const WN_CONNECTED_OTHER_PASSWORD = ERROR_CONNECTED_OTHER_PASSWORD
const WN_CONNECTED_OTHER_PASSWORD_DEFAULT = ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT
const WN_NO_MORE_ENTRIES = ERROR_NO_MORE_ITEMS
const WN_NOT_CONTAINER = ERROR_NOT_CONTAINER
const WN_NOT_AUTHENTICATED = ERROR_NOT_AUTHENTICATED
const WN_NOT_LOGGED_ON = ERROR_NOT_LOGGED_ON
const WN_NOT_VALIDATED = ERROR_NO_LOGON_SERVERS

type _NETCONNECTINFOSTRUCT
 cbStructure as DWORD
 dwFlags as DWORD
 dwSpeed as DWORD
 dwDelay as DWORD
 dwOptDataSize as DWORD
end type

type NETCONNECTINFOSTRUCT as _NETCONNECTINFOSTRUCT
type LPNETCONNECTINFOSTRUCT as _NETCONNECTINFOSTRUCT ptr
const WNCON_FORNETCARD = &h00000001
const WNCON_NOTROUTED = &h00000002
const WNCON_SLOWLINK = &h00000004
const WNCON_DYNAMIC = &h00000008
declare function MultinetGetConnectionPerformanceA(byval lpNetResource as LPNETRESOURCEA, byval lpNetConnectInfoStruct as LPNETCONNECTINFOSTRUCT) as DWORD

 declare function MultinetGetConnectionPerformance alias "MultinetGetConnectionPerformanceA"(byval lpNetResource as LPNETRESOURCEA, byval lpNetConnectInfoStruct as LPNETCONNECTINFOSTRUCT) as DWORD

declare function MultinetGetConnectionPerformanceW(byval lpNetResource as LPNETRESOURCEW, byval lpNetConnectInfoStruct as LPNETCONNECTINFOSTRUCT) as DWORD


end extern







#inclib "advapi32"


extern "Windows"



const SERVICE_NO_CHANGE = &hffffffff
const SERVICE_ACTIVE = &h00000001
const SERVICE_INACTIVE = &h00000002
const SERVICE_STATE_ALL = SERVICE_ACTIVE or SERVICE_INACTIVE
const SERVICE_CONTROL_STOP = &h00000001
const SERVICE_CONTROL_PAUSE = &h00000002
const SERVICE_CONTROL_CONTINUE = &h00000003
const SERVICE_CONTROL_INTERROGATE = &h00000004
const SERVICE_CONTROL_SHUTDOWN = &h00000005
const SERVICE_CONTROL_PARAMCHANGE = &h00000006
const SERVICE_CONTROL_NETBINDADD = &h00000007
const SERVICE_CONTROL_NETBINDREMOVE = &h00000008
const SERVICE_CONTROL_NETBINDENABLE = &h00000009
const SERVICE_CONTROL_NETBINDDISABLE = &h0000000A
const SERVICE_CONTROL_DEVICEEVENT = &h0000000B
const SERVICE_CONTROL_HARDWAREPROFILECHANGE = &h0000000C
const SERVICE_CONTROL_POWEREVENT = &h0000000D
const SERVICE_CONTROL_SESSIONCHANGE = &h0000000E
const SERVICE_STOPPED = &h00000001
const SERVICE_START_PENDING = &h00000002
const SERVICE_STOP_PENDING = &h00000003
const SERVICE_RUNNING = &h00000004
const SERVICE_CONTINUE_PENDING = &h00000005
const SERVICE_PAUSE_PENDING = &h00000006
const SERVICE_PAUSED = &h00000007
const SERVICE_ACCEPT_STOP = &h00000001
const SERVICE_ACCEPT_PAUSE_CONTINUE = &h00000002
const SERVICE_ACCEPT_SHUTDOWN = &h00000004
const SERVICE_ACCEPT_PARAMCHANGE = &h00000008
const SERVICE_ACCEPT_NETBINDCHANGE = &h00000010
const SERVICE_ACCEPT_HARDWAREPROFILECHANGE = &h00000020
const SERVICE_ACCEPT_POWEREVENT = &h00000040
const SERVICE_ACCEPT_SESSIONCHANGE = &h00000080
const SC_MANAGER_CONNECT = &h0001
const SC_MANAGER_CREATE_SERVICE = &h0002
const SC_MANAGER_ENUMERATE_SERVICE = &h0004
const SC_MANAGER_LOCK = &h0008
const SC_MANAGER_QUERY_LOCK_STATUS = &h0010
const SC_MANAGER_MODIFY_BOOT_CONFIG = &h0020
const SC_MANAGER_ALL_ACCESS = (((((STANDARD_RIGHTS_REQUIRED or SC_MANAGER_CONNECT) or SC_MANAGER_CREATE_SERVICE) or SC_MANAGER_ENUMERATE_SERVICE) or SC_MANAGER_LOCK) or SC_MANAGER_QUERY_LOCK_STATUS) or SC_MANAGER_MODIFY_BOOT_CONFIG
const SERVICE_QUERY_CONFIG = &h0001
const SERVICE_CHANGE_CONFIG = &h0002
const SERVICE_QUERY_STATUS = &h0004
const SERVICE_ENUMERATE_DEPENDENTS = &h0008
const SERVICE_START = &h0010
const SERVICE_STOP = &h0020
const SERVICE_PAUSE_CONTINUE = &h0040
const SERVICE_INTERROGATE = &h0080
const SERVICE_USER_DEFINED_CONTROL = &h0100
const SERVICE_ALL_ACCESS = ((((((((STANDARD_RIGHTS_REQUIRED or SERVICE_QUERY_CONFIG) or SERVICE_CHANGE_CONFIG) or SERVICE_QUERY_STATUS) or SERVICE_ENUMERATE_DEPENDENTS) or SERVICE_START) or SERVICE_STOP) or SERVICE_PAUSE_CONTINUE) or SERVICE_INTERROGATE) or SERVICE_USER_DEFINED_CONTROL
const SERVICE_RUNS_IN_SYSTEM_PROCESS = &h00000001
const SERVICE_CONFIG_DESCRIPTION = 1
const SERVICE_CONFIG_FAILURE_ACTIONS = 2

type _SERVICE_DESCRIPTIONA
 lpDescription as LPSTR
end type

type SERVICE_DESCRIPTIONA as _SERVICE_DESCRIPTIONA
type LPSERVICE_DESCRIPTIONA as _SERVICE_DESCRIPTIONA ptr

type _SERVICE_DESCRIPTIONW
 lpDescription as LPWSTR
end type

type SERVICE_DESCRIPTIONW as _SERVICE_DESCRIPTIONW
type LPSERVICE_DESCRIPTIONW as _SERVICE_DESCRIPTIONW ptr

 type SERVICE_DESCRIPTION as SERVICE_DESCRIPTIONA
 type LPSERVICE_DESCRIPTION as LPSERVICE_DESCRIPTIONA

type _SC_ACTION_TYPE as long
enum
 SC_ACTION_NONE = 0
 SC_ACTION_RESTART = 1
 SC_ACTION_REBOOT = 2
 SC_ACTION_RUN_COMMAND = 3
end enum

type SC_ACTION_TYPE as _SC_ACTION_TYPE

type _SC_ACTION
 as SC_ACTION_TYPE Type
 Delay as DWORD
end type

type SC_ACTION as _SC_ACTION
type LPSC_ACTION as _SC_ACTION ptr

type _SERVICE_FAILURE_ACTIONSA
 dwResetPeriod as DWORD
 lpRebootMsg as LPSTR
 lpCommand as LPSTR
 cActions as DWORD
 lpsaActions as SC_ACTION ptr
end type

type SERVICE_FAILURE_ACTIONSA as _SERVICE_FAILURE_ACTIONSA
type LPSERVICE_FAILURE_ACTIONSA as _SERVICE_FAILURE_ACTIONSA ptr

type _SERVICE_FAILURE_ACTIONSW
 dwResetPeriod as DWORD
 lpRebootMsg as LPWSTR
 lpCommand as LPWSTR
 cActions as DWORD
 lpsaActions as SC_ACTION ptr
end type

type SERVICE_FAILURE_ACTIONSW as _SERVICE_FAILURE_ACTIONSW
type LPSERVICE_FAILURE_ACTIONSW as _SERVICE_FAILURE_ACTIONSW ptr

 type SERVICE_FAILURE_ACTIONS as SERVICE_FAILURE_ACTIONSA
 type LPSERVICE_FAILURE_ACTIONS as LPSERVICE_FAILURE_ACTIONSA

type SC_HANDLE__
 unused as long
end type

type SC_HANDLE as SC_HANDLE__ ptr
type LPSC_HANDLE as SC_HANDLE ptr

type SERVICE_STATUS_HANDLE__
 unused as long
end type

type SERVICE_STATUS_HANDLE as SERVICE_STATUS_HANDLE__ ptr

type _SC_STATUS_TYPE as long
enum
 SC_STATUS_PROCESS_INFO = 0
end enum

type SC_STATUS_TYPE as _SC_STATUS_TYPE

type _SC_ENUM_TYPE as long
enum
 SC_ENUM_PROCESS_INFO = 0
end enum

type SC_ENUM_TYPE as _SC_ENUM_TYPE

type _SERVICE_STATUS
 dwServiceType as DWORD
 dwCurrentState as DWORD
 dwControlsAccepted as DWORD
 dwWin32ExitCode as DWORD
 dwServiceSpecificExitCode as DWORD
 dwCheckPoint as DWORD
 dwWaitHint as DWORD
end type

type SERVICE_STATUS as _SERVICE_STATUS
type LPSERVICE_STATUS as _SERVICE_STATUS ptr

type _SERVICE_STATUS_PROCESS
 dwServiceType as DWORD
 dwCurrentState as DWORD
 dwControlsAccepted as DWORD
 dwWin32ExitCode as DWORD
 dwServiceSpecificExitCode as DWORD
 dwCheckPoint as DWORD
 dwWaitHint as DWORD
 dwProcessId as DWORD
 dwServiceFlags as DWORD
end type

type SERVICE_STATUS_PROCESS as _SERVICE_STATUS_PROCESS
type LPSERVICE_STATUS_PROCESS as _SERVICE_STATUS_PROCESS ptr

type _ENUM_SERVICE_STATUSA
 lpServiceName as LPSTR
 lpDisplayName as LPSTR
 ServiceStatus as SERVICE_STATUS
end type

type ENUM_SERVICE_STATUSA as _ENUM_SERVICE_STATUSA
type LPENUM_SERVICE_STATUSA as _ENUM_SERVICE_STATUSA ptr

type _ENUM_SERVICE_STATUSW
 lpServiceName as LPWSTR
 lpDisplayName as LPWSTR
 ServiceStatus as SERVICE_STATUS
end type

type ENUM_SERVICE_STATUSW as _ENUM_SERVICE_STATUSW
type LPENUM_SERVICE_STATUSW as _ENUM_SERVICE_STATUSW ptr

 type ENUM_SERVICE_STATUS as ENUM_SERVICE_STATUSA
 type LPENUM_SERVICE_STATUS as LPENUM_SERVICE_STATUSA

type _ENUM_SERVICE_STATUS_PROCESSA
 lpServiceName as LPSTR
 lpDisplayName as LPSTR
 ServiceStatusProcess as SERVICE_STATUS_PROCESS
end type

type ENUM_SERVICE_STATUS_PROCESSA as _ENUM_SERVICE_STATUS_PROCESSA
type LPENUM_SERVICE_STATUS_PROCESSA as _ENUM_SERVICE_STATUS_PROCESSA ptr

type _ENUM_SERVICE_STATUS_PROCESSW
 lpServiceName as LPWSTR
 lpDisplayName as LPWSTR
 ServiceStatusProcess as SERVICE_STATUS_PROCESS
end type

type ENUM_SERVICE_STATUS_PROCESSW as _ENUM_SERVICE_STATUS_PROCESSW
type LPENUM_SERVICE_STATUS_PROCESSW as _ENUM_SERVICE_STATUS_PROCESSW ptr

 type ENUM_SERVICE_STATUS_PROCESS as ENUM_SERVICE_STATUS_PROCESSA
 type LPENUM_SERVICE_STATUS_PROCESS as LPENUM_SERVICE_STATUS_PROCESSA

type SC_LOCK as LPVOID

type _QUERY_SERVICE_LOCK_STATUSA
 fIsLocked as DWORD
 lpLockOwner as LPSTR
 dwLockDuration as DWORD
end type

type QUERY_SERVICE_LOCK_STATUSA as _QUERY_SERVICE_LOCK_STATUSA
type LPQUERY_SERVICE_LOCK_STATUSA as _QUERY_SERVICE_LOCK_STATUSA ptr

type _QUERY_SERVICE_LOCK_STATUSW
 fIsLocked as DWORD
 lpLockOwner as LPWSTR
 dwLockDuration as DWORD
end type

type QUERY_SERVICE_LOCK_STATUSW as _QUERY_SERVICE_LOCK_STATUSW
type LPQUERY_SERVICE_LOCK_STATUSW as _QUERY_SERVICE_LOCK_STATUSW ptr

 type QUERY_SERVICE_LOCK_STATUS as QUERY_SERVICE_LOCK_STATUSA
 type LPQUERY_SERVICE_LOCK_STATUS as LPQUERY_SERVICE_LOCK_STATUSA

type _QUERY_SERVICE_CONFIGA
 dwServiceType as DWORD
 dwStartType as DWORD
 dwErrorControl as DWORD
 lpBinaryPathName as LPSTR
 lpLoadOrderGroup as LPSTR
 dwTagId as DWORD
 lpDependencies as LPSTR
 lpServiceStartName as LPSTR
 lpDisplayName as LPSTR
end type

type QUERY_SERVICE_CONFIGA as _QUERY_SERVICE_CONFIGA
type LPQUERY_SERVICE_CONFIGA as _QUERY_SERVICE_CONFIGA ptr

type _QUERY_SERVICE_CONFIGW
 dwServiceType as DWORD
 dwStartType as DWORD
 dwErrorControl as DWORD
 lpBinaryPathName as LPWSTR
 lpLoadOrderGroup as LPWSTR
 dwTagId as DWORD
 lpDependencies as LPWSTR
 lpServiceStartName as LPWSTR
 lpDisplayName as LPWSTR
end type

type QUERY_SERVICE_CONFIGW as _QUERY_SERVICE_CONFIGW
type LPQUERY_SERVICE_CONFIGW as _QUERY_SERVICE_CONFIGW ptr

 type QUERY_SERVICE_CONFIG as QUERY_SERVICE_CONFIGA
 type LPQUERY_SERVICE_CONFIG as LPQUERY_SERVICE_CONFIGA

type LPSERVICE_MAIN_FUNCTIONW as sub(byval dwNumServicesArgs as DWORD, byval lpServiceArgVectors as LPWSTR ptr)
type LPSERVICE_MAIN_FUNCTIONA as sub(byval dwNumServicesArgs as DWORD, byval lpServiceArgVectors as LPSTR ptr)

 type LPSERVICE_MAIN_FUNCTION as LPSERVICE_MAIN_FUNCTIONA

type _SERVICE_TABLE_ENTRYA
 lpServiceName as LPSTR
 lpServiceProc as LPSERVICE_MAIN_FUNCTIONA
end type

type SERVICE_TABLE_ENTRYA as _SERVICE_TABLE_ENTRYA
type LPSERVICE_TABLE_ENTRYA as _SERVICE_TABLE_ENTRYA ptr

type _SERVICE_TABLE_ENTRYW
 lpServiceName as LPWSTR
 lpServiceProc as LPSERVICE_MAIN_FUNCTIONW
end type

type SERVICE_TABLE_ENTRYW as _SERVICE_TABLE_ENTRYW
type LPSERVICE_TABLE_ENTRYW as _SERVICE_TABLE_ENTRYW ptr

 type SERVICE_TABLE_ENTRY as SERVICE_TABLE_ENTRYA
 type LPSERVICE_TABLE_ENTRY as LPSERVICE_TABLE_ENTRYA

type LPHANDLER_FUNCTION as sub(byval dwControl as DWORD)
type LPHANDLER_FUNCTION_EX as function(byval dwControl as DWORD, byval dwEventType as DWORD, byval lpEventData as LPVOID, byval lpContext as LPVOID) as DWORD
declare function ChangeServiceConfigA(byval hService as SC_HANDLE, byval dwServiceType as DWORD, byval dwStartType as DWORD, byval dwErrorControl as DWORD, byval lpBinaryPathName as LPCSTR, byval lpLoadOrderGroup as LPCSTR, byval lpdwTagId as LPDWORD, byval lpDependencies as LPCSTR, byval lpServiceStartName as LPCSTR, byval lpPassword as LPCSTR, byval lpDisplayName as LPCSTR) as WINBOOL

 declare function ChangeServiceConfig alias "ChangeServiceConfigA"(byval hService as SC_HANDLE, byval dwServiceType as DWORD, byval dwStartType as DWORD, byval dwErrorControl as DWORD, byval lpBinaryPathName as LPCSTR, byval lpLoadOrderGroup as LPCSTR, byval lpdwTagId as LPDWORD, byval lpDependencies as LPCSTR, byval lpServiceStartName as LPCSTR, byval lpPassword as LPCSTR, byval lpDisplayName as LPCSTR) as WINBOOL

declare function ChangeServiceConfigW(byval hService as SC_HANDLE, byval dwServiceType as DWORD, byval dwStartType as DWORD, byval dwErrorControl as DWORD, byval lpBinaryPathName as LPCWSTR, byval lpLoadOrderGroup as LPCWSTR, byval lpdwTagId as LPDWORD, byval lpDependencies as LPCWSTR, byval lpServiceStartName as LPCWSTR, byval lpPassword as LPCWSTR, byval lpDisplayName as LPCWSTR) as WINBOOL


declare function ChangeServiceConfig2A(byval hService as SC_HANDLE, byval dwInfoLevel as DWORD, byval lpInfo as LPVOID) as WINBOOL

 declare function ChangeServiceConfig2 alias "ChangeServiceConfig2A"(byval hService as SC_HANDLE, byval dwInfoLevel as DWORD, byval lpInfo as LPVOID) as WINBOOL

declare function ChangeServiceConfig2W(byval hService as SC_HANDLE, byval dwInfoLevel as DWORD, byval lpInfo as LPVOID) as WINBOOL


declare function CloseServiceHandle(byval hSCObject as SC_HANDLE) as WINBOOL
declare function ControlService(byval hService as SC_HANDLE, byval dwControl as DWORD, byval lpServiceStatus as LPSERVICE_STATUS) as WINBOOL
declare function CreateServiceA(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCSTR, byval lpDisplayName as LPCSTR, byval dwDesiredAccess as DWORD, byval dwServiceType as DWORD, byval dwStartType as DWORD, byval dwErrorControl as DWORD, byval lpBinaryPathName as LPCSTR, byval lpLoadOrderGroup as LPCSTR, byval lpdwTagId as LPDWORD, byval lpDependencies as LPCSTR, byval lpServiceStartName as LPCSTR, byval lpPassword as LPCSTR) as SC_HANDLE

 declare function CreateService alias "CreateServiceA"(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCSTR, byval lpDisplayName as LPCSTR, byval dwDesiredAccess as DWORD, byval dwServiceType as DWORD, byval dwStartType as DWORD, byval dwErrorControl as DWORD, byval lpBinaryPathName as LPCSTR, byval lpLoadOrderGroup as LPCSTR, byval lpdwTagId as LPDWORD, byval lpDependencies as LPCSTR, byval lpServiceStartName as LPCSTR, byval lpPassword as LPCSTR) as SC_HANDLE

declare function CreateServiceW(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCWSTR, byval lpDisplayName as LPCWSTR, byval dwDesiredAccess as DWORD, byval dwServiceType as DWORD, byval dwStartType as DWORD, byval dwErrorControl as DWORD, byval lpBinaryPathName as LPCWSTR, byval lpLoadOrderGroup as LPCWSTR, byval lpdwTagId as LPDWORD, byval lpDependencies as LPCWSTR, byval lpServiceStartName as LPCWSTR, byval lpPassword as LPCWSTR) as SC_HANDLE


declare function DeleteService(byval hService as SC_HANDLE) as WINBOOL
declare function EnumDependentServicesA(byval hService as SC_HANDLE, byval dwServiceState as DWORD, byval lpServices as LPENUM_SERVICE_STATUSA, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD) as WINBOOL

 declare function EnumDependentServices alias "EnumDependentServicesA"(byval hService as SC_HANDLE, byval dwServiceState as DWORD, byval lpServices as LPENUM_SERVICE_STATUSA, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD) as WINBOOL

declare function EnumDependentServicesW(byval hService as SC_HANDLE, byval dwServiceState as DWORD, byval lpServices as LPENUM_SERVICE_STATUSW, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD) as WINBOOL


declare function EnumServicesStatusA(byval hSCManager as SC_HANDLE, byval dwServiceType as DWORD, byval dwServiceState as DWORD, byval lpServices as LPENUM_SERVICE_STATUSA, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD, byval lpResumeHandle as LPDWORD) as WINBOOL

 declare function EnumServicesStatus alias "EnumServicesStatusA"(byval hSCManager as SC_HANDLE, byval dwServiceType as DWORD, byval dwServiceState as DWORD, byval lpServices as LPENUM_SERVICE_STATUSA, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD, byval lpResumeHandle as LPDWORD) as WINBOOL

declare function EnumServicesStatusW(byval hSCManager as SC_HANDLE, byval dwServiceType as DWORD, byval dwServiceState as DWORD, byval lpServices as LPENUM_SERVICE_STATUSW, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD, byval lpResumeHandle as LPDWORD) as WINBOOL


declare function EnumServicesStatusExA(byval hSCManager as SC_HANDLE, byval InfoLevel as SC_ENUM_TYPE, byval dwServiceType as DWORD, byval dwServiceState as DWORD, byval lpServices as LPBYTE, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD, byval lpResumeHandle as LPDWORD, byval pszGroupName as LPCSTR) as WINBOOL

 declare function EnumServicesStatusEx alias "EnumServicesStatusExA"(byval hSCManager as SC_HANDLE, byval InfoLevel as SC_ENUM_TYPE, byval dwServiceType as DWORD, byval dwServiceState as DWORD, byval lpServices as LPBYTE, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD, byval lpResumeHandle as LPDWORD, byval pszGroupName as LPCSTR) as WINBOOL

declare function EnumServicesStatusExW(byval hSCManager as SC_HANDLE, byval InfoLevel as SC_ENUM_TYPE, byval dwServiceType as DWORD, byval dwServiceState as DWORD, byval lpServices as LPBYTE, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD, byval lpResumeHandle as LPDWORD, byval pszGroupName as LPCWSTR) as WINBOOL


declare function GetServiceKeyNameA(byval hSCManager as SC_HANDLE, byval lpDisplayName as LPCSTR, byval lpServiceName as LPSTR, byval lpcchBuffer as LPDWORD) as WINBOOL

 declare function GetServiceKeyName alias "GetServiceKeyNameA"(byval hSCManager as SC_HANDLE, byval lpDisplayName as LPCSTR, byval lpServiceName as LPSTR, byval lpcchBuffer as LPDWORD) as WINBOOL

declare function GetServiceKeyNameW(byval hSCManager as SC_HANDLE, byval lpDisplayName as LPCWSTR, byval lpServiceName as LPWSTR, byval lpcchBuffer as LPDWORD) as WINBOOL


declare function GetServiceDisplayNameA(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCSTR, byval lpDisplayName as LPSTR, byval lpcchBuffer as LPDWORD) as WINBOOL

 declare function GetServiceDisplayName alias "GetServiceDisplayNameA"(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCSTR, byval lpDisplayName as LPSTR, byval lpcchBuffer as LPDWORD) as WINBOOL

declare function GetServiceDisplayNameW(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCWSTR, byval lpDisplayName as LPWSTR, byval lpcchBuffer as LPDWORD) as WINBOOL


declare function LockServiceDatabase(byval hSCManager as SC_HANDLE) as SC_LOCK
declare function NotifyBootConfigStatus(byval BootAcceptable as WINBOOL) as WINBOOL
declare function OpenSCManagerA(byval lpMachineName as LPCSTR, byval lpDatabaseName as LPCSTR, byval dwDesiredAccess as DWORD) as SC_HANDLE

 declare function OpenSCManager alias "OpenSCManagerA"(byval lpMachineName as LPCSTR, byval lpDatabaseName as LPCSTR, byval dwDesiredAccess as DWORD) as SC_HANDLE

declare function OpenSCManagerW(byval lpMachineName as LPCWSTR, byval lpDatabaseName as LPCWSTR, byval dwDesiredAccess as DWORD) as SC_HANDLE


declare function OpenServiceA(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCSTR, byval dwDesiredAccess as DWORD) as SC_HANDLE

 declare function OpenService alias "OpenServiceA"(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCSTR, byval dwDesiredAccess as DWORD) as SC_HANDLE

declare function OpenServiceW(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCWSTR, byval dwDesiredAccess as DWORD) as SC_HANDLE


declare function QueryServiceConfigA(byval hService as SC_HANDLE, byval lpServiceConfig as LPQUERY_SERVICE_CONFIGA, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL

 declare function QueryServiceConfig alias "QueryServiceConfigA"(byval hService as SC_HANDLE, byval lpServiceConfig as LPQUERY_SERVICE_CONFIGA, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL

declare function QueryServiceConfigW(byval hService as SC_HANDLE, byval lpServiceConfig as LPQUERY_SERVICE_CONFIGW, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL


declare function QueryServiceConfig2A(byval hService as SC_HANDLE, byval dwInfoLevel as DWORD, byval lpBuffer as LPBYTE, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL

 declare function QueryServiceConfig2 alias "QueryServiceConfig2A"(byval hService as SC_HANDLE, byval dwInfoLevel as DWORD, byval lpBuffer as LPBYTE, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL

declare function QueryServiceConfig2W(byval hService as SC_HANDLE, byval dwInfoLevel as DWORD, byval lpBuffer as LPBYTE, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL


declare function QueryServiceLockStatusA(byval hSCManager as SC_HANDLE, byval lpLockStatus as LPQUERY_SERVICE_LOCK_STATUSA, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL

 declare function QueryServiceLockStatus alias "QueryServiceLockStatusA"(byval hSCManager as SC_HANDLE, byval lpLockStatus as LPQUERY_SERVICE_LOCK_STATUSA, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL

declare function QueryServiceLockStatusW(byval hSCManager as SC_HANDLE, byval lpLockStatus as LPQUERY_SERVICE_LOCK_STATUSW, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL


declare function QueryServiceObjectSecurity(byval hService as SC_HANDLE, byval dwSecurityInformation as SECURITY_INFORMATION, byval lpSecurityDescriptor as PSECURITY_DESCRIPTOR, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL
declare function QueryServiceStatus(byval hService as SC_HANDLE, byval lpServiceStatus as LPSERVICE_STATUS) as WINBOOL
declare function QueryServiceStatusEx(byval hService as SC_HANDLE, byval InfoLevel as SC_STATUS_TYPE, byval lpBuffer as LPBYTE, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL
declare function RegisterServiceCtrlHandlerA(byval lpServiceName as LPCSTR, byval lpHandlerProc as LPHANDLER_FUNCTION) as SERVICE_STATUS_HANDLE

 declare function RegisterServiceCtrlHandler alias "RegisterServiceCtrlHandlerA"(byval lpServiceName as LPCSTR, byval lpHandlerProc as LPHANDLER_FUNCTION) as SERVICE_STATUS_HANDLE

declare function RegisterServiceCtrlHandlerW(byval lpServiceName as LPCWSTR, byval lpHandlerProc as LPHANDLER_FUNCTION) as SERVICE_STATUS_HANDLE


declare function RegisterServiceCtrlHandlerExA(byval lpServiceName as LPCSTR, byval lpHandlerProc as LPHANDLER_FUNCTION_EX, byval lpContext as LPVOID) as SERVICE_STATUS_HANDLE

 declare function RegisterServiceCtrlHandlerEx alias "RegisterServiceCtrlHandlerExA"(byval lpServiceName as LPCSTR, byval lpHandlerProc as LPHANDLER_FUNCTION_EX, byval lpContext as LPVOID) as SERVICE_STATUS_HANDLE

declare function RegisterServiceCtrlHandlerExW(byval lpServiceName as LPCWSTR, byval lpHandlerProc as LPHANDLER_FUNCTION_EX, byval lpContext as LPVOID) as SERVICE_STATUS_HANDLE


declare function SetServiceObjectSecurity(byval hService as SC_HANDLE, byval dwSecurityInformation as SECURITY_INFORMATION, byval lpSecurityDescriptor as PSECURITY_DESCRIPTOR) as WINBOOL
declare function SetServiceStatus(byval hServiceStatus as SERVICE_STATUS_HANDLE, byval lpServiceStatus as LPSERVICE_STATUS) as WINBOOL
declare function StartServiceCtrlDispatcherA(byval lpServiceStartTable as const SERVICE_TABLE_ENTRYA ptr) as WINBOOL

 declare function StartServiceCtrlDispatcher alias "StartServiceCtrlDispatcherA"(byval lpServiceStartTable as const SERVICE_TABLE_ENTRYA ptr) as WINBOOL

declare function StartServiceCtrlDispatcherW(byval lpServiceStartTable as const SERVICE_TABLE_ENTRYW ptr) as WINBOOL


declare function StartServiceA(byval hService as SC_HANDLE, byval dwNumServiceArgs as DWORD, byval lpServiceArgVectors as LPCSTR ptr) as WINBOOL

 declare function StartService alias "StartServiceA"(byval hService as SC_HANDLE, byval dwNumServiceArgs as DWORD, byval lpServiceArgVectors as LPCSTR ptr) as WINBOOL

declare function StartServiceW(byval hService as SC_HANDLE, byval dwNumServiceArgs as DWORD, byval lpServiceArgVectors as LPCWSTR ptr) as WINBOOL


declare function UnlockServiceDatabase(byval ScLock as SC_LOCK) as WINBOOL













end extern



type _MODEMDEVCAPS
 dwActualSize as DWORD
 dwRequiredSize as DWORD
 dwDevSpecificOffset as DWORD
 dwDevSpecificSize as DWORD
 dwModemProviderVersion as DWORD
 dwModemManufacturerOffset as DWORD
 dwModemManufacturerSize as DWORD
 dwModemModelOffset as DWORD
 dwModemModelSize as DWORD
 dwModemVersionOffset as DWORD
 dwModemVersionSize as DWORD
 dwDialOptions as DWORD
 dwCallSetupFailTimer as DWORD
 dwInactivityTimeout as DWORD
 dwSpeakerVolume as DWORD
 dwSpeakerMode as DWORD
 dwModemOptions as DWORD
 dwMaxDTERate as DWORD
 dwMaxDCERate as DWORD
 abVariablePortion(0 to 0) as UBYTE
end type

type MODEMDEVCAPS as _MODEMDEVCAPS
type PMODEMDEVCAPS as _MODEMDEVCAPS ptr
type LPMODEMDEVCAPS as _MODEMDEVCAPS ptr

type _MODEMSETTINGS
 dwActualSize as DWORD
 dwRequiredSize as DWORD
 dwDevSpecificOffset as DWORD
 dwDevSpecificSize as DWORD
 dwCallSetupFailTimer as DWORD
 dwInactivityTimeout as DWORD
 dwSpeakerVolume as DWORD
 dwSpeakerMode as DWORD
 dwPreferredModemOptions as DWORD
 dwNegotiatedModemOptions as DWORD
 dwNegotiatedDCERate as DWORD
 abVariablePortion(0 to 0) as UBYTE
end type

type MODEMSETTINGS as _MODEMSETTINGS
type PMODEMSETTINGS as _MODEMSETTINGS ptr
type LPMODEMSETTINGS as _MODEMSETTINGS ptr

const DIALOPTION_BILLING = &h00000040
const DIALOPTION_QUIET = &h00000080
const DIALOPTION_DIALTONE = &h00000100
const MDMVOLFLAG_LOW = &h00000001
const MDMVOLFLAG_MEDIUM = &h00000002
const MDMVOLFLAG_HIGH = &h00000004
const MDMVOL_LOW = &h000000000
const MDMVOL_MEDIUM = &h00000001
const MDMVOL_HIGH = &h00000002
const MDMSPKRFLAG_OFF = &h00000001
const MDMSPKRFLAG_DIAL = &h00000002
const MDMSPKRFLAG_ON = &h00000004
const MDMSPKRFLAG_CALLSETUP = &h00000008
const MDMSPKR_OFF = &h000000000
const MDMSPKR_DIAL = &h00000001
const MDMSPKR_ON = &h00000002
const MDMSPKR_CALLSETUP = &h00000003
const MDM_COMPRESSION = &h00000001
const MDM_ERROR_CONTROL = &h00000002
const MDM_FORCED_EC = &h00000004
const MDM_CELLULAR = &h00000008
const MDM_FLOWCONTROL_HARD = &h00000010
const MDM_FLOWCONTROL_SOFT = &h00000020
const MDM_CCITT_OVERRIDE = &h00000040
const MDM_SPEED_ADJUST = &h00000080
const MDM_TONE_DIAL = &h00000100
const MDM_BLIND_DIAL = &h00000200
const MDM_V23_OVERRIDE = &h00000400
const MDM_DIAGNOSTICS = &h00000800
const MDM_MASK_BEARERMODE = &h0000f000
const MDM_SHIFT_BEARERMODE = 12
const MDM_MASK_PROTOCOLID = &h000f0000
const MDM_SHIFT_PROTOCOLID = 16
const MDM_MASK_PROTOCOLDATA = &h0ff00000
const MDM_SHIFT_PROTOCOLDATA = 20
const MDM_MASK_PROTOCOLINFO = MDM_MASK_PROTOCOLID or MDM_MASK_PROTOCOLDATA
const MDM_SHIFT_PROTOCOLINFO = MDM_SHIFT_PROTOCOLID
const MDM_MASK_EXTENDEDINFO = MDM_MASK_BEARERMODE or MDM_MASK_PROTOCOLINFO
const MDM_SHIFT_EXTENDEDINFO = MDM_SHIFT_BEARERMODE
const MDM_BEARERMODE_ANALOG = &h00
const MDM_BEARERMODE_ISDN = &h1
const MDM_BEARERMODE_GSM = &h2
const MDM_PROTOCOLID_DEFAULT = &h00
const MDM_PROTOCOLID_HDLCPPP = &h1
const MDM_PROTOCOLID_V128 = &h2
const MDM_PROTOCOLID_X75 = &h3
const MDM_PROTOCOLID_V110 = &h4
const MDM_PROTOCOLID_V120 = &h5
const MDM_PROTOCOLID_AUTO = &h6
const MDM_PROTOCOLID_ANALOG = &h7
const MDM_PROTOCOLID_GPRS = &h8
const MDM_PROTOCOLID_PIAFS = &h9
const MDM_SHIFT_HDLCPPP_SPEED = &h00
const MDM_MASK_HDLCPPP_SPEED = &h7
const MDM_HDLCPPP_SPEED_DEFAULT = &h00
const MDM_HDLCPPP_SPEED_64K = &h1
const MDM_HDLCPPP_SPEED_56K = &h2
const MDM_SHIFT_HDLCPPP_AUTH = &h3
const MDM_MASK_HDLCPPP_AUTH = &h7 shl 3
const MDM_HDLCPPP_AUTH_DEFAULT = &h00
const MDM_HDLCPPP_AUTH_NONE = &h1
const MDM_HDLCPPP_AUTH_PAP = &h2
const MDM_HDLCPPP_AUTH_CHAP = &h3
const MDM_HDLCPPP_AUTH_MSCHAP = &h4
const MDM_SHIFT_HDLCPPP_ML = &h6
const MDM_MASK_HDLCPPP_ML = &h3 shl 6
const MDM_HDLCPPP_ML_DEFAULT = &h00
const MDM_HDLCPPP_ML_NONE = &h1
const MDM_HDLCPPP_ML_2 = &h2
const MDM_SHIFT_V120_SPEED = &h00
const MDM_MASK_V120_SPEED = &h7
const MDM_V120_SPEED_DEFAULT = &h00
const MDM_V120_SPEED_64K = &h1
const MDM_V120_SPEED_56K = &h2
const MDM_SHIFT_V120_ML = &h6
const MDM_MASK_V120_ML = &h3 shl 6
const MDM_V120_ML_DEFAULT = &h00
const MDM_V120_ML_NONE = &h1
const MDM_V120_ML_2 = &h2
const MDM_SHIFT_X75_DATA = &h00
const MDM_MASK_X75_DATA = &h7
const MDM_X75_DATA_DEFAULT = &h00
const MDM_X75_DATA_64K = &h1
const MDM_X75_DATA_128K = &h2
const MDM_X75_DATA_T_70 = &h3
const MDM_X75_DATA_BTX = &h4
const MDM_SHIFT_V110_SPEED = &h00
const MDM_MASK_V110_SPEED = &hf
const MDM_V110_SPEED_DEFAULT = &h00
const MDM_V110_SPEED_1DOT2K = &h1
const MDM_V110_SPEED_2DOT4K = &h2
const MDM_V110_SPEED_4DOT8K = &h3
const MDM_V110_SPEED_9DOT6K = &h4
const MDM_V110_SPEED_12DOT0K = &h5
const MDM_V110_SPEED_14DOT4K = &h6
const MDM_V110_SPEED_19DOT2K = &h7
const MDM_V110_SPEED_28DOT8K = &h8
const MDM_V110_SPEED_38DOT4K = &h9
const MDM_V110_SPEED_57DOT6K = &hA
const MDM_SHIFT_AUTO_SPEED = &h00
const MDM_MASK_AUTO_SPEED = &h7
const MDM_AUTO_SPEED_DEFAULT = &h00
const MDM_SHIFT_AUTO_ML = &h6
const MDM_MASK_AUTO_ML = &h3 shl 6
const MDM_AUTO_ML_DEFAULT = &h00
const MDM_AUTO_ML_NONE = &h1
const MDM_AUTO_ML_2 = &h2
const MDM_ANALOG_RLP_ON = &h00
const MDM_ANALOG_RLP_OFF = &h1
const MDM_ANALOG_V34 = &h2
const MDM_PIAFS_INCOMING = 0
const MDM_PIAFS_OUTGOING = 1


#inclib "imm32"


extern "Windows"


type HIMC__
 unused as long
end type

type HIMC as HIMC__ ptr

type HIMCC__
 unused as long
end type

type HIMCC as HIMCC__ ptr
type LPHKL as HKL ptr

type tagCOMPOSITIONFORM
 dwStyle as DWORD
 ptCurrentPos as POINT
 rcArea as RECT
end type

type COMPOSITIONFORM as tagCOMPOSITIONFORM
type PCOMPOSITIONFORM as tagCOMPOSITIONFORM ptr
type NPCOMPOSITIONFORM as tagCOMPOSITIONFORM ptr
type LPCOMPOSITIONFORM as tagCOMPOSITIONFORM ptr

type tagCANDIDATEFORM
 dwIndex as DWORD
 dwStyle as DWORD
 ptCurrentPos as POINT
 rcArea as RECT
end type

type CANDIDATEFORM as tagCANDIDATEFORM
type PCANDIDATEFORM as tagCANDIDATEFORM ptr
type NPCANDIDATEFORM as tagCANDIDATEFORM ptr
type LPCANDIDATEFORM as tagCANDIDATEFORM ptr

type tagCANDIDATELIST
 dwSize as DWORD
 dwStyle as DWORD
 dwCount as DWORD
 dwSelection as DWORD
 dwPageStart as DWORD
 dwPageSize as DWORD
 dwOffset(0 to 0) as DWORD
end type

type CANDIDATELIST as tagCANDIDATELIST
type PCANDIDATELIST as tagCANDIDATELIST ptr
type NPCANDIDATELIST as tagCANDIDATELIST ptr
type LPCANDIDATELIST as tagCANDIDATELIST ptr

type tagREGISTERWORDA
 lpReading as LPSTR
 lpWord as LPSTR
end type

type REGISTERWORDA as tagREGISTERWORDA
type PREGISTERWORDA as tagREGISTERWORDA ptr
type NPREGISTERWORDA as tagREGISTERWORDA ptr
type LPREGISTERWORDA as tagREGISTERWORDA ptr

type tagREGISTERWORDW
 lpReading as LPWSTR
 lpWord as LPWSTR
end type

type REGISTERWORDW as tagREGISTERWORDW
type PREGISTERWORDW as tagREGISTERWORDW ptr
type NPREGISTERWORDW as tagREGISTERWORDW ptr
type LPREGISTERWORDW as tagREGISTERWORDW ptr

 type REGISTERWORD as REGISTERWORDA
 type PREGISTERWORD as PREGISTERWORDA
 type NPREGISTERWORD as NPREGISTERWORDA
 type LPREGISTERWORD as LPREGISTERWORDA

type tagRECONVERTSTRING
 dwSize as DWORD
 dwVersion as DWORD
 dwStrLen as DWORD
 dwStrOffset as DWORD
 dwCompStrLen as DWORD
 dwCompStrOffset as DWORD
 dwTargetStrLen as DWORD
 dwTargetStrOffset as DWORD
end type

type RECONVERTSTRING as tagRECONVERTSTRING
type PRECONVERTSTRING as tagRECONVERTSTRING ptr
type NPRECONVERTSTRING as tagRECONVERTSTRING ptr
type LPRECONVERTSTRING as tagRECONVERTSTRING ptr
const STYLE_DESCRIPTION_SIZE = 32

type tagSTYLEBUFA
 dwStyle as DWORD
 szDescription as zstring * 32
end type

type STYLEBUFA as tagSTYLEBUFA
type PSTYLEBUFA as tagSTYLEBUFA ptr
type NPSTYLEBUFA as tagSTYLEBUFA ptr
type LPSTYLEBUFA as tagSTYLEBUFA ptr

type tagSTYLEBUFW
 dwStyle as DWORD
 szDescription as wstring * 32
end type

type STYLEBUFW as tagSTYLEBUFW
type PSTYLEBUFW as tagSTYLEBUFW ptr
type NPSTYLEBUFW as tagSTYLEBUFW ptr
type LPSTYLEBUFW as tagSTYLEBUFW ptr

 type STYLEBUF as STYLEBUFA
 type PSTYLEBUF as PSTYLEBUFA
 type NPSTYLEBUF as NPSTYLEBUFA
 type LPSTYLEBUF as LPSTYLEBUFA

const IMEMENUITEM_STRING_SIZE = 80

type tagIMEMENUITEMINFOA
 cbSize as UINT
 fType as UINT
 fState as UINT
 wID as UINT
 hbmpChecked as HBITMAP
 hbmpUnchecked as HBITMAP
 dwItemData as DWORD
 szString as zstring * 80
 hbmpItem as HBITMAP
end type

type IMEMENUITEMINFOA as tagIMEMENUITEMINFOA
type PIMEMENUITEMINFOA as tagIMEMENUITEMINFOA ptr
type NPIMEMENUITEMINFOA as tagIMEMENUITEMINFOA ptr
type LPIMEMENUITEMINFOA as tagIMEMENUITEMINFOA ptr

type tagIMEMENUITEMINFOW
 cbSize as UINT
 fType as UINT
 fState as UINT
 wID as UINT
 hbmpChecked as HBITMAP
 hbmpUnchecked as HBITMAP
 dwItemData as DWORD
 szString as wstring * 80
 hbmpItem as HBITMAP
end type

type IMEMENUITEMINFOW as tagIMEMENUITEMINFOW
type PIMEMENUITEMINFOW as tagIMEMENUITEMINFOW ptr
type NPIMEMENUITEMINFOW as tagIMEMENUITEMINFOW ptr
type LPIMEMENUITEMINFOW as tagIMEMENUITEMINFOW ptr

 type IMEMENUITEMINFO as IMEMENUITEMINFOA
 type PIMEMENUITEMINFO as PIMEMENUITEMINFOA
 type NPIMEMENUITEMINFO as NPIMEMENUITEMINFOA
 type LPIMEMENUITEMINFO as LPIMEMENUITEMINFOA

type tagIMECHARPOSITION
 dwSize as DWORD
 dwCharPos as DWORD
 pt as POINT
 cLineHeight as UINT
 rcDocument as RECT
end type

type IMECHARPOSITION as tagIMECHARPOSITION
type PIMECHARPOSITION as tagIMECHARPOSITION ptr
type NPIMECHARPOSITION as tagIMECHARPOSITION ptr
type LPIMECHARPOSITION as tagIMECHARPOSITION ptr
type IMCENUMPROC as function(byval as HIMC, byval as LPARAM) as WINBOOL
declare function ImmInstallIMEA(byval lpszIMEFileName as LPCSTR, byval lpszLayoutText as LPCSTR) as HKL

 declare function ImmInstallIME alias "ImmInstallIMEA"(byval lpszIMEFileName as LPCSTR, byval lpszLayoutText as LPCSTR) as HKL

declare function ImmInstallIMEW(byval lpszIMEFileName as LPCWSTR, byval lpszLayoutText as LPCWSTR) as HKL


declare function ImmGetDefaultIMEWnd(byval as HWND) as HWND
declare function ImmGetDescriptionA(byval as HKL, byval as LPSTR, byval uBufLen as UINT) as UINT

 declare function ImmGetDescription alias "ImmGetDescriptionA"(byval as HKL, byval as LPSTR, byval uBufLen as UINT) as UINT

declare function ImmGetDescriptionW(byval as HKL, byval as LPWSTR, byval uBufLen as UINT) as UINT


declare function ImmGetIMEFileNameA(byval as HKL, byval as LPSTR, byval uBufLen as UINT) as UINT

 declare function ImmGetIMEFileName alias "ImmGetIMEFileNameA"(byval as HKL, byval as LPSTR, byval uBufLen as UINT) as UINT

declare function ImmGetIMEFileNameW(byval as HKL, byval as LPWSTR, byval uBufLen as UINT) as UINT


declare function ImmGetProperty(byval as HKL, byval as DWORD) as DWORD
declare function ImmIsIME(byval as HKL) as WINBOOL
declare function ImmSimulateHotKey(byval as HWND, byval as DWORD) as WINBOOL
declare function ImmCreateContext() as HIMC
declare function ImmDestroyContext(byval as HIMC) as WINBOOL
declare function ImmGetContext(byval as HWND) as HIMC
declare function ImmReleaseContext(byval as HWND, byval as HIMC) as WINBOOL
declare function ImmAssociateContext(byval as HWND, byval as HIMC) as HIMC
declare function ImmAssociateContextEx(byval as HWND, byval as HIMC, byval as DWORD) as WINBOOL
declare function ImmGetCompositionStringA(byval as HIMC, byval as DWORD, byval as LPVOID, byval as DWORD) as LONG

 declare function ImmGetCompositionString alias "ImmGetCompositionStringA"(byval as HIMC, byval as DWORD, byval as LPVOID, byval as DWORD) as LONG

declare function ImmGetCompositionStringW(byval as HIMC, byval as DWORD, byval as LPVOID, byval as DWORD) as LONG


declare function ImmSetCompositionStringA(byval as HIMC, byval dwIndex as DWORD, byval lpComp as LPVOID, byval as DWORD, byval lpRead as LPVOID, byval as DWORD) as WINBOOL

 declare function ImmSetCompositionString alias "ImmSetCompositionStringA"(byval as HIMC, byval dwIndex as DWORD, byval lpComp as LPVOID, byval as DWORD, byval lpRead as LPVOID, byval as DWORD) as WINBOOL

declare function ImmSetCompositionStringW(byval as HIMC, byval dwIndex as DWORD, byval lpComp as LPVOID, byval as DWORD, byval lpRead as LPVOID, byval as DWORD) as WINBOOL


declare function ImmGetCandidateListCountA(byval as HIMC, byval lpdwListCount as LPDWORD) as DWORD

 declare function ImmGetCandidateListCount alias "ImmGetCandidateListCountA"(byval as HIMC, byval lpdwListCount as LPDWORD) as DWORD

declare function ImmGetCandidateListCountW(byval as HIMC, byval lpdwListCount as LPDWORD) as DWORD


declare function ImmGetCandidateListA(byval as HIMC, byval deIndex as DWORD, byval as LPCANDIDATELIST, byval dwBufLen as DWORD) as DWORD

 declare function ImmGetCandidateList alias "ImmGetCandidateListA"(byval as HIMC, byval deIndex as DWORD, byval as LPCANDIDATELIST, byval dwBufLen as DWORD) as DWORD

declare function ImmGetCandidateListW(byval as HIMC, byval deIndex as DWORD, byval as LPCANDIDATELIST, byval dwBufLen as DWORD) as DWORD


declare function ImmGetGuideLineA(byval as HIMC, byval dwIndex as DWORD, byval as LPSTR, byval dwBufLen as DWORD) as DWORD

 declare function ImmGetGuideLine alias "ImmGetGuideLineA"(byval as HIMC, byval dwIndex as DWORD, byval as LPSTR, byval dwBufLen as DWORD) as DWORD

declare function ImmGetGuideLineW(byval as HIMC, byval dwIndex as DWORD, byval as LPWSTR, byval dwBufLen as DWORD) as DWORD


declare function ImmGetConversionStatus(byval as HIMC, byval as LPDWORD, byval as LPDWORD) as WINBOOL
declare function ImmSetConversionStatus(byval as HIMC, byval as DWORD, byval as DWORD) as WINBOOL
declare function ImmGetOpenStatus(byval as HIMC) as WINBOOL
declare function ImmSetOpenStatus(byval as HIMC, byval as WINBOOL) as WINBOOL
declare function ImmGetCompositionFontA(byval as HIMC, byval as LPLOGFONTA) as WINBOOL

 declare function ImmGetCompositionFont alias "ImmGetCompositionFontA"(byval as HIMC, byval as LPLOGFONTA) as WINBOOL

declare function ImmGetCompositionFontW(byval as HIMC, byval as LPLOGFONTW) as WINBOOL


declare function ImmSetCompositionFontA(byval as HIMC, byval as LPLOGFONTA) as WINBOOL

 declare function ImmSetCompositionFont alias "ImmSetCompositionFontA"(byval as HIMC, byval as LPLOGFONTA) as WINBOOL

declare function ImmSetCompositionFontW(byval as HIMC, byval as LPLOGFONTW) as WINBOOL


type REGISTERWORDENUMPROCA as function(byval as LPCSTR, byval as DWORD, byval as LPCSTR, byval as LPVOID) as long
type REGISTERWORDENUMPROCW as function(byval as LPCWSTR, byval as DWORD, byval as LPCWSTR, byval as LPVOID) as long

 type REGISTERWORDENUMPROC as REGISTERWORDENUMPROCA

declare function ImmConfigureIMEA(byval as HKL, byval as HWND, byval as DWORD, byval as LPVOID) as WINBOOL

 declare function ImmConfigureIME alias "ImmConfigureIMEA"(byval as HKL, byval as HWND, byval as DWORD, byval as LPVOID) as WINBOOL

declare function ImmConfigureIMEW(byval as HKL, byval as HWND, byval as DWORD, byval as LPVOID) as WINBOOL


declare function ImmEscapeA(byval as HKL, byval as HIMC, byval as UINT, byval as LPVOID) as LRESULT

 declare function ImmEscape alias "ImmEscapeA"(byval as HKL, byval as HIMC, byval as UINT, byval as LPVOID) as LRESULT

declare function ImmEscapeW(byval as HKL, byval as HIMC, byval as UINT, byval as LPVOID) as LRESULT


declare function ImmGetConversionListA(byval as HKL, byval as HIMC, byval as LPCSTR, byval as LPCANDIDATELIST, byval dwBufLen as DWORD, byval uFlag as UINT) as DWORD

 declare function ImmGetConversionList alias "ImmGetConversionListA"(byval as HKL, byval as HIMC, byval as LPCSTR, byval as LPCANDIDATELIST, byval dwBufLen as DWORD, byval uFlag as UINT) as DWORD

declare function ImmGetConversionListW(byval as HKL, byval as HIMC, byval as LPCWSTR, byval as LPCANDIDATELIST, byval dwBufLen as DWORD, byval uFlag as UINT) as DWORD


declare function ImmNotifyIME(byval as HIMC, byval dwAction as DWORD, byval dwIndex as DWORD, byval dwValue as DWORD) as WINBOOL
declare function ImmGetStatusWindowPos(byval as HIMC, byval as LPPOINT) as WINBOOL
declare function ImmSetStatusWindowPos(byval as HIMC, byval as LPPOINT) as WINBOOL
declare function ImmGetCompositionWindow(byval as HIMC, byval as LPCOMPOSITIONFORM) as WINBOOL
declare function ImmSetCompositionWindow(byval as HIMC, byval as LPCOMPOSITIONFORM) as WINBOOL
declare function ImmGetCandidateWindow(byval as HIMC, byval as DWORD, byval as LPCANDIDATEFORM) as WINBOOL
declare function ImmSetCandidateWindow(byval as HIMC, byval as LPCANDIDATEFORM) as WINBOOL
declare function ImmIsUIMessageA(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as WINBOOL

 declare function ImmIsUIMessage alias "ImmIsUIMessageA"(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as WINBOOL

declare function ImmIsUIMessageW(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as WINBOOL


declare function ImmGetVirtualKey(byval as HWND) as UINT
declare function ImmRegisterWordA(byval as HKL, byval lpszReading as LPCSTR, byval as DWORD, byval lpszRegister as LPCSTR) as WINBOOL

 declare function ImmRegisterWord alias "ImmRegisterWordA"(byval as HKL, byval lpszReading as LPCSTR, byval as DWORD, byval lpszRegister as LPCSTR) as WINBOOL

declare function ImmRegisterWordW(byval as HKL, byval lpszReading as LPCWSTR, byval as DWORD, byval lpszRegister as LPCWSTR) as WINBOOL


declare function ImmUnregisterWordA(byval as HKL, byval lpszReading as LPCSTR, byval as DWORD, byval lpszUnregister as LPCSTR) as WINBOOL

 declare function ImmUnregisterWord alias "ImmUnregisterWordA"(byval as HKL, byval lpszReading as LPCSTR, byval as DWORD, byval lpszUnregister as LPCSTR) as WINBOOL

declare function ImmUnregisterWordW(byval as HKL, byval lpszReading as LPCWSTR, byval as DWORD, byval lpszUnregister as LPCWSTR) as WINBOOL


declare function ImmGetRegisterWordStyleA(byval as HKL, byval nItem as UINT, byval as LPSTYLEBUFA) as UINT

 declare function ImmGetRegisterWordStyle alias "ImmGetRegisterWordStyleA"(byval as HKL, byval nItem as UINT, byval as LPSTYLEBUFA) as UINT

declare function ImmGetRegisterWordStyleW(byval as HKL, byval nItem as UINT, byval as LPSTYLEBUFW) as UINT


declare function ImmEnumRegisterWordA(byval as HKL, byval as REGISTERWORDENUMPROCA, byval lpszReading as LPCSTR, byval as DWORD, byval lpszRegister as LPCSTR, byval as LPVOID) as UINT

 declare function ImmEnumRegisterWord alias "ImmEnumRegisterWordA"(byval as HKL, byval as REGISTERWORDENUMPROCA, byval lpszReading as LPCSTR, byval as DWORD, byval lpszRegister as LPCSTR, byval as LPVOID) as UINT

declare function ImmEnumRegisterWordW(byval as HKL, byval as REGISTERWORDENUMPROCW, byval lpszReading as LPCWSTR, byval as DWORD, byval lpszRegister as LPCWSTR, byval as LPVOID) as UINT


declare function ImmDisableIME(byval as DWORD) as WINBOOL
declare function ImmEnumInputContext(byval idThread as DWORD, byval lpfn as IMCENUMPROC, byval lParam as LPARAM) as WINBOOL
declare function ImmGetImeMenuItemsA(byval as HIMC, byval as DWORD, byval as DWORD, byval as LPIMEMENUITEMINFOA, byval as LPIMEMENUITEMINFOA, byval as DWORD) as DWORD

 declare function ImmGetImeMenuItems alias "ImmGetImeMenuItemsA"(byval as HIMC, byval as DWORD, byval as DWORD, byval as LPIMEMENUITEMINFOA, byval as LPIMEMENUITEMINFOA, byval as DWORD) as DWORD

declare function ImmGetImeMenuItemsW(byval as HIMC, byval as DWORD, byval as DWORD, byval as LPIMEMENUITEMINFOW, byval as LPIMEMENUITEMINFOW, byval as DWORD) as DWORD


declare function ImmDisableTextFrameService(byval idThread as DWORD) as WINBOOL
const IMC_GETCANDIDATEPOS = &h0007
const IMC_SETCANDIDATEPOS = &h0008
const IMC_GETCOMPOSITIONFONT = &h0009
const IMC_SETCOMPOSITIONFONT = &h000A
const IMC_GETCOMPOSITIONWINDOW = &h000B
const IMC_SETCOMPOSITIONWINDOW = &h000C
const IMC_GETSTATUSWINDOWPOS = &h000F
const IMC_SETSTATUSWINDOWPOS = &h0010
const IMC_CLOSESTATUSWINDOW = &h0021
const IMC_OPENSTATUSWINDOW = &h0022
const NI_OPENCANDIDATE = &h0010
const NI_CLOSECANDIDATE = &h0011
const NI_SELECTCANDIDATESTR = &h0012
const NI_CHANGECANDIDATELIST = &h0013
const NI_FINALIZECONVERSIONRESULT = &h0014
const NI_COMPOSITIONSTR = &h0015
const NI_SETCANDIDATE_PAGESTART = &h0016
const NI_SETCANDIDATE_PAGESIZE = &h0017
const NI_IMEMENUSELECTED = &h0018
const ISC_SHOWUICANDIDATEWINDOW = &h00000001
const ISC_SHOWUICOMPOSITIONWINDOW = &h80000000
const ISC_SHOWUIGUIDELINE = &h40000000
const ISC_SHOWUIALLCANDIDATEWINDOW = &h0000000F
const ISC_SHOWUIALL = &hC000000F
const CPS_COMPLETE = &h0001
const CPS_CONVERT = &h0002
const CPS_REVERT = &h0003
const CPS_CANCEL = &h0004
const MOD_ALT = &h0001
const MOD_CONTROL = &h0002
const MOD_SHIFT = &h0004
const MOD_LEFT = &h8000
const MOD_RIGHT = &h4000
const MOD_ON_KEYUP = &h0800
const MOD_IGNORE_ALL_MODIFIER = &h0400
const IME_CHOTKEY_IME_NONIME_TOGGLE = &h10
const IME_CHOTKEY_SHAPE_TOGGLE = &h11
const IME_CHOTKEY_SYMBOL_TOGGLE = &h12
const IME_JHOTKEY_CLOSE_OPEN = &h30
const IME_KHOTKEY_SHAPE_TOGGLE = &h50
const IME_KHOTKEY_HANJACONVERT = &h51
const IME_KHOTKEY_ENGLISH = &h52
const IME_THOTKEY_IME_NONIME_TOGGLE = &h70
const IME_THOTKEY_SHAPE_TOGGLE = &h71
const IME_THOTKEY_SYMBOL_TOGGLE = &h72
const IME_HOTKEY_DSWITCH_FIRST = &h100
const IME_HOTKEY_DSWITCH_LAST = &h11F
const IME_HOTKEY_PRIVATE_FIRST = &h200
const IME_ITHOTKEY_RESEND_RESULTSTR = &h200
const IME_ITHOTKEY_PREVIOUS_COMPOSITION = &h201
const IME_ITHOTKEY_UISTYLE_TOGGLE = &h202
const IME_ITHOTKEY_RECONVERTSTRING = &h203
const IME_HOTKEY_PRIVATE_LAST = &h21F
const GCS_COMPREADSTR = &h0001
const GCS_COMPREADATTR = &h0002
const GCS_COMPREADCLAUSE = &h0004
const GCS_COMPSTR = &h0008
const GCS_COMPATTR = &h0010
const GCS_COMPCLAUSE = &h0020
const GCS_CURSORPOS = &h0080
const GCS_DELTASTART = &h0100
const GCS_RESULTREADSTR = &h0200
const GCS_RESULTREADCLAUSE = &h0400
const GCS_RESULTSTR = &h0800
const GCS_RESULTCLAUSE = &h1000
const CS_INSERTCHAR = &h2000
const CS_NOMOVECARET = &h4000
const IMEVER_0310 = &h0003000A
const IMEVER_0400 = &h00040000
const IME_PROP_AT_CARET = &h00010000
const IME_PROP_SPECIAL_UI = &h00020000
const IME_PROP_CANDLIST_START_FROM_1 = &h00040000
const IME_PROP_UNICODE = &h00080000
const IME_PROP_COMPLETE_ON_UNSELECT = &h00100000
const UI_CAP_2700 = &h00000001
const UI_CAP_ROT90 = &h00000002
const UI_CAP_ROTANY = &h00000004
const SCS_CAP_COMPSTR = &h00000001
const SCS_CAP_MAKEREAD = &h00000002
const SCS_CAP_SETRECONVERTSTRING = &h00000004
const SELECT_CAP_CONVERSION = &h00000001
const SELECT_CAP_SENTENCE = &h00000002
const GGL_LEVEL = &h00000001
const GGL_INDEX = &h00000002
const GGL_STRING = &h00000003
const GGL_PRIVATE = &h00000004
const GL_LEVEL_NOGUIDELINE = &h000000000
const GL_LEVEL_FATAL = &h00000001
const GL_LEVEL_ERROR = &h00000002
const GL_LEVEL_WARNING = &h00000003
const GL_LEVEL_INFORMATION = &h00000004
const GL_ID_UNKNOWN = &h000000000
const GL_ID_NOMODULE = &h00000001
const GL_ID_NODICTIONARY = &h00000010
const GL_ID_CANNOTSAVE = &h00000011
const GL_ID_NOCONVERT = &h00000020
const GL_ID_TYPINGERROR = &h00000021
const GL_ID_TOOMANYSTROKE = &h00000022
const GL_ID_READINGCONFLICT = &h00000023
const GL_ID_INPUTREADING = &h00000024
const GL_ID_INPUTRADICAL = &h00000025
const GL_ID_INPUTCODE = &h00000026
const GL_ID_INPUTSYMBOL = &h00000027
const GL_ID_CHOOSECANDIDATE = &h00000028
const GL_ID_REVERSECONVERSION = &h00000029
const GL_ID_PRIVATE_FIRST = &h00008000
const GL_ID_PRIVATE_LAST = &h0000FFFF
const IGP_GETIMEVERSION = cast(DWORD, -4)
const IGP_PROPERTY = &h00000004
const IGP_CONVERSION = &h00000008
const IGP_SENTENCE = &h0000000c
const IGP_UI = &h00000010
const IGP_SETCOMPSTR = &h00000014
const IGP_SELECT = &h00000018
const SCS_SETSTR = GCS_COMPREADSTR or GCS_COMPSTR
const SCS_CHANGEATTR = GCS_COMPREADATTR or GCS_COMPATTR
const SCS_CHANGECLAUSE = GCS_COMPREADCLAUSE or GCS_COMPCLAUSE
const SCS_SETRECONVERTSTRING = &h00010000
const SCS_QUERYRECONVERTSTRING = &h00020000
const ATTR_INPUT = &h000
const ATTR_TARGET_CONVERTED = &h01
const ATTR_CONVERTED = &h02
const ATTR_TARGET_NOTCONVERTED = &h03
const ATTR_INPUT_ERROR = &h04
const ATTR_FIXEDCONVERTED = &h05
const CFS_DEFAULT = &h00000
const CFS_RECT = &h0001
const CFS_POINT = &h0002
const CFS_FORCE_POSITION = &h0020
const CFS_CANDIDATEPOS = &h0040
const CFS_EXCLUDE = &h0080
const GCL_CONVERSION = &h0001
const GCL_REVERSECONVERSION = &h0002
const GCL_REVERSE_LENGTH = &h0003
const IME_CMODE_ALPHANUMERIC = &h00000
const IME_CMODE_NATIVE = &h0001
const IME_CMODE_CHINESE = IME_CMODE_NATIVE
const IME_CMODE_HANGEUL = IME_CMODE_NATIVE
const IME_CMODE_HANGUL = IME_CMODE_NATIVE
const IME_CMODE_JAPANESE = IME_CMODE_NATIVE
const IME_CMODE_KATAKANA = &h0002
const IME_CMODE_LANGUAGE = &h0003
const IME_CMODE_FULLSHAPE = &h0008
const IME_CMODE_ROMAN = &h0010
const IME_CMODE_CHARCODE = &h0020
const IME_CMODE_HANJACONVERT = &h0040
const IME_CMODE_SOFTKBD = &h0080
const IME_CMODE_NOCONVERSION = &h0100
const IME_CMODE_EUDC = &h0200
const IME_CMODE_SYMBOL = &h0400
const IME_CMODE_FIXED = &h0800
const IME_CMODE_RESERVED = &hF0000000
const IME_SMODE_NONE = &h00000
const IME_SMODE_PLAURALCLAUSE = &h0001
const IME_SMODE_SINGLECONVERT = &h0002
const IME_SMODE_AUTOMATIC = &h0004
const IME_SMODE_PHRASEPREDICT = &h0008
const IME_SMODE_CONVERSATION = &h0010
const IME_SMODE_RESERVED = &h0000F000
const IME_CAND_UNKNOWN = &h00000
const IME_CAND_READ = &h0001
const IME_CAND_CODE = &h0002
const IME_CAND_MEANING = &h0003
const IME_CAND_RADICAL = &h0004
const IME_CAND_STROKE = &h0005
const IMN_CLOSESTATUSWINDOW = &h0001
const IMN_OPENSTATUSWINDOW = &h0002
const IMN_CHANGECANDIDATE = &h0003
const IMN_CLOSECANDIDATE = &h0004
const IMN_OPENCANDIDATE = &h0005
const IMN_SETCONVERSIONMODE = &h0006
const IMN_SETSENTENCEMODE = &h0007
const IMN_SETOPENSTATUS = &h0008
const IMN_SETCANDIDATEPOS = &h0009
const IMN_SETCOMPOSITIONFONT = &h000A
const IMN_SETCOMPOSITIONWINDOW = &h000B
const IMN_SETSTATUSWINDOWPOS = &h000C
const IMN_GUIDELINE = &h000D
const IMN_PRIVATE = &h000E
const IMR_COMPOSITIONWINDOW = &h0001
const IMR_CANDIDATEWINDOW = &h0002
const IMR_COMPOSITIONFONT = &h0003
const IMR_RECONVERTSTRING = &h0004
const IMR_CONFIRMRECONVERTSTRING = &h0005
const IMR_QUERYCHARPOSITION = &h0006
const IMR_DOCUMENTFEED = &h0007
const IMM_ERROR_NODATA = -1
const IMM_ERROR_GENERAL = -2
const IME_CONFIG_GENERAL = 1
const IME_CONFIG_REGISTERWORD = 2
const IME_CONFIG_SELECTDICTIONARY = 3
const IME_ESC_QUERY_SUPPORT = &h0003
const IME_ESC_RESERVED_FIRST = &h0004
const IME_ESC_RESERVED_LAST = &h07FF
const IME_ESC_PRIVATE_FIRST = &h0800
const IME_ESC_PRIVATE_LAST = &h0FFF
const IME_ESC_SEQUENCE_TO_INTERNAL = &h1001
const IME_ESC_GET_EUDC_DICTIONARY = &h1003
const IME_ESC_SET_EUDC_DICTIONARY = &h1004
const IME_ESC_MAX_KEY = &h1005
const IME_ESC_IME_NAME = &h1006
const IME_ESC_SYNC_HOTKEY = &h1007
const IME_ESC_HANJA_MODE = &h1008
const IME_ESC_AUTOMATA = &h1009
const IME_ESC_PRIVATE_HOTKEY = &h100a
const IME_ESC_GETHELPFILENAME = &h100b
const IME_REGWORD_STYLE_EUDC = &h00000001
const IME_REGWORD_STYLE_USER_FIRST = &h80000000
const IME_REGWORD_STYLE_USER_LAST = &hFFFFFFFF
const IACE_CHILDREN = &h0001
const IACE_DEFAULT = &h0010
const IACE_IGNORENOCONTEXT = &h0020
const IGIMIF_RIGHTMENU = &h0001
const IGIMII_CMODE = &h0001
const IGIMII_SMODE = &h0002
const IGIMII_CONFIGURE = &h0004
const IGIMII_TOOLS = &h0008
const IGIMII_HELP = &h0010
const IGIMII_OTHER = &h0020
const IGIMII_INPUTTOOLS = &h0040
const IMFT_RADIOCHECK = &h00001
const IMFT_SEPARATOR = &h00002
const IMFT_SUBMENU = &h00004
const IMFS_GRAYED = MFS_GRAYED
const IMFS_DISABLED = MFS_DISABLED
const IMFS_CHECKED = MFS_CHECKED
const IMFS_HILITE = MFS_HILITE
const IMFS_ENABLED = MFS_ENABLED
const IMFS_UNCHECKED = MFS_UNCHECKED
const IMFS_UNHILITE = MFS_UNHILITE
const IMFS_DEFAULT = MFS_DEFAULT
const SOFTKEYBOARD_TYPE_T1 = &h0001
const SOFTKEYBOARD_TYPE_C1 = &h0002

end extern




#inclib "comctl32"




extern "Windows"


 declare function SNDMSG alias "SendMessageA"(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

const MAXPROPPAGES = 100
type HPROPSHEETPAGE as _PSP ptr
type _PROPSHEETPAGEA as _PROPSHEETPAGEA_
type LPFNPSPCALLBACKA as function(byval hwnd as HWND, byval uMsg as UINT, byval ppsp as _PROPSHEETPAGEA ptr) as UINT
type _PROPSHEETPAGEW as _PROPSHEETPAGEW_
type LPFNPSPCALLBACKW as function(byval hwnd as HWND, byval uMsg as UINT, byval ppsp as _PROPSHEETPAGEW ptr) as UINT

 type LPFNPSPCALLBACK as LPFNPSPCALLBACKA

const PSP_DEFAULT = &h000000000
const PSP_DLGINDIRECT = &h00000001
const PSP_USEHICON = &h00000002
const PSP_USEICONID = &h00000004
const PSP_USETITLE = &h00000008
const PSP_RTLREADING = &h00000010
const PSP_HASHELP = &h00000020
const PSP_USEREFPARENT = &h00000040
const PSP_USECALLBACK = &h00000080
const PSP_PREMATURE = &h00000400
const PSP_HIDEHEADER = &h00000800
const PSP_USEHEADERTITLE = &h00001000
const PSP_USEHEADERSUBTITLE = &h00002000
const PSP_USEFUSIONCONTEXT = &h00004000
const PSPCB_ADDREF = 0
const PSPCB_RELEASE = 1
const PSPCB_CREATE = 2
type PROPSHEETPAGE_RESOURCE as LPCDLGTEMPLATE

 type _PROPSHEETPAGEA_V1 field = 4
 dwSize as DWORD
 dwFlags as DWORD
 hInstance as HINSTANCE

 union field = 4
 pszTemplate as LPCSTR
 pResource as PROPSHEETPAGE_RESOURCE
 end union

 union field = 4
 hIcon as HICON
 pszIcon as LPCSTR
 end union

 pszTitle as LPCSTR
 pfnDlgProc as DLGPROC
 lParam as LPARAM
 pfnCallback as LPFNPSPCALLBACKA
 pcRefParent as UINT ptr
 end type

type PROPSHEETPAGEA_V1 as _PROPSHEETPAGEA_V1
type LPPROPSHEETPAGEA_V1 as _PROPSHEETPAGEA_V1 ptr
type LPCPROPSHEETPAGEA_V1 as const PROPSHEETPAGEA_V1 ptr

 type _PROPSHEETPAGEA_V2 field = 4
 dwSize as DWORD
 dwFlags as DWORD
 hInstance as HINSTANCE

 union field = 4
 pszTemplate as LPCSTR
 pResource as PROPSHEETPAGE_RESOURCE
 end union

 union field = 4
 hIcon as HICON
 pszIcon as LPCSTR
 end union

 pszTitle as LPCSTR
 pfnDlgProc as DLGPROC
 lParam as LPARAM
 pfnCallback as LPFNPSPCALLBACKA
 pcRefParent as UINT ptr
 pszHeaderTitle as LPCSTR
 pszHeaderSubTitle as LPCSTR
 end type

type PROPSHEETPAGEA_V2 as _PROPSHEETPAGEA_V2
type LPPROPSHEETPAGEA_V2 as _PROPSHEETPAGEA_V2 ptr
type LPCPROPSHEETPAGEA_V2 as const PROPSHEETPAGEA_V2 ptr

 type _PROPSHEETPAGEA_ field = 4
 dwSize as DWORD
 dwFlags as DWORD
 hInstance as HINSTANCE

 union field = 4
 pszTemplate as LPCSTR
 pResource as PROPSHEETPAGE_RESOURCE
 end union

 union field = 4
 hIcon as HICON
 pszIcon as LPCSTR
 end union

 pszTitle as LPCSTR
 pfnDlgProc as DLGPROC
 lParam as LPARAM
 pfnCallback as LPFNPSPCALLBACKA
 pcRefParent as UINT ptr
 pszHeaderTitle as LPCSTR
 pszHeaderSubTitle as LPCSTR
 hActCtx as HANDLE
 end type

type _PROPSHEETPAGEA_V3 as _PROPSHEETPAGEA
type PROPSHEETPAGEA_V3 as _PROPSHEETPAGEA
type LPPROPSHEETPAGEA_V3 as _PROPSHEETPAGEA ptr
type LPCPROPSHEETPAGEA_V3 as const PROPSHEETPAGEA_V3 ptr

 type _PROPSHEETPAGEW_V1 field = 4
 dwSize as DWORD
 dwFlags as DWORD
 hInstance as HINSTANCE

 union field = 4
 pszTemplate as LPCWSTR
 pResource as PROPSHEETPAGE_RESOURCE
 end union

 union field = 4
 hIcon as HICON
 pszIcon as LPCWSTR
 end union

 pszTitle as LPCWSTR
 pfnDlgProc as DLGPROC
 lParam as LPARAM
 pfnCallback as LPFNPSPCALLBACKW
 pcRefParent as UINT ptr
 end type

type PROPSHEETPAGEW_V1 as _PROPSHEETPAGEW_V1
type LPPROPSHEETPAGEW_V1 as _PROPSHEETPAGEW_V1 ptr
type LPCPROPSHEETPAGEW_V1 as const PROPSHEETPAGEW_V1 ptr

 type _PROPSHEETPAGEW_V2 field = 4
 dwSize as DWORD
 dwFlags as DWORD
 hInstance as HINSTANCE

 union field = 4
 pszTemplate as LPCWSTR
 pResource as PROPSHEETPAGE_RESOURCE
 end union

 union field = 4
 hIcon as HICON
 pszIcon as LPCWSTR
 end union

 pszTitle as LPCWSTR
 pfnDlgProc as DLGPROC
 lParam as LPARAM
 pfnCallback as LPFNPSPCALLBACKW
 pcRefParent as UINT ptr
 pszHeaderTitle as LPCWSTR
 pszHeaderSubTitle as LPCWSTR
 end type

type PROPSHEETPAGEW_V2 as _PROPSHEETPAGEW_V2
type LPPROPSHEETPAGEW_V2 as _PROPSHEETPAGEW_V2 ptr
type LPCPROPSHEETPAGEW_V2 as const PROPSHEETPAGEW_V2 ptr

 type _PROPSHEETPAGEW_ field = 4
 dwSize as DWORD
 dwFlags as DWORD
 hInstance as HINSTANCE

 union field = 4
 pszTemplate as LPCWSTR
 pResource as PROPSHEETPAGE_RESOURCE
 end union

 union field = 4
 hIcon as HICON
 pszIcon as LPCWSTR
 end union

 pszTitle as LPCWSTR
 pfnDlgProc as DLGPROC
 lParam as LPARAM
 pfnCallback as LPFNPSPCALLBACKW
 pcRefParent as UINT ptr
 pszHeaderTitle as LPCWSTR
 pszHeaderSubTitle as LPCWSTR
 hActCtx as HANDLE
 end type

type _PROPSHEETPAGEW_V3 as _PROPSHEETPAGEW
type PROPSHEETPAGEW_V3 as _PROPSHEETPAGEW
type LPPROPSHEETPAGEW_V3 as _PROPSHEETPAGEW ptr
type LPCPROPSHEETPAGEW_V3 as const PROPSHEETPAGEW_V3 ptr
type PROPSHEETPAGEA_LATEST as PROPSHEETPAGEA_V3
type PROPSHEETPAGEW_LATEST as PROPSHEETPAGEW_V3
type LPPROPSHEETPAGEA_LATEST as LPPROPSHEETPAGEA_V3
type LPPROPSHEETPAGEW_LATEST as LPPROPSHEETPAGEW_V3
type LPCPROPSHEETPAGEA_LATEST as LPCPROPSHEETPAGEA_V3
type LPCPROPSHEETPAGEW_LATEST as LPCPROPSHEETPAGEW_V3
type PROPSHEETPAGEA as PROPSHEETPAGEA_V3
type PROPSHEETPAGEW as PROPSHEETPAGEW_V3
type LPPROPSHEETPAGEA as LPPROPSHEETPAGEA_V3
type LPPROPSHEETPAGEW as LPPROPSHEETPAGEW_V3
type LPCPROPSHEETPAGEA as LPCPROPSHEETPAGEA_V3
type LPCPROPSHEETPAGEW as LPCPROPSHEETPAGEW_V3

 type PROPSHEETPAGE as PROPSHEETPAGEA
 type LPPROPSHEETPAGE as LPPROPSHEETPAGEA
 type LPCPROPSHEETPAGE as LPCPROPSHEETPAGEA
 type PROPSHEETPAGE_V1 as PROPSHEETPAGEA_V1
 type LPPROPSHEETPAGE_V1 as LPPROPSHEETPAGEA_V1
 type LPCPROPSHEETPAGE_V1 as LPCPROPSHEETPAGEA_V1
 type PROPSHEETPAGE_V2 as PROPSHEETPAGEA_V2
 type LPPROPSHEETPAGE_V2 as LPPROPSHEETPAGEA_V2
 type LPCPROPSHEETPAGE_V2 as LPCPROPSHEETPAGEA_V2
 type PROPSHEETPAGE_V3 as PROPSHEETPAGEA_V3
 type LPPROPSHEETPAGE_V3 as LPPROPSHEETPAGEA_V3
 type LPCPROPSHEETPAGE_V3 as LPCPROPSHEETPAGEA_V3
 type PROPSHEETPAGE_LATEST as PROPSHEETPAGEA_LATEST
 type LPPROPSHEETPAGE_LATEST as LPPROPSHEETPAGEA_LATEST
 type LPCPROPSHEETPAGE_LATEST as LPCPROPSHEETPAGEA_LATEST

const PSH_DEFAULT = &h000000000
const PSH_PROPTITLE = &h00000001
const PSH_USEHICON = &h00000002
const PSH_USEICONID = &h00000004
const PSH_PROPSHEETPAGE = &h00000008
const PSH_WIZARDHASFINISH = &h00000010
const PSH_WIZARD = &h00000020
const PSH_USEPSTARTPAGE = &h00000040
const PSH_NOAPPLYNOW = &h00000080
const PSH_USECALLBACK = &h00000100
const PSH_HASHELP = &h00000200
const PSH_MODELESS = &h00000400
const PSH_RTLREADING = &h00000800
const PSH_WIZARDCONTEXTHELP = &h00001000
const PSH_WIZARD97 = &h01000000
const PSH_WATERMARK = &h00008000
const PSH_USEHBMWATERMARK = &h00010000
const PSH_USEHPLWATERMARK = &h00020000
const PSH_STRETCHWATERMARK = &h00040000
const PSH_HEADER = &h00080000
const PSH_USEHBMHEADER = &h00100000
const PSH_USEPAGELANG = &h00200000
const PSH_WIZARD_LITE = &h00400000
const PSH_NOCONTEXTHELP = &h02000000
type PFNPROPSHEETCALLBACK as function(byval as HWND, byval as UINT, byval as LPARAM) as long

 type _PROPSHEETHEADERA field = 4
 dwSize as DWORD
 dwFlags as DWORD
 hwndParent as HWND
 hInstance as HINSTANCE

 union field = 4
 hIcon as HICON
 pszIcon as LPCSTR
 end union

 pszCaption as LPCSTR
 nPages as UINT

 union field = 4
 nStartPage as UINT
 pStartPage as LPCSTR
 end union

 union field = 4
 ppsp as LPCPROPSHEETPAGEA
 phpage as HPROPSHEETPAGE ptr
 end union

 pfnCallback as PFNPROPSHEETCALLBACK

 union field = 4
 hbmWatermark as HBITMAP
 pszbmWatermark as LPCSTR
 end union

 hplWatermark as HPALETTE

 union field = 4
 hbmHeader as HBITMAP
 pszbmHeader as LPCSTR
 end union
 end type

type PROPSHEETHEADERA as _PROPSHEETHEADERA
type LPPROPSHEETHEADERA as _PROPSHEETHEADERA ptr
type LPCPROPSHEETHEADERA as const PROPSHEETHEADERA ptr

 type _PROPSHEETHEADERW field = 4
 dwSize as DWORD
 dwFlags as DWORD
 hwndParent as HWND
 hInstance as HINSTANCE

 union field = 4
 hIcon as HICON
 pszIcon as LPCWSTR
 end union

 pszCaption as LPCWSTR
 nPages as UINT

 union field = 4
 nStartPage as UINT
 pStartPage as LPCWSTR
 end union

 union field = 4
 ppsp as LPCPROPSHEETPAGEW
 phpage as HPROPSHEETPAGE ptr
 end union

 pfnCallback as PFNPROPSHEETCALLBACK

 union field = 4
 hbmWatermark as HBITMAP
 pszbmWatermark as LPCWSTR
 end union

 hplWatermark as HPALETTE

 union field = 4
 hbmHeader as HBITMAP
 pszbmHeader as LPCWSTR
 end union
 end type

type PROPSHEETHEADERW as _PROPSHEETHEADERW
type LPPROPSHEETHEADERW as _PROPSHEETHEADERW ptr
type LPCPROPSHEETHEADERW as const PROPSHEETHEADERW ptr

 type PROPSHEETHEADER as PROPSHEETHEADERA
 type LPPROPSHEETHEADER as LPPROPSHEETHEADERA
 type LPCPROPSHEETHEADER as LPCPROPSHEETHEADERA

const PSCB_INITIALIZED = 1
const PSCB_PRECREATE = 2
const PSCB_BUTTONPRESSED = 3

declare function CreatePropertySheetPageA(byval constPropSheetPagePointer as LPCPROPSHEETPAGEA) as HPROPSHEETPAGE
declare function CreatePropertySheetPageW(byval constPropSheetPagePointer as LPCPROPSHEETPAGEW) as HPROPSHEETPAGE
declare function DestroyPropertySheetPage(byval as HPROPSHEETPAGE) as WINBOOL
declare function PropertySheetA(byval as LPCPROPSHEETHEADERA) as INT_PTR
declare function PropertySheetW(byval as LPCPROPSHEETHEADERW) as INT_PTR

 declare function CreatePropertySheetPage alias "CreatePropertySheetPageA"(byval constPropSheetPagePointer as LPCPROPSHEETPAGEA) as HPROPSHEETPAGE
 declare function PropertySheet alias "PropertySheetA"(byval as LPCPROPSHEETHEADERA) as INT_PTR

type LPFNADDPROPSHEETPAGE as function(byval as HPROPSHEETPAGE, byval as LPARAM) as WINBOOL
type LPFNADDPROPSHEETPAGES as function(byval as LPVOID, byval as LPFNADDPROPSHEETPAGE, byval as LPARAM) as WINBOOL

 type _PSHNOTIFY field = 4
 hdr as NMHDR
 lParam as LPARAM
 end type

type PSHNOTIFY as _PSHNOTIFY
type LPPSHNOTIFY as _PSHNOTIFY ptr
const PSN_FIRST = culng(0 - 200)
const PSN_LAST = culng(0 - 299)
const PSN_SETACTIVE = culng(PSN_FIRST - 0)
const PSN_KILLACTIVE = culng(PSN_FIRST - 1)
const PSN_APPLY = culng(PSN_FIRST - 2)
const PSN_RESET = culng(PSN_FIRST - 3)
const PSN_HELP = culng(PSN_FIRST - 5)
const PSN_WIZBACK = culng(PSN_FIRST - 6)
const PSN_WIZNEXT = culng(PSN_FIRST - 7)
const PSN_WIZFINISH = culng(PSN_FIRST - 8)
const PSN_QUERYCANCEL = culng(PSN_FIRST - 9)
const PSN_GETOBJECT = culng(PSN_FIRST - 10)
const PSN_TRANSLATEACCELERATOR = culng(PSN_FIRST - 12)
const PSN_QUERYINITIALFOCUS = culng(PSN_FIRST - 13)
const PSNRET_NOERROR = 0
const PSNRET_INVALID = 1
const PSNRET_INVALID_NOCHANGEPAGE = 2
const PSNRET_MESSAGEHANDLED = 3
const PSM_SETCURSEL = WM_USER + 101
const PSM_REMOVEPAGE = WM_USER + 102
const PSM_ADDPAGE = WM_USER + 103
const PSM_CHANGED = WM_USER + 104
const PSM_RESTARTWINDOWS = WM_USER + 105
const PSM_REBOOTSYSTEM = WM_USER + 106
const PSM_CANCELTOCLOSE = WM_USER + 107
const PSM_QUERYSIBLINGS = WM_USER + 108
const PSM_UNCHANGED = WM_USER + 109
const PSM_APPLY = WM_USER + 110
const PSM_SETTITLEA = WM_USER + 111
const PSM_SETTITLEW = WM_USER + 120

 const PSM_SETTITLE = PSM_SETTITLEA

const PSM_SETWIZBUTTONS = WM_USER + 112
const PSWIZB_BACK = &h00000001
const PSWIZB_NEXT = &h00000002
const PSWIZB_FINISH = &h00000004
const PSWIZB_DISABLEDFINISH = &h00000008
const PSM_PRESSBUTTON = WM_USER + 113
const PSBTN_BACK = 0
const PSBTN_NEXT = 1
const PSBTN_FINISH = 2
const PSBTN_OK = 3
const PSBTN_APPLYNOW = 4
const PSBTN_CANCEL = 5
const PSBTN_HELP = 6
const PSBTN_MAX = 6
const PSM_SETCURSELID = WM_USER + 114
const PSM_SETFINISHTEXTA = WM_USER + 115
const PSM_SETFINISHTEXTW = WM_USER + 121

 const PSM_SETFINISHTEXT = PSM_SETFINISHTEXTA

const PSM_GETTABCONTROL = WM_USER + 116
const PSM_ISDIALOGMESSAGE = WM_USER + 117
const PSM_GETCURRENTPAGEHWND = WM_USER + 118
const PSM_INSERTPAGE = WM_USER + 119
const PSM_SETHEADERTITLEA = WM_USER + 125
const PSM_SETHEADERTITLEW = WM_USER + 126

 const PSM_SETHEADERTITLE = PSM_SETHEADERTITLEA

const PSM_SETHEADERSUBTITLEA = WM_USER + 127
const PSM_SETHEADERSUBTITLEW = WM_USER + 128

 const PSM_SETHEADERSUBTITLE = PSM_SETHEADERSUBTITLEA

const PSM_HWNDTOINDEX = WM_USER + 129
const PSM_INDEXTOHWND = WM_USER + 130
const PSM_PAGETOINDEX = WM_USER + 131
const PSM_INDEXTOPAGE = WM_USER + 132
const PSM_IDTOINDEX = WM_USER + 133
const PSM_INDEXTOID = WM_USER + 134
const PSM_GETRESULT = WM_USER + 135
const PSM_RECALCPAGESIZES = WM_USER + 136
const ID_PSRESTARTWINDOWS = &h2
const ID_PSREBOOTSYSTEM = ID_PSRESTARTWINDOWS or &h1
const WIZ_CXDLG = 276
const WIZ_CYDLG = 140
const WIZ_CXBMP = 80
const WIZ_BODYX = 92
const WIZ_BODYCX = 184
const PROP_SM_CXDLG = 212
const PROP_SM_CYDLG = 188
const PROP_MED_CXDLG = 227
const PROP_MED_CYDLG = 215
const PROP_LG_CXDLG = 252
const PROP_LG_CYDLG = 218

end extern





type I_RPC_HANDLE as any ptr
type RPC_STATUS as long




extern "Windows"

type RPC_CSTR as ubyte ptr
type RPC_WSTR as ushort ptr
type RPC_BINDING_HANDLE as I_RPC_HANDLE
type handle_t as RPC_BINDING_HANDLE
type rpc_binding_handle_t as RPC_BINDING_HANDLE
type UUID as GUID
type uuid_t as UUID

type _RPC_BINDING_VECTOR
 Count as ulong
 BindingH(0 to 0) as RPC_BINDING_HANDLE
end type

type RPC_BINDING_VECTOR as _RPC_BINDING_VECTOR
type rpc_binding_vector_t as RPC_BINDING_VECTOR

type _UUID_VECTOR
 Count as ulong
 Uuid(0 to 0) as UUID ptr
end type

type UUID_VECTOR as _UUID_VECTOR
type uuid_vector_t as UUID_VECTOR
type RPC_IF_HANDLE as any ptr

type _RPC_IF_ID
 Uuid as UUID
 VersMajor as ushort
 VersMinor as ushort
end type

type RPC_IF_ID as _RPC_IF_ID
const RPC_C_BINDING_INFINITE_TIMEOUT = 10
const RPC_C_BINDING_MIN_TIMEOUT = 0
const RPC_C_BINDING_DEFAULT_TIMEOUT = 5
const RPC_C_BINDING_MAX_TIMEOUT = 9
const RPC_C_CANCEL_INFINITE_TIMEOUT = -1
const RPC_C_LISTEN_MAX_CALLS_DEFAULT = 1234
const RPC_C_PROTSEQ_MAX_REQS_DEFAULT = 10
const RPC_C_BIND_TO_ALL_NICS = 1
const RPC_C_USE_INTERNET_PORT = &h1
const RPC_C_USE_INTRANET_PORT = &h2
const RPC_C_DONT_FAIL = &h4
const RPC_C_MQ_TEMPORARY = &h00000
const RPC_C_MQ_PERMANENT = &h0001
const RPC_C_MQ_CLEAR_ON_OPEN = &h0002
const RPC_C_MQ_USE_EXISTING_SECURITY = &h0004
const RPC_C_MQ_AUTHN_LEVEL_NONE = &h00000
const RPC_C_MQ_AUTHN_LEVEL_PKT_INTEGRITY = &h0008
const RPC_C_MQ_AUTHN_LEVEL_PKT_PRIVACY = &h0010
const RPC_C_OPT_MQ_DELIVERY = 1
const RPC_C_OPT_MQ_PRIORITY = 2
const RPC_C_OPT_MQ_JOURNAL = 3
const RPC_C_OPT_MQ_ACKNOWLEDGE = 4
const RPC_C_OPT_MQ_AUTHN_SERVICE = 5
const RPC_C_OPT_MQ_AUTHN_LEVEL = 6
const RPC_C_OPT_MQ_TIME_TO_REACH_QUEUE = 7
const RPC_C_OPT_MQ_TIME_TO_BE_RECEIVED = 8
const RPC_C_OPT_BINDING_NONCAUSAL = 9
const RPC_C_OPT_SECURITY_CALLBACK = 10
const RPC_C_OPT_UNIQUE_BINDING = 11
const RPC_C_OPT_CALL_TIMEOUT = 12
const RPC_C_OPT_DONT_LINGER = 13
const RPC_C_OPT_MAX_OPTIONS = 14
const RPC_C_MQ_EXPRESS = 0
const RPC_C_MQ_RECOVERABLE = 1
const RPC_C_MQ_JOURNAL_NONE = 0
const RPC_C_MQ_JOURNAL_DEADLETTER = 1
const RPC_C_MQ_JOURNAL_ALWAYS = 2
const RPC_C_FULL_CERT_CHAIN = &h0001

type _RPC_PROTSEQ_VECTORA
 Count as ulong
 Protseq(0 to 0) as ubyte ptr
end type

type RPC_PROTSEQ_VECTORA as _RPC_PROTSEQ_VECTORA

type _RPC_PROTSEQ_VECTORW
 Count as ulong
 Protseq(0 to 0) as ushort ptr
end type

type RPC_PROTSEQ_VECTORW as _RPC_PROTSEQ_VECTORW

 type RPC_PROTSEQ_VECTOR as RPC_PROTSEQ_VECTORA

type _RPC_POLICY
 Length as ulong
 EndpointFlags as ulong
 NICFlags as ulong
end type

type RPC_POLICY as _RPC_POLICY
type PRPC_POLICY as _RPC_POLICY ptr
type RPC_MGR_EPV as any

type RPC_STATS_VECTOR
 Count as ulong
 Stats(0 to 0) as ulong
end type

const RPC_C_STATS_CALLS_IN = 0
const RPC_C_STATS_CALLS_OUT = 1
const RPC_C_STATS_PKTS_IN = 2
const RPC_C_STATS_PKTS_OUT = 3

type RPC_IF_ID_VECTOR
 Count as ulong
 IfId(0 to 0) as RPC_IF_ID ptr
end type

declare function RpcBindingCopy(byval SourceBinding as RPC_BINDING_HANDLE, byval DestinationBinding as RPC_BINDING_HANDLE ptr) as RPC_STATUS
declare function RpcBindingFree(byval Binding as RPC_BINDING_HANDLE ptr) as RPC_STATUS
declare function RpcBindingSetOption(byval hBinding as RPC_BINDING_HANDLE, byval option as ulong, byval optionValue as ULONG_PTR) as RPC_STATUS
declare function RpcBindingInqOption(byval hBinding as RPC_BINDING_HANDLE, byval option as ulong, byval pOptionValue as ULONG_PTR ptr) as RPC_STATUS
declare function RpcBindingFromStringBindingA(byval StringBinding as RPC_CSTR, byval Binding as RPC_BINDING_HANDLE ptr) as RPC_STATUS

 declare function RpcBindingFromStringBinding alias "RpcBindingFromStringBindingA"(byval StringBinding as RPC_CSTR, byval Binding as RPC_BINDING_HANDLE ptr) as RPC_STATUS

declare function RpcBindingFromStringBindingW(byval StringBinding as RPC_WSTR, byval Binding as RPC_BINDING_HANDLE ptr) as RPC_STATUS


declare function RpcSsGetContextBinding(byval ContextHandle as any ptr, byval Binding as RPC_BINDING_HANDLE ptr) as RPC_STATUS
declare function RpcBindingInqObject(byval Binding as RPC_BINDING_HANDLE, byval ObjectUuid as UUID ptr) as RPC_STATUS
declare function RpcBindingReset(byval Binding as RPC_BINDING_HANDLE) as RPC_STATUS
declare function RpcBindingSetObject(byval Binding as RPC_BINDING_HANDLE, byval ObjectUuid as UUID ptr) as RPC_STATUS
declare function RpcMgmtInqDefaultProtectLevel(byval AuthnSvc as ulong, byval AuthnLevel as ulong ptr) as RPC_STATUS
declare function RpcBindingToStringBindingA(byval Binding as RPC_BINDING_HANDLE, byval StringBinding as RPC_CSTR ptr) as RPC_STATUS

 declare function RpcBindingToStringBinding alias "RpcBindingToStringBindingA"(byval Binding as RPC_BINDING_HANDLE, byval StringBinding as RPC_CSTR ptr) as RPC_STATUS

declare function RpcBindingToStringBindingW(byval Binding as RPC_BINDING_HANDLE, byval StringBinding as RPC_WSTR ptr) as RPC_STATUS


declare function RpcBindingVectorFree(byval BindingVector as RPC_BINDING_VECTOR ptr ptr) as RPC_STATUS
declare function RpcStringBindingComposeA(byval ObjUuid as RPC_CSTR, byval Protseq as RPC_CSTR, byval NetworkAddr as RPC_CSTR, byval Endpoint as RPC_CSTR, byval Options as RPC_CSTR, byval StringBinding as RPC_CSTR ptr) as RPC_STATUS

 declare function RpcStringBindingCompose alias "RpcStringBindingComposeA"(byval ObjUuid as RPC_CSTR, byval Protseq as RPC_CSTR, byval NetworkAddr as RPC_CSTR, byval Endpoint as RPC_CSTR, byval Options as RPC_CSTR, byval StringBinding as RPC_CSTR ptr) as RPC_STATUS

declare function RpcStringBindingComposeW(byval ObjUuid as RPC_WSTR, byval Protseq as RPC_WSTR, byval NetworkAddr as RPC_WSTR, byval Endpoint as RPC_WSTR, byval Options as RPC_WSTR, byval StringBinding as RPC_WSTR ptr) as RPC_STATUS


declare function RpcStringBindingParseA(byval StringBinding as RPC_CSTR, byval ObjUuid as RPC_CSTR ptr, byval Protseq as RPC_CSTR ptr, byval NetworkAddr as RPC_CSTR ptr, byval Endpoint as RPC_CSTR ptr, byval NetworkOptions as RPC_CSTR ptr) as RPC_STATUS

 declare function RpcStringBindingParse alias "RpcStringBindingParseA"(byval StringBinding as RPC_CSTR, byval ObjUuid as RPC_CSTR ptr, byval Protseq as RPC_CSTR ptr, byval NetworkAddr as RPC_CSTR ptr, byval Endpoint as RPC_CSTR ptr, byval NetworkOptions as RPC_CSTR ptr) as RPC_STATUS

declare function RpcStringBindingParseW(byval StringBinding as RPC_WSTR, byval ObjUuid as RPC_WSTR ptr, byval Protseq as RPC_WSTR ptr, byval NetworkAddr as RPC_WSTR ptr, byval Endpoint as RPC_WSTR ptr, byval NetworkOptions as RPC_WSTR ptr) as RPC_STATUS


declare function RpcStringFreeA(byval String as RPC_CSTR ptr) as RPC_STATUS

 declare function RpcStringFree alias "RpcStringFreeA"(byval String as RPC_CSTR ptr) as RPC_STATUS

declare function RpcStringFreeW(byval String as RPC_WSTR ptr) as RPC_STATUS


declare function RpcIfInqId(byval RpcIfHandle as RPC_IF_HANDLE, byval RpcIfId as RPC_IF_ID ptr) as RPC_STATUS
declare function RpcNetworkIsProtseqValidA(byval Protseq as RPC_CSTR) as RPC_STATUS

 declare function RpcNetworkIsProtseqValid alias "RpcNetworkIsProtseqValidA"(byval Protseq as RPC_CSTR) as RPC_STATUS

declare function RpcNetworkIsProtseqValidW(byval Protseq as RPC_WSTR) as RPC_STATUS


declare function RpcMgmtInqComTimeout(byval Binding as RPC_BINDING_HANDLE, byval Timeout as ulong ptr) as RPC_STATUS
declare function RpcMgmtSetComTimeout(byval Binding as RPC_BINDING_HANDLE, byval Timeout as ulong) as RPC_STATUS
declare function RpcMgmtSetCancelTimeout(byval Timeout as long) as RPC_STATUS
declare function RpcNetworkInqProtseqsA(byval ProtseqVector as RPC_PROTSEQ_VECTORA ptr ptr) as RPC_STATUS

 declare function RpcNetworkInqProtseqs alias "RpcNetworkInqProtseqsA"(byval ProtseqVector as RPC_PROTSEQ_VECTORA ptr ptr) as RPC_STATUS

declare function RpcNetworkInqProtseqsW(byval ProtseqVector as RPC_PROTSEQ_VECTORW ptr ptr) as RPC_STATUS


declare function RpcObjectInqType(byval ObjUuid as UUID ptr, byval TypeUuid as UUID ptr) as RPC_STATUS
declare function RpcObjectSetInqFn(byval InquiryFn as sub(byval ObjectUuid as UUID ptr, byval TypeUuid as UUID ptr, byval Status as RPC_STATUS ptr)) as RPC_STATUS
declare function RpcObjectSetType(byval ObjUuid as UUID ptr, byval TypeUuid as UUID ptr) as RPC_STATUS
declare function RpcProtseqVectorFreeA(byval ProtseqVector as RPC_PROTSEQ_VECTORA ptr ptr) as RPC_STATUS

 declare function RpcProtseqVectorFree alias "RpcProtseqVectorFreeA"(byval ProtseqVector as RPC_PROTSEQ_VECTORA ptr ptr) as RPC_STATUS

declare function RpcProtseqVectorFreeW(byval ProtseqVector as RPC_PROTSEQ_VECTORW ptr ptr) as RPC_STATUS


declare function RpcServerInqBindings(byval BindingVector as RPC_BINDING_VECTOR ptr ptr) as RPC_STATUS
declare function RpcServerInqIf(byval IfSpec as RPC_IF_HANDLE, byval MgrTypeUuid as UUID ptr, byval MgrEpv as any ptr ptr) as RPC_STATUS
declare function RpcServerListen(byval MinimumCallThreads as ulong, byval MaxCalls as ulong, byval DontWait as ulong) as RPC_STATUS
declare function RpcServerRegisterIf(byval IfSpec as RPC_IF_HANDLE, byval MgrTypeUuid as UUID ptr, byval MgrEpv as any ptr) as RPC_STATUS
declare function RpcServerRegisterIfEx(byval IfSpec as RPC_IF_HANDLE, byval MgrTypeUuid as UUID ptr, byval MgrEpv as any ptr, byval Flags as ulong, byval MaxCalls as ulong, byval IfCallback as function(byval InterfaceUuid as RPC_IF_HANDLE, byval Context as any ptr) as RPC_STATUS) as RPC_STATUS
declare function RpcServerRegisterIf2(byval IfSpec as RPC_IF_HANDLE, byval MgrTypeUuid as UUID ptr, byval MgrEpv as any ptr, byval Flags as ulong, byval MaxCalls as ulong, byval MaxRpcSize as ulong, byval IfCallbackFn as function(byval InterfaceUuid as RPC_IF_HANDLE, byval Context as any ptr) as RPC_STATUS) as RPC_STATUS
declare function RpcServerUnregisterIf(byval IfSpec as RPC_IF_HANDLE, byval MgrTypeUuid as UUID ptr, byval WaitForCallsToComplete as ulong) as RPC_STATUS
declare function RpcServerUnregisterIfEx(byval IfSpec as RPC_IF_HANDLE, byval MgrTypeUuid as UUID ptr, byval RundownContextHandles as long) as RPC_STATUS
declare function RpcServerUseAllProtseqs(byval MaxCalls as ulong, byval SecurityDescriptor as any ptr) as RPC_STATUS
declare function RpcServerUseAllProtseqsEx(byval MaxCalls as ulong, byval SecurityDescriptor as any ptr, byval Policy as PRPC_POLICY) as RPC_STATUS
declare function RpcServerUseAllProtseqsIf(byval MaxCalls as ulong, byval IfSpec as RPC_IF_HANDLE, byval SecurityDescriptor as any ptr) as RPC_STATUS
declare function RpcServerUseAllProtseqsIfEx(byval MaxCalls as ulong, byval IfSpec as RPC_IF_HANDLE, byval SecurityDescriptor as any ptr, byval Policy as PRPC_POLICY) as RPC_STATUS
declare function RpcServerUseProtseqA(byval Protseq as RPC_CSTR, byval MaxCalls as ulong, byval SecurityDescriptor as any ptr) as RPC_STATUS

 declare function RpcServerUseProtseq alias "RpcServerUseProtseqA"(byval Protseq as RPC_CSTR, byval MaxCalls as ulong, byval SecurityDescriptor as any ptr) as RPC_STATUS

declare function RpcServerUseProtseqExA(byval Protseq as RPC_CSTR, byval MaxCalls as ulong, byval SecurityDescriptor as any ptr, byval Policy as PRPC_POLICY) as RPC_STATUS

 declare function RpcServerUseProtseqEx alias "RpcServerUseProtseqExA"(byval Protseq as RPC_CSTR, byval MaxCalls as ulong, byval SecurityDescriptor as any ptr, byval Policy as PRPC_POLICY) as RPC_STATUS

declare function RpcServerUseProtseqW(byval Protseq as RPC_WSTR, byval MaxCalls as ulong, byval SecurityDescriptor as any ptr) as RPC_STATUS


declare function RpcServerUseProtseqExW(byval Protseq as RPC_WSTR, byval MaxCalls as ulong, byval SecurityDescriptor as any ptr, byval Policy as PRPC_POLICY) as RPC_STATUS


declare function RpcServerUseProtseqEpA(byval Protseq as RPC_CSTR, byval MaxCalls as ulong, byval Endpoint as RPC_CSTR, byval SecurityDescriptor as any ptr) as RPC_STATUS

 declare function RpcServerUseProtseqEp alias "RpcServerUseProtseqEpA"(byval Protseq as RPC_CSTR, byval MaxCalls as ulong, byval Endpoint as RPC_CSTR, byval SecurityDescriptor as any ptr) as RPC_STATUS

declare function RpcServerUseProtseqEpExA(byval Protseq as RPC_CSTR, byval MaxCalls as ulong, byval Endpoint as RPC_CSTR, byval SecurityDescriptor as any ptr, byval Policy as PRPC_POLICY) as RPC_STATUS

 declare function RpcServerUseProtseqEpEx alias "RpcServerUseProtseqEpExA"(byval Protseq as RPC_CSTR, byval MaxCalls as ulong, byval Endpoint as RPC_CSTR, byval SecurityDescriptor as any ptr, byval Policy as PRPC_POLICY) as RPC_STATUS

declare function RpcServerUseProtseqEpW(byval Protseq as RPC_WSTR, byval MaxCalls as ulong, byval Endpoint as RPC_WSTR, byval SecurityDescriptor as any ptr) as RPC_STATUS


declare function RpcServerUseProtseqEpExW(byval Protseq as RPC_WSTR, byval MaxCalls as ulong, byval Endpoint as RPC_WSTR, byval SecurityDescriptor as any ptr, byval Policy as PRPC_POLICY) as RPC_STATUS


declare function RpcServerUseProtseqIfA(byval Protseq as RPC_CSTR, byval MaxCalls as ulong, byval IfSpec as RPC_IF_HANDLE, byval SecurityDescriptor as any ptr) as RPC_STATUS

 declare function RpcServerUseProtseqIf alias "RpcServerUseProtseqIfA"(byval Protseq as RPC_CSTR, byval MaxCalls as ulong, byval IfSpec as RPC_IF_HANDLE, byval SecurityDescriptor as any ptr) as RPC_STATUS

declare function RpcServerUseProtseqIfExA(byval Protseq as RPC_CSTR, byval MaxCalls as ulong, byval IfSpec as RPC_IF_HANDLE, byval SecurityDescriptor as any ptr, byval Policy as PRPC_POLICY) as RPC_STATUS

 declare function RpcServerUseProtseqIfEx alias "RpcServerUseProtseqIfExA"(byval Protseq as RPC_CSTR, byval MaxCalls as ulong, byval IfSpec as RPC_IF_HANDLE, byval SecurityDescriptor as any ptr, byval Policy as PRPC_POLICY) as RPC_STATUS

declare function RpcServerUseProtseqIfW(byval Protseq as RPC_WSTR, byval MaxCalls as ulong, byval IfSpec as RPC_IF_HANDLE, byval SecurityDescriptor as any ptr) as RPC_STATUS


declare function RpcServerUseProtseqIfExW(byval Protseq as RPC_WSTR, byval MaxCalls as ulong, byval IfSpec as RPC_IF_HANDLE, byval SecurityDescriptor as any ptr, byval Policy as PRPC_POLICY) as RPC_STATUS


declare sub RpcServerYield()
declare function RpcMgmtStatsVectorFree(byval StatsVector as RPC_STATS_VECTOR ptr ptr) as RPC_STATUS
declare function RpcMgmtInqStats(byval Binding as RPC_BINDING_HANDLE, byval Statistics as RPC_STATS_VECTOR ptr ptr) as RPC_STATUS
declare function RpcMgmtIsServerListening(byval Binding as RPC_BINDING_HANDLE) as RPC_STATUS
declare function RpcMgmtStopServerListening(byval Binding as RPC_BINDING_HANDLE) as RPC_STATUS
declare function RpcMgmtWaitServerListen() as RPC_STATUS
declare function RpcMgmtSetServerStackSize(byval ThreadStackSize as ulong) as RPC_STATUS
declare sub RpcSsDontSerializeContext()
declare function RpcMgmtEnableIdleCleanup() as RPC_STATUS
declare function RpcMgmtInqIfIds(byval Binding as RPC_BINDING_HANDLE, byval IfIdVector as RPC_IF_ID_VECTOR ptr ptr) as RPC_STATUS
declare function RpcIfIdVectorFree(byval IfIdVector as RPC_IF_ID_VECTOR ptr ptr) as RPC_STATUS
declare function RpcMgmtInqServerPrincNameA(byval Binding as RPC_BINDING_HANDLE, byval AuthnSvc as ulong, byval ServerPrincName as RPC_CSTR ptr) as RPC_STATUS

 declare function RpcMgmtInqServerPrincName alias "RpcMgmtInqServerPrincNameA"(byval Binding as RPC_BINDING_HANDLE, byval AuthnSvc as ulong, byval ServerPrincName as RPC_CSTR ptr) as RPC_STATUS

declare function RpcMgmtInqServerPrincNameW(byval Binding as RPC_BINDING_HANDLE, byval AuthnSvc as ulong, byval ServerPrincName as RPC_WSTR ptr) as RPC_STATUS


declare function RpcServerInqDefaultPrincNameA(byval AuthnSvc as ulong, byval PrincName as RPC_CSTR ptr) as RPC_STATUS

 declare function RpcServerInqDefaultPrincName alias "RpcServerInqDefaultPrincNameA"(byval AuthnSvc as ulong, byval PrincName as RPC_CSTR ptr) as RPC_STATUS

declare function RpcServerInqDefaultPrincNameW(byval AuthnSvc as ulong, byval PrincName as RPC_WSTR ptr) as RPC_STATUS


declare function RpcEpResolveBinding(byval Binding as RPC_BINDING_HANDLE, byval IfSpec as RPC_IF_HANDLE) as RPC_STATUS
declare function RpcNsBindingInqEntryNameA(byval Binding as RPC_BINDING_HANDLE, byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR ptr) as RPC_STATUS

 declare function RpcNsBindingInqEntryName alias "RpcNsBindingInqEntryNameA"(byval Binding as RPC_BINDING_HANDLE, byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR ptr) as RPC_STATUS

declare function RpcNsBindingInqEntryNameW(byval Binding as RPC_BINDING_HANDLE, byval EntryNameSyntax as ulong, byval EntryName as RPC_WSTR ptr) as RPC_STATUS


type RPC_AUTH_IDENTITY_HANDLE as any ptr
type RPC_AUTHZ_HANDLE as any ptr
const RPC_C_AUTHN_LEVEL_DEFAULT = 0
const RPC_C_AUTHN_LEVEL_NONE = 1
const RPC_C_AUTHN_LEVEL_CONNECT = 2
const RPC_C_AUTHN_LEVEL_CALL = 3
const RPC_C_AUTHN_LEVEL_PKT = 4
const RPC_C_AUTHN_LEVEL_PKT_INTEGRITY = 5
const RPC_C_AUTHN_LEVEL_PKT_PRIVACY = 6
const RPC_C_IMP_LEVEL_DEFAULT = 0
const RPC_C_IMP_LEVEL_ANONYMOUS = 1
const RPC_C_IMP_LEVEL_IDENTIFY = 2
const RPC_C_IMP_LEVEL_IMPERSONATE = 3
const RPC_C_IMP_LEVEL_DELEGATE = 4
const RPC_C_QOS_IDENTITY_STATIC = 0
const RPC_C_QOS_IDENTITY_DYNAMIC = 1
const RPC_C_QOS_CAPABILITIES_DEFAULT = &h00
const RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH = &h1
const RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC = &h2
const RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY = &h4
const RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE = &h8
const RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT = &h10
const RPC_C_PROTECT_LEVEL_DEFAULT = RPC_C_AUTHN_LEVEL_DEFAULT
const RPC_C_PROTECT_LEVEL_NONE = RPC_C_AUTHN_LEVEL_NONE
const RPC_C_PROTECT_LEVEL_CONNECT = RPC_C_AUTHN_LEVEL_CONNECT
const RPC_C_PROTECT_LEVEL_CALL = RPC_C_AUTHN_LEVEL_CALL
const RPC_C_PROTECT_LEVEL_PKT = RPC_C_AUTHN_LEVEL_PKT
const RPC_C_PROTECT_LEVEL_PKT_INTEGRITY = RPC_C_AUTHN_LEVEL_PKT_INTEGRITY
const RPC_C_PROTECT_LEVEL_PKT_PRIVACY = RPC_C_AUTHN_LEVEL_PKT_PRIVACY
const RPC_C_AUTHN_NONE = 0
const RPC_C_AUTHN_DCE_PRIVATE = 1
const RPC_C_AUTHN_DCE_PUBLIC = 2
const RPC_C_AUTHN_DEC_PUBLIC = 4
const RPC_C_AUTHN_GSS_NEGOTIATE = 9
const RPC_C_AUTHN_WINNT = 10
const RPC_C_AUTHN_GSS_SCHANNEL = 14
const RPC_C_AUTHN_GSS_KERBEROS = 16
const RPC_C_AUTHN_DPA = 17
const RPC_C_AUTHN_MSN = 18
const RPC_C_AUTHN_DIGEST = 21
const RPC_C_AUTHN_MQ = 100
const RPC_C_AUTHN_DEFAULT = &hFFFFFFFF
const RPC_C_NO_CREDENTIALS = cast(RPC_AUTH_IDENTITY_HANDLE, MAXUINT_PTR)
const RPC_C_SECURITY_QOS_VERSION = 1
const RPC_C_SECURITY_QOS_VERSION_1 = 1

type _RPC_SECURITY_QOS
 Version as ulong
 Capabilities as ulong
 IdentityTracking as ulong
 ImpersonationType as ulong
end type

type RPC_SECURITY_QOS as _RPC_SECURITY_QOS
type PRPC_SECURITY_QOS as _RPC_SECURITY_QOS ptr
const SEC_WINNT_AUTH_IDENTITY_ANSI = &h1
const SEC_WINNT_AUTH_IDENTITY_UNICODE = &h2

type _SEC_WINNT_AUTH_IDENTITY_W
 User as ushort ptr
 UserLength as ulong
 Domain as ushort ptr
 DomainLength as ulong
 Password as ushort ptr
 PasswordLength as ulong
 Flags as ulong
end type

type SEC_WINNT_AUTH_IDENTITY_W as _SEC_WINNT_AUTH_IDENTITY_W
type PSEC_WINNT_AUTH_IDENTITY_W as _SEC_WINNT_AUTH_IDENTITY_W ptr

type _SEC_WINNT_AUTH_IDENTITY_A
 User as ubyte ptr
 UserLength as ulong
 Domain as ubyte ptr
 DomainLength as ulong
 Password as ubyte ptr
 PasswordLength as ulong
 Flags as ulong
end type

type SEC_WINNT_AUTH_IDENTITY_A as _SEC_WINNT_AUTH_IDENTITY_A
type PSEC_WINNT_AUTH_IDENTITY_A as _SEC_WINNT_AUTH_IDENTITY_A ptr

 type SEC_WINNT_AUTH_IDENTITY as SEC_WINNT_AUTH_IDENTITY_A
 type PSEC_WINNT_AUTH_IDENTITY as PSEC_WINNT_AUTH_IDENTITY_A
 type _SEC_WINNT_AUTH_IDENTITY as _SEC_WINNT_AUTH_IDENTITY_A

const RPC_C_SECURITY_QOS_VERSION_2 = 2
const RPC_C_AUTHN_INFO_TYPE_HTTP = 1
const RPC_C_HTTP_AUTHN_TARGET_SERVER = 1
const RPC_C_HTTP_AUTHN_TARGET_PROXY = 2
const RPC_C_HTTP_AUTHN_SCHEME_BASIC = &h00000001
const RPC_C_HTTP_AUTHN_SCHEME_NTLM = &h00000002
const RPC_C_HTTP_AUTHN_SCHEME_PASSPORT = &h00000004
const RPC_C_HTTP_AUTHN_SCHEME_DIGEST = &h00000008
const RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE = &h00000010
const RPC_C_HTTP_AUTHN_SCHEME_CERT = &h00010000
const RPC_C_HTTP_FLAG_USE_SSL = 1
const RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME = 2
const RPC_C_HTTP_FLAG_IGNORE_CERT_CN_INVALID = 8

type _RPC_HTTP_TRANSPORT_CREDENTIALS_W
 TransportCredentials as SEC_WINNT_AUTH_IDENTITY_W ptr
 Flags as ulong
 AuthenticationTarget as ulong
 NumberOfAuthnSchemes as ulong
 AuthnSchemes as ulong ptr
 ServerCertificateSubject as ushort ptr
end type

type RPC_HTTP_TRANSPORT_CREDENTIALS_W as _RPC_HTTP_TRANSPORT_CREDENTIALS_W
type PRPC_HTTP_TRANSPORT_CREDENTIALS_W as _RPC_HTTP_TRANSPORT_CREDENTIALS_W ptr

type _RPC_HTTP_TRANSPORT_CREDENTIALS_A
 TransportCredentials as SEC_WINNT_AUTH_IDENTITY_A ptr
 Flags as ulong
 AuthenticationTarget as ulong
 NumberOfAuthnSchemes as ulong
 AuthnSchemes as ulong ptr
 ServerCertificateSubject as ubyte ptr
end type

type RPC_HTTP_TRANSPORT_CREDENTIALS_A as _RPC_HTTP_TRANSPORT_CREDENTIALS_A
type PRPC_HTTP_TRANSPORT_CREDENTIALS_A as _RPC_HTTP_TRANSPORT_CREDENTIALS_A ptr

union _RPC_SECURITY_QOS_V2_W_u
 HttpCredentials as RPC_HTTP_TRANSPORT_CREDENTIALS_W ptr
end union

type _RPC_SECURITY_QOS_V2_W
 Version as ulong
 Capabilities as ulong
 IdentityTracking as ulong
 ImpersonationType as ulong
 AdditionalSecurityInfoType as ulong
 u as _RPC_SECURITY_QOS_V2_W_u
end type

type RPC_SECURITY_QOS_V2_W as _RPC_SECURITY_QOS_V2_W
type PRPC_SECURITY_QOS_V2_W as _RPC_SECURITY_QOS_V2_W ptr

union _RPC_SECURITY_QOS_V2_A_u
 HttpCredentials as RPC_HTTP_TRANSPORT_CREDENTIALS_A ptr
end union

type _RPC_SECURITY_QOS_V2_A
 Version as ulong
 Capabilities as ulong
 IdentityTracking as ulong
 ImpersonationType as ulong
 AdditionalSecurityInfoType as ulong
 u as _RPC_SECURITY_QOS_V2_A_u
end type

type RPC_SECURITY_QOS_V2_A as _RPC_SECURITY_QOS_V2_A
type PRPC_SECURITY_QOS_V2_A as _RPC_SECURITY_QOS_V2_A ptr
const RPC_C_SECURITY_QOS_VERSION_3 = 3

union _RPC_SECURITY_QOS_V3_W_u
 HttpCredentials as RPC_HTTP_TRANSPORT_CREDENTIALS_W ptr
end union

type _RPC_SECURITY_QOS_V3_W
 Version as ulong
 Capabilities as ulong
 IdentityTracking as ulong
 ImpersonationType as ulong
 AdditionalSecurityInfoType as ulong
 u as _RPC_SECURITY_QOS_V3_W_u
 Sid as any ptr
end type

type RPC_SECURITY_QOS_V3_W as _RPC_SECURITY_QOS_V3_W
type PRPC_SECURITY_QOS_V3_W as _RPC_SECURITY_QOS_V3_W ptr

union _RPC_SECURITY_QOS_V3_A_u
 HttpCredentials as RPC_HTTP_TRANSPORT_CREDENTIALS_A ptr
end union

type _RPC_SECURITY_QOS_V3_A
 Version as ulong
 Capabilities as ulong
 IdentityTracking as ulong
 ImpersonationType as ulong
 AdditionalSecurityInfoType as ulong
 u as _RPC_SECURITY_QOS_V3_A_u
 Sid as any ptr
end type

type RPC_SECURITY_QOS_V3_A as _RPC_SECURITY_QOS_V3_A
type PRPC_SECURITY_QOS_V3_A as _RPC_SECURITY_QOS_V3_A ptr

 type RPC_SECURITY_QOS_V2 as RPC_SECURITY_QOS_V2_A
 type PRPC_SECURITY_QOS_V2 as PRPC_SECURITY_QOS_V2_A
 type _RPC_SECURITY_QOS_V2 as _RPC_SECURITY_QOS_V2_A
 type RPC_HTTP_TRANSPORT_CREDENTIALS as RPC_HTTP_TRANSPORT_CREDENTIALS_A
 type PRPC_HTTP_TRANSPORT_CREDENTIALS as PRPC_HTTP_TRANSPORT_CREDENTIALS_A
 type _RPC_HTTP_TRANSPORT_CREDENTIALS as _RPC_HTTP_TRANSPORT_CREDENTIALS_A
 type RPC_SECURITY_QOS_V3 as RPC_SECURITY_QOS_V3_A
 type PRPC_SECURITY_QOS_V3 as PRPC_SECURITY_QOS_V3_A
 type _RPC_SECURITY_QOS_V3 as _RPC_SECURITY_QOS_V3_A

type _RPC_HTTP_REDIRECTOR_STAGE as long
enum
 RPCHTTP_RS_REDIRECT = 1
 RPCHTTP_RS_ACCESS_1
 RPCHTTP_RS_SESSION
 RPCHTTP_RS_ACCESS_2
 RPCHTTP_RS_INTERFACE
end enum

type RPC_HTTP_REDIRECTOR_STAGE as _RPC_HTTP_REDIRECTOR_STAGE
type RPC_NEW_HTTP_PROXY_CHANNEL as function(byval RedirectorStage as RPC_HTTP_REDIRECTOR_STAGE, byval ServerName as ushort ptr, byval ServerPort as ushort ptr, byval RemoteUser as ushort ptr, byval AuthType as ushort ptr, byval ResourceUuid as any ptr, byval Metadata as any ptr, byval SessionId as any ptr, byval Interface as any ptr, byval Reserved as any ptr, byval Flags as ulong, byval NewServerName as ushort ptr ptr, byval NewServerPort as ushort ptr ptr) as RPC_STATUS
type RPC_HTTP_PROXY_FREE_STRING as sub(byval String as ushort ptr)

const RPC_C_AUTHZ_NONE = 0
const RPC_C_AUTHZ_NAME = 1
const RPC_C_AUTHZ_DCE = 2
const RPC_C_AUTHZ_DEFAULT = &hffffffff

declare function RpcImpersonateClient(byval BindingHandle as RPC_BINDING_HANDLE) as RPC_STATUS
declare function RpcRevertToSelfEx(byval BindingHandle as RPC_BINDING_HANDLE) as RPC_STATUS
declare function RpcRevertToSelf() as RPC_STATUS
declare function RpcBindingInqAuthClientA(byval ClientBinding as RPC_BINDING_HANDLE, byval Privs as RPC_AUTHZ_HANDLE ptr, byval ServerPrincName as RPC_CSTR ptr, byval AuthnLevel as ulong ptr, byval AuthnSvc as ulong ptr, byval AuthzSvc as ulong ptr) as RPC_STATUS
declare function RpcBindingInqAuthClientW(byval ClientBinding as RPC_BINDING_HANDLE, byval Privs as RPC_AUTHZ_HANDLE ptr, byval ServerPrincName as RPC_WSTR ptr, byval AuthnLevel as ulong ptr, byval AuthnSvc as ulong ptr, byval AuthzSvc as ulong ptr) as RPC_STATUS
declare function RpcBindingInqAuthClientExA(byval ClientBinding as RPC_BINDING_HANDLE, byval Privs as RPC_AUTHZ_HANDLE ptr, byval ServerPrincName as RPC_CSTR ptr, byval AuthnLevel as ulong ptr, byval AuthnSvc as ulong ptr, byval AuthzSvc as ulong ptr, byval Flags as ulong) as RPC_STATUS
declare function RpcBindingInqAuthClientExW(byval ClientBinding as RPC_BINDING_HANDLE, byval Privs as RPC_AUTHZ_HANDLE ptr, byval ServerPrincName as RPC_WSTR ptr, byval AuthnLevel as ulong ptr, byval AuthnSvc as ulong ptr, byval AuthzSvc as ulong ptr, byval Flags as ulong) as RPC_STATUS
declare function RpcBindingInqAuthInfoA(byval Binding as RPC_BINDING_HANDLE, byval ServerPrincName as RPC_CSTR ptr, byval AuthnLevel as ulong ptr, byval AuthnSvc as ulong ptr, byval AuthIdentity as RPC_AUTH_IDENTITY_HANDLE ptr, byval AuthzSvc as ulong ptr) as RPC_STATUS
declare function RpcBindingInqAuthInfoW(byval Binding as RPC_BINDING_HANDLE, byval ServerPrincName as RPC_WSTR ptr, byval AuthnLevel as ulong ptr, byval AuthnSvc as ulong ptr, byval AuthIdentity as RPC_AUTH_IDENTITY_HANDLE ptr, byval AuthzSvc as ulong ptr) as RPC_STATUS
declare function RpcBindingSetAuthInfoA(byval Binding as RPC_BINDING_HANDLE, byval ServerPrincName as RPC_CSTR, byval AuthnLevel as ulong, byval AuthnSvc as ulong, byval AuthIdentity as RPC_AUTH_IDENTITY_HANDLE, byval AuthzSvc as ulong) as RPC_STATUS
declare function RpcBindingSetAuthInfoExA(byval Binding as RPC_BINDING_HANDLE, byval ServerPrincName as RPC_CSTR, byval AuthnLevel as ulong, byval AuthnSvc as ulong, byval AuthIdentity as RPC_AUTH_IDENTITY_HANDLE, byval AuthzSvc as ulong, byval SecurityQos as RPC_SECURITY_QOS ptr) as RPC_STATUS
declare function RpcBindingSetAuthInfoW(byval Binding as RPC_BINDING_HANDLE, byval ServerPrincName as RPC_WSTR, byval AuthnLevel as ulong, byval AuthnSvc as ulong, byval AuthIdentity as RPC_AUTH_IDENTITY_HANDLE, byval AuthzSvc as ulong) as RPC_STATUS
declare function RpcBindingSetAuthInfoExW(byval Binding as RPC_BINDING_HANDLE, byval ServerPrincName as RPC_WSTR, byval AuthnLevel as ulong, byval AuthnSvc as ulong, byval AuthIdentity as RPC_AUTH_IDENTITY_HANDLE, byval AuthzSvc as ulong, byval SecurityQOS as RPC_SECURITY_QOS ptr) as RPC_STATUS
declare function RpcBindingInqAuthInfoExA(byval Binding as RPC_BINDING_HANDLE, byval ServerPrincName as RPC_CSTR ptr, byval AuthnLevel as ulong ptr, byval AuthnSvc as ulong ptr, byval AuthIdentity as RPC_AUTH_IDENTITY_HANDLE ptr, byval AuthzSvc as ulong ptr, byval RpcQosVersion as ulong, byval SecurityQOS as RPC_SECURITY_QOS ptr) as RPC_STATUS
declare function RpcBindingInqAuthInfoExW(byval Binding as RPC_BINDING_HANDLE, byval ServerPrincName as RPC_WSTR ptr, byval AuthnLevel as ulong ptr, byval AuthnSvc as ulong ptr, byval AuthIdentity as RPC_AUTH_IDENTITY_HANDLE ptr, byval AuthzSvc as ulong ptr, byval RpcQosVersion as ulong, byval SecurityQOS as RPC_SECURITY_QOS ptr) as RPC_STATUS
type RPC_AUTH_KEY_RETRIEVAL_FN as sub(byval Arg as any ptr, byval ServerPrincName as ushort ptr, byval KeyVer as ulong, byval Key as any ptr ptr, byval Status as RPC_STATUS ptr)
declare function RpcServerRegisterAuthInfoA(byval ServerPrincName as RPC_CSTR, byval AuthnSvc as ulong, byval GetKeyFn as RPC_AUTH_KEY_RETRIEVAL_FN, byval Arg as any ptr) as RPC_STATUS
declare function RpcServerRegisterAuthInfoW(byval ServerPrincName as RPC_WSTR, byval AuthnSvc as ulong, byval GetKeyFn as RPC_AUTH_KEY_RETRIEVAL_FN, byval Arg as any ptr) as RPC_STATUS

 declare function RpcBindingInqAuthClient alias "RpcBindingInqAuthClientA"(byval ClientBinding as RPC_BINDING_HANDLE, byval Privs as RPC_AUTHZ_HANDLE ptr, byval ServerPrincName as RPC_CSTR ptr, byval AuthnLevel as ulong ptr, byval AuthnSvc as ulong ptr, byval AuthzSvc as ulong ptr) as RPC_STATUS
 declare function RpcBindingInqAuthClientEx alias "RpcBindingInqAuthClientExA"(byval ClientBinding as RPC_BINDING_HANDLE, byval Privs as RPC_AUTHZ_HANDLE ptr, byval ServerPrincName as RPC_CSTR ptr, byval AuthnLevel as ulong ptr, byval AuthnSvc as ulong ptr, byval AuthzSvc as ulong ptr, byval Flags as ulong) as RPC_STATUS
 declare function RpcBindingInqAuthInfo alias "RpcBindingInqAuthInfoA"(byval Binding as RPC_BINDING_HANDLE, byval ServerPrincName as RPC_CSTR ptr, byval AuthnLevel as ulong ptr, byval AuthnSvc as ulong ptr, byval AuthIdentity as RPC_AUTH_IDENTITY_HANDLE ptr, byval AuthzSvc as ulong ptr) as RPC_STATUS
 declare function RpcBindingSetAuthInfo alias "RpcBindingSetAuthInfoA"(byval Binding as RPC_BINDING_HANDLE, byval ServerPrincName as RPC_CSTR, byval AuthnLevel as ulong, byval AuthnSvc as ulong, byval AuthIdentity as RPC_AUTH_IDENTITY_HANDLE, byval AuthzSvc as ulong) as RPC_STATUS
 declare function RpcServerRegisterAuthInfo alias "RpcServerRegisterAuthInfoA"(byval ServerPrincName as RPC_CSTR, byval AuthnSvc as ulong, byval GetKeyFn as RPC_AUTH_KEY_RETRIEVAL_FN, byval Arg as any ptr) as RPC_STATUS
 declare function RpcBindingInqAuthInfoEx alias "RpcBindingInqAuthInfoExA"(byval Binding as RPC_BINDING_HANDLE, byval ServerPrincName as RPC_CSTR ptr, byval AuthnLevel as ulong ptr, byval AuthnSvc as ulong ptr, byval AuthIdentity as RPC_AUTH_IDENTITY_HANDLE ptr, byval AuthzSvc as ulong ptr, byval RpcQosVersion as ulong, byval SecurityQOS as RPC_SECURITY_QOS ptr) as RPC_STATUS
 declare function RpcBindingSetAuthInfoEx alias "RpcBindingSetAuthInfoExA"(byval Binding as RPC_BINDING_HANDLE, byval ServerPrincName as RPC_CSTR, byval AuthnLevel as ulong, byval AuthnSvc as ulong, byval AuthIdentity as RPC_AUTH_IDENTITY_HANDLE, byval AuthzSvc as ulong, byval SecurityQos as RPC_SECURITY_QOS ptr) as RPC_STATUS

type RPC_CLIENT_INFORMATION1
 UserName as ubyte ptr
 ComputerName as ubyte ptr
 Privilege as ushort
 AuthFlags as ulong
end type

type PRPC_CLIENT_INFORMATION1 as RPC_CLIENT_INFORMATION1 ptr
const DCE_C_ERROR_STRING_LEN = 256
declare function RpcBindingServerFromClient(byval ClientBinding as RPC_BINDING_HANDLE, byval ServerBinding as RPC_BINDING_HANDLE ptr) as RPC_STATUS
declare sub RpcRaiseException(byval exception as RPC_STATUS)
declare function RpcTestCancel() as RPC_STATUS
declare function RpcServerTestCancel(byval BindingHandle as RPC_BINDING_HANDLE) as RPC_STATUS
declare function RpcCancelThread(byval Thread as any ptr) as RPC_STATUS
declare function RpcCancelThreadEx(byval Thread as any ptr, byval Timeout as long) as RPC_STATUS
declare function UuidCreate(byval Uuid as UUID ptr) as RPC_STATUS
declare function UuidCreateSequential(byval Uuid as UUID ptr) as RPC_STATUS
declare function UuidToStringA(byval Uuid as UUID ptr, byval StringUuid as RPC_CSTR ptr) as RPC_STATUS

 declare function UuidToString alias "UuidToStringA"(byval Uuid as UUID ptr, byval StringUuid as RPC_CSTR ptr) as RPC_STATUS

declare function UuidFromStringA(byval StringUuid as RPC_CSTR, byval Uuid as UUID ptr) as RPC_STATUS

 declare function UuidFromString alias "UuidFromStringA"(byval StringUuid as RPC_CSTR, byval Uuid as UUID ptr) as RPC_STATUS

declare function UuidToStringW(byval Uuid as UUID ptr, byval StringUuid as RPC_WSTR ptr) as RPC_STATUS


declare function UuidFromStringW(byval StringUuid as RPC_WSTR, byval Uuid as UUID ptr) as RPC_STATUS


declare function UuidCompare(byval Uuid1 as UUID ptr, byval Uuid2 as UUID ptr, byval Status as RPC_STATUS ptr) as long
declare function UuidCreateNil(byval NilUuid as UUID ptr) as RPC_STATUS
declare function UuidEqual(byval Uuid1 as UUID ptr, byval Uuid2 as UUID ptr, byval Status as RPC_STATUS ptr) as long
declare function UuidHash(byval Uuid as UUID ptr, byval Status as RPC_STATUS ptr) as ushort
declare function UuidIsNil(byval Uuid as UUID ptr, byval Status as RPC_STATUS ptr) as long
declare function RpcEpRegisterNoReplaceA(byval IfSpec as RPC_IF_HANDLE, byval BindingVector as RPC_BINDING_VECTOR ptr, byval UuidVector as UUID_VECTOR ptr, byval Annotation as RPC_CSTR) as RPC_STATUS

 declare function RpcEpRegisterNoReplace alias "RpcEpRegisterNoReplaceA"(byval IfSpec as RPC_IF_HANDLE, byval BindingVector as RPC_BINDING_VECTOR ptr, byval UuidVector as UUID_VECTOR ptr, byval Annotation as RPC_CSTR) as RPC_STATUS

declare function RpcEpRegisterNoReplaceW(byval IfSpec as RPC_IF_HANDLE, byval BindingVector as RPC_BINDING_VECTOR ptr, byval UuidVector as UUID_VECTOR ptr, byval Annotation as RPC_WSTR) as RPC_STATUS


declare function RpcEpRegisterA(byval IfSpec as RPC_IF_HANDLE, byval BindingVector as RPC_BINDING_VECTOR ptr, byval UuidVector as UUID_VECTOR ptr, byval Annotation as RPC_CSTR) as RPC_STATUS

 declare function RpcEpRegister alias "RpcEpRegisterA"(byval IfSpec as RPC_IF_HANDLE, byval BindingVector as RPC_BINDING_VECTOR ptr, byval UuidVector as UUID_VECTOR ptr, byval Annotation as RPC_CSTR) as RPC_STATUS

declare function RpcEpRegisterW(byval IfSpec as RPC_IF_HANDLE, byval BindingVector as RPC_BINDING_VECTOR ptr, byval UuidVector as UUID_VECTOR ptr, byval Annotation as RPC_WSTR) as RPC_STATUS


declare function RpcEpUnregister(byval IfSpec as RPC_IF_HANDLE, byval BindingVector as RPC_BINDING_VECTOR ptr, byval UuidVector as UUID_VECTOR ptr) as RPC_STATUS
declare function DceErrorInqTextA(byval RpcStatus as RPC_STATUS, byval ErrorText as RPC_CSTR) as RPC_STATUS

 declare function DceErrorInqText alias "DceErrorInqTextA"(byval RpcStatus as RPC_STATUS, byval ErrorText as RPC_CSTR) as RPC_STATUS

declare function DceErrorInqTextW(byval RpcStatus as RPC_STATUS, byval ErrorText as RPC_WSTR) as RPC_STATUS


type RPC_EP_INQ_HANDLE as I_RPC_HANDLE ptr
const RPC_C_EP_ALL_ELTS = 0
const RPC_C_EP_MATCH_BY_IF = 1
const RPC_C_EP_MATCH_BY_OBJ = 2
const RPC_C_EP_MATCH_BY_BOTH = 3
const RPC_C_VERS_ALL = 1
const RPC_C_VERS_COMPATIBLE = 2
const RPC_C_VERS_EXACT = 3
const RPC_C_VERS_MAJOR_ONLY = 4
const RPC_C_VERS_UPTO = 5

declare function RpcMgmtEpEltInqBegin(byval EpBinding as RPC_BINDING_HANDLE, byval InquiryType as ulong, byval IfId as RPC_IF_ID ptr, byval VersOption as ulong, byval ObjectUuid as UUID ptr, byval InquiryContext as RPC_EP_INQ_HANDLE ptr) as RPC_STATUS
declare function RpcMgmtEpEltInqDone(byval InquiryContext as RPC_EP_INQ_HANDLE ptr) as RPC_STATUS
declare function RpcMgmtEpEltInqNextA(byval InquiryContext as RPC_EP_INQ_HANDLE, byval IfId as RPC_IF_ID ptr, byval Binding as RPC_BINDING_HANDLE ptr, byval ObjectUuid as UUID ptr, byval Annotation as RPC_CSTR ptr) as RPC_STATUS

 declare function RpcMgmtEpEltInqNext alias "RpcMgmtEpEltInqNextA"(byval InquiryContext as RPC_EP_INQ_HANDLE, byval IfId as RPC_IF_ID ptr, byval Binding as RPC_BINDING_HANDLE ptr, byval ObjectUuid as UUID ptr, byval Annotation as RPC_CSTR ptr) as RPC_STATUS

declare function RpcMgmtEpEltInqNextW(byval InquiryContext as RPC_EP_INQ_HANDLE, byval IfId as RPC_IF_ID ptr, byval Binding as RPC_BINDING_HANDLE ptr, byval ObjectUuid as UUID ptr, byval Annotation as RPC_WSTR ptr) as RPC_STATUS


declare function RpcMgmtEpUnregister(byval EpBinding as RPC_BINDING_HANDLE, byval IfId as RPC_IF_ID ptr, byval Binding as RPC_BINDING_HANDLE, byval ObjectUuid as UUID ptr) as RPC_STATUS
type RPC_MGMT_AUTHORIZATION_FN as function(byval ClientBinding as RPC_BINDING_HANDLE, byval RequestedMgmtOperation as ulong, byval Status as RPC_STATUS ptr) as long
const RPC_C_MGMT_INQ_IF_IDS = 0
const RPC_C_MGMT_INQ_PRINC_NAME = 1
const RPC_C_MGMT_INQ_STATS = 2
const RPC_C_MGMT_IS_SERVER_LISTEN = 3
const RPC_C_MGMT_STOP_SERVER_LISTEN = 4
declare function RpcMgmtSetAuthorizationFn(byval AuthorizationFn as RPC_MGMT_AUTHORIZATION_FN) as RPC_STATUS
const RPC_C_PARM_MAX_PACKET_LENGTH = 1
const RPC_C_PARM_BUFFER_LENGTH = 2
const RPC_IF_AUTOLISTEN = &h0001
const RPC_IF_OLE = &h0002
const RPC_IF_ALLOW_UNKNOWN_AUTHORITY = &h0004
const RPC_IF_ALLOW_SECURE_ONLY = &h0008
const RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH = &h0010
const RPC_IF_ALLOW_LOCAL_ONLY = &h0020
const RPC_IF_SEC_NO_CACHE = &h0040




end extern




extern "Windows"


type _RPC_VERSION
 MajorVersion as ushort
 MinorVersion as ushort
end type

type RPC_VERSION as _RPC_VERSION

type _RPC_SYNTAX_IDENTIFIER
 SyntaxGUID as GUID
 SyntaxVersion as RPC_VERSION
end type

type RPC_SYNTAX_IDENTIFIER as _RPC_SYNTAX_IDENTIFIER
type PRPC_SYNTAX_IDENTIFIER as _RPC_SYNTAX_IDENTIFIER ptr

type _RPC_MESSAGE
 Handle as RPC_BINDING_HANDLE
 DataRepresentation as ulong
 Buffer as any ptr
 BufferLength as ulong
 ProcNum as ulong
 TransferSyntax as PRPC_SYNTAX_IDENTIFIER
 RpcInterfaceInformation as any ptr
 ReservedForRuntime as any ptr
 ManagerEpv as any ptr
 ImportContext as any ptr
 RpcFlags as ulong
end type

type RPC_MESSAGE as _RPC_MESSAGE
type PRPC_MESSAGE as _RPC_MESSAGE ptr

type RPC_ADDRESS_CHANGE_TYPE as long
enum
 PROTOCOL_NOT_LOADED = 1
 PROTOCOL_LOADED
 PROTOCOL_ADDRESS_CHANGE
end enum

const RPC_CONTEXT_HANDLE_DEFAULT_GUARD = cptr(any ptr, -4083)
const RPC_CONTEXT_HANDLE_DEFAULT_FLAGS = &h000000000
const RPC_CONTEXT_HANDLE_FLAGS = &h30000000
const RPC_CONTEXT_HANDLE_SERIALIZE = &h10000000
const RPC_CONTEXT_HANDLE_DONT_SERIALIZE = &h20000000
const RPC_NCA_FLAGS_DEFAULT = &h000000000
const RPC_NCA_FLAGS_IDEMPOTENT = &h00000001
const RPC_NCA_FLAGS_BROADCAST = &h00000002
const RPC_NCA_FLAGS_MAYBE = &h00000004
const RPC_BUFFER_COMPLETE = &h00001000
const RPC_BUFFER_PARTIAL = &h00002000
const RPC_BUFFER_EXTRA = &h00004000
const RPC_BUFFER_ASYNC = &h00008000
const RPC_BUFFER_NONOTIFY = &h00010000
const RPCFLG_MESSAGE = &h01000000
const RPCFLG_AUTO_COMPLETE = &h08000000
const RPCFLG_LOCAL_CALL = &h10000000
const RPCFLG_INPUT_SYNCHRONOUS = &h20000000
const RPCFLG_ASYNCHRONOUS = &h40000000
const RPCFLG_NON_NDR = &h80000000
const RPCFLG_HAS_MULTI_SYNTAXES = &h02000000
const RPCFLG_HAS_CALLBACK = &h04000000
const RPC_FLAGS_VALID_BIT = &h00008000
type RPC_DISPATCH_FUNCTION as sub(byval Message as PRPC_MESSAGE)

type RPC_DISPATCH_TABLE
 DispatchTableCount as ulong
 DispatchTable as RPC_DISPATCH_FUNCTION ptr
 Reserved as LONG_PTR
end type

type PRPC_DISPATCH_TABLE as RPC_DISPATCH_TABLE ptr

type _RPC_PROTSEQ_ENDPOINT
 RpcProtocolSequence as ubyte ptr
 Endpoint as ubyte ptr
end type

type RPC_PROTSEQ_ENDPOINT as _RPC_PROTSEQ_ENDPOINT
type PRPC_PROTSEQ_ENDPOINT as _RPC_PROTSEQ_ENDPOINT ptr
const NT351_INTERFACE_SIZE = &h40
const RPC_INTERFACE_HAS_PIPES = &h0001

type _RPC_SERVER_INTERFACE
 Length as ulong
 InterfaceId as RPC_SYNTAX_IDENTIFIER
 TransferSyntax as RPC_SYNTAX_IDENTIFIER
 DispatchTable as PRPC_DISPATCH_TABLE
 RpcProtseqEndpointCount as ulong
 RpcProtseqEndpoint as PRPC_PROTSEQ_ENDPOINT
 DefaultManagerEpv as any ptr
 InterpreterInfo as const any ptr
 Flags as ulong
end type

type RPC_SERVER_INTERFACE as _RPC_SERVER_INTERFACE
type PRPC_SERVER_INTERFACE as _RPC_SERVER_INTERFACE ptr

type _RPC_CLIENT_INTERFACE
 Length as ulong
 InterfaceId as RPC_SYNTAX_IDENTIFIER
 TransferSyntax as RPC_SYNTAX_IDENTIFIER
 DispatchTable as PRPC_DISPATCH_TABLE
 RpcProtseqEndpointCount as ulong
 RpcProtseqEndpoint as PRPC_PROTSEQ_ENDPOINT
 Reserved as ULONG_PTR
 InterpreterInfo as const any ptr
 Flags as ulong
end type

type RPC_CLIENT_INTERFACE as _RPC_CLIENT_INTERFACE
type PRPC_CLIENT_INTERFACE as _RPC_CLIENT_INTERFACE ptr
declare function I_RpcNegotiateTransferSyntax(byval Message as RPC_MESSAGE ptr) as RPC_STATUS
declare function I_RpcGetBuffer(byval Message as RPC_MESSAGE ptr) as RPC_STATUS
declare function I_RpcGetBufferWithObject(byval Message as RPC_MESSAGE ptr, byval ObjectUuid as UUID ptr) as RPC_STATUS
declare function I_RpcSendReceive(byval Message as RPC_MESSAGE ptr) as RPC_STATUS
declare function I_RpcFreeBuffer(byval Message as RPC_MESSAGE ptr) as RPC_STATUS
declare function I_RpcSend(byval Message as PRPC_MESSAGE) as RPC_STATUS
declare function I_RpcReceive(byval Message as PRPC_MESSAGE, byval Size as ulong) as RPC_STATUS
declare function I_RpcFreePipeBuffer(byval Message as RPC_MESSAGE ptr) as RPC_STATUS
declare function I_RpcReallocPipeBuffer(byval Message as PRPC_MESSAGE, byval NewSize as ulong) as RPC_STATUS
type I_RPC_MUTEX as any ptr
declare sub I_RpcRequestMutex(byval Mutex as I_RPC_MUTEX ptr)
declare sub I_RpcClearMutex(byval Mutex as I_RPC_MUTEX)
declare sub I_RpcDeleteMutex(byval Mutex as I_RPC_MUTEX)
declare function I_RpcAllocate(byval Size as ulong) as any ptr
declare sub I_RpcFree(byval Object as any ptr)
declare sub I_RpcPauseExecution(byval Milliseconds as ulong)
declare function I_RpcGetExtendedError() as RPC_STATUS
type PRPC_RUNDOWN as sub(byval AssociationContext as any ptr)
declare function I_RpcMonitorAssociation(byval Handle as RPC_BINDING_HANDLE, byval RundownRoutine as PRPC_RUNDOWN, byval Context as any ptr) as RPC_STATUS
declare function I_RpcStopMonitorAssociation(byval Handle as RPC_BINDING_HANDLE) as RPC_STATUS
declare function I_RpcGetCurrentCallHandle() as RPC_BINDING_HANDLE
declare function I_RpcGetAssociationContext(byval BindingHandle as RPC_BINDING_HANDLE, byval AssociationContext as any ptr ptr) as RPC_STATUS
declare function I_RpcGetServerContextList(byval BindingHandle as RPC_BINDING_HANDLE) as any ptr
declare sub I_RpcSetServerContextList(byval BindingHandle as RPC_BINDING_HANDLE, byval ServerContextList as any ptr)
declare function I_RpcNsInterfaceExported(byval EntryNameSyntax as ulong, byval EntryName as ushort ptr, byval RpcInterfaceInformation as RPC_SERVER_INTERFACE ptr) as RPC_STATUS
declare function I_RpcNsInterfaceUnexported(byval EntryNameSyntax as ulong, byval EntryName as ushort ptr, byval RpcInterfaceInformation as RPC_SERVER_INTERFACE ptr) as RPC_STATUS
declare function I_RpcBindingToStaticStringBindingW(byval Binding as RPC_BINDING_HANDLE, byval StringBinding as ushort ptr ptr) as RPC_STATUS
declare function I_RpcBindingInqSecurityContext(byval Binding as RPC_BINDING_HANDLE, byval SecurityContextHandle as any ptr ptr) as RPC_STATUS
declare function I_RpcBindingInqWireIdForSnego(byval Binding as RPC_BINDING_HANDLE, byval WireId as RPC_CSTR) as RPC_STATUS
declare function I_RpcBindingInqMarshalledTargetInfo(byval Binding as RPC_BINDING_HANDLE, byval MarshalledTargetInfoLength as ulong ptr, byval MarshalledTargetInfo as RPC_CSTR ptr) as RPC_STATUS
declare function I_RpcBindingInqLocalClientPID(byval Binding as RPC_BINDING_HANDLE, byval Pid as ulong ptr) as RPC_STATUS
declare function I_RpcBindingHandleToAsyncHandle(byval Binding as RPC_BINDING_HANDLE, byval AsyncHandle as any ptr ptr) as RPC_STATUS
declare function I_RpcNsBindingSetEntryNameW(byval Binding as RPC_BINDING_HANDLE, byval EntryNameSyntax as ulong, byval EntryName as RPC_WSTR) as RPC_STATUS


declare function I_RpcNsBindingSetEntryNameA(byval Binding as RPC_BINDING_HANDLE, byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR) as RPC_STATUS

 declare function I_RpcNsBindingSetEntryName alias "I_RpcNsBindingSetEntryNameA"(byval Binding as RPC_BINDING_HANDLE, byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR) as RPC_STATUS

declare function I_RpcServerUseProtseqEp2A(byval NetworkAddress as RPC_CSTR, byval Protseq as RPC_CSTR, byval MaxCalls as ulong, byval Endpoint as RPC_CSTR, byval SecurityDescriptor as any ptr, byval Policy as any ptr) as RPC_STATUS

 declare function I_RpcServerUseProtseqEp2 alias "I_RpcServerUseProtseqEp2A"(byval NetworkAddress as RPC_CSTR, byval Protseq as RPC_CSTR, byval MaxCalls as ulong, byval Endpoint as RPC_CSTR, byval SecurityDescriptor as any ptr, byval Policy as any ptr) as RPC_STATUS

declare function I_RpcServerUseProtseqEp2W(byval NetworkAddress as RPC_WSTR, byval Protseq as RPC_WSTR, byval MaxCalls as ulong, byval Endpoint as RPC_WSTR, byval SecurityDescriptor as any ptr, byval Policy as any ptr) as RPC_STATUS


declare function I_RpcServerUseProtseq2W(byval NetworkAddress as RPC_WSTR, byval Protseq as RPC_WSTR, byval MaxCalls as ulong, byval SecurityDescriptor as any ptr, byval Policy as any ptr) as RPC_STATUS


declare function I_RpcServerUseProtseq2A(byval NetworkAddress as RPC_CSTR, byval Protseq as RPC_CSTR, byval MaxCalls as ulong, byval SecurityDescriptor as any ptr, byval Policy as any ptr) as RPC_STATUS

 declare function I_RpcServerUseProtseq2 alias "I_RpcServerUseProtseq2A"(byval NetworkAddress as RPC_CSTR, byval Protseq as RPC_CSTR, byval MaxCalls as ulong, byval SecurityDescriptor as any ptr, byval Policy as any ptr) as RPC_STATUS

declare function I_RpcBindingInqDynamicEndpointW(byval Binding as RPC_BINDING_HANDLE, byval DynamicEndpoint as RPC_WSTR ptr) as RPC_STATUS


declare function I_RpcBindingInqDynamicEndpointA(byval Binding as RPC_BINDING_HANDLE, byval DynamicEndpoint as RPC_CSTR ptr) as RPC_STATUS

 declare function I_RpcBindingInqDynamicEndpoint alias "I_RpcBindingInqDynamicEndpointA"(byval Binding as RPC_BINDING_HANDLE, byval DynamicEndpoint as RPC_CSTR ptr) as RPC_STATUS

declare function I_RpcServerCheckClientRestriction(byval Context as RPC_BINDING_HANDLE) as RPC_STATUS
const TRANSPORT_TYPE_CN = &h01
const TRANSPORT_TYPE_DG = &h02
const TRANSPORT_TYPE_LPC = &h04
const TRANSPORT_TYPE_WMSG = &h08
declare function I_RpcBindingInqTransportType(byval Binding as RPC_BINDING_HANDLE, byval Type as ulong ptr) as RPC_STATUS

type _RPC_TRANSFER_SYNTAX
 Uuid as UUID
 VersMajor as ushort
 VersMinor as ushort
end type

type RPC_TRANSFER_SYNTAX as _RPC_TRANSFER_SYNTAX
declare function I_RpcIfInqTransferSyntaxes(byval RpcIfHandle as RPC_IF_HANDLE, byval TransferSyntaxes as RPC_TRANSFER_SYNTAX ptr, byval TransferSyntaxSize as ulong, byval TransferSyntaxCount as ulong ptr) as RPC_STATUS
declare function I_UuidCreate(byval Uuid as UUID ptr) as RPC_STATUS
declare function I_RpcBindingCopy(byval SourceBinding as RPC_BINDING_HANDLE, byval DestinationBinding as RPC_BINDING_HANDLE ptr) as RPC_STATUS
declare function I_RpcBindingIsClientLocal(byval BindingHandle as RPC_BINDING_HANDLE, byval ClientLocalFlag as ulong ptr) as RPC_STATUS
declare function I_RpcBindingInqConnId(byval Binding as RPC_BINDING_HANDLE, byval ConnId as any ptr ptr, byval pfFirstCall as long ptr) as RPC_STATUS
declare sub I_RpcSsDontSerializeContext()
declare function I_RpcLaunchDatagramReceiveThread(byval pAddress as any ptr) as RPC_STATUS
declare function I_RpcServerRegisterForwardFunction(byval pForwardFunction as function(byval InterfaceId as UUID ptr, byval InterfaceVersion as RPC_VERSION ptr, byval ObjectId as UUID ptr, byval Rpcpro as ubyte ptr, byval ppDestEndpoint as any ptr ptr) as RPC_STATUS) as RPC_STATUS
declare function I_RpcServerInqAddressChangeFn() as sub(byval arg as any ptr)
declare function I_RpcServerSetAddressChangeFn(byval pAddressChangeFn as sub(byval arg as any ptr)) as RPC_STATUS
const RPC_P_ADDR_FORMAT_TCP_IPV4 = 1
const RPC_P_ADDR_FORMAT_TCP_IPV6 = 2
declare function I_RpcServerInqLocalConnAddress(byval Binding as RPC_BINDING_HANDLE, byval Buffer as any ptr, byval BufferSize as ulong ptr, byval AddressFormat as ulong ptr) as RPC_STATUS
declare sub I_RpcSessionStrictContextHandle()
declare function I_RpcTurnOnEEInfoPropagation() as RPC_STATUS
declare function I_RpcConnectionInqSockBuffSize(byval RecvBuffSize as ulong ptr, byval SendBuffSize as ulong ptr) as RPC_STATUS
declare function I_RpcConnectionSetSockBuffSize(byval RecvBuffSize as ulong, byval SendBuffSize as ulong) as RPC_STATUS
type RPCLT_PDU_FILTER_FUNC as sub cdecl(byval Buffer as any ptr, byval BufferLength as ulong, byval fDatagram as long)
type RPC_SETFILTER_FUNC as sub cdecl(byval pfnFilter as RPCLT_PDU_FILTER_FUNC)
declare function I_RpcServerInqTransportType(byval Type as ulong ptr) as RPC_STATUS
declare function I_RpcMapWin32Status(byval Status as RPC_STATUS) as long

type _RPC_C_OPT_METADATA_DESCRIPTOR
 BufferSize as ulong
 Buffer as zstring ptr
end type

type RPC_C_OPT_METADATA_DESCRIPTOR as _RPC_C_OPT_METADATA_DESCRIPTOR

type _RDR_CALLOUT_STATE
 LastError as RPC_STATUS
 LastEEInfo as any ptr
 LastCalledStage as RPC_HTTP_REDIRECTOR_STAGE
 ServerName as ushort ptr
 ServerPort as ushort ptr
 RemoteUser as ushort ptr
 AuthType as ushort ptr
 ResourceTypePresent as ubyte
 MetadataPresent as ubyte
 SessionIdPresent as ubyte
 InterfacePresent as ubyte
 ResourceType as UUID
 Metadata as RPC_C_OPT_METADATA_DESCRIPTOR
 SessionId as UUID
 Interface as RPC_SYNTAX_IDENTIFIER
 CertContext as any ptr
end type

type RDR_CALLOUT_STATE as _RDR_CALLOUT_STATE
type I_RpcProxyIsValidMachineFn as function(byval pszMachine as zstring ptr, byval pszDotMachine as zstring ptr, byval dwPortNumber as ulong) as RPC_STATUS
type I_RpcProxyGetClientAddressFn as function(byval Context as any ptr, byval Buffer as zstring ptr, byval BufferLength as ulong ptr) as RPC_STATUS
type I_RpcProxyGetConnectionTimeoutFn as function(byval ConnectionTimeout as ulong ptr) as RPC_STATUS
type I_RpcPerformCalloutFn as function(byval Context as any ptr, byval CallOutState as RDR_CALLOUT_STATE ptr, byval Stage as RPC_HTTP_REDIRECTOR_STAGE) as RPC_STATUS
type I_RpcFreeCalloutStateFn as sub(byval CallOutState as RDR_CALLOUT_STATE ptr)

type tagI_RpcProxyCallbackInterface
 IsValidMachineFn as I_RpcProxyIsValidMachineFn
 GetClientAddressFn as I_RpcProxyGetClientAddressFn
 GetConnectionTimeoutFn as I_RpcProxyGetConnectionTimeoutFn
 PerformCalloutFn as I_RpcPerformCalloutFn
 FreeCalloutStateFn as I_RpcFreeCalloutStateFn
end type

type I_RpcProxyCallbackInterface as tagI_RpcProxyCallbackInterface
const RPC_PROXY_CONNECTION_TYPE_IN_PROXY = 0
const RPC_PROXY_CONNECTION_TYPE_OUT_PROXY = 1
declare function I_RpcProxyNewConnection(byval ConnectionType as ulong, byval ServerAddress as ushort ptr, byval ServerPort as ushort ptr, byval MinConnTimeout as ushort ptr, byval ConnectionParameter as any ptr, byval CallOutState as RDR_CALLOUT_STATE ptr, byval ProxyCallbackInterface as I_RpcProxyCallbackInterface ptr) as RPC_STATUS
declare function I_RpcReplyToClientWithStatus(byval ConnectionParameter as any ptr, byval RpcStatus as RPC_STATUS) as RPC_STATUS
declare sub I_RpcRecordCalloutFailure(byval RpcStatus as RPC_STATUS, byval CallOutState as RDR_CALLOUT_STATE ptr, byval DllName as ushort ptr)

end extern



extern "Windows"

type RPC_NS_HANDLE as any ptr
const RPC_C_NS_SYNTAX_DEFAULT = 0
const RPC_C_NS_SYNTAX_DCE = 3
const RPC_C_PROFILE_DEFAULT_ELT = 0
const RPC_C_PROFILE_ALL_ELT = 1
const RPC_C_PROFILE_ALL_ELTS = RPC_C_PROFILE_ALL_ELT
const RPC_C_PROFILE_MATCH_BY_IF = 2
const RPC_C_PROFILE_MATCH_BY_MBR = 3
const RPC_C_PROFILE_MATCH_BY_BOTH = 4
const RPC_C_NS_DEFAULT_EXP_AGE = -1

declare function RpcNsBindingExportA(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval IfSpec as RPC_IF_HANDLE, byval BindingVec as RPC_BINDING_VECTOR ptr, byval ObjectUuidVec as UUID_VECTOR ptr) as RPC_STATUS
declare function RpcNsBindingUnexportA(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval IfSpec as RPC_IF_HANDLE, byval ObjectUuidVec as UUID_VECTOR ptr) as RPC_STATUS
declare function RpcNsBindingExportW(byval EntryNameSyntax as ulong, byval EntryName as RPC_WSTR, byval IfSpec as RPC_IF_HANDLE, byval BindingVec as RPC_BINDING_VECTOR ptr, byval ObjectUuidVec as UUID_VECTOR ptr) as RPC_STATUS
declare function RpcNsBindingUnexportW(byval EntryNameSyntax as ulong, byval EntryName as RPC_WSTR, byval IfSpec as RPC_IF_HANDLE, byval ObjectUuidVec as UUID_VECTOR ptr) as RPC_STATUS
declare function RpcNsBindingExportPnPA(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval IfSpec as RPC_IF_HANDLE, byval ObjectVector as UUID_VECTOR ptr) as RPC_STATUS
declare function RpcNsBindingUnexportPnPA(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval IfSpec as RPC_IF_HANDLE, byval ObjectVector as UUID_VECTOR ptr) as RPC_STATUS
declare function RpcNsBindingExportPnPW(byval EntryNameSyntax as ulong, byval EntryName as RPC_WSTR, byval IfSpec as RPC_IF_HANDLE, byval ObjectVector as UUID_VECTOR ptr) as RPC_STATUS
declare function RpcNsBindingUnexportPnPW(byval EntryNameSyntax as ulong, byval EntryName as RPC_WSTR, byval IfSpec as RPC_IF_HANDLE, byval ObjectVector as UUID_VECTOR ptr) as RPC_STATUS
declare function RpcNsBindingLookupBeginA(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval IfSpec as RPC_IF_HANDLE, byval ObjUuid as UUID ptr, byval BindingMaxCount as ulong, byval LookupContext as RPC_NS_HANDLE ptr) as RPC_STATUS
declare function RpcNsBindingLookupBeginW(byval EntryNameSyntax as ulong, byval EntryName as RPC_WSTR, byval IfSpec as RPC_IF_HANDLE, byval ObjUuid as UUID ptr, byval BindingMaxCount as ulong, byval LookupContext as RPC_NS_HANDLE ptr) as RPC_STATUS
declare function RpcNsBindingLookupNext(byval LookupContext as RPC_NS_HANDLE, byval BindingVec as RPC_BINDING_VECTOR ptr ptr) as RPC_STATUS
declare function RpcNsBindingLookupDone(byval LookupContext as RPC_NS_HANDLE ptr) as RPC_STATUS
declare function RpcNsGroupDeleteA(byval GroupNameSyntax as ulong, byval GroupName as RPC_CSTR) as RPC_STATUS
declare function RpcNsGroupMbrAddA(byval GroupNameSyntax as ulong, byval GroupName as RPC_CSTR, byval MemberNameSyntax as ulong, byval MemberName as RPC_CSTR) as RPC_STATUS
declare function RpcNsGroupMbrRemoveA(byval GroupNameSyntax as ulong, byval GroupName as RPC_CSTR, byval MemberNameSyntax as ulong, byval MemberName as RPC_CSTR) as RPC_STATUS
declare function RpcNsGroupMbrInqBeginA(byval GroupNameSyntax as ulong, byval GroupName as RPC_CSTR, byval MemberNameSyntax as ulong, byval InquiryContext as RPC_NS_HANDLE ptr) as RPC_STATUS
declare function RpcNsGroupMbrInqNextA(byval InquiryContext as RPC_NS_HANDLE, byval MemberName as RPC_CSTR ptr) as RPC_STATUS
declare function RpcNsGroupDeleteW(byval GroupNameSyntax as ulong, byval GroupName as RPC_WSTR) as RPC_STATUS
declare function RpcNsGroupMbrAddW(byval GroupNameSyntax as ulong, byval GroupName as RPC_WSTR, byval MemberNameSyntax as ulong, byval MemberName as RPC_WSTR) as RPC_STATUS
declare function RpcNsGroupMbrRemoveW(byval GroupNameSyntax as ulong, byval GroupName as RPC_WSTR, byval MemberNameSyntax as ulong, byval MemberName as RPC_WSTR) as RPC_STATUS
declare function RpcNsGroupMbrInqBeginW(byval GroupNameSyntax as ulong, byval GroupName as RPC_WSTR, byval MemberNameSyntax as ulong, byval InquiryContext as RPC_NS_HANDLE ptr) as RPC_STATUS
declare function RpcNsGroupMbrInqNextW(byval InquiryContext as RPC_NS_HANDLE, byval MemberName as RPC_WSTR ptr) as RPC_STATUS
declare function RpcNsGroupMbrInqDone(byval InquiryContext as RPC_NS_HANDLE ptr) as RPC_STATUS
declare function RpcNsProfileDeleteA(byval ProfileNameSyntax as ulong, byval ProfileName as RPC_CSTR) as RPC_STATUS
declare function RpcNsProfileEltAddA(byval ProfileNameSyntax as ulong, byval ProfileName as RPC_CSTR, byval IfId as RPC_IF_ID ptr, byval MemberNameSyntax as ulong, byval MemberName as RPC_CSTR, byval Priority as ulong, byval Annotation as RPC_CSTR) as RPC_STATUS
declare function RpcNsProfileEltRemoveA(byval ProfileNameSyntax as ulong, byval ProfileName as RPC_CSTR, byval IfId as RPC_IF_ID ptr, byval MemberNameSyntax as ulong, byval MemberName as RPC_CSTR) as RPC_STATUS
declare function RpcNsProfileEltInqBeginA(byval ProfileNameSyntax as ulong, byval ProfileName as RPC_CSTR, byval InquiryType as ulong, byval IfId as RPC_IF_ID ptr, byval VersOption as ulong, byval MemberNameSyntax as ulong, byval MemberName as RPC_CSTR, byval InquiryContext as RPC_NS_HANDLE ptr) as RPC_STATUS
declare function RpcNsProfileEltInqNextA(byval InquiryContext as RPC_NS_HANDLE, byval IfId as RPC_IF_ID ptr, byval MemberName as RPC_CSTR ptr, byval Priority as ulong ptr, byval Annotation as RPC_CSTR ptr) as RPC_STATUS
declare function RpcNsProfileDeleteW(byval ProfileNameSyntax as ulong, byval ProfileName as RPC_WSTR) as RPC_STATUS
declare function RpcNsProfileEltAddW(byval ProfileNameSyntax as ulong, byval ProfileName as RPC_WSTR, byval IfId as RPC_IF_ID ptr, byval MemberNameSyntax as ulong, byval MemberName as RPC_WSTR, byval Priority as ulong, byval Annotation as RPC_WSTR) as RPC_STATUS
declare function RpcNsProfileEltRemoveW(byval ProfileNameSyntax as ulong, byval ProfileName as RPC_WSTR, byval IfId as RPC_IF_ID ptr, byval MemberNameSyntax as ulong, byval MemberName as RPC_WSTR) as RPC_STATUS
declare function RpcNsProfileEltInqBeginW(byval ProfileNameSyntax as ulong, byval ProfileName as RPC_WSTR, byval InquiryType as ulong, byval IfId as RPC_IF_ID ptr, byval VersOption as ulong, byval MemberNameSyntax as ulong, byval MemberName as RPC_WSTR, byval InquiryContext as RPC_NS_HANDLE ptr) as RPC_STATUS
declare function RpcNsProfileEltInqNextW(byval InquiryContext as RPC_NS_HANDLE, byval IfId as RPC_IF_ID ptr, byval MemberName as RPC_WSTR ptr, byval Priority as ulong ptr, byval Annotation as RPC_WSTR ptr) as RPC_STATUS
declare function RpcNsProfileEltInqDone(byval InquiryContext as RPC_NS_HANDLE ptr) as RPC_STATUS
declare function RpcNsEntryObjectInqBeginA(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval InquiryContext as RPC_NS_HANDLE ptr) as RPC_STATUS
declare function RpcNsEntryObjectInqBeginW(byval EntryNameSyntax as ulong, byval EntryName as RPC_WSTR, byval InquiryContext as RPC_NS_HANDLE ptr) as RPC_STATUS
declare function RpcNsEntryObjectInqNext(byval InquiryContext as RPC_NS_HANDLE, byval ObjUuid as UUID ptr) as RPC_STATUS
declare function RpcNsEntryObjectInqDone(byval InquiryContext as RPC_NS_HANDLE ptr) as RPC_STATUS
declare function RpcNsEntryExpandNameA(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval ExpandedName as RPC_CSTR ptr) as RPC_STATUS
declare function RpcNsMgmtBindingUnexportA(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval IfId as RPC_IF_ID ptr, byval VersOption as ulong, byval ObjectUuidVec as UUID_VECTOR ptr) as RPC_STATUS
declare function RpcNsMgmtEntryCreateA(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR) as RPC_STATUS
declare function RpcNsMgmtEntryDeleteA(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR) as RPC_STATUS
declare function RpcNsMgmtEntryInqIfIdsA(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval IfIdVec as RPC_IF_ID_VECTOR ptr ptr) as RPC_STATUS
declare function RpcNsMgmtHandleSetExpAge(byval NsHandle as RPC_NS_HANDLE, byval ExpirationAge as ulong) as RPC_STATUS
declare function RpcNsMgmtInqExpAge(byval ExpirationAge as ulong ptr) as RPC_STATUS
declare function RpcNsMgmtSetExpAge(byval ExpirationAge as ulong) as RPC_STATUS
declare function RpcNsEntryExpandNameW(byval EntryNameSyntax as ulong, byval EntryName as RPC_WSTR, byval ExpandedName as RPC_WSTR ptr) as RPC_STATUS
declare function RpcNsMgmtBindingUnexportW(byval EntryNameSyntax as ulong, byval EntryName as RPC_WSTR, byval IfId as RPC_IF_ID ptr, byval VersOption as ulong, byval ObjectUuidVec as UUID_VECTOR ptr) as RPC_STATUS
declare function RpcNsMgmtEntryCreateW(byval EntryNameSyntax as ulong, byval EntryName as RPC_WSTR) as RPC_STATUS
declare function RpcNsMgmtEntryDeleteW(byval EntryNameSyntax as ulong, byval EntryName as RPC_WSTR) as RPC_STATUS
declare function RpcNsMgmtEntryInqIfIdsW(byval EntryNameSyntax as ulong, byval EntryName as RPC_WSTR, byval IfIdVec as RPC_IF_ID_VECTOR ptr ptr) as RPC_STATUS
declare function RpcNsBindingImportBeginA(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval IfSpec as RPC_IF_HANDLE, byval ObjUuid as UUID ptr, byval ImportContext as RPC_NS_HANDLE ptr) as RPC_STATUS
declare function RpcNsBindingImportBeginW(byval EntryNameSyntax as ulong, byval EntryName as RPC_WSTR, byval IfSpec as RPC_IF_HANDLE, byval ObjUuid as UUID ptr, byval ImportContext as RPC_NS_HANDLE ptr) as RPC_STATUS
declare function RpcNsBindingImportNext(byval ImportContext as RPC_NS_HANDLE, byval Binding as RPC_BINDING_HANDLE ptr) as RPC_STATUS
declare function RpcNsBindingImportDone(byval ImportContext as RPC_NS_HANDLE ptr) as RPC_STATUS
declare function RpcNsBindingSelect(byval BindingVec as RPC_BINDING_VECTOR ptr, byval Binding as RPC_BINDING_HANDLE ptr) as RPC_STATUS

 declare function RpcNsBindingLookupBegin alias "RpcNsBindingLookupBeginA"(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval IfSpec as RPC_IF_HANDLE, byval ObjUuid as UUID ptr, byval BindingMaxCount as ulong, byval LookupContext as RPC_NS_HANDLE ptr) as RPC_STATUS
 declare function RpcNsBindingImportBegin alias "RpcNsBindingImportBeginA"(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval IfSpec as RPC_IF_HANDLE, byval ObjUuid as UUID ptr, byval ImportContext as RPC_NS_HANDLE ptr) as RPC_STATUS
 declare function RpcNsBindingExport alias "RpcNsBindingExportA"(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval IfSpec as RPC_IF_HANDLE, byval BindingVec as RPC_BINDING_VECTOR ptr, byval ObjectUuidVec as UUID_VECTOR ptr) as RPC_STATUS
 declare function RpcNsBindingUnexport alias "RpcNsBindingUnexportA"(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval IfSpec as RPC_IF_HANDLE, byval ObjectUuidVec as UUID_VECTOR ptr) as RPC_STATUS
 declare function RpcNsGroupDelete alias "RpcNsGroupDeleteA"(byval GroupNameSyntax as ulong, byval GroupName as RPC_CSTR) as RPC_STATUS
 declare function RpcNsGroupMbrAdd alias "RpcNsGroupMbrAddA"(byval GroupNameSyntax as ulong, byval GroupName as RPC_CSTR, byval MemberNameSyntax as ulong, byval MemberName as RPC_CSTR) as RPC_STATUS
 declare function RpcNsGroupMbrRemove alias "RpcNsGroupMbrRemoveA"(byval GroupNameSyntax as ulong, byval GroupName as RPC_CSTR, byval MemberNameSyntax as ulong, byval MemberName as RPC_CSTR) as RPC_STATUS
 declare function RpcNsGroupMbrInqBegin alias "RpcNsGroupMbrInqBeginA"(byval GroupNameSyntax as ulong, byval GroupName as RPC_CSTR, byval MemberNameSyntax as ulong, byval InquiryContext as RPC_NS_HANDLE ptr) as RPC_STATUS
 declare function RpcNsGroupMbrInqNext alias "RpcNsGroupMbrInqNextA"(byval InquiryContext as RPC_NS_HANDLE, byval MemberName as RPC_CSTR ptr) as RPC_STATUS
 declare function RpcNsEntryExpandName alias "RpcNsEntryExpandNameA"(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval ExpandedName as RPC_CSTR ptr) as RPC_STATUS
 declare function RpcNsEntryObjectInqBegin alias "RpcNsEntryObjectInqBeginA"(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval InquiryContext as RPC_NS_HANDLE ptr) as RPC_STATUS
 declare function RpcNsMgmtBindingUnexport alias "RpcNsMgmtBindingUnexportA"(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval IfId as RPC_IF_ID ptr, byval VersOption as ulong, byval ObjectUuidVec as UUID_VECTOR ptr) as RPC_STATUS
 declare function RpcNsMgmtEntryCreate alias "RpcNsMgmtEntryCreateA"(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR) as RPC_STATUS
 declare function RpcNsMgmtEntryDelete alias "RpcNsMgmtEntryDeleteA"(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR) as RPC_STATUS
 declare function RpcNsMgmtEntryInqIfIds alias "RpcNsMgmtEntryInqIfIdsA"(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval IfIdVec as RPC_IF_ID_VECTOR ptr ptr) as RPC_STATUS
 declare function RpcNsProfileDelete alias "RpcNsProfileDeleteA"(byval ProfileNameSyntax as ulong, byval ProfileName as RPC_CSTR) as RPC_STATUS
 declare function RpcNsProfileEltAdd alias "RpcNsProfileEltAddA"(byval ProfileNameSyntax as ulong, byval ProfileName as RPC_CSTR, byval IfId as RPC_IF_ID ptr, byval MemberNameSyntax as ulong, byval MemberName as RPC_CSTR, byval Priority as ulong, byval Annotation as RPC_CSTR) as RPC_STATUS
 declare function RpcNsProfileEltRemove alias "RpcNsProfileEltRemoveA"(byval ProfileNameSyntax as ulong, byval ProfileName as RPC_CSTR, byval IfId as RPC_IF_ID ptr, byval MemberNameSyntax as ulong, byval MemberName as RPC_CSTR) as RPC_STATUS
 declare function RpcNsProfileEltInqBegin alias "RpcNsProfileEltInqBeginA"(byval ProfileNameSyntax as ulong, byval ProfileName as RPC_CSTR, byval InquiryType as ulong, byval IfId as RPC_IF_ID ptr, byval VersOption as ulong, byval MemberNameSyntax as ulong, byval MemberName as RPC_CSTR, byval InquiryContext as RPC_NS_HANDLE ptr) as RPC_STATUS
 declare function RpcNsProfileEltInqNext alias "RpcNsProfileEltInqNextA"(byval InquiryContext as RPC_NS_HANDLE, byval IfId as RPC_IF_ID ptr, byval MemberName as RPC_CSTR ptr, byval Priority as ulong ptr, byval Annotation as RPC_CSTR ptr) as RPC_STATUS
 declare function RpcNsBindingExportPnP alias "RpcNsBindingExportPnPA"(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval IfSpec as RPC_IF_HANDLE, byval ObjectVector as UUID_VECTOR ptr) as RPC_STATUS
 declare function RpcNsBindingUnexportPnP alias "RpcNsBindingUnexportPnPA"(byval EntryNameSyntax as ulong, byval EntryName as RPC_CSTR, byval IfSpec as RPC_IF_HANDLE, byval ObjectVector as UUID_VECTOR ptr) as RPC_STATUS

end extern


const RPC_S_OK = ERROR_SUCCESS
const RPC_S_INVALID_ARG = ERROR_INVALID_PARAMETER
const RPC_S_OUT_OF_MEMORY = ERROR_OUTOFMEMORY
const RPC_S_OUT_OF_THREADS = ERROR_MAX_THRDS_REACHED
const RPC_S_INVALID_LEVEL = ERROR_INVALID_PARAMETER
const RPC_S_BUFFER_TOO_SMALL = ERROR_INSUFFICIENT_BUFFER
const RPC_S_INVALID_SECURITY_DESC = ERROR_INVALID_SECURITY_DESCR
const RPC_S_ACCESS_DENIED = ERROR_ACCESS_DENIED
const RPC_S_SERVER_OUT_OF_MEMORY = ERROR_NOT_ENOUGH_SERVER_MEMORY
const RPC_S_ASYNC_CALL_PENDING = ERROR_IO_PENDING
const RPC_S_UNKNOWN_PRINCIPAL = ERROR_NONE_MAPPED
const RPC_S_TIMEOUT = ERROR_TIMEOUT
const RPC_X_NO_MEMORY = RPC_S_OUT_OF_MEMORY
const RPC_X_INVALID_BOUND = RPC_S_INVALID_BOUND
const RPC_X_INVALID_TAG = RPC_S_INVALID_TAG
const RPC_X_ENUM_VALUE_TOO_LARGE = RPC_X_ENUM_VALUE_OUT_OF_RANGE
const RPC_X_SS_CONTEXT_MISMATCH = ERROR_INVALID_HANDLE
const RPC_X_INVALID_BUFFER = ERROR_INVALID_USER_BUFFER
const RPC_X_PIPE_APP_MEMORY = ERROR_OUTOFMEMORY
const RPC_X_INVALID_PIPE_OPERATION = RPC_X_WRONG_PIPE_ORDER



extern "Windows"


type _RPC_NOTIFICATION_TYPES as long
enum
 RpcNotificationTypeNone
 RpcNotificationTypeEvent
 RpcNotificationTypeApc
 RpcNotificationTypeIoc
 RpcNotificationTypeHwnd
 RpcNotificationTypeCallback
end enum

type RPC_NOTIFICATION_TYPES as _RPC_NOTIFICATION_TYPES

type _RPC_ASYNC_EVENT as long
enum
 RpcCallComplete
 RpcSendComplete
 RpcReceiveComplete
end enum

type RPC_ASYNC_EVENT as _RPC_ASYNC_EVENT
type _RPC_ASYNC_STATE as _RPC_ASYNC_STATE_
type PFN_RPCNOTIFICATION_ROUTINE as sub(byval pAsync as _RPC_ASYNC_STATE ptr, byval Context as any ptr, byval Event as RPC_ASYNC_EVENT)

type _RPC_ASYNC_STATE_u_APC
 NotificationRoutine as PFN_RPCNOTIFICATION_ROUTINE
 hThread as HANDLE
end type

type _RPC_ASYNC_STATE_u_IOC
 hIOPort as HANDLE
 dwNumberOfBytesTransferred as DWORD
 dwCompletionKey as DWORD_PTR
 lpOverlapped as LPOVERLAPPED
end type

type _RPC_ASYNC_STATE_u_HWND
 hWnd as HWND
 Msg as UINT
end type

union _RPC_ASYNC_STATE_u
 APC as _RPC_ASYNC_STATE_u_APC
 IOC as _RPC_ASYNC_STATE_u_IOC
 HWND as _RPC_ASYNC_STATE_u_HWND
 hEvent as HANDLE
 NotificationRoutine as PFN_RPCNOTIFICATION_ROUTINE
end union

type _RPC_ASYNC_STATE_
 Size as ulong
 Signature as ulong
 Lock as long
 Flags as ulong
 StubInfo as any ptr
 UserInfo as any ptr
 RuntimeInfo as any ptr
 Event as RPC_ASYNC_EVENT
 NotificationType as RPC_NOTIFICATION_TYPES
 u as _RPC_ASYNC_STATE_u
 Reserved(0 to 3) as LONG_PTR
end type

type RPC_ASYNC_STATE as _RPC_ASYNC_STATE
type PRPC_ASYNC_STATE as _RPC_ASYNC_STATE ptr
const RPC_C_NOTIFY_ON_SEND_COMPLETE = &h1
const RPC_C_INFINITE_TIMEOUT = INFINITE

declare function RpcAsyncInitializeHandle(byval pAsync as PRPC_ASYNC_STATE, byval Size as ulong) as RPC_STATUS
declare function RpcAsyncRegisterInfo(byval pAsync as PRPC_ASYNC_STATE) as RPC_STATUS
declare function RpcAsyncGetCallStatus(byval pAsync as PRPC_ASYNC_STATE) as RPC_STATUS
declare function RpcAsyncCompleteCall(byval pAsync as PRPC_ASYNC_STATE, byval Reply as any ptr) as RPC_STATUS
declare function RpcAsyncAbortCall(byval pAsync as PRPC_ASYNC_STATE, byval ExceptionCode as ulong) as RPC_STATUS
declare function RpcAsyncCancelCall(byval pAsync as PRPC_ASYNC_STATE, byval fAbort as WINBOOL) as RPC_STATUS
declare function RpcAsyncCleanupThread(byval dwTimeout as DWORD) as RPC_STATUS

type tagExtendedErrorParamTypes as long
enum
 eeptAnsiString = 1
 eeptUnicodeString
 eeptLongVal
 eeptShortVal
 eeptPointerVal
 eeptNone
 eeptBinary
end enum

type ExtendedErrorParamTypes as tagExtendedErrorParamTypes
const MaxNumberOfEEInfoParams = 4
const RPC_EEINFO_VERSION = 1

type tagBinaryParam
 Buffer as any ptr
 Size as short
end type

type BinaryParam as tagBinaryParam

union tagRPC_EE_INFO_PARAM_u
 AnsiString as LPSTR
 UnicodeString as LPWSTR
 LVal as long
 SVal as short
 PVal as ULONGLONG
 BVal as BinaryParam
end union

type tagRPC_EE_INFO_PARAM
 ParameterType as ExtendedErrorParamTypes
 u as tagRPC_EE_INFO_PARAM_u
end type

type RPC_EE_INFO_PARAM as tagRPC_EE_INFO_PARAM
const EEInfoPreviousRecordsMissing = 1
const EEInfoNextRecordsMissing = 2
const EEInfoUseFileTime = 4
const EEInfoGCCOM = 11
const EEInfoGCFRS = 12

union tagRPC_EXTENDED_ERROR_INFO_u
 SystemTime as SYSTEMTIME
 FileTime as FILETIME
end union

type tagRPC_EXTENDED_ERROR_INFO
 Version as ULONG
 ComputerName as LPWSTR
 ProcessID as ULONG
 u as tagRPC_EXTENDED_ERROR_INFO_u
 GeneratingComponent as ULONG
 Status as ULONG
 DetectionLocation as USHORT
 Flags as USHORT
 NumberOfParameters as long
 Parameters(0 to 3) as RPC_EE_INFO_PARAM
end type

type RPC_EXTENDED_ERROR_INFO as tagRPC_EXTENDED_ERROR_INFO

type tagRPC_ERROR_ENUM_HANDLE
 Signature as ULONG
 CurrentPos as any ptr
 Head as any ptr
end type

type RPC_ERROR_ENUM_HANDLE as tagRPC_ERROR_ENUM_HANDLE
declare function RpcErrorStartEnumeration(byval EnumHandle as RPC_ERROR_ENUM_HANDLE ptr) as RPC_STATUS
declare function RpcErrorGetNextRecord(byval EnumHandle as RPC_ERROR_ENUM_HANDLE ptr, byval CopyStrings as WINBOOL, byval ErrorInfo as RPC_EXTENDED_ERROR_INFO ptr) as RPC_STATUS
declare function RpcErrorEndEnumeration(byval EnumHandle as RPC_ERROR_ENUM_HANDLE ptr) as RPC_STATUS
declare function RpcErrorResetEnumeration(byval EnumHandle as RPC_ERROR_ENUM_HANDLE ptr) as RPC_STATUS
declare function RpcErrorGetNumberOfRecords(byval EnumHandle as RPC_ERROR_ENUM_HANDLE ptr, byval Records as long ptr) as RPC_STATUS
declare function RpcErrorSaveErrorInfo(byval EnumHandle as RPC_ERROR_ENUM_HANDLE ptr, byval ErrorBlob as PVOID ptr, byval BlobSize as uinteger ptr) as RPC_STATUS
declare function RpcErrorLoadErrorInfo(byval ErrorBlob as PVOID, byval BlobSize as uinteger, byval EnumHandle as RPC_ERROR_ENUM_HANDLE ptr) as RPC_STATUS
declare function RpcErrorAddRecord(byval ErrorInfo as RPC_EXTENDED_ERROR_INFO ptr) as RPC_STATUS
declare sub RpcErrorClearInformation()
declare function RpcGetAuthorizationContextForClient(byval ClientBinding as RPC_BINDING_HANDLE, byval ImpersonateOnReturn as WINBOOL, byval Reserved1 as PVOID, byval pExpirationTime as PLARGE_INTEGER, byval Reserved2 as LUID, byval Reserved3 as DWORD, byval Reserved4 as PVOID, byval pAuthzClientContext as PVOID ptr) as RPC_STATUS
declare function RpcFreeAuthorizationContext(byval pAuthzClientContext as PVOID ptr) as RPC_STATUS
declare function RpcSsContextLockExclusive(byval ServerBindingHandle as RPC_BINDING_HANDLE, byval UserContext as PVOID) as RPC_STATUS
declare function RpcSsContextLockShared(byval ServerBindingHandle as RPC_BINDING_HANDLE, byval UserContext as PVOID) as RPC_STATUS

const RPC_CALL_ATTRIBUTES_VERSION = 1
const RPC_QUERY_SERVER_PRINCIPAL_NAME = 2
const RPC_QUERY_CLIENT_PRINCIPAL_NAME = 4

type tagRPC_CALL_ATTRIBUTES_V1_W
 Version as ulong
 Flags as ulong
 ServerPrincipalNameBufferLength as ulong
 ServerPrincipalName as ushort ptr
 ClientPrincipalNameBufferLength as ulong
 ClientPrincipalName as ushort ptr
 AuthenticationLevel as ulong
 AuthenticationService as ulong
 NullSession as WINBOOL
end type

type RPC_CALL_ATTRIBUTES_V1_W as tagRPC_CALL_ATTRIBUTES_V1_W

type tagRPC_CALL_ATTRIBUTES_V1_A
 Version as ulong
 Flags as ulong
 ServerPrincipalNameBufferLength as ulong
 ServerPrincipalName as ubyte ptr
 ClientPrincipalNameBufferLength as ulong
 ClientPrincipalName as ubyte ptr
 AuthenticationLevel as ulong
 AuthenticationService as ulong
 NullSession as WINBOOL
end type

type RPC_CALL_ATTRIBUTES_V1_A as tagRPC_CALL_ATTRIBUTES_V1_A

 type RPC_CALL_ATTRIBUTES_V1 as RPC_CALL_ATTRIBUTES_V1_A

declare function RpcServerInqCallAttributesW(byval ClientBinding as RPC_BINDING_HANDLE, byval RpcCallAttributes as any ptr) as RPC_STATUS


declare function RpcServerInqCallAttributesA(byval ClientBinding as RPC_BINDING_HANDLE, byval RpcCallAttributes as any ptr) as RPC_STATUS

 declare function RpcServerInqCallAttributes alias "RpcServerInqCallAttributesA"(byval ClientBinding as RPC_BINDING_HANDLE, byval RpcCallAttributes as any ptr) as RPC_STATUS
 type RPC_CALL_ATTRIBUTES as RPC_CALL_ATTRIBUTES_V1_A

declare function I_RpcAsyncSetHandle(byval Message as PRPC_MESSAGE, byval pAsync as PRPC_ASYNC_STATE) as RPC_STATUS
declare function I_RpcAsyncAbortCall(byval pAsync as PRPC_ASYNC_STATE, byval ExceptionCode as ulong) as RPC_STATUS
declare function I_RpcExceptionFilter(byval ExceptionCode as ulong) as long

type _RPC_ASYNC_NOTIFICATION_INFO_APC
 NotificationRoutine as PFN_RPCNOTIFICATION_ROUTINE
 hThread as HANDLE
end type

type _RPC_ASYNC_NOTIFICATION_INFO_IOC
 hIOPort as HANDLE
 dwNumberOfBytesTransferred as DWORD
 dwCompletionKey as DWORD_PTR
 lpOverlapped as LPOVERLAPPED
end type

type _RPC_ASYNC_NOTIFICATION_INFO_HWND
 hWnd as HWND
 Msg as UINT
end type

union _RPC_ASYNC_NOTIFICATION_INFO
 APC as _RPC_ASYNC_NOTIFICATION_INFO_APC
 IOC as _RPC_ASYNC_NOTIFICATION_INFO_IOC
 HWND as _RPC_ASYNC_NOTIFICATION_INFO_HWND
 hEvent as HANDLE
 NotificationRoutine as PFN_RPCNOTIFICATION_ROUTINE
end union

type RPC_ASYNC_NOTIFICATION_INFO as _RPC_ASYNC_NOTIFICATION_INFO
type PRPC_ASYNC_NOTIFICATION_INFO as _RPC_ASYNC_NOTIFICATION_INFO ptr
declare function RpcBindingBind(byval pAsync as PRPC_ASYNC_STATE, byval Binding as RPC_BINDING_HANDLE, byval IfSpec as RPC_IF_HANDLE) as RPC_STATUS
declare function RpcBindingUnbind(byval Binding as RPC_BINDING_HANDLE) as RPC_STATUS

type _RpcCallType as long
enum
 rctInvalid
 rctNormal
 rctTraining
 rctGuaranteed
end enum

type RpcCallType as _RpcCallType

type _RpcLocalAddressFormat as long
enum
 rlafInvalid
 rlafIPv4
 rlafIPv6
end enum

type RpcLocalAddressFormat as _RpcLocalAddressFormat

type _RPC_NOTIFICATIONS as long
enum
 RpcNotificationCallNone = 0
 RpcNotificationClientDisconnect = 1
 RpcNotificationCallCancel = 2
end enum

type RPC_NOTIFICATIONS as _RPC_NOTIFICATIONS

type _RpcCallClientLocality as long
enum
 rcclInvalid
 rcclLocal
 rcclRemote
 rcclClientUnknownLocality
end enum

type RpcCallClientLocality as _RpcCallClientLocality
declare function RpcServerSubscribeForNotification(byval Binding as RPC_BINDING_HANDLE, byval Notification as DWORD, byval NotificationType as RPC_NOTIFICATION_TYPES, byval NotificationInfo as RPC_ASYNC_NOTIFICATION_INFO ptr) as RPC_STATUS
declare function RpcServerUnsubscribeForNotification(byval Binding as RPC_BINDING_HANDLE, byval Notification as RPC_NOTIFICATIONS, byval NotificationsQueued as ulong ptr) as RPC_STATUS






end extern




extern "Windows"


type RPC_IMPORT_CONTEXT_P
 LookupContext as RPC_NS_HANDLE
 ProposedHandle as RPC_BINDING_HANDLE
 Bindings as RPC_BINDING_VECTOR ptr
end type

type PRPC_IMPORT_CONTEXT_P as RPC_IMPORT_CONTEXT_P ptr
declare function I_RpcNsGetBuffer(byval Message as PRPC_MESSAGE) as RPC_STATUS
declare function I_RpcNsSendReceive(byval Message as PRPC_MESSAGE, byval Handle as RPC_BINDING_HANDLE ptr) as RPC_STATUS
declare sub I_RpcNsRaiseException(byval Message as PRPC_MESSAGE, byval Status as RPC_STATUS)
declare function I_RpcReBindBuffer(byval Message as PRPC_MESSAGE) as RPC_STATUS
declare function I_NsServerBindSearch() as RPC_STATUS
declare function I_NsClientBindSearch() as RPC_STATUS
declare sub I_NsClientBindDone()

end extern

extern "Windows"

const __RPCNDR_H_VERSION__ = 475
const NDR_CHAR_REP_MASK = &h0000000F
const NDR_INT_REP_MASK = &h000000F0
const NDR_FLOAT_REP_MASK = &h0000FF00
const NDR_LITTLE_ENDIAN = &h00000010
const NDR_BIG_ENDIAN = &h000000000
const NDR_IEEE_FLOAT = &h000000000
const NDR_VAX_FLOAT = &h00000100
const NDR_IBM_FLOAT = &h00000300
const NDR_ASCII_CHAR = &h000000000
const NDR_EBCDIC_CHAR = &h00000001
const NDR_LOCAL_DATA_REPRESENTATION = &h00000010
const NDR_LOCAL_ENDIAN = NDR_LITTLE_ENDIAN

 const TARGET_IS_NT61_OR_LATER = 0

 const TARGET_IS_NT60_OR_LATER = 0


const TARGET_IS_NT51_OR_LATER = 1
const TARGET_IS_NT50_OR_LATER = 1
const TARGET_IS_NT40_OR_LATER = 1
const TARGET_IS_NT351_OR_WIN95_OR_LATER = 1

type cs_byte as ubyte
declare function MIDL_user_allocate(byval as SIZE_T_) as any ptr
declare sub MIDL_user_free(byval as any ptr)
type NDR_CCONTEXT as any ptr

type _NDR_SCONTEXT
 pad(0 to 1) as any ptr
 userContext as any ptr
end type

type NDR_SCONTEXT as _NDR_SCONTEXT ptr
const cbNDRContext = 20
type NDR_RUNDOWN as sub(byval context as any ptr)
type NDR_NOTIFY_ROUTINE as sub()
type NDR_NOTIFY2_ROUTINE as sub(byval flag as WINBOOLEAN)

type _SCONTEXT_QUEUE
 NumberOfObjects as ulong
 ArrayOfObjects as NDR_SCONTEXT ptr
end type

type SCONTEXT_QUEUE as _SCONTEXT_QUEUE
type PSCONTEXT_QUEUE as _SCONTEXT_QUEUE ptr
declare function NDRCContextBinding(byval CContext as NDR_CCONTEXT) as RPC_BINDING_HANDLE
declare sub NDRCContextMarshall(byval CContext as NDR_CCONTEXT, byval pBuff as any ptr)
declare sub NDRCContextUnmarshall(byval pCContext as NDR_CCONTEXT ptr, byval hBinding as RPC_BINDING_HANDLE, byval pBuff as any ptr, byval DataRepresentation as ulong)
declare sub NDRSContextMarshall(byval CContext as NDR_SCONTEXT, byval pBuff as any ptr, byval userRunDownIn as NDR_RUNDOWN)
declare function NDRSContextUnmarshall(byval pBuff as any ptr, byval DataRepresentation as ulong) as NDR_SCONTEXT
declare sub NDRSContextMarshallEx(byval BindingHandle as RPC_BINDING_HANDLE, byval CContext as NDR_SCONTEXT, byval pBuff as any ptr, byval userRunDownIn as NDR_RUNDOWN)
declare sub NDRSContextMarshall2(byval BindingHandle as RPC_BINDING_HANDLE, byval CContext as NDR_SCONTEXT, byval pBuff as any ptr, byval userRunDownIn as NDR_RUNDOWN, byval CtxGuard as any ptr, byval Flags as ulong)
declare function NDRSContextUnmarshallEx(byval BindingHandle as RPC_BINDING_HANDLE, byval pBuff as any ptr, byval DataRepresentation as ulong) as NDR_SCONTEXT
declare function NDRSContextUnmarshall2(byval BindingHandle as RPC_BINDING_HANDLE, byval pBuff as any ptr, byval DataRepresentation as ulong, byval CtxGuard as any ptr, byval Flags as ulong) as NDR_SCONTEXT
declare sub RpcSsDestroyClientContext(byval ContextHandle as any ptr ptr)

type error_status_t as ulong

type RPC_BUFPTR as ubyte ptr
type RPC_LENGTH as ulong
type _MIDL_STUB_MESSAGE as _MIDL_STUB_MESSAGE_
type EXPR_EVAL as sub(byval as _MIDL_STUB_MESSAGE ptr)
type PFORMAT_STRING as const ubyte ptr

type ARRAY_INFO
 Dimension as long
 BufferConformanceMark as ulong ptr
 BufferVarianceMark as ulong ptr
 MaxCountArray as ulong ptr
 OffsetArray as ulong ptr
 ActualCountArray as ulong ptr
end type

type PARRAY_INFO as ARRAY_INFO ptr
type PNDR_ASYNC_MESSAGE as _NDR_ASYNC_MESSAGE ptr
type PNDR_CORRELATION_INFO as _NDR_CORRELATION_INFO ptr

type CS_STUB_INFO
 WireCodeset as ulong
 DesiredReceivingCodeset as ulong
 CSArrayInfo as any ptr
end type

type MIDL_SYNTAX_INFO as _MIDL_SYNTAX_INFO
type PMIDL_SYNTAX_INFO as _MIDL_SYNTAX_INFO ptr
type NDR_ALLOC_ALL_NODES_CONTEXT as NDR_ALLOC_ALL_NODES_CONTEXT_
type NDR_POINTER_QUEUE_STATE as NDR_POINTER_QUEUE_STATE_
type _MIDL_STUB_DESC as _MIDL_STUB_DESC_
type _FULL_PTR_XLAT_TABLES as _FULL_PTR_XLAT_TABLES_
type IRpcChannelBuffer as IRpcChannelBuffer_
type _NDR_PROC_CONTEXT as _NDR_PROC_CONTEXT_

type _MIDL_STUB_MESSAGE_
 RpcMsg as PRPC_MESSAGE
 Buffer as ubyte ptr
 BufferStart as ubyte ptr
 BufferEnd as ubyte ptr
 BufferMark as ubyte ptr
 BufferLength as ulong
 MemorySize as ulong
 Memory as ubyte ptr
 IsClient as ubyte
 Pad as ubyte
 uFlags2 as ushort
 ReuseBuffer as long
 pAllocAllNodesContext as NDR_ALLOC_ALL_NODES_CONTEXT ptr
 pPointerQueueState as NDR_POINTER_QUEUE_STATE ptr
 IgnoreEmbeddedPointers as long
 PointerBufferMark as ubyte ptr
 fBufferValid as ubyte
 uFlags as ubyte
 UniquePtrCount as ushort
 MaxCount as ULONG_PTR
 Offset as ulong
 ActualCount as ulong
 pfnAllocate as function(byval as uinteger) as any ptr
 pfnFree as sub(byval as any ptr)
 StackTop as ubyte ptr
 pPresentedType as ubyte ptr
 pTransmitType as ubyte ptr
 SavedHandle as handle_t
 StubDesc as const _MIDL_STUB_DESC ptr
 FullPtrXlatTables as _FULL_PTR_XLAT_TABLES ptr
 FullPtrRefId as ulong
 PointerLength as ulong
 fInDontFree : 1 as long
 fDontCallFreeInst : 1 as long
 fInOnlyParam : 1 as long
 fHasReturn : 1 as long
 fHasExtensions : 1 as long
 fHasNewCorrDesc : 1 as long
 fIsOicfServer : 1 as long
 fHasMemoryValidateCallback : 1 as long
 fUnused : 8 as long
 fUnused2 : 16 as long
 dwDestContext as ulong
 pvDestContext as any ptr
 SavedContextHandles as NDR_SCONTEXT ptr
 ParamNumber as long
 pRpcChannelBuffer as IRpcChannelBuffer ptr
 pArrayInfo as PARRAY_INFO
 SizePtrCountArray as ulong ptr
 SizePtrOffsetArray as ulong ptr
 SizePtrLengthArray as ulong ptr
 pArgQueue as any ptr
 dwStubPhase as ulong
 LowStackMark as any ptr
 pAsyncMsg as PNDR_ASYNC_MESSAGE
 pCorrInfo as PNDR_CORRELATION_INFO
 pCorrMemory as ubyte ptr
 pMemoryList as any ptr
 pCSInfo as CS_STUB_INFO ptr
 ConformanceMark as ubyte ptr
 VarianceMark as ubyte ptr
 Unused as INT_PTR
 pContext as _NDR_PROC_CONTEXT ptr
 pUserMarshalList as any ptr
 Reserved51_2 as INT_PTR
 Reserved51_3 as INT_PTR
 Reserved51_4 as INT_PTR
 Reserved51_5 as INT_PTR
end type

type MIDL_STUB_MESSAGE as _MIDL_STUB_MESSAGE
type PMIDL_STUB_MESSAGE as _MIDL_STUB_MESSAGE ptr
type GENERIC_BINDING_ROUTINE as function(byval as any ptr) as any ptr
type GENERIC_UNBIND_ROUTINE as sub(byval as any ptr, byval as ubyte ptr)

type _GENERIC_BINDING_ROUTINE_PAIR
 pfnBind as GENERIC_BINDING_ROUTINE
 pfnUnbind as GENERIC_UNBIND_ROUTINE
end type

type GENERIC_BINDING_ROUTINE_PAIR as _GENERIC_BINDING_ROUTINE_PAIR
type PGENERIC_BINDING_ROUTINE_PAIR as _GENERIC_BINDING_ROUTINE_PAIR ptr

type __GENERIC_BINDING_INFO
 pObj as any ptr
 Size as ulong
 pfnBind as GENERIC_BINDING_ROUTINE
 pfnUnbind as GENERIC_UNBIND_ROUTINE
end type

type GENERIC_BINDING_INFO as __GENERIC_BINDING_INFO
type PGENERIC_BINDING_INFO as __GENERIC_BINDING_INFO ptr
type XMIT_HELPER_ROUTINE as sub(byval as PMIDL_STUB_MESSAGE)

type _XMIT_ROUTINE_QUINTUPLE
 pfnTranslateToXmit as XMIT_HELPER_ROUTINE
 pfnTranslateFromXmit as XMIT_HELPER_ROUTINE
 pfnFreeXmit as XMIT_HELPER_ROUTINE
 pfnFreeInst as XMIT_HELPER_ROUTINE
end type

type XMIT_ROUTINE_QUINTUPLE as _XMIT_ROUTINE_QUINTUPLE
type PXMIT_ROUTINE_QUINTUPLE as _XMIT_ROUTINE_QUINTUPLE ptr
type USER_MARSHAL_SIZING_ROUTINE as function(byval as ULONG ptr, byval as ULONG, byval as any ptr) as ULONG
type USER_MARSHAL_MARSHALLING_ROUTINE as function(byval as ULONG ptr, byval as ubyte ptr, byval as any ptr) as ubyte ptr
type USER_MARSHAL_UNMARSHALLING_ROUTINE as function(byval as ULONG ptr, byval as ubyte ptr, byval as any ptr) as ubyte ptr
type USER_MARSHAL_FREEING_ROUTINE as sub(byval as ULONG ptr, byval as any ptr)

type _USER_MARSHAL_ROUTINE_QUADRUPLE
 pfnBufferSize as USER_MARSHAL_SIZING_ROUTINE
 pfnMarshall as USER_MARSHAL_MARSHALLING_ROUTINE
 pfnUnmarshall as USER_MARSHAL_UNMARSHALLING_ROUTINE
 pfnFree as USER_MARSHAL_FREEING_ROUTINE
end type

type USER_MARSHAL_ROUTINE_QUADRUPLE as _USER_MARSHAL_ROUTINE_QUADRUPLE

type _USER_MARSHAL_CB_TYPE as long
enum
 USER_MARSHAL_CB_BUFFER_SIZE
 USER_MARSHAL_CB_MARSHALL
 USER_MARSHAL_CB_UNMARSHALL
 USER_MARSHAL_CB_FREE
end enum

type USER_MARSHAL_CB_TYPE as _USER_MARSHAL_CB_TYPE

type _USER_MARSHAL_CB
 Flags as ulong
 pStubMsg as PMIDL_STUB_MESSAGE
 pReserve as PFORMAT_STRING
 Signature as ulong
 CBType as USER_MARSHAL_CB_TYPE
 pFormat as PFORMAT_STRING
 pTypeFormat as PFORMAT_STRING
end type

type USER_MARSHAL_CB as _USER_MARSHAL_CB
const USER_CALL_IS_ASYNC = &h0100
const USER_CALL_NEW_CORRELATION_DESC = &h0200

type _MALLOC_FREE_STRUCT
 pfnAllocate as function(byval as uinteger) as any ptr
 pfnFree as sub(byval as any ptr)
end type

type MALLOC_FREE_STRUCT as _MALLOC_FREE_STRUCT

type _COMM_FAULT_OFFSETS
 CommOffset as short
 FaultOffset as short
end type

type COMM_FAULT_OFFSETS as _COMM_FAULT_OFFSETS

type _IDL_CS_CONVERT as long
enum
 IDL_CS_NO_CONVERT
 IDL_CS_IN_PLACE_CONVERT
 IDL_CS_NEW_BUFFER_CONVERT
end enum

type IDL_CS_CONVERT as _IDL_CS_CONVERT
type CS_TYPE_NET_SIZE_ROUTINE as sub(byval hBinding as RPC_BINDING_HANDLE, byval ulNetworkCodeSet as ulong, byval ulLocalBufferSize as ulong, byval conversionType as IDL_CS_CONVERT ptr, byval pulNetworkBufferSize as ulong ptr, byval pStatus as error_status_t ptr)
type CS_TYPE_LOCAL_SIZE_ROUTINE as sub(byval hBinding as RPC_BINDING_HANDLE, byval ulNetworkCodeSet as ulong, byval ulNetworkBufferSize as ulong, byval conversionType as IDL_CS_CONVERT ptr, byval pulLocalBufferSize as ulong ptr, byval pStatus as error_status_t ptr)
type CS_TYPE_TO_NETCS_ROUTINE as sub(byval hBinding as RPC_BINDING_HANDLE, byval ulNetworkCodeSet as ulong, byval pLocalData as any ptr, byval ulLocalDataLength as ulong, byval pNetworkData as ubyte ptr, byval pulNetworkDataLength as ulong ptr, byval pStatus as error_status_t ptr)
type CS_TYPE_FROM_NETCS_ROUTINE as sub(byval hBinding as RPC_BINDING_HANDLE, byval ulNetworkCodeSet as ulong, byval pNetworkData as ubyte ptr, byval ulNetworkDataLength as ulong, byval ulLocalBufferSize as ulong, byval pLocalData as any ptr, byval pulLocalDataLength as ulong ptr, byval pStatus as error_status_t ptr)
type CS_TAG_GETTING_ROUTINE as sub(byval hBinding as RPC_BINDING_HANDLE, byval fServerSide as long, byval pulSendingTag as ulong ptr, byval pulDesiredReceivingTag as ulong ptr, byval pulReceivingTag as ulong ptr, byval pStatus as error_status_t ptr)
declare sub RpcCsGetTags(byval hBinding as RPC_BINDING_HANDLE, byval fServerSide as long, byval pulSendingTag as ulong ptr, byval pulDesiredReceivingTag as ulong ptr, byval pulReceivingTag as ulong ptr, byval pStatus as error_status_t ptr)

type _NDR_CS_SIZE_CONVERT_ROUTINES
 pfnNetSize as CS_TYPE_NET_SIZE_ROUTINE
 pfnToNetCs as CS_TYPE_TO_NETCS_ROUTINE
 pfnLocalSize as CS_TYPE_LOCAL_SIZE_ROUTINE
 pfnFromNetCs as CS_TYPE_FROM_NETCS_ROUTINE
end type

type NDR_CS_SIZE_CONVERT_ROUTINES as _NDR_CS_SIZE_CONVERT_ROUTINES

type _NDR_CS_ROUTINES
 pSizeConvertRoutines as NDR_CS_SIZE_CONVERT_ROUTINES ptr
 pTagGettingRoutines as CS_TAG_GETTING_ROUTINE ptr
end type

type NDR_CS_ROUTINES as _NDR_CS_ROUTINES

union _MIDL_STUB_DESC_IMPLICIT_HANDLE_INFO
 pAutoHandle as handle_t ptr
 pPrimitiveHandle as handle_t ptr
 pGenericBindingInfo as PGENERIC_BINDING_INFO
end union

type _MIDL_STUB_DESC_
 RpcInterfaceInformation as any ptr
 pfnAllocate as function(byval as uinteger) as any ptr
 pfnFree as sub(byval as any ptr)
 IMPLICIT_HANDLE_INFO as _MIDL_STUB_DESC_IMPLICIT_HANDLE_INFO
 apfnNdrRundownRoutines as const NDR_RUNDOWN ptr
 aGenericBindingRoutinePairs as const GENERIC_BINDING_ROUTINE_PAIR ptr
 apfnExprEval as const EXPR_EVAL ptr
 aXmitQuintuple as const XMIT_ROUTINE_QUINTUPLE ptr
 pFormatTypes as const ubyte ptr
 fCheckBounds as long
 Version as ulong
 pMallocFreeStruct as MALLOC_FREE_STRUCT ptr
 MIDLVersion as long
 CommFaultOffsets as const COMM_FAULT_OFFSETS ptr
 aUserMarshalQuadruple as const USER_MARSHAL_ROUTINE_QUADRUPLE ptr
 NotifyRoutineTable as const NDR_NOTIFY_ROUTINE ptr
 mFlags as ULONG_PTR
 CsRoutineTables as const NDR_CS_ROUTINES ptr
 Reserved4 as any ptr
 Reserved5 as ULONG_PTR
end type

type MIDL_STUB_DESC as _MIDL_STUB_DESC
type PMIDL_STUB_DESC as const MIDL_STUB_DESC ptr
type PMIDL_XMIT_TYPE as any ptr

type _MIDL_FORMAT_STRING
 Pad as short
 Format(0 to 0) as ubyte
end type

type MIDL_FORMAT_STRING as _MIDL_FORMAT_STRING
type STUB_THUNK as sub(byval as PMIDL_STUB_MESSAGE)
type SERVER_ROUTINE as function() as long

type _MIDL_SERVER_INFO_
 pStubDesc as PMIDL_STUB_DESC
 DispatchTable as const SERVER_ROUTINE ptr
 ProcString as PFORMAT_STRING
 FmtStringOffset as const ushort ptr
 ThunkTable as const STUB_THUNK ptr
 pTransferSyntax as PRPC_SYNTAX_IDENTIFIER
 nCount as ULONG_PTR
 pSyntaxInfo as PMIDL_SYNTAX_INFO
end type

type MIDL_SERVER_INFO as _MIDL_SERVER_INFO_
type PMIDL_SERVER_INFO as _MIDL_SERVER_INFO_ ptr

type _MIDL_STUBLESS_PROXY_INFO
 pStubDesc as PMIDL_STUB_DESC
 ProcFormatString as PFORMAT_STRING
 FormatStringOffset as const ushort ptr
 pTransferSyntax as PRPC_SYNTAX_IDENTIFIER
 nCount as ULONG_PTR
 pSyntaxInfo as PMIDL_SYNTAX_INFO
end type

type MIDL_STUBLESS_PROXY_INFO as _MIDL_STUBLESS_PROXY_INFO
type PMIDL_STUBLESS_PROXY_INFO as MIDL_STUBLESS_PROXY_INFO ptr

type _MIDL_SYNTAX_INFO
 TransferSyntax as RPC_SYNTAX_IDENTIFIER
 DispatchTable as RPC_DISPATCH_TABLE ptr
 ProcString as PFORMAT_STRING
 FmtStringOffset as const ushort ptr
 TypeString as PFORMAT_STRING
 aUserMarshalQuadruple as const any ptr
 pReserved1 as ULONG_PTR
 pReserved2 as ULONG_PTR
end type

type PARAM_OFFSETTABLE as ushort ptr
type PPARAM_OFFSETTABLE as ushort ptr

union _CLIENT_CALL_RETURN
 Pointer as any ptr
 Simple as LONG_PTR
end union

type CLIENT_CALL_RETURN as _CLIENT_CALL_RETURN

type XLAT_SIDE as long
enum
 XLAT_SERVER = 1
 XLAT_CLIENT
end enum

type _FULL_PTR_TO_REFID_ELEMENT
 Next as _FULL_PTR_TO_REFID_ELEMENT ptr
 Pointer as any ptr
 RefId as ulong
 State as ubyte
end type

type FULL_PTR_TO_REFID_ELEMENT as _FULL_PTR_TO_REFID_ELEMENT
type PFULL_PTR_TO_REFID_ELEMENT as _FULL_PTR_TO_REFID_ELEMENT ptr

type _FULL_PTR_XLAT_TABLES_RefIdToPointer
 XlatTable as any ptr ptr
 StateTable as ubyte ptr
 NumberOfEntries as ulong
end type

type _FULL_PTR_XLAT_TABLES_PointerToRefId
 XlatTable as PFULL_PTR_TO_REFID_ELEMENT ptr
 NumberOfBuckets as ulong
 HashMask as ulong
end type

type _FULL_PTR_XLAT_TABLES_
 RefIdToPointer as _FULL_PTR_XLAT_TABLES_RefIdToPointer
 PointerToRefId as _FULL_PTR_XLAT_TABLES_PointerToRefId
 NextRefId as ulong
 XlatSide as XLAT_SIDE
end type

type FULL_PTR_XLAT_TABLES as _FULL_PTR_XLAT_TABLES
type PFULL_PTR_XLAT_TABLES as _FULL_PTR_XLAT_TABLES ptr
declare function NdrClientGetSupportedSyntaxes(byval pInf as RPC_CLIENT_INTERFACE ptr, byval pCount as ulong ptr, byval pArr as MIDL_SYNTAX_INFO ptr ptr) as RPC_STATUS
declare function NdrServerGetSupportedSyntaxes(byval pInf as RPC_SERVER_INTERFACE ptr, byval pCount as ulong ptr, byval pArr as MIDL_SYNTAX_INFO ptr ptr, byval pPreferSyntaxIndex as ulong ptr) as RPC_STATUS
declare sub NdrSimpleTypeMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval FormatChar as ubyte)
declare function NdrPointerMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrCsArrayMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrCsTagMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrSimpleStructMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrConformantStructMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrConformantVaryingStructMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrComplexStructMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrFixedArrayMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrConformantArrayMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrConformantVaryingArrayMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrVaryingArrayMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrComplexArrayMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrNonConformantStringMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrConformantStringMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrEncapsulatedUnionMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrNonEncapsulatedUnionMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrByteCountPointerMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrXmitOrRepAsMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrUserMarshalMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare function NdrInterfacePointerMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING) as ubyte ptr
declare sub NdrClientContextMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ContextHandle as NDR_CCONTEXT, byval fCheck as long)
declare sub NdrServerContextMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ContextHandle as NDR_SCONTEXT, byval RundownRoutine as NDR_RUNDOWN)
declare sub NdrServerContextNewMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ContextHandle as NDR_SCONTEXT, byval RundownRoutine as NDR_RUNDOWN, byval pFormat as PFORMAT_STRING)
declare sub NdrSimpleTypeUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval FormatChar as ubyte)
declare function NdrCsArrayUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrCsTagUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrRangeUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare sub NdrCorrelationInitialize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as any ptr, byval CacheSize as ulong, byval flags as ulong)
declare sub NdrCorrelationPass(byval pStubMsg as PMIDL_STUB_MESSAGE)
declare sub NdrCorrelationFree(byval pStubMsg as PMIDL_STUB_MESSAGE)
declare function NdrPointerUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrSimpleStructUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrConformantStructUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrConformantVaryingStructUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrComplexStructUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrFixedArrayUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrConformantArrayUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrConformantVaryingArrayUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrVaryingArrayUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrComplexArrayUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrNonConformantStringUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrConformantStringUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrEncapsulatedUnionUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrNonEncapsulatedUnionUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrByteCountPointerUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrXmitOrRepAsUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrUserMarshalUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare function NdrInterfacePointerUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as ubyte ptr ptr, byval pFormat as PFORMAT_STRING, byval fMustAlloc as ubyte) as ubyte ptr
declare sub NdrClientContextUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pContextHandle as NDR_CCONTEXT ptr, byval BindHandle as RPC_BINDING_HANDLE)
declare function NdrServerContextUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE) as NDR_SCONTEXT
declare function NdrContextHandleInitialize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as NDR_SCONTEXT
declare function NdrServerContextNewUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as NDR_SCONTEXT
declare sub NdrPointerBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrCsArrayBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrCsTagBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrSimpleStructBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrConformantStructBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrConformantVaryingStructBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrComplexStructBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrFixedArrayBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrConformantArrayBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrConformantVaryingArrayBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrVaryingArrayBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrComplexArrayBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrConformantStringBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrNonConformantStringBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrEncapsulatedUnionBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrNonEncapsulatedUnionBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrByteCountPointerBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrXmitOrRepAsBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrUserMarshalBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrInterfacePointerBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrContextHandleSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare function NdrPointerMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrCsArrayMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrCsTagMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrSimpleStructMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrConformantStructMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrConformantVaryingStructMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrComplexStructMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrFixedArrayMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrConformantArrayMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrConformantVaryingArrayMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrVaryingArrayMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrComplexArrayMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrConformantStringMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrNonConformantStringMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrEncapsulatedUnionMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrNonEncapsulatedUnionMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrXmitOrRepAsMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrUserMarshalMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare function NdrInterfacePointerMemorySize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING) as ulong
declare sub NdrPointerFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrCsArrayFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrSimpleStructFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrConformantStructFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrConformantVaryingStructFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrComplexStructFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrFixedArrayFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrConformantArrayFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrConformantVaryingArrayFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrVaryingArrayFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrComplexArrayFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrEncapsulatedUnionFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrNonEncapsulatedUnionFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrByteCountPointerFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrXmitOrRepAsFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrUserMarshalFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrInterfacePointerFree(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval pFormat as PFORMAT_STRING)
declare sub NdrConvert2(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING, byval NumberParams as long)
declare sub NdrConvert(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING)

const USER_MARSHAL_FC_BYTE = 1
const USER_MARSHAL_FC_CHAR = 2
const USER_MARSHAL_FC_SMALL = 3
const USER_MARSHAL_FC_USMALL = 4
const USER_MARSHAL_FC_WCHAR = 5
const USER_MARSHAL_FC_SHORT = 6
const USER_MARSHAL_FC_USHORT = 7
const USER_MARSHAL_FC_LONG = 8
const USER_MARSHAL_FC_ULONG = 9
const USER_MARSHAL_FC_FLOAT = 10
const USER_MARSHAL_FC_HYPER = 11
const USER_MARSHAL_FC_DOUBLE = 12

declare function NdrUserMarshalSimpleTypeConvert(byval pFlags as ulong ptr, byval pBuffer as ubyte ptr, byval FormatChar as ubyte) as ubyte ptr
declare sub NdrClientInitializeNew(byval pRpcMsg as PRPC_MESSAGE, byval pStubMsg as PMIDL_STUB_MESSAGE, byval pStubDescriptor as PMIDL_STUB_DESC, byval ProcNum as ulong)
declare function NdrServerInitializeNew(byval pRpcMsg as PRPC_MESSAGE, byval pStubMsg as PMIDL_STUB_MESSAGE, byval pStubDescriptor as PMIDL_STUB_DESC) as ubyte ptr
declare sub NdrServerInitializePartial(byval pRpcMsg as PRPC_MESSAGE, byval pStubMsg as PMIDL_STUB_MESSAGE, byval pStubDescriptor as PMIDL_STUB_DESC, byval RequestedBufferSize as ulong)
declare sub NdrClientInitialize(byval pRpcMsg as PRPC_MESSAGE, byval pStubMsg as PMIDL_STUB_MESSAGE, byval pStubDescriptor as PMIDL_STUB_DESC, byval ProcNum as ulong)
declare function NdrServerInitialize(byval pRpcMsg as PRPC_MESSAGE, byval pStubMsg as PMIDL_STUB_MESSAGE, byval pStubDescriptor as PMIDL_STUB_DESC) as ubyte ptr
declare function NdrServerInitializeUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pStubDescriptor as PMIDL_STUB_DESC, byval pRpcMsg as PRPC_MESSAGE) as ubyte ptr
declare sub NdrServerInitializeMarshall(byval pRpcMsg as PRPC_MESSAGE, byval pStubMsg as PMIDL_STUB_MESSAGE)
declare function NdrGetBuffer(byval pStubMsg as PMIDL_STUB_MESSAGE, byval BufferLength as ulong, byval Handle as RPC_BINDING_HANDLE) as ubyte ptr
declare function NdrNsGetBuffer(byval pStubMsg as PMIDL_STUB_MESSAGE, byval BufferLength as ulong, byval Handle as RPC_BINDING_HANDLE) as ubyte ptr
declare function NdrSendReceive(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pBufferEnd as ubyte ptr) as ubyte ptr
declare function NdrNsSendReceive(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pBufferEnd as ubyte ptr, byval pAutoHandle as RPC_BINDING_HANDLE ptr) as ubyte ptr
declare sub NdrFreeBuffer(byval pStubMsg as PMIDL_STUB_MESSAGE)
declare function NdrGetDcomProtocolVersion(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pVersion as RPC_VERSION ptr) as RPC_STATUS
declare function NdrClientCall2 cdecl(byval pStubDescriptor as PMIDL_STUB_DESC, byval pFormat as PFORMAT_STRING, ...) as CLIENT_CALL_RETURN
declare function NdrClientCall cdecl(byval pStubDescriptor as PMIDL_STUB_DESC, byval pFormat as PFORMAT_STRING, ...) as CLIENT_CALL_RETURN
declare function NdrAsyncClientCall cdecl(byval pStubDescriptor as PMIDL_STUB_DESC, byval pFormat as PFORMAT_STRING, ...) as CLIENT_CALL_RETURN
declare function NdrDcomAsyncClientCall cdecl(byval pStubDescriptor as PMIDL_STUB_DESC, byval pFormat as PFORMAT_STRING, ...) as CLIENT_CALL_RETURN

type STUB_PHASE as long
enum
 STUB_UNMARSHAL
 STUB_CALL_SERVER
 STUB_MARSHAL
 STUB_CALL_SERVER_NO_HRESULT
end enum

type PROXY_PHASE as long
enum
 PROXY_CALCSIZE
 PROXY_GETBUFFER
 PROXY_MARSHAL
 PROXY_SENDRECEIVE
 PROXY_UNMARSHAL
end enum

declare sub NdrAsyncServerCall(byval pRpcMsg as PRPC_MESSAGE)
type IRpcStubBuffer as IRpcStubBuffer_
declare function NdrAsyncStubCall(byval pThis as IRpcStubBuffer ptr, byval pChannel as IRpcChannelBuffer ptr, byval pRpcMsg as PRPC_MESSAGE, byval pdwStubPhase as ulong ptr) as long
declare function NdrDcomAsyncStubCall(byval pThis as IRpcStubBuffer ptr, byval pChannel as IRpcChannelBuffer ptr, byval pRpcMsg as PRPC_MESSAGE, byval pdwStubPhase as ulong ptr) as long
declare function NdrStubCall2(byval pThis as IRpcStubBuffer ptr, byval pChannel as IRpcChannelBuffer ptr, byval pRpcMsg as PRPC_MESSAGE, byval pdwStubPhase as ulong ptr) as long
declare sub NdrServerCall2(byval pRpcMsg as PRPC_MESSAGE)
declare function NdrStubCall(byval pThis as IRpcStubBuffer ptr, byval pChannel as IRpcChannelBuffer ptr, byval pRpcMsg as PRPC_MESSAGE, byval pdwStubPhase as ulong ptr) as long
declare sub NdrServerCall(byval pRpcMsg as PRPC_MESSAGE)
declare function NdrServerUnmarshall(byval pChannel as IRpcChannelBuffer ptr, byval pRpcMsg as PRPC_MESSAGE, byval pStubMsg as PMIDL_STUB_MESSAGE, byval pStubDescriptor as PMIDL_STUB_DESC, byval pFormat as PFORMAT_STRING, byval pParamList as any ptr) as long
declare sub NdrServerMarshall(byval pThis as IRpcStubBuffer ptr, byval pChannel as IRpcChannelBuffer ptr, byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING)
declare function NdrMapCommAndFaultStatus(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pCommStatus as ulong ptr, byval pFaultStatus as ulong ptr, byval Status as RPC_STATUS) as RPC_STATUS
declare function NdrSH_UPDecision(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pPtrInMem as ubyte ptr ptr, byval pBuffer as RPC_BUFPTR) as long
declare function NdrSH_TLUPDecision(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pPtrInMem as ubyte ptr ptr) as long
declare function NdrSH_TLUPDecisionBuffer(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pPtrInMem as ubyte ptr ptr) as long
declare function NdrSH_IfAlloc(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pPtrInMem as ubyte ptr ptr, byval Count as ulong) as long
declare function NdrSH_IfAllocRef(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pPtrInMem as ubyte ptr ptr, byval Count as ulong) as long
declare function NdrSH_IfAllocSet(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pPtrInMem as ubyte ptr ptr, byval Count as ulong) as long
declare function NdrSH_IfCopy(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pPtrInMem as ubyte ptr ptr, byval Count as ulong) as RPC_BUFPTR
declare function NdrSH_IfAllocCopy(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pPtrInMem as ubyte ptr ptr, byval Count as ulong) as RPC_BUFPTR
declare function NdrSH_Copy(byval pStubMsg as ubyte ptr, byval pPtrInMem as ubyte ptr, byval Count as ulong) as ulong
declare sub NdrSH_IfFree(byval pMessage as PMIDL_STUB_MESSAGE, byval pPtr as ubyte ptr)
declare function NdrSH_StringMarshall(byval pMessage as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr, byval Count as ulong, byval Size as long) as RPC_BUFPTR
declare function NdrSH_StringUnMarshall(byval pMessage as PMIDL_STUB_MESSAGE, byval pMemory as ubyte ptr ptr, byval Size as long) as RPC_BUFPTR
type RPC_SS_THREAD_HANDLE as any ptr
declare function RpcSsAllocate(byval Size as uinteger) as any ptr
declare sub RpcSsDisableAllocate()
declare sub RpcSsEnableAllocate()
declare sub RpcSsFree(byval NodeToFree as any ptr)
declare function RpcSsGetThreadHandle() as RPC_SS_THREAD_HANDLE
declare sub RpcSsSetClientAllocFree(byval ClientAlloc as function(byval Size as uinteger) as any ptr, byval ClientFree as sub(byval Ptr as any ptr))
declare sub RpcSsSetThreadHandle(byval Id as RPC_SS_THREAD_HANDLE)
declare sub RpcSsSwapClientAllocFree(byval ClientAlloc as function(byval Size as uinteger) as any ptr, byval ClientFree as sub(byval Ptr as any ptr), byval OldClientAlloc as typeof(function(byval Size as uinteger) as any ptr) ptr, byval OldClientFree as typeof(sub(byval Ptr as any ptr)) ptr)
declare function RpcSmAllocate(byval Size as uinteger, byval pStatus as RPC_STATUS ptr) as any ptr
declare function RpcSmClientFree(byval pNodeToFree as any ptr) as RPC_STATUS
declare function RpcSmDestroyClientContext(byval ContextHandle as any ptr ptr) as RPC_STATUS
declare function RpcSmDisableAllocate() as RPC_STATUS
declare function RpcSmEnableAllocate() as RPC_STATUS
declare function RpcSmFree(byval NodeToFree as any ptr) as RPC_STATUS
declare function RpcSmGetThreadHandle(byval pStatus as RPC_STATUS ptr) as RPC_SS_THREAD_HANDLE
declare function RpcSmSetClientAllocFree(byval ClientAlloc as function(byval Size as uinteger) as any ptr, byval ClientFree as sub(byval Ptr as any ptr)) as RPC_STATUS
declare function RpcSmSetThreadHandle(byval Id as RPC_SS_THREAD_HANDLE) as RPC_STATUS
declare function RpcSmSwapClientAllocFree(byval ClientAlloc as function(byval Size as uinteger) as any ptr, byval ClientFree as sub(byval Ptr as any ptr), byval OldClientAlloc as typeof(function(byval Size as uinteger) as any ptr) ptr, byval OldClientFree as typeof(sub(byval Ptr as any ptr)) ptr) as RPC_STATUS
declare sub NdrRpcSsEnableAllocate(byval pMessage as PMIDL_STUB_MESSAGE)
declare sub NdrRpcSsDisableAllocate(byval pMessage as PMIDL_STUB_MESSAGE)
declare sub NdrRpcSmSetClientToOsf(byval pMessage as PMIDL_STUB_MESSAGE)
declare function NdrRpcSmClientAllocate(byval Size as uinteger) as any ptr
declare sub NdrRpcSmClientFree(byval NodeToFree as any ptr)
declare function NdrRpcSsDefaultAllocate(byval Size as uinteger) as any ptr
declare sub NdrRpcSsDefaultFree(byval NodeToFree as any ptr)
declare function NdrFullPointerXlatInit(byval NumberOfPointers as ulong, byval XlatSide as XLAT_SIDE) as PFULL_PTR_XLAT_TABLES
declare sub NdrFullPointerXlatFree(byval pXlatTables as PFULL_PTR_XLAT_TABLES)
declare function NdrFullPointerQueryPointer(byval pXlatTables as PFULL_PTR_XLAT_TABLES, byval pPointer as any ptr, byval QueryType as ubyte, byval pRefId as ulong ptr) as long
declare function NdrFullPointerQueryRefId(byval pXlatTables as PFULL_PTR_XLAT_TABLES, byval RefId as ulong, byval QueryType as ubyte, byval ppPointer as any ptr ptr) as long
declare sub NdrFullPointerInsertRefId(byval pXlatTables as PFULL_PTR_XLAT_TABLES, byval RefId as ulong, byval pPointer as any ptr)
declare function NdrFullPointerFree(byval pXlatTables as PFULL_PTR_XLAT_TABLES, byval Pointer as any ptr) as long
declare function NdrAllocate(byval pStubMsg as PMIDL_STUB_MESSAGE, byval Len as uinteger) as any ptr
declare sub NdrClearOutParameters(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pFormat as PFORMAT_STRING, byval ArgAddr as any ptr)
declare function NdrOleAllocate(byval Size as uinteger) as any ptr
declare sub NdrOleFree(byval NodeToFree as any ptr)

type _NDR_USER_MARSHAL_INFO_LEVEL1
 Buffer as any ptr
 BufferSize as ulong
 pfnAllocate as function(byval as uinteger) as any ptr
 pfnFree as sub(byval as any ptr)
 pRpcChannelBuffer as IRpcChannelBuffer ptr
 Reserved(0 to 4) as ULONG_PTR
end type

type NDR_USER_MARSHAL_INFO_LEVEL1 as _NDR_USER_MARSHAL_INFO_LEVEL1

type _NDR_USER_MARSHAL_INFO
 InformationLevel as ulong

 union
 Level1 as NDR_USER_MARSHAL_INFO_LEVEL1
 end union
end type

type NDR_USER_MARSHAL_INFO as _NDR_USER_MARSHAL_INFO
declare function NdrGetUserMarshalInfo(byval pFlags as ulong ptr, byval InformationLevel as ulong, byval pMarshalInfo as NDR_USER_MARSHAL_INFO ptr) as RPC_STATUS
declare function NdrCreateServerInterfaceFromStub(byval pStub as IRpcStubBuffer ptr, byval pServerIf as RPC_SERVER_INTERFACE ptr) as RPC_STATUS
declare function NdrClientCall3 cdecl(byval pProxyInfo as MIDL_STUBLESS_PROXY_INFO ptr, byval nProcNum as ulong, byval pReturnValue as any ptr, ...) as CLIENT_CALL_RETURN
declare function Ndr64AsyncClientCall cdecl(byval pProxyInfo as MIDL_STUBLESS_PROXY_INFO ptr, byval nProcNum as ulong, byval pReturnValue as any ptr, ...) as CLIENT_CALL_RETURN
declare function Ndr64DcomAsyncClientCall cdecl(byval pProxyInfo as MIDL_STUBLESS_PROXY_INFO ptr, byval nProcNum as ulong, byval pReturnValue as any ptr, ...) as CLIENT_CALL_RETURN
declare sub Ndr64AsyncServerCall(byval pRpcMsg as PRPC_MESSAGE)
declare sub Ndr64AsyncServerCall64(byval pRpcMsg as PRPC_MESSAGE)
declare sub Ndr64AsyncServerCallAll(byval pRpcMsg as PRPC_MESSAGE)
declare function Ndr64AsyncStubCall(byval pThis as IRpcStubBuffer ptr, byval pChannel as IRpcChannelBuffer ptr, byval pRpcMsg as PRPC_MESSAGE, byval pdwStubPhase as ulong ptr) as long
declare function Ndr64DcomAsyncStubCall(byval pThis as IRpcStubBuffer ptr, byval pChannel as IRpcChannelBuffer ptr, byval pRpcMsg as PRPC_MESSAGE, byval pdwStubPhase as ulong ptr) as long
declare function NdrStubCall3(byval pThis as IRpcStubBuffer ptr, byval pChannel as IRpcChannelBuffer ptr, byval pRpcMsg as PRPC_MESSAGE, byval pdwStubPhase as ulong ptr) as long
declare sub NdrServerCallAll(byval pRpcMsg as PRPC_MESSAGE)
declare sub NdrServerCallNdr64(byval pRpcMsg as PRPC_MESSAGE)
declare sub NdrServerCall3(byval pRpcMsg as PRPC_MESSAGE)
declare sub NdrPartialIgnoreClientMarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as any ptr)
declare sub NdrPartialIgnoreServerUnmarshall(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as any ptr ptr)
declare sub NdrPartialIgnoreClientBufferSize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval pMemory as any ptr)
declare sub NdrPartialIgnoreServerInitialize(byval pStubMsg as PMIDL_STUB_MESSAGE, byval ppMemory as any ptr ptr, byval pFormat as PFORMAT_STRING)
declare sub RpcUserFree(byval AsyncHandle as handle_t, byval pBuffer as any ptr)

end extern


extern "C"

extern IWinTypesBase_v0_1_c_ifspec as RPC_IF_HANDLE
extern IWinTypesBase_v0_1_s_ifspec as RPC_IF_HANDLE
type OLECHAR as WCHAR
type LPOLESTR as wstring ptr
type LPCOLESTR as const wstring ptr
type UCHAR as ubyte

type _COAUTHIDENTITY
 User as USHORT ptr
 UserLength as ULONG
 Domain as USHORT ptr
 DomainLength as ULONG
 Password as USHORT ptr
 PasswordLength as ULONG
 Flags as ULONG
end type

type COAUTHIDENTITY as _COAUTHIDENTITY

type _COAUTHINFO
 dwAuthnSvc as DWORD
 dwAuthzSvc as DWORD
 pwszServerPrincName as LPWSTR
 dwAuthnLevel as DWORD
 dwImpersonationLevel as DWORD
 pAuthIdentityData as COAUTHIDENTITY ptr
 dwCapabilities as DWORD
end type

type COAUTHINFO as _COAUTHINFO
type SCODE as LONG
type PSCODE as SCODE ptr

type tagMEMCTX as long
enum
 MEMCTX_TASK = 1
 MEMCTX_SHARED = 2
 MEMCTX_MACSYSTEM = 3
 MEMCTX_UNKNOWN = -1
 MEMCTX_SAME = -2
end enum

type MEMCTX as tagMEMCTX
const ROTREGFLAGS_ALLOWANYCLIENT = &h1
const APPIDREGFLAGS_ACTIVATE_IUSERVER_INDESKTOP = &h1
const APPIDREGFLAGS_SECURE_SERVER_PROCESS_SD_AND_BIND = &h2
const APPIDREGFLAGS_ISSUE_ACTIVATION_RPC_AT_IDENTIFY = &h4
const APPIDREGFLAGS_IUSERVER_UNMODIFIED_LOGON_TOKEN = &h8
const APPIDREGFLAGS_IUSERVER_SELF_SID_IN_LAUNCH_PERMISSION = &h10
const APPIDREGFLAGS_IUSERVER_ACTIVATE_IN_CLIENT_SESSION_ONLY = &h20
const APPIDREGFLAGS_RESERVED1 = &h40
const DCOMSCM_ACTIVATION_USE_ALL_AUTHNSERVICES = &h1
const DCOMSCM_ACTIVATION_DISALLOW_UNSECURE_CALL = &h2
const DCOMSCM_RESOLVE_USE_ALL_AUTHNSERVICES = &h4
const DCOMSCM_RESOLVE_DISALLOW_UNSECURE_CALL = &h8
const DCOMSCM_PING_USE_MID_AUTHNSERVICE = &h10
const DCOMSCM_PING_DISALLOW_UNSECURE_CALL = &h20

type tagCLSCTX as long
enum
 CLSCTX_INPROC_SERVER = &h1
 CLSCTX_INPROC_HANDLER = &h2
 CLSCTX_LOCAL_SERVER = &h4
 CLSCTX_INPROC_SERVER16 = &h8
 CLSCTX_REMOTE_SERVER = &h10
 CLSCTX_INPROC_HANDLER16 = &h20
 CLSCTX_RESERVED1 = &h40
 CLSCTX_RESERVED2 = &h80
 CLSCTX_RESERVED3 = &h100
 CLSCTX_RESERVED4 = &h200
 CLSCTX_NO_CODE_DOWNLOAD = &h400
 CLSCTX_RESERVED5 = &h800
 CLSCTX_NO_CUSTOM_MARSHAL = &h1000
 CLSCTX_ENABLE_CODE_DOWNLOAD = &h2000
 CLSCTX_NO_FAILURE_LOG = &h4000
 CLSCTX_DISABLE_AAA = &h8000
 CLSCTX_ENABLE_AAA = &h10000
 CLSCTX_FROM_DEFAULT_CONTEXT = &h20000
 CLSCTX_ACTIVATE_32_BIT_SERVER = &h40000
 CLSCTX_ACTIVATE_64_BIT_SERVER = &h80000
 CLSCTX_ENABLE_CLOAKING = &h100000
 CLSCTX_APPCONTAINER = &h400000
 CLSCTX_ACTIVATE_AAA_AS_IU = &h800000
 CLSCTX_PS_DLL = clng(&h80000000)
end enum

type CLSCTX as tagCLSCTX
const CLSCTX_VALID_MASK = ((((((((((((((((CLSCTX_INPROC_SERVER or CLSCTX_INPROC_HANDLER) or CLSCTX_LOCAL_SERVER) or CLSCTX_INPROC_SERVER16) or CLSCTX_REMOTE_SERVER) or CLSCTX_NO_CODE_DOWNLOAD) or CLSCTX_NO_CUSTOM_MARSHAL) or CLSCTX_ENABLE_CODE_DOWNLOAD) or CLSCTX_NO_FAILURE_LOG) or CLSCTX_DISABLE_AAA) or CLSCTX_ENABLE_AAA) or CLSCTX_FROM_DEFAULT_CONTEXT) or CLSCTX_ACTIVATE_32_BIT_SERVER) or CLSCTX_ACTIVATE_64_BIT_SERVER) or CLSCTX_ENABLE_CLOAKING) or CLSCTX_APPCONTAINER) or CLSCTX_ACTIVATE_AAA_AS_IU) or CLSCTX_PS_DLL

type tagMSHLFLAGS as long
enum
 MSHLFLAGS_NORMAL = 0
 MSHLFLAGS_TABLESTRONG = 1
 MSHLFLAGS_TABLEWEAK = 2
 MSHLFLAGS_NOPING = 4
 MSHLFLAGS_RESERVED1 = 8
 MSHLFLAGS_RESERVED2 = 16
 MSHLFLAGS_RESERVED3 = 32
 MSHLFLAGS_RESERVED4 = 64
end enum

type MSHLFLAGS as tagMSHLFLAGS

type tagMSHCTX as long
enum
 MSHCTX_LOCAL = 0
 MSHCTX_NOSHAREDMEM = 1
 MSHCTX_DIFFERENTMACHINE = 2
 MSHCTX_INPROC = 3
 MSHCTX_CROSSCTX = 4
end enum

type MSHCTX as tagMSHCTX

type _BYTE_BLOB
 clSize as ULONG
 abData(0 to 0) as ubyte
end type

type BYTE_BLOB as _BYTE_BLOB
type UP_BYTE_BLOB as BYTE_BLOB ptr

type _WORD_BLOB
 clSize as ULONG
 asData(0 to 0) as ushort
end type

type WORD_BLOB as _WORD_BLOB
type UP_WORD_BLOB as WORD_BLOB ptr

type _DWORD_BLOB
 clSize as ULONG
 alData(0 to 0) as ULONG
end type

type DWORD_BLOB as _DWORD_BLOB
type UP_DWORD_BLOB as DWORD_BLOB ptr

type _FLAGGED_BYTE_BLOB
 fFlags as ULONG
 clSize as ULONG
 abData(0 to 0) as ubyte
end type

type FLAGGED_BYTE_BLOB as _FLAGGED_BYTE_BLOB
type UP_FLAGGED_BYTE_BLOB as FLAGGED_BYTE_BLOB ptr

type _FLAGGED_WORD_BLOB
 fFlags as ULONG
 clSize as ULONG
 asData(0 to 0) as ushort
end type

type FLAGGED_WORD_BLOB as _FLAGGED_WORD_BLOB
type UP_FLAGGED_WORD_BLOB as FLAGGED_WORD_BLOB ptr

type _BYTE_SIZEDARR
 clSize as ULONG
 pData as ubyte ptr
end type

type BYTE_SIZEDARR as _BYTE_SIZEDARR

type _SHORT_SIZEDARR
 clSize as ULONG
 pData as ushort ptr
end type

type WORD_SIZEDARR as _SHORT_SIZEDARR

type _LONG_SIZEDARR
 clSize as ULONG
 pData as ULONG ptr
end type

type DWORD_SIZEDARR as _LONG_SIZEDARR

type _HYPER_SIZEDARR
 clSize as ULONG
 pData as longint ptr
end type

type HYPER_SIZEDARR as _HYPER_SIZEDARR

type tagBLOB
 cbSize as ULONG
 pBlobData as UBYTE ptr
end type

type BLOB as tagBLOB
type LPBLOB as tagBLOB ptr

end extern


extern "Windows"

type IUnknown as IUnknown_
type LPUNKNOWN as IUnknown ptr
extern IID_IUnknown as const GUID

type IUnknownVtbl
 QueryInterface as function(byval This as IUnknown ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IUnknown ptr) as ULONG
 Release as function(byval This as IUnknown ptr) as ULONG
end type

type IUnknown_
 lpVtbl as IUnknownVtbl ptr
end type


declare function IUnknown_QueryInterface_Proxy(byval This as IUnknown ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
declare sub IUnknown_QueryInterface_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IUnknown_AddRef_Proxy(byval This as IUnknown ptr) as ULONG
declare sub IUnknown_AddRef_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IUnknown_Release_Proxy(byval This as IUnknown ptr) as ULONG
declare sub IUnknown_Release_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_AsyncIUnknown as const GUID
type AsyncIUnknown as AsyncIUnknown_

type AsyncIUnknownVtbl
 QueryInterface as function(byval This as AsyncIUnknown ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as AsyncIUnknown ptr) as ULONG
 Release as function(byval This as AsyncIUnknown ptr) as ULONG
 Begin_QueryInterface as function(byval This as AsyncIUnknown ptr, byval riid as const IID const ptr) as HRESULT
 Finish_QueryInterface as function(byval This as AsyncIUnknown ptr, byval ppvObject as any ptr ptr) as HRESULT
 Begin_AddRef as function(byval This as AsyncIUnknown ptr) as HRESULT
 Finish_AddRef as function(byval This as AsyncIUnknown ptr) as ULONG
 Begin_Release as function(byval This as AsyncIUnknown ptr) as HRESULT
 Finish_Release as function(byval This as AsyncIUnknown ptr) as ULONG
end type

type AsyncIUnknown_
 lpVtbl as AsyncIUnknownVtbl ptr
end type


declare function AsyncIUnknown_Begin_QueryInterface_Proxy(byval This as AsyncIUnknown ptr, byval riid as const IID const ptr) as HRESULT
declare sub AsyncIUnknown_Begin_QueryInterface_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function AsyncIUnknown_Finish_QueryInterface_Proxy(byval This as AsyncIUnknown ptr, byval ppvObject as any ptr ptr) as HRESULT
declare sub AsyncIUnknown_Finish_QueryInterface_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function AsyncIUnknown_Begin_AddRef_Proxy(byval This as AsyncIUnknown ptr) as HRESULT
declare sub AsyncIUnknown_Begin_AddRef_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function AsyncIUnknown_Finish_AddRef_Proxy(byval This as AsyncIUnknown ptr) as ULONG
declare sub AsyncIUnknown_Finish_AddRef_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function AsyncIUnknown_Begin_Release_Proxy(byval This as AsyncIUnknown ptr) as HRESULT
declare sub AsyncIUnknown_Begin_Release_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function AsyncIUnknown_Finish_Release_Proxy(byval This as AsyncIUnknown ptr) as ULONG
declare sub AsyncIUnknown_Finish_Release_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IClassFactory as IClassFactory_
type LPCLASSFACTORY as IClassFactory ptr
extern IID_IClassFactory as const GUID

type IClassFactoryVtbl
 QueryInterface as function(byval This as IClassFactory ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IClassFactory ptr) as ULONG
 Release as function(byval This as IClassFactory ptr) as ULONG
 CreateInstance as function(byval This as IClassFactory ptr, byval pUnkOuter as IUnknown ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 LockServer as function(byval This as IClassFactory ptr, byval fLock as WINBOOL) as HRESULT
end type

type IClassFactory_
 lpVtbl as IClassFactoryVtbl ptr
end type


declare function IClassFactory_RemoteCreateInstance_Proxy(byval This as IClassFactory ptr, byval riid as const IID const ptr, byval ppvObject as IUnknown ptr ptr) as HRESULT
declare sub IClassFactory_RemoteCreateInstance_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IClassFactory_RemoteLockServer_Proxy(byval This as IClassFactory ptr, byval fLock as WINBOOL) as HRESULT
declare sub IClassFactory_RemoteLockServer_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IClassFactory_CreateInstance_Proxy(byval This as IClassFactory ptr, byval pUnkOuter as IUnknown ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
declare function IClassFactory_CreateInstance_Stub(byval This as IClassFactory ptr, byval riid as const IID const ptr, byval ppvObject as IUnknown ptr ptr) as HRESULT
declare function IClassFactory_LockServer_Proxy(byval This as IClassFactory ptr, byval fLock as WINBOOL) as HRESULT
declare function IClassFactory_LockServer_Stub(byval This as IClassFactory ptr, byval fLock as WINBOOL) as HRESULT

end extern


extern "Windows"


type _COSERVERINFO
 dwReserved1 as DWORD
 pwszName as LPWSTR
 pAuthInfo as COAUTHINFO ptr
 dwReserved2 as DWORD
end type

type COSERVERINFO as _COSERVERINFO
type IMarshal as IMarshal_
type LPMARSHAL as IMarshal ptr
extern IID_IMarshal as const GUID
type IStream as IStream_

type IMarshalVtbl
 QueryInterface as function(byval This as IMarshal ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IMarshal ptr) as ULONG
 Release as function(byval This as IMarshal ptr) as ULONG
 GetUnmarshalClass as function(byval This as IMarshal ptr, byval riid as const IID const ptr, byval pv as any ptr, byval dwDestContext as DWORD, byval pvDestContext as any ptr, byval mshlflags as DWORD, byval pCid as CLSID ptr) as HRESULT
 GetMarshalSizeMax as function(byval This as IMarshal ptr, byval riid as const IID const ptr, byval pv as any ptr, byval dwDestContext as DWORD, byval pvDestContext as any ptr, byval mshlflags as DWORD, byval pSize as DWORD ptr) as HRESULT
 MarshalInterface as function(byval This as IMarshal ptr, byval pStm as IStream ptr, byval riid as const IID const ptr, byval pv as any ptr, byval dwDestContext as DWORD, byval pvDestContext as any ptr, byval mshlflags as DWORD) as HRESULT
 UnmarshalInterface as function(byval This as IMarshal ptr, byval pStm as IStream ptr, byval riid as const IID const ptr, byval ppv as any ptr ptr) as HRESULT
 ReleaseMarshalData as function(byval This as IMarshal ptr, byval pStm as IStream ptr) as HRESULT
 DisconnectObject as function(byval This as IMarshal ptr, byval dwReserved as DWORD) as HRESULT
end type

type IMarshal_
 lpVtbl as IMarshalVtbl ptr
end type


declare function IMarshal_GetUnmarshalClass_Proxy(byval This as IMarshal ptr, byval riid as const IID const ptr, byval pv as any ptr, byval dwDestContext as DWORD, byval pvDestContext as any ptr, byval mshlflags as DWORD, byval pCid as CLSID ptr) as HRESULT
declare sub IMarshal_GetUnmarshalClass_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMarshal_GetMarshalSizeMax_Proxy(byval This as IMarshal ptr, byval riid as const IID const ptr, byval pv as any ptr, byval dwDestContext as DWORD, byval pvDestContext as any ptr, byval mshlflags as DWORD, byval pSize as DWORD ptr) as HRESULT
declare sub IMarshal_GetMarshalSizeMax_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMarshal_MarshalInterface_Proxy(byval This as IMarshal ptr, byval pStm as IStream ptr, byval riid as const IID const ptr, byval pv as any ptr, byval dwDestContext as DWORD, byval pvDestContext as any ptr, byval mshlflags as DWORD) as HRESULT
declare sub IMarshal_MarshalInterface_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMarshal_UnmarshalInterface_Proxy(byval This as IMarshal ptr, byval pStm as IStream ptr, byval riid as const IID const ptr, byval ppv as any ptr ptr) as HRESULT
declare sub IMarshal_UnmarshalInterface_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMarshal_ReleaseMarshalData_Proxy(byval This as IMarshal ptr, byval pStm as IStream ptr) as HRESULT
declare sub IMarshal_ReleaseMarshalData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMarshal_DisconnectObject_Proxy(byval This as IMarshal ptr, byval dwReserved as DWORD) as HRESULT
declare sub IMarshal_DisconnectObject_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_INoMarshal as const GUID
type INoMarshal as INoMarshal_

type INoMarshalVtbl
 QueryInterface as function(byval This as INoMarshal ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as INoMarshal ptr) as ULONG
 Release as function(byval This as INoMarshal ptr) as ULONG
end type

type INoMarshal_
 lpVtbl as INoMarshalVtbl ptr
end type

extern IID_IAgileObject as const GUID
type IAgileObject as IAgileObject_

type IAgileObjectVtbl
 QueryInterface as function(byval This as IAgileObject ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IAgileObject ptr) as ULONG
 Release as function(byval This as IAgileObject ptr) as ULONG
end type

type IAgileObject_
 lpVtbl as IAgileObjectVtbl ptr
end type

type IMarshal2 as IMarshal2_
type LPMARSHAL2 as IMarshal2 ptr
extern IID_IMarshal2 as const GUID

type IMarshal2Vtbl
 QueryInterface as function(byval This as IMarshal2 ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IMarshal2 ptr) as ULONG
 Release as function(byval This as IMarshal2 ptr) as ULONG
 GetUnmarshalClass as function(byval This as IMarshal2 ptr, byval riid as const IID const ptr, byval pv as any ptr, byval dwDestContext as DWORD, byval pvDestContext as any ptr, byval mshlflags as DWORD, byval pCid as CLSID ptr) as HRESULT
 GetMarshalSizeMax as function(byval This as IMarshal2 ptr, byval riid as const IID const ptr, byval pv as any ptr, byval dwDestContext as DWORD, byval pvDestContext as any ptr, byval mshlflags as DWORD, byval pSize as DWORD ptr) as HRESULT
 MarshalInterface as function(byval This as IMarshal2 ptr, byval pStm as IStream ptr, byval riid as const IID const ptr, byval pv as any ptr, byval dwDestContext as DWORD, byval pvDestContext as any ptr, byval mshlflags as DWORD) as HRESULT
 UnmarshalInterface as function(byval This as IMarshal2 ptr, byval pStm as IStream ptr, byval riid as const IID const ptr, byval ppv as any ptr ptr) as HRESULT
 ReleaseMarshalData as function(byval This as IMarshal2 ptr, byval pStm as IStream ptr) as HRESULT
 DisconnectObject as function(byval This as IMarshal2 ptr, byval dwReserved as DWORD) as HRESULT
end type

type IMarshal2_
 lpVtbl as IMarshal2Vtbl ptr
end type

type IMalloc as IMalloc_
type LPMALLOC as IMalloc ptr
extern IID_IMalloc as const GUID

type IMallocVtbl
 QueryInterface as function(byval This as IMalloc ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IMalloc ptr) as ULONG
 Release as function(byval This as IMalloc ptr) as ULONG
 Alloc as function(byval This as IMalloc ptr, byval cb as SIZE_T_) as any ptr
 Realloc as function(byval This as IMalloc ptr, byval pv as any ptr, byval cb as SIZE_T_) as any ptr
 Free as sub(byval This as IMalloc ptr, byval pv as any ptr)
 GetSize as function(byval This as IMalloc ptr, byval pv as any ptr) as SIZE_T_
 DidAlloc as function(byval This as IMalloc ptr, byval pv as any ptr) as long
 HeapMinimize as sub(byval This as IMalloc ptr)
end type

type IMalloc_
 lpVtbl as IMallocVtbl ptr
end type


declare function IMalloc_Alloc_Proxy(byval This as IMalloc ptr, byval cb as SIZE_T_) as any ptr
declare sub IMalloc_Alloc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMalloc_Realloc_Proxy(byval This as IMalloc ptr, byval pv as any ptr, byval cb as SIZE_T_) as any ptr
declare sub IMalloc_Realloc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub IMalloc_Free_Proxy(byval This as IMalloc ptr, byval pv as any ptr)
declare sub IMalloc_Free_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMalloc_GetSize_Proxy(byval This as IMalloc ptr, byval pv as any ptr) as SIZE_T_
declare sub IMalloc_GetSize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMalloc_DidAlloc_Proxy(byval This as IMalloc ptr, byval pv as any ptr) as long
declare sub IMalloc_DidAlloc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub IMalloc_HeapMinimize_Proxy(byval This as IMalloc ptr)
declare sub IMalloc_HeapMinimize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IStdMarshalInfo as IStdMarshalInfo_
type LPSTDMARSHALINFO as IStdMarshalInfo ptr
extern IID_IStdMarshalInfo as const GUID

type IStdMarshalInfoVtbl
 QueryInterface as function(byval This as IStdMarshalInfo ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IStdMarshalInfo ptr) as ULONG
 Release as function(byval This as IStdMarshalInfo ptr) as ULONG
 GetClassForHandler as function(byval This as IStdMarshalInfo ptr, byval dwDestContext as DWORD, byval pvDestContext as any ptr, byval pClsid as CLSID ptr) as HRESULT
end type

type IStdMarshalInfo_
 lpVtbl as IStdMarshalInfoVtbl ptr
end type

declare function IStdMarshalInfo_GetClassForHandler_Proxy(byval This as IStdMarshalInfo ptr, byval dwDestContext as DWORD, byval pvDestContext as any ptr, byval pClsid as CLSID ptr) as HRESULT
declare sub IStdMarshalInfo_GetClassForHandler_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IExternalConnection as IExternalConnection_
type LPEXTERNALCONNECTION as IExternalConnection ptr

type tagEXTCONN as long
enum
 EXTCONN_STRONG = &h1
 EXTCONN_WEAK = &h2
 EXTCONN_CALLABLE = &h4
end enum

type EXTCONN as tagEXTCONN
extern IID_IExternalConnection as const GUID

type IExternalConnectionVtbl
 QueryInterface as function(byval This as IExternalConnection ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IExternalConnection ptr) as ULONG
 Release as function(byval This as IExternalConnection ptr) as ULONG
 AddConnection as function(byval This as IExternalConnection ptr, byval extconn as DWORD, byval reserved as DWORD) as DWORD
 ReleaseConnection as function(byval This as IExternalConnection ptr, byval extconn as DWORD, byval reserved as DWORD, byval fLastReleaseCloses as WINBOOL) as DWORD
end type

type IExternalConnection_
 lpVtbl as IExternalConnectionVtbl ptr
end type


declare function IExternalConnection_AddConnection_Proxy(byval This as IExternalConnection ptr, byval extconn as DWORD, byval reserved as DWORD) as DWORD
declare sub IExternalConnection_AddConnection_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IExternalConnection_ReleaseConnection_Proxy(byval This as IExternalConnection ptr, byval extconn as DWORD, byval reserved as DWORD, byval fLastReleaseCloses as WINBOOL) as DWORD
declare sub IExternalConnection_ReleaseConnection_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IMultiQI as IMultiQI_
type LPMULTIQI as IMultiQI ptr

type tagMULTI_QI
 pIID as const IID ptr
 pItf as IUnknown ptr
 hr as HRESULT
end type

type MULTI_QI as tagMULTI_QI
extern IID_IMultiQI as const GUID

type IMultiQIVtbl
 QueryInterface as function(byval This as IMultiQI ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IMultiQI ptr) as ULONG
 Release as function(byval This as IMultiQI ptr) as ULONG
 QueryMultipleInterfaces as function(byval This as IMultiQI ptr, byval cMQIs as ULONG, byval pMQIs as MULTI_QI ptr) as HRESULT
end type

type IMultiQI_
 lpVtbl as IMultiQIVtbl ptr
end type

declare function IMultiQI_QueryMultipleInterfaces_Proxy(byval This as IMultiQI ptr, byval cMQIs as ULONG, byval pMQIs as MULTI_QI ptr) as HRESULT
declare sub IMultiQI_QueryMultipleInterfaces_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_AsyncIMultiQI as const GUID
type AsyncIMultiQI as AsyncIMultiQI_

type AsyncIMultiQIVtbl
 QueryInterface as function(byval This as AsyncIMultiQI ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as AsyncIMultiQI ptr) as ULONG
 Release as function(byval This as AsyncIMultiQI ptr) as ULONG
 Begin_QueryMultipleInterfaces as sub(byval This as AsyncIMultiQI ptr, byval cMQIs as ULONG, byval pMQIs as MULTI_QI ptr)
 Finish_QueryMultipleInterfaces as function(byval This as AsyncIMultiQI ptr, byval pMQIs as MULTI_QI ptr) as HRESULT
end type

type AsyncIMultiQI_
 lpVtbl as AsyncIMultiQIVtbl ptr
end type


declare function AsyncIMultiQI_Begin_QueryMultipleInterfaces_Proxy(byval This as IMultiQI ptr, byval cMQIs as ULONG, byval pMQIs as MULTI_QI ptr) as HRESULT
declare sub AsyncIMultiQI_Begin_QueryMultipleInterfaces_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function AsyncIMultiQI_Finish_QueryMultipleInterfaces_Proxy(byval This as IMultiQI ptr, byval cMQIs as ULONG, byval pMQIs as MULTI_QI ptr) as HRESULT
declare sub AsyncIMultiQI_Finish_QueryMultipleInterfaces_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IInternalUnknown as const GUID
type IInternalUnknown as IInternalUnknown_

type IInternalUnknownVtbl
 QueryInterface as function(byval This as IInternalUnknown ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInternalUnknown ptr) as ULONG
 Release as function(byval This as IInternalUnknown ptr) as ULONG
 QueryInternalInterface as function(byval This as IInternalUnknown ptr, byval riid as const IID const ptr, byval ppv as any ptr ptr) as HRESULT
end type

type IInternalUnknown_
 lpVtbl as IInternalUnknownVtbl ptr
end type

declare function IInternalUnknown_QueryInternalInterface_Proxy(byval This as IInternalUnknown ptr, byval riid as const IID const ptr, byval ppv as any ptr ptr) as HRESULT
declare sub IInternalUnknown_QueryInternalInterface_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IEnumUnknown as IEnumUnknown_
type LPENUMUNKNOWN as IEnumUnknown ptr
extern IID_IEnumUnknown as const GUID

type IEnumUnknownVtbl
 QueryInterface as function(byval This as IEnumUnknown ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IEnumUnknown ptr) as ULONG
 Release as function(byval This as IEnumUnknown ptr) as ULONG
 Next as function(byval This as IEnumUnknown ptr, byval celt as ULONG, byval rgelt as IUnknown ptr ptr, byval pceltFetched as ULONG ptr) as HRESULT
 Skip as function(byval This as IEnumUnknown ptr, byval celt as ULONG) as HRESULT
 Reset as function(byval This as IEnumUnknown ptr) as HRESULT
 Clone as function(byval This as IEnumUnknown ptr, byval ppenum as IEnumUnknown ptr ptr) as HRESULT
end type

type IEnumUnknown_
 lpVtbl as IEnumUnknownVtbl ptr
end type


declare function IEnumUnknown_RemoteNext_Proxy(byval This as IEnumUnknown ptr, byval celt as ULONG, byval rgelt as IUnknown ptr ptr, byval pceltFetched as ULONG ptr) as HRESULT
declare sub IEnumUnknown_RemoteNext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumUnknown_Skip_Proxy(byval This as IEnumUnknown ptr, byval celt as ULONG) as HRESULT
declare sub IEnumUnknown_Skip_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumUnknown_Reset_Proxy(byval This as IEnumUnknown ptr) as HRESULT
declare sub IEnumUnknown_Reset_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumUnknown_Clone_Proxy(byval This as IEnumUnknown ptr, byval ppenum as IEnumUnknown ptr ptr) as HRESULT
declare sub IEnumUnknown_Clone_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumUnknown_Next_Proxy(byval This as IEnumUnknown ptr, byval celt as ULONG, byval rgelt as IUnknown ptr ptr, byval pceltFetched as ULONG ptr) as HRESULT
declare function IEnumUnknown_Next_Stub(byval This as IEnumUnknown ptr, byval celt as ULONG, byval rgelt as IUnknown ptr ptr, byval pceltFetched as ULONG ptr) as HRESULT
type IEnumString as IEnumString_
type LPENUMSTRING as IEnumString ptr
extern IID_IEnumString as const GUID

type IEnumStringVtbl
 QueryInterface as function(byval This as IEnumString ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IEnumString ptr) as ULONG
 Release as function(byval This as IEnumString ptr) as ULONG
 Next as function(byval This as IEnumString ptr, byval celt as ULONG, byval rgelt as LPOLESTR ptr, byval pceltFetched as ULONG ptr) as HRESULT
 Skip as function(byval This as IEnumString ptr, byval celt as ULONG) as HRESULT
 Reset as function(byval This as IEnumString ptr) as HRESULT
 Clone as function(byval This as IEnumString ptr, byval ppenum as IEnumString ptr ptr) as HRESULT
end type

type IEnumString_
 lpVtbl as IEnumStringVtbl ptr
end type


declare function IEnumString_RemoteNext_Proxy(byval This as IEnumString ptr, byval celt as ULONG, byval rgelt as LPOLESTR ptr, byval pceltFetched as ULONG ptr) as HRESULT
declare sub IEnumString_RemoteNext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumString_Skip_Proxy(byval This as IEnumString ptr, byval celt as ULONG) as HRESULT
declare sub IEnumString_Skip_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumString_Reset_Proxy(byval This as IEnumString ptr) as HRESULT
declare sub IEnumString_Reset_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumString_Clone_Proxy(byval This as IEnumString ptr, byval ppenum as IEnumString ptr ptr) as HRESULT
declare sub IEnumString_Clone_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumString_Next_Proxy(byval This as IEnumString ptr, byval celt as ULONG, byval rgelt as LPOLESTR ptr, byval pceltFetched as ULONG ptr) as HRESULT
declare function IEnumString_Next_Stub(byval This as IEnumString ptr, byval celt as ULONG, byval rgelt as LPOLESTR ptr, byval pceltFetched as ULONG ptr) as HRESULT
extern IID_ISequentialStream as const GUID
type ISequentialStream as ISequentialStream_

type ISequentialStreamVtbl
 QueryInterface as function(byval This as ISequentialStream ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ISequentialStream ptr) as ULONG
 Release as function(byval This as ISequentialStream ptr) as ULONG
 Read as function(byval This as ISequentialStream ptr, byval pv as any ptr, byval cb as ULONG, byval pcbRead as ULONG ptr) as HRESULT
 Write as function(byval This as ISequentialStream ptr, byval pv as const any ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
end type

type ISequentialStream_
 lpVtbl as ISequentialStreamVtbl ptr
end type


declare function ISequentialStream_RemoteRead_Proxy(byval This as ISequentialStream ptr, byval pv as ubyte ptr, byval cb as ULONG, byval pcbRead as ULONG ptr) as HRESULT
declare sub ISequentialStream_RemoteRead_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ISequentialStream_RemoteWrite_Proxy(byval This as ISequentialStream ptr, byval pv as const ubyte ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
declare sub ISequentialStream_RemoteWrite_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ISequentialStream_Read_Proxy(byval This as ISequentialStream ptr, byval pv as any ptr, byval cb as ULONG, byval pcbRead as ULONG ptr) as HRESULT
declare function ISequentialStream_Read_Stub(byval This as ISequentialStream ptr, byval pv as ubyte ptr, byval cb as ULONG, byval pcbRead as ULONG ptr) as HRESULT
declare function ISequentialStream_Write_Proxy(byval This as ISequentialStream ptr, byval pv as const any ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
declare function ISequentialStream_Write_Stub(byval This as ISequentialStream ptr, byval pv as const ubyte ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
type LPSTREAM as IStream ptr

type tagSTATSTG
 pwcsName as LPOLESTR
 as DWORD type
 cbSize as ULARGE_INTEGER
 mtime as FILETIME
 ctime as FILETIME
 atime as FILETIME
 grfMode as DWORD
 grfLocksSupported as DWORD
 clsid as CLSID
 grfStateBits as DWORD
 reserved as DWORD
end type

type STATSTG as tagSTATSTG

type tagSTGTY as long
enum
 STGTY_STORAGE = 1
 STGTY_STREAM = 2
 STGTY_LOCKBYTES = 3
 STGTY_PROPERTY = 4
end enum

type STGTY as tagSTGTY

type tagSTREAM_SEEK as long
enum
 STREAM_SEEK_SET = 0
 STREAM_SEEK_CUR = 1
 STREAM_SEEK_END = 2
end enum

type STREAM_SEEK as tagSTREAM_SEEK

type tagLOCKTYPE as long
enum
 LOCK_WRITE = 1
 LOCK_EXCLUSIVE = 2
 LOCK_ONLYONCE = 4
end enum

type LOCKTYPE as tagLOCKTYPE
extern IID_IStream as const GUID

type IStreamVtbl
 QueryInterface as function(byval This as IStream ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IStream ptr) as ULONG
 Release as function(byval This as IStream ptr) as ULONG
 Read as function(byval This as IStream ptr, byval pv as any ptr, byval cb as ULONG, byval pcbRead as ULONG ptr) as HRESULT
 Write as function(byval This as IStream ptr, byval pv as const any ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
 Seek as function(byval This as IStream ptr, byval dlibMove as LARGE_INTEGER, byval dwOrigin as DWORD, byval plibNewPosition as ULARGE_INTEGER ptr) as HRESULT
 SetSize as function(byval This as IStream ptr, byval libNewSize as ULARGE_INTEGER) as HRESULT
 CopyTo as function(byval This as IStream ptr, byval pstm as IStream ptr, byval cb as ULARGE_INTEGER, byval pcbRead as ULARGE_INTEGER ptr, byval pcbWritten as ULARGE_INTEGER ptr) as HRESULT
 Commit as function(byval This as IStream ptr, byval grfCommitFlags as DWORD) as HRESULT
 Revert as function(byval This as IStream ptr) as HRESULT
 LockRegion as function(byval This as IStream ptr, byval libOffset as ULARGE_INTEGER, byval cb as ULARGE_INTEGER, byval dwLockType as DWORD) as HRESULT
 UnlockRegion as function(byval This as IStream ptr, byval libOffset as ULARGE_INTEGER, byval cb as ULARGE_INTEGER, byval dwLockType as DWORD) as HRESULT
 Stat as function(byval This as IStream ptr, byval pstatstg as STATSTG ptr, byval grfStatFlag as DWORD) as HRESULT
 Clone as function(byval This as IStream ptr, byval ppstm as IStream ptr ptr) as HRESULT
end type

type IStream_
 lpVtbl as IStreamVtbl ptr
end type


declare function IStream_RemoteSeek_Proxy(byval This as IStream ptr, byval dlibMove as LARGE_INTEGER, byval dwOrigin as DWORD, byval plibNewPosition as ULARGE_INTEGER ptr) as HRESULT
declare sub IStream_RemoteSeek_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStream_SetSize_Proxy(byval This as IStream ptr, byval libNewSize as ULARGE_INTEGER) as HRESULT
declare sub IStream_SetSize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStream_RemoteCopyTo_Proxy(byval This as IStream ptr, byval pstm as IStream ptr, byval cb as ULARGE_INTEGER, byval pcbRead as ULARGE_INTEGER ptr, byval pcbWritten as ULARGE_INTEGER ptr) as HRESULT
declare sub IStream_RemoteCopyTo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStream_Commit_Proxy(byval This as IStream ptr, byval grfCommitFlags as DWORD) as HRESULT
declare sub IStream_Commit_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStream_Revert_Proxy(byval This as IStream ptr) as HRESULT
declare sub IStream_Revert_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStream_LockRegion_Proxy(byval This as IStream ptr, byval libOffset as ULARGE_INTEGER, byval cb as ULARGE_INTEGER, byval dwLockType as DWORD) as HRESULT
declare sub IStream_LockRegion_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStream_UnlockRegion_Proxy(byval This as IStream ptr, byval libOffset as ULARGE_INTEGER, byval cb as ULARGE_INTEGER, byval dwLockType as DWORD) as HRESULT
declare sub IStream_UnlockRegion_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStream_Stat_Proxy(byval This as IStream ptr, byval pstatstg as STATSTG ptr, byval grfStatFlag as DWORD) as HRESULT
declare sub IStream_Stat_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStream_Clone_Proxy(byval This as IStream ptr, byval ppstm as IStream ptr ptr) as HRESULT
declare sub IStream_Clone_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStream_Seek_Proxy(byval This as IStream ptr, byval dlibMove as LARGE_INTEGER, byval dwOrigin as DWORD, byval plibNewPosition as ULARGE_INTEGER ptr) as HRESULT
declare function IStream_Seek_Stub(byval This as IStream ptr, byval dlibMove as LARGE_INTEGER, byval dwOrigin as DWORD, byval plibNewPosition as ULARGE_INTEGER ptr) as HRESULT
declare function IStream_CopyTo_Proxy(byval This as IStream ptr, byval pstm as IStream ptr, byval cb as ULARGE_INTEGER, byval pcbRead as ULARGE_INTEGER ptr, byval pcbWritten as ULARGE_INTEGER ptr) as HRESULT
declare function IStream_CopyTo_Stub(byval This as IStream ptr, byval pstm as IStream ptr, byval cb as ULARGE_INTEGER, byval pcbRead as ULARGE_INTEGER ptr, byval pcbWritten as ULARGE_INTEGER ptr) as HRESULT
type RPCOLEDATAREP as ULONG

type tagRPCOLEMESSAGE
 reserved1 as any ptr
 dataRepresentation as RPCOLEDATAREP
 Buffer as any ptr
 cbBuffer as ULONG
 iMethod as ULONG
 reserved2(0 to 4) as any ptr
 rpcFlags as ULONG
end type

type RPCOLEMESSAGE as tagRPCOLEMESSAGE
type PRPCOLEMESSAGE as RPCOLEMESSAGE ptr
extern IID_IRpcChannelBuffer as const GUID

type IRpcChannelBufferVtbl
 QueryInterface as function(byval This as IRpcChannelBuffer ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IRpcChannelBuffer ptr) as ULONG
 Release as function(byval This as IRpcChannelBuffer ptr) as ULONG
 GetBuffer as function(byval This as IRpcChannelBuffer ptr, byval pMessage as RPCOLEMESSAGE ptr, byval riid as const IID const ptr) as HRESULT
 SendReceive as function(byval This as IRpcChannelBuffer ptr, byval pMessage as RPCOLEMESSAGE ptr, byval pStatus as ULONG ptr) as HRESULT
 FreeBuffer as function(byval This as IRpcChannelBuffer ptr, byval pMessage as RPCOLEMESSAGE ptr) as HRESULT
 GetDestCtx as function(byval This as IRpcChannelBuffer ptr, byval pdwDestContext as DWORD ptr, byval ppvDestContext as any ptr ptr) as HRESULT
 IsConnected as function(byval This as IRpcChannelBuffer ptr) as HRESULT
end type

type IRpcChannelBuffer_
 lpVtbl as IRpcChannelBufferVtbl ptr
end type


declare function IRpcChannelBuffer_GetBuffer_Proxy(byval This as IRpcChannelBuffer ptr, byval pMessage as RPCOLEMESSAGE ptr, byval riid as const IID const ptr) as HRESULT
declare sub IRpcChannelBuffer_GetBuffer_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRpcChannelBuffer_SendReceive_Proxy(byval This as IRpcChannelBuffer ptr, byval pMessage as RPCOLEMESSAGE ptr, byval pStatus as ULONG ptr) as HRESULT
declare sub IRpcChannelBuffer_SendReceive_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRpcChannelBuffer_FreeBuffer_Proxy(byval This as IRpcChannelBuffer ptr, byval pMessage as RPCOLEMESSAGE ptr) as HRESULT
declare sub IRpcChannelBuffer_FreeBuffer_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRpcChannelBuffer_GetDestCtx_Proxy(byval This as IRpcChannelBuffer ptr, byval pdwDestContext as DWORD ptr, byval ppvDestContext as any ptr ptr) as HRESULT
declare sub IRpcChannelBuffer_GetDestCtx_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRpcChannelBuffer_IsConnected_Proxy(byval This as IRpcChannelBuffer ptr) as HRESULT
declare sub IRpcChannelBuffer_IsConnected_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IRpcChannelBuffer2 as const GUID
type IRpcChannelBuffer2 as IRpcChannelBuffer2_

type IRpcChannelBuffer2Vtbl
 QueryInterface as function(byval This as IRpcChannelBuffer2 ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IRpcChannelBuffer2 ptr) as ULONG
 Release as function(byval This as IRpcChannelBuffer2 ptr) as ULONG
 GetBuffer as function(byval This as IRpcChannelBuffer2 ptr, byval pMessage as RPCOLEMESSAGE ptr, byval riid as const IID const ptr) as HRESULT
 SendReceive as function(byval This as IRpcChannelBuffer2 ptr, byval pMessage as RPCOLEMESSAGE ptr, byval pStatus as ULONG ptr) as HRESULT
 FreeBuffer as function(byval This as IRpcChannelBuffer2 ptr, byval pMessage as RPCOLEMESSAGE ptr) as HRESULT
 GetDestCtx as function(byval This as IRpcChannelBuffer2 ptr, byval pdwDestContext as DWORD ptr, byval ppvDestContext as any ptr ptr) as HRESULT
 IsConnected as function(byval This as IRpcChannelBuffer2 ptr) as HRESULT
 GetProtocolVersion as function(byval This as IRpcChannelBuffer2 ptr, byval pdwVersion as DWORD ptr) as HRESULT
end type

type IRpcChannelBuffer2_
 lpVtbl as IRpcChannelBuffer2Vtbl ptr
end type

declare function IRpcChannelBuffer2_GetProtocolVersion_Proxy(byval This as IRpcChannelBuffer2 ptr, byval pdwVersion as DWORD ptr) as HRESULT
declare sub IRpcChannelBuffer2_GetProtocolVersion_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IAsyncRpcChannelBuffer as const GUID
type IAsyncRpcChannelBuffer as IAsyncRpcChannelBuffer_
type ISynchronize as ISynchronize_

type IAsyncRpcChannelBufferVtbl
 QueryInterface as function(byval This as IAsyncRpcChannelBuffer ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IAsyncRpcChannelBuffer ptr) as ULONG
 Release as function(byval This as IAsyncRpcChannelBuffer ptr) as ULONG
 GetBuffer as function(byval This as IAsyncRpcChannelBuffer ptr, byval pMessage as RPCOLEMESSAGE ptr, byval riid as const IID const ptr) as HRESULT
 SendReceive as function(byval This as IAsyncRpcChannelBuffer ptr, byval pMessage as RPCOLEMESSAGE ptr, byval pStatus as ULONG ptr) as HRESULT
 FreeBuffer as function(byval This as IAsyncRpcChannelBuffer ptr, byval pMessage as RPCOLEMESSAGE ptr) as HRESULT
 GetDestCtx as function(byval This as IAsyncRpcChannelBuffer ptr, byval pdwDestContext as DWORD ptr, byval ppvDestContext as any ptr ptr) as HRESULT
 IsConnected as function(byval This as IAsyncRpcChannelBuffer ptr) as HRESULT
 GetProtocolVersion as function(byval This as IAsyncRpcChannelBuffer ptr, byval pdwVersion as DWORD ptr) as HRESULT
 Send as function(byval This as IAsyncRpcChannelBuffer ptr, byval pMsg as RPCOLEMESSAGE ptr, byval pSync as ISynchronize ptr, byval pulStatus as ULONG ptr) as HRESULT
 Receive as function(byval This as IAsyncRpcChannelBuffer ptr, byval pMsg as RPCOLEMESSAGE ptr, byval pulStatus as ULONG ptr) as HRESULT
 GetDestCtxEx as function(byval This as IAsyncRpcChannelBuffer ptr, byval pMsg as RPCOLEMESSAGE ptr, byval pdwDestContext as DWORD ptr, byval ppvDestContext as any ptr ptr) as HRESULT
end type

type IAsyncRpcChannelBuffer_
 lpVtbl as IAsyncRpcChannelBufferVtbl ptr
end type


declare function IAsyncRpcChannelBuffer_Send_Proxy(byval This as IAsyncRpcChannelBuffer ptr, byval pMsg as RPCOLEMESSAGE ptr, byval pSync as ISynchronize ptr, byval pulStatus as ULONG ptr) as HRESULT
declare sub IAsyncRpcChannelBuffer_Send_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IAsyncRpcChannelBuffer_Receive_Proxy(byval This as IAsyncRpcChannelBuffer ptr, byval pMsg as RPCOLEMESSAGE ptr, byval pulStatus as ULONG ptr) as HRESULT
declare sub IAsyncRpcChannelBuffer_Receive_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IAsyncRpcChannelBuffer_GetDestCtxEx_Proxy(byval This as IAsyncRpcChannelBuffer ptr, byval pMsg as RPCOLEMESSAGE ptr, byval pdwDestContext as DWORD ptr, byval ppvDestContext as any ptr ptr) as HRESULT
declare sub IAsyncRpcChannelBuffer_GetDestCtxEx_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IRpcChannelBuffer3 as const GUID
type IRpcChannelBuffer3 as IRpcChannelBuffer3_
type IAsyncManager as IAsyncManager_

type IRpcChannelBuffer3Vtbl
 QueryInterface as function(byval This as IRpcChannelBuffer3 ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IRpcChannelBuffer3 ptr) as ULONG
 Release as function(byval This as IRpcChannelBuffer3 ptr) as ULONG
 GetBuffer as function(byval This as IRpcChannelBuffer3 ptr, byval pMessage as RPCOLEMESSAGE ptr, byval riid as const IID const ptr) as HRESULT
 SendReceive as function(byval This as IRpcChannelBuffer3 ptr, byval pMessage as RPCOLEMESSAGE ptr, byval pStatus as ULONG ptr) as HRESULT
 FreeBuffer as function(byval This as IRpcChannelBuffer3 ptr, byval pMessage as RPCOLEMESSAGE ptr) as HRESULT
 GetDestCtx as function(byval This as IRpcChannelBuffer3 ptr, byval pdwDestContext as DWORD ptr, byval ppvDestContext as any ptr ptr) as HRESULT
 IsConnected as function(byval This as IRpcChannelBuffer3 ptr) as HRESULT
 GetProtocolVersion as function(byval This as IRpcChannelBuffer3 ptr, byval pdwVersion as DWORD ptr) as HRESULT
 Send as function(byval This as IRpcChannelBuffer3 ptr, byval pMsg as RPCOLEMESSAGE ptr, byval pulStatus as ULONG ptr) as HRESULT
 Receive as function(byval This as IRpcChannelBuffer3 ptr, byval pMsg as RPCOLEMESSAGE ptr, byval ulSize as ULONG, byval pulStatus as ULONG ptr) as HRESULT
 Cancel as function(byval This as IRpcChannelBuffer3 ptr, byval pMsg as RPCOLEMESSAGE ptr) as HRESULT
 GetCallContext as function(byval This as IRpcChannelBuffer3 ptr, byval pMsg as RPCOLEMESSAGE ptr, byval riid as const IID const ptr, byval pInterface as any ptr ptr) as HRESULT
 GetDestCtxEx as function(byval This as IRpcChannelBuffer3 ptr, byval pMsg as RPCOLEMESSAGE ptr, byval pdwDestContext as DWORD ptr, byval ppvDestContext as any ptr ptr) as HRESULT
 GetState as function(byval This as IRpcChannelBuffer3 ptr, byval pMsg as RPCOLEMESSAGE ptr, byval pState as DWORD ptr) as HRESULT
 RegisterAsync as function(byval This as IRpcChannelBuffer3 ptr, byval pMsg as RPCOLEMESSAGE ptr, byval pAsyncMgr as IAsyncManager ptr) as HRESULT
end type

type IRpcChannelBuffer3_
 lpVtbl as IRpcChannelBuffer3Vtbl ptr
end type


declare function IRpcChannelBuffer3_Send_Proxy(byval This as IRpcChannelBuffer3 ptr, byval pMsg as RPCOLEMESSAGE ptr, byval pulStatus as ULONG ptr) as HRESULT
declare sub IRpcChannelBuffer3_Send_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRpcChannelBuffer3_Receive_Proxy(byval This as IRpcChannelBuffer3 ptr, byval pMsg as RPCOLEMESSAGE ptr, byval ulSize as ULONG, byval pulStatus as ULONG ptr) as HRESULT
declare sub IRpcChannelBuffer3_Receive_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRpcChannelBuffer3_Cancel_Proxy(byval This as IRpcChannelBuffer3 ptr, byval pMsg as RPCOLEMESSAGE ptr) as HRESULT
declare sub IRpcChannelBuffer3_Cancel_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRpcChannelBuffer3_GetCallContext_Proxy(byval This as IRpcChannelBuffer3 ptr, byval pMsg as RPCOLEMESSAGE ptr, byval riid as const IID const ptr, byval pInterface as any ptr ptr) as HRESULT
declare sub IRpcChannelBuffer3_GetCallContext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRpcChannelBuffer3_GetDestCtxEx_Proxy(byval This as IRpcChannelBuffer3 ptr, byval pMsg as RPCOLEMESSAGE ptr, byval pdwDestContext as DWORD ptr, byval ppvDestContext as any ptr ptr) as HRESULT
declare sub IRpcChannelBuffer3_GetDestCtxEx_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRpcChannelBuffer3_GetState_Proxy(byval This as IRpcChannelBuffer3 ptr, byval pMsg as RPCOLEMESSAGE ptr, byval pState as DWORD ptr) as HRESULT
declare sub IRpcChannelBuffer3_GetState_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRpcChannelBuffer3_RegisterAsync_Proxy(byval This as IRpcChannelBuffer3 ptr, byval pMsg as RPCOLEMESSAGE ptr, byval pAsyncMgr as IAsyncManager ptr) as HRESULT
declare sub IRpcChannelBuffer3_RegisterAsync_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IRpcSyntaxNegotiate as const GUID
type IRpcSyntaxNegotiate as IRpcSyntaxNegotiate_

type IRpcSyntaxNegotiateVtbl
 QueryInterface as function(byval This as IRpcSyntaxNegotiate ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IRpcSyntaxNegotiate ptr) as ULONG
 Release as function(byval This as IRpcSyntaxNegotiate ptr) as ULONG
 NegotiateSyntax as function(byval This as IRpcSyntaxNegotiate ptr, byval pMsg as RPCOLEMESSAGE ptr) as HRESULT
end type

type IRpcSyntaxNegotiate_
 lpVtbl as IRpcSyntaxNegotiateVtbl ptr
end type

declare function IRpcSyntaxNegotiate_NegotiateSyntax_Proxy(byval This as IRpcSyntaxNegotiate ptr, byval pMsg as RPCOLEMESSAGE ptr) as HRESULT
declare sub IRpcSyntaxNegotiate_NegotiateSyntax_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IRpcProxyBuffer as const GUID
type IRpcProxyBuffer as IRpcProxyBuffer_

type IRpcProxyBufferVtbl
 QueryInterface as function(byval This as IRpcProxyBuffer ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IRpcProxyBuffer ptr) as ULONG
 Release as function(byval This as IRpcProxyBuffer ptr) as ULONG
 Connect as function(byval This as IRpcProxyBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr) as HRESULT
 Disconnect as sub(byval This as IRpcProxyBuffer ptr)
end type

type IRpcProxyBuffer_
 lpVtbl as IRpcProxyBufferVtbl ptr
end type


declare function IRpcProxyBuffer_Connect_Proxy(byval This as IRpcProxyBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr) as HRESULT
declare sub IRpcProxyBuffer_Connect_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub IRpcProxyBuffer_Disconnect_Proxy(byval This as IRpcProxyBuffer ptr)
declare sub IRpcProxyBuffer_Disconnect_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IRpcStubBuffer as const GUID

type IRpcStubBufferVtbl
 QueryInterface as function(byval This as IRpcStubBuffer ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IRpcStubBuffer ptr) as ULONG
 Release as function(byval This as IRpcStubBuffer ptr) as ULONG
 Connect as function(byval This as IRpcStubBuffer ptr, byval pUnkServer as IUnknown ptr) as HRESULT
 Disconnect as sub(byval This as IRpcStubBuffer ptr)
 Invoke as function(byval This as IRpcStubBuffer ptr, byval _prpcmsg as RPCOLEMESSAGE ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr) as HRESULT
 IsIIDSupported as function(byval This as IRpcStubBuffer ptr, byval riid as const IID const ptr) as IRpcStubBuffer ptr
 CountRefs as function(byval This as IRpcStubBuffer ptr) as ULONG
 DebugServerQueryInterface as function(byval This as IRpcStubBuffer ptr, byval ppv as any ptr ptr) as HRESULT
 DebugServerRelease as sub(byval This as IRpcStubBuffer ptr, byval pv as any ptr)
end type

type IRpcStubBuffer_
 lpVtbl as IRpcStubBufferVtbl ptr
end type


declare function IRpcStubBuffer_Connect_Proxy(byval This as IRpcStubBuffer ptr, byval pUnkServer as IUnknown ptr) as HRESULT
declare sub IRpcStubBuffer_Connect_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub IRpcStubBuffer_Disconnect_Proxy(byval This as IRpcStubBuffer ptr)
declare sub IRpcStubBuffer_Disconnect_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRpcStubBuffer_Invoke_Proxy(byval This as IRpcStubBuffer ptr, byval _prpcmsg as RPCOLEMESSAGE ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr) as HRESULT
declare sub IRpcStubBuffer_Invoke_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRpcStubBuffer_IsIIDSupported_Proxy(byval This as IRpcStubBuffer ptr, byval riid as const IID const ptr) as IRpcStubBuffer ptr
declare sub IRpcStubBuffer_IsIIDSupported_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRpcStubBuffer_CountRefs_Proxy(byval This as IRpcStubBuffer ptr) as ULONG
declare sub IRpcStubBuffer_CountRefs_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRpcStubBuffer_DebugServerQueryInterface_Proxy(byval This as IRpcStubBuffer ptr, byval ppv as any ptr ptr) as HRESULT
declare sub IRpcStubBuffer_DebugServerQueryInterface_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub IRpcStubBuffer_DebugServerRelease_Proxy(byval This as IRpcStubBuffer ptr, byval pv as any ptr)
declare sub IRpcStubBuffer_DebugServerRelease_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IPSFactoryBuffer as const GUID
type IPSFactoryBuffer as IPSFactoryBuffer_

type IPSFactoryBufferVtbl
 QueryInterface as function(byval This as IPSFactoryBuffer ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IPSFactoryBuffer ptr) as ULONG
 Release as function(byval This as IPSFactoryBuffer ptr) as ULONG
 CreateProxy as function(byval This as IPSFactoryBuffer ptr, byval pUnkOuter as IUnknown ptr, byval riid as const IID const ptr, byval ppProxy as IRpcProxyBuffer ptr ptr, byval ppv as any ptr ptr) as HRESULT
 CreateStub as function(byval This as IPSFactoryBuffer ptr, byval riid as const IID const ptr, byval pUnkServer as IUnknown ptr, byval ppStub as IRpcStubBuffer ptr ptr) as HRESULT
end type

type IPSFactoryBuffer_
 lpVtbl as IPSFactoryBufferVtbl ptr
end type


declare function IPSFactoryBuffer_CreateProxy_Proxy(byval This as IPSFactoryBuffer ptr, byval pUnkOuter as IUnknown ptr, byval riid as const IID const ptr, byval ppProxy as IRpcProxyBuffer ptr ptr, byval ppv as any ptr ptr) as HRESULT
declare sub IPSFactoryBuffer_CreateProxy_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPSFactoryBuffer_CreateStub_Proxy(byval This as IPSFactoryBuffer ptr, byval riid as const IID const ptr, byval pUnkServer as IUnknown ptr, byval ppStub as IRpcStubBuffer ptr ptr) as HRESULT
declare sub IPSFactoryBuffer_CreateStub_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)

type SChannelHookCallInfo
 iid as IID
 cbSize as DWORD
 uCausality as GUID
 dwServerPid as DWORD
 iMethod as DWORD
 pObject as any ptr
end type

extern IID_IChannelHook as const GUID
type IChannelHook as IChannelHook_

type IChannelHookVtbl
 QueryInterface as function(byval This as IChannelHook ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IChannelHook ptr) as ULONG
 Release as function(byval This as IChannelHook ptr) as ULONG
 ClientGetSize as sub(byval This as IChannelHook ptr, byval uExtent as const GUID const ptr, byval riid as const IID const ptr, byval pDataSize as ULONG ptr)
 ClientFillBuffer as sub(byval This as IChannelHook ptr, byval uExtent as const GUID const ptr, byval riid as const IID const ptr, byval pDataSize as ULONG ptr, byval pDataBuffer as any ptr)
 ClientNotify as sub(byval This as IChannelHook ptr, byval uExtent as const GUID const ptr, byval riid as const IID const ptr, byval cbDataSize as ULONG, byval pDataBuffer as any ptr, byval lDataRep as DWORD, byval hrFault as HRESULT)
 ServerNotify as sub(byval This as IChannelHook ptr, byval uExtent as const GUID const ptr, byval riid as const IID const ptr, byval cbDataSize as ULONG, byval pDataBuffer as any ptr, byval lDataRep as DWORD)
 ServerGetSize as sub(byval This as IChannelHook ptr, byval uExtent as const GUID const ptr, byval riid as const IID const ptr, byval hrFault as HRESULT, byval pDataSize as ULONG ptr)
 ServerFillBuffer as sub(byval This as IChannelHook ptr, byval uExtent as const GUID const ptr, byval riid as const IID const ptr, byval pDataSize as ULONG ptr, byval pDataBuffer as any ptr, byval hrFault as HRESULT)
end type

type IChannelHook_
 lpVtbl as IChannelHookVtbl ptr
end type


declare sub IChannelHook_ClientGetSize_Proxy(byval This as IChannelHook ptr, byval uExtent as const GUID const ptr, byval riid as const IID const ptr, byval pDataSize as ULONG ptr)
declare sub IChannelHook_ClientGetSize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub IChannelHook_ClientFillBuffer_Proxy(byval This as IChannelHook ptr, byval uExtent as const GUID const ptr, byval riid as const IID const ptr, byval pDataSize as ULONG ptr, byval pDataBuffer as any ptr)
declare sub IChannelHook_ClientFillBuffer_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub IChannelHook_ClientNotify_Proxy(byval This as IChannelHook ptr, byval uExtent as const GUID const ptr, byval riid as const IID const ptr, byval cbDataSize as ULONG, byval pDataBuffer as any ptr, byval lDataRep as DWORD, byval hrFault as HRESULT)
declare sub IChannelHook_ClientNotify_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub IChannelHook_ServerNotify_Proxy(byval This as IChannelHook ptr, byval uExtent as const GUID const ptr, byval riid as const IID const ptr, byval cbDataSize as ULONG, byval pDataBuffer as any ptr, byval lDataRep as DWORD)
declare sub IChannelHook_ServerNotify_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub IChannelHook_ServerGetSize_Proxy(byval This as IChannelHook ptr, byval uExtent as const GUID const ptr, byval riid as const IID const ptr, byval hrFault as HRESULT, byval pDataSize as ULONG ptr)
declare sub IChannelHook_ServerGetSize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub IChannelHook_ServerFillBuffer_Proxy(byval This as IChannelHook ptr, byval uExtent as const GUID const ptr, byval riid as const IID const ptr, byval pDataSize as ULONG ptr, byval pDataBuffer as any ptr, byval hrFault as HRESULT)
declare sub IChannelHook_ServerFillBuffer_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)

type tagSOLE_AUTHENTICATION_SERVICE
 dwAuthnSvc as DWORD
 dwAuthzSvc as DWORD
 pPrincipalName as wstring ptr
 hr as HRESULT
end type

type SOLE_AUTHENTICATION_SERVICE as tagSOLE_AUTHENTICATION_SERVICE
type PSOLE_AUTHENTICATION_SERVICE as SOLE_AUTHENTICATION_SERVICE ptr

type tagEOLE_AUTHENTICATION_CAPABILITIES as long
enum
 EOAC_NONE = &h00
 EOAC_MUTUAL_AUTH = &h1
 EOAC_STATIC_CLOAKING = &h20
 EOAC_DYNAMIC_CLOAKING = &h40
 EOAC_ANY_AUTHORITY = &h80
 EOAC_MAKE_FULLSIC = &h100
 EOAC_DEFAULT = &h800
 EOAC_SECURE_REFS = &h2
 EOAC_ACCESS_CONTROL = &h4
 EOAC_APPID = &h8
 EOAC_DYNAMIC = &h10
 EOAC_REQUIRE_FULLSIC = &h200
 EOAC_AUTO_IMPERSONATE = &h400
 EOAC_NO_CUSTOM_MARSHAL = &h2000
 EOAC_DISABLE_AAA = &h1000
end enum

type EOLE_AUTHENTICATION_CAPABILITIES as tagEOLE_AUTHENTICATION_CAPABILITIES
const COLE_DEFAULT_PRINCIPAL = cptr(OLECHAR ptr, cast(INT_PTR, -1))
const COLE_DEFAULT_AUTHINFO = cptr(any ptr, cast(INT_PTR, -1))

type tagSOLE_AUTHENTICATION_INFO
 dwAuthnSvc as DWORD
 dwAuthzSvc as DWORD
 pAuthInfo as any ptr
end type

type SOLE_AUTHENTICATION_INFO as tagSOLE_AUTHENTICATION_INFO
type PSOLE_AUTHENTICATION_INFO as tagSOLE_AUTHENTICATION_INFO ptr

type tagSOLE_AUTHENTICATION_LIST
 cAuthInfo as DWORD
 aAuthInfo as SOLE_AUTHENTICATION_INFO ptr
end type

type SOLE_AUTHENTICATION_LIST as tagSOLE_AUTHENTICATION_LIST
type PSOLE_AUTHENTICATION_LIST as tagSOLE_AUTHENTICATION_LIST ptr
extern IID_IClientSecurity as const GUID
type IClientSecurity as IClientSecurity_

type IClientSecurityVtbl
 QueryInterface as function(byval This as IClientSecurity ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IClientSecurity ptr) as ULONG
 Release as function(byval This as IClientSecurity ptr) as ULONG
 QueryBlanket as function(byval This as IClientSecurity ptr, byval pProxy as IUnknown ptr, byval pAuthnSvc as DWORD ptr, byval pAuthzSvc as DWORD ptr, byval pServerPrincName as wstring ptr ptr, byval pAuthnLevel as DWORD ptr, byval pImpLevel as DWORD ptr, byval pAuthInfo as any ptr ptr, byval pCapabilites as DWORD ptr) as HRESULT
 SetBlanket as function(byval This as IClientSecurity ptr, byval pProxy as IUnknown ptr, byval dwAuthnSvc as DWORD, byval dwAuthzSvc as DWORD, byval pServerPrincName as wstring ptr, byval dwAuthnLevel as DWORD, byval dwImpLevel as DWORD, byval pAuthInfo as any ptr, byval dwCapabilities as DWORD) as HRESULT
 CopyProxy as function(byval This as IClientSecurity ptr, byval pProxy as IUnknown ptr, byval ppCopy as IUnknown ptr ptr) as HRESULT
end type

type IClientSecurity_
 lpVtbl as IClientSecurityVtbl ptr
end type


declare function IClientSecurity_QueryBlanket_Proxy(byval This as IClientSecurity ptr, byval pProxy as IUnknown ptr, byval pAuthnSvc as DWORD ptr, byval pAuthzSvc as DWORD ptr, byval pServerPrincName as wstring ptr ptr, byval pAuthnLevel as DWORD ptr, byval pImpLevel as DWORD ptr, byval pAuthInfo as any ptr ptr, byval pCapabilites as DWORD ptr) as HRESULT
declare sub IClientSecurity_QueryBlanket_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IClientSecurity_SetBlanket_Proxy(byval This as IClientSecurity ptr, byval pProxy as IUnknown ptr, byval dwAuthnSvc as DWORD, byval dwAuthzSvc as DWORD, byval pServerPrincName as wstring ptr, byval dwAuthnLevel as DWORD, byval dwImpLevel as DWORD, byval pAuthInfo as any ptr, byval dwCapabilities as DWORD) as HRESULT
declare sub IClientSecurity_SetBlanket_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IClientSecurity_CopyProxy_Proxy(byval This as IClientSecurity ptr, byval pProxy as IUnknown ptr, byval ppCopy as IUnknown ptr ptr) as HRESULT
declare sub IClientSecurity_CopyProxy_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IServerSecurity as const GUID
type IServerSecurity as IServerSecurity_

type IServerSecurityVtbl
 QueryInterface as function(byval This as IServerSecurity ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IServerSecurity ptr) as ULONG
 Release as function(byval This as IServerSecurity ptr) as ULONG
 QueryBlanket as function(byval This as IServerSecurity ptr, byval pAuthnSvc as DWORD ptr, byval pAuthzSvc as DWORD ptr, byval pServerPrincName as wstring ptr ptr, byval pAuthnLevel as DWORD ptr, byval pImpLevel as DWORD ptr, byval pPrivs as any ptr ptr, byval pCapabilities as DWORD ptr) as HRESULT
 ImpersonateClient as function(byval This as IServerSecurity ptr) as HRESULT
 RevertToSelf as function(byval This as IServerSecurity ptr) as HRESULT
 IsImpersonating as function(byval This as IServerSecurity ptr) as WINBOOL
end type

type IServerSecurity_
 lpVtbl as IServerSecurityVtbl ptr
end type


declare function IServerSecurity_QueryBlanket_Proxy(byval This as IServerSecurity ptr, byval pAuthnSvc as DWORD ptr, byval pAuthzSvc as DWORD ptr, byval pServerPrincName as wstring ptr ptr, byval pAuthnLevel as DWORD ptr, byval pImpLevel as DWORD ptr, byval pPrivs as any ptr ptr, byval pCapabilities as DWORD ptr) as HRESULT
declare sub IServerSecurity_QueryBlanket_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IServerSecurity_ImpersonateClient_Proxy(byval This as IServerSecurity ptr) as HRESULT
declare sub IServerSecurity_ImpersonateClient_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IServerSecurity_RevertToSelf_Proxy(byval This as IServerSecurity ptr) as HRESULT
declare sub IServerSecurity_RevertToSelf_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IServerSecurity_IsImpersonating_Proxy(byval This as IServerSecurity ptr) as WINBOOL
declare sub IServerSecurity_IsImpersonating_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)

type tagRPCOPT_PROPERTIES as long
enum
 COMBND_RPCTIMEOUT = &h1
 COMBND_SERVER_LOCALITY = &h2
 COMBND_RESERVED1 = &h4
end enum

type RPCOPT_PROPERTIES as tagRPCOPT_PROPERTIES

type tagRPCOPT_SERVER_LOCALITY_VALUES as long
enum
 SERVER_LOCALITY_PROCESS_LOCAL = 0
 SERVER_LOCALITY_MACHINE_LOCAL = 1
 SERVER_LOCALITY_REMOTE = 2
end enum

type RPCOPT_SERVER_LOCALITY_VALUES as tagRPCOPT_SERVER_LOCALITY_VALUES
extern IID_IRpcOptions as const GUID
type IRpcOptions as IRpcOptions_

type IRpcOptionsVtbl
 QueryInterface as function(byval This as IRpcOptions ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IRpcOptions ptr) as ULONG
 Release as function(byval This as IRpcOptions ptr) as ULONG
 Set as function(byval This as IRpcOptions ptr, byval pPrx as IUnknown ptr, byval dwProperty as RPCOPT_PROPERTIES, byval dwValue as ULONG_PTR) as HRESULT
 Query as function(byval This as IRpcOptions ptr, byval pPrx as IUnknown ptr, byval dwProperty as RPCOPT_PROPERTIES, byval pdwValue as ULONG_PTR ptr) as HRESULT
end type

type IRpcOptions_
 lpVtbl as IRpcOptionsVtbl ptr
end type


declare function IRpcOptions_Set_Proxy(byval This as IRpcOptions ptr, byval pPrx as IUnknown ptr, byval dwProperty as RPCOPT_PROPERTIES, byval dwValue as ULONG_PTR) as HRESULT
declare sub IRpcOptions_Set_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRpcOptions_Query_Proxy(byval This as IRpcOptions ptr, byval pPrx as IUnknown ptr, byval dwProperty as RPCOPT_PROPERTIES, byval pdwValue as ULONG_PTR ptr) as HRESULT
declare sub IRpcOptions_Query_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)

type tagGLOBALOPT_PROPERTIES as long
enum
 COMGLB_EXCEPTION_HANDLING = 1
 COMGLB_APPID = 2
 COMGLB_RPC_THREADPOOL_SETTING = 3
 COMGLB_RO_SETTINGS = 4
 COMGLB_UNMARSHALING_POLICY = 5
end enum

type GLOBALOPT_PROPERTIES as tagGLOBALOPT_PROPERTIES

type tagGLOBALOPT_EH_VALUES as long
enum
 COMGLB_EXCEPTION_HANDLE = 0
 COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1
 COMGLB_EXCEPTION_DONOT_HANDLE = COMGLB_EXCEPTION_DONOT_HANDLE_FATAL
 COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2
end enum

type GLOBALOPT_EH_VALUES as tagGLOBALOPT_EH_VALUES

type tagGLOBALOPT_RPCTP_VALUES as long
enum
 COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0
 COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1
end enum

type GLOBALOPT_RPCTP_VALUES as tagGLOBALOPT_RPCTP_VALUES

type tagGLOBALOPT_RO_FLAGS as long
enum
 COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = &h1
 COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = &h2
 COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = &h4
 COMGLB_FAST_RUNDOWN = &h8
 COMGLB_RESERVED1 = &h10
 COMGLB_RESERVED2 = &h20
 COMGLB_RESERVED3 = &h40
 COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = &h80
end enum

type GLOBALOPT_RO_FLAGS as tagGLOBALOPT_RO_FLAGS

type tagGLOBALOPT_UNMARSHALING_POLICY_VALUES as long
enum
 COMGLB_UNMARSHALING_POLICY_NORMAL = 0
 COMGLB_UNMARSHALING_POLICY_STRONG = 1
 COMGLB_UNMARSHALING_POLICY_HYBRID = 2
end enum

type GLOBALOPT_UNMARSHALING_POLICY_VALUES as tagGLOBALOPT_UNMARSHALING_POLICY_VALUES
extern IID_IGlobalOptions as const GUID
type IGlobalOptions as IGlobalOptions_

type IGlobalOptionsVtbl
 QueryInterface as function(byval This as IGlobalOptions ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IGlobalOptions ptr) as ULONG
 Release as function(byval This as IGlobalOptions ptr) as ULONG
 Set as function(byval This as IGlobalOptions ptr, byval dwProperty as GLOBALOPT_PROPERTIES, byval dwValue as ULONG_PTR) as HRESULT
 Query as function(byval This as IGlobalOptions ptr, byval dwProperty as GLOBALOPT_PROPERTIES, byval pdwValue as ULONG_PTR ptr) as HRESULT
end type

type IGlobalOptions_
 lpVtbl as IGlobalOptionsVtbl ptr
end type


declare function IGlobalOptions_Set_Proxy(byval This as IGlobalOptions ptr, byval dwProperty as GLOBALOPT_PROPERTIES, byval dwValue as ULONG_PTR) as HRESULT
declare sub IGlobalOptions_Set_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IGlobalOptions_Query_Proxy(byval This as IGlobalOptions ptr, byval dwProperty as GLOBALOPT_PROPERTIES, byval pdwValue as ULONG_PTR ptr) as HRESULT
declare sub IGlobalOptions_Query_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type ISurrogate as ISurrogate_
type LPSURROGATE as ISurrogate ptr
extern IID_ISurrogate as const GUID

type ISurrogateVtbl
 QueryInterface as function(byval This as ISurrogate ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ISurrogate ptr) as ULONG
 Release as function(byval This as ISurrogate ptr) as ULONG
 LoadDllServer as function(byval This as ISurrogate ptr, byval Clsid as const IID const ptr) as HRESULT
 FreeSurrogate as function(byval This as ISurrogate ptr) as HRESULT
end type

type ISurrogate_
 lpVtbl as ISurrogateVtbl ptr
end type


declare function ISurrogate_LoadDllServer_Proxy(byval This as ISurrogate ptr, byval Clsid as const IID const ptr) as HRESULT
declare sub ISurrogate_LoadDllServer_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ISurrogate_FreeSurrogate_Proxy(byval This as ISurrogate ptr) as HRESULT
declare sub ISurrogate_FreeSurrogate_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IGlobalInterfaceTable as IGlobalInterfaceTable_
type LPGLOBALINTERFACETABLE as IGlobalInterfaceTable ptr
extern IID_IGlobalInterfaceTable as const GUID

type IGlobalInterfaceTableVtbl
 QueryInterface as function(byval This as IGlobalInterfaceTable ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IGlobalInterfaceTable ptr) as ULONG
 Release as function(byval This as IGlobalInterfaceTable ptr) as ULONG
 RegisterInterfaceInGlobal as function(byval This as IGlobalInterfaceTable ptr, byval pUnk as IUnknown ptr, byval riid as const IID const ptr, byval pdwCookie as DWORD ptr) as HRESULT
 RevokeInterfaceFromGlobal as function(byval This as IGlobalInterfaceTable ptr, byval dwCookie as DWORD) as HRESULT
 GetInterfaceFromGlobal as function(byval This as IGlobalInterfaceTable ptr, byval dwCookie as DWORD, byval riid as const IID const ptr, byval ppv as any ptr ptr) as HRESULT
end type

type IGlobalInterfaceTable_
 lpVtbl as IGlobalInterfaceTableVtbl ptr
end type


declare function IGlobalInterfaceTable_RegisterInterfaceInGlobal_Proxy(byval This as IGlobalInterfaceTable ptr, byval pUnk as IUnknown ptr, byval riid as const IID const ptr, byval pdwCookie as DWORD ptr) as HRESULT
declare sub IGlobalInterfaceTable_RegisterInterfaceInGlobal_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Proxy(byval This as IGlobalInterfaceTable ptr, byval dwCookie as DWORD) as HRESULT
declare sub IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IGlobalInterfaceTable_GetInterfaceFromGlobal_Proxy(byval This as IGlobalInterfaceTable ptr, byval dwCookie as DWORD, byval riid as const IID const ptr, byval ppv as any ptr ptr) as HRESULT
declare sub IGlobalInterfaceTable_GetInterfaceFromGlobal_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_ISynchronize as const GUID

type ISynchronizeVtbl
 QueryInterface as function(byval This as ISynchronize ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ISynchronize ptr) as ULONG
 Release as function(byval This as ISynchronize ptr) as ULONG
 Wait as function(byval This as ISynchronize ptr, byval dwFlags as DWORD, byval dwMilliseconds as DWORD) as HRESULT
 Signal as function(byval This as ISynchronize ptr) as HRESULT
 Reset as function(byval This as ISynchronize ptr) as HRESULT
end type

type ISynchronize_
 lpVtbl as ISynchronizeVtbl ptr
end type


declare function ISynchronize_Wait_Proxy(byval This as ISynchronize ptr, byval dwFlags as DWORD, byval dwMilliseconds as DWORD) as HRESULT
declare sub ISynchronize_Wait_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ISynchronize_Signal_Proxy(byval This as ISynchronize ptr) as HRESULT
declare sub ISynchronize_Signal_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ISynchronize_Reset_Proxy(byval This as ISynchronize ptr) as HRESULT
declare sub ISynchronize_Reset_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_ISynchronizeHandle as const GUID
type ISynchronizeHandle as ISynchronizeHandle_

type ISynchronizeHandleVtbl
 QueryInterface as function(byval This as ISynchronizeHandle ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ISynchronizeHandle ptr) as ULONG
 Release as function(byval This as ISynchronizeHandle ptr) as ULONG
 GetHandle as function(byval This as ISynchronizeHandle ptr, byval ph as HANDLE ptr) as HRESULT
end type

type ISynchronizeHandle_
 lpVtbl as ISynchronizeHandleVtbl ptr
end type

declare function ISynchronizeHandle_GetHandle_Proxy(byval This as ISynchronizeHandle ptr, byval ph as HANDLE ptr) as HRESULT
declare sub ISynchronizeHandle_GetHandle_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_ISynchronizeEvent as const GUID
type ISynchronizeEvent as ISynchronizeEvent_

type ISynchronizeEventVtbl
 QueryInterface as function(byval This as ISynchronizeEvent ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ISynchronizeEvent ptr) as ULONG
 Release as function(byval This as ISynchronizeEvent ptr) as ULONG
 GetHandle as function(byval This as ISynchronizeEvent ptr, byval ph as HANDLE ptr) as HRESULT
 SetEventHandle as function(byval This as ISynchronizeEvent ptr, byval ph as HANDLE ptr) as HRESULT
end type

type ISynchronizeEvent_
 lpVtbl as ISynchronizeEventVtbl ptr
end type

declare function ISynchronizeEvent_SetEventHandle_Proxy(byval This as ISynchronizeEvent ptr, byval ph as HANDLE ptr) as HRESULT
declare sub ISynchronizeEvent_SetEventHandle_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_ISynchronizeContainer as const GUID
type ISynchronizeContainer as ISynchronizeContainer_

type ISynchronizeContainerVtbl
 QueryInterface as function(byval This as ISynchronizeContainer ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ISynchronizeContainer ptr) as ULONG
 Release as function(byval This as ISynchronizeContainer ptr) as ULONG
 AddSynchronize as function(byval This as ISynchronizeContainer ptr, byval pSync as ISynchronize ptr) as HRESULT
 WaitMultiple as function(byval This as ISynchronizeContainer ptr, byval dwFlags as DWORD, byval dwTimeOut as DWORD, byval ppSync as ISynchronize ptr ptr) as HRESULT
end type

type ISynchronizeContainer_
 lpVtbl as ISynchronizeContainerVtbl ptr
end type


declare function ISynchronizeContainer_AddSynchronize_Proxy(byval This as ISynchronizeContainer ptr, byval pSync as ISynchronize ptr) as HRESULT
declare sub ISynchronizeContainer_AddSynchronize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ISynchronizeContainer_WaitMultiple_Proxy(byval This as ISynchronizeContainer ptr, byval dwFlags as DWORD, byval dwTimeOut as DWORD, byval ppSync as ISynchronize ptr ptr) as HRESULT
declare sub ISynchronizeContainer_WaitMultiple_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_ISynchronizeMutex as const GUID
type ISynchronizeMutex as ISynchronizeMutex_

type ISynchronizeMutexVtbl
 QueryInterface as function(byval This as ISynchronizeMutex ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ISynchronizeMutex ptr) as ULONG
 Release as function(byval This as ISynchronizeMutex ptr) as ULONG
 Wait as function(byval This as ISynchronizeMutex ptr, byval dwFlags as DWORD, byval dwMilliseconds as DWORD) as HRESULT
 Signal as function(byval This as ISynchronizeMutex ptr) as HRESULT
 Reset as function(byval This as ISynchronizeMutex ptr) as HRESULT
 ReleaseMutex as function(byval This as ISynchronizeMutex ptr) as HRESULT
end type

type ISynchronizeMutex_
 lpVtbl as ISynchronizeMutexVtbl ptr
end type

declare function ISynchronizeMutex_ReleaseMutex_Proxy(byval This as ISynchronizeMutex ptr) as HRESULT
declare sub ISynchronizeMutex_ReleaseMutex_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type ICancelMethodCalls as ICancelMethodCalls_
type LPCANCELMETHODCALLS as ICancelMethodCalls ptr
extern IID_ICancelMethodCalls as const GUID

type ICancelMethodCallsVtbl
 QueryInterface as function(byval This as ICancelMethodCalls ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ICancelMethodCalls ptr) as ULONG
 Release as function(byval This as ICancelMethodCalls ptr) as ULONG
 Cancel as function(byval This as ICancelMethodCalls ptr, byval ulSeconds as ULONG) as HRESULT
 TestCancel as function(byval This as ICancelMethodCalls ptr) as HRESULT
end type

type ICancelMethodCalls_
 lpVtbl as ICancelMethodCallsVtbl ptr
end type


declare function ICancelMethodCalls_Cancel_Proxy(byval This as ICancelMethodCalls ptr, byval ulSeconds as ULONG) as HRESULT
declare sub ICancelMethodCalls_Cancel_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICancelMethodCalls_TestCancel_Proxy(byval This as ICancelMethodCalls ptr) as HRESULT
declare sub ICancelMethodCalls_TestCancel_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)

type tagDCOM_CALL_STATE as long
enum
 DCOM_NONE = &h00
 DCOM_CALL_COMPLETE = &h1
 DCOM_CALL_CANCELED = &h2
end enum

type DCOM_CALL_STATE as tagDCOM_CALL_STATE
extern IID_IAsyncManager as const GUID

type IAsyncManagerVtbl
 QueryInterface as function(byval This as IAsyncManager ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IAsyncManager ptr) as ULONG
 Release as function(byval This as IAsyncManager ptr) as ULONG
 CompleteCall as function(byval This as IAsyncManager ptr, byval Result as HRESULT) as HRESULT
 GetCallContext as function(byval This as IAsyncManager ptr, byval riid as const IID const ptr, byval pInterface as any ptr ptr) as HRESULT
 GetState as function(byval This as IAsyncManager ptr, byval pulStateFlags as ULONG ptr) as HRESULT
end type

type IAsyncManager_
 lpVtbl as IAsyncManagerVtbl ptr
end type


declare function IAsyncManager_CompleteCall_Proxy(byval This as IAsyncManager ptr, byval Result as HRESULT) as HRESULT
declare sub IAsyncManager_CompleteCall_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IAsyncManager_GetCallContext_Proxy(byval This as IAsyncManager ptr, byval riid as const IID const ptr, byval pInterface as any ptr ptr) as HRESULT
declare sub IAsyncManager_GetCallContext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IAsyncManager_GetState_Proxy(byval This as IAsyncManager ptr, byval pulStateFlags as ULONG ptr) as HRESULT
declare sub IAsyncManager_GetState_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_ICallFactory as const GUID
type ICallFactory as ICallFactory_

type ICallFactoryVtbl
 QueryInterface as function(byval This as ICallFactory ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ICallFactory ptr) as ULONG
 Release as function(byval This as ICallFactory ptr) as ULONG
 CreateCall as function(byval This as ICallFactory ptr, byval riid as const IID const ptr, byval pCtrlUnk as IUnknown ptr, byval riid2 as const IID const ptr, byval ppv as IUnknown ptr ptr) as HRESULT
end type

type ICallFactory_
 lpVtbl as ICallFactoryVtbl ptr
end type

declare function ICallFactory_CreateCall_Proxy(byval This as ICallFactory ptr, byval riid as const IID const ptr, byval pCtrlUnk as IUnknown ptr, byval riid2 as const IID const ptr, byval ppv as IUnknown ptr ptr) as HRESULT
declare sub ICallFactory_CreateCall_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IRpcHelper as const GUID
type IRpcHelper as IRpcHelper_

type IRpcHelperVtbl
 QueryInterface as function(byval This as IRpcHelper ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IRpcHelper ptr) as ULONG
 Release as function(byval This as IRpcHelper ptr) as ULONG
 GetDCOMProtocolVersion as function(byval This as IRpcHelper ptr, byval pComVersion as DWORD ptr) as HRESULT
 GetIIDFromOBJREF as function(byval This as IRpcHelper ptr, byval pObjRef as any ptr, byval piid as IID ptr ptr) as HRESULT
end type

type IRpcHelper_
 lpVtbl as IRpcHelperVtbl ptr
end type


declare function IRpcHelper_GetDCOMProtocolVersion_Proxy(byval This as IRpcHelper ptr, byval pComVersion as DWORD ptr) as HRESULT
declare sub IRpcHelper_GetDCOMProtocolVersion_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRpcHelper_GetIIDFromOBJREF_Proxy(byval This as IRpcHelper ptr, byval pObjRef as any ptr, byval piid as IID ptr ptr) as HRESULT
declare sub IRpcHelper_GetIIDFromOBJREF_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IReleaseMarshalBuffers as const GUID
type IReleaseMarshalBuffers as IReleaseMarshalBuffers_

type IReleaseMarshalBuffersVtbl
 QueryInterface as function(byval This as IReleaseMarshalBuffers ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IReleaseMarshalBuffers ptr) as ULONG
 Release as function(byval This as IReleaseMarshalBuffers ptr) as ULONG
 ReleaseMarshalBuffer as function(byval This as IReleaseMarshalBuffers ptr, byval pMsg as RPCOLEMESSAGE ptr, byval dwFlags as DWORD, byval pChnl as IUnknown ptr) as HRESULT
end type

type IReleaseMarshalBuffers_
 lpVtbl as IReleaseMarshalBuffersVtbl ptr
end type

declare function IReleaseMarshalBuffers_ReleaseMarshalBuffer_Proxy(byval This as IReleaseMarshalBuffers ptr, byval pMsg as RPCOLEMESSAGE ptr, byval dwFlags as DWORD, byval pChnl as IUnknown ptr) as HRESULT
declare sub IReleaseMarshalBuffers_ReleaseMarshalBuffer_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IWaitMultiple as const GUID
type IWaitMultiple as IWaitMultiple_

type IWaitMultipleVtbl
 QueryInterface as function(byval This as IWaitMultiple ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IWaitMultiple ptr) as ULONG
 Release as function(byval This as IWaitMultiple ptr) as ULONG
 WaitMultiple as function(byval This as IWaitMultiple ptr, byval timeout as DWORD, byval pSync as ISynchronize ptr ptr) as HRESULT
 AddSynchronize as function(byval This as IWaitMultiple ptr, byval pSync as ISynchronize ptr) as HRESULT
end type

type IWaitMultiple_
 lpVtbl as IWaitMultipleVtbl ptr
end type


declare function IWaitMultiple_WaitMultiple_Proxy(byval This as IWaitMultiple ptr, byval timeout as DWORD, byval pSync as ISynchronize ptr ptr) as HRESULT
declare sub IWaitMultiple_WaitMultiple_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IWaitMultiple_AddSynchronize_Proxy(byval This as IWaitMultiple ptr, byval pSync as ISynchronize ptr) as HRESULT
declare sub IWaitMultiple_AddSynchronize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IAddrTrackingControl as IAddrTrackingControl_
type LPADDRTRACKINGCONTROL as IAddrTrackingControl ptr
extern IID_IAddrTrackingControl as const GUID

type IAddrTrackingControlVtbl
 QueryInterface as function(byval This as IAddrTrackingControl ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IAddrTrackingControl ptr) as ULONG
 Release as function(byval This as IAddrTrackingControl ptr) as ULONG
 EnableCOMDynamicAddrTracking as function(byval This as IAddrTrackingControl ptr) as HRESULT
 DisableCOMDynamicAddrTracking as function(byval This as IAddrTrackingControl ptr) as HRESULT
end type

type IAddrTrackingControl_
 lpVtbl as IAddrTrackingControlVtbl ptr
end type


declare function IAddrTrackingControl_EnableCOMDynamicAddrTracking_Proxy(byval This as IAddrTrackingControl ptr) as HRESULT
declare sub IAddrTrackingControl_EnableCOMDynamicAddrTracking_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IAddrTrackingControl_DisableCOMDynamicAddrTracking_Proxy(byval This as IAddrTrackingControl ptr) as HRESULT
declare sub IAddrTrackingControl_DisableCOMDynamicAddrTracking_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IAddrExclusionControl as IAddrExclusionControl_
type LPADDREXCLUSIONCONTROL as IAddrExclusionControl ptr
extern IID_IAddrExclusionControl as const GUID

type IAddrExclusionControlVtbl
 QueryInterface as function(byval This as IAddrExclusionControl ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IAddrExclusionControl ptr) as ULONG
 Release as function(byval This as IAddrExclusionControl ptr) as ULONG
 GetCurrentAddrExclusionList as function(byval This as IAddrExclusionControl ptr, byval riid as const IID const ptr, byval ppEnumerator as any ptr ptr) as HRESULT
 UpdateAddrExclusionList as function(byval This as IAddrExclusionControl ptr, byval pEnumerator as IUnknown ptr) as HRESULT
end type

type IAddrExclusionControl_
 lpVtbl as IAddrExclusionControlVtbl ptr
end type


declare function IAddrExclusionControl_GetCurrentAddrExclusionList_Proxy(byval This as IAddrExclusionControl ptr, byval riid as const IID const ptr, byval ppEnumerator as any ptr ptr) as HRESULT
declare sub IAddrExclusionControl_GetCurrentAddrExclusionList_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IAddrExclusionControl_UpdateAddrExclusionList_Proxy(byval This as IAddrExclusionControl ptr, byval pEnumerator as IUnknown ptr) as HRESULT
declare sub IAddrExclusionControl_UpdateAddrExclusionList_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IPipeByte as const GUID
type IPipeByte as IPipeByte_

type IPipeByteVtbl
 QueryInterface as function(byval This as IPipeByte ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IPipeByte ptr) as ULONG
 Release as function(byval This as IPipeByte ptr) as ULONG
 Pull as function(byval This as IPipeByte ptr, byval buf as UBYTE ptr, byval cRequest as ULONG, byval pcReturned as ULONG ptr) as HRESULT
 Push as function(byval This as IPipeByte ptr, byval buf as UBYTE ptr, byval cSent as ULONG) as HRESULT
end type

type IPipeByte_
 lpVtbl as IPipeByteVtbl ptr
end type


declare function IPipeByte_Pull_Proxy(byval This as IPipeByte ptr, byval buf as UBYTE ptr, byval cRequest as ULONG, byval pcReturned as ULONG ptr) as HRESULT
declare sub IPipeByte_Pull_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPipeByte_Push_Proxy(byval This as IPipeByte ptr, byval buf as UBYTE ptr, byval cSent as ULONG) as HRESULT
declare sub IPipeByte_Push_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IPipeLong as const GUID
type IPipeLong as IPipeLong_

type IPipeLongVtbl
 QueryInterface as function(byval This as IPipeLong ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IPipeLong ptr) as ULONG
 Release as function(byval This as IPipeLong ptr) as ULONG
 Pull as function(byval This as IPipeLong ptr, byval buf as LONG ptr, byval cRequest as ULONG, byval pcReturned as ULONG ptr) as HRESULT
 Push as function(byval This as IPipeLong ptr, byval buf as LONG ptr, byval cSent as ULONG) as HRESULT
end type

type IPipeLong_
 lpVtbl as IPipeLongVtbl ptr
end type


declare function IPipeLong_Pull_Proxy(byval This as IPipeLong ptr, byval buf as LONG ptr, byval cRequest as ULONG, byval pcReturned as ULONG ptr) as HRESULT
declare sub IPipeLong_Pull_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPipeLong_Push_Proxy(byval This as IPipeLong ptr, byval buf as LONG ptr, byval cSent as ULONG) as HRESULT
declare sub IPipeLong_Push_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IPipeDouble as const GUID
type IPipeDouble as IPipeDouble_

type IPipeDoubleVtbl
 QueryInterface as function(byval This as IPipeDouble ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IPipeDouble ptr) as ULONG
 Release as function(byval This as IPipeDouble ptr) as ULONG
 Pull as function(byval This as IPipeDouble ptr, byval buf as DOUBLE ptr, byval cRequest as ULONG, byval pcReturned as ULONG ptr) as HRESULT
 Push as function(byval This as IPipeDouble ptr, byval buf as DOUBLE ptr, byval cSent as ULONG) as HRESULT
end type

type IPipeDouble_
 lpVtbl as IPipeDoubleVtbl ptr
end type


declare function IPipeDouble_Pull_Proxy(byval This as IPipeDouble ptr, byval buf as DOUBLE ptr, byval cRequest as ULONG, byval pcReturned as ULONG ptr) as HRESULT
declare sub IPipeDouble_Pull_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPipeDouble_Push_Proxy(byval This as IPipeDouble ptr, byval buf as DOUBLE ptr, byval cSent as ULONG) as HRESULT
declare sub IPipeDouble_Push_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)

type _APTTYPEQUALIFIER as long
enum
 APTTYPEQUALIFIER_NONE = 0
 APTTYPEQUALIFIER_IMPLICIT_MTA = 1
 APTTYPEQUALIFIER_NA_ON_MTA = 2
 APTTYPEQUALIFIER_NA_ON_STA = 3
 APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4
 APTTYPEQUALIFIER_NA_ON_MAINSTA = 5
 APTTYPEQUALIFIER_APPLICATION_STA = 6
end enum

type APTTYPEQUALIFIER as _APTTYPEQUALIFIER

type _APTTYPE as long
enum
 APTTYPE_CURRENT = -1
 APTTYPE_STA = 0
 APTTYPE_MTA = 1
 APTTYPE_NA = 2
 APTTYPE_MAINSTA = 3
end enum

type APTTYPE as _APTTYPE

type _THDTYPE as long
enum
 THDTYPE_BLOCKMESSAGES = 0
 THDTYPE_PROCESSMESSAGES = 1
end enum

type THDTYPE as _THDTYPE
type APARTMENTID as DWORD
extern IID_IComThreadingInfo as const GUID
type IComThreadingInfo as IComThreadingInfo_

type IComThreadingInfoVtbl
 QueryInterface as function(byval This as IComThreadingInfo ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IComThreadingInfo ptr) as ULONG
 Release as function(byval This as IComThreadingInfo ptr) as ULONG
 GetCurrentApartmentType as function(byval This as IComThreadingInfo ptr, byval pAptType as APTTYPE ptr) as HRESULT
 GetCurrentThreadType as function(byval This as IComThreadingInfo ptr, byval pThreadType as THDTYPE ptr) as HRESULT
 GetCurrentLogicalThreadId as function(byval This as IComThreadingInfo ptr, byval pguidLogicalThreadId as GUID ptr) as HRESULT
 SetCurrentLogicalThreadId as function(byval This as IComThreadingInfo ptr, byval rguid as const GUID const ptr) as HRESULT
end type

type IComThreadingInfo_
 lpVtbl as IComThreadingInfoVtbl ptr
end type


declare function IComThreadingInfo_GetCurrentApartmentType_Proxy(byval This as IComThreadingInfo ptr, byval pAptType as APTTYPE ptr) as HRESULT
declare sub IComThreadingInfo_GetCurrentApartmentType_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IComThreadingInfo_GetCurrentThreadType_Proxy(byval This as IComThreadingInfo ptr, byval pThreadType as THDTYPE ptr) as HRESULT
declare sub IComThreadingInfo_GetCurrentThreadType_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IComThreadingInfo_GetCurrentLogicalThreadId_Proxy(byval This as IComThreadingInfo ptr, byval pguidLogicalThreadId as GUID ptr) as HRESULT
declare sub IComThreadingInfo_GetCurrentLogicalThreadId_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IComThreadingInfo_SetCurrentLogicalThreadId_Proxy(byval This as IComThreadingInfo ptr, byval rguid as const GUID const ptr) as HRESULT
declare sub IComThreadingInfo_SetCurrentLogicalThreadId_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IProcessInitControl as const GUID
type IProcessInitControl as IProcessInitControl_

type IProcessInitControlVtbl
 QueryInterface as function(byval This as IProcessInitControl ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IProcessInitControl ptr) as ULONG
 Release as function(byval This as IProcessInitControl ptr) as ULONG
 ResetInitializerTimeout as function(byval This as IProcessInitControl ptr, byval dwSecondsRemaining as DWORD) as HRESULT
end type

type IProcessInitControl_
 lpVtbl as IProcessInitControlVtbl ptr
end type

declare function IProcessInitControl_ResetInitializerTimeout_Proxy(byval This as IProcessInitControl ptr, byval dwSecondsRemaining as DWORD) as HRESULT
declare sub IProcessInitControl_ResetInitializerTimeout_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IFastRundown as const GUID
type IFastRundown as IFastRundown_

type IFastRundownVtbl
 QueryInterface as function(byval This as IFastRundown ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IFastRundown ptr) as ULONG
 Release as function(byval This as IFastRundown ptr) as ULONG
end type

type IFastRundown_
 lpVtbl as IFastRundownVtbl ptr
end type


type CO_MARSHALING_CONTEXT_ATTRIBUTES as long
enum
 CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0
end enum

extern IID_IMarshalingStream as const GUID
type IMarshalingStream as IMarshalingStream_

type IMarshalingStreamVtbl
 QueryInterface as function(byval This as IMarshalingStream ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IMarshalingStream ptr) as ULONG
 Release as function(byval This as IMarshalingStream ptr) as ULONG
 Read as function(byval This as IMarshalingStream ptr, byval pv as any ptr, byval cb as ULONG, byval pcbRead as ULONG ptr) as HRESULT
 Write as function(byval This as IMarshalingStream ptr, byval pv as const any ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
 Seek as function(byval This as IMarshalingStream ptr, byval dlibMove as LARGE_INTEGER, byval dwOrigin as DWORD, byval plibNewPosition as ULARGE_INTEGER ptr) as HRESULT
 SetSize as function(byval This as IMarshalingStream ptr, byval libNewSize as ULARGE_INTEGER) as HRESULT
 CopyTo as function(byval This as IMarshalingStream ptr, byval pstm as IStream ptr, byval cb as ULARGE_INTEGER, byval pcbRead as ULARGE_INTEGER ptr, byval pcbWritten as ULARGE_INTEGER ptr) as HRESULT
 Commit as function(byval This as IMarshalingStream ptr, byval grfCommitFlags as DWORD) as HRESULT
 Revert as function(byval This as IMarshalingStream ptr) as HRESULT
 LockRegion as function(byval This as IMarshalingStream ptr, byval libOffset as ULARGE_INTEGER, byval cb as ULARGE_INTEGER, byval dwLockType as DWORD) as HRESULT
 UnlockRegion as function(byval This as IMarshalingStream ptr, byval libOffset as ULARGE_INTEGER, byval cb as ULARGE_INTEGER, byval dwLockType as DWORD) as HRESULT
 Stat as function(byval This as IMarshalingStream ptr, byval pstatstg as STATSTG ptr, byval grfStatFlag as DWORD) as HRESULT
 Clone as function(byval This as IMarshalingStream ptr, byval ppstm as IStream ptr ptr) as HRESULT
 GetMarshalingContextAttribute as function(byval This as IMarshalingStream ptr, byval attribute as CO_MARSHALING_CONTEXT_ATTRIBUTES, byval pAttributeValue as ULONG_PTR ptr) as HRESULT
end type

type IMarshalingStream_
 lpVtbl as IMarshalingStreamVtbl ptr
end type

declare function IMarshalingStream_GetMarshalingContextAttribute_Proxy(byval This as IMarshalingStream ptr, byval attribute as CO_MARSHALING_CONTEXT_ATTRIBUTES, byval pAttributeValue as ULONG_PTR ptr) as HRESULT
declare sub IMarshalingStream_GetMarshalingContextAttribute_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_ICallbackWithNoReentrancyToApplicationSTA as const GUID

end extern

extern "Windows"

declare sub InitCommonControls()

type tagINITCOMMONCONTROLSEX
 dwSize as DWORD
 dwICC as DWORD
end type

type INITCOMMONCONTROLSEX as tagINITCOMMONCONTROLSEX
type LPINITCOMMONCONTROLSEX as tagINITCOMMONCONTROLSEX ptr
const ICC_LISTVIEW_CLASSES = &h1
const ICC_TREEVIEW_CLASSES = &h2
const ICC_BAR_CLASSES = &h4
const ICC_TAB_CLASSES = &h8
const ICC_UPDOWN_CLASS = &h10
const ICC_PROGRESS_CLASS = &h20
const ICC_HOTKEY_CLASS = &h40
const ICC_ANIMATE_CLASS = &h80
const ICC_WIN95_CLASSES = &hff
const ICC_DATE_CLASSES = &h100
const ICC_USEREX_CLASSES = &h200
const ICC_COOL_CLASSES = &h400
const ICC_INTERNET_CLASSES = &h800
const ICC_PAGESCROLLER_CLASS = &h1000
const ICC_NATIVEFNTCTL_CLASS = &h2000
const ICC_STANDARD_CLASSES = &h4000
const ICC_LINK_CLASS = &h8000
declare function InitCommonControlsEx(byval as const INITCOMMONCONTROLSEX ptr) as WINBOOL
const ODT_HEADER = 100
const ODT_TAB = 101
const ODT_LISTVIEW = 102
const LVM_FIRST = &h1000
const TV_FIRST = &h1100
const HDM_FIRST = &h1200
const TCM_FIRST = &h1300
const PGM_FIRST = &h1400
const ECM_FIRST = &h1500
const BCM_FIRST = &h1600
const CBM_FIRST = &h1700
const CCM_FIRST = &h2000
const CCM_LAST = CCM_FIRST + &h200
const CCM_SETBKCOLOR = CCM_FIRST + 1
const CCM_SETCOLORSCHEME = CCM_FIRST + 2
const CCM_GETCOLORSCHEME = CCM_FIRST + 3
const CCM_GETDROPTARGET = CCM_FIRST + 4
const CCM_SETUNICODEFORMAT = CCM_FIRST + 5
const CCM_GETUNICODEFORMAT = CCM_FIRST + 6
const CCM_SETVERSION = CCM_FIRST + &h7
const CCM_GETVERSION = CCM_FIRST + &h8
const CCM_SETNOTIFYWINDOW = CCM_FIRST + &h9
const CCM_SETWINDOWTHEME = CCM_FIRST + &hb
const CCM_DPISCALE = CCM_FIRST + &hc
const COMCTL32_VERSION = 6

type tagCOLORSCHEME
 dwSize as DWORD
 clrBtnHighlight as COLORREF
 clrBtnShadow as COLORREF
end type

type COLORSCHEME as tagCOLORSCHEME
type LPCOLORSCHEME as tagCOLORSCHEME ptr
const INFOTIPSIZE = 1024


type tagNMTOOLTIPSCREATED
 hdr as NMHDR
 hwndToolTips as HWND
end type

type NMTOOLTIPSCREATED as tagNMTOOLTIPSCREATED
type LPNMTOOLTIPSCREATED as tagNMTOOLTIPSCREATED ptr

type tagNMMOUSE
 hdr as NMHDR
 dwItemSpec as DWORD_PTR
 dwItemData as DWORD_PTR
 pt as POINT
 dwHitInfo as LPARAM
end type

type NMMOUSE as tagNMMOUSE
type LPNMMOUSE as tagNMMOUSE ptr
type NMCLICK as NMMOUSE
type LPNMCLICK as LPNMMOUSE

type tagNMOBJECTNOTIFY
 hdr as NMHDR
 iItem as long
 piid as const IID ptr
 pObject as any ptr
 hResult as HRESULT
 dwFlags as DWORD
end type

type NMOBJECTNOTIFY as tagNMOBJECTNOTIFY
type LPNMOBJECTNOTIFY as tagNMOBJECTNOTIFY ptr

type tagNMKEY
 hdr as NMHDR
 nVKey as UINT
 uFlags as UINT
end type

type NMKEY as tagNMKEY
type LPNMKEY as tagNMKEY ptr

type tagNMCHAR
 hdr as NMHDR
 ch as UINT
 dwItemPrev as DWORD
 dwItemNext as DWORD
end type

type NMCHAR as tagNMCHAR
type LPNMCHAR as tagNMCHAR ptr

 type tagNMCUSTOMTEXT
 hdr as NMHDR
 hDC as HDC
 lpString as LPCWSTR
 nCount as long
 lpRect as LPRECT
 uFormat as UINT
 fLink as WINBOOL
 end type

 type NMCUSTOMTEXT as tagNMCUSTOMTEXT
 type LPNMCUSTOMTEXT as tagNMCUSTOMTEXT ptr

const NM_FIRST = culng(0 - 0)
const NM_LAST = culng(0 - 99)
const LVN_FIRST = culng(0 - 100)
const LVN_LAST = culng(0 - 199)
const HDN_FIRST = culng(0 - 300)
const HDN_LAST = culng(0 - 399)
const TVN_FIRST = culng(0 - 400)
const TVN_LAST = culng(0 - 499)
const TTN_FIRST = culng(0 - 520)
const TTN_LAST = culng(0 - 549)
const TCN_FIRST = culng(0 - 550)
const TCN_LAST = culng(0 - 580)
const TBN_FIRST = culng(0 - 700)
const TBN_LAST = culng(0 - 720)
const UDN_FIRST = culng(0 - 721)
const UDN_LAST = culng(0 - 729)
const DTN_FIRST = culng(0 - 740)
const DTN_LAST = culng(0 - 745)
const MCN_FIRST = culng(0 - 746)
const MCN_LAST = culng(0 - 752)
const DTN_FIRST2 = culng(0 - 753)
const DTN_LAST2 = culng(0 - 799)
const CBEN_FIRST = culng(0 - 800)
const CBEN_LAST = culng(0 - 830)
const RBN_FIRST = culng(0 - 831)
const RBN_LAST = culng(0 - 859)
const IPN_FIRST = culng(0 - 860)
const IPN_LAST = culng(0 - 879)
const SBN_FIRST = culng(0 - 880)
const SBN_LAST = culng(0 - 899)
const PGN_FIRST = culng(0 - 900)
const PGN_LAST = culng(0 - 950)
const WMN_FIRST = culng(0 - 1000)
const WMN_LAST = culng(0 - 1200)
const BCN_FIRST = culng(0 - 1250)
const BCN_LAST = culng(0 - 1350)


const MSGF_COMMCTRL_BEGINDRAG = &h4200
const MSGF_COMMCTRL_SIZEHEADER = &h4201
const MSGF_COMMCTRL_DRAGSELECT = &h4202
const MSGF_COMMCTRL_TOOLBARCUST = &h4203
const CDRF_DODEFAULT = &h00
const CDRF_NEWFONT = &h2
const CDRF_SKIPDEFAULT = &h4
const CDRF_DOERASE = &h8
const CDRF_SKIPPOSTPAINT = &h100
const CDRF_NOTIFYPOSTPAINT = &h10
const CDRF_NOTIFYITEMDRAW = &h20
const CDRF_NOTIFYSUBITEMDRAW = &h20
const CDRF_NOTIFYPOSTERASE = &h40
const CDDS_PREPAINT = &h1
const CDDS_POSTPAINT = &h2
const CDDS_PREERASE = &h3
const CDDS_POSTERASE = &h4
const CDDS_ITEM = &h10000
const CDDS_ITEMPREPAINT = CDDS_ITEM or CDDS_PREPAINT
const CDDS_ITEMPOSTPAINT = CDDS_ITEM or CDDS_POSTPAINT
const CDDS_ITEMPREERASE = CDDS_ITEM or CDDS_PREERASE
const CDDS_ITEMPOSTERASE = CDDS_ITEM or CDDS_POSTERASE
const CDDS_SUBITEM = &h20000
const CDIS_SELECTED = &h1
const CDIS_GRAYED = &h2
const CDIS_DISABLED = &h4
const CDIS_CHECKED = &h8
const CDIS_FOCUS = &h10
const CDIS_DEFAULT = &h20
const CDIS_HOT = &h40
const CDIS_MARKED = &h80
const CDIS_INDETERMINATE = &h100
const CDIS_SHOWKEYBOARDCUES = &h200


type tagNMCUSTOMDRAWINFO
 hdr as NMHDR
 dwDrawStage as DWORD
 hdc as HDC
 rc as RECT
 dwItemSpec as DWORD_PTR
 uItemState as UINT
 lItemlParam as LPARAM
end type

type NMCUSTOMDRAW as tagNMCUSTOMDRAWINFO
type LPNMCUSTOMDRAW as tagNMCUSTOMDRAWINFO ptr

type tagNMTTCUSTOMDRAW
 nmcd as NMCUSTOMDRAW
 uDrawFlags as UINT
end type

type NMTTCUSTOMDRAW as tagNMTTCUSTOMDRAW
type LPNMTTCUSTOMDRAW as tagNMTTCUSTOMDRAW ptr

type tagNMCUSTOMSPLITRECTINFO
 hdr as NMHDR
 rcClient as RECT
 rcButton as RECT
 rcSplit as RECT
end type

type NMCUSTOMSPLITRECTINFO as tagNMCUSTOMSPLITRECTINFO
type LPNMCUSTOMSPLITRECTINFO as tagNMCUSTOMSPLITRECTINFO ptr
const NM_GETCUSTOMSPLITRECT = culng(BCN_FIRST + &h0003)
const CLR_NONE = &hffffffff
const CLR_DEFAULT = &hff000000
type HIMAGELIST as _IMAGELIST ptr

type _IMAGELISTDRAWPARAMS
 cbSize as DWORD
 himl as HIMAGELIST
 i as long
 hdcDst as HDC
 x as long
 y as long
 cx as long
 cy as long
 xBitmap as long
 yBitmap as long
 rgbBk as COLORREF
 rgbFg as COLORREF
 fStyle as UINT
 dwRop as DWORD
 fState as DWORD
 Frame as DWORD
 crEffect as COLORREF
end type

type IMAGELISTDRAWPARAMS as _IMAGELISTDRAWPARAMS
type LPIMAGELISTDRAWPARAMS as _IMAGELISTDRAWPARAMS ptr
const ILC_MASK = &h1
const ILC_COLOR = &h00
const ILC_COLORDDB = &hfe
const ILC_COLOR4 = &h4
const ILC_COLOR8 = &h8
const ILC_COLOR16 = &h10
const ILC_COLOR24 = &h18
const ILC_COLOR32 = &h20
const ILC_PALETTE = &h800
const ILC_MIRROR = &h2000
const ILC_PERITEMMIRROR = &h8000


declare function ImageList_Create(byval cx as long, byval cy as long, byval flags as UINT, byval cInitial as long, byval cGrow as long) as HIMAGELIST
declare function ImageList_Destroy(byval himl as HIMAGELIST) as WINBOOL
declare function ImageList_GetImageCount(byval himl as HIMAGELIST) as long
declare function ImageList_SetImageCount(byval himl as HIMAGELIST, byval uNewCount as UINT) as WINBOOL
declare function ImageList_Add(byval himl as HIMAGELIST, byval hbmImage as HBITMAP, byval hbmMask as HBITMAP) as long
declare function ImageList_ReplaceIcon(byval himl as HIMAGELIST, byval i as long, byval hicon as HICON) as long
declare function ImageList_SetBkColor(byval himl as HIMAGELIST, byval clrBk as COLORREF) as COLORREF
declare function ImageList_GetBkColor(byval himl as HIMAGELIST) as COLORREF
declare function ImageList_SetOverlayImage(byval himl as HIMAGELIST, byval iImage as long, byval iOverlay as long) as WINBOOL

const ILD_NORMAL = &h00
const ILD_TRANSPARENT = &h1
const ILD_MASK = &h10
const ILD_IMAGE = &h20
const ILD_ROP = &h40
const ILD_BLEND25 = &h2
const ILD_BLEND50 = &h4
const ILD_OVERLAYMASK = &hf00
const ILD_PRESERVEALPHA = &h1000
const ILD_SCALE = &h2000
const ILD_DPISCALE = &h4000


const ILD_SELECTED = ILD_BLEND50
const ILD_FOCUS = ILD_BLEND25
const ILD_BLEND = ILD_BLEND50
const CLR_HILIGHT = CLR_DEFAULT
const ILS_NORMAL = &h00
const ILS_GLOW = &h1
const ILS_SHADOW = &h2
const ILS_SATURATE = &h4
const ILS_ALPHA = &h8


declare function ImageList_Draw(byval himl as HIMAGELIST, byval i as long, byval hdcDst as HDC, byval x as long, byval y as long, byval fStyle as UINT) as WINBOOL
declare function ImageList_Replace(byval himl as HIMAGELIST, byval i as long, byval hbmImage as HBITMAP, byval hbmMask as HBITMAP) as WINBOOL
declare function ImageList_AddMasked(byval himl as HIMAGELIST, byval hbmImage as HBITMAP, byval crMask as COLORREF) as long
declare function ImageList_DrawEx(byval himl as HIMAGELIST, byval i as long, byval hdcDst as HDC, byval x as long, byval y as long, byval dx as long, byval dy as long, byval rgbBk as COLORREF, byval rgbFg as COLORREF, byval fStyle as UINT) as WINBOOL
declare function ImageList_DrawIndirect(byval pimldp as IMAGELISTDRAWPARAMS ptr) as WINBOOL
declare function ImageList_Remove(byval himl as HIMAGELIST, byval i as long) as WINBOOL
declare function ImageList_GetIcon(byval himl as HIMAGELIST, byval i as long, byval flags as UINT) as HICON
declare function ImageList_LoadImageA(byval hi as HINSTANCE, byval lpbmp as LPCSTR, byval cx as long, byval cGrow as long, byval crMask as COLORREF, byval uType as UINT, byval uFlags as UINT) as HIMAGELIST
declare function ImageList_LoadImageW(byval hi as HINSTANCE, byval lpbmp as LPCWSTR, byval cx as long, byval cGrow as long, byval crMask as COLORREF, byval uType as UINT, byval uFlags as UINT) as HIMAGELIST

 declare function ImageList_LoadImage alias "ImageList_LoadImageA"(byval hi as HINSTANCE, byval lpbmp as LPCSTR, byval cx as long, byval cGrow as long, byval crMask as COLORREF, byval uType as UINT, byval uFlags as UINT) as HIMAGELIST

const ILCF_MOVE = &h00
const ILCF_SWAP = &h1
declare function ImageList_Copy(byval himlDst as HIMAGELIST, byval iDst as long, byval himlSrc as HIMAGELIST, byval iSrc as long, byval uFlags as UINT) as WINBOOL
declare function ImageList_BeginDrag(byval himlTrack as HIMAGELIST, byval iTrack as long, byval dxHotspot as long, byval dyHotspot as long) as WINBOOL
declare sub ImageList_EndDrag()
declare function ImageList_DragEnter(byval hwndLock as HWND, byval x as long, byval y as long) as WINBOOL
declare function ImageList_DragLeave(byval hwndLock as HWND) as WINBOOL
declare function ImageList_DragMove(byval x as long, byval y as long) as WINBOOL
declare function ImageList_SetDragCursorImage(byval himlDrag as HIMAGELIST, byval iDrag as long, byval dxHotspot as long, byval dyHotspot as long) as WINBOOL
declare function ImageList_DragShowNolock(byval fShow as WINBOOL) as WINBOOL
declare function ImageList_GetDragImage(byval ppt as POINT ptr, byval pptHotspot as POINT ptr) as HIMAGELIST

declare function ImageList_Read(byval pstm as LPSTREAM) as HIMAGELIST
declare function ImageList_Write(byval himl as HIMAGELIST, byval pstm as LPSTREAM) as WINBOOL
const ILP_NORMAL = 0
const ILP_DOWNLEVEL = 1
declare function ImageList_ReadEx(byval dwFlags as DWORD, byval pstm as LPSTREAM, byval riid as const IID const ptr, byval ppv as PVOID ptr) as HRESULT
declare function ImageList_WriteEx(byval himl as HIMAGELIST, byval dwFlags as DWORD, byval pstm as LPSTREAM) as HRESULT

type _IMAGEINFO
 hbmImage as HBITMAP
 hbmMask as HBITMAP
 Unused1 as long
 Unused2 as long
 rcImage as RECT
end type

type IMAGEINFO as _IMAGEINFO
type LPIMAGEINFO as _IMAGEINFO ptr
declare function ImageList_GetIconSize(byval himl as HIMAGELIST, byval cx as long ptr, byval cy as long ptr) as WINBOOL
declare function ImageList_SetIconSize(byval himl as HIMAGELIST, byval cx as long, byval cy as long) as WINBOOL
declare function ImageList_GetImageInfo(byval himl as HIMAGELIST, byval i as long, byval pImageInfo as IMAGEINFO ptr) as WINBOOL
declare function ImageList_Merge(byval himl1 as HIMAGELIST, byval i1 as long, byval himl2 as HIMAGELIST, byval i2 as long, byval dx as long, byval dy as long) as HIMAGELIST
declare function ImageList_Duplicate(byval himl as HIMAGELIST) as HIMAGELIST
declare function HIMAGELIST_QueryInterface(byval himl as HIMAGELIST, byval riid as const IID const ptr, byval ppv as any ptr ptr) as HRESULT



const HDS_HORZ = &h00
const HDS_BUTTONS = &h2
const HDS_HOTTRACK = &h4
const HDS_HIDDEN = &h8
const HDS_DRAGDROP = &h40
const HDS_FULLDRAG = &h80
const HDS_FILTERBAR = &h100
const HDS_FLAT = &h200


const HDFT_ISSTRING = &h00
const HDFT_ISNUMBER = &h1
const HDFT_ISDATE = &h2
const HDFT_HASNOVALUE = &h8000

 type HD_TEXTFILTER as HD_TEXTFILTERA
 type HDTEXTFILTER as HD_TEXTFILTERA
 type LPHD_TEXTFILTER as LPHD_TEXTFILTERA
 type LPHDTEXTFILTER as LPHD_TEXTFILTERA

type _HD_TEXTFILTERA
 pszText as LPSTR
 cchTextMax as INT_
end type

type HD_TEXTFILTERA as _HD_TEXTFILTERA
type LPHD_TEXTFILTERA as _HD_TEXTFILTERA ptr

type _HD_TEXTFILTERW
 pszText as LPWSTR
 cchTextMax as INT_
end type

type HD_TEXTFILTERW as _HD_TEXTFILTERW
type LPHD_TEXTFILTERW as _HD_TEXTFILTERW ptr
type HD_ITEMA as HDITEMA
type HD_ITEMW as HDITEMW

type _HD_ITEMA
 mask as UINT
 cxy as long
 pszText as LPSTR
 hbm as HBITMAP
 cchTextMax as long
 fmt as long
 lParam as LPARAM
 iImage as long
 iOrder as long
 as UINT type
 pvFilter as any ptr

end type

type HDITEMA as _HD_ITEMA
type LPHDITEMA as _HD_ITEMA ptr

type _HD_ITEMW
 mask as UINT
 cxy as long
 pszText as LPWSTR
 hbm as HBITMAP
 cchTextMax as long
 fmt as long
 lParam as LPARAM
 iImage as long
 iOrder as long
 as UINT type
 pvFilter as any ptr

end type

type HDITEMW as _HD_ITEMW
type LPHDITEMW as _HD_ITEMW ptr

 type HDITEM as HDITEMA

type HD_ITEM as HDITEM

 type LPHDITEM as LPHDITEMA

const HDI_WIDTH = &h1
const HDI_HEIGHT = HDI_WIDTH
const HDI_TEXT = &h2
const HDI_FORMAT = &h4
const HDI_LPARAM = &h8
const HDI_BITMAP = &h10
const HDI_IMAGE = &h20
const HDI_DI_SETITEM = &h40
const HDI_ORDER = &h80
const HDI_FILTER = &h100


const HDF_LEFT = &h00
const HDF_RIGHT = &h1
const HDF_CENTER = &h2
const HDF_JUSTIFYMASK = &h3
const HDF_RTLREADING = &h4
const HDF_OWNERDRAW = &h8000
const HDF_STRING = &h4000
const HDF_BITMAP = &h2000
const HDF_BITMAP_ON_RIGHT = &h1000
const HDF_IMAGE = &h800
const HDF_SORTUP = &h400
const HDF_SORTDOWN = &h200


const HDM_GETITEMCOUNT = HDM_FIRST + 0
const HDM_INSERTITEMA = HDM_FIRST + 1
const HDM_INSERTITEMW = HDM_FIRST + 10

 const HDM_INSERTITEM = HDM_INSERTITEMA

const HDM_DELETEITEM = HDM_FIRST + 2
const HDM_GETITEMA = HDM_FIRST + 3
const HDM_GETITEMW = HDM_FIRST + 11

 const HDM_GETITEM = HDM_GETITEMA

const HDM_SETITEMA = HDM_FIRST + 4
const HDM_SETITEMW = HDM_FIRST + 12

 const HDM_SETITEM = HDM_SETITEMA

type HD_LAYOUT as HDLAYOUT

type _HD_LAYOUT
 prc as RECT ptr
 pwpos as WINDOWPOS ptr
end type

type HDLAYOUT as _HD_LAYOUT
type LPHDLAYOUT as _HD_LAYOUT ptr
const HDM_LAYOUT = HDM_FIRST + 5
const HHT_NOWHERE = &h1
const HHT_ONHEADER = &h2
const HHT_ONDIVIDER = &h4
const HHT_ONDIVOPEN = &h8
const HHT_ONFILTER = &h10
const HHT_ONFILTERBUTTON = &h20
const HHT_ABOVE = &h100
const HHT_BELOW = &h200
const HHT_TORIGHT = &h400
const HHT_TOLEFT = &h800


type HD_HITTESTINFO as HDHITTESTINFO

type _HD_HITTESTINFO
 pt as POINT
 flags as UINT
 iItem as long
end type

type HDHITTESTINFO as _HD_HITTESTINFO
type LPHDHITTESTINFO as _HD_HITTESTINFO ptr
const HDSIL_NORMAL = 0
const HDSIL_STATE = 1
const HDM_HITTEST = HDM_FIRST + 6
const HDM_GETITEMRECT = HDM_FIRST + 7
const HDM_SETIMAGELIST = HDM_FIRST + 8
const HDM_GETIMAGELIST = HDM_FIRST + 9
const HDM_ORDERTOINDEX = HDM_FIRST + 15
const HDM_CREATEDRAGIMAGE = HDM_FIRST + 16
const HDM_GETORDERARRAY = HDM_FIRST + 17
const HDM_SETORDERARRAY = HDM_FIRST + 18
const HDM_SETHOTDIVIDER = HDM_FIRST + 19
const HDM_SETBITMAPMARGIN = HDM_FIRST + 20
const HDM_GETBITMAPMARGIN = HDM_FIRST + 21
const HDM_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
const HDM_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT
const HDM_SETFILTERCHANGETIMEOUT = HDM_FIRST + 22
const HDM_EDITFILTER = HDM_FIRST + 23


const HDM_CLEARFILTER = HDM_FIRST + 24


const HDN_ITEMCHANGINGA = culng(HDN_FIRST - 0)
const HDN_ITEMCHANGINGW = culng(HDN_FIRST - 20)
const HDN_ITEMCHANGEDA = culng(HDN_FIRST - 1)
const HDN_ITEMCHANGEDW = culng(HDN_FIRST - 21)
const HDN_ITEMCLICKA = culng(HDN_FIRST - 2)
const HDN_ITEMCLICKW = culng(HDN_FIRST - 22)
const HDN_ITEMDBLCLICKA = culng(HDN_FIRST - 3)
const HDN_ITEMDBLCLICKW = culng(HDN_FIRST - 23)
const HDN_DIVIDERDBLCLICKA = culng(HDN_FIRST - 5)
const HDN_DIVIDERDBLCLICKW = culng(HDN_FIRST - 25)
const HDN_BEGINTRACKA = culng(HDN_FIRST - 6)
const HDN_BEGINTRACKW = culng(HDN_FIRST - 26)
const HDN_ENDTRACKA = culng(HDN_FIRST - 7)
const HDN_ENDTRACKW = culng(HDN_FIRST - 27)
const HDN_TRACKA = culng(HDN_FIRST - 8)
const HDN_TRACKW = culng(HDN_FIRST - 28)
const HDN_GETDISPINFOA = culng(HDN_FIRST - 9)
const HDN_GETDISPINFOW = culng(HDN_FIRST - 29)
const HDN_BEGINDRAG = culng(HDN_FIRST - 10)
const HDN_ENDDRAG = culng(HDN_FIRST - 11)
const HDN_FILTERCHANGE = culng(HDN_FIRST - 12)
const HDN_FILTERBTNCLICK = culng(HDN_FIRST - 13)

 const HDN_BEGINFILTEREDIT = culng(HDN_FIRST - 14)
 const HDN_ENDFILTEREDIT = culng(HDN_FIRST - 15)


 const HDN_ITEMCHANGING = HDN_ITEMCHANGINGA
 const HDN_ITEMCHANGED = HDN_ITEMCHANGEDA
 const HDN_ITEMCLICK = HDN_ITEMCLICKA
 const HDN_ITEMDBLCLICK = HDN_ITEMDBLCLICKA
 const HDN_DIVIDERDBLCLICK = HDN_DIVIDERDBLCLICKA
 const HDN_BEGINTRACK = HDN_BEGINTRACKA
 const HDN_ENDTRACK = HDN_ENDTRACKA
 const HDN_TRACK = HDN_TRACKA
 const HDN_GETDISPINFO = HDN_GETDISPINFOA

type HD_NOTIFYA as NMHEADERA
type HD_NOTIFYW as NMHEADERW

type tagNMHEADERA
 hdr as NMHDR
 iItem as long
 iButton as long
 pitem as HDITEMA ptr
end type

type NMHEADERA as tagNMHEADERA
type LPNMHEADERA as tagNMHEADERA ptr

type tagNMHEADERW
 hdr as NMHDR
 iItem as long
 iButton as long
 pitem as HDITEMW ptr
end type

type NMHEADERW as tagNMHEADERW
type LPNMHEADERW as tagNMHEADERW ptr

 type NMHEADER as NMHEADERA

type HD_NOTIFY as NMHEADER

 type LPNMHEADER as LPNMHEADERA

type tagNMHDDISPINFOW
 hdr as NMHDR
 iItem as long
 mask as UINT
 pszText as LPWSTR
 cchTextMax as long
 iImage as long
 lParam as LPARAM
end type

type NMHDDISPINFOW as tagNMHDDISPINFOW
type LPNMHDDISPINFOW as tagNMHDDISPINFOW ptr

type tagNMHDDISPINFOA
 hdr as NMHDR
 iItem as long
 mask as UINT
 pszText as LPSTR
 cchTextMax as long
 iImage as long
 lParam as LPARAM
end type

type NMHDDISPINFOA as tagNMHDDISPINFOA
type LPNMHDDISPINFOA as tagNMHDDISPINFOA ptr

 type NMHDDISPINFO as NMHDDISPINFOA
 type LPNMHDDISPINFO as LPNMHDDISPINFOA

type tagNMHDFILTERBTNCLICK
 hdr as NMHDR
 iItem as INT_
 rc as RECT
end type

type NMHDFILTERBTNCLICK as tagNMHDFILTERBTNCLICK
type LPNMHDFILTERBTNCLICK as tagNMHDFILTERBTNCLICK ptr


type _TBBUTTON
 iBitmap as long
 idCommand as long
 fsState as UBYTE
 fsStyle as UBYTE

 bReserved(0 to 1) as UBYTE

 dwData as DWORD_PTR
 iString as INT_PTR
end type

type TBBUTTON as _TBBUTTON
type PTBBUTTON as _TBBUTTON ptr
type LPTBBUTTON as _TBBUTTON ptr
type LPCTBBUTTON as const TBBUTTON ptr

type _COLORMAP
 from as COLORREF
 to as COLORREF
end type

type COLORMAP as _COLORMAP
type LPCOLORMAP as _COLORMAP ptr
declare function CreateToolbarEx(byval hwnd as HWND, byval ws as DWORD, byval wID as UINT, byval nBitmaps as long, byval hBMInst as HINSTANCE, byval wBMID as UINT_PTR, byval lpButtons as LPCTBBUTTON, byval iNumButtons as long, byval dxButton as long, byval dyButton as long, byval dxBitmap as long, byval dyBitmap as long, byval uStructSize as UINT) as HWND
declare function CreateMappedBitmap(byval hInstance as HINSTANCE, byval idBitmap as INT_PTR, byval wFlags as UINT, byval lpColorMap as LPCOLORMAP, byval iNumMaps as long) as HBITMAP
const CMB_MASKED = &h2
const TBSTATE_CHECKED = &h1
const TBSTATE_PRESSED = &h2
const TBSTATE_ENABLED = &h4
const TBSTATE_HIDDEN = &h8
const TBSTATE_INDETERMINATE = &h10
const TBSTATE_WRAP = &h20
const TBSTATE_ELLIPSES = &h40
const TBSTATE_MARKED = &h80
const TBSTYLE_BUTTON = &h00
const TBSTYLE_SEP = &h1
const TBSTYLE_CHECK = &h2
const TBSTYLE_GROUP = &h4
const TBSTYLE_CHECKGROUP = TBSTYLE_GROUP or TBSTYLE_CHECK
const TBSTYLE_DROPDOWN = &h8
const TBSTYLE_AUTOSIZE = &h10
const TBSTYLE_NOPREFIX = &h20
const TBSTYLE_TOOLTIPS = &h100
const TBSTYLE_WRAPABLE = &h200
const TBSTYLE_ALTDRAG = &h400
const TBSTYLE_FLAT = &h800
const TBSTYLE_LIST = &h1000
const TBSTYLE_CUSTOMERASE = &h2000
const TBSTYLE_REGISTERDROP = &h4000
const TBSTYLE_TRANSPARENT = &h8000
const TBSTYLE_EX_DRAWDDARROWS = &h1
const BTNS_BUTTON = TBSTYLE_BUTTON
const BTNS_SEP = TBSTYLE_SEP
const BTNS_CHECK = TBSTYLE_CHECK
const BTNS_GROUP = TBSTYLE_GROUP
const BTNS_CHECKGROUP = TBSTYLE_CHECKGROUP
const BTNS_DROPDOWN = TBSTYLE_DROPDOWN
const BTNS_AUTOSIZE = TBSTYLE_AUTOSIZE
const BTNS_NOPREFIX = TBSTYLE_NOPREFIX
const BTNS_SHOWTEXT = &h40
const BTNS_WHOLEDROPDOWN = &h80
const TBSTYLE_EX_MULTICOLUMN = &h2
const TBSTYLE_EX_VERTICAL = &h4
const TBSTYLE_EX_MIXEDBUTTONS = &h8
const TBSTYLE_EX_HIDECLIPPEDBUTTONS = &h10
const TBSTYLE_EX_DOUBLEBUFFER = &h80

type _NMTBCUSTOMDRAW
 nmcd as NMCUSTOMDRAW
 hbrMonoDither as HBRUSH
 hbrLines as HBRUSH
 hpenLines as HPEN
 clrText as COLORREF
 clrMark as COLORREF
 clrTextHighlight as COLORREF
 clrBtnFace as COLORREF
 clrBtnHighlight as COLORREF
 clrHighlightHotTrack as COLORREF
 rcText as RECT
 nStringBkMode as long
 nHLStringBkMode as long
 iListGap as long
end type

type NMTBCUSTOMDRAW as _NMTBCUSTOMDRAW
type LPNMTBCUSTOMDRAW as _NMTBCUSTOMDRAW ptr
const TBCDRF_NOEDGES = &h10000
const TBCDRF_HILITEHOTTRACK = &h20000
const TBCDRF_NOOFFSET = &h40000
const TBCDRF_NOMARK = &h80000
const TBCDRF_NOETCHEDEFFECT = &h100000
const TBCDRF_BLENDICON = &h200000
const TBCDRF_NOBACKGROUND = &h400000


const TB_ENABLEBUTTON = WM_USER + 1
const TB_CHECKBUTTON = WM_USER + 2
const TB_PRESSBUTTON = WM_USER + 3
const TB_HIDEBUTTON = WM_USER + 4
const TB_INDETERMINATE = WM_USER + 5
const TB_MARKBUTTON = WM_USER + 6
const TB_ISBUTTONENABLED = WM_USER + 9
const TB_ISBUTTONCHECKED = WM_USER + 10
const TB_ISBUTTONPRESSED = WM_USER + 11
const TB_ISBUTTONHIDDEN = WM_USER + 12
const TB_ISBUTTONINDETERMINATE = WM_USER + 13
const TB_ISBUTTONHIGHLIGHTED = WM_USER + 14
const TB_SETSTATE = WM_USER + 17
const TB_GETSTATE = WM_USER + 18
const TB_ADDBITMAP = WM_USER + 19

type tagTBADDBITMAP
 hInst as HINSTANCE
 nID as UINT_PTR
end type

type TBADDBITMAP as tagTBADDBITMAP
type LPTBADDBITMAP as tagTBADDBITMAP ptr
const HINST_COMMCTRL = cast(HINSTANCE, -1)
const IDB_STD_SMALL_COLOR = 0
const IDB_STD_LARGE_COLOR = 1
const IDB_VIEW_SMALL_COLOR = 4
const IDB_VIEW_LARGE_COLOR = 5
const IDB_HIST_SMALL_COLOR = 8
const IDB_HIST_LARGE_COLOR = 9


const STD_CUT = 0
const STD_COPY = 1
const STD_PASTE = 2
const STD_UNDO = 3
const STD_REDOW = 4
const STD_DELETE = 5
const STD_FILENEW = 6
const STD_FILEOPEN = 7
const STD_FILESAVE = 8
const STD_PRINTPRE = 9
const STD_PROPERTIES = 10
const STD_HELP = 11
const STD_FIND = 12
const STD_REPLACE = 13
const STD_PRINT = 14
const VIEW_LARGEICONS = 0
const VIEW_SMALLICONS = 1
const VIEW_LIST = 2
const VIEW_DETAILS = 3
const VIEW_SORTNAME = 4
const VIEW_SORTSIZE = 5
const VIEW_SORTDATE = 6
const VIEW_SORTTYPE = 7
const VIEW_PARENTFOLDER = 8
const VIEW_NETCONNECT = 9
const VIEW_NETDISCONNECT = 10
const VIEW_NEWFOLDER = 11
const VIEW_VIEWMENU = 12
const HIST_BACK = 0
const HIST_FORWARD = 1
const HIST_FAVORITES = 2
const HIST_ADDTOFAVORITES = 3
const HIST_VIEWTREE = 4
const TB_ADDBUTTONSA = WM_USER + 20
const TB_INSERTBUTTONA = WM_USER + 21
const TB_DELETEBUTTON = WM_USER + 22
const TB_GETBUTTON = WM_USER + 23
const TB_BUTTONCOUNT = WM_USER + 24
const TB_COMMANDTOINDEX = WM_USER + 25

type tagTBSAVEPARAMSA
 hkr as HKEY
 pszSubKey as LPCSTR
 pszValueName as LPCSTR
end type

type TBSAVEPARAMSA as tagTBSAVEPARAMSA
type LPTBSAVEPARAMSA as tagTBSAVEPARAMSA ptr

type tagTBSAVEPARAMSW
 hkr as HKEY
 pszSubKey as LPCWSTR
 pszValueName as LPCWSTR
end type

type TBSAVEPARAMSW as tagTBSAVEPARAMSW
type LPTBSAVEPARAMW as tagTBSAVEPARAMSW ptr

 type TBSAVEPARAMS as TBSAVEPARAMSA
 type LPTBSAVEPARAMS as LPTBSAVEPARAMSA

const TB_SAVERESTOREA = WM_USER + 26
const TB_SAVERESTOREW = WM_USER + 76
const TB_CUSTOMIZE = WM_USER + 27
const TB_ADDSTRINGA = WM_USER + 28
const TB_ADDSTRINGW = WM_USER + 77
const TB_GETITEMRECT = WM_USER + 29
const TB_BUTTONSTRUCTSIZE = WM_USER + 30
const TB_SETBUTTONSIZE = WM_USER + 31
const TB_SETBITMAPSIZE = WM_USER + 32
const TB_AUTOSIZE = WM_USER + 33
const TB_GETTOOLTIPS = WM_USER + 35
const TB_SETTOOLTIPS = WM_USER + 36
const TB_SETPARENT = WM_USER + 37
const TB_SETROWS = WM_USER + 39
const TB_GETROWS = WM_USER + 40
const TB_SETCMDID = WM_USER + 42
const TB_CHANGEBITMAP = WM_USER + 43
const TB_GETBITMAP = WM_USER + 44
const TB_GETBUTTONTEXTA = WM_USER + 45
const TB_GETBUTTONTEXTW = WM_USER + 75
const TB_REPLACEBITMAP = WM_USER + 46
const TB_SETINDENT = WM_USER + 47
const TB_SETIMAGELIST = WM_USER + 48
const TB_GETIMAGELIST = WM_USER + 49
const TB_LOADIMAGES = WM_USER + 50
const TB_GETRECT = WM_USER + 51
const TB_SETHOTIMAGELIST = WM_USER + 52
const TB_GETHOTIMAGELIST = WM_USER + 53
const TB_SETDISABLEDIMAGELIST = WM_USER + 54
const TB_GETDISABLEDIMAGELIST = WM_USER + 55
const TB_SETSTYLE = WM_USER + 56
const TB_GETSTYLE = WM_USER + 57
const TB_GETBUTTONSIZE = WM_USER + 58
const TB_SETBUTTONWIDTH = WM_USER + 59
const TB_SETMAXTEXTROWS = WM_USER + 60
const TB_GETTEXTROWS = WM_USER + 61

 const TB_GETBUTTONTEXT = TB_GETBUTTONTEXTA
 const TB_SAVERESTORE = TB_SAVERESTOREA
 const TB_ADDSTRING = TB_ADDSTRINGA

const TB_GETOBJECT = WM_USER + 62
const TB_GETHOTITEM = WM_USER + 71
const TB_SETHOTITEM = WM_USER + 72
const TB_SETANCHORHIGHLIGHT = WM_USER + 73
const TB_GETANCHORHIGHLIGHT = WM_USER + 74
const TB_MAPACCELERATORA = WM_USER + 78

type TBINSERTMARK
 iButton as long
 dwFlags as DWORD
end type

type LPTBINSERTMARK as TBINSERTMARK ptr
const TBIMHT_AFTER = &h1
const TBIMHT_BACKGROUND = &h2
const TB_GETINSERTMARK = WM_USER + 79
const TB_SETINSERTMARK = WM_USER + 80
const TB_INSERTMARKHITTEST = WM_USER + 81
const TB_MOVEBUTTON = WM_USER + 82
const TB_GETMAXSIZE = WM_USER + 83
const TB_SETEXTENDEDSTYLE = WM_USER + 84
const TB_GETEXTENDEDSTYLE = WM_USER + 85
const TB_GETPADDING = WM_USER + 86
const TB_SETPADDING = WM_USER + 87
const TB_SETINSERTMARKCOLOR = WM_USER + 88
const TB_GETINSERTMARKCOLOR = WM_USER + 89
const TB_SETCOLORSCHEME = CCM_SETCOLORSCHEME
const TB_GETCOLORSCHEME = CCM_GETCOLORSCHEME
const TB_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
const TB_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT
const TB_MAPACCELERATORW = WM_USER + 90

 const TB_MAPACCELERATOR = TB_MAPACCELERATORA

type TBREPLACEBITMAP
 hInstOld as HINSTANCE
 nIDOld as UINT_PTR
 hInstNew as HINSTANCE
 nIDNew as UINT_PTR
 nButtons as long
end type

type LPTBREPLACEBITMAP as TBREPLACEBITMAP ptr
const TBBF_LARGE = &h1
const TB_GETBITMAPFLAGS = WM_USER + 41
const TBIF_IMAGE = &h1
const TBIF_TEXT = &h2
const TBIF_STATE = &h4
const TBIF_STYLE = &h8
const TBIF_LPARAM = &h10
const TBIF_COMMAND = &h20
const TBIF_SIZE = &h40
const TBIF_BYINDEX = &h80000000

type TBBUTTONINFOA
 cbSize as UINT
 dwMask as DWORD
 idCommand as long
 iImage as long
 fsState as UBYTE
 fsStyle as UBYTE
 cx as WORD
 lParam as DWORD_PTR
 pszText as LPSTR
 cchText as long
end type

type LPTBBUTTONINFOA as TBBUTTONINFOA ptr

type TBBUTTONINFOW
 cbSize as UINT
 dwMask as DWORD
 idCommand as long
 iImage as long
 fsState as UBYTE
 fsStyle as UBYTE
 cx as WORD
 lParam as DWORD_PTR
 pszText as LPWSTR
 cchText as long
end type

type LPTBBUTTONINFOW as TBBUTTONINFOW ptr

 type TBBUTTONINFO as TBBUTTONINFOA
 type LPTBBUTTONINFO as LPTBBUTTONINFOA

const TB_GETBUTTONINFOW = WM_USER + 63
const TB_SETBUTTONINFOW = WM_USER + 64
const TB_GETBUTTONINFOA = WM_USER + 65
const TB_SETBUTTONINFOA = WM_USER + 66

 const TB_GETBUTTONINFO = TB_GETBUTTONINFOA
 const TB_SETBUTTONINFO = TB_SETBUTTONINFOA

const TB_INSERTBUTTONW = WM_USER + 67
const TB_ADDBUTTONSW = WM_USER + 68
const TB_HITTEST = WM_USER + 69

 const TB_INSERTBUTTON = TB_INSERTBUTTONA
 const TB_ADDBUTTONS = TB_ADDBUTTONSA

const TB_SETDRAWTEXTFLAGS = WM_USER + 70
const TB_GETSTRINGW = WM_USER + 91
const TB_GETSTRINGA = WM_USER + 92

 const TB_GETSTRING = TB_GETSTRINGA

const TB_SETBOUNDINGSIZE = WM_USER + 93
const TB_SETHOTITEM2 = WM_USER + 94
const TB_HASACCELERATOR = WM_USER + 95
const TB_SETLISTGAP = WM_USER + 96
const TB_GETIMAGELISTCOUNT = WM_USER + 98
const TB_GETIDEALSIZE = WM_USER + 99
const TBMF_PAD = &h1
const TBMF_BARPAD = &h2
const TBMF_BUTTONSPACING = &h4

type TBMETRICS
 cbSize as UINT
 dwMask as DWORD
 cxPad as long
 cyPad as long
 cxBarPad as long
 cyBarPad as long
 cxButtonSpacing as long
 cyButtonSpacing as long
end type

type LPTBMETRICS as TBMETRICS ptr
const TB_GETMETRICS = WM_USER + 101
const TB_SETMETRICS = WM_USER + 102
const TB_GETITEMDROPDOWNRECT = WM_USER + 103
const TB_SETPRESSEDIMAGELIST = WM_USER + 104
const TB_GETPRESSEDIMAGELIST = WM_USER + 105
const TB_SETWINDOWTHEME = CCM_SETWINDOWTHEME
const TBN_GETBUTTONINFOA = culng(TBN_FIRST - 0)
const TBN_BEGINDRAG = culng(TBN_FIRST - 1)
const TBN_ENDDRAG = culng(TBN_FIRST - 2)
const TBN_BEGINADJUST = culng(TBN_FIRST - 3)
const TBN_ENDADJUST = culng(TBN_FIRST - 4)
const TBN_RESET = culng(TBN_FIRST - 5)
const TBN_QUERYINSERT = culng(TBN_FIRST - 6)
const TBN_QUERYDELETE = culng(TBN_FIRST - 7)
const TBN_TOOLBARCHANGE = culng(TBN_FIRST - 8)
const TBN_CUSTHELP = culng(TBN_FIRST - 9)
const TBN_DROPDOWN = culng(TBN_FIRST - 10)
const TBN_GETOBJECT = culng(TBN_FIRST - 12)

type tagNMTBHOTITEM
 hdr as NMHDR
 idOld as long
 idNew as long
 dwFlags as DWORD
end type

type NMTBHOTITEM as tagNMTBHOTITEM
type LPNMTBHOTITEM as tagNMTBHOTITEM ptr
const HICF_OTHER = &h00
const HICF_MOUSE = &h1
const HICF_ARROWKEYS = &h2
const HICF_ACCELERATOR = &h4
const HICF_DUPACCEL = &h8
const HICF_ENTERING = &h10
const HICF_LEAVING = &h20
const HICF_RESELECT = &h40
const HICF_LMOUSE = &h80
const HICF_TOGGLEDROPDOWN = &h100
const TBN_HOTITEMCHANGE = culng(TBN_FIRST - 13)
const TBN_DRAGOUT = culng(TBN_FIRST - 14)
const TBN_DELETINGBUTTON = culng(TBN_FIRST - 15)
const TBN_GETDISPINFOA = culng(TBN_FIRST - 16)
const TBN_GETDISPINFOW = culng(TBN_FIRST - 17)
const TBN_GETINFOTIPA = culng(TBN_FIRST - 18)
const TBN_GETINFOTIPW = culng(TBN_FIRST - 19)
const TBN_GETBUTTONINFOW = culng(TBN_FIRST - 20)
const TBN_RESTORE = culng(TBN_FIRST - 21)
const TBN_SAVE = culng(TBN_FIRST - 22)
const TBN_INITCUSTOMIZE = culng(TBN_FIRST - 23)
const TBNRF_HIDEHELP = &h1
const TBNRF_ENDCUSTOMIZE = &h2
const TBN_WRAPHOTITEM = culng(TBN_FIRST - 24)
const TBN_DUPACCELERATOR = culng(TBN_FIRST - 25)
const TBN_WRAPACCELERATOR = culng(TBN_FIRST - 26)
const TBN_DRAGOVER = culng(TBN_FIRST - 27)
const TBN_MAPACCELERATOR = culng(TBN_FIRST - 28)
const TBNRF_HIDEHELP = &h1
const TBNRF_ENDCUSTOMIZE = &h2

type tagNMTBSAVE
 hdr as NMHDR
 pData as DWORD ptr
 pCurrent as DWORD ptr
 cbData as UINT
 iItem as long
 cButtons as long
 tbButton as TBBUTTON
end type

type NMTBSAVE as tagNMTBSAVE
type LPNMTBSAVE as tagNMTBSAVE ptr

type tagNMTBRESTORE
 hdr as NMHDR
 pData as DWORD ptr
 pCurrent as DWORD ptr
 cbData as UINT
 iItem as long
 cButtons as long
 cbBytesPerRecord as long
 tbButton as TBBUTTON
end type

type NMTBRESTORE as tagNMTBRESTORE
type LPNMTBRESTORE as tagNMTBRESTORE ptr

type tagNMTBGETINFOTIPA
 hdr as NMHDR
 pszText as LPSTR
 cchTextMax as long
 iItem as long
 lParam as LPARAM
end type

type NMTBGETINFOTIPA as tagNMTBGETINFOTIPA
type LPNMTBGETINFOTIPA as tagNMTBGETINFOTIPA ptr

type tagNMTBGETINFOTIPW
 hdr as NMHDR
 pszText as LPWSTR
 cchTextMax as long
 iItem as long
 lParam as LPARAM
end type

type NMTBGETINFOTIPW as tagNMTBGETINFOTIPW
type LPNMTBGETINFOTIPW as tagNMTBGETINFOTIPW ptr

 const TBN_GETINFOTIP = TBN_GETINFOTIPA
 type NMTBGETINFOTIP as NMTBGETINFOTIPA
 type LPNMTBGETINFOTIP as LPNMTBGETINFOTIPA

const TBNF_IMAGE = &h1
const TBNF_TEXT = &h2
const TBNF_DI_SETITEM = &h10000000

type NMTBDISPINFOA
 hdr as NMHDR
 dwMask as DWORD
 idCommand as long
 lParam as DWORD_PTR
 iImage as long
 pszText as LPSTR
 cchText as long
end type

type LPNMTBDISPINFOA as NMTBDISPINFOA ptr

type NMTBDISPINFOW
 hdr as NMHDR
 dwMask as DWORD
 idCommand as long
 lParam as DWORD_PTR
 iImage as long
 pszText as LPWSTR
 cchText as long
end type

type LPNMTBDISPINFOW as NMTBDISPINFOW ptr

 const TBN_GETDISPINFO = TBN_GETDISPINFOA
 type NMTBDISPINFO as NMTBDISPINFOA
 type LPNMTBDISPINFO as LPNMTBDISPINFOA

const TBDDRET_DEFAULT = 0
const TBDDRET_NODEFAULT = 1
const TBDDRET_TREATPRESSED = 2

 const TBN_GETBUTTONINFO = TBN_GETBUTTONINFOA

type TBNOTIFYA as NMTOOLBARA
type TBNOTIFYW as NMTOOLBARW
type LPTBNOTIFYA as LPNMTOOLBARA
type LPTBNOTIFYW as LPNMTOOLBARW

type tagNMTOOLBARA
 hdr as NMHDR
 iItem as long
 tbButton as TBBUTTON
 cchText as long
 pszText as LPSTR
 rcButton as RECT
end type

type NMTOOLBARA as tagNMTOOLBARA
type LPNMTOOLBARA as tagNMTOOLBARA ptr

type tagNMTOOLBARW
 hdr as NMHDR
 iItem as long
 tbButton as TBBUTTON
 cchText as long
 pszText as LPWSTR
 rcButton as RECT
end type

type NMTOOLBARW as tagNMTOOLBARW
type LPNMTOOLBARW as tagNMTOOLBARW ptr

 type NMTOOLBAR as NMTOOLBARA

type TBNOTIFY as NMTOOLBAR

 type LPNMTOOLBAR as LPNMTOOLBARA

type LPTBNOTIFY as LPNMTOOLBAR


const RBIM_IMAGELIST = &h1
const RBS_TOOLTIPS = &h100
const RBS_VARHEIGHT = &h200
const RBS_BANDBORDERS = &h400
const RBS_FIXEDORDER = &h800
const RBS_REGISTERDROP = &h1000
const RBS_AUTOSIZE = &h2000
const RBS_VERTICALGRIPPER = &h4000
const RBS_DBLCLKTOGGLE = &h8000

type tagREBARINFO
 cbSize as UINT
 fMask as UINT
 himl as HIMAGELIST
end type

type REBARINFO as tagREBARINFO
type LPREBARINFO as tagREBARINFO ptr
const RBBS_BREAK = &h1
const RBBS_FIXEDSIZE = &h2
const RBBS_CHILDEDGE = &h4
const RBBS_HIDDEN = &h8
const RBBS_NOVERT = &h10
const RBBS_FIXEDBMP = &h20
const RBBS_VARIABLEHEIGHT = &h40
const RBBS_GRIPPERALWAYS = &h80
const RBBS_NOGRIPPER = &h100
const RBBS_USECHEVRON = &h200
const RBBS_HIDETITLE = &h400
const RBBS_TOPALIGN = &h800
const RBBIM_STYLE = &h1
const RBBIM_COLORS = &h2
const RBBIM_TEXT = &h4
const RBBIM_IMAGE = &h8
const RBBIM_CHILD = &h10
const RBBIM_CHILDSIZE = &h20
const RBBIM_SIZE = &h40
const RBBIM_BACKGROUND = &h80
const RBBIM_ID = &h100
const RBBIM_IDEALSIZE = &h200
const RBBIM_LPARAM = &h400
const RBBIM_HEADERSIZE = &h800


type tagREBARBANDINFOA
 cbSize as UINT
 fMask as UINT
 fStyle as UINT
 clrFore as COLORREF
 clrBack as COLORREF
 lpText as LPSTR
 cch as UINT
 iImage as long
 hwndChild as HWND
 cxMinChild as UINT
 cyMinChild as UINT
 cx as UINT
 hbmBack as HBITMAP
 wID as UINT
 cyChild as UINT
 cyMaxChild as UINT
 cyIntegral as UINT
 cxIdeal as UINT
 lParam as LPARAM
 cxHeader as UINT

end type

type REBARBANDINFOA as tagREBARBANDINFOA
type LPREBARBANDINFOA as tagREBARBANDINFOA ptr
type LPCREBARBANDINFOA as const REBARBANDINFOA ptr


type tagREBARBANDINFOW
 cbSize as UINT
 fMask as UINT
 fStyle as UINT
 clrFore as COLORREF
 clrBack as COLORREF
 lpText as LPWSTR
 cch as UINT
 iImage as long
 hwndChild as HWND
 cxMinChild as UINT
 cyMinChild as UINT
 cx as UINT
 hbmBack as HBITMAP
 wID as UINT
 cyChild as UINT
 cyMaxChild as UINT
 cyIntegral as UINT
 cxIdeal as UINT
 lParam as LPARAM
 cxHeader as UINT

end type

type REBARBANDINFOW as tagREBARBANDINFOW
type LPREBARBANDINFOW as tagREBARBANDINFOW ptr
type LPCREBARBANDINFOW as const REBARBANDINFOW ptr

 type REBARBANDINFO as REBARBANDINFOA
 type LPREBARBANDINFO as LPREBARBANDINFOA
 type LPCREBARBANDINFO as LPCREBARBANDINFOA

const RB_INSERTBANDA = WM_USER + 1
const RB_DELETEBAND = WM_USER + 2
const RB_GETBARINFO = WM_USER + 3
const RB_SETBARINFO = WM_USER + 4
const RB_SETBANDINFOA = WM_USER + 6
const RB_SETPARENT = WM_USER + 7
const RB_HITTEST = WM_USER + 8
const RB_GETRECT = WM_USER + 9
const RB_INSERTBANDW = WM_USER + 10
const RB_SETBANDINFOW = WM_USER + 11
const RB_GETBANDCOUNT = WM_USER + 12
const RB_GETROWCOUNT = WM_USER + 13
const RB_GETROWHEIGHT = WM_USER + 14
const RB_IDTOINDEX = WM_USER + 16
const RB_GETTOOLTIPS = WM_USER + 17
const RB_SETTOOLTIPS = WM_USER + 18
const RB_SETBKCOLOR = WM_USER + 19
const RB_GETBKCOLOR = WM_USER + 20
const RB_SETTEXTCOLOR = WM_USER + 21
const RB_GETTEXTCOLOR = WM_USER + 22
const RBSTR_CHANGERECT = &h1
const RB_SIZETORECT = WM_USER + 23
const RB_SETCOLORSCHEME = CCM_SETCOLORSCHEME
const RB_GETCOLORSCHEME = CCM_GETCOLORSCHEME

 const RB_INSERTBAND = RB_INSERTBANDA
 const RB_SETBANDINFO = RB_SETBANDINFOA

const RB_BEGINDRAG = WM_USER + 24
const RB_ENDDRAG = WM_USER + 25
const RB_DRAGMOVE = WM_USER + 26
const RB_GETBARHEIGHT = WM_USER + 27
const RB_GETBANDINFOW = WM_USER + 28
const RB_GETBANDINFOA = WM_USER + 29

 const RB_GETBANDINFO = RB_GETBANDINFOA

const RB_MINIMIZEBAND = WM_USER + 30
const RB_MAXIMIZEBAND = WM_USER + 31
const RB_GETDROPTARGET = CCM_GETDROPTARGET
const RB_GETBANDBORDERS = WM_USER + 34
const RB_SHOWBAND = WM_USER + 35
const RB_SETPALETTE = WM_USER + 37
const RB_GETPALETTE = WM_USER + 38
const RB_MOVEBAND = WM_USER + 39
const RB_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
const RB_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT
const RB_GETBANDMARGINS = WM_USER + 40
const RB_SETWINDOWTHEME = CCM_SETWINDOWTHEME

 const RB_SETEXTENDEDSTYLE = WM_USER + 41
 const RB_GETEXTENDEDSTYLE = WM_USER + 42

const RB_PUSHCHEVRON = WM_USER + 43


const RBN_HEIGHTCHANGE = culng(RBN_FIRST - 0)
const RBN_GETOBJECT = culng(RBN_FIRST - 1)
const RBN_LAYOUTCHANGED = culng(RBN_FIRST - 2)
const RBN_AUTOSIZE = culng(RBN_FIRST - 3)
const RBN_BEGINDRAG = culng(RBN_FIRST - 4)
const RBN_ENDDRAG = culng(RBN_FIRST - 5)
const RBN_DELETINGBAND = culng(RBN_FIRST - 6)
const RBN_DELETEDBAND = culng(RBN_FIRST - 7)
const RBN_CHILDSIZE = culng(RBN_FIRST - 8)
const RBN_CHEVRONPUSHED = culng(RBN_FIRST - 10)

 const RBN_SPLITTERDRAG = culng(RBN_FIRST - 11)

const RBN_MINMAX = culng(RBN_FIRST - 21)
const RBN_AUTOBREAK = culng(RBN_FIRST - 22)

type tagNMREBARCHILDSIZE
 hdr as NMHDR
 uBand as UINT
 wID as UINT
 rcChild as RECT
 rcBand as RECT
end type

type NMREBARCHILDSIZE as tagNMREBARCHILDSIZE
type LPNMREBARCHILDSIZE as tagNMREBARCHILDSIZE ptr

type tagNMREBAR
 hdr as NMHDR
 dwMask as DWORD
 uBand as UINT
 fStyle as UINT
 wID as UINT
 lParam as LPARAM
end type

type NMREBAR as tagNMREBAR
type LPNMREBAR as tagNMREBAR ptr
const RBNM_ID = &h1
const RBNM_STYLE = &h2
const RBNM_LPARAM = &h4

type tagNMRBAUTOSIZE
 hdr as NMHDR
 fChanged as WINBOOL
 rcTarget as RECT
 rcActual as RECT
end type

type NMRBAUTOSIZE as tagNMRBAUTOSIZE
type LPNMRBAUTOSIZE as tagNMRBAUTOSIZE ptr

type tagNMREBARCHEVRON
 hdr as NMHDR
 uBand as UINT
 wID as UINT
 lParam as LPARAM
 rc as RECT
 lParamNM as LPARAM
end type

type NMREBARCHEVRON as tagNMREBARCHEVRON
type LPNMREBARCHEVRON as tagNMREBARCHEVRON ptr

 type tagNMREBARSPLITTER
 hdr as NMHDR
 rcSizing as RECT
 end type

 type NMREBARSPLITTER as tagNMREBARSPLITTER
 type LPNMREBARSPLITTER as tagNMREBARSPLITTER ptr

const RBAB_AUTOSIZE = &h1
const RBAB_ADDBAND = &h2

type tagNMREBARAUTOBREAK
 hdr as NMHDR
 uBand as UINT
 wID as UINT
 lParam as LPARAM
 uMsg as UINT
 fStyleCurrent as UINT
 fAutoBreak as WINBOOL
end type

type NMREBARAUTOBREAK as tagNMREBARAUTOBREAK
type LPNMREBARAUTOBREAK as tagNMREBARAUTOBREAK ptr
const RBHT_NOWHERE = &h1
const RBHT_CAPTION = &h2
const RBHT_CLIENT = &h3
const RBHT_GRABBER = &h4
const RBHT_CHEVRON = &h8

 const RBHT_SPLITTER = &h10

type _RB_HITTESTINFO
 pt as POINT
 flags as UINT
 iBand as long
end type

type RBHITTESTINFO as _RB_HITTESTINFO
type LPRBHITTESTINFO as _RB_HITTESTINFO ptr


type LPTOOLINFOA as LPTTTOOLINFOA
type LPTOOLINFOW as LPTTTOOLINFOW
type TOOLINFOA as TTTOOLINFOA
type TOOLINFOW as TTTOOLINFOW


type tagTOOLINFOA
 cbSize as UINT
 uFlags as UINT
 hwnd as HWND
 uId as UINT_PTR
 rect as RECT
 hinst as HINSTANCE
 lpszText as LPSTR
 lParam as LPARAM
 lpReserved as any ptr
end type

type TTTOOLINFOA as tagTOOLINFOA
type PTOOLINFOA as tagTOOLINFOA ptr
type LPTTTOOLINFOA as tagTOOLINFOA ptr

type tagTOOLINFOW
 cbSize as UINT
 uFlags as UINT
 hwnd as HWND
 uId as UINT_PTR
 rect as RECT
 hinst as HINSTANCE
 lpszText as LPWSTR
 lParam as LPARAM
 lpReserved as any ptr
end type

type TTTOOLINFOW as tagTOOLINFOW
type PTOOLINFOW as tagTOOLINFOW ptr
type LPTTTOOLINFOW as tagTOOLINFOW ptr

 type TTTOOLINFO as TTTOOLINFOA

type TOOLINFO as TTTOOLINFO

 type PTOOLINFO as PTOOLINFOA
 type LPTTTOOLINFO as LPTTTOOLINFOA

type LPTOOLINFO as LPTTTOOLINFO


const TTS_ALWAYSTIP = &h1
const TTS_NOPREFIX = &h2
const TTS_NOANIMATE = &h10
const TTS_NOFADE = &h20
const TTS_BALLOON = &h40
const TTS_CLOSE = &h80


const TTF_IDISHWND = &h1
const TTF_CENTERTIP = &h2
const TTF_RTLREADING = &h4
const TTF_SUBCLASS = &h10
const TTF_TRACK = &h20
const TTF_ABSOLUTE = &h80
const TTF_TRANSPARENT = &h100
const TTF_PARSELINKS = &h1000
const TTF_DI_SETITEM = &h8000
const TTDT_AUTOMATIC = 0
const TTDT_RESHOW = 1
const TTDT_AUTOPOP = 2
const TTDT_INITIAL = 3
const TTI_NONE = 0
const TTI_INFO = 1
const TTI_WARNING = 2
const TTI_ERROR = 3


const TTM_ACTIVATE = WM_USER + 1
const TTM_SETDELAYTIME = WM_USER + 3
const TTM_ADDTOOLA = WM_USER + 4
const TTM_ADDTOOLW = WM_USER + 50
const TTM_DELTOOLA = WM_USER + 5
const TTM_DELTOOLW = WM_USER + 51
const TTM_NEWTOOLRECTA = WM_USER + 6
const TTM_NEWTOOLRECTW = WM_USER + 52
const TTM_RELAYEVENT = WM_USER + 7
const TTM_GETTOOLINFOA = WM_USER + 8
const TTM_GETTOOLINFOW = WM_USER + 53
const TTM_SETTOOLINFOA = WM_USER + 9
const TTM_SETTOOLINFOW = WM_USER + 54
const TTM_HITTESTA = WM_USER + 10
const TTM_HITTESTW = WM_USER + 55
const TTM_GETTEXTA = WM_USER + 11
const TTM_GETTEXTW = WM_USER + 56
const TTM_UPDATETIPTEXTA = WM_USER + 12
const TTM_UPDATETIPTEXTW = WM_USER + 57
const TTM_GETTOOLCOUNT = WM_USER + 13
const TTM_ENUMTOOLSA = WM_USER + 14
const TTM_ENUMTOOLSW = WM_USER + 58
const TTM_GETCURRENTTOOLA = WM_USER + 15
const TTM_GETCURRENTTOOLW = WM_USER + 59
const TTM_WINDOWFROMPOINT = WM_USER + 16
const TTM_TRACKACTIVATE = WM_USER + 17
const TTM_TRACKPOSITION = WM_USER + 18
const TTM_SETTIPBKCOLOR = WM_USER + 19
const TTM_SETTIPTEXTCOLOR = WM_USER + 20
const TTM_GETDELAYTIME = WM_USER + 21
const TTM_GETTIPBKCOLOR = WM_USER + 22
const TTM_GETTIPTEXTCOLOR = WM_USER + 23
const TTM_SETMAXTIPWIDTH = WM_USER + 24
const TTM_GETMAXTIPWIDTH = WM_USER + 25
const TTM_SETMARGIN = WM_USER + 26
const TTM_GETMARGIN = WM_USER + 27
const TTM_POP = WM_USER + 28
const TTM_UPDATE = WM_USER + 29
const TTM_GETBUBBLESIZE = WM_USER + 30
const TTM_ADJUSTRECT = WM_USER + 31
const TTM_SETTITLEA = WM_USER + 32
const TTM_SETTITLEW = WM_USER + 33
const TTM_POPUP = WM_USER + 34
const TTM_GETTITLE = WM_USER + 35

type _TTGETTITLE
 dwSize as DWORD
 uTitleBitmap as UINT
 cch as UINT
 pszTitle as wstring ptr
end type

type TTGETTITLE as _TTGETTITLE
type PTTGETTITLE as _TTGETTITLE ptr

 const TTM_ADDTOOL = TTM_ADDTOOLA
 const TTM_DELTOOL = TTM_DELTOOLA
 const TTM_NEWTOOLRECT = TTM_NEWTOOLRECTA
 const TTM_GETTOOLINFO = TTM_GETTOOLINFOA
 const TTM_SETTOOLINFO = TTM_SETTOOLINFOA
 const TTM_HITTEST = TTM_HITTESTA
 const TTM_GETTEXT = TTM_GETTEXTA
 const TTM_UPDATETIPTEXT = TTM_UPDATETIPTEXTA
 const TTM_ENUMTOOLS = TTM_ENUMTOOLSA
 const TTM_GETCURRENTTOOL = TTM_GETCURRENTTOOLA
 const TTM_SETTITLE = TTM_SETTITLEA

const TTM_SETWINDOWTHEME = CCM_SETWINDOWTHEME
type LPHITTESTINFOW as LPTTHITTESTINFOW
type LPHITTESTINFOA as LPTTHITTESTINFOA

type _TT_HITTESTINFOA
 hwnd as HWND
 pt as POINT
 ti as TTTOOLINFOA
end type

type TTHITTESTINFOA as _TT_HITTESTINFOA
type LPTTHITTESTINFOA as _TT_HITTESTINFOA ptr

type _TT_HITTESTINFOW
 hwnd as HWND
 pt as POINT
 ti as TTTOOLINFOW
end type

type TTHITTESTINFOW as _TT_HITTESTINFOW
type LPTTHITTESTINFOW as _TT_HITTESTINFOW ptr

 type TTHITTESTINFO as TTHITTESTINFOA
 type LPTTHITTESTINFO as LPTTHITTESTINFOA

type LPHITTESTINFO as LPTTHITTESTINFO
const TTN_GETDISPINFOA = culng(TTN_FIRST - 0)
const TTN_GETDISPINFOW = culng(TTN_FIRST - 10)
const TTN_SHOW = culng(TTN_FIRST - 1)
const TTN_POP = culng(TTN_FIRST - 2)
const TTN_LINKCLICK = culng(TTN_FIRST - 3)

 const TTN_GETDISPINFO = TTN_GETDISPINFOA

const TTN_NEEDTEXT = TTN_GETDISPINFO
const TTN_NEEDTEXTA = TTN_GETDISPINFOA
const TTN_NEEDTEXTW = TTN_GETDISPINFOW

type TOOLTIPTEXTW as NMTTDISPINFOW
type TOOLTIPTEXTA as NMTTDISPINFOA
type LPTOOLTIPTEXTA as LPNMTTDISPINFOA
type LPTOOLTIPTEXTW as LPNMTTDISPINFOW

type tagNMTTDISPINFOA
 hdr as NMHDR
 lpszText as LPSTR
 szText as zstring * 80
 hinst as HINSTANCE
 uFlags as UINT
 lParam as LPARAM
end type

type NMTTDISPINFOA as tagNMTTDISPINFOA
type LPNMTTDISPINFOA as tagNMTTDISPINFOA ptr

type tagNMTTDISPINFOW
 hdr as NMHDR
 lpszText as LPWSTR
 szText as wstring * 80
 hinst as HINSTANCE
 uFlags as UINT
 lParam as LPARAM
end type

type NMTTDISPINFOW as tagNMTTDISPINFOW
type LPNMTTDISPINFOW as tagNMTTDISPINFOW ptr

 type NMTTDISPINFO as NMTTDISPINFOA

type TOOLTIPTEXT as NMTTDISPINFO

 type LPNMTTDISPINFO as LPNMTTDISPINFOA

type LPTOOLTIPTEXT as LPNMTTDISPINFO


const SBARS_SIZEGRIP = &h100
const SBARS_TOOLTIPS = &h800
const SBT_TOOLTIPS = &h800

declare sub DrawStatusTextA(byval hDC as HDC, byval lprc as LPCRECT, byval pszText as LPCSTR, byval uFlags as UINT)
declare sub DrawStatusTextW(byval hDC as HDC, byval lprc as LPCRECT, byval pszText as LPCWSTR, byval uFlags as UINT)
declare function CreateStatusWindowA(byval style as LONG, byval lpszText as LPCSTR, byval hwndParent as HWND, byval wID as UINT) as HWND
declare function CreateStatusWindowW(byval style as LONG, byval lpszText as LPCWSTR, byval hwndParent as HWND, byval wID as UINT) as HWND

 declare function CreateStatusWindow alias "CreateStatusWindowA"(byval style as LONG, byval lpszText as LPCSTR, byval hwndParent as HWND, byval wID as UINT) as HWND
 declare sub DrawStatusText alias "DrawStatusTextA"(byval hDC as HDC, byval lprc as LPCRECT, byval pszText as LPCSTR, byval uFlags as UINT)



const SB_SETTEXTA = WM_USER + 1
const SB_SETTEXTW = WM_USER + 11
const SB_GETTEXTA = WM_USER + 2
const SB_GETTEXTW = WM_USER + 13
const SB_GETTEXTLENGTHA = WM_USER + 3
const SB_GETTEXTLENGTHW = WM_USER + 12

 const SB_GETTEXT = SB_GETTEXTA
 const SB_SETTEXT = SB_SETTEXTA
 const SB_GETTEXTLENGTH = SB_GETTEXTLENGTHA

const SB_SETPARTS = WM_USER + 4
const SB_GETPARTS = WM_USER + 6
const SB_GETBORDERS = WM_USER + 7
const SB_SETMINHEIGHT = WM_USER + 8
const SB_SIMPLE = WM_USER + 9
const SB_GETRECT = WM_USER + 10
const SB_ISSIMPLE = WM_USER + 14
const SB_SETICON = WM_USER + 15
const SB_SETTIPTEXTA = WM_USER + 16

 const SB_SETTIPTEXT = SB_SETTIPTEXTA

const SB_SETTIPTEXTW = WM_USER + 17


const SB_GETTIPTEXTA = WM_USER + 18

 const SB_GETTIPTEXT = SB_GETTIPTEXTA

const SB_GETTIPTEXTW = WM_USER + 19


const SB_GETICON = WM_USER + 20
const SB_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
const SB_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT
const SBT_OWNERDRAW = &h1000
const SBT_NOBORDERS = &h100
const SBT_POPOUT = &h200
const SBT_RTLREADING = &h400
const SBT_NOTABPARSING = &h800
const SB_SETBKCOLOR = CCM_SETBKCOLOR
const SBN_SIMPLEMODECHANGE = culng(SBN_FIRST - 0)
const SB_SIMPLEID = &hff

declare sub MenuHelp(byval uMsg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval hMainMenu as HMENU, byval hInst as HINSTANCE, byval hwndStatus as HWND, byval lpwIDs as UINT ptr)
declare function ShowHideMenuCtl(byval hWnd as HWND, byval uFlags as UINT_PTR, byval lpInfo as LPINT) as WINBOOL
declare sub GetEffectiveClientRect(byval hWnd as HWND, byval lprc as LPRECT, byval lpInfo as const INT_ ptr)

const MINSYSCOMMAND = SC_SIZE


const TBS_AUTOTICKS = &h1
const TBS_VERT = &h2
const TBS_HORZ = &h00
const TBS_TOP = &h4
const TBS_BOTTOM = &h00
const TBS_LEFT = &h4
const TBS_RIGHT = &h00
const TBS_BOTH = &h8
const TBS_NOTICKS = &h10
const TBS_ENABLESELRANGE = &h20
const TBS_FIXEDLENGTH = &h40
const TBS_NOTHUMB = &h80
const TBS_TOOLTIPS = &h100
const TBS_REVERSED = &h200
const TBS_DOWNISLEFT = &h400

 const TBS_NOTIFYBEFOREMOVE = &h800


const TBM_GETPOS = WM_USER
const TBM_GETRANGEMIN = WM_USER + 1
const TBM_GETRANGEMAX = WM_USER + 2
const TBM_GETTIC = WM_USER + 3
const TBM_SETTIC = WM_USER + 4
const TBM_SETPOS = WM_USER + 5
const TBM_SETRANGE = WM_USER + 6
const TBM_SETRANGEMIN = WM_USER + 7
const TBM_SETRANGEMAX = WM_USER + 8
const TBM_CLEARTICS = WM_USER + 9
const TBM_SETSEL = WM_USER + 10
const TBM_SETSELSTART = WM_USER + 11
const TBM_SETSELEND = WM_USER + 12
const TBM_GETPTICS = WM_USER + 14
const TBM_GETTICPOS = WM_USER + 15
const TBM_GETNUMTICS = WM_USER + 16
const TBM_GETSELSTART = WM_USER + 17
const TBM_GETSELEND = WM_USER + 18
const TBM_CLEARSEL = WM_USER + 19
const TBM_SETTICFREQ = WM_USER + 20
const TBM_SETPAGESIZE = WM_USER + 21
const TBM_GETPAGESIZE = WM_USER + 22
const TBM_SETLINESIZE = WM_USER + 23
const TBM_GETLINESIZE = WM_USER + 24
const TBM_GETTHUMBRECT = WM_USER + 25
const TBM_GETCHANNELRECT = WM_USER + 26
const TBM_SETTHUMBLENGTH = WM_USER + 27
const TBM_GETTHUMBLENGTH = WM_USER + 28
const TBM_SETTOOLTIPS = WM_USER + 29
const TBM_GETTOOLTIPS = WM_USER + 30
const TBM_SETTIPSIDE = WM_USER + 31
const TBTS_TOP = 0
const TBTS_LEFT = 1
const TBTS_BOTTOM = 2
const TBTS_RIGHT = 3
const TBM_SETBUDDY = WM_USER + 32
const TBM_GETBUDDY = WM_USER + 33
const TBM_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
const TBM_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT
const TB_LINEUP = 0
const TB_LINEDOWN = 1
const TB_PAGEUP = 2
const TB_PAGEDOWN = 3
const TB_THUMBPOSITION = 4
const TB_THUMBTRACK = 5
const TB_TOP = 6
const TB_BOTTOM = 7
const TB_ENDTRACK = 8
const TBCD_TICS = &h1
const TBCD_THUMB = &h2
const TBCD_CHANNEL = &h3


type tagDRAGLISTINFO
 uNotification as UINT
 hWnd as HWND
 ptCursor as POINT
end type

type DRAGLISTINFO as tagDRAGLISTINFO
type LPDRAGLISTINFO as tagDRAGLISTINFO ptr
const DL_BEGINDRAG = WM_USER + 133
const DL_DRAGGING = WM_USER + 134
const DL_DROPPED = WM_USER + 135
const DL_CANCELDRAG = WM_USER + 136
const DL_CURSORSET = 0
const DL_STOPCURSOR = 1
const DL_COPYCURSOR = 2
const DL_MOVECURSOR = 3

declare function MakeDragList(byval hLB as HWND) as WINBOOL
declare sub DrawInsert(byval handParent as HWND, byval hLB as HWND, byval nItem as long)
declare function LBItemFromPt(byval hLB as HWND, byval pt as POINT, byval bAutoScroll as WINBOOL) as long


type _UDACCEL
 nSec as UINT
 nInc as UINT
end type

type UDACCEL as _UDACCEL
type LPUDACCEL as _UDACCEL ptr
const UD_MAXVAL = &h7fff
const UD_MINVAL = -UD_MAXVAL
const UDS_WRAP = &h1
const UDS_SETBUDDYINT = &h2
const UDS_ALIGNRIGHT = &h4
const UDS_ALIGNLEFT = &h8
const UDS_AUTOBUDDY = &h10
const UDS_ARROWKEYS = &h20
const UDS_HORZ = &h40
const UDS_NOTHOUSANDS = &h80
const UDS_HOTTRACK = &h100
const UDM_SETRANGE = WM_USER + 101
const UDM_GETRANGE = WM_USER + 102
const UDM_SETPOS = WM_USER + 103
const UDM_GETPOS = WM_USER + 104
const UDM_SETBUDDY = WM_USER + 105
const UDM_GETBUDDY = WM_USER + 106
const UDM_SETACCEL = WM_USER + 107
const UDM_GETACCEL = WM_USER + 108
const UDM_SETBASE = WM_USER + 109
const UDM_GETBASE = WM_USER + 110
const UDM_SETRANGE32 = WM_USER + 111
const UDM_GETRANGE32 = WM_USER + 112
const UDM_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
const UDM_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT
const UDM_SETPOS32 = WM_USER + 113
const UDM_GETPOS32 = WM_USER + 114
declare function CreateUpDownControl(byval dwStyle as DWORD, byval x as long, byval y as long, byval cx as long, byval cy as long, byval hParent as HWND, byval nID as long, byval hInst as HINSTANCE, byval hBuddy as HWND, byval nUpper as long, byval nLower as long, byval nPos as long) as HWND
type NM_UPDOWN as NMUPDOWN
type LPNM_UPDOWN as LPNMUPDOWN

type _NM_UPDOWN
 hdr as NMHDR
 iPos as long
 iDelta as long
end type

type NMUPDOWN as _NM_UPDOWN
type LPNMUPDOWN as _NM_UPDOWN ptr
const UDN_DELTAPOS = culng(UDN_FIRST - 1)


const PBS_SMOOTH = &h1
const PBS_VERTICAL = &h4
const PBM_SETRANGE = WM_USER + 1
const PBM_SETPOS = WM_USER + 2
const PBM_DELTAPOS = WM_USER + 3
const PBM_SETSTEP = WM_USER + 4
const PBM_STEPIT = WM_USER + 5
const PBM_SETRANGE32 = WM_USER + 6

type PBRANGE
 iLow as long
 iHigh as long
end type

type PPBRANGE as PBRANGE ptr
const PBM_GETRANGE = WM_USER + 7
const PBM_GETPOS = WM_USER + 8
const PBM_SETBARCOLOR = WM_USER + 9
const PBM_SETBKCOLOR = CCM_SETBKCOLOR
const PBS_MARQUEE = &h8
const PBM_SETMARQUEE = WM_USER + 10


const HOTKEYF_SHIFT = &h1
const HOTKEYF_CONTROL = &h2
const HOTKEYF_ALT = &h4
const HOTKEYF_EXT = &h8
const HKCOMB_NONE = &h1
const HKCOMB_S = &h2
const HKCOMB_C = &h4
const HKCOMB_A = &h8
const HKCOMB_SC = &h10
const HKCOMB_SA = &h20
const HKCOMB_CA = &h40
const HKCOMB_SCA = &h80
const HKM_SETHOTKEY = WM_USER + 1
const HKM_GETHOTKEY = WM_USER + 2
const HKM_SETRULES = WM_USER + 3


const CCS_TOP = &h1
const CCS_NOMOVEY = &h2
const CCS_BOTTOM = &h3
const CCS_NORESIZE = &h4
const CCS_NOPARENTALIGN = &h8
const CCS_ADJUSTABLE = &h20
const CCS_NODIVIDER = &h40
const CCS_VERT = &h80
const CCS_LEFT = CCS_VERT or CCS_TOP
const CCS_RIGHT = CCS_VERT or CCS_BOTTOM
const CCS_NOMOVEX = CCS_VERT or CCS_NOMOVEY
const INVALID_LINK_INDEX = -1
const MAX_LINKID_TEXT = 48

type tagLITEM
 mask as UINT
 iLink as long
 state as UINT
 stateMask as UINT
 szID as wstring * 48
 szUrl as wstring * (2048 + 32) + sizeof("://")
end type

type LITEM as tagLITEM
type PLITEM as tagLITEM ptr

type tagLHITTESTINFO
 pt as POINT
 item as LITEM
end type

type LHITTESTINFO as tagLHITTESTINFO
type PLHITTESTINFO as tagLHITTESTINFO ptr

type tagNMLINK
 hdr as NMHDR
 item as LITEM
end type

type NMLINK as tagNMLINK
type PNMLINK as tagNMLINK ptr


const LVS_ICON = &h00
const LVS_REPORT = &h1
const LVS_SMALLICON = &h2
const LVS_LIST = &h3
const LVS_TYPEMASK = &h3
const LVS_SINGLESEL = &h4
const LVS_SHOWSELALWAYS = &h8
const LVS_SORTASCENDING = &h10
const LVS_SORTDESCENDING = &h20
const LVS_SHAREIMAGELISTS = &h40
const LVS_NOLABELWRAP = &h80
const LVS_AUTOARRANGE = &h100
const LVS_EDITLABELS = &h200
const LVS_OWNERDATA = &h1000
const LVS_NOSCROLL = &h2000
const LVS_TYPESTYLEMASK = &hfc00
const LVS_ALIGNTOP = &h00
const LVS_ALIGNLEFT = &h800
const LVS_ALIGNMASK = &hc00
const LVS_OWNERDRAWFIXED = &h400
const LVS_NOCOLUMNHEADER = &h4000
const LVS_NOSORTHEADER = &h8000
const LVM_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
const LVM_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT
const LVM_GETBKCOLOR = LVM_FIRST + 0
const LVM_SETBKCOLOR = LVM_FIRST + 1
const LVM_GETIMAGELIST = LVM_FIRST + 2
const LVSIL_NORMAL = 0
const LVSIL_SMALL = 1
const LVSIL_STATE = 2
const LVSIL_GROUPHEADER = 3
const LVM_SETIMAGELIST = LVM_FIRST + 3
const LVM_GETITEMCOUNT = LVM_FIRST + 4
const LVIF_TEXT = &h1
const LVIF_IMAGE = &h2
const LVIF_PARAM = &h4
const LVIF_STATE = &h8
const LVIF_INDENT = &h10
const LVIF_NORECOMPUTE = &h800
const LVIF_GROUPID = &h100
const LVIF_COLUMNS = &h200


const LVIS_FOCUSED = &h1
const LVIS_SELECTED = &h2
const LVIS_CUT = &h4
const LVIS_DROPHILITED = &h8
const LVIS_GLOW = &h10
const LVIS_ACTIVATING = &h20
const LVIS_OVERLAYMASK = &hf00
const LVIS_STATEIMAGEMASK = &hF000
const I_INDENTCALLBACK = -1
type LV_ITEMA as LVITEMA
type LV_ITEMW as LVITEMW
const I_GROUPIDCALLBACK = -1
const I_GROUPIDNONE = -2



type tagLVITEMA
 mask as UINT
 iItem as long
 iSubItem as long
 state as UINT
 stateMask as UINT
 pszText as LPSTR
 cchTextMax as long
 iImage as long
 lParam as LPARAM
 iIndent as long
 iGroupId as long
 cColumns as UINT
 puColumns as PUINT

end type

type LVITEMA as tagLVITEMA
type LPLVITEMA as tagLVITEMA ptr

type tagLVITEMW
 mask as UINT
 iItem as long
 iSubItem as long
 state as UINT
 stateMask as UINT
 pszText as LPWSTR
 cchTextMax as long
 iImage as long
 lParam as LPARAM
 iIndent as long
 iGroupId as long
 cColumns as UINT
 puColumns as PUINT

end type

type LVITEMW as tagLVITEMW
type LPLVITEMW as tagLVITEMW ptr

 type LVITEM as LVITEMA

type LV_ITEM as LVITEM

 type LPLVITEM as LPLVITEMA

const LPSTR_TEXTCALLBACKW = cast(LPWSTR, cast(INT_PTR, -1))
const LPSTR_TEXTCALLBACKA = cast(LPSTR, cast(INT_PTR, -1))

 const LPSTR_TEXTCALLBACK = LPSTR_TEXTCALLBACKA

const I_IMAGECALLBACK = -1
const I_IMAGENONE = -2
const I_COLUMNSCALLBACK = cast(UINT, -1)
const LVM_GETITEMA = LVM_FIRST + 5
const LVM_GETITEMW = LVM_FIRST + 75

 const LVM_GETITEM = LVM_GETITEMA

const LVM_SETITEMA = LVM_FIRST + 6
const LVM_SETITEMW = LVM_FIRST + 76

 const LVM_SETITEM = LVM_SETITEMA

const LVM_INSERTITEMA = LVM_FIRST + 7
const LVM_INSERTITEMW = LVM_FIRST + 77

 const LVM_INSERTITEM = LVM_INSERTITEMA

const LVM_DELETEITEM = LVM_FIRST + 8
const LVM_DELETEALLITEMS = LVM_FIRST + 9
const LVM_GETCALLBACKMASK = LVM_FIRST + 10
const LVM_SETCALLBACKMASK = LVM_FIRST + 11
const LVNI_ALL = &h00
const LVNI_FOCUSED = &h1
const LVNI_SELECTED = &h2
const LVNI_CUT = &h4
const LVNI_DROPHILITED = &h8
const LVNI_STATEMASK = ((LVNI_FOCUSED or LVNI_SELECTED) or LVNI_CUT) or LVNI_DROPHILITED
const LVNI_VISIBLEORDER = &h10
const LVNI_PREVIOUS = &h20
const LVNI_VISIBLEONLY = &h40
const LVNI_SAMEGROUPONLY = &h80
const LVNI_ABOVE = &h100
const LVNI_BELOW = &h200
const LVNI_TOLEFT = &h400
const LVNI_TORIGHT = &h800
const LVNI_DIRECTIONMASK = ((LVNI_ABOVE or LVNI_BELOW) or LVNI_TOLEFT) or LVNI_TORIGHT
const LVM_GETNEXTITEM = LVM_FIRST + 12
const LVFI_PARAM = &h1
const LVFI_STRING = &h2
const LVFI_PARTIAL = &h8
const LVFI_WRAP = &h20
const LVFI_NEARESTXY = &h40
type LV_FINDINFOA as LVFINDINFOA
type LV_FINDINFOW as LVFINDINFOW

type tagLVFINDINFOA
 flags as UINT
 psz as LPCSTR
 lParam as LPARAM
 pt as POINT
 vkDirection as UINT
end type

type LVFINDINFOA as tagLVFINDINFOA
type LPFINDINFOA as tagLVFINDINFOA ptr

type tagLVFINDINFOW
 flags as UINT
 psz as LPCWSTR
 lParam as LPARAM
 pt as POINT
 vkDirection as UINT
end type

type LVFINDINFOW as tagLVFINDINFOW
type LPFINDINFOW as tagLVFINDINFOW ptr

 type LVFINDINFO as LVFINDINFOA

type LV_FINDINFO as LVFINDINFO
const LVM_FINDITEMA = LVM_FIRST + 13
const LVM_FINDITEMW = LVM_FIRST + 83

 const LVM_FINDITEM = LVM_FINDITEMA

const LVIR_BOUNDS = 0
const LVIR_ICON = 1
const LVIR_LABEL = 2
const LVIR_SELECTBOUNDS = 3
const LVM_GETITEMRECT = LVM_FIRST + 14
private function ListView_GetItemRect(byval hwnd as HWND, byval i as long, byval prc as RECT ptr, byval code as long) as WINBOOL
 if prc then
 prc->left = code
 end if
 function = SNDMSG(hwnd, LVM_GETITEMRECT, cast(WPARAM, i), cast(LPARAM, prc))
end function
const LVM_SETITEMPOSITION = LVM_FIRST + 15
const LVM_GETITEMPOSITION = LVM_FIRST + 16
const LVM_GETSTRINGWIDTHA = LVM_FIRST + 17
const LVM_GETSTRINGWIDTHW = LVM_FIRST + 87

 const LVM_GETSTRINGWIDTH = LVM_GETSTRINGWIDTHA

const LVHT_NOWHERE = &h1
const LVHT_ONITEMICON = &h2
const LVHT_ONITEMLABEL = &h4
const LVHT_ONITEMSTATEICON = &h8
const LVHT_ONITEM = (LVHT_ONITEMICON or LVHT_ONITEMLABEL) or LVHT_ONITEMSTATEICON
const LVHT_ABOVE = &h8
const LVHT_BELOW = &h10
const LVHT_TORIGHT = &h20
const LVHT_TOLEFT = &h40
const LVHT_EX_GROUP_HEADER = &h10000000
const LVHT_EX_GROUP_FOOTER = &h20000000
const LVHT_EX_GROUP_COLLAPSE = &h40000000
const LVHT_EX_GROUP_BACKGROUND = &h80000000
const LVHT_EX_GROUP_STATEICON = &h01000000
const LVHT_EX_GROUP_SUBSETLINK = &h02000000
const LVHT_EX_GROUP = ((((LVHT_EX_GROUP_BACKGROUND or LVHT_EX_GROUP_COLLAPSE) or LVHT_EX_GROUP_FOOTER) or LVHT_EX_GROUP_HEADER) or LVHT_EX_GROUP_STATEICON) or LVHT_EX_GROUP_SUBSETLINK
const LVHT_EX_ONCONTENTS = &h04000000
type LV_HITTESTINFO as LVHITTESTINFO

type tagLVHITTESTINFO
 pt as POINT
 flags as UINT
 iItem as long
 iSubItem as long

end type

type LVHITTESTINFO as tagLVHITTESTINFO
type LPLVHITTESTINFO as tagLVHITTESTINFO ptr
const LVM_HITTEST = LVM_FIRST + 18
const LVM_ENSUREVISIBLE = LVM_FIRST + 19
const LVM_SCROLL = LVM_FIRST + 20
const LVM_REDRAWITEMS = LVM_FIRST + 21
const LVA_DEFAULT = &h00
const LVA_ALIGNLEFT = &h1
const LVA_ALIGNTOP = &h2
const LVA_SNAPTOGRID = &h5
const LVM_ARRANGE = LVM_FIRST + 22
const LVM_EDITLABELA = LVM_FIRST + 23
const LVM_EDITLABELW = LVM_FIRST + 118

 const LVM_EDITLABEL = LVM_EDITLABELA

const LVM_GETEDITCONTROL = LVM_FIRST + 24
type LV_COLUMNA as LVCOLUMNA
type LV_COLUMNW as LVCOLUMNW

type tagLVCOLUMNA
 mask as UINT
 fmt as long
 cx as long
 pszText as LPSTR
 cchTextMax as long
 iSubItem as long
 iImage as long
 iOrder as long

end type

type LVCOLUMNA as tagLVCOLUMNA
type LPLVCOLUMNA as tagLVCOLUMNA ptr

type tagLVCOLUMNW
 mask as UINT
 fmt as long
 cx as long
 pszText as LPWSTR
 cchTextMax as long
 iSubItem as long
 iImage as long
 iOrder as long

end type

type LVCOLUMNW as tagLVCOLUMNW
type LPLVCOLUMNW as tagLVCOLUMNW ptr

 type LVCOLUMN as LVCOLUMNA

type LV_COLUMN as LVCOLUMN

 type LPLVCOLUMN as LPLVCOLUMNA

const LVCF_FMT = &h1
const LVCF_WIDTH = &h2
const LVCF_TEXT = &h4
const LVCF_SUBITEM = &h8
const LVCF_IMAGE = &h10
const LVCF_ORDER = &h20


const LVCFMT_LEFT = &h00
const LVCFMT_RIGHT = &h1
const LVCFMT_CENTER = &h2
const LVCFMT_JUSTIFYMASK = &h3
const LVCFMT_IMAGE = &h800
const LVCFMT_BITMAP_ON_RIGHT = &h1000
const LVCFMT_COL_HAS_IMAGES = &h8000


const LVM_GETCOLUMNA = LVM_FIRST + 25
const LVM_GETCOLUMNW = LVM_FIRST + 95

 const LVM_GETCOLUMN = LVM_GETCOLUMNA

const LVM_SETCOLUMNA = LVM_FIRST + 26
const LVM_SETCOLUMNW = LVM_FIRST + 96

 const LVM_SETCOLUMN = LVM_SETCOLUMNA

const LVM_INSERTCOLUMNA = LVM_FIRST + 27
const LVM_INSERTCOLUMNW = LVM_FIRST + 97

 const LVM_INSERTCOLUMN = LVM_INSERTCOLUMNA

const LVM_DELETECOLUMN = LVM_FIRST + 28
const LVM_GETCOLUMNWIDTH = LVM_FIRST + 29
const LVSCW_AUTOSIZE = -1
const LVSCW_AUTOSIZE_USEHEADER = -2
const LVM_SETCOLUMNWIDTH = LVM_FIRST + 30
const LVM_GETHEADER = LVM_FIRST + 31
const LVM_CREATEDRAGIMAGE = LVM_FIRST + 33
const LVM_GETVIEWRECT = LVM_FIRST + 34
const LVM_GETTEXTCOLOR = LVM_FIRST + 35
const LVM_SETTEXTCOLOR = LVM_FIRST + 36
const LVM_GETTEXTBKCOLOR = LVM_FIRST + 37
const LVM_SETTEXTBKCOLOR = LVM_FIRST + 38
const LVM_GETTOPINDEX = LVM_FIRST + 39
const LVM_GETCOUNTPERPAGE = LVM_FIRST + 40
const LVM_GETORIGIN = LVM_FIRST + 41
const LVM_UPDATE = LVM_FIRST + 42
const LVM_SETITEMSTATE = LVM_FIRST + 43
const LVM_GETITEMSTATE = LVM_FIRST + 44
const LVM_GETITEMTEXTA = LVM_FIRST + 45
const LVM_GETITEMTEXTW = LVM_FIRST + 115

 const LVM_GETITEMTEXT = LVM_GETITEMTEXTA

const LVM_SETITEMTEXTA = LVM_FIRST + 46
const LVM_SETITEMTEXTW = LVM_FIRST + 116

 const LVM_SETITEMTEXT = LVM_SETITEMTEXTA

const LVSICF_NOINVALIDATEALL = &h1
const LVSICF_NOSCROLL = &h2
const LVM_SETITEMCOUNT = LVM_FIRST + 47
type PFNLVCOMPARE as function(byval as LPARAM, byval as LPARAM, byval as LPARAM) as long
const LVM_SORTITEMS = LVM_FIRST + 48
const LVM_SETITEMPOSITION32 = LVM_FIRST + 49
const LVM_GETSELECTEDCOUNT = LVM_FIRST + 50
const LVM_GETITEMSPACING = LVM_FIRST + 51
const LVM_GETISEARCHSTRINGA = LVM_FIRST + 52
const LVM_GETISEARCHSTRINGW = LVM_FIRST + 117

 const LVM_GETISEARCHSTRING = LVM_GETISEARCHSTRINGA

const LVM_SETICONSPACING = LVM_FIRST + 53
const LVM_SETEXTENDEDLISTVIEWSTYLE = LVM_FIRST + 54
const LVM_GETEXTENDEDLISTVIEWSTYLE = LVM_FIRST + 55
const LVS_EX_GRIDLINES = &h1
const LVS_EX_SUBITEMIMAGES = &h2
const LVS_EX_CHECKBOXES = &h4
const LVS_EX_TRACKSELECT = &h8
const LVS_EX_HEADERDRAGDROP = &h10
const LVS_EX_FULLROWSELECT = &h20
const LVS_EX_ONECLICKACTIVATE = &h40
const LVS_EX_TWOCLICKACTIVATE = &h80
const LVS_EX_FLATSB = &h100
const LVS_EX_REGIONAL = &h200
const LVS_EX_INFOTIP = &h400
const LVS_EX_UNDERLINEHOT = &h800
const LVS_EX_UNDERLINECOLD = &h1000
const LVS_EX_MULTIWORKAREAS = &h2000
const LVS_EX_LABELTIP = &h4000
const LVS_EX_BORDERSELECT = &h8000
const LVS_EX_DOUBLEBUFFER = &h10000
const LVS_EX_HIDELABELS = &h20000
const LVS_EX_SINGLEROW = &h40000
const LVS_EX_SNAPTOGRID = &h80000
const LVS_EX_SIMPLESELECT = &h100000


const LVM_GETSUBITEMRECT = LVM_FIRST + 56
private function ListView_GetSubItemRect(byval hwnd as HWND, byval iItem as long, byval iSubItem as long, byval code as long, byval prc as RECT ptr) as WINBOOL
 if prc then
 prc->top = iSubItem
 prc->left = code
 end if
 function = SNDMSG(hwnd, LVM_GETSUBITEMRECT, cast(WPARAM, iItem), cast(LPARAM, prc))
end function
const LVM_SUBITEMHITTEST = LVM_FIRST + 57
const LVM_SETCOLUMNORDERARRAY = LVM_FIRST + 58
const LVM_GETCOLUMNORDERARRAY = LVM_FIRST + 59
const LVM_SETHOTITEM = LVM_FIRST + 60
const LVM_GETHOTITEM = LVM_FIRST + 61
const LVM_SETHOTCURSOR = LVM_FIRST + 62
const LVM_GETHOTCURSOR = LVM_FIRST + 63
const LVM_APPROXIMATEVIEWRECT = LVM_FIRST + 64
const LV_MAX_WORKAREAS = 16
const LVM_SETWORKAREAS = LVM_FIRST + 65
const LVM_GETWORKAREAS = LVM_FIRST + 70
const LVM_GETNUMBEROFWORKAREAS = LVM_FIRST + 73
const LVM_GETSELECTIONMARK = LVM_FIRST + 66
const LVM_SETSELECTIONMARK = LVM_FIRST + 67
const LVM_SETHOVERTIME = LVM_FIRST + 71
const LVM_GETHOVERTIME = LVM_FIRST + 72
const LVM_SETTOOLTIPS = LVM_FIRST + 74
const LVM_GETTOOLTIPS = LVM_FIRST + 78
const LVM_SORTITEMSEX = LVM_FIRST + 81

type tagLVBKIMAGEA
 ulFlags as ULONG
 hbm as HBITMAP
 pszImage as LPSTR
 cchImageMax as UINT
 xOffsetPercent as long
 yOffsetPercent as long
end type

type LVBKIMAGEA as tagLVBKIMAGEA
type LPLVBKIMAGEA as tagLVBKIMAGEA ptr

type tagLVBKIMAGEW
 ulFlags as ULONG
 hbm as HBITMAP
 pszImage as LPWSTR
 cchImageMax as UINT
 xOffsetPercent as long
 yOffsetPercent as long
end type

type LVBKIMAGEW as tagLVBKIMAGEW
type LPLVBKIMAGEW as tagLVBKIMAGEW ptr
const LVBKIF_SOURCE_NONE = &h00
const LVBKIF_SOURCE_HBITMAP = &h1
const LVBKIF_SOURCE_URL = &h2
const LVBKIF_SOURCE_MASK = &h3
const LVBKIF_STYLE_NORMAL = &h00
const LVBKIF_STYLE_TILE = &h10
const LVBKIF_STYLE_MASK = &h10
const LVBKIF_FLAG_TILEOFFSET = &h100
const LVBKIF_TYPE_WATERMARK = &h10000000
const LVBKIF_FLAG_ALPHABLEND = &h20000000
const LVM_SETBKIMAGEA = LVM_FIRST + 68
const LVM_SETBKIMAGEW = LVM_FIRST + 138
const LVM_GETBKIMAGEA = LVM_FIRST + 69
const LVM_GETBKIMAGEW = LVM_FIRST + 139
const LVM_SETSELECTEDCOLUMN = LVM_FIRST + 140
const LVM_SETTILEWIDTH = LVM_FIRST + 141
const LV_VIEW_ICON = &h00
const LV_VIEW_DETAILS = &h1
const LV_VIEW_SMALLICON = &h2
const LV_VIEW_LIST = &h3
const LV_VIEW_TILE = &h4
const LV_VIEW_MAX = &h4
const LVM_SETVIEW = LVM_FIRST + 142
const LVM_GETVIEW = LVM_FIRST + 143
const LVGF_NONE = &h00
const LVGF_HEADER = &h1
const LVGF_FOOTER = &h2
const LVGF_STATE = &h4
const LVGF_ALIGN = &h8
const LVGF_GROUPID = &h10


const LVGS_NORMAL = &h00
const LVGS_COLLAPSED = &h1
const LVGS_HIDDEN = &h2
const LVGS_NOHEADER = &h4
const LVGS_COLLAPSIBLE = &h8
const LVGS_FOCUSED = &h10
const LVGS_SELECTED = &h20
const LVGS_SUBSETED = &h40
const LVGS_SUBSETLINKFOCUSED = &h80
const LVGA_HEADER_LEFT = &h1
const LVGA_HEADER_CENTER = &h2
const LVGA_HEADER_RIGHT = &h4
const LVGA_FOOTER_LEFT = &h8
const LVGA_FOOTER_CENTER = &h10
const LVGA_FOOTER_RIGHT = &h20

type tagLVGROUP
 cbSize as UINT
 mask as UINT
 pszHeader as LPWSTR
 cchHeader as long
 pszFooter as LPWSTR
 cchFooter as long
 iGroupId as long
 stateMask as UINT
 state as UINT
 uAlign as UINT

end type

type LVGROUP as tagLVGROUP
type PLVGROUP as tagLVGROUP ptr


const LVM_INSERTGROUP = LVM_FIRST + 145
const LVM_SETGROUPINFO = LVM_FIRST + 147
const LVM_GETGROUPINFO = LVM_FIRST + 149
const LVM_REMOVEGROUP = LVM_FIRST + 150
const LVM_MOVEGROUP = LVM_FIRST + 151
const LVM_GETGROUPCOUNT = LVM_FIRST + 152
const LVM_GETGROUPINFOBYINDEX = LVM_FIRST + 153
const LVM_MOVEITEMTOGROUP = LVM_FIRST + 154
const LVGGR_GROUP = 0
const LVGGR_HEADER = 1
const LVGGR_LABEL = 2
const LVGGR_SUBSETLINK = 3
const LVM_GETGROUPRECT = LVM_FIRST + 98
private function ListView_GetGroupRect(byval hwnd as HWND, byval iGroupId as long, byval type_ as LONG, byval prc as RECT ptr) as BOOL
 if prc then
 prc->top = type_
 end if
 function = SNDMSG(hwnd, LVM_GETGROUPRECT, cast(WPARAM, iGroupId), cast(LPARAM, prc))
end function
const LVGMF_NONE = &h00
const LVGMF_BORDERSIZE = &h1
const LVGMF_BORDERCOLOR = &h2
const LVGMF_TEXTCOLOR = &h4

type tagLVGROUPMETRICS
 cbSize as UINT
 mask as UINT
 Left as UINT
 Top as UINT
 Right as UINT
 Bottom as UINT
 crLeft as COLORREF
 crTop as COLORREF
 crRight as COLORREF
 crBottom as COLORREF
 crHeader as COLORREF
 crFooter as COLORREF
end type

type LVGROUPMETRICS as tagLVGROUPMETRICS
type PLVGROUPMETRICS as tagLVGROUPMETRICS ptr
const LVM_SETGROUPMETRICS = LVM_FIRST + 155
const LVM_GETGROUPMETRICS = LVM_FIRST + 156
const LVM_ENABLEGROUPVIEW = LVM_FIRST + 157
type PFNLVGROUPCOMPARE as function(byval as long, byval as long, byval as any ptr) as long
const LVM_SORTGROUPS = LVM_FIRST + 158

type tagLVINSERTGROUPSORTED
 pfnGroupCompare as PFNLVGROUPCOMPARE
 pvData as any ptr
 lvGroup as LVGROUP
end type

type LVINSERTGROUPSORTED as tagLVINSERTGROUPSORTED
type PLVINSERTGROUPSORTED as tagLVINSERTGROUPSORTED ptr
const LVM_INSERTGROUPSORTED = LVM_FIRST + 159
const LVM_REMOVEALLGROUPS = LVM_FIRST + 160
const LVM_HASGROUP = LVM_FIRST + 161
private function ListView_SetGroupState(byval hwnd as HWND, byval dwGroupId as UINT, byval dwMask as UINT, byval dwState as UINT) as LRESULT
 dim as LVGROUP _macro_lvg
 _macro_lvg.cbSize = sizeof(_macro_lvg)
 _macro_lvg.mask = LVGF_STATE
 _macro_lvg.stateMask = dwMask
 _macro_lvg.state = dwState
 function = SNDMSG(hwnd, LVM_SETGROUPINFO, cast(WPARAM, dwGroupId), cast(LPARAM, @_macro_lvg))
end function
const LVM_GETGROUPSTATE = LVM_FIRST + 92
const LVM_GETFOCUSEDGROUP = LVM_FIRST + 93
const LVTVIF_AUTOSIZE = &h00
const LVTVIF_FIXEDWIDTH = &h1
const LVTVIF_FIXEDHEIGHT = &h2
const LVTVIF_FIXEDSIZE = &h3


const LVTVIM_TILESIZE = &h1
const LVTVIM_COLUMNS = &h2
const LVTVIM_LABELMARGIN = &h4

type tagLVTILEVIEWINFO
 cbSize as UINT
 dwMask as DWORD
 dwFlags as DWORD
 sizeTile as SIZE
 cLines as long
 rcLabelMargin as RECT
end type

type LVTILEVIEWINFO as tagLVTILEVIEWINFO
type PLVTILEVIEWINFO as tagLVTILEVIEWINFO ptr

type tagLVTILEINFO
 cbSize as UINT
 iItem as long
 cColumns as UINT
 puColumns as PUINT

end type

type LVTILEINFO as tagLVTILEINFO
type PLVTILEINFO as tagLVTILEINFO ptr
const LVM_SETTILEVIEWINFO = LVM_FIRST + 162
const LVM_GETTILEVIEWINFO = LVM_FIRST + 163
const LVM_SETTILEINFO = LVM_FIRST + 164
const LVM_GETTILEINFO = LVM_FIRST + 165

type LVINSERTMARK
 cbSize as UINT
 dwFlags as DWORD
 iItem as long
 dwReserved as DWORD
end type

type LPLVINSERTMARK as LVINSERTMARK ptr
const LVIM_AFTER = &h1
const LVM_SETINSERTMARK = LVM_FIRST + 166
const LVM_GETINSERTMARK = LVM_FIRST + 167
const LVM_INSERTMARKHITTEST = LVM_FIRST + 168
const LVM_GETINSERTMARKRECT = LVM_FIRST + 169
const LVM_SETINSERTMARKCOLOR = LVM_FIRST + 170
const LVM_GETINSERTMARKCOLOR = LVM_FIRST + 171

type tagLVSETINFOTIP
 cbSize as UINT
 dwFlags as DWORD
 pszText as LPWSTR
 iItem as long
 iSubItem as long
end type

type LVSETINFOTIP as tagLVSETINFOTIP
type PLVSETINFOTIP as tagLVSETINFOTIP ptr
const LVM_SETINFOTIP = LVM_FIRST + 173
const LVM_GETSELECTEDCOLUMN = LVM_FIRST + 174
const LVM_ISGROUPVIEWENABLED = LVM_FIRST + 175
const LVM_GETOUTLINECOLOR = LVM_FIRST + 176
const LVM_SETOUTLINECOLOR = LVM_FIRST + 177
const LVM_CANCELEDITLABEL = LVM_FIRST + 179
const LVM_MAPINDEXTOID = LVM_FIRST + 180
const LVM_MAPIDTOINDEX = LVM_FIRST + 181
const LVM_ISITEMVISIBLE = LVM_FIRST + 182


 type LVBKIMAGE as LVBKIMAGEA
 type LPLVBKIMAGE as LPLVBKIMAGEA
 const LVM_SETBKIMAGE = LVM_SETBKIMAGEA
 const LVM_GETBKIMAGE = LVM_GETBKIMAGEA

type LPNM_LISTVIEW as LPNMLISTVIEW
type NM_LISTVIEW as NMLISTVIEW

type tagNMLISTVIEW
 hdr as NMHDR
 iItem as long
 iSubItem as long
 uNewState as UINT
 uOldState as UINT
 uChanged as UINT
 ptAction as POINT
 lParam as LPARAM
end type

type NMLISTVIEW as tagNMLISTVIEW
type LPNMLISTVIEW as tagNMLISTVIEW ptr

type tagNMITEMACTIVATE
 hdr as NMHDR
 iItem as long
 iSubItem as long
 uNewState as UINT
 uOldState as UINT
 uChanged as UINT
 ptAction as POINT
 lParam as LPARAM
 uKeyFlags as UINT
end type

type NMITEMACTIVATE as tagNMITEMACTIVATE
type LPNMITEMACTIVATE as tagNMITEMACTIVATE ptr
const LVKF_ALT = &h1
const LVKF_CONTROL = &h2
const LVKF_SHIFT = &h4

type tagNMLVCUSTOMDRAW
 nmcd as NMCUSTOMDRAW
 clrText as COLORREF
 clrTextBk as COLORREF
 iSubItem as long
 dwItemType as DWORD
 clrFace as COLORREF
 iIconEffect as long
 iIconPhase as long
 iPartId as long
 iStateId as long
 rcText as RECT
 uAlign as UINT
end type

type NMLVCUSTOMDRAW as tagNMLVCUSTOMDRAW
type LPNMLVCUSTOMDRAW as tagNMLVCUSTOMDRAW ptr
const LVCDI_ITEM = &h00
const LVCDI_GROUP = &h1
const LVCDI_ITEMSLIST = &h2
const LVCDRF_NOSELECT = &h10000
const LVCDRF_NOGROUPFRAME = &h20000

type tagNMLVCACHEHINT
 hdr as NMHDR
 iFrom as long
 iTo as long
end type

type NMLVCACHEHINT as tagNMLVCACHEHINT
type LPNMLVCACHEHINT as tagNMLVCACHEHINT ptr
type LPNM_CACHEHINT as LPNMLVCACHEHINT
type PNM_CACHEHINT as LPNMLVCACHEHINT
type NM_CACHEHINT as NMLVCACHEHINT

type tagNMLVFINDITEMA
 hdr as NMHDR
 iStart as long
 lvfi as LVFINDINFOA
end type

type NMLVFINDITEMA as tagNMLVFINDITEMA
type LPNMLVFINDITEMA as tagNMLVFINDITEMA ptr

type tagNMLVFINDITEMW
 hdr as NMHDR
 iStart as long
 lvfi as LVFINDINFOW
end type

type NMLVFINDITEMW as tagNMLVFINDITEMW
type LPNMLVFINDITEMW as tagNMLVFINDITEMW ptr
type PNM_FINDITEMA as LPNMLVFINDITEMA
type LPNM_FINDITEMA as LPNMLVFINDITEMA
type NM_FINDITEMA as NMLVFINDITEMA
type PNM_FINDITEMW as LPNMLVFINDITEMW
type LPNM_FINDITEMW as LPNMLVFINDITEMW
type NM_FINDITEMW as NMLVFINDITEMW

 type PNM_FINDITEM as PNM_FINDITEMA
 type LPNM_FINDITEM as LPNM_FINDITEMA
 type NM_FINDITEM as NM_FINDITEMA
 type NMLVFINDITEM as NMLVFINDITEMA
 type LPNMLVFINDITEM as LPNMLVFINDITEMA

type tagNMLVODSTATECHANGE
 hdr as NMHDR
 iFrom as long
 iTo as long
 uNewState as UINT
 uOldState as UINT
end type

type NMLVODSTATECHANGE as tagNMLVODSTATECHANGE
type LPNMLVODSTATECHANGE as tagNMLVODSTATECHANGE ptr
type PNM_ODSTATECHANGE as LPNMLVODSTATECHANGE
type LPNM_ODSTATECHANGE as LPNMLVODSTATECHANGE
type NM_ODSTATECHANGE as NMLVODSTATECHANGE

const LVN_ITEMCHANGING = culng(LVN_FIRST - 0)
const LVN_ITEMCHANGED = culng(LVN_FIRST - 1)
const LVN_INSERTITEM = culng(LVN_FIRST - 2)
const LVN_DELETEITEM = culng(LVN_FIRST - 3)
const LVN_DELETEALLITEMS = culng(LVN_FIRST - 4)
const LVN_BEGINLABELEDITA = culng(LVN_FIRST - 5)
const LVN_BEGINLABELEDITW = culng(LVN_FIRST - 75)
const LVN_ENDLABELEDITA = culng(LVN_FIRST - 6)
const LVN_ENDLABELEDITW = culng(LVN_FIRST - 76)
const LVN_COLUMNCLICK = culng(LVN_FIRST - 8)
const LVN_BEGINDRAG = culng(LVN_FIRST - 9)
const LVN_BEGINRDRAG = culng(LVN_FIRST - 11)
const LVN_ODCACHEHINT = culng(LVN_FIRST - 13)
const LVN_ODFINDITEMA = culng(LVN_FIRST - 52)
const LVN_ODFINDITEMW = culng(LVN_FIRST - 79)
const LVN_ITEMACTIVATE = culng(LVN_FIRST - 14)
const LVN_ODSTATECHANGED = culng(LVN_FIRST - 15)

 const LVN_ODFINDITEM = LVN_ODFINDITEMA

const LVN_HOTTRACK = culng(LVN_FIRST - 21)
const LVN_GETDISPINFOA = culng(LVN_FIRST - 50)
const LVN_GETDISPINFOW = culng(LVN_FIRST - 77)
const LVN_SETDISPINFOA = culng(LVN_FIRST - 51)
const LVN_SETDISPINFOW = culng(LVN_FIRST - 78)

 const LVN_BEGINLABELEDIT = LVN_BEGINLABELEDITA
 const LVN_ENDLABELEDIT = LVN_ENDLABELEDITA
 const LVN_GETDISPINFO = LVN_GETDISPINFOA
 const LVN_SETDISPINFO = LVN_SETDISPINFOA

const LVIF_DI_SETITEM = &h1000
type LV_DISPINFOA as NMLVDISPINFOA
type LV_DISPINFOW as NMLVDISPINFOW

type tagLVDISPINFO
 hdr as NMHDR
 item as LVITEMA
end type

type NMLVDISPINFOA as tagLVDISPINFO
type LPNMLVDISPINFOA as tagLVDISPINFO ptr

type tagLVDISPINFOW
 hdr as NMHDR
 item as LVITEMW
end type

type NMLVDISPINFOW as tagLVDISPINFOW
type LPNMLVDISPINFOW as tagLVDISPINFOW ptr

 type NMLVDISPINFO as NMLVDISPINFOA

type LV_DISPINFO as NMLVDISPINFO
const LVN_KEYDOWN = culng(LVN_FIRST - 55)
type LV_KEYDOWN as NMLVKEYDOWN

type tagLVKEYDOWN field = 1
 hdr as NMHDR
 wVKey as WORD
 flags as UINT
end type

type NMLVKEYDOWN as tagLVKEYDOWN
type LPNMLVKEYDOWN as tagLVKEYDOWN ptr
const LVN_MARQUEEBEGIN = culng(LVN_FIRST - 56)


type tagNMLVGETINFOTIPA
 hdr as NMHDR
 dwFlags as DWORD
 pszText as LPSTR
 cchTextMax as long
 iItem as long
 iSubItem as long
 lParam as LPARAM
end type

type NMLVGETINFOTIPA as tagNMLVGETINFOTIPA
type LPNMLVGETINFOTIPA as tagNMLVGETINFOTIPA ptr

type tagNMLVGETINFOTIPW
 hdr as NMHDR
 dwFlags as DWORD
 pszText as LPWSTR
 cchTextMax as long
 iItem as long
 iSubItem as long
 lParam as LPARAM
end type

type NMLVGETINFOTIPW as tagNMLVGETINFOTIPW
type LPNMLVGETINFOTIPW as tagNMLVGETINFOTIPW ptr
const LVGIT_UNFOLDED = &h1
const LVN_GETINFOTIPA = culng(LVN_FIRST - 57)
const LVN_GETINFOTIPW = culng(LVN_FIRST - 58)

 const LVN_GETINFOTIP = LVN_GETINFOTIPA
 type NMLVGETINFOTIP as NMLVGETINFOTIPA
 type LPNMLVGETINFOTIP as LPNMLVGETINFOTIPA

const LVNSCH_DEFAULT = -1
const LVNSCH_ERROR = -2
const LVNSCH_IGNORE = -3
const LVN_INCREMENTALSEARCHA = culng(LVN_FIRST - 62)
const LVN_INCREMENTALSEARCHW = culng(LVN_FIRST - 63)


 const LVN_INCREMENTALSEARCH = LVN_INCREMENTALSEARCHA

type tagNMLVSCROLL
 hdr as NMHDR
 dx as long
 dy as long
end type

type NMLVSCROLL as tagNMLVSCROLL
type LPNMLVSCROLL as tagNMLVSCROLL ptr
const LVN_BEGINSCROLL = culng(LVN_FIRST - 80)
const LVN_ENDSCROLL = culng(LVN_FIRST - 81)




const TVS_HASBUTTONS = &h1
const TVS_HASLINES = &h2
const TVS_LINESATROOT = &h4
const TVS_EDITLABELS = &h8
const TVS_DISABLEDRAGDROP = &h10
const TVS_SHOWSELALWAYS = &h20
const TVS_RTLREADING = &h40
const TVS_NOTOOLTIPS = &h80
const TVS_CHECKBOXES = &h100
const TVS_TRACKSELECT = &h200
const TVS_SINGLEEXPAND = &h400
const TVS_INFOTIP = &h800
const TVS_FULLROWSELECT = &h1000
const TVS_NOSCROLL = &h2000
const TVS_NONEVENHEIGHT = &h4000
const TVS_NOHSCROLL = &h8000
const TVS_EX_NOSINGLECOLLAPSE = &h1


type HTREEITEM as _TREEITEM ptr
const TVIF_TEXT = &h1
const TVIF_IMAGE = &h2
const TVIF_PARAM = &h4
const TVIF_STATE = &h8
const TVIF_HANDLE = &h10
const TVIF_SELECTEDIMAGE = &h20
const TVIF_CHILDREN = &h40
const TVIF_INTEGRAL = &h80

 const TVIF_STATEEX = &h100
 const TVIF_EXPANDEDIMAGE = &h200

const TVIS_SELECTED = &h2
const TVIS_CUT = &h4
const TVIS_DROPHILITED = &h8
const TVIS_BOLD = &h10
const TVIS_EXPANDED = &h20
const TVIS_EXPANDEDONCE = &h40
const TVIS_EXPANDPARTIAL = &h80
const TVIS_OVERLAYMASK = &hf00
const TVIS_STATEIMAGEMASK = &hF000
const TVIS_USERMASK = &hF000

 const TVIS_EX_FLAT = &h1


 const TVIS_EX_ALL = &h0002

 type tagNMTVSTATEIMAGECHANGING
 hdr as NMHDR
 hti as HTREEITEM
 iOldStateImageIndex as long
 iNewStateImageIndex as long
 end type

 type NMTVSTATEIMAGECHANGING as tagNMTVSTATEIMAGECHANGING
 type LPNMTVSTATEIMAGECHANGING as tagNMTVSTATEIMAGECHANGING ptr

const I_CHILDRENCALLBACK = -1
const I_CHILDRENAUTO = -2
type LPTV_ITEMW as LPTVITEMW
type LPTV_ITEMA as LPTVITEMA
type TV_ITEMW as TVITEMW
type TV_ITEMA as TVITEMA
type TV_ITEM as TVITEM

type tagTVITEMA
 mask as UINT
 hItem as HTREEITEM
 state as UINT
 stateMask as UINT
 pszText as LPSTR
 cchTextMax as long
 iImage as long
 iSelectedImage as long
 cChildren as long
 lParam as LPARAM
end type

type TVITEMA as tagTVITEMA
type LPTVITEMA as tagTVITEMA ptr

type tagTVITEMW
 mask as UINT
 hItem as HTREEITEM
 state as UINT
 stateMask as UINT
 pszText as LPWSTR
 cchTextMax as long
 iImage as long
 iSelectedImage as long
 cChildren as long
 lParam as LPARAM
end type

type TVITEMW as tagTVITEMW
type LPTVITEMW as tagTVITEMW ptr

type tagTVITEMEXA
 mask as UINT
 hItem as HTREEITEM
 state as UINT
 stateMask as UINT
 pszText as LPSTR
 cchTextMax as long
 iImage as long
 iSelectedImage as long
 cChildren as long
 lParam as LPARAM
 iIntegral as long

 uStateEx as UINT
 hwnd as HWND
 iExpandedImage as long

end type

type TVITEMEXA as tagTVITEMEXA
type LPTVITEMEXA as tagTVITEMEXA ptr

type tagTVITEMEXW
 mask as UINT
 hItem as HTREEITEM
 state as UINT
 stateMask as UINT
 pszText as LPWSTR
 cchTextMax as long
 iImage as long
 iSelectedImage as long
 cChildren as long
 lParam as LPARAM
 iIntegral as long

 uStateEx as UINT
 hwnd as HWND
 iExpandedImage as long

end type

type TVITEMEXW as tagTVITEMEXW
type LPTVITEMEXW as tagTVITEMEXW ptr

 type TVITEMEX as TVITEMEXA
 type LPTVITEMEX as LPTVITEMEXA
 type TVITEM as TVITEMA
 type LPTVITEM as LPTVITEMA

type LPTV_ITEM as LPTVITEM
const TVI_ROOT = cast(HTREEITEM, cast(ULONG_PTR, -&h10000))
const TVI_FIRST = cast(HTREEITEM, cast(ULONG_PTR, -&hffff))
const TVI_LAST = cast(HTREEITEM, cast(ULONG_PTR, -&hfffe))
const TVI_SORT = cast(HTREEITEM, cast(ULONG_PTR, -&hfffd))

type LPTV_INSERTSTRUCTA as LPTVINSERTSTRUCTA
type LPTV_INSERTSTRUCTW as LPTVINSERTSTRUCTW
type TV_INSERTSTRUCTA as TVINSERTSTRUCTA
type TV_INSERTSTRUCTW as TVINSERTSTRUCTW

type tagTVINSERTSTRUCTA
 hParent as HTREEITEM
 hInsertAfter as HTREEITEM

 union
 itemex as TVITEMEXA
 item as TVITEMA
 end union
end type

type TVINSERTSTRUCTA as tagTVINSERTSTRUCTA
type LPTVINSERTSTRUCTA as tagTVINSERTSTRUCTA ptr

type tagTVINSERTSTRUCTW
 hParent as HTREEITEM
 hInsertAfter as HTREEITEM

 union
 itemex as TVITEMEXW
 item as TVITEMW
 end union
end type

type TVINSERTSTRUCTW as tagTVINSERTSTRUCTW
type LPTVINSERTSTRUCTW as tagTVINSERTSTRUCTW ptr

 type TVINSERTSTRUCT as TVINSERTSTRUCTA

type TV_INSERTSTRUCT as TVINSERTSTRUCT

 type LPTVINSERTSTRUCT as LPTVINSERTSTRUCTA

type LPTV_INSERTSTRUCT as LPTVINSERTSTRUCT


const TVM_INSERTITEMA = TV_FIRST + 0
const TVM_INSERTITEMW = TV_FIRST + 50

 const TVM_INSERTITEM = TVM_INSERTITEMA

const TVM_DELETEITEM = TV_FIRST + 1
const TVM_EXPAND = TV_FIRST + 2
const TVE_COLLAPSE = &h1
const TVE_EXPAND = &h2
const TVE_TOGGLE = &h3
const TVE_EXPANDPARTIAL = &h4000
const TVE_COLLAPSERESET = &h8000
const TVM_GETITEMRECT = TV_FIRST + 4
private function TreeView_GetItemRect(byval hwnd as HWND, byval hitem as HTREEITEM, byval prc as RECT ptr, byval code as long) as WINBOOL
 *cptr(HTREEITEM ptr, prc) = hitem
 function = SNDMSG(hwnd, TVM_GETITEMRECT, cast(WPARAM, code), cast(LPARAM, prc))
end function
const TVM_GETCOUNT = TV_FIRST + 5
const TVM_GETINDENT = TV_FIRST + 6
const TVM_SETINDENT = TV_FIRST + 7
const TVM_GETIMAGELIST = TV_FIRST + 8
const TVSIL_NORMAL = 0
const TVSIL_STATE = 2
const TVM_SETIMAGELIST = TV_FIRST + 9
const TVM_GETNEXTITEM = TV_FIRST + 10
const TVGN_ROOT = &h00
const TVGN_NEXT = &h1
const TVGN_PREVIOUS = &h2
const TVGN_PARENT = &h3
const TVGN_CHILD = &h4
const TVGN_FIRSTVISIBLE = &h5
const TVGN_NEXTVISIBLE = &h6
const TVGN_PREVIOUSVISIBLE = &h7
const TVGN_DROPHILITE = &h8
const TVGN_CARET = &h9
const TVGN_LASTVISIBLE = &ha

 const TVGN_NEXTSELECTED = &hb

const TVSI_NOSINGLEEXPAND = &h8000


const TVM_SELECTITEM = TV_FIRST + 11
const TVM_GETITEMA = TV_FIRST + 12
const TVM_GETITEMW = TV_FIRST + 62

 const TVM_GETITEM = TVM_GETITEMA

const TVM_SETITEMA = TV_FIRST + 13
const TVM_SETITEMW = TV_FIRST + 63

 const TVM_SETITEM = TVM_SETITEMA

const TVM_EDITLABELA = TV_FIRST + 14
const TVM_EDITLABELW = TV_FIRST + 65

 const TVM_EDITLABEL = TVM_EDITLABELA

const TVM_GETEDITCONTROL = TV_FIRST + 15
const TVM_GETVISIBLECOUNT = TV_FIRST + 16
const TVM_HITTEST = TV_FIRST + 17
type LPTV_HITTESTINFO as LPTVHITTESTINFO
type TV_HITTESTINFO as TVHITTESTINFO

type tagTVHITTESTINFO
 pt as POINT
 flags as UINT
 hItem as HTREEITEM
end type

type TVHITTESTINFO as tagTVHITTESTINFO
type LPTVHITTESTINFO as tagTVHITTESTINFO ptr
const TVHT_NOWHERE = &h1
const TVHT_ONITEMICON = &h2
const TVHT_ONITEMLABEL = &h4
const TVHT_ONITEMINDENT = &h8
const TVHT_ONITEMBUTTON = &h10
const TVHT_ONITEMRIGHT = &h20
const TVHT_ONITEMSTATEICON = &h40
const TVHT_ABOVE = &h100
const TVHT_BELOW = &h200
const TVHT_TORIGHT = &h400
const TVHT_TOLEFT = &h800
const TVM_CREATEDRAGIMAGE = TV_FIRST + 18
const TVM_SORTCHILDREN = TV_FIRST + 19
const TVM_ENSUREVISIBLE = TV_FIRST + 20
const TVM_SORTCHILDRENCB = TV_FIRST + 21
const TVM_ENDEDITLABELNOW = TV_FIRST + 22
const TVM_GETISEARCHSTRINGA = TV_FIRST + 23
const TVM_GETISEARCHSTRINGW = TV_FIRST + 64

 const TVM_GETISEARCHSTRING = TVM_GETISEARCHSTRINGA

const TVM_SETTOOLTIPS = TV_FIRST + 24
const TVM_GETTOOLTIPS = TV_FIRST + 25
const TVM_SETINSERTMARK = TV_FIRST + 26
const TVM_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
const TVM_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT
const TVM_SETITEMHEIGHT = TV_FIRST + 27
const TVM_GETITEMHEIGHT = TV_FIRST + 28
const TVM_SETBKCOLOR = TV_FIRST + 29
const TVM_SETTEXTCOLOR = TV_FIRST + 30
const TVM_GETBKCOLOR = TV_FIRST + 31
const TVM_GETTEXTCOLOR = TV_FIRST + 32
const TVM_SETSCROLLTIME = TV_FIRST + 33
const TVM_GETSCROLLTIME = TV_FIRST + 34
const TVM_SETBORDER = TV_FIRST + 35
const TVSBF_XBORDER = &h1
const TVSBF_YBORDER = &h2
const TVM_SETINSERTMARKCOLOR = TV_FIRST + 37
const TVM_GETINSERTMARKCOLOR = TV_FIRST + 38
const TVM_GETITEMSTATE = TV_FIRST + 39
const TVM_SETLINECOLOR = TV_FIRST + 40
const TVM_GETLINECOLOR = TV_FIRST + 41
const TVM_MAPACCIDTOHTREEITEM = TV_FIRST + 42
const TVM_MAPHTREEITEMTOACCID = TV_FIRST + 43
const TVM_SETEXTENDEDSTYLE = TV_FIRST + 44
const TVM_GETEXTENDEDSTYLE = TV_FIRST + 45
const TVM_SETHOT = TV_FIRST + 58
const TVM_SETAUTOSCROLLINFO = TV_FIRST + 59


type PFNTVCOMPARE as function(byval lParam1 as LPARAM, byval lParam2 as LPARAM, byval lParamSort as LPARAM) as long
type LPTV_SORTCB as LPTVSORTCB
type TV_SORTCB as TVSORTCB

type tagTVSORTCB
 hParent as HTREEITEM
 lpfnCompare as PFNTVCOMPARE
 lParam as LPARAM
end type

type TVSORTCB as tagTVSORTCB
type LPTVSORTCB as tagTVSORTCB ptr
type LPNM_TREEVIEWA as LPNMTREEVIEWA
type LPNM_TREEVIEWW as LPNMTREEVIEWW
type NM_TREEVIEWW as NMTREEVIEWW
type NM_TREEVIEWA as NMTREEVIEWA

type tagNMTREEVIEWA
 hdr as NMHDR
 action as UINT
 itemOld as TVITEMA
 itemNew as TVITEMA
 ptDrag as POINT
end type

type NMTREEVIEWA as tagNMTREEVIEWA
type LPNMTREEVIEWA as tagNMTREEVIEWA ptr

type tagNMTREEVIEWW
 hdr as NMHDR
 action as UINT
 itemOld as TVITEMW
 itemNew as TVITEMW
 ptDrag as POINT
end type

type NMTREEVIEWW as tagNMTREEVIEWW
type LPNMTREEVIEWW as tagNMTREEVIEWW ptr

 type NMTREEVIEW as NMTREEVIEWA

type NM_TREEVIEW as NMTREEVIEW

 type LPNMTREEVIEW as LPNMTREEVIEWA

type LPNM_TREEVIEW as LPNMTREEVIEW
const TVN_SELCHANGINGA = culng(TVN_FIRST - 1)
const TVN_SELCHANGINGW = culng(TVN_FIRST - 50)
const TVN_SELCHANGEDA = culng(TVN_FIRST - 2)
const TVN_SELCHANGEDW = culng(TVN_FIRST - 51)
const TVC_UNKNOWN = &h00
const TVC_BYMOUSE = &h1
const TVC_BYKEYBOARD = &h2
const TVN_GETDISPINFOA = culng(TVN_FIRST - 3)
const TVN_GETDISPINFOW = culng(TVN_FIRST - 52)
const TVN_SETDISPINFOA = culng(TVN_FIRST - 4)
const TVN_SETDISPINFOW = culng(TVN_FIRST - 53)
const TVIF_DI_SETITEM = &h1000
type TV_DISPINFOA as NMTVDISPINFOA
type TV_DISPINFOW as NMTVDISPINFOW

type tagTVDISPINFOA
 hdr as NMHDR
 item as TVITEMA
end type

type NMTVDISPINFOA as tagTVDISPINFOA
type LPNMTVDISPINFOA as tagTVDISPINFOA ptr

type tagTVDISPINFOW
 hdr as NMHDR
 item as TVITEMW
end type

type NMTVDISPINFOW as tagTVDISPINFOW
type LPNMTVDISPINFOW as tagTVDISPINFOW ptr

 type NMTVDISPINFO as NMTVDISPINFOA

type TV_DISPINFO as NMTVDISPINFO

 type LPNMTVDISPINFO as LPNMTVDISPINFOA

 type tagTVDISPINFOEXA
 hdr as NMHDR
 item as TVITEMEXA
 end type

 type NMTVDISPINFOEXA as tagTVDISPINFOEXA
 type LPNMTVDISPINFOEXA as tagTVDISPINFOEXA ptr

 type tagTVDISPINFOEXW
 hdr as NMHDR
 item as TVITEMEXW
 end type

 type NMTVDISPINFOEXW as tagTVDISPINFOEXW
 type LPNMTVDISPINFOEXW as tagTVDISPINFOEXW ptr

 type NMTVDISPINFOEX as NMTVDISPINFOEXA
 type LPNMTVDISPINFOEX as LPNMTVDISPINFOEXA

 type TV_DISPINFOEXA as NMTVDISPINFOEXA
 type TV_DISPINFOEXW as NMTVDISPINFOEXW
 type TV_DISPINFOEX as NMTVDISPINFOEX

const TVN_ITEMEXPANDINGA = culng(TVN_FIRST - 5)
const TVN_ITEMEXPANDINGW = culng(TVN_FIRST - 54)
const TVN_ITEMEXPANDEDA = culng(TVN_FIRST - 6)
const TVN_ITEMEXPANDEDW = culng(TVN_FIRST - 55)
const TVN_BEGINDRAGA = culng(TVN_FIRST - 7)
const TVN_BEGINDRAGW = culng(TVN_FIRST - 56)
const TVN_BEGINRDRAGA = culng(TVN_FIRST - 8)
const TVN_BEGINRDRAGW = culng(TVN_FIRST - 57)
const TVN_DELETEITEMA = culng(TVN_FIRST - 9)
const TVN_DELETEITEMW = culng(TVN_FIRST - 58)
const TVN_BEGINLABELEDITA = culng(TVN_FIRST - 10)
const TVN_BEGINLABELEDITW = culng(TVN_FIRST - 59)
const TVN_ENDLABELEDITA = culng(TVN_FIRST - 11)
const TVN_ENDLABELEDITW = culng(TVN_FIRST - 60)
const TVN_KEYDOWN = culng(TVN_FIRST - 12)
const TVN_GETINFOTIPA = culng(TVN_FIRST - 13)
const TVN_GETINFOTIPW = culng(TVN_FIRST - 14)
const TVN_SINGLEEXPAND = culng(TVN_FIRST - 15)
const TVNRET_DEFAULT = 0
const TVNRET_SKIPOLD = 1
const TVNRET_SKIPNEW = 2

 const TVN_ITEMCHANGINGA = culng(TVN_FIRST - 16)
 const TVN_ITEMCHANGINGW = culng(TVN_FIRST - 17)
 const TVN_ITEMCHANGEDA = culng(TVN_FIRST - 18)
 const TVN_ITEMCHANGEDW = culng(TVN_FIRST - 19)
 const TVN_ASYNCDRAW = culng(TVN_FIRST - 20)

type TV_KEYDOWN as NMTVKEYDOWN

type tagTVKEYDOWN field = 1
 hdr as NMHDR
 wVKey as WORD
 flags as UINT
end type

type NMTVKEYDOWN as tagTVKEYDOWN
type LPNMTVKEYDOWN as tagTVKEYDOWN ptr

 const TVN_SELCHANGING = TVN_SELCHANGINGA
 const TVN_SELCHANGED = TVN_SELCHANGEDA
 const TVN_GETDISPINFO = TVN_GETDISPINFOA
 const TVN_SETDISPINFO = TVN_SETDISPINFOA
 const TVN_ITEMEXPANDING = TVN_ITEMEXPANDINGA
 const TVN_ITEMEXPANDED = TVN_ITEMEXPANDEDA
 const TVN_BEGINDRAG = TVN_BEGINDRAGA
 const TVN_BEGINRDRAG = TVN_BEGINRDRAGA
 const TVN_DELETEITEM = TVN_DELETEITEMA
 const TVN_BEGINLABELEDIT = TVN_BEGINLABELEDITA
 const TVN_ENDLABELEDIT = TVN_ENDLABELEDITA


type tagNMTVCUSTOMDRAW
 nmcd as NMCUSTOMDRAW
 clrText as COLORREF
 clrTextBk as COLORREF
 iLevel as long
end type

type NMTVCUSTOMDRAW as tagNMTVCUSTOMDRAW
type LPNMTVCUSTOMDRAW as tagNMTVCUSTOMDRAW ptr

type tagNMTVGETINFOTIPA
 hdr as NMHDR
 pszText as LPSTR
 cchTextMax as long
 hItem as HTREEITEM
 lParam as LPARAM
end type

type NMTVGETINFOTIPA as tagNMTVGETINFOTIPA
type LPNMTVGETINFOTIPA as tagNMTVGETINFOTIPA ptr

type tagNMTVGETINFOTIPW
 hdr as NMHDR
 pszText as LPWSTR
 cchTextMax as long
 hItem as HTREEITEM
 lParam as LPARAM
end type

type NMTVGETINFOTIPW as tagNMTVGETINFOTIPW
type LPNMTVGETINFOTIPW as tagNMTVGETINFOTIPW ptr

 const TVN_GETINFOTIP = TVN_GETINFOTIPA
 type NMTVGETINFOTIP as NMTVGETINFOTIPA
 type LPNMTVGETINFOTIP as LPNMTVGETINFOTIPA

const TVCDRF_NOIMAGES = &h10000

 type tagTVITEMCHANGE
 hdr as NMHDR
 uChanged as UINT
 hItem as HTREEITEM
 uStateNew as UINT
 uStateOld as UINT
 lParam as LPARAM
 end type

 type NMTVITEMCHANGE as tagTVITEMCHANGE

 type tagNMTVASYNCDRAW
 hdr as NMHDR
 pimldp as IMAGELISTDRAWPARAMS ptr
 hr as HRESULT
 hItem as HTREEITEM
 lParam as LPARAM
 dwRetFlags as DWORD
 iRetImageIndex as long
 end type

 type NMTVASYNCDRAW as tagNMTVASYNCDRAW

 const TVN_ITEMCHANGING = TVN_ITEMCHANGINGA
 const TVN_ITEMCHANGED = TVN_ITEMCHANGEDA



const CBEIF_TEXT = &h1
const CBEIF_IMAGE = &h2
const CBEIF_SELECTEDIMAGE = &h4
const CBEIF_OVERLAY = &h8
const CBEIF_INDENT = &h10
const CBEIF_LPARAM = &h20
const CBEIF_DI_SETITEM = &h10000000

type tagCOMBOBOXEXITEMA
 mask as UINT
 iItem as INT_PTR
 pszText as LPSTR
 cchTextMax as long
 iImage as long
 iSelectedImage as long
 iOverlay as long
 iIndent as long
 lParam as LPARAM
end type

type COMBOBOXEXITEMA as tagCOMBOBOXEXITEMA
type PCOMBOBOXEXITEMA as tagCOMBOBOXEXITEMA ptr
type PCCOMBOEXITEMA as const COMBOBOXEXITEMA ptr

type tagCOMBOBOXEXITEMW
 mask as UINT
 iItem as INT_PTR
 pszText as LPWSTR
 cchTextMax as long
 iImage as long
 iSelectedImage as long
 iOverlay as long
 iIndent as long
 lParam as LPARAM
end type

type COMBOBOXEXITEMW as tagCOMBOBOXEXITEMW
type PCOMBOBOXEXITEMW as tagCOMBOBOXEXITEMW ptr
type PCCOMBOEXITEMW as const COMBOBOXEXITEMW ptr

 type COMBOBOXEXITEM as COMBOBOXEXITEMA
 type PCOMBOBOXEXITEM as PCOMBOBOXEXITEMA

const CBEM_INSERTITEMA = WM_USER + 1
const CBEM_SETIMAGELIST = WM_USER + 2
const CBEM_GETIMAGELIST = WM_USER + 3
const CBEM_GETITEMA = WM_USER + 4
const CBEM_SETITEMA = WM_USER + 5
const CBEM_DELETEITEM = CB_DELETESTRING
const CBEM_GETCOMBOCONTROL = WM_USER + 6
const CBEM_GETEDITCONTROL = WM_USER + 7
const CBEM_SETEXSTYLE = WM_USER + 8
const CBEM_SETEXTENDEDSTYLE = WM_USER + 14
const CBEM_GETEXSTYLE = WM_USER + 9
const CBEM_GETEXTENDEDSTYLE = WM_USER + 9
const CBEM_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
const CBEM_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT
const CBEM_HASEDITCHANGED = WM_USER + 10
const CBEM_INSERTITEMW = WM_USER + 11
const CBEM_SETITEMW = WM_USER + 12
const CBEM_GETITEMW = WM_USER + 13

 const CBEM_INSERTITEM = CBEM_INSERTITEMA
 const CBEM_SETITEM = CBEM_SETITEMA
 const CBEM_GETITEM = CBEM_GETITEMA

const CBEM_SETWINDOWTHEME = CCM_SETWINDOWTHEME
const CBES_EX_NOEDITIMAGE = &h1
const CBES_EX_NOEDITIMAGEINDENT = &h2
const CBES_EX_PATHWORDBREAKPROC = &h4
const CBES_EX_NOSIZELIMIT = &h8
const CBES_EX_CASESENSITIVE = &h10


type NMCOMBOBOXEXA
 hdr as NMHDR
 ceItem as COMBOBOXEXITEMA
end type

type PNMCOMBOBOXEXA as NMCOMBOBOXEXA ptr

type NMCOMBOBOXEXW
 hdr as NMHDR
 ceItem as COMBOBOXEXITEMW
end type

type PNMCOMBOBOXEXW as NMCOMBOBOXEXW ptr

 type NMCOMBOBOXEX as NMCOMBOBOXEXA
 type PNMCOMBOBOXEX as PNMCOMBOBOXEXA

const CBEN_GETDISPINFOA = culng(CBEN_FIRST - 0)

 const CBEN_GETDISPINFO = CBEN_GETDISPINFOA

const CBEN_INSERTITEM = culng(CBEN_FIRST - 1)
const CBEN_DELETEITEM = culng(CBEN_FIRST - 2)
const CBEN_BEGINEDIT = culng(CBEN_FIRST - 4)
const CBEN_ENDEDITA = culng(CBEN_FIRST - 5)
const CBEN_ENDEDITW = culng(CBEN_FIRST - 6)
const CBEN_GETDISPINFOW = culng(CBEN_FIRST - 7)


const CBEN_DRAGBEGINA = culng(CBEN_FIRST - 8)
const CBEN_DRAGBEGINW = culng(CBEN_FIRST - 9)

 const CBEN_DRAGBEGIN = CBEN_DRAGBEGINA
 const CBEN_ENDEDIT = CBEN_ENDEDITA

const CBENF_KILLFOCUS = 1
const CBENF_RETURN = 2
const CBENF_ESCAPE = 3
const CBENF_DROPDOWN = 4
const CBEMAXSTRLEN = 260

type NMCBEDRAGBEGINW
 hdr as NMHDR
 iItemid as long
 szText as wstring * 260
end type

type LPNMCBEDRAGBEGINW as NMCBEDRAGBEGINW ptr
type PNMCBEDRAGBEGINW as NMCBEDRAGBEGINW ptr

type NMCBEDRAGBEGINA
 hdr as NMHDR
 iItemid as long
 szText as zstring * 260
end type

type LPNMCBEDRAGBEGINA as NMCBEDRAGBEGINA ptr
type PNMCBEDRAGBEGINA as NMCBEDRAGBEGINA ptr

 type NMCBEDRAGBEGIN as NMCBEDRAGBEGINA
 type LPNMCBEDRAGBEGIN as LPNMCBEDRAGBEGINA
 type PNMCBEDRAGBEGIN as PNMCBEDRAGBEGINA

type NMCBEENDEDITW
 hdr as NMHDR
 fChanged as WINBOOL
 iNewSelection as long
 szText as wstring * 260
 iWhy as long
end type

type LPNMCBEENDEDITW as NMCBEENDEDITW ptr
type PNMCBEENDEDITW as NMCBEENDEDITW ptr

type NMCBEENDEDITA
 hdr as NMHDR
 fChanged as WINBOOL
 iNewSelection as long
 szText as zstring * 260
 iWhy as long
end type

type LPNMCBEENDEDITA as NMCBEENDEDITA ptr
type PNMCBEENDEDITA as NMCBEENDEDITA ptr

 type NMCBEENDEDIT as NMCBEENDEDITA
 type LPNMCBEENDEDIT as LPNMCBEENDEDITA
 type PNMCBEENDEDIT as PNMCBEENDEDITA



const TCS_SCROLLOPPOSITE = &h1
const TCS_BOTTOM = &h2
const TCS_RIGHT = &h2
const TCS_MULTISELECT = &h4
const TCS_FLATBUTTONS = &h8
const TCS_FORCEICONLEFT = &h10
const TCS_FORCELABELLEFT = &h20
const TCS_HOTTRACK = &h40
const TCS_VERTICAL = &h80
const TCS_TABS = &h00
const TCS_BUTTONS = &h100
const TCS_SINGLELINE = &h00
const TCS_MULTILINE = &h200
const TCS_RIGHTJUSTIFY = &h00
const TCS_FIXEDWIDTH = &h400
const TCS_RAGGEDRIGHT = &h800
const TCS_FOCUSONBUTTONDOWN = &h1000
const TCS_OWNERDRAWFIXED = &h2000
const TCS_TOOLTIPS = &h4000
const TCS_FOCUSNEVER = &h8000
const TCS_EX_FLATSEPARATORS = &h1
const TCS_EX_REGISTERDROP = &h2
const TCM_GETIMAGELIST = TCM_FIRST + 2
const TCM_SETIMAGELIST = TCM_FIRST + 3
const TCM_GETITEMCOUNT = TCM_FIRST + 4
const TCIF_TEXT = &h1
const TCIF_IMAGE = &h2
const TCIF_RTLREADING = &h4
const TCIF_PARAM = &h8
const TCIF_STATE = &h10
const TCIS_BUTTONPRESSED = &h1
const TCIS_HIGHLIGHTED = &h2
type TC_ITEMHEADERA as TCITEMHEADERA
type TC_ITEMHEADERW as TCITEMHEADERW

type tagTCITEMHEADERA
 mask as UINT
 lpReserved1 as UINT
 lpReserved2 as UINT
 pszText as LPSTR
 cchTextMax as long
 iImage as long
end type

type TCITEMHEADERA as tagTCITEMHEADERA
type LPTCITEMHEADERA as tagTCITEMHEADERA ptr

type tagTCITEMHEADERW
 mask as UINT
 lpReserved1 as UINT
 lpReserved2 as UINT
 pszText as LPWSTR
 cchTextMax as long
 iImage as long
end type

type TCITEMHEADERW as tagTCITEMHEADERW
type LPTCITEMHEADERW as tagTCITEMHEADERW ptr

 type TCITEMHEADER as TCITEMHEADERA

type TC_ITEMHEADER as TCITEMHEADER

 type LPTCITEMHEADER as LPTCITEMHEADERA

type TC_ITEMA as TCITEMA
type TC_ITEMW as TCITEMW

type tagTCITEMA
 mask as UINT
 dwState as DWORD
 dwStateMask as DWORD
 pszText as LPSTR
 cchTextMax as long
 iImage as long
 lParam as LPARAM
end type

type TCITEMA as tagTCITEMA
type LPTCITEMA as tagTCITEMA ptr

type tagTCITEMW
 mask as UINT
 dwState as DWORD
 dwStateMask as DWORD
 pszText as LPWSTR
 cchTextMax as long
 iImage as long
 lParam as LPARAM
end type

type TCITEMW as tagTCITEMW
type LPTCITEMW as tagTCITEMW ptr

 type TCITEM as TCITEMA

type TC_ITEM as TCITEM

 type LPTCITEM as LPTCITEMA

const TCM_GETITEMA = TCM_FIRST + 5
const TCM_GETITEMW = TCM_FIRST + 60

 const TCM_GETITEM = TCM_GETITEMA

const TCM_SETITEMA = TCM_FIRST + 6
const TCM_SETITEMW = TCM_FIRST + 61

 const TCM_SETITEM = TCM_SETITEMA

const TCM_INSERTITEMA = TCM_FIRST + 7
const TCM_INSERTITEMW = TCM_FIRST + 62

 const TCM_INSERTITEM = TCM_INSERTITEMA

const TCM_DELETEITEM = TCM_FIRST + 8
const TCM_DELETEALLITEMS = TCM_FIRST + 9
const TCM_GETITEMRECT = TCM_FIRST + 10
const TCM_GETCURSEL = TCM_FIRST + 11
const TCM_SETCURSEL = TCM_FIRST + 12
const TCHT_NOWHERE = &h1
const TCHT_ONITEMICON = &h2
const TCHT_ONITEMLABEL = &h4
const TCHT_ONITEM = TCHT_ONITEMICON or TCHT_ONITEMLABEL
type LPTC_HITTESTINFO as LPTCHITTESTINFO
type TC_HITTESTINFO as TCHITTESTINFO

type tagTCHITTESTINFO
 pt as POINT
 flags as UINT
end type

type TCHITTESTINFO as tagTCHITTESTINFO
type LPTCHITTESTINFO as tagTCHITTESTINFO ptr
const TCM_HITTEST = TCM_FIRST + 13
const TCM_SETITEMEXTRA = TCM_FIRST + 14
const TCM_ADJUSTRECT = TCM_FIRST + 40
const TCM_SETITEMSIZE = TCM_FIRST + 41
const TCM_REMOVEIMAGE = TCM_FIRST + 42
const TCM_SETPADDING = TCM_FIRST + 43
const TCM_GETROWCOUNT = TCM_FIRST + 44
const TCM_GETTOOLTIPS = TCM_FIRST + 45
const TCM_SETTOOLTIPS = TCM_FIRST + 46
const TCM_GETCURFOCUS = TCM_FIRST + 47
const TCM_SETCURFOCUS = TCM_FIRST + 48
const TCM_SETMINTABWIDTH = TCM_FIRST + 49
const TCM_DESELECTALL = TCM_FIRST + 50
const TCM_HIGHLIGHTITEM = TCM_FIRST + 51
const TCM_SETEXTENDEDSTYLE = TCM_FIRST + 52
const TCM_GETEXTENDEDSTYLE = TCM_FIRST + 53
const TCM_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
const TCM_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT
const TCN_KEYDOWN = culng(TCN_FIRST - 0)
type TC_KEYDOWN as NMTCKEYDOWN

type tagTCKEYDOWN field = 1
 hdr as NMHDR
 wVKey as WORD
 flags as UINT
end type

type NMTCKEYDOWN as tagTCKEYDOWN
const TCN_SELCHANGE = culng(TCN_FIRST - 1)
const TCN_SELCHANGING = culng(TCN_FIRST - 2)
const TCN_GETOBJECT = culng(TCN_FIRST - 3)
const TCN_FOCUSCHANGE = culng(TCN_FIRST - 4)


const ACS_CENTER = &h1
const ACS_TRANSPARENT = &h2
const ACS_AUTOPLAY = &h4
const ACS_TIMER = &h8
const ACM_OPENA = WM_USER + 100
const ACM_OPENW = WM_USER + 103

 const ACM_OPEN = ACM_OPENA

const ACM_PLAY = WM_USER + 101
const ACM_STOP = WM_USER + 102
const ACM_ISPLAYING = WM_USER + 104
const ACN_START = 1
const ACN_STOP = 2


type MONTHDAYSTATE as DWORD
type LPMONTHDAYSTATE as DWORD ptr
const MCM_FIRST = &h1000
const MCM_GETCURSEL = MCM_FIRST + 1
const MCM_SETCURSEL = MCM_FIRST + 2
const MCM_GETMAXSELCOUNT = MCM_FIRST + 3
const MCM_SETMAXSELCOUNT = MCM_FIRST + 4
const MCM_GETSELRANGE = MCM_FIRST + 5
const MCM_SETSELRANGE = MCM_FIRST + 6
const MCM_GETMONTHRANGE = MCM_FIRST + 7
const MCM_SETDAYSTATE = MCM_FIRST + 8
const MCM_GETMINREQRECT = MCM_FIRST + 9
const MCM_SETCOLOR = MCM_FIRST + 10
const MCM_GETCOLOR = MCM_FIRST + 11
const MCSC_BACKGROUND = 0
const MCSC_TEXT = 1
const MCSC_TITLEBK = 2
const MCSC_TITLETEXT = 3
const MCSC_MONTHBK = 4
const MCSC_TRAILINGTEXT = 5
const MCM_SETTODAY = MCM_FIRST + 12
const MCM_GETTODAY = MCM_FIRST + 13
const MCM_HITTEST = MCM_FIRST + 14

type MCHITTESTINFO
 cbSize as UINT
 pt as POINT
 uHit as UINT
 st as SYSTEMTIME

end type

type PMCHITTESTINFO as MCHITTESTINFO ptr
const MCHT_TITLE = &h10000
const MCHT_CALENDAR = &h20000
const MCHT_TODAYLINK = &h30000


const MCHT_NEXT = &h1000000
const MCHT_PREV = &h2000000
const MCHT_NOWHERE = &h00
const MCHT_TITLEBK = MCHT_TITLE
const MCHT_TITLEMONTH = MCHT_TITLE or &h1
const MCHT_TITLEYEAR = MCHT_TITLE or &h2
const MCHT_TITLEBTNNEXT = (MCHT_TITLE or MCHT_NEXT) or &h3
const MCHT_TITLEBTNPREV = (MCHT_TITLE or MCHT_PREV) or &h3
const MCHT_CALENDARBK = MCHT_CALENDAR
const MCHT_CALENDARDATE = MCHT_CALENDAR or &h1
const MCHT_CALENDARDATENEXT = MCHT_CALENDARDATE or MCHT_NEXT
const MCHT_CALENDARDATEPREV = MCHT_CALENDARDATE or MCHT_PREV
const MCHT_CALENDARDAY = MCHT_CALENDAR or &h2
const MCHT_CALENDARWEEKNUM = MCHT_CALENDAR or &h3
const MCHT_CALENDARDATEMIN = MCHT_CALENDAR or &h4
const MCHT_CALENDARDATEMAX = MCHT_CALENDAR or &h5
const MCM_SETFIRSTDAYOFWEEK = MCM_FIRST + 15
const MCM_GETFIRSTDAYOFWEEK = MCM_FIRST + 16
const MCM_GETRANGE = MCM_FIRST + 17
const MCM_SETRANGE = MCM_FIRST + 18
const MCM_GETMONTHDELTA = MCM_FIRST + 19
const MCM_SETMONTHDELTA = MCM_FIRST + 20
const MCM_GETMAXTODAYWIDTH = MCM_FIRST + 21
const MCM_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
const MCM_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT


type tagNMSELCHANGE
 nmhdr as NMHDR
 stSelStart as SYSTEMTIME
 stSelEnd as SYSTEMTIME
end type

type NMSELCHANGE as tagNMSELCHANGE
type LPNMSELCHANGE as tagNMSELCHANGE ptr
const MCN_SELCHANGE = culng(MCN_FIRST - 3)

type tagNMDAYSTATE
 nmhdr as NMHDR
 stStart as SYSTEMTIME
 cDayState as long
 prgDayState as LPMONTHDAYSTATE
end type

type NMDAYSTATE as tagNMDAYSTATE
type LPNMDAYSTATE as tagNMDAYSTATE ptr
const MCN_GETDAYSTATE = culng(MCN_FIRST + 3)
type NMSELECT as NMSELCHANGE
type LPNMSELECT as NMSELCHANGE ptr
const MCN_SELECT = MCN_FIRST

type tagNMVIEWCHANGE
 nmhdr as NMHDR
 dwOldView as DWORD
 dwNewView as DWORD
end type

type NMVIEWCHANGE as tagNMVIEWCHANGE
type LPNMVIEWCHANGE as tagNMVIEWCHANGE ptr
const MCN_VIEWCHANGE = culng(MCN_FIRST - 4)
const MCS_DAYSTATE = &h1
const MCS_MULTISELECT = &h2
const MCS_WEEKNUMBERS = &h4
const MCS_NOTODAYCIRCLE = &h8
const MCS_NOTODAY = &h10


const GMR_VISIBLE = 0
const GMR_DAYSTATE = 1



const DTM_FIRST = &h1000
const DTM_GETSYSTEMTIME = DTM_FIRST + 1
const DTM_SETSYSTEMTIME = DTM_FIRST + 2
const DTM_GETRANGE = DTM_FIRST + 3
const DTM_SETRANGE = DTM_FIRST + 4
const DTM_SETFORMATA = DTM_FIRST + 5
const DTM_SETFORMATW = DTM_FIRST + 50

 const DTM_SETFORMAT = DTM_SETFORMATA

const DTM_SETMCCOLOR = DTM_FIRST + 6
const DTM_GETMCCOLOR = DTM_FIRST + 7
const DTM_GETMONTHCAL = DTM_FIRST + 8
const DTM_SETMCFONT = DTM_FIRST + 9
const DTM_GETMCFONT = DTM_FIRST + 10


const DTS_UPDOWN = &h1
const DTS_SHOWNONE = &h2
const DTS_SHORTDATEFORMAT = &h00
const DTS_LONGDATEFORMAT = &h4
const DTS_SHORTDATECENTURYFORMAT = &hc
const DTS_TIMEFORMAT = &h9
const DTS_APPCANPARSE = &h10
const DTS_RIGHTALIGN = &h20
const DTN_DATETIMECHANGE = culng(DTN_FIRST2 - 6)

type tagNMDATETIMECHANGE
 nmhdr as NMHDR
 dwFlags as DWORD
 st as SYSTEMTIME
end type

type NMDATETIMECHANGE as tagNMDATETIMECHANGE
type LPNMDATETIMECHANGE as tagNMDATETIMECHANGE ptr
const DTN_USERSTRINGA = culng(DTN_FIRST2 - 5)
const DTN_USERSTRINGW = culng(DTN_FIRST - 5)

type tagNMDATETIMESTRINGA
 nmhdr as NMHDR
 pszUserString as LPCSTR
 st as SYSTEMTIME
 dwFlags as DWORD
end type

type NMDATETIMESTRINGA as tagNMDATETIMESTRINGA
type LPNMDATETIMESTRINGA as tagNMDATETIMESTRINGA ptr

type tagNMDATETIMESTRINGW
 nmhdr as NMHDR
 pszUserString as LPCWSTR
 st as SYSTEMTIME
 dwFlags as DWORD
end type

type NMDATETIMESTRINGW as tagNMDATETIMESTRINGW
type LPNMDATETIMESTRINGW as tagNMDATETIMESTRINGW ptr

 const DTN_USERSTRING = DTN_USERSTRINGA
 type NMDATETIMESTRING as NMDATETIMESTRINGA
 type LPNMDATETIMESTRING as LPNMDATETIMESTRINGA

const DTN_WMKEYDOWNA = culng(DTN_FIRST2 - 4)
const DTN_WMKEYDOWNW = culng(DTN_FIRST - 4)

type tagNMDATETIMEWMKEYDOWNA
 nmhdr as NMHDR
 nVirtKey as long
 pszFormat as LPCSTR
 st as SYSTEMTIME
end type

type NMDATETIMEWMKEYDOWNA as tagNMDATETIMEWMKEYDOWNA
type LPNMDATETIMEWMKEYDOWNA as tagNMDATETIMEWMKEYDOWNA ptr

type tagNMDATETIMEWMKEYDOWNW
 nmhdr as NMHDR
 nVirtKey as long
 pszFormat as LPCWSTR
 st as SYSTEMTIME
end type

type NMDATETIMEWMKEYDOWNW as tagNMDATETIMEWMKEYDOWNW
type LPNMDATETIMEWMKEYDOWNW as tagNMDATETIMEWMKEYDOWNW ptr

 const DTN_WMKEYDOWN = DTN_WMKEYDOWNA
 type NMDATETIMEWMKEYDOWN as NMDATETIMEWMKEYDOWNA
 type LPNMDATETIMEWMKEYDOWN as LPNMDATETIMEWMKEYDOWNA

const DTN_FORMATA = culng(DTN_FIRST2 - 3)
const DTN_FORMATW = culng(DTN_FIRST - 3)

type tagNMDATETIMEFORMATA
 nmhdr as NMHDR
 pszFormat as LPCSTR
 st as SYSTEMTIME
 pszDisplay as LPCSTR
 szDisplay as zstring * 64
end type

type NMDATETIMEFORMATA as tagNMDATETIMEFORMATA
type LPNMDATETIMEFORMATA as tagNMDATETIMEFORMATA ptr

type tagNMDATETIMEFORMATW
 nmhdr as NMHDR
 pszFormat as LPCWSTR
 st as SYSTEMTIME
 pszDisplay as LPCWSTR
 szDisplay as wstring * 64
end type

type NMDATETIMEFORMATW as tagNMDATETIMEFORMATW
type LPNMDATETIMEFORMATW as tagNMDATETIMEFORMATW ptr

 const DTN_FORMAT = DTN_FORMATA
 type NMDATETIMEFORMAT as NMDATETIMEFORMATA
 type LPNMDATETIMEFORMAT as LPNMDATETIMEFORMATA

const DTN_FORMATQUERYA = culng(DTN_FIRST2 - 2)
const DTN_FORMATQUERYW = culng(DTN_FIRST - 2)

type tagNMDATETIMEFORMATQUERYA
 nmhdr as NMHDR
 pszFormat as LPCSTR
 szMax as SIZE
end type

type NMDATETIMEFORMATQUERYA as tagNMDATETIMEFORMATQUERYA
type LPNMDATETIMEFORMATQUERYA as tagNMDATETIMEFORMATQUERYA ptr

type tagNMDATETIMEFORMATQUERYW
 nmhdr as NMHDR
 pszFormat as LPCWSTR
 szMax as SIZE
end type

type NMDATETIMEFORMATQUERYW as tagNMDATETIMEFORMATQUERYW
type LPNMDATETIMEFORMATQUERYW as tagNMDATETIMEFORMATQUERYW ptr

 const DTN_FORMATQUERY = DTN_FORMATQUERYA
 type NMDATETIMEFORMATQUERY as NMDATETIMEFORMATQUERYA
 type LPNMDATETIMEFORMATQUERY as LPNMDATETIMEFORMATQUERYA

const DTN_DROPDOWN = culng(DTN_FIRST2 - 1)
const DTN_CLOSEUP = DTN_FIRST2
const GDTR_MIN = &h1
const GDTR_MAX = &h2
const GDT_ERROR = -1
const GDT_VALID = 0
const GDT_NONE = 1
const IPM_CLEARADDRESS = WM_USER + 100
const IPM_SETADDRESS = WM_USER + 101
const IPM_GETADDRESS = WM_USER + 102
const IPM_SETRANGE = WM_USER + 103
const IPM_SETFOCUS = WM_USER + 104
const IPM_ISBLANK = WM_USER + 105


const IPN_FIELDCHANGED = culng(IPN_FIRST - 0)

type tagNMIPADDRESS
 hdr as NMHDR
 iField as long
 iValue as long
end type

type NMIPADDRESS as tagNMIPADDRESS
type LPNMIPADDRESS as tagNMIPADDRESS ptr


const PGS_VERT = &h00
const PGS_HORZ = &h1
const PGS_AUTOSCROLL = &h2
const PGS_DRAGNDROP = &h4
const PGF_INVISIBLE = 0
const PGF_NORMAL = 1
const PGF_GRAYED = 2
const PGF_DEPRESSED = 4
const PGF_HOT = 8
const PGB_TOPORLEFT = 0
const PGB_BOTTOMORRIGHT = 1
const PGM_SETCHILD = PGM_FIRST + 1
const PGM_RECALCSIZE = PGM_FIRST + 2
const PGM_FORWARDMOUSE = PGM_FIRST + 3
const PGM_SETBKCOLOR = PGM_FIRST + 4
const PGM_GETBKCOLOR = PGM_FIRST + 5
const PGM_SETBORDER = PGM_FIRST + 6
const PGM_GETBORDER = PGM_FIRST + 7
const PGM_SETPOS = PGM_FIRST + 8
const PGM_GETPOS = PGM_FIRST + 9
const PGM_SETBUTTONSIZE = PGM_FIRST + 10
const PGM_GETBUTTONSIZE = PGM_FIRST + 11
const PGM_GETBUTTONSTATE = PGM_FIRST + 12
const PGM_GETDROPTARGET = CCM_GETDROPTARGET
const PGM_SETSCROLLINFO = PGM_FIRST + 13
const PGN_SCROLL = culng(PGN_FIRST - 1)
const PGF_SCROLLUP = 1
const PGF_SCROLLDOWN = 2
const PGF_SCROLLLEFT = 4
const PGF_SCROLLRIGHT = 8
const PGK_SHIFT = 1
const PGK_CONTROL = 2
const PGK_MENU = 4

type NMPGSCROLL field = 1
 hdr as NMHDR
 fwKeys as WORD
 rcParent as RECT
 iDir as long
 iXpos as long
 iYpos as long
 iScroll as long
end type

type LPNMPGSCROLL as NMPGSCROLL ptr
const PGN_CALCSIZE = culng(PGN_FIRST - 2)
const PGF_CALCWIDTH = 1
const PGF_CALCHEIGHT = 2

type NMPGCALCSIZE
 hdr as NMHDR
 dwFlag as DWORD
 iWidth as long
 iHeight as long
end type

type LPNMPGCALCSIZE as NMPGCALCSIZE ptr
const PGN_HOTITEMCHANGE = culng(PGN_FIRST - 3)

type tagNMPGHOTITEM
 hdr as NMHDR
 idOld as long
 idNew as long
 dwFlags as DWORD
end type

type NMPGHOTITEM as tagNMPGHOTITEM
type LPNMPGHOTITEM as tagNMPGHOTITEM ptr


const NFS_EDIT = &h1
const NFS_STATIC = &h2
const NFS_LISTCOMBO = &h4
const NFS_BUTTON = &h8
const NFS_ALL = &h10
const NFS_USEFONTASSOC = &h20


const BUTTON_IMAGELIST_ALIGN_LEFT = 0
const BUTTON_IMAGELIST_ALIGN_RIGHT = 1
const BUTTON_IMAGELIST_ALIGN_TOP = 2
const BUTTON_IMAGELIST_ALIGN_BOTTOM = 3
const BUTTON_IMAGELIST_ALIGN_CENTER = 4

type BUTTON_IMAGELIST
 himl as HIMAGELIST
 margin as RECT
 uAlign as UINT
end type

type PBUTTON_IMAGELIST as BUTTON_IMAGELIST ptr
const BCM_GETIDEALSIZE = BCM_FIRST + &h1
const BCM_SETIMAGELIST = BCM_FIRST + &h2
const BCM_GETIMAGELIST = BCM_FIRST + &h3
const BCM_SETTEXTMARGIN = BCM_FIRST + &h4
const BCM_GETTEXTMARGIN = BCM_FIRST + &h5

type tagNMBCHOTITEM
 hdr as NMHDR
 dwFlags as DWORD
end type

type NMBCHOTITEM as tagNMBCHOTITEM
type LPNMBCHOTITEM as tagNMBCHOTITEM ptr
const BCN_HOTITEMCHANGE = culng(BCN_FIRST + &h1)
const BST_HOT = &h0200






const EM_SETCUEBANNER = ECM_FIRST + 1
const EM_GETCUEBANNER = ECM_FIRST + 2

type _tagEDITBALLOONTIP
 cbStruct as DWORD
 pszTitle as LPCWSTR
 pszText as LPCWSTR
 ttiIcon as INT_
end type

type EDITBALLOONTIP as _tagEDITBALLOONTIP
type PEDITBALLOONTIP as _tagEDITBALLOONTIP ptr
const EM_SHOWBALLOONTIP = ECM_FIRST + 3
const EM_HIDEBALLOONTIP = ECM_FIRST + 4


const EM_NOSETFOCUS = ECM_FIRST + 7
const EM_TAKEFOCUS = ECM_FIRST + 8




const CB_SETMINVISIBLE = CBM_FIRST + 1
const CB_GETMINVISIBLE = CBM_FIRST + 2
const CB_SETCUEBANNER = CBM_FIRST + 3
const CB_GETCUEBANNER = CBM_FIRST + 4


const LWS_TRANSPARENT = &h1
const LWS_IGNORERETURN = &h2


const LIF_ITEMINDEX = &h1
const LIF_STATE = &h2
const LIF_ITEMID = &h4
const LIF_URL = &h8
const LIS_FOCUSED = &h1
const LIS_ENABLED = &h2
const LIS_VISITED = &h4


const LM_HITTEST = WM_USER + &h300
const LM_GETIDEALHEIGHT = WM_USER + &h301
const LM_SETITEM = WM_USER + &h302
const LM_GETITEM = WM_USER + &h303


declare sub InitMUILanguage(byval uiLang as LANGID)
declare function GetMUILanguage() as LANGID
const DA_LAST = &h7fffffff
const DA_ERR = -1

type PFNDAENUMCALLBACK as function(byval p as any ptr, byval pData as any ptr) as long
type PFNDAENUMCALLBACKCONST as function(byval p as const any ptr, byval pData as any ptr) as long
type PFNDACOMPARE as function(byval p1 as any ptr, byval p2 as any ptr, byval lParam as LPARAM) as long
type PFNDACOMPARECONST as function(byval p1 as const any ptr, byval p2 as const any ptr, byval lParam as LPARAM) as long
type HDSA as _DSA ptr

declare function DSA_Create(byval cbItem as long, byval cItemGrow as long) as HDSA
declare function DSA_Destroy(byval hdsa as HDSA) as WINBOOL
declare sub DSA_DestroyCallback(byval hdsa as HDSA, byval pfnCB as PFNDAENUMCALLBACK, byval pData as any ptr)
declare function DSA_DeleteItem(byval hdsa as HDSA, byval i as long) as WINBOOL
declare function DSA_DeleteAllItems(byval hdsa as HDSA) as WINBOOL
declare sub DSA_EnumCallback(byval hdsa as HDSA, byval pfnCB as PFNDAENUMCALLBACK, byval pData as any ptr)
declare function DSA_InsertItem(byval hdsa as HDSA, byval i as long, byval pitem as const any ptr) as long
declare function DSA_GetItemPtr(byval hdsa as HDSA, byval i as long) as PVOID
declare function DSA_GetItem(byval hdsa as HDSA, byval i as long, byval pitem as any ptr) as WINBOOL
declare function DSA_SetItem(byval hdsa as HDSA, byval i as long, byval pitem as const any ptr) as WINBOOL


const DSA_APPEND = DA_LAST
const DSA_ERR = DA_ERR
type PFNDSAENUMCALLBACK as PFNDAENUMCALLBACK
type PFNDSAENUMCALLBACKCONST as PFNDAENUMCALLBACKCONST
type PFNDSACOMPARE as PFNDACOMPARE
type PFNDSACOMPARECONST as PFNDACOMPARECONST
type HDPA as _DPA ptr

declare function DPA_Create(byval cItemGrow as long) as HDPA
declare function DPA_CreateEx(byval cpGrow as long, byval hheap as HANDLE) as HDPA
declare function DPA_Clone(byval hdpa as const HDPA, byval hdpaNew as HDPA) as HDPA
declare function DPA_Destroy(byval hdpa as HDPA) as WINBOOL
declare sub DPA_DestroyCallback(byval hdpa as HDPA, byval pfnCB as PFNDAENUMCALLBACK, byval pData as any ptr)
declare function DPA_DeletePtr(byval hdpa as HDPA, byval i as long) as PVOID
declare function DPA_DeleteAllPtrs(byval hdpa as HDPA) as WINBOOL
declare sub DPA_EnumCallback(byval hdpa as HDPA, byval pfnCB as PFNDAENUMCALLBACK, byval pData as any ptr)
declare function DPA_Grow(byval pdpa as HDPA, byval cp as long) as WINBOOL
declare function DPA_InsertPtr(byval hdpa as HDPA, byval i as long, byval p as any ptr) as long
declare function DPA_SetPtr(byval hdpa as HDPA, byval i as long, byval p as any ptr) as WINBOOL
declare function DPA_GetPtr(byval hdpa as HDPA, byval i as INT_PTR) as PVOID
declare function DPA_GetPtrIndex(byval hdpa as HDPA, byval p as const any ptr) as long



declare function DPA_Sort(byval hdpa as HDPA, byval pfnCompare as PFNDACOMPARE, byval lParam as LPARAM) as WINBOOL

type _DPASTREAMINFO
 iPos as long
 pvItem as any ptr
end type

type DPASTREAMINFO as _DPASTREAMINFO
type PFNDPASTREAM as function(byval pinfo as DPASTREAMINFO ptr, byval pstream as IStream ptr, byval pvInstData as any ptr) as HRESULT
declare function DPA_LoadStream(byval phdpa as HDPA ptr, byval pfn as PFNDPASTREAM, byval pstream as IStream ptr, byval pvInstData as any ptr) as HRESULT
declare function DPA_SaveStream(byval hdpa as HDPA, byval pfn as PFNDPASTREAM, byval pstream as IStream ptr, byval pvInstData as any ptr) as HRESULT
const DPAM_SORTED = &h1
const DPAM_NORMAL = &h2
const DPAM_UNION = &h4
const DPAM_INTERSECT = &h8
type PFNDPAMERGE as function(byval uMsg as UINT, byval pvDest as any ptr, byval pvSrc as any ptr, byval lParam as LPARAM) as any ptr
type PFNDPAMERGECONST as function(byval uMsg as UINT, byval pvDest as const any ptr, byval pvSrc as const any ptr, byval lParam as LPARAM) as const any ptr
const DPAMM_MERGE = 1
const DPAMM_DELETE = 2
const DPAMM_INSERT = 3
declare function DPA_Merge(byval hdpaDest as HDPA, byval hdpaSrc as HDPA, byval dwFlags as DWORD, byval pfnCompare as PFNDACOMPARE, byval pfnMerge as PFNDPAMERGE, byval lParam as LPARAM) as WINBOOL
const DPAS_SORTED = &h1
const DPAS_INSERTBEFORE = &h2
const DPAS_INSERTAFTER = &h4
declare function DPA_Search(byval hdpa as HDPA, byval pFind as any ptr, byval iStart as long, byval pfnCompare as PFNDACOMPARE, byval lParam as LPARAM, byval options as UINT) as long
const DPA_APPEND = DA_LAST
const DPA_ERR = DA_ERR

type PFNDPAENUMCALLBACK as PFNDAENUMCALLBACK
type PFNDPAENUMCALLBACKCONST as PFNDAENUMCALLBACKCONST
type PFNDPACOMPARE as PFNDACOMPARE
type PFNDPACOMPARECONST as PFNDACOMPARECONST
declare function Str_SetPtrW(byval ppsz as LPWSTR ptr, byval psz as LPCWSTR) as WINBOOL
declare function _TrackMouseEvent(byval lpEventTrack as LPTRACKMOUSEEVENT) as WINBOOL

const WSB_PROP_CYVSCROLL = &h1
const WSB_PROP_CXHSCROLL = &h2
const WSB_PROP_CYHSCROLL = &h4
const WSB_PROP_CXVSCROLL = &h8
const WSB_PROP_CXHTHUMB = &h10
const WSB_PROP_CYVTHUMB = &h20
const WSB_PROP_VBKGCOLOR = &h40
const WSB_PROP_HBKGCOLOR = &h80
const WSB_PROP_VSTYLE = &h100
const WSB_PROP_HSTYLE = &h200
const WSB_PROP_WINSTYLE = &h400
const WSB_PROP_PALETTE = &h800
const WSB_PROP_MASK = &hfff
const FSB_FLAT_MODE = 2
const FSB_ENCARTA_MODE = 1
const FSB_REGULAR_MODE = 0

declare function FlatSB_EnableScrollBar(byval as HWND, byval as long, byval as UINT) as WINBOOL
declare function FlatSB_ShowScrollBar(byval as HWND, byval code as long, byval as WINBOOL) as WINBOOL
declare function FlatSB_GetScrollRange(byval as HWND, byval code as long, byval as LPINT, byval as LPINT) as WINBOOL
declare function FlatSB_GetScrollInfo(byval as HWND, byval code as long, byval as LPSCROLLINFO) as WINBOOL
declare function FlatSB_GetScrollPos(byval as HWND, byval code as long) as long
declare function FlatSB_GetScrollProp(byval as HWND, byval propIndex as long, byval as LPINT) as WINBOOL

 declare function FlatSB_GetScrollPropPtr alias "FlatSB_GetScrollProp"(byval as HWND, byval propIndex as long, byval as LPINT) as WINBOOL

declare function FlatSB_SetScrollPos(byval as HWND, byval code as long, byval pos as long, byval fRedraw as WINBOOL) as long
declare function FlatSB_SetScrollInfo(byval as HWND, byval code as long, byval as LPSCROLLINFO, byval fRedraw as WINBOOL) as long
declare function FlatSB_SetScrollRange(byval as HWND, byval code as long, byval min as long, byval max as long, byval fRedraw as WINBOOL) as long
declare function FlatSB_SetScrollProp(byval as HWND, byval index as UINT, byval newValue as INT_PTR, byval as WINBOOL) as WINBOOL
declare function FlatSB_SetScrollPropPtr alias "FlatSB_SetScrollProp"(byval as HWND, byval index as UINT, byval newValue as INT_PTR, byval as WINBOOL) as WINBOOL
declare function InitializeFlatSB(byval as HWND) as WINBOOL
declare function UninitializeFlatSB(byval as HWND) as HRESULT
type SUBCLASSPROC as function(byval hWnd as HWND, byval uMsg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval uIdSubclass as UINT_PTR, byval dwRefData as DWORD_PTR) as LRESULT
declare function SetWindowSubclass(byval hWnd as HWND, byval pfnSubclass as SUBCLASSPROC, byval uIdSubclass as UINT_PTR, byval dwRefData as DWORD_PTR) as WINBOOL
declare function GetWindowSubclass(byval hWnd as HWND, byval pfnSubclass as SUBCLASSPROC, byval uIdSubclass as UINT_PTR, byval pdwRefData as DWORD_PTR ptr) as WINBOOL
declare function RemoveWindowSubclass(byval hWnd as HWND, byval pfnSubclass as SUBCLASSPROC, byval uIdSubclass as UINT_PTR) as WINBOOL
declare function DefSubclassProc(byval hWnd as HWND, byval uMsg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT
declare function DrawShadowText(byval hdc as HDC, byval pszText as LPCWSTR, byval cch as UINT, byval prc as RECT ptr, byval dwFlags as DWORD, byval crText as COLORREF, byval crShadow as COLORREF, byval ixOffset as long, byval iyOffset as long) as long


end extern


#inclib "comdlg32"


extern "Windows"

extern IID_IPrintDialogCallback as const GUID
extern IID_IPrintDialogServices as const GUID
type LPOFNHOOKPROC as function(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as UINT_PTR

 type tagOFN_NT4A field = 1
 lStructSize as DWORD
 hwndOwner as HWND
 hInstance as HINSTANCE
 lpstrFilter as LPCSTR
 lpstrCustomFilter as LPSTR
 nMaxCustFilter as DWORD
 nFilterIndex as DWORD
 lpstrFile as LPSTR
 nMaxFile as DWORD
 lpstrFileTitle as LPSTR
 nMaxFileTitle as DWORD
 lpstrInitialDir as LPCSTR
 lpstrTitle as LPCSTR
 Flags as DWORD
 nFileOffset as WORD
 nFileExtension as WORD
 lpstrDefExt as LPCSTR
 lCustData as LPARAM
 lpfnHook as LPOFNHOOKPROC
 lpTemplateName as LPCSTR
 end type

type OPENFILENAME_NT4A as tagOFN_NT4A
type LPOPENFILENAME_NT4A as tagOFN_NT4A ptr

 type tagOFN_NT4W field = 1
 lStructSize as DWORD
 hwndOwner as HWND
 hInstance as HINSTANCE
 lpstrFilter as LPCWSTR
 lpstrCustomFilter as LPWSTR
 nMaxCustFilter as DWORD
 nFilterIndex as DWORD
 lpstrFile as LPWSTR
 nMaxFile as DWORD
 lpstrFileTitle as LPWSTR
 nMaxFileTitle as DWORD
 lpstrInitialDir as LPCWSTR
 lpstrTitle as LPCWSTR
 Flags as DWORD
 nFileOffset as WORD
 nFileExtension as WORD
 lpstrDefExt as LPCWSTR
 lCustData as LPARAM
 lpfnHook as LPOFNHOOKPROC
 lpTemplateName as LPCWSTR
 end type

type OPENFILENAME_NT4W as tagOFN_NT4W
type LPOPENFILENAME_NT4W as tagOFN_NT4W ptr

 type OPENFILENAME_NT4 as OPENFILENAME_NT4A
 type LPOPENFILENAME_NT4 as LPOPENFILENAME_NT4A

 type tagOFNA field = 1
 lStructSize as DWORD
 hwndOwner as HWND
 hInstance as HINSTANCE
 lpstrFilter as LPCSTR
 lpstrCustomFilter as LPSTR
 nMaxCustFilter as DWORD
 nFilterIndex as DWORD
 lpstrFile as LPSTR
 nMaxFile as DWORD
 lpstrFileTitle as LPSTR
 nMaxFileTitle as DWORD
 lpstrInitialDir as LPCSTR
 lpstrTitle as LPCSTR
 Flags as DWORD
 nFileOffset as WORD
 nFileExtension as WORD
 lpstrDefExt as LPCSTR
 lCustData as LPARAM
 lpfnHook as LPOFNHOOKPROC
 lpTemplateName as LPCSTR
 pvReserved as any ptr
 dwReserved as DWORD
 FlagsEx as DWORD
 end type

type OPENFILENAMEA as tagOFNA
type LPOPENFILENAMEA as tagOFNA ptr

 type tagOFNW field = 1
 lStructSize as DWORD
 hwndOwner as HWND
 hInstance as HINSTANCE
 lpstrFilter as LPCWSTR
 lpstrCustomFilter as LPWSTR
 nMaxCustFilter as DWORD
 nFilterIndex as DWORD
 lpstrFile as LPWSTR
 nMaxFile as DWORD
 lpstrFileTitle as LPWSTR
 nMaxFileTitle as DWORD
 lpstrInitialDir as LPCWSTR
 lpstrTitle as LPCWSTR
 Flags as DWORD
 nFileOffset as WORD
 nFileExtension as WORD
 lpstrDefExt as LPCWSTR
 lCustData as LPARAM
 lpfnHook as LPOFNHOOKPROC
 lpTemplateName as LPCWSTR
 pvReserved as any ptr
 dwReserved as DWORD
 FlagsEx as DWORD
 end type

type OPENFILENAMEW as tagOFNW
type LPOPENFILENAMEW as tagOFNW ptr

 type OPENFILENAME as OPENFILENAMEA
 type LPOPENFILENAME as LPOPENFILENAMEA



declare function GetOpenFileNameA(byval as LPOPENFILENAMEA) as WINBOOL
declare function GetOpenFileNameW(byval as LPOPENFILENAMEW) as WINBOOL

 declare function GetOpenFileName alias "GetOpenFileNameA"(byval as LPOPENFILENAMEA) as WINBOOL

declare function GetSaveFileNameA(byval as LPOPENFILENAMEA) as WINBOOL
declare function GetSaveFileNameW(byval as LPOPENFILENAMEW) as WINBOOL

 declare function GetSaveFileName alias "GetSaveFileNameA"(byval as LPOPENFILENAMEA) as WINBOOL

declare function GetFileTitleA(byval as LPCSTR, byval as LPSTR, byval as WORD) as short
declare function GetFileTitleW(byval as LPCWSTR, byval as LPWSTR, byval as WORD) as short

 declare function GetFileTitle alias "GetFileTitleA"(byval as LPCSTR, byval as LPSTR, byval as WORD) as short

const OFN_READONLY = &h1
const OFN_OVERWRITEPROMPT = &h2
const OFN_HIDEREADONLY = &h4
const OFN_NOCHANGEDIR = &h8
const OFN_SHOWHELP = &h10
const OFN_ENABLEHOOK = &h20
const OFN_ENABLETEMPLATE = &h40
const OFN_ENABLETEMPLATEHANDLE = &h80
const OFN_NOVALIDATE = &h100
const OFN_ALLOWMULTISELECT = &h200
const OFN_EXTENSIONDIFFERENT = &h400
const OFN_PATHMUSTEXIST = &h800
const OFN_FILEMUSTEXIST = &h1000
const OFN_CREATEPROMPT = &h2000
const OFN_SHAREAWARE = &h4000
const OFN_NOREADONLYRETURN = &h8000
const OFN_NOTESTFILECREATE = &h10000
const OFN_NONETWORKBUTTON = &h20000
const OFN_NOLONGNAMES = &h40000
const OFN_EXPLORER = &h80000
const OFN_NODEREFERENCELINKS = &h100000
const OFN_LONGNAMES = &h200000
const OFN_ENABLEINCLUDENOTIFY = &h400000
const OFN_ENABLESIZING = &h800000
const OFN_DONTADDTORECENT = &h2000000
const OFN_FORCESHOWHIDDEN = &h10000000
const OFN_EX_NOPLACESBAR = &h1
const OFN_SHAREFALLTHROUGH = 2
const OFN_SHARENOWARN = 1
const OFN_SHAREWARN = 0
type LPCCHOOKPROC as function(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as UINT_PTR

 type _OFNOTIFYA field = 1
 hdr as NMHDR
 lpOFN as LPOPENFILENAMEA
 pszFile as LPSTR
 end type

type OFNOTIFYA as _OFNOTIFYA
type LPOFNOTIFYA as _OFNOTIFYA ptr

 type _OFNOTIFYW field = 1
 hdr as NMHDR
 lpOFN as LPOPENFILENAMEW
 pszFile as LPWSTR
 end type

type OFNOTIFYW as _OFNOTIFYW
type LPOFNOTIFYW as _OFNOTIFYW ptr

 type OFNOTIFY as OFNOTIFYA
 type LPOFNOTIFY as LPOFNOTIFYA

 type _OFNOTIFYEXA field = 1
 hdr as NMHDR
 lpOFN as LPOPENFILENAMEA
 psf as LPVOID
 pidl as LPVOID
 end type

type OFNOTIFYEXA as _OFNOTIFYEXA
type LPOFNOTIFYEXA as _OFNOTIFYEXA ptr

 type _OFNOTIFYEXW field = 1
 hdr as NMHDR
 lpOFN as LPOPENFILENAMEW
 psf as LPVOID
 pidl as LPVOID
 end type

type OFNOTIFYEXW as _OFNOTIFYEXW
type LPOFNOTIFYEXW as _OFNOTIFYEXW ptr

 type OFNOTIFYEX as OFNOTIFYEXA
 type LPOFNOTIFYEX as LPOFNOTIFYEXA

const CDN_FIRST = culng(0 - 601)
const CDN_LAST = culng(0 - 699)
const CDN_INITDONE = CDN_FIRST
const CDN_SELCHANGE = culng(CDN_FIRST - 1)
const CDN_FOLDERCHANGE = culng(CDN_FIRST - 2)
const CDN_SHAREVIOLATION = culng(CDN_FIRST - 3)
const CDN_HELP = culng(CDN_FIRST - 4)
const CDN_FILEOK = culng(CDN_FIRST - 5)
const CDN_TYPECHANGE = culng(CDN_FIRST - 6)
const CDN_INCLUDEITEM = culng(CDN_FIRST - 7)
const CDM_FIRST = WM_USER + 100
const CDM_LAST = WM_USER + 200
const CDM_GETSPEC = CDM_FIRST


const CDM_GETFILEPATH = CDM_FIRST + 1


const CDM_GETFOLDERPATH = CDM_FIRST + 2


const CDM_GETFOLDERIDLIST = CDM_FIRST + 3
const CDM_SETCONTROLTEXT = CDM_FIRST + 4
const CDM_HIDECONTROL = CDM_FIRST + 5
const CDM_SETDEFEXT = CDM_FIRST + 6

 type tagCHOOSECOLORA field = 1
 lStructSize as DWORD
 hwndOwner as HWND
 hInstance as HWND
 rgbResult as COLORREF
 lpCustColors as COLORREF ptr
 Flags as DWORD
 lCustData as LPARAM
 lpfnHook as LPCCHOOKPROC
 lpTemplateName as LPCSTR
 end type

type CHOOSECOLORA as tagCHOOSECOLORA
type LPCHOOSECOLORA as tagCHOOSECOLORA ptr

 type tagCHOOSECOLORW field = 1
 lStructSize as DWORD
 hwndOwner as HWND
 hInstance as HWND
 rgbResult as COLORREF
 lpCustColors as COLORREF ptr
 Flags as DWORD
 lCustData as LPARAM
 lpfnHook as LPCCHOOKPROC
 lpTemplateName as LPCWSTR
 end type

type CHOOSECOLORW as tagCHOOSECOLORW
type LPCHOOSECOLORW as tagCHOOSECOLORW ptr

 type CHOOSECOLOR as CHOOSECOLORA
 type LPCHOOSECOLOR as LPCHOOSECOLORA

declare function ChooseColorA(byval as LPCHOOSECOLORA) as WINBOOL
declare function ChooseColorW(byval as LPCHOOSECOLORW) as WINBOOL

 declare function ChooseColor alias "ChooseColorA"(byval as LPCHOOSECOLORA) as WINBOOL

const CC_RGBINIT = &h1
const CC_FULLOPEN = &h2
const CC_PREVENTFULLOPEN = &h4
const CC_SHOWHELP = &h8
const CC_ENABLEHOOK = &h10
const CC_ENABLETEMPLATE = &h20
const CC_ENABLETEMPLATEHANDLE = &h40
const CC_SOLIDCOLOR = &h80
const CC_ANYCOLOR = &h100
type LPFRHOOKPROC as function(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as UINT_PTR

 type tagFINDREPLACEA field = 1
 lStructSize as DWORD
 hwndOwner as HWND
 hInstance as HINSTANCE
 Flags as DWORD
 lpstrFindWhat as LPSTR
 lpstrReplaceWith as LPSTR
 wFindWhatLen as WORD
 wReplaceWithLen as WORD
 lCustData as LPARAM
 lpfnHook as LPFRHOOKPROC
 lpTemplateName as LPCSTR
 end type

type FINDREPLACEA as tagFINDREPLACEA
type LPFINDREPLACEA as tagFINDREPLACEA ptr

 type tagFINDREPLACEW field = 1
 lStructSize as DWORD
 hwndOwner as HWND
 hInstance as HINSTANCE
 Flags as DWORD
 lpstrFindWhat as LPWSTR
 lpstrReplaceWith as LPWSTR
 wFindWhatLen as WORD
 wReplaceWithLen as WORD
 lCustData as LPARAM
 lpfnHook as LPFRHOOKPROC
 lpTemplateName as LPCWSTR
 end type

type FINDREPLACEW as tagFINDREPLACEW
type LPFINDREPLACEW as tagFINDREPLACEW ptr

 type FINDREPLACE as FINDREPLACEA
 type LPFINDREPLACE as LPFINDREPLACEA

const FR_DOWN = &h1
const FR_WHOLEWORD = &h2
const FR_MATCHCASE = &h4
const FR_FINDNEXT = &h8
const FR_REPLACE = &h10
const FR_REPLACEALL = &h20
const FR_DIALOGTERM = &h40
const FR_SHOWHELP = &h80
const FR_ENABLEHOOK = &h100
const FR_ENABLETEMPLATE = &h200
const FR_NOUPDOWN = &h400
const FR_NOMATCHCASE = &h800
const FR_NOWHOLEWORD = &h1000
const FR_ENABLETEMPLATEHANDLE = &h2000
const FR_HIDEUPDOWN = &h4000
const FR_HIDEMATCHCASE = &h8000
const FR_HIDEWHOLEWORD = &h10000
const FR_RAW = &h20000
const FR_MATCHDIAC = &h20000000
const FR_MATCHKASHIDA = &h40000000
const FR_MATCHALEFHAMZA = &h80000000
declare function FindTextA(byval as LPFINDREPLACEA) as HWND
declare function FindTextW(byval as LPFINDREPLACEW) as HWND

 declare function FindText alias "FindTextA"(byval as LPFINDREPLACEA) as HWND

declare function ReplaceTextA(byval as LPFINDREPLACEA) as HWND
declare function ReplaceTextW(byval as LPFINDREPLACEW) as HWND

 declare function ReplaceText alias "ReplaceTextA"(byval as LPFINDREPLACEA) as HWND

type LPCFHOOKPROC as function(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as UINT_PTR

 type tagCHOOSEFONTA field = 1
 lStructSize as DWORD
 hwndOwner as HWND
 hDC as HDC
 lpLogFont as LPLOGFONTA
 iPointSize as INT_
 Flags as DWORD
 rgbColors as COLORREF
 lCustData as LPARAM
 lpfnHook as LPCFHOOKPROC
 lpTemplateName as LPCSTR
 hInstance as HINSTANCE
 lpszStyle as LPSTR
 nFontType as WORD
 ___MISSING_ALIGNMENT__ as WORD
 nSizeMin as INT_
 nSizeMax as INT_
 end type

type CHOOSEFONTA as tagCHOOSEFONTA
type LPCHOOSEFONTA as tagCHOOSEFONTA ptr

 type tagCHOOSEFONTW field = 1
 lStructSize as DWORD
 hwndOwner as HWND
 hDC as HDC
 lpLogFont as LPLOGFONTW
 iPointSize as INT_
 Flags as DWORD
 rgbColors as COLORREF
 lCustData as LPARAM
 lpfnHook as LPCFHOOKPROC
 lpTemplateName as LPCWSTR
 hInstance as HINSTANCE
 lpszStyle as LPWSTR
 nFontType as WORD
 ___MISSING_ALIGNMENT__ as WORD
 nSizeMin as INT_
 nSizeMax as INT_
 end type

type CHOOSEFONTW as tagCHOOSEFONTW
type LPCHOOSEFONTW as tagCHOOSEFONTW ptr

 type CHOOSEFONT as CHOOSEFONTA
 type LPCHOOSEFONT as LPCHOOSEFONTA

declare function ChooseFontA(byval as LPCHOOSEFONTA) as WINBOOL
declare function ChooseFontW(byval as LPCHOOSEFONTW) as WINBOOL

 declare function ChooseFont alias "ChooseFontA"(byval as LPCHOOSEFONTA) as WINBOOL

const CF_SCREENFONTS = &h1
const CF_PRINTERFONTS = &h2
const CF_BOTH = CF_SCREENFONTS or CF_PRINTERFONTS
const CF_SHOWHELP = &h4
const CF_ENABLEHOOK = &h8
const CF_ENABLETEMPLATE = &h10
const CF_ENABLETEMPLATEHANDLE = &h20
const CF_INITTOLOGFONTSTRUCT = &h40
const CF_USESTYLE = &h80
const CF_EFFECTS = &h100
const CF_APPLY = &h200
const CF_ANSIONLY = &h400
const CF_SCRIPTSONLY = CF_ANSIONLY
const CF_NOVECTORFONTS = &h800
const CF_NOOEMFONTS = CF_NOVECTORFONTS
const CF_NOSIMULATIONS = &h1000
const CF_LIMITSIZE = &h2000
const CF_FIXEDPITCHONLY = &h4000
const CF_WYSIWYG = &h8000
const CF_FORCEFONTEXIST = &h10000
const CF_SCALABLEONLY = &h20000
const CF_TTONLY = &h40000
const CF_NOFACESEL = &h80000
const CF_NOSTYLESEL = &h100000
const CF_NOSIZESEL = &h200000
const CF_SELECTSCRIPT = &h400000
const CF_NOSCRIPTSEL = &h800000
const CF_NOVERTFONTS = &h1000000


const SIMULATED_FONTTYPE = &h8000
const PRINTER_FONTTYPE = &h4000
const SCREEN_FONTTYPE = &h2000
const BOLD_FONTTYPE = &h100
const ITALIC_FONTTYPE = &h200
const REGULAR_FONTTYPE = &h400
const PS_OPENTYPE_FONTTYPE = &h10000
const TT_OPENTYPE_FONTTYPE = &h20000
const TYPE1_FONTTYPE = &h40000


const WM_CHOOSEFONT_GETLOGFONT = WM_USER + 1
const WM_CHOOSEFONT_SETLOGFONT = WM_USER + 101
const WM_CHOOSEFONT_SETFLAGS = WM_USER + 102


const CD_LBSELNOITEMS = -1
const CD_LBSELCHANGE = 0
const CD_LBSELSUB = 1
const CD_LBSELADD = 2
type LPPRINTHOOKPROC as function(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as UINT_PTR
type LPSETUPHOOKPROC as function(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as UINT_PTR

 type tagPDA field = 1
 lStructSize as DWORD
 hwndOwner as HWND
 hDevMode as HGLOBAL
 hDevNames as HGLOBAL
 hDC as HDC
 Flags as DWORD
 nFromPage as WORD
 nToPage as WORD
 nMinPage as WORD
 nMaxPage as WORD
 nCopies as WORD
 hInstance as HINSTANCE
 lCustData as LPARAM
 lpfnPrintHook as LPPRINTHOOKPROC
 lpfnSetupHook as LPSETUPHOOKPROC
 lpPrintTemplateName as LPCSTR
 lpSetupTemplateName as LPCSTR
 hPrintTemplate as HGLOBAL
 hSetupTemplate as HGLOBAL
 end type

type PRINTDLGA as tagPDA
type LPPRINTDLGA as tagPDA ptr

 type tagPDW field = 1
 lStructSize as DWORD
 hwndOwner as HWND
 hDevMode as HGLOBAL
 hDevNames as HGLOBAL
 hDC as HDC
 Flags as DWORD
 nFromPage as WORD
 nToPage as WORD
 nMinPage as WORD
 nMaxPage as WORD
 nCopies as WORD
 hInstance as HINSTANCE
 lCustData as LPARAM
 lpfnPrintHook as LPPRINTHOOKPROC
 lpfnSetupHook as LPSETUPHOOKPROC
 lpPrintTemplateName as LPCWSTR
 lpSetupTemplateName as LPCWSTR
 hPrintTemplate as HGLOBAL
 hSetupTemplate as HGLOBAL
 end type

type PRINTDLGW as tagPDW
type LPPRINTDLGW as tagPDW ptr

 type PRINTDLG as PRINTDLGA
 type LPPRINTDLG as LPPRINTDLGA

declare function PrintDlgA(byval as LPPRINTDLGA) as WINBOOL
declare function PrintDlgW(byval as LPPRINTDLGW) as WINBOOL

 declare function PrintDlg alias "PrintDlgA"(byval as LPPRINTDLGA) as WINBOOL

type IPrintDialogCallbackVtbl as IPrintDialogCallbackVtbl_

 type IPrintDialogCallback field = 1
 lpVtbl as IPrintDialogCallbackVtbl ptr
 end type

 type IPrintDialogCallbackVtbl_ field = 1
 QueryInterface as function(byval This as IPrintDialogCallback ptr, byval riid as const IID const ptr, byval ppvObj as LPVOID ptr) as HRESULT
 AddRef as function(byval This as IPrintDialogCallback ptr) as ULONG
 Release as function(byval This as IPrintDialogCallback ptr) as ULONG
 InitDone as function(byval This as IPrintDialogCallback ptr) as HRESULT
 SelectionChange as function(byval This as IPrintDialogCallback ptr) as HRESULT
 HandleMessage as function(byval This as IPrintDialogCallback ptr, byval hDlg as HWND, byval uMsg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval pResult as LRESULT ptr) as HRESULT
 end type

type IPrintDialogServicesVtbl as IPrintDialogServicesVtbl_

 type IPrintDialogServices field = 1
 lpVtbl as IPrintDialogServicesVtbl ptr
 end type

 type IPrintDialogServicesVtbl_ field = 1
 QueryInterface as function(byval This as IPrintDialogServices ptr, byval riid as const IID const ptr, byval ppvObj as LPVOID ptr) as HRESULT
 AddRef as function(byval This as IPrintDialogServices ptr) as ULONG
 Release as function(byval This as IPrintDialogServices ptr) as ULONG
 GetCurrentDevMode as function(byval This as IPrintDialogServices ptr, byval pDevMode as LPDEVMODE, byval pcbSize as UINT ptr) as HRESULT
 GetCurrentPrinterName as function(byval This as IPrintDialogServices ptr, byval pPrinterName as LPTSTR, byval pcchSize as UINT ptr) as HRESULT
 GetCurrentPortName as function(byval This as IPrintDialogServices ptr, byval pPortName as LPTSTR, byval pcchSize as UINT ptr) as HRESULT
 end type

 type tagPRINTPAGERANGE field = 1
 nFromPage as DWORD
 nToPage as DWORD
 end type

type PRINTPAGERANGE as tagPRINTPAGERANGE
type LPPRINTPAGERANGE as tagPRINTPAGERANGE ptr

 type tagPDEXA field = 1
 lStructSize as DWORD
 hwndOwner as HWND
 hDevMode as HGLOBAL
 hDevNames as HGLOBAL
 hDC as HDC
 Flags as DWORD
 Flags2 as DWORD
 ExclusionFlags as DWORD
 nPageRanges as DWORD
 nMaxPageRanges as DWORD
 lpPageRanges as LPPRINTPAGERANGE
 nMinPage as DWORD
 nMaxPage as DWORD
 nCopies as DWORD
 hInstance as HINSTANCE
 lpPrintTemplateName as LPCSTR
 lpCallback as LPUNKNOWN
 nPropertyPages as DWORD
 lphPropertyPages as HPROPSHEETPAGE ptr
 nStartPage as DWORD
 dwResultAction as DWORD
 end type

type PRINTDLGEXA as tagPDEXA
type LPPRINTDLGEXA as tagPDEXA ptr

 type tagPDEXW field = 1
 lStructSize as DWORD
 hwndOwner as HWND
 hDevMode as HGLOBAL
 hDevNames as HGLOBAL
 hDC as HDC
 Flags as DWORD
 Flags2 as DWORD
 ExclusionFlags as DWORD
 nPageRanges as DWORD
 nMaxPageRanges as DWORD
 lpPageRanges as LPPRINTPAGERANGE
 nMinPage as DWORD
 nMaxPage as DWORD
 nCopies as DWORD
 hInstance as HINSTANCE
 lpPrintTemplateName as LPCWSTR
 lpCallback as LPUNKNOWN
 nPropertyPages as DWORD
 lphPropertyPages as HPROPSHEETPAGE ptr
 nStartPage as DWORD
 dwResultAction as DWORD
 end type

type PRINTDLGEXW as tagPDEXW
type LPPRINTDLGEXW as tagPDEXW ptr

 type PRINTDLGEX as PRINTDLGEXA
 type LPPRINTDLGEX as LPPRINTDLGEXA

declare function PrintDlgExA(byval as LPPRINTDLGEXA) as HRESULT
declare function PrintDlgExW(byval as LPPRINTDLGEXW) as HRESULT

 declare function PrintDlgEx alias "PrintDlgExA"(byval as LPPRINTDLGEXA) as HRESULT

const PD_ALLPAGES = &h00
const PD_SELECTION = &h1
const PD_PAGENUMS = &h2
const PD_NOSELECTION = &h4
const PD_NOPAGENUMS = &h8
const PD_COLLATE = &h10
const PD_PRINTTOFILE = &h20
const PD_PRINTSETUP = &h40
const PD_NOWARNING = &h80
const PD_RETURNDC = &h100
const PD_RETURNIC = &h200
const PD_RETURNDEFAULT = &h400
const PD_SHOWHELP = &h800
const PD_ENABLEPRINTHOOK = &h1000
const PD_ENABLESETUPHOOK = &h2000
const PD_ENABLEPRINTTEMPLATE = &h4000
const PD_ENABLESETUPTEMPLATE = &h8000
const PD_ENABLEPRINTTEMPLATEHANDLE = &h10000
const PD_ENABLESETUPTEMPLATEHANDLE = &h20000
const PD_USEDEVMODECOPIES = &h40000
const PD_USEDEVMODECOPIESANDCOLLATE = &h40000
const PD_DISABLEPRINTTOFILE = &h80000
const PD_HIDEPRINTTOFILE = &h100000
const PD_NONETWORKBUTTON = &h200000
const PD_CURRENTPAGE = &h400000
const PD_NOCURRENTPAGE = &h800000
const PD_EXCLUSIONFLAGS = &h1000000
const PD_USELARGETEMPLATE = &h10000000
const PD_EXCL_COPIESANDCOLLATE = DM_COPIES or DM_COLLATE
const START_PAGE_GENERAL = &hffffffff
const PD_RESULT_CANCEL = 0
const PD_RESULT_PRINT = 1
const PD_RESULT_APPLY = 2

 type tagDEVNAMES field = 1
 wDriverOffset as WORD
 wDeviceOffset as WORD
 wOutputOffset as WORD
 wDefault as WORD
 end type

type DEVNAMES as tagDEVNAMES
type LPDEVNAMES as tagDEVNAMES ptr
const DN_DEFAULTPRN = &h1
declare function CommDlgExtendedError() as DWORD
const WM_PSD_PAGESETUPDLG = WM_USER
const WM_PSD_FULLPAGERECT = WM_USER + 1
const WM_PSD_MINMARGINRECT = WM_USER + 2
const WM_PSD_MARGINRECT = WM_USER + 3
const WM_PSD_GREEKTEXTRECT = WM_USER + 4
const WM_PSD_ENVSTAMPRECT = WM_USER + 5
const WM_PSD_YAFULLPAGERECT = WM_USER + 6
type LPPAGEPAINTHOOK as function(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as UINT_PTR
type LPPAGESETUPHOOK as function(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as UINT_PTR

 type tagPSDA field = 1
 lStructSize as DWORD
 hwndOwner as HWND
 hDevMode as HGLOBAL
 hDevNames as HGLOBAL
 Flags as DWORD
 ptPaperSize as POINT
 rtMinMargin as RECT
 rtMargin as RECT
 hInstance as HINSTANCE
 lCustData as LPARAM
 lpfnPageSetupHook as LPPAGESETUPHOOK
 lpfnPagePaintHook as LPPAGEPAINTHOOK
 lpPageSetupTemplateName as LPCSTR
 hPageSetupTemplate as HGLOBAL
 end type

type PAGESETUPDLGA as tagPSDA
type LPPAGESETUPDLGA as tagPSDA ptr

 type tagPSDW field = 1
 lStructSize as DWORD
 hwndOwner as HWND
 hDevMode as HGLOBAL
 hDevNames as HGLOBAL
 Flags as DWORD
 ptPaperSize as POINT
 rtMinMargin as RECT
 rtMargin as RECT
 hInstance as HINSTANCE
 lCustData as LPARAM
 lpfnPageSetupHook as LPPAGESETUPHOOK
 lpfnPagePaintHook as LPPAGEPAINTHOOK
 lpPageSetupTemplateName as LPCWSTR
 hPageSetupTemplate as HGLOBAL
 end type

type PAGESETUPDLGW as tagPSDW
type LPPAGESETUPDLGW as tagPSDW ptr

 type PAGESETUPDLG as PAGESETUPDLGA
 type LPPAGESETUPDLG as LPPAGESETUPDLGA

declare function PageSetupDlgA(byval as LPPAGESETUPDLGA) as WINBOOL
declare function PageSetupDlgW(byval as LPPAGESETUPDLGW) as WINBOOL

 declare function PageSetupDlg alias "PageSetupDlgA"(byval as LPPAGESETUPDLGA) as WINBOOL

const PSD_DEFAULTMINMARGINS = &h00
const PSD_INWININIINTLMEASURE = &h00
const PSD_MINMARGINS = &h1
const PSD_MARGINS = &h2
const PSD_INTHOUSANDTHSOFINCHES = &h4
const PSD_INHUNDREDTHSOFMILLIMETERS = &h8
const PSD_DISABLEMARGINS = &h10
const PSD_DISABLEPRINTER = &h20
const PSD_NOWARNING = &h80
const PSD_DISABLEORIENTATION = &h100
const PSD_RETURNDEFAULT = &h400
const PSD_DISABLEPAPER = &h200
const PSD_SHOWHELP = &h800
const PSD_ENABLEPAGESETUPHOOK = &h2000
const PSD_ENABLEPAGESETUPTEMPLATE = &h8000
const PSD_ENABLEPAGESETUPTEMPLATEHANDLE = &h20000
const PSD_ENABLEPAGEPAINTHOOK = &h40000
const PSD_DISABLEPAGEPAINTING = &h80000
const PSD_NONETWORKBUTTON = &h200000

end extern


#inclib "ole32"







#inclib "uuid"

extern "C"

extern GUID_NULL as const IID
extern IID_NULL alias "GUID_NULL" as const IID
extern CLSID_NULL alias "GUID_NULL" as const IID
extern FMTID_NULL alias "GUID_NULL" as const IID
extern CATID_MARSHALER as const IID
extern IID_IRpcChannel as const IID
extern IID_IRpcStub as const IID
extern IID_IStubManager as const IID
extern IID_IRpcProxy as const IID
extern IID_IProxyManager as const IID
extern IID_IPSFactory as const IID
extern IID_IInternalMoniker as const IID
extern IID_IDfReserved1 as const IID
extern IID_IDfReserved2 as const IID
extern IID_IDfReserved3 as const IID
extern CLSID_StdMarshal as const CLSID
extern CLSID_AggStdMarshal as const CLSID
extern CLSID_StdAsyncActManager as const CLSID
extern IID_IStub as const IID
extern IID_IProxy as const IID
extern IID_IEnumGeneric as const IID
extern IID_IEnumHolder as const IID
extern IID_IEnumCallback as const IID
extern IID_IOleManager as const IID
extern IID_IOlePresObj as const IID
extern IID_IDebug as const IID
extern IID_IDebugStream as const IID
extern CLSID_PSGenObject as const CLSID
extern CLSID_PSClientSite as const CLSID
extern CLSID_PSClassObject as const CLSID
extern CLSID_PSInPlaceActive as const CLSID
extern CLSID_PSInPlaceFrame as const CLSID
extern CLSID_PSDragDrop as const CLSID
extern CLSID_PSBindCtx as const CLSID
extern CLSID_PSEnumerators as const CLSID
extern CLSID_StaticMetafile as const CLSID
extern CLSID_StaticDib as const CLSID
extern CID_CDfsVolume as const CLSID
extern CLSID_DCOMAccessControl as const CLSID
extern CLSID_StdGlobalInterfaceTable as const CLSID
extern CLSID_ComBinding as const CLSID
extern CLSID_StdEvent as const CLSID
extern CLSID_ManualResetEvent as const CLSID
extern CLSID_SynchronizeContainer as const CLSID
extern CLSID_AddrControl as const CLSID
extern CLSID_CCDFormKrnl as const CLSID
extern CLSID_CCDPropertyPage as const CLSID
extern CLSID_CCDFormDialog as const CLSID
extern CLSID_CCDCommandButton as const CLSID
extern CLSID_CCDComboBox as const CLSID
extern CLSID_CCDTextBox as const CLSID
extern CLSID_CCDCheckBox as const CLSID
extern CLSID_CCDLabel as const CLSID
extern CLSID_CCDOptionButton as const CLSID
extern CLSID_CCDListBox as const CLSID
extern CLSID_CCDScrollBar as const CLSID
extern CLSID_CCDGroupBox as const CLSID
extern CLSID_CCDGeneralPropertyPage as const CLSID
extern CLSID_CCDGenericPropertyPage as const CLSID
extern CLSID_CCDFontPropertyPage as const CLSID
extern CLSID_CCDColorPropertyPage as const CLSID
extern CLSID_CCDLabelPropertyPage as const CLSID
extern CLSID_CCDCheckBoxPropertyPage as const CLSID
extern CLSID_CCDTextBoxPropertyPage as const CLSID
extern CLSID_CCDOptionButtonPropertyPage as const CLSID
extern CLSID_CCDListBoxPropertyPage as const CLSID
extern CLSID_CCDCommandButtonPropertyPage as const CLSID
extern CLSID_CCDComboBoxPropertyPage as const CLSID
extern CLSID_CCDScrollBarPropertyPage as const CLSID
extern CLSID_CCDGroupBoxPropertyPage as const CLSID
extern CLSID_CCDXObjectPropertyPage as const CLSID
extern CLSID_CStdPropertyFrame as const CLSID
extern CLSID_CFormPropertyPage as const CLSID
extern CLSID_CGridPropertyPage as const CLSID
extern CLSID_CWSJArticlePage as const CLSID
extern CLSID_CSystemPage as const CLSID
extern CLSID_IdentityUnmarshal as const CLSID
extern CLSID_InProcFreeMarshaler as const CLSID
extern CLSID_Picture_Metafile as const CLSID
extern CLSID_Picture_EnhMetafile as const CLSID
extern CLSID_Picture_Dib as const CLSID
extern GUID_TRISTATE as const GUID

end extern

extern "Windows"


type tagREGCLS as long
enum
 REGCLS_SINGLEUSE = 0
 REGCLS_MULTIPLEUSE = 1
 REGCLS_MULTI_SEPARATE = 2
 REGCLS_SUSPENDED = 4
 REGCLS_SURROGATE = 8
end enum

type REGCLS as tagREGCLS

type tagCOINITBASE as long
enum
 COINITBASE_MULTITHREADED = &h00
end enum

type COINITBASE as tagCOINITBASE


declare function CreateStreamOnHGlobal(byval hGlobal as HGLOBAL, byval fDeleteOnRelease as WINBOOL, byval ppstm as LPSTREAM ptr) as HRESULT
declare function GetHGlobalFromStream(byval pstm as LPSTREAM, byval phglobal as HGLOBAL ptr) as HRESULT
declare sub CoUninitialize()
declare function CoInitializeEx(byval pvReserved as LPVOID, byval dwCoInit as DWORD) as HRESULT
declare function CoGetCurrentLogicalThreadId(byval pguid as GUID ptr) as HRESULT
declare function CoGetContextToken(byval pToken as ULONG_PTR ptr) as HRESULT


declare function CoGetObjectContext(byval riid as const IID const ptr, byval ppv as LPVOID ptr) as HRESULT
declare function CoRegisterClassObject(byval rclsid as const IID const ptr, byval pUnk as LPUNKNOWN, byval dwClsContext as DWORD, byval flags as DWORD, byval lpdwRegister as LPDWORD) as HRESULT
declare function CoRevokeClassObject(byval dwRegister as DWORD) as HRESULT
declare function CoResumeClassObjects() as HRESULT
declare function CoSuspendClassObjects() as HRESULT
declare function CoGetMalloc(byval dwMemContext as DWORD, byval ppMalloc as LPMALLOC ptr) as HRESULT
declare function CoGetCurrentProcess() as DWORD
declare function CoGetCallerTID(byval lpdwTID as LPDWORD) as HRESULT
declare function CoGetDefaultContext(byval aptType as APTTYPE, byval riid as const IID const ptr, byval ppv as any ptr ptr) as HRESULT


declare function CoGetClassObject(byval rclsid as const IID const ptr, byval dwClsContext as DWORD, byval pvReserved as LPVOID, byval riid as const IID const ptr, byval ppv as LPVOID ptr) as HRESULT
declare function CoAddRefServerProcess() as ULONG
declare function CoReleaseServerProcess() as ULONG
declare function CoGetPSClsid(byval riid as const IID const ptr, byval pClsid as CLSID ptr) as HRESULT
declare function CoRegisterPSClsid(byval riid as const IID const ptr, byval rclsid as const IID const ptr) as HRESULT
declare function CoRegisterSurrogate(byval pSurrogate as LPSURROGATE) as HRESULT
declare function CoMarshalHresult(byval pstm as LPSTREAM, byval hresult as HRESULT) as HRESULT
declare function CoUnmarshalHresult(byval pstm as LPSTREAM, byval phresult as HRESULT ptr) as HRESULT
declare function CoLockObjectExternal(byval pUnk as LPUNKNOWN, byval fLock as WINBOOL, byval fLastUnlockReleases as WINBOOL) as HRESULT
declare function CoGetStdMarshalEx(byval pUnkOuter as LPUNKNOWN, byval smexflags as DWORD, byval ppUnkInner as LPUNKNOWN ptr) as HRESULT

type tagSTDMSHLFLAGS as long
enum
 SMEXF_SERVER = &h01
 SMEXF_HANDLER = &h02
end enum

type STDMSHLFLAGS as tagSTDMSHLFLAGS
declare function CoGetMarshalSizeMax(byval pulSize as ULONG ptr, byval riid as const IID const ptr, byval pUnk as LPUNKNOWN, byval dwDestContext as DWORD, byval pvDestContext as LPVOID, byval mshlflags as DWORD) as HRESULT
declare function CoMarshalInterface(byval pStm as LPSTREAM, byval riid as const IID const ptr, byval pUnk as LPUNKNOWN, byval dwDestContext as DWORD, byval pvDestContext as LPVOID, byval mshlflags as DWORD) as HRESULT
declare function CoUnmarshalInterface(byval pStm as LPSTREAM, byval riid as const IID const ptr, byval ppv as LPVOID ptr) as HRESULT
declare function CoReleaseMarshalData(byval pStm as LPSTREAM) as HRESULT
declare function CoDisconnectObject(byval pUnk as LPUNKNOWN, byval dwReserved as DWORD) as HRESULT
declare function CoGetStandardMarshal(byval riid as const IID const ptr, byval pUnk as LPUNKNOWN, byval dwDestContext as DWORD, byval pvDestContext as LPVOID, byval mshlflags as DWORD, byval ppMarshal as LPMARSHAL ptr) as HRESULT
declare function CoMarshalInterThreadInterfaceInStream(byval riid as const IID const ptr, byval pUnk as LPUNKNOWN, byval ppStm as LPSTREAM ptr) as HRESULT
declare function CoGetInterfaceAndReleaseStream(byval pStm as LPSTREAM, byval iid as const IID const ptr, byval ppv as LPVOID ptr) as HRESULT
declare function CoCreateFreeThreadedMarshaler(byval punkOuter as LPUNKNOWN, byval ppunkMarshal as LPUNKNOWN ptr) as HRESULT
declare sub CoFreeUnusedLibraries()
declare sub CoFreeUnusedLibrariesEx(byval dwUnloadDelay as DWORD, byval dwReserved as DWORD)
declare function CoInitializeSecurity(byval pSecDesc as PSECURITY_DESCRIPTOR, byval cAuthSvc as LONG, byval asAuthSvc as SOLE_AUTHENTICATION_SERVICE ptr, byval pReserved1 as any ptr, byval dwAuthnLevel as DWORD, byval dwImpLevel as DWORD, byval pAuthList as any ptr, byval dwCapabilities as DWORD, byval pReserved3 as any ptr) as HRESULT
declare function CoSwitchCallContext(byval pNewObject as IUnknown ptr, byval ppOldObject as IUnknown ptr ptr) as HRESULT

const COM_RIGHTS_EXECUTE = 1
const COM_RIGHTS_EXECUTE_LOCAL = 2
const COM_RIGHTS_EXECUTE_REMOTE = 4
const COM_RIGHTS_ACTIVATE_LOCAL = 8
const COM_RIGHTS_ACTIVATE_REMOTE = 16
declare function CoCreateInstanceFromApp(byval Clsid as const IID const ptr, byval punkOuter as IUnknown ptr, byval dwClsCtx as DWORD, byval reserved as PVOID, byval dwCount as DWORD, byval pResults as MULTI_QI ptr) as HRESULT
declare function CoIsHandlerConnected(byval pUnk as LPUNKNOWN) as WINBOOL


declare function CoGetCallContext(byval riid as const IID const ptr, byval ppInterface as any ptr ptr) as HRESULT
declare function CoQueryProxyBlanket(byval pProxy as IUnknown ptr, byval pwAuthnSvc as DWORD ptr, byval pAuthzSvc as DWORD ptr, byval pServerPrincName as LPOLESTR ptr, byval pAuthnLevel as DWORD ptr, byval pImpLevel as DWORD ptr, byval pAuthInfo as RPC_AUTH_IDENTITY_HANDLE ptr, byval pCapabilites as DWORD ptr) as HRESULT
declare function CoSetProxyBlanket(byval pProxy as IUnknown ptr, byval dwAuthnSvc as DWORD, byval dwAuthzSvc as DWORD, byval pServerPrincName as wstring ptr, byval dwAuthnLevel as DWORD, byval dwImpLevel as DWORD, byval pAuthInfo as RPC_AUTH_IDENTITY_HANDLE, byval dwCapabilities as DWORD) as HRESULT
declare function CoCopyProxy(byval pProxy as IUnknown ptr, byval ppCopy as IUnknown ptr ptr) as HRESULT
declare function CoQueryClientBlanket(byval pAuthnSvc as DWORD ptr, byval pAuthzSvc as DWORD ptr, byval pServerPrincName as LPOLESTR ptr, byval pAuthnLevel as DWORD ptr, byval pImpLevel as DWORD ptr, byval pPrivs as RPC_AUTHZ_HANDLE ptr, byval pCapabilities as DWORD ptr) as HRESULT
declare function CoImpersonateClient() as HRESULT
declare function CoRevertToSelf() as HRESULT
declare function CoQueryAuthenticationServices(byval pcAuthSvc as DWORD ptr, byval asAuthSvc as SOLE_AUTHENTICATION_SERVICE ptr ptr) as HRESULT
declare function CoCreateInstance(byval rclsid as const IID const ptr, byval pUnkOuter as LPUNKNOWN, byval dwClsContext as DWORD, byval riid as const IID const ptr, byval ppv as LPVOID ptr) as HRESULT
declare function CoCreateInstanceEx(byval Clsid as const IID const ptr, byval punkOuter as IUnknown ptr, byval dwClsCtx as DWORD, byval pServerInfo as COSERVERINFO ptr, byval dwCount as DWORD, byval pResults as MULTI_QI ptr) as HRESULT
declare function CoGetCancelObject(byval dwThreadId as DWORD, byval iid as const IID const ptr, byval ppUnk as any ptr ptr) as HRESULT
declare function CoSetCancelObject(byval pUnk as IUnknown ptr) as HRESULT
declare function CoCancelCall(byval dwThreadId as DWORD, byval ulTimeout as ULONG) as HRESULT
declare function CoTestCancel() as HRESULT
declare function CoEnableCallCancellation(byval pReserved as LPVOID) as HRESULT
declare function CoDisableCallCancellation(byval pReserved as LPVOID) as HRESULT
declare function StringFromCLSID(byval rclsid as const IID const ptr, byval lplpsz as LPOLESTR ptr) as HRESULT
declare function CLSIDFromString(byval lpsz as LPCOLESTR, byval pclsid as LPCLSID) as HRESULT
declare function StringFromIID(byval rclsid as const IID const ptr, byval lplpsz as LPOLESTR ptr) as HRESULT
declare function IIDFromString(byval lpsz as LPCOLESTR, byval lpiid as LPIID) as HRESULT
declare function ProgIDFromCLSID(byval clsid as const IID const ptr, byval lplpszProgID as LPOLESTR ptr) as HRESULT
declare function CLSIDFromProgID(byval lpszProgID as LPCOLESTR, byval lpclsid as LPCLSID) as HRESULT
declare function StringFromGUID2(byval rguid as const GUID const ptr, byval lpsz as LPOLESTR, byval cchMax as long) as long
declare function CoCreateGuid(byval pguid as GUID ptr) as HRESULT
declare function CoWaitForMultipleHandles(byval dwFlags as DWORD, byval dwTimeout as DWORD, byval cHandles as ULONG, byval pHandles as LPHANDLE, byval lpdwindex as LPDWORD) as HRESULT

type tagCOWAIT_FLAGS as long
enum
 COWAIT_DEFAULT = 0
 COWAIT_WAITALL = 1
 COWAIT_ALERTABLE = 2
 COWAIT_INPUTAVAILABLE = 4
 COWAIT_DISPATCH_CALLS = 8
 COWAIT_DISPATCH_WINDOW_MESSAGES = &h10
end enum

type COWAIT_FLAGS as tagCOWAIT_FLAGS


const CWMO_MAX_HANDLES = 56
declare function CoGetTreatAsClass(byval clsidOld as const IID const ptr, byval pClsidNew as LPCLSID) as HRESULT
declare function CoInvalidateRemoteMachineBindings(byval pszMachineName as LPOLESTR) as HRESULT
type LPFNGETCLASSOBJECT as function(byval as const IID const ptr, byval as const IID const ptr, byval as LPVOID ptr) as HRESULT
type LPFNCANUNLOADNOW as function() as HRESULT
declare function DllGetClassObject(byval rclsid as const IID const ptr, byval riid as const IID const ptr, byval ppv as LPVOID ptr) as HRESULT
declare function DllCanUnloadNow() as HRESULT
declare function CoTaskMemAlloc(byval cb as SIZE_T_) as LPVOID
declare function CoTaskMemRealloc(byval pv as LPVOID, byval cb as SIZE_T_) as LPVOID
declare sub CoTaskMemFree(byval pv as LPVOID)

end extern


#inclib "uuid"





extern "C"

const __REQUIRED_RPCNDR_H_VERSION__ = 475
extern IWinTypes_v0_1_c_ifspec as RPC_IF_HANDLE
extern IWinTypes_v0_1_s_ifspec as RPC_IF_HANDLE

type tagRemHGLOBAL
 fNullHGlobal as LONG
 cbData as ULONG
 data(0 to 0) as ubyte
end type

type RemHGLOBAL as tagRemHGLOBAL

type tagRemHMETAFILEPICT
 mm as LONG
 xExt as LONG
 yExt as LONG
 cbData as ULONG
 data(0 to 0) as ubyte
end type

type RemHMETAFILEPICT as tagRemHMETAFILEPICT

type tagRemHENHMETAFILE
 cbData as ULONG
 data(0 to 0) as ubyte
end type

type RemHENHMETAFILE as tagRemHENHMETAFILE

type tagRemHBITMAP
 cbData as ULONG
 data(0 to 0) as ubyte
end type

type RemHBITMAP as tagRemHBITMAP

type tagRemHPALETTE
 cbData as ULONG
 data(0 to 0) as ubyte
end type

type RemHPALETTE as tagRemHPALETTE

type tagRemBRUSH
 cbData as ULONG
 data(0 to 0) as ubyte
end type

type RemHBRUSH as tagRemBRUSH
const ROTFLAGS_REGISTRATIONKEEPSALIVE = &h1
const ROTFLAGS_ALLOWANYCLIENT = &h2
const ROT_COMPARE_MAX = 2048

type tagDVASPECT as long
enum
 DVASPECT_CONTENT = 1
 DVASPECT_THUMBNAIL = 2
 DVASPECT_ICON = 4
 DVASPECT_DOCPRINT = 8
end enum

type DVASPECT as tagDVASPECT

type tagSTGC as long
enum
 STGC_DEFAULT = 0
 STGC_OVERWRITE = 1
 STGC_ONLYIFCURRENT = 2
 STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4
 STGC_CONSOLIDATE = 8
end enum

type STGC as tagSTGC

type tagSTGMOVE as long
enum
 STGMOVE_MOVE = 0
 STGMOVE_COPY = 1
 STGMOVE_SHALLOWCOPY = 2
end enum

type STGMOVE as tagSTGMOVE

type tagSTATFLAG as long
enum
 STATFLAG_DEFAULT = 0
 STATFLAG_NONAME = 1
 STATFLAG_NOOPEN = 2
end enum

type STATFLAG as tagSTATFLAG
type HCONTEXT as any ptr
const WDT_INPROC_CALL = &h48746457
const WDT_REMOTE_CALL = &h52746457
const WDT_INPROC64_CALL = &h50746457

union _userCLIPFORMAT_u
 dwValue as DWORD
 pwszName as wstring ptr
end union

type _userCLIPFORMAT
 fContext as LONG
 u as _userCLIPFORMAT_u
end type

type userCLIPFORMAT as _userCLIPFORMAT
type wireCLIPFORMAT as userCLIPFORMAT ptr
type CLIPFORMAT as WORD

union _GDI_NONREMOTE_u
 hInproc as LONG
 hRemote as DWORD_BLOB ptr
end union

type _GDI_NONREMOTE
 fContext as LONG
 u as _GDI_NONREMOTE_u
end type

type GDI_NONREMOTE as _GDI_NONREMOTE

union _userHGLOBAL_u
 hInproc as LONG
 hRemote as FLAGGED_BYTE_BLOB ptr
 hInproc64 as INT64
end union

type _userHGLOBAL
 fContext as LONG
 u as _userHGLOBAL_u
end type

type userHGLOBAL as _userHGLOBAL
type wireHGLOBAL as userHGLOBAL ptr

union _userHMETAFILE_u
 hInproc as LONG
 hRemote as BYTE_BLOB ptr
 hInproc64 as INT64
end union

type _userHMETAFILE
 fContext as LONG
 u as _userHMETAFILE_u
end type

type userHMETAFILE as _userHMETAFILE

type _remoteMETAFILEPICT
 mm as LONG
 xExt as LONG
 yExt as LONG
 hMF as userHMETAFILE ptr
end type

type remoteMETAFILEPICT as _remoteMETAFILEPICT

union _userHMETAFILEPICT_u
 hInproc as LONG
 hRemote as remoteMETAFILEPICT ptr
 hInproc64 as INT64
end union

type _userHMETAFILEPICT
 fContext as LONG
 u as _userHMETAFILEPICT_u
end type

type userHMETAFILEPICT as _userHMETAFILEPICT

union _userHENHMETAFILE_u
 hInproc as LONG
 hRemote as BYTE_BLOB ptr
 hInproc64 as INT64
end union

type _userHENHMETAFILE
 fContext as LONG
 u as _userHENHMETAFILE_u
end type

type userHENHMETAFILE as _userHENHMETAFILE

type _userBITMAP
 bmType as LONG
 bmWidth as LONG
 bmHeight as LONG
 bmWidthBytes as LONG
 bmPlanes as WORD
 bmBitsPixel as WORD
 cbSize as ULONG
 pBuffer(0 to 0) as ubyte
end type

type userBITMAP as _userBITMAP

union _userHBITMAP_u
 hInproc as LONG
 hRemote as userBITMAP ptr
 hInproc64 as INT64
end union

type _userHBITMAP
 fContext as LONG
 u as _userHBITMAP_u
end type

type userHBITMAP as _userHBITMAP

union _userHPALETTE_u
 hInproc as LONG
 hRemote as LOGPALETTE ptr
 hInproc64 as INT64
end union

type _userHPALETTE
 fContext as LONG
 u as _userHPALETTE_u
end type

type userHPALETTE as _userHPALETTE

union _RemotableHandle_u
 hInproc as LONG
 hRemote as LONG
end union

type _RemotableHandle
 fContext as LONG
 u as _RemotableHandle_u
end type

type RemotableHandle as _RemotableHandle
type wireHWND as RemotableHandle ptr
type wireHMENU as RemotableHandle ptr
type wireHACCEL as RemotableHandle ptr
type wireHBRUSH as RemotableHandle ptr
type wireHFONT as RemotableHandle ptr
type wireHDC as RemotableHandle ptr
type wireHICON as RemotableHandle ptr
type wireHRGN as RemotableHandle ptr
type wireHMONITOR as RemotableHandle ptr
type wireHBITMAP as userHBITMAP ptr
type wireHPALETTE as userHPALETTE ptr
type wireHENHMETAFILE as userHENHMETAFILE ptr
type wireHMETAFILE as userHMETAFILE ptr
type wireHMETAFILEPICT as userHMETAFILEPICT ptr
type HMETAFILEPICT as any ptr
type DATE_ as double

union tagCY
 type
 Lo as ulong
 Hi as long
 end type

 int64 as LONGLONG
end union

type CY as tagCY
type LPCY as CY ptr

type tagDEC
 wReserved as USHORT

 union
 type
 scale as UBYTE
 sign as UBYTE
 end type

 signscale as USHORT
 end union

 Hi32 as ULONG

 union
 type
 Lo32 as ULONG
 Mid32 as ULONG
 end type

 Lo64 as ULONGLONG
 end union
end type

type DECIMAL as tagDEC
const DECIMAL_NEG = cast(UBYTE, &h80)
type LPDECIMAL as DECIMAL ptr
type wireBSTR as FLAGGED_WORD_BLOB ptr
type BSTR as OLECHAR ptr
type LPBSTR as BSTR ptr
type VARIANT_BOOL as short

type tagBSTRBLOB
 cbSize as ULONG
 pData as UBYTE ptr
end type

type BSTRBLOB as tagBSTRBLOB
type LPBSTRBLOB as tagBSTRBLOB ptr
const VARIANT_TRUE = cast(VARIANT_BOOL, -1)
const VARIANT_FALSE = cast(VARIANT_BOOL, 0)

type tagCLIPDATA
 cbSize as ULONG
 ulClipFmt as LONG
 pClipData as UBYTE ptr
end type

type CLIPDATA as tagCLIPDATA
type VARTYPE as ushort

type VARENUM as long
enum
 VT_EMPTY = 0
 VT_NULL = 1
 VT_I2 = 2
 VT_I4 = 3
 VT_R4 = 4
 VT_R8 = 5
 VT_CY = 6
 VT_DATE = 7
 VT_BSTR = 8
 VT_DISPATCH = 9
 VT_ERROR = 10
 VT_BOOL = 11
 VT_VARIANT = 12
 VT_UNKNOWN = 13
 VT_DECIMAL = 14
 VT_I1 = 16
 VT_UI1 = 17
 VT_UI2 = 18
 VT_UI4 = 19
 VT_I8 = 20
 VT_UI8 = 21
 VT_INT = 22
 VT_UINT = 23
 VT_VOID = 24
 VT_HRESULT = 25
 VT_PTR = 26
 VT_SAFEARRAY = 27
 VT_CARRAY = 28
 VT_USERDEFINED = 29
 VT_LPSTR = 30
 VT_LPWSTR = 31
 VT_RECORD = 36
 VT_INT_PTR = 37
 VT_UINT_PTR = 38
 VT_FILETIME = 64
 VT_BLOB = 65
 VT_STREAM = 66
 VT_STORAGE = 67
 VT_STREAMED_OBJECT = 68
 VT_STORED_OBJECT = 69
 VT_BLOB_OBJECT = 70
 VT_CF = 71
 VT_CLSID = 72
 VT_VERSIONED_STREAM = 73
 VT_BSTR_BLOB = &hfff
 VT_VECTOR = &h1000
 VT_ARRAY = &h2000
 VT_BYREF = &h4000
 VT_RESERVED = &h8000
 VT_ILLEGAL = &hffff
 VT_ILLEGALMASKED = &hfff
 VT_TYPEMASK = &hfff
end enum

type PROPID as ULONG

type _tagpropertykey
 fmtid as GUID
 pid as DWORD
end type

type PROPERTYKEY as _tagpropertykey

type tagCSPLATFORM
 dwPlatformId as DWORD
 dwVersionHi as DWORD
 dwVersionLo as DWORD
 dwProcessorArch as DWORD
end type

type CSPLATFORM as tagCSPLATFORM

type tagQUERYCONTEXT
 dwContext as DWORD
 Platform as CSPLATFORM
 Locale as LCID
 dwVersionHi as DWORD
 dwVersionLo as DWORD
end type

type QUERYCONTEXT as tagQUERYCONTEXT

type tagTYSPEC as long
enum
 TYSPEC_CLSID = 0
 TYSPEC_FILEEXT = 1
 TYSPEC_MIMETYPE = 2
 TYSPEC_FILENAME = 3
 TYSPEC_PROGID = 4
 TYSPEC_PACKAGENAME = 5
 TYSPEC_OBJECTID = 6
end enum

type TYSPEC as tagTYSPEC

type __WIDL_wtypes_generated_name_00000001_tagged_union_ByName
 pPackageName as LPOLESTR
 PolicyId as GUID
end type

type __WIDL_wtypes_generated_name_00000001_tagged_union_ByObjectId
 ObjectId as GUID
 PolicyId as GUID
end type

union __WIDL_wtypes_generated_name_00000001_tagged_union
 clsid as CLSID
 pFileExt as LPOLESTR
 pMimeType as LPOLESTR
 pProgId as LPOLESTR
 pFileName as LPOLESTR
 ByName as __WIDL_wtypes_generated_name_00000001_tagged_union_ByName
 ByObjectId as __WIDL_wtypes_generated_name_00000001_tagged_union_ByObjectId
end union

type __WIDL_wtypes_generated_name_00000001
 tyspec as DWORD
 tagged_union as __WIDL_wtypes_generated_name_00000001_tagged_union
end type

type uCLSSPEC as __WIDL_wtypes_generated_name_00000001

end extern

extern "Windows"

type IMallocSpy as IMallocSpy_
type LPMALLOCSPY as IMallocSpy ptr
extern IID_IMallocSpy as const GUID

type IMallocSpyVtbl
 QueryInterface as function(byval This as IMallocSpy ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IMallocSpy ptr) as ULONG
 Release as function(byval This as IMallocSpy ptr) as ULONG
 PreAlloc as function(byval This as IMallocSpy ptr, byval cbRequest as SIZE_T_) as SIZE_T_
 PostAlloc as function(byval This as IMallocSpy ptr, byval pActual as any ptr) as any ptr
 PreFree as function(byval This as IMallocSpy ptr, byval pRequest as any ptr, byval fSpyed as WINBOOL) as any ptr
 PostFree as sub(byval This as IMallocSpy ptr, byval fSpyed as WINBOOL)
 PreRealloc as function(byval This as IMallocSpy ptr, byval pRequest as any ptr, byval cbRequest as SIZE_T_, byval ppNewRequest as any ptr ptr, byval fSpyed as WINBOOL) as SIZE_T_
 PostRealloc as function(byval This as IMallocSpy ptr, byval pActual as any ptr, byval fSpyed as WINBOOL) as any ptr
 PreGetSize as function(byval This as IMallocSpy ptr, byval pRequest as any ptr, byval fSpyed as WINBOOL) as any ptr
 PostGetSize as function(byval This as IMallocSpy ptr, byval cbActual as SIZE_T_, byval fSpyed as WINBOOL) as SIZE_T_
 PreDidAlloc as function(byval This as IMallocSpy ptr, byval pRequest as any ptr, byval fSpyed as WINBOOL) as any ptr
 PostDidAlloc as function(byval This as IMallocSpy ptr, byval pRequest as any ptr, byval fSpyed as WINBOOL, byval fActual as long) as long
 PreHeapMinimize as sub(byval This as IMallocSpy ptr)
 PostHeapMinimize as sub(byval This as IMallocSpy ptr)
end type

type IMallocSpy_
 lpVtbl as IMallocSpyVtbl ptr
end type


declare function IMallocSpy_PreAlloc_Proxy(byval This as IMallocSpy ptr, byval cbRequest as SIZE_T_) as SIZE_T_
declare sub IMallocSpy_PreAlloc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMallocSpy_PostAlloc_Proxy(byval This as IMallocSpy ptr, byval pActual as any ptr) as any ptr
declare sub IMallocSpy_PostAlloc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMallocSpy_PreFree_Proxy(byval This as IMallocSpy ptr, byval pRequest as any ptr, byval fSpyed as WINBOOL) as any ptr
declare sub IMallocSpy_PreFree_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub IMallocSpy_PostFree_Proxy(byval This as IMallocSpy ptr, byval fSpyed as WINBOOL)
declare sub IMallocSpy_PostFree_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMallocSpy_PreRealloc_Proxy(byval This as IMallocSpy ptr, byval pRequest as any ptr, byval cbRequest as SIZE_T_, byval ppNewRequest as any ptr ptr, byval fSpyed as WINBOOL) as SIZE_T_
declare sub IMallocSpy_PreRealloc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMallocSpy_PostRealloc_Proxy(byval This as IMallocSpy ptr, byval pActual as any ptr, byval fSpyed as WINBOOL) as any ptr
declare sub IMallocSpy_PostRealloc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMallocSpy_PreGetSize_Proxy(byval This as IMallocSpy ptr, byval pRequest as any ptr, byval fSpyed as WINBOOL) as any ptr
declare sub IMallocSpy_PreGetSize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMallocSpy_PostGetSize_Proxy(byval This as IMallocSpy ptr, byval cbActual as SIZE_T_, byval fSpyed as WINBOOL) as SIZE_T_
declare sub IMallocSpy_PostGetSize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMallocSpy_PreDidAlloc_Proxy(byval This as IMallocSpy ptr, byval pRequest as any ptr, byval fSpyed as WINBOOL) as any ptr
declare sub IMallocSpy_PreDidAlloc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMallocSpy_PostDidAlloc_Proxy(byval This as IMallocSpy ptr, byval pRequest as any ptr, byval fSpyed as WINBOOL, byval fActual as long) as long
declare sub IMallocSpy_PostDidAlloc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub IMallocSpy_PreHeapMinimize_Proxy(byval This as IMallocSpy ptr)
declare sub IMallocSpy_PreHeapMinimize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub IMallocSpy_PostHeapMinimize_Proxy(byval This as IMallocSpy ptr)
declare sub IMallocSpy_PostHeapMinimize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)

type IBindCtx as IBindCtx_
type LPBC as IBindCtx ptr
type LPBINDCTX as IBindCtx ptr

type tagBIND_OPTS
 cbStruct as DWORD
 grfFlags as DWORD
 grfMode as DWORD
 dwTickCountDeadline as DWORD
end type

type BIND_OPTS as tagBIND_OPTS
type LPBIND_OPTS as tagBIND_OPTS ptr

type tagBIND_OPTS2
 cbStruct as DWORD
 grfFlags as DWORD
 grfMode as DWORD
 dwTickCountDeadline as DWORD
 dwTrackFlags as DWORD
 dwClassContext as DWORD
 locale as LCID
 pServerInfo as COSERVERINFO ptr
end type

type BIND_OPTS2 as tagBIND_OPTS2
type LPBIND_OPTS2 as tagBIND_OPTS2 ptr

type tagBIND_OPTS3
 cbStruct as DWORD
 grfFlags as DWORD
 grfMode as DWORD
 dwTickCountDeadline as DWORD
 dwTrackFlags as DWORD
 dwClassContext as DWORD
 locale as LCID
 pServerInfo as COSERVERINFO ptr
 hwnd as HWND
end type

type BIND_OPTS3 as tagBIND_OPTS3
type LPBIND_OPTS3 as tagBIND_OPTS3 ptr

type tagBIND_FLAGS as long
enum
 BIND_MAYBOTHERUSER = 1
 BIND_JUSTTESTEXISTENCE = 2
end enum

type BIND_FLAGS as tagBIND_FLAGS
extern IID_IBindCtx as const GUID
type IRunningObjectTable as IRunningObjectTable_

type IBindCtxVtbl
 QueryInterface as function(byval This as IBindCtx ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IBindCtx ptr) as ULONG
 Release as function(byval This as IBindCtx ptr) as ULONG
 RegisterObjectBound as function(byval This as IBindCtx ptr, byval punk as IUnknown ptr) as HRESULT
 RevokeObjectBound as function(byval This as IBindCtx ptr, byval punk as IUnknown ptr) as HRESULT
 ReleaseBoundObjects as function(byval This as IBindCtx ptr) as HRESULT
 SetBindOptions as function(byval This as IBindCtx ptr, byval pbindopts as BIND_OPTS ptr) as HRESULT
 GetBindOptions as function(byval This as IBindCtx ptr, byval pbindopts as BIND_OPTS ptr) as HRESULT
 GetRunningObjectTable as function(byval This as IBindCtx ptr, byval pprot as IRunningObjectTable ptr ptr) as HRESULT
 RegisterObjectParam as function(byval This as IBindCtx ptr, byval pszKey as LPOLESTR, byval punk as IUnknown ptr) as HRESULT
 GetObjectParam as function(byval This as IBindCtx ptr, byval pszKey as LPOLESTR, byval ppunk as IUnknown ptr ptr) as HRESULT
 EnumObjectParam as function(byval This as IBindCtx ptr, byval ppenum as IEnumString ptr ptr) as HRESULT
 RevokeObjectParam as function(byval This as IBindCtx ptr, byval pszKey as LPOLESTR) as HRESULT
end type

type IBindCtx_
 lpVtbl as IBindCtxVtbl ptr
end type


declare function IBindCtx_RegisterObjectBound_Proxy(byval This as IBindCtx ptr, byval punk as IUnknown ptr) as HRESULT
declare sub IBindCtx_RegisterObjectBound_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindCtx_RevokeObjectBound_Proxy(byval This as IBindCtx ptr, byval punk as IUnknown ptr) as HRESULT
declare sub IBindCtx_RevokeObjectBound_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindCtx_ReleaseBoundObjects_Proxy(byval This as IBindCtx ptr) as HRESULT
declare sub IBindCtx_ReleaseBoundObjects_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindCtx_RemoteSetBindOptions_Proxy(byval This as IBindCtx ptr, byval pbindopts as BIND_OPTS2 ptr) as HRESULT
declare sub IBindCtx_RemoteSetBindOptions_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindCtx_RemoteGetBindOptions_Proxy(byval This as IBindCtx ptr, byval pbindopts as BIND_OPTS2 ptr) as HRESULT
declare sub IBindCtx_RemoteGetBindOptions_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindCtx_GetRunningObjectTable_Proxy(byval This as IBindCtx ptr, byval pprot as IRunningObjectTable ptr ptr) as HRESULT
declare sub IBindCtx_GetRunningObjectTable_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindCtx_RegisterObjectParam_Proxy(byval This as IBindCtx ptr, byval pszKey as LPOLESTR, byval punk as IUnknown ptr) as HRESULT
declare sub IBindCtx_RegisterObjectParam_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindCtx_GetObjectParam_Proxy(byval This as IBindCtx ptr, byval pszKey as LPOLESTR, byval ppunk as IUnknown ptr ptr) as HRESULT
declare sub IBindCtx_GetObjectParam_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindCtx_EnumObjectParam_Proxy(byval This as IBindCtx ptr, byval ppenum as IEnumString ptr ptr) as HRESULT
declare sub IBindCtx_EnumObjectParam_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindCtx_RevokeObjectParam_Proxy(byval This as IBindCtx ptr, byval pszKey as LPOLESTR) as HRESULT
declare sub IBindCtx_RevokeObjectParam_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindCtx_SetBindOptions_Proxy(byval This as IBindCtx ptr, byval pbindopts as BIND_OPTS ptr) as HRESULT
declare function IBindCtx_SetBindOptions_Stub(byval This as IBindCtx ptr, byval pbindopts as BIND_OPTS2 ptr) as HRESULT
declare function IBindCtx_GetBindOptions_Proxy(byval This as IBindCtx ptr, byval pbindopts as BIND_OPTS ptr) as HRESULT
declare function IBindCtx_GetBindOptions_Stub(byval This as IBindCtx ptr, byval pbindopts as BIND_OPTS2 ptr) as HRESULT
type IEnumMoniker as IEnumMoniker_
type LPENUMMONIKER as IEnumMoniker ptr
extern IID_IEnumMoniker as const GUID
type IMoniker as IMoniker_

type IEnumMonikerVtbl
 QueryInterface as function(byval This as IEnumMoniker ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IEnumMoniker ptr) as ULONG
 Release as function(byval This as IEnumMoniker ptr) as ULONG
 Next as function(byval This as IEnumMoniker ptr, byval celt as ULONG, byval rgelt as IMoniker ptr ptr, byval pceltFetched as ULONG ptr) as HRESULT
 Skip as function(byval This as IEnumMoniker ptr, byval celt as ULONG) as HRESULT
 Reset as function(byval This as IEnumMoniker ptr) as HRESULT
 Clone as function(byval This as IEnumMoniker ptr, byval ppenum as IEnumMoniker ptr ptr) as HRESULT
end type

type IEnumMoniker_
 lpVtbl as IEnumMonikerVtbl ptr
end type


declare function IEnumMoniker_RemoteNext_Proxy(byval This as IEnumMoniker ptr, byval celt as ULONG, byval rgelt as IMoniker ptr ptr, byval pceltFetched as ULONG ptr) as HRESULT
declare sub IEnumMoniker_RemoteNext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumMoniker_Skip_Proxy(byval This as IEnumMoniker ptr, byval celt as ULONG) as HRESULT
declare sub IEnumMoniker_Skip_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumMoniker_Reset_Proxy(byval This as IEnumMoniker ptr) as HRESULT
declare sub IEnumMoniker_Reset_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumMoniker_Clone_Proxy(byval This as IEnumMoniker ptr, byval ppenum as IEnumMoniker ptr ptr) as HRESULT
declare sub IEnumMoniker_Clone_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumMoniker_Next_Proxy(byval This as IEnumMoniker ptr, byval celt as ULONG, byval rgelt as IMoniker ptr ptr, byval pceltFetched as ULONG ptr) as HRESULT
declare function IEnumMoniker_Next_Stub(byval This as IEnumMoniker ptr, byval celt as ULONG, byval rgelt as IMoniker ptr ptr, byval pceltFetched as ULONG ptr) as HRESULT
type IRunnableObject as IRunnableObject_
type LPRUNNABLEOBJECT as IRunnableObject ptr
extern IID_IRunnableObject as const GUID

type IRunnableObjectVtbl
 QueryInterface as function(byval This as IRunnableObject ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IRunnableObject ptr) as ULONG
 Release as function(byval This as IRunnableObject ptr) as ULONG
 GetRunningClass as function(byval This as IRunnableObject ptr, byval lpClsid as LPCLSID) as HRESULT
 Run as function(byval This as IRunnableObject ptr, byval pbc as LPBINDCTX) as HRESULT
 IsRunning as function(byval This as IRunnableObject ptr) as WINBOOL
 LockRunning as function(byval This as IRunnableObject ptr, byval fLock as WINBOOL, byval fLastUnlockCloses as WINBOOL) as HRESULT
 SetContainedObject as function(byval This as IRunnableObject ptr, byval fContained as WINBOOL) as HRESULT
end type

type IRunnableObject_
 lpVtbl as IRunnableObjectVtbl ptr
end type


declare function IRunnableObject_GetRunningClass_Proxy(byval This as IRunnableObject ptr, byval lpClsid as LPCLSID) as HRESULT
declare sub IRunnableObject_GetRunningClass_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRunnableObject_Run_Proxy(byval This as IRunnableObject ptr, byval pbc as LPBINDCTX) as HRESULT
declare sub IRunnableObject_Run_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRunnableObject_RemoteIsRunning_Proxy(byval This as IRunnableObject ptr) as HRESULT
declare sub IRunnableObject_RemoteIsRunning_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRunnableObject_LockRunning_Proxy(byval This as IRunnableObject ptr, byval fLock as WINBOOL, byval fLastUnlockCloses as WINBOOL) as HRESULT
declare sub IRunnableObject_LockRunning_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRunnableObject_SetContainedObject_Proxy(byval This as IRunnableObject ptr, byval fContained as WINBOOL) as HRESULT
declare sub IRunnableObject_SetContainedObject_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRunnableObject_IsRunning_Proxy(byval This as IRunnableObject ptr) as WINBOOL
declare function IRunnableObject_IsRunning_Stub(byval This as IRunnableObject ptr) as HRESULT
type LPRUNNINGOBJECTTABLE as IRunningObjectTable ptr
extern IID_IRunningObjectTable as const GUID

type IRunningObjectTableVtbl
 QueryInterface as function(byval This as IRunningObjectTable ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IRunningObjectTable ptr) as ULONG
 Release as function(byval This as IRunningObjectTable ptr) as ULONG
 Register as function(byval This as IRunningObjectTable ptr, byval grfFlags as DWORD, byval punkObject as IUnknown ptr, byval pmkObjectName as IMoniker ptr, byval pdwRegister as DWORD ptr) as HRESULT
 Revoke as function(byval This as IRunningObjectTable ptr, byval dwRegister as DWORD) as HRESULT
 IsRunning as function(byval This as IRunningObjectTable ptr, byval pmkObjectName as IMoniker ptr) as HRESULT
 GetObject as function(byval This as IRunningObjectTable ptr, byval pmkObjectName as IMoniker ptr, byval ppunkObject as IUnknown ptr ptr) as HRESULT
 NoteChangeTime as function(byval This as IRunningObjectTable ptr, byval dwRegister as DWORD, byval pfiletime as FILETIME ptr) as HRESULT
 GetTimeOfLastChange as function(byval This as IRunningObjectTable ptr, byval pmkObjectName as IMoniker ptr, byval pfiletime as FILETIME ptr) as HRESULT
 EnumRunning as function(byval This as IRunningObjectTable ptr, byval ppenumMoniker as IEnumMoniker ptr ptr) as HRESULT
end type

type IRunningObjectTable_
 lpVtbl as IRunningObjectTableVtbl ptr
end type


declare function IRunningObjectTable_Register_Proxy(byval This as IRunningObjectTable ptr, byval grfFlags as DWORD, byval punkObject as IUnknown ptr, byval pmkObjectName as IMoniker ptr, byval pdwRegister as DWORD ptr) as HRESULT
declare sub IRunningObjectTable_Register_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRunningObjectTable_Revoke_Proxy(byval This as IRunningObjectTable ptr, byval dwRegister as DWORD) as HRESULT
declare sub IRunningObjectTable_Revoke_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRunningObjectTable_IsRunning_Proxy(byval This as IRunningObjectTable ptr, byval pmkObjectName as IMoniker ptr) as HRESULT
declare sub IRunningObjectTable_IsRunning_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRunningObjectTable_GetObject_Proxy(byval This as IRunningObjectTable ptr, byval pmkObjectName as IMoniker ptr, byval ppunkObject as IUnknown ptr ptr) as HRESULT
declare sub IRunningObjectTable_GetObject_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRunningObjectTable_NoteChangeTime_Proxy(byval This as IRunningObjectTable ptr, byval dwRegister as DWORD, byval pfiletime as FILETIME ptr) as HRESULT
declare sub IRunningObjectTable_NoteChangeTime_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRunningObjectTable_GetTimeOfLastChange_Proxy(byval This as IRunningObjectTable ptr, byval pmkObjectName as IMoniker ptr, byval pfiletime as FILETIME ptr) as HRESULT
declare sub IRunningObjectTable_GetTimeOfLastChange_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRunningObjectTable_EnumRunning_Proxy(byval This as IRunningObjectTable ptr, byval ppenumMoniker as IEnumMoniker ptr ptr) as HRESULT
declare sub IRunningObjectTable_EnumRunning_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IPersist as IPersist_
type LPPERSIST as IPersist ptr
extern IID_IPersist as const GUID

type IPersistVtbl
 QueryInterface as function(byval This as IPersist ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IPersist ptr) as ULONG
 Release as function(byval This as IPersist ptr) as ULONG
 GetClassID as function(byval This as IPersist ptr, byval pClassID as CLSID ptr) as HRESULT
end type

type IPersist_
 lpVtbl as IPersistVtbl ptr
end type

declare function IPersist_GetClassID_Proxy(byval This as IPersist ptr, byval pClassID as CLSID ptr) as HRESULT
declare sub IPersist_GetClassID_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IPersistStream as IPersistStream_
type LPPERSISTSTREAM as IPersistStream ptr
extern IID_IPersistStream as const GUID

type IPersistStreamVtbl
 QueryInterface as function(byval This as IPersistStream ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IPersistStream ptr) as ULONG
 Release as function(byval This as IPersistStream ptr) as ULONG
 GetClassID as function(byval This as IPersistStream ptr, byval pClassID as CLSID ptr) as HRESULT
 IsDirty as function(byval This as IPersistStream ptr) as HRESULT
 Load as function(byval This as IPersistStream ptr, byval pStm as IStream ptr) as HRESULT
 Save as function(byval This as IPersistStream ptr, byval pStm as IStream ptr, byval fClearDirty as WINBOOL) as HRESULT
 GetSizeMax as function(byval This as IPersistStream ptr, byval pcbSize as ULARGE_INTEGER ptr) as HRESULT
end type

type IPersistStream_
 lpVtbl as IPersistStreamVtbl ptr
end type


declare function IPersistStream_IsDirty_Proxy(byval This as IPersistStream ptr) as HRESULT
declare sub IPersistStream_IsDirty_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistStream_Load_Proxy(byval This as IPersistStream ptr, byval pStm as IStream ptr) as HRESULT
declare sub IPersistStream_Load_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistStream_Save_Proxy(byval This as IPersistStream ptr, byval pStm as IStream ptr, byval fClearDirty as WINBOOL) as HRESULT
declare sub IPersistStream_Save_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistStream_GetSizeMax_Proxy(byval This as IPersistStream ptr, byval pcbSize as ULARGE_INTEGER ptr) as HRESULT
declare sub IPersistStream_GetSizeMax_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type LPMONIKER as IMoniker ptr

type tagMKSYS as long
enum
 MKSYS_NONE = 0
 MKSYS_GENERICCOMPOSITE = 1
 MKSYS_FILEMONIKER = 2
 MKSYS_ANTIMONIKER = 3
 MKSYS_ITEMMONIKER = 4
 MKSYS_POINTERMONIKER = 5
 MKSYS_CLASSMONIKER = 7
 MKSYS_OBJREFMONIKER = 8
 MKSYS_SESSIONMONIKER = 9
 MKSYS_LUAMONIKER = 10
end enum

type MKSYS as tagMKSYS

type tagMKREDUCE as long
enum
 MKRREDUCE_ONE = 3 shl 16
 MKRREDUCE_TOUSER = 2 shl 16
 MKRREDUCE_THROUGHUSER = 1 shl 16
 MKRREDUCE_ALL = 0
end enum

type MKRREDUCE as tagMKREDUCE
extern IID_IMoniker as const GUID

type IMonikerVtbl
 QueryInterface as function(byval This as IMoniker ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IMoniker ptr) as ULONG
 Release as function(byval This as IMoniker ptr) as ULONG
 GetClassID as function(byval This as IMoniker ptr, byval pClassID as CLSID ptr) as HRESULT
 IsDirty as function(byval This as IMoniker ptr) as HRESULT
 Load as function(byval This as IMoniker ptr, byval pStm as IStream ptr) as HRESULT
 Save as function(byval This as IMoniker ptr, byval pStm as IStream ptr, byval fClearDirty as WINBOOL) as HRESULT
 GetSizeMax as function(byval This as IMoniker ptr, byval pcbSize as ULARGE_INTEGER ptr) as HRESULT
 BindToObject as function(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval pmkToLeft as IMoniker ptr, byval riidResult as const IID const ptr, byval ppvResult as any ptr ptr) as HRESULT
 BindToStorage as function(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval pmkToLeft as IMoniker ptr, byval riid as const IID const ptr, byval ppvObj as any ptr ptr) as HRESULT
 Reduce as function(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval dwReduceHowFar as DWORD, byval ppmkToLeft as IMoniker ptr ptr, byval ppmkReduced as IMoniker ptr ptr) as HRESULT
 ComposeWith as function(byval This as IMoniker ptr, byval pmkRight as IMoniker ptr, byval fOnlyIfNotGeneric as WINBOOL, byval ppmkComposite as IMoniker ptr ptr) as HRESULT
 as function(byval This as IMoniker ptr, byval fForward as WINBOOL, byval ppenumMoniker as IEnumMoniker ptr ptr) as HRESULT Enum
 IsEqual as function(byval This as IMoniker ptr, byval pmkOtherMoniker as IMoniker ptr) as HRESULT
 Hash as function(byval This as IMoniker ptr, byval pdwHash as DWORD ptr) as HRESULT
 IsRunning as function(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval pmkToLeft as IMoniker ptr, byval pmkNewlyRunning as IMoniker ptr) as HRESULT
 GetTimeOfLastChange as function(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval pmkToLeft as IMoniker ptr, byval pFileTime as FILETIME ptr) as HRESULT
 Inverse as function(byval This as IMoniker ptr, byval ppmk as IMoniker ptr ptr) as HRESULT
 CommonPrefixWith as function(byval This as IMoniker ptr, byval pmkOther as IMoniker ptr, byval ppmkPrefix as IMoniker ptr ptr) as HRESULT
 RelativePathTo as function(byval This as IMoniker ptr, byval pmkOther as IMoniker ptr, byval ppmkRelPath as IMoniker ptr ptr) as HRESULT
 GetDisplayName as function(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval pmkToLeft as IMoniker ptr, byval ppszDisplayName as LPOLESTR ptr) as HRESULT
 ParseDisplayName as function(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval pmkToLeft as IMoniker ptr, byval pszDisplayName as LPOLESTR, byval pchEaten as ULONG ptr, byval ppmkOut as IMoniker ptr ptr) as HRESULT
 IsSystemMoniker as function(byval This as IMoniker ptr, byval pdwMksys as DWORD ptr) as HRESULT
end type

type IMoniker_
 lpVtbl as IMonikerVtbl ptr
end type


declare function IMoniker_RemoteBindToObject_Proxy(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval pmkToLeft as IMoniker ptr, byval riidResult as const IID const ptr, byval ppvResult as IUnknown ptr ptr) as HRESULT
declare sub IMoniker_RemoteBindToObject_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMoniker_RemoteBindToStorage_Proxy(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval pmkToLeft as IMoniker ptr, byval riid as const IID const ptr, byval ppvObj as IUnknown ptr ptr) as HRESULT
declare sub IMoniker_RemoteBindToStorage_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMoniker_Reduce_Proxy(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval dwReduceHowFar as DWORD, byval ppmkToLeft as IMoniker ptr ptr, byval ppmkReduced as IMoniker ptr ptr) as HRESULT
declare sub IMoniker_Reduce_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMoniker_ComposeWith_Proxy(byval This as IMoniker ptr, byval pmkRight as IMoniker ptr, byval fOnlyIfNotGeneric as WINBOOL, byval ppmkComposite as IMoniker ptr ptr) as HRESULT
declare sub IMoniker_ComposeWith_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMoniker_Enum_Proxy(byval This as IMoniker ptr, byval fForward as WINBOOL, byval ppenumMoniker as IEnumMoniker ptr ptr) as HRESULT
declare sub IMoniker_Enum_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMoniker_IsEqual_Proxy(byval This as IMoniker ptr, byval pmkOtherMoniker as IMoniker ptr) as HRESULT
declare sub IMoniker_IsEqual_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMoniker_Hash_Proxy(byval This as IMoniker ptr, byval pdwHash as DWORD ptr) as HRESULT
declare sub IMoniker_Hash_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMoniker_IsRunning_Proxy(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval pmkToLeft as IMoniker ptr, byval pmkNewlyRunning as IMoniker ptr) as HRESULT
declare sub IMoniker_IsRunning_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMoniker_GetTimeOfLastChange_Proxy(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval pmkToLeft as IMoniker ptr, byval pFileTime as FILETIME ptr) as HRESULT
declare sub IMoniker_GetTimeOfLastChange_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMoniker_Inverse_Proxy(byval This as IMoniker ptr, byval ppmk as IMoniker ptr ptr) as HRESULT
declare sub IMoniker_Inverse_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMoniker_CommonPrefixWith_Proxy(byval This as IMoniker ptr, byval pmkOther as IMoniker ptr, byval ppmkPrefix as IMoniker ptr ptr) as HRESULT
declare sub IMoniker_CommonPrefixWith_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMoniker_RelativePathTo_Proxy(byval This as IMoniker ptr, byval pmkOther as IMoniker ptr, byval ppmkRelPath as IMoniker ptr ptr) as HRESULT
declare sub IMoniker_RelativePathTo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMoniker_GetDisplayName_Proxy(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval pmkToLeft as IMoniker ptr, byval ppszDisplayName as LPOLESTR ptr) as HRESULT
declare sub IMoniker_GetDisplayName_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMoniker_ParseDisplayName_Proxy(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval pmkToLeft as IMoniker ptr, byval pszDisplayName as LPOLESTR, byval pchEaten as ULONG ptr, byval ppmkOut as IMoniker ptr ptr) as HRESULT
declare sub IMoniker_ParseDisplayName_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMoniker_IsSystemMoniker_Proxy(byval This as IMoniker ptr, byval pdwMksys as DWORD ptr) as HRESULT
declare sub IMoniker_IsSystemMoniker_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMoniker_BindToObject_Proxy(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval pmkToLeft as IMoniker ptr, byval riidResult as const IID const ptr, byval ppvResult as any ptr ptr) as HRESULT
declare function IMoniker_BindToObject_Stub(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval pmkToLeft as IMoniker ptr, byval riidResult as const IID const ptr, byval ppvResult as IUnknown ptr ptr) as HRESULT
declare function IMoniker_BindToStorage_Proxy(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval pmkToLeft as IMoniker ptr, byval riid as const IID const ptr, byval ppvObj as any ptr ptr) as HRESULT
declare function IMoniker_BindToStorage_Stub(byval This as IMoniker ptr, byval pbc as IBindCtx ptr, byval pmkToLeft as IMoniker ptr, byval riid as const IID const ptr, byval ppvObj as IUnknown ptr ptr) as HRESULT
extern IID_IROTData as const GUID
type IROTData as IROTData_

type IROTDataVtbl
 QueryInterface as function(byval This as IROTData ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IROTData ptr) as ULONG
 Release as function(byval This as IROTData ptr) as ULONG
 GetComparisonData as function(byval This as IROTData ptr, byval pbData as ubyte ptr, byval cbMax as ULONG, byval pcbData as ULONG ptr) as HRESULT
end type

type IROTData_
 lpVtbl as IROTDataVtbl ptr
end type

declare function IROTData_GetComparisonData_Proxy(byval This as IROTData ptr, byval pbData as ubyte ptr, byval cbMax as ULONG, byval pcbData as ULONG ptr) as HRESULT
declare sub IROTData_GetComparisonData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IEnumSTATSTG as IEnumSTATSTG_
type LPENUMSTATSTG as IEnumSTATSTG ptr
extern IID_IEnumSTATSTG as const GUID

type IEnumSTATSTGVtbl
 QueryInterface as function(byval This as IEnumSTATSTG ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IEnumSTATSTG ptr) as ULONG
 Release as function(byval This as IEnumSTATSTG ptr) as ULONG
 Next as function(byval This as IEnumSTATSTG ptr, byval celt as ULONG, byval rgelt as STATSTG ptr, byval pceltFetched as ULONG ptr) as HRESULT
 Skip as function(byval This as IEnumSTATSTG ptr, byval celt as ULONG) as HRESULT
 Reset as function(byval This as IEnumSTATSTG ptr) as HRESULT
 Clone as function(byval This as IEnumSTATSTG ptr, byval ppenum as IEnumSTATSTG ptr ptr) as HRESULT
end type

type IEnumSTATSTG_
 lpVtbl as IEnumSTATSTGVtbl ptr
end type


declare function IEnumSTATSTG_RemoteNext_Proxy(byval This as IEnumSTATSTG ptr, byval celt as ULONG, byval rgelt as STATSTG ptr, byval pceltFetched as ULONG ptr) as HRESULT
declare sub IEnumSTATSTG_RemoteNext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumSTATSTG_Skip_Proxy(byval This as IEnumSTATSTG ptr, byval celt as ULONG) as HRESULT
declare sub IEnumSTATSTG_Skip_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumSTATSTG_Reset_Proxy(byval This as IEnumSTATSTG ptr) as HRESULT
declare sub IEnumSTATSTG_Reset_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumSTATSTG_Clone_Proxy(byval This as IEnumSTATSTG ptr, byval ppenum as IEnumSTATSTG ptr ptr) as HRESULT
declare sub IEnumSTATSTG_Clone_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumSTATSTG_Next_Proxy(byval This as IEnumSTATSTG ptr, byval celt as ULONG, byval rgelt as STATSTG ptr, byval pceltFetched as ULONG ptr) as HRESULT
declare function IEnumSTATSTG_Next_Stub(byval This as IEnumSTATSTG ptr, byval celt as ULONG, byval rgelt as STATSTG ptr, byval pceltFetched as ULONG ptr) as HRESULT
type IStorage as IStorage_
type LPSTORAGE as IStorage ptr

type tagRemSNB
 ulCntStr as ULONG
 ulCntChar as ULONG
 rgString as wstring * 1
end type

type RemSNB as tagRemSNB
type wireSNB as RemSNB ptr
type SNB as LPOLESTR ptr
extern IID_IStorage as const GUID

type IStorageVtbl
 QueryInterface as function(byval This as IStorage ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IStorage ptr) as ULONG
 Release as function(byval This as IStorage ptr) as ULONG
 CreateStream as function(byval This as IStorage ptr, byval pwcsName as const wstring ptr, byval grfMode as DWORD, byval reserved1 as DWORD, byval reserved2 as DWORD, byval ppstm as IStream ptr ptr) as HRESULT
 OpenStream as function(byval This as IStorage ptr, byval pwcsName as const wstring ptr, byval reserved1 as any ptr, byval grfMode as DWORD, byval reserved2 as DWORD, byval ppstm as IStream ptr ptr) as HRESULT
 CreateStorage as function(byval This as IStorage ptr, byval pwcsName as const wstring ptr, byval grfMode as DWORD, byval reserved1 as DWORD, byval reserved2 as DWORD, byval ppstg as IStorage ptr ptr) as HRESULT
 OpenStorage as function(byval This as IStorage ptr, byval pwcsName as const wstring ptr, byval pstgPriority as IStorage ptr, byval grfMode as DWORD, byval snbExclude as SNB, byval reserved as DWORD, byval ppstg as IStorage ptr ptr) as HRESULT
 CopyTo as function(byval This as IStorage ptr, byval ciidExclude as DWORD, byval rgiidExclude as const IID ptr, byval snbExclude as SNB, byval pstgDest as IStorage ptr) as HRESULT
 MoveElementTo as function(byval This as IStorage ptr, byval pwcsName as const wstring ptr, byval pstgDest as IStorage ptr, byval pwcsNewName as const wstring ptr, byval grfFlags as DWORD) as HRESULT
 Commit as function(byval This as IStorage ptr, byval grfCommitFlags as DWORD) as HRESULT
 Revert as function(byval This as IStorage ptr) as HRESULT
 EnumElements as function(byval This as IStorage ptr, byval reserved1 as DWORD, byval reserved2 as any ptr, byval reserved3 as DWORD, byval ppenum as IEnumSTATSTG ptr ptr) as HRESULT
 DestroyElement as function(byval This as IStorage ptr, byval pwcsName as const wstring ptr) as HRESULT
 RenameElement as function(byval This as IStorage ptr, byval pwcsOldName as const wstring ptr, byval pwcsNewName as const wstring ptr) as HRESULT
 SetElementTimes as function(byval This as IStorage ptr, byval pwcsName as const wstring ptr, byval pctime as const FILETIME ptr, byval patime as const FILETIME ptr, byval pmtime as const FILETIME ptr) as HRESULT
 SetClass as function(byval This as IStorage ptr, byval clsid as const IID const ptr) as HRESULT
 SetStateBits as function(byval This as IStorage ptr, byval grfStateBits as DWORD, byval grfMask as DWORD) as HRESULT
 Stat as function(byval This as IStorage ptr, byval pstatstg as STATSTG ptr, byval grfStatFlag as DWORD) as HRESULT
end type

type IStorage_
 lpVtbl as IStorageVtbl ptr
end type


declare function IStorage_CreateStream_Proxy(byval This as IStorage ptr, byval pwcsName as const wstring ptr, byval grfMode as DWORD, byval reserved1 as DWORD, byval reserved2 as DWORD, byval ppstm as IStream ptr ptr) as HRESULT
declare sub IStorage_CreateStream_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStorage_RemoteOpenStream_Proxy(byval This as IStorage ptr, byval pwcsName as const wstring ptr, byval cbReserved1 as ULONG, byval reserved1 as ubyte ptr, byval grfMode as DWORD, byval reserved2 as DWORD, byval ppstm as IStream ptr ptr) as HRESULT
declare sub IStorage_RemoteOpenStream_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStorage_CreateStorage_Proxy(byval This as IStorage ptr, byval pwcsName as const wstring ptr, byval grfMode as DWORD, byval reserved1 as DWORD, byval reserved2 as DWORD, byval ppstg as IStorage ptr ptr) as HRESULT
declare sub IStorage_CreateStorage_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStorage_OpenStorage_Proxy(byval This as IStorage ptr, byval pwcsName as const wstring ptr, byval pstgPriority as IStorage ptr, byval grfMode as DWORD, byval snbExclude as SNB, byval reserved as DWORD, byval ppstg as IStorage ptr ptr) as HRESULT
declare sub IStorage_OpenStorage_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStorage_RemoteCopyTo_Proxy(byval This as IStorage ptr, byval ciidExclude as DWORD, byval rgiidExclude as const IID ptr, byval snbExclude as SNB, byval pstgDest as IStorage ptr) as HRESULT
declare sub IStorage_RemoteCopyTo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStorage_MoveElementTo_Proxy(byval This as IStorage ptr, byval pwcsName as const wstring ptr, byval pstgDest as IStorage ptr, byval pwcsNewName as const wstring ptr, byval grfFlags as DWORD) as HRESULT
declare sub IStorage_MoveElementTo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStorage_Commit_Proxy(byval This as IStorage ptr, byval grfCommitFlags as DWORD) as HRESULT
declare sub IStorage_Commit_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStorage_Revert_Proxy(byval This as IStorage ptr) as HRESULT
declare sub IStorage_Revert_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStorage_RemoteEnumElements_Proxy(byval This as IStorage ptr, byval reserved1 as DWORD, byval cbReserved2 as ULONG, byval reserved2 as ubyte ptr, byval reserved3 as DWORD, byval ppenum as IEnumSTATSTG ptr ptr) as HRESULT
declare sub IStorage_RemoteEnumElements_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStorage_DestroyElement_Proxy(byval This as IStorage ptr, byval pwcsName as const wstring ptr) as HRESULT
declare sub IStorage_DestroyElement_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStorage_RenameElement_Proxy(byval This as IStorage ptr, byval pwcsOldName as const wstring ptr, byval pwcsNewName as const wstring ptr) as HRESULT
declare sub IStorage_RenameElement_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStorage_SetElementTimes_Proxy(byval This as IStorage ptr, byval pwcsName as const wstring ptr, byval pctime as const FILETIME ptr, byval patime as const FILETIME ptr, byval pmtime as const FILETIME ptr) as HRESULT
declare sub IStorage_SetElementTimes_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStorage_SetClass_Proxy(byval This as IStorage ptr, byval clsid as const IID const ptr) as HRESULT
declare sub IStorage_SetClass_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStorage_SetStateBits_Proxy(byval This as IStorage ptr, byval grfStateBits as DWORD, byval grfMask as DWORD) as HRESULT
declare sub IStorage_SetStateBits_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStorage_Stat_Proxy(byval This as IStorage ptr, byval pstatstg as STATSTG ptr, byval grfStatFlag as DWORD) as HRESULT
declare sub IStorage_Stat_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IStorage_OpenStream_Proxy(byval This as IStorage ptr, byval pwcsName as const wstring ptr, byval reserved1 as any ptr, byval grfMode as DWORD, byval reserved2 as DWORD, byval ppstm as IStream ptr ptr) as HRESULT
declare function IStorage_OpenStream_Stub(byval This as IStorage ptr, byval pwcsName as const wstring ptr, byval cbReserved1 as ULONG, byval reserved1 as ubyte ptr, byval grfMode as DWORD, byval reserved2 as DWORD, byval ppstm as IStream ptr ptr) as HRESULT
declare function IStorage_CopyTo_Proxy(byval This as IStorage ptr, byval ciidExclude as DWORD, byval rgiidExclude as const IID ptr, byval snbExclude as SNB, byval pstgDest as IStorage ptr) as HRESULT
declare function IStorage_CopyTo_Stub(byval This as IStorage ptr, byval ciidExclude as DWORD, byval rgiidExclude as const IID ptr, byval snbExclude as SNB, byval pstgDest as IStorage ptr) as HRESULT
declare function IStorage_EnumElements_Proxy(byval This as IStorage ptr, byval reserved1 as DWORD, byval reserved2 as any ptr, byval reserved3 as DWORD, byval ppenum as IEnumSTATSTG ptr ptr) as HRESULT
declare function IStorage_EnumElements_Stub(byval This as IStorage ptr, byval reserved1 as DWORD, byval cbReserved2 as ULONG, byval reserved2 as ubyte ptr, byval reserved3 as DWORD, byval ppenum as IEnumSTATSTG ptr ptr) as HRESULT
type IPersistFile as IPersistFile_
type LPPERSISTFILE as IPersistFile ptr
extern IID_IPersistFile as const GUID

type IPersistFileVtbl
 QueryInterface as function(byval This as IPersistFile ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IPersistFile ptr) as ULONG
 Release as function(byval This as IPersistFile ptr) as ULONG
 GetClassID as function(byval This as IPersistFile ptr, byval pClassID as CLSID ptr) as HRESULT
 IsDirty as function(byval This as IPersistFile ptr) as HRESULT
 Load as function(byval This as IPersistFile ptr, byval pszFileName as LPCOLESTR, byval dwMode as DWORD) as HRESULT
 Save as function(byval This as IPersistFile ptr, byval pszFileName as LPCOLESTR, byval fRemember as WINBOOL) as HRESULT
 SaveCompleted as function(byval This as IPersistFile ptr, byval pszFileName as LPCOLESTR) as HRESULT
 GetCurFile as function(byval This as IPersistFile ptr, byval ppszFileName as LPOLESTR ptr) as HRESULT
end type

type IPersistFile_
 lpVtbl as IPersistFileVtbl ptr
end type


declare function IPersistFile_IsDirty_Proxy(byval This as IPersistFile ptr) as HRESULT
declare sub IPersistFile_IsDirty_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistFile_Load_Proxy(byval This as IPersistFile ptr, byval pszFileName as LPCOLESTR, byval dwMode as DWORD) as HRESULT
declare sub IPersistFile_Load_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistFile_Save_Proxy(byval This as IPersistFile ptr, byval pszFileName as LPCOLESTR, byval fRemember as WINBOOL) as HRESULT
declare sub IPersistFile_Save_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistFile_SaveCompleted_Proxy(byval This as IPersistFile ptr, byval pszFileName as LPCOLESTR) as HRESULT
declare sub IPersistFile_SaveCompleted_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistFile_GetCurFile_Proxy(byval This as IPersistFile ptr, byval ppszFileName as LPOLESTR ptr) as HRESULT
declare sub IPersistFile_GetCurFile_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IPersistStorage as IPersistStorage_
type LPPERSISTSTORAGE as IPersistStorage ptr
extern IID_IPersistStorage as const GUID

type IPersistStorageVtbl
 QueryInterface as function(byval This as IPersistStorage ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IPersistStorage ptr) as ULONG
 Release as function(byval This as IPersistStorage ptr) as ULONG
 GetClassID as function(byval This as IPersistStorage ptr, byval pClassID as CLSID ptr) as HRESULT
 IsDirty as function(byval This as IPersistStorage ptr) as HRESULT
 InitNew as function(byval This as IPersistStorage ptr, byval pStg as IStorage ptr) as HRESULT
 Load as function(byval This as IPersistStorage ptr, byval pStg as IStorage ptr) as HRESULT
 Save as function(byval This as IPersistStorage ptr, byval pStgSave as IStorage ptr, byval fSameAsLoad as WINBOOL) as HRESULT
 SaveCompleted as function(byval This as IPersistStorage ptr, byval pStgNew as IStorage ptr) as HRESULT
 HandsOffStorage as function(byval This as IPersistStorage ptr) as HRESULT
end type

type IPersistStorage_
 lpVtbl as IPersistStorageVtbl ptr
end type


declare function IPersistStorage_IsDirty_Proxy(byval This as IPersistStorage ptr) as HRESULT
declare sub IPersistStorage_IsDirty_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistStorage_InitNew_Proxy(byval This as IPersistStorage ptr, byval pStg as IStorage ptr) as HRESULT
declare sub IPersistStorage_InitNew_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistStorage_Load_Proxy(byval This as IPersistStorage ptr, byval pStg as IStorage ptr) as HRESULT
declare sub IPersistStorage_Load_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistStorage_Save_Proxy(byval This as IPersistStorage ptr, byval pStgSave as IStorage ptr, byval fSameAsLoad as WINBOOL) as HRESULT
declare sub IPersistStorage_Save_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistStorage_SaveCompleted_Proxy(byval This as IPersistStorage ptr, byval pStgNew as IStorage ptr) as HRESULT
declare sub IPersistStorage_SaveCompleted_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistStorage_HandsOffStorage_Proxy(byval This as IPersistStorage ptr) as HRESULT
declare sub IPersistStorage_HandsOffStorage_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type ILockBytes as ILockBytes_
type LPLOCKBYTES as ILockBytes ptr
extern IID_ILockBytes as const GUID

type ILockBytesVtbl
 QueryInterface as function(byval This as ILockBytes ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ILockBytes ptr) as ULONG
 Release as function(byval This as ILockBytes ptr) as ULONG
 ReadAt as function(byval This as ILockBytes ptr, byval ulOffset as ULARGE_INTEGER, byval pv as any ptr, byval cb as ULONG, byval pcbRead as ULONG ptr) as HRESULT
 WriteAt as function(byval This as ILockBytes ptr, byval ulOffset as ULARGE_INTEGER, byval pv as const any ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
 Flush as function(byval This as ILockBytes ptr) as HRESULT
 SetSize as function(byval This as ILockBytes ptr, byval cb as ULARGE_INTEGER) as HRESULT
 LockRegion as function(byval This as ILockBytes ptr, byval libOffset as ULARGE_INTEGER, byval cb as ULARGE_INTEGER, byval dwLockType as DWORD) as HRESULT
 UnlockRegion as function(byval This as ILockBytes ptr, byval libOffset as ULARGE_INTEGER, byval cb as ULARGE_INTEGER, byval dwLockType as DWORD) as HRESULT
 Stat as function(byval This as ILockBytes ptr, byval pstatstg as STATSTG ptr, byval grfStatFlag as DWORD) as HRESULT
end type

type ILockBytes_
 lpVtbl as ILockBytesVtbl ptr
end type


declare function ILockBytes_RemoteReadAt_Proxy(byval This as ILockBytes ptr, byval ulOffset as ULARGE_INTEGER, byval pv as ubyte ptr, byval cb as ULONG, byval pcbRead as ULONG ptr) as HRESULT
declare sub ILockBytes_RemoteReadAt_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ILockBytes_RemoteWriteAt_Proxy(byval This as ILockBytes ptr, byval ulOffset as ULARGE_INTEGER, byval pv as const ubyte ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
declare sub ILockBytes_RemoteWriteAt_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ILockBytes_Flush_Proxy(byval This as ILockBytes ptr) as HRESULT
declare sub ILockBytes_Flush_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ILockBytes_SetSize_Proxy(byval This as ILockBytes ptr, byval cb as ULARGE_INTEGER) as HRESULT
declare sub ILockBytes_SetSize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ILockBytes_LockRegion_Proxy(byval This as ILockBytes ptr, byval libOffset as ULARGE_INTEGER, byval cb as ULARGE_INTEGER, byval dwLockType as DWORD) as HRESULT
declare sub ILockBytes_LockRegion_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ILockBytes_UnlockRegion_Proxy(byval This as ILockBytes ptr, byval libOffset as ULARGE_INTEGER, byval cb as ULARGE_INTEGER, byval dwLockType as DWORD) as HRESULT
declare sub ILockBytes_UnlockRegion_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ILockBytes_Stat_Proxy(byval This as ILockBytes ptr, byval pstatstg as STATSTG ptr, byval grfStatFlag as DWORD) as HRESULT
declare sub ILockBytes_Stat_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ILockBytes_ReadAt_Proxy(byval This as ILockBytes ptr, byval ulOffset as ULARGE_INTEGER, byval pv as any ptr, byval cb as ULONG, byval pcbRead as ULONG ptr) as HRESULT
declare function ILockBytes_ReadAt_Stub(byval This as ILockBytes ptr, byval ulOffset as ULARGE_INTEGER, byval pv as ubyte ptr, byval cb as ULONG, byval pcbRead as ULONG ptr) as HRESULT
declare function ILockBytes_WriteAt_Proxy(byval This as ILockBytes ptr, byval ulOffset as ULARGE_INTEGER, byval pv as const any ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
declare function ILockBytes_WriteAt_Stub(byval This as ILockBytes ptr, byval ulOffset as ULARGE_INTEGER, byval pv as const ubyte ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
type IEnumFORMATETC as IEnumFORMATETC_
type LPENUMFORMATETC as IEnumFORMATETC ptr

type tagDVTARGETDEVICE
 tdSize as DWORD
 tdDriverNameOffset as WORD
 tdDeviceNameOffset as WORD
 tdPortNameOffset as WORD
 tdExtDevmodeOffset as WORD
 tdData(0 to 0) as UBYTE
end type

type DVTARGETDEVICE as tagDVTARGETDEVICE
type LPCLIPFORMAT as CLIPFORMAT ptr

type tagFORMATETC
 cfFormat as CLIPFORMAT
 ptd as DVTARGETDEVICE ptr
 dwAspect as DWORD
 lindex as LONG
 tymed as DWORD
end type

type FORMATETC as tagFORMATETC
type LPFORMATETC as tagFORMATETC ptr
extern IID_IEnumFORMATETC as const GUID

type IEnumFORMATETCVtbl
 QueryInterface as function(byval This as IEnumFORMATETC ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IEnumFORMATETC ptr) as ULONG
 Release as function(byval This as IEnumFORMATETC ptr) as ULONG
 Next as function(byval This as IEnumFORMATETC ptr, byval celt as ULONG, byval rgelt as FORMATETC ptr, byval pceltFetched as ULONG ptr) as HRESULT
 Skip as function(byval This as IEnumFORMATETC ptr, byval celt as ULONG) as HRESULT
 Reset as function(byval This as IEnumFORMATETC ptr) as HRESULT
 Clone as function(byval This as IEnumFORMATETC ptr, byval ppenum as IEnumFORMATETC ptr ptr) as HRESULT
end type

type IEnumFORMATETC_
 lpVtbl as IEnumFORMATETCVtbl ptr
end type


declare function IEnumFORMATETC_RemoteNext_Proxy(byval This as IEnumFORMATETC ptr, byval celt as ULONG, byval rgelt as FORMATETC ptr, byval pceltFetched as ULONG ptr) as HRESULT
declare sub IEnumFORMATETC_RemoteNext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumFORMATETC_Skip_Proxy(byval This as IEnumFORMATETC ptr, byval celt as ULONG) as HRESULT
declare sub IEnumFORMATETC_Skip_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumFORMATETC_Reset_Proxy(byval This as IEnumFORMATETC ptr) as HRESULT
declare sub IEnumFORMATETC_Reset_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumFORMATETC_Clone_Proxy(byval This as IEnumFORMATETC ptr, byval ppenum as IEnumFORMATETC ptr ptr) as HRESULT
declare sub IEnumFORMATETC_Clone_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumFORMATETC_Next_Proxy(byval This as IEnumFORMATETC ptr, byval celt as ULONG, byval rgelt as FORMATETC ptr, byval pceltFetched as ULONG ptr) as HRESULT
declare function IEnumFORMATETC_Next_Stub(byval This as IEnumFORMATETC ptr, byval celt as ULONG, byval rgelt as FORMATETC ptr, byval pceltFetched as ULONG ptr) as HRESULT
type IEnumSTATDATA as IEnumSTATDATA_
type LPENUMSTATDATA as IEnumSTATDATA ptr

type tagADVF as long
enum
 ADVF_NODATA = 1
 ADVF_PRIMEFIRST = 2
 ADVF_ONLYONCE = 4
 ADVF_DATAONSTOP = 64
 ADVFCACHE_NOHANDLER = 8
 ADVFCACHE_FORCEBUILTIN = 16
 ADVFCACHE_ONSAVE = 32
end enum

type ADVF as tagADVF
type IAdviseSink as IAdviseSink_

type tagSTATDATA
 formatetc as FORMATETC
 advf as DWORD
 pAdvSink as IAdviseSink ptr
 dwConnection as DWORD
end type

type STATDATA as tagSTATDATA
type LPSTATDATA as STATDATA ptr
extern IID_IEnumSTATDATA as const GUID

type IEnumSTATDATAVtbl
 QueryInterface as function(byval This as IEnumSTATDATA ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IEnumSTATDATA ptr) as ULONG
 Release as function(byval This as IEnumSTATDATA ptr) as ULONG
 Next as function(byval This as IEnumSTATDATA ptr, byval celt as ULONG, byval rgelt as STATDATA ptr, byval pceltFetched as ULONG ptr) as HRESULT
 Skip as function(byval This as IEnumSTATDATA ptr, byval celt as ULONG) as HRESULT
 Reset as function(byval This as IEnumSTATDATA ptr) as HRESULT
 Clone as function(byval This as IEnumSTATDATA ptr, byval ppenum as IEnumSTATDATA ptr ptr) as HRESULT
end type

type IEnumSTATDATA_
 lpVtbl as IEnumSTATDATAVtbl ptr
end type


declare function IEnumSTATDATA_RemoteNext_Proxy(byval This as IEnumSTATDATA ptr, byval celt as ULONG, byval rgelt as STATDATA ptr, byval pceltFetched as ULONG ptr) as HRESULT
declare sub IEnumSTATDATA_RemoteNext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumSTATDATA_Skip_Proxy(byval This as IEnumSTATDATA ptr, byval celt as ULONG) as HRESULT
declare sub IEnumSTATDATA_Skip_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumSTATDATA_Reset_Proxy(byval This as IEnumSTATDATA ptr) as HRESULT
declare sub IEnumSTATDATA_Reset_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumSTATDATA_Clone_Proxy(byval This as IEnumSTATDATA ptr, byval ppenum as IEnumSTATDATA ptr ptr) as HRESULT
declare sub IEnumSTATDATA_Clone_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumSTATDATA_Next_Proxy(byval This as IEnumSTATDATA ptr, byval celt as ULONG, byval rgelt as STATDATA ptr, byval pceltFetched as ULONG ptr) as HRESULT
declare function IEnumSTATDATA_Next_Stub(byval This as IEnumSTATDATA ptr, byval celt as ULONG, byval rgelt as STATDATA ptr, byval pceltFetched as ULONG ptr) as HRESULT
type IRootStorage as IRootStorage_
type LPROOTSTORAGE as IRootStorage ptr
extern IID_IRootStorage as const GUID

type IRootStorageVtbl
 QueryInterface as function(byval This as IRootStorage ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IRootStorage ptr) as ULONG
 Release as function(byval This as IRootStorage ptr) as ULONG
 SwitchToFile as function(byval This as IRootStorage ptr, byval pszFile as LPOLESTR) as HRESULT
end type

type IRootStorage_
 lpVtbl as IRootStorageVtbl ptr
end type

declare function IRootStorage_SwitchToFile_Proxy(byval This as IRootStorage ptr, byval pszFile as LPOLESTR) as HRESULT
declare sub IRootStorage_SwitchToFile_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type LPADVISESINK as IAdviseSink ptr

type tagTYMED as long
enum
 TYMED_HGLOBAL = 1
 TYMED_FILE = 2
 TYMED_ISTREAM = 4
 TYMED_ISTORAGE = 8
 TYMED_GDI = 16
 TYMED_MFPICT = 32
 TYMED_ENHMF = 64
 TYMED_NULL = 0
end enum

type TYMED as tagTYMED

type tagRemSTGMEDIUM
 tymed as DWORD
 dwHandleType as DWORD
 pData as ULONG
 pUnkForRelease as ULONG
 cbData as ULONG
 data(0 to 0) as ubyte
end type

type RemSTGMEDIUM as tagRemSTGMEDIUM

type tagSTGMEDIUM
 tymed as DWORD

 union
 hBitmap as HBITMAP
 hMetaFilePict as HMETAFILEPICT
 hEnhMetaFile as HENHMETAFILE
 hGlobal as HGLOBAL
 lpszFileName as LPOLESTR
 pstm as IStream ptr
 pstg as IStorage ptr
 end union

 pUnkForRelease as IUnknown ptr
end type

type uSTGMEDIUM as tagSTGMEDIUM

union _GDI_OBJECT_u
 hBitmap as wireHBITMAP
 hPalette as wireHPALETTE
 hGeneric as wireHGLOBAL
end union

type _GDI_OBJECT
 ObjectType as DWORD
 u as _GDI_OBJECT_u
end type

type GDI_OBJECT as _GDI_OBJECT

union _userSTGMEDIUM__STGMEDIUM_UNION_u
 hMetaFilePict as wireHMETAFILEPICT
 hHEnhMetaFile as wireHENHMETAFILE
 hGdiHandle as GDI_OBJECT ptr
 hGlobal as wireHGLOBAL
 lpszFileName as LPOLESTR
 pstm as BYTE_BLOB ptr
 pstg as BYTE_BLOB ptr
end union

type _STGMEDIUM_UNION
 tymed as DWORD
 u as _userSTGMEDIUM__STGMEDIUM_UNION_u
end type

type _userSTGMEDIUM
 pUnkForRelease as IUnknown ptr
end type

type userSTGMEDIUM as _userSTGMEDIUM
type wireSTGMEDIUM as userSTGMEDIUM ptr
type STGMEDIUM as uSTGMEDIUM
type wireASYNC_STGMEDIUM as userSTGMEDIUM ptr
type ASYNC_STGMEDIUM as STGMEDIUM
type LPSTGMEDIUM as STGMEDIUM ptr

type _userFLAG_STGMEDIUM
 ContextFlags as LONG
 fPassOwnership as LONG
 Stgmed as userSTGMEDIUM
end type

type userFLAG_STGMEDIUM as _userFLAG_STGMEDIUM
type wireFLAG_STGMEDIUM as userFLAG_STGMEDIUM ptr

type _FLAG_STGMEDIUM
 ContextFlags as LONG
 fPassOwnership as LONG
 Stgmed as STGMEDIUM
end type

type FLAG_STGMEDIUM as _FLAG_STGMEDIUM
extern IID_IAdviseSink as const GUID

type IAdviseSinkVtbl
 QueryInterface as function(byval This as IAdviseSink ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IAdviseSink ptr) as ULONG
 Release as function(byval This as IAdviseSink ptr) as ULONG
 OnDataChange as sub(byval This as IAdviseSink ptr, byval pFormatetc as FORMATETC ptr, byval pStgmed as STGMEDIUM ptr)
 OnViewChange as sub(byval This as IAdviseSink ptr, byval dwAspect as DWORD, byval lindex as LONG)
 OnRename as sub(byval This as IAdviseSink ptr, byval pmk as IMoniker ptr)
 OnSave as sub(byval This as IAdviseSink ptr)
 OnClose as sub(byval This as IAdviseSink ptr)
end type

type IAdviseSink_
 lpVtbl as IAdviseSinkVtbl ptr
end type


declare function IAdviseSink_RemoteOnDataChange_Proxy(byval This as IAdviseSink ptr, byval pFormatetc as FORMATETC ptr, byval pStgmed as ASYNC_STGMEDIUM ptr) as HRESULT
declare sub IAdviseSink_RemoteOnDataChange_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IAdviseSink_RemoteOnViewChange_Proxy(byval This as IAdviseSink ptr, byval dwAspect as DWORD, byval lindex as LONG) as HRESULT
declare sub IAdviseSink_RemoteOnViewChange_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IAdviseSink_RemoteOnRename_Proxy(byval This as IAdviseSink ptr, byval pmk as IMoniker ptr) as HRESULT
declare sub IAdviseSink_RemoteOnRename_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IAdviseSink_RemoteOnSave_Proxy(byval This as IAdviseSink ptr) as HRESULT
declare sub IAdviseSink_RemoteOnSave_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IAdviseSink_RemoteOnClose_Proxy(byval This as IAdviseSink ptr) as HRESULT
declare sub IAdviseSink_RemoteOnClose_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub IAdviseSink_OnDataChange_Proxy(byval This as IAdviseSink ptr, byval pFormatetc as FORMATETC ptr, byval pStgmed as STGMEDIUM ptr)
declare function IAdviseSink_OnDataChange_Stub(byval This as IAdviseSink ptr, byval pFormatetc as FORMATETC ptr, byval pStgmed as ASYNC_STGMEDIUM ptr) as HRESULT
declare sub IAdviseSink_OnViewChange_Proxy(byval This as IAdviseSink ptr, byval dwAspect as DWORD, byval lindex as LONG)
declare function IAdviseSink_OnViewChange_Stub(byval This as IAdviseSink ptr, byval dwAspect as DWORD, byval lindex as LONG) as HRESULT
declare sub IAdviseSink_OnRename_Proxy(byval This as IAdviseSink ptr, byval pmk as IMoniker ptr)
declare function IAdviseSink_OnRename_Stub(byval This as IAdviseSink ptr, byval pmk as IMoniker ptr) as HRESULT
declare sub IAdviseSink_OnSave_Proxy(byval This as IAdviseSink ptr)
declare function IAdviseSink_OnSave_Stub(byval This as IAdviseSink ptr) as HRESULT
declare sub IAdviseSink_OnClose_Proxy(byval This as IAdviseSink ptr)
declare function IAdviseSink_OnClose_Stub(byval This as IAdviseSink ptr) as HRESULT
extern IID_AsyncIAdviseSink as const GUID
type AsyncIAdviseSink as AsyncIAdviseSink_

type AsyncIAdviseSinkVtbl
 QueryInterface as function(byval This as AsyncIAdviseSink ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as AsyncIAdviseSink ptr) as ULONG
 Release as function(byval This as AsyncIAdviseSink ptr) as ULONG
 Begin_OnDataChange as sub(byval This as AsyncIAdviseSink ptr, byval pFormatetc as FORMATETC ptr, byval pStgmed as STGMEDIUM ptr)
 Finish_OnDataChange as sub(byval This as AsyncIAdviseSink ptr)
 Begin_OnViewChange as sub(byval This as AsyncIAdviseSink ptr, byval dwAspect as DWORD, byval lindex as LONG)
 Finish_OnViewChange as sub(byval This as AsyncIAdviseSink ptr)
 Begin_OnRename as sub(byval This as AsyncIAdviseSink ptr, byval pmk as IMoniker ptr)
 Finish_OnRename as sub(byval This as AsyncIAdviseSink ptr)
 Begin_OnSave as sub(byval This as AsyncIAdviseSink ptr)
 Finish_OnSave as sub(byval This as AsyncIAdviseSink ptr)
 Begin_OnClose as sub(byval This as AsyncIAdviseSink ptr)
 Finish_OnClose as sub(byval This as AsyncIAdviseSink ptr)
end type

type AsyncIAdviseSink_
 lpVtbl as AsyncIAdviseSinkVtbl ptr
end type


declare function AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(byval This as IAdviseSink ptr, byval pFormatetc as FORMATETC ptr, byval pStgmed as ASYNC_STGMEDIUM ptr) as HRESULT
declare sub AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(byval This as IAdviseSink ptr, byval pFormatetc as FORMATETC ptr, byval pStgmed as ASYNC_STGMEDIUM ptr) as HRESULT
declare sub AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(byval This as IAdviseSink ptr, byval dwAspect as DWORD, byval lindex as LONG) as HRESULT
declare sub AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(byval This as IAdviseSink ptr, byval dwAspect as DWORD, byval lindex as LONG) as HRESULT
declare sub AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(byval This as IAdviseSink ptr, byval pmk as IMoniker ptr) as HRESULT
declare sub AsyncIAdviseSink_Begin_RemoteOnRename_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(byval This as IAdviseSink ptr, byval pmk as IMoniker ptr) as HRESULT
declare sub AsyncIAdviseSink_Finish_RemoteOnRename_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(byval This as IAdviseSink ptr) as HRESULT
declare sub AsyncIAdviseSink_Begin_RemoteOnSave_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(byval This as IAdviseSink ptr) as HRESULT
declare sub AsyncIAdviseSink_Finish_RemoteOnSave_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(byval This as IAdviseSink ptr) as HRESULT
declare sub AsyncIAdviseSink_Begin_RemoteOnClose_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(byval This as IAdviseSink ptr) as HRESULT
declare sub AsyncIAdviseSink_Finish_RemoteOnClose_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub AsyncIAdviseSink_Begin_OnDataChange_Proxy(byval This as IAdviseSink ptr, byval pFormatetc as FORMATETC ptr, byval pStgmed as STGMEDIUM ptr)
declare function AsyncIAdviseSink_Begin_OnDataChange_Stub(byval This as IAdviseSink ptr, byval pFormatetc as FORMATETC ptr, byval pStgmed as ASYNC_STGMEDIUM ptr) as HRESULT
declare sub AsyncIAdviseSink_Finish_OnDataChange_Proxy(byval This as IAdviseSink ptr)
declare function AsyncIAdviseSink_Finish_OnDataChange_Stub(byval This as IAdviseSink ptr, byval pFormatetc as FORMATETC ptr, byval pStgmed as ASYNC_STGMEDIUM ptr) as HRESULT
declare sub AsyncIAdviseSink_Begin_OnViewChange_Proxy(byval This as IAdviseSink ptr, byval dwAspect as DWORD, byval lindex as LONG)
declare function AsyncIAdviseSink_Begin_OnViewChange_Stub(byval This as IAdviseSink ptr, byval dwAspect as DWORD, byval lindex as LONG) as HRESULT
declare sub AsyncIAdviseSink_Finish_OnViewChange_Proxy(byval This as IAdviseSink ptr)
declare function AsyncIAdviseSink_Finish_OnViewChange_Stub(byval This as IAdviseSink ptr, byval dwAspect as DWORD, byval lindex as LONG) as HRESULT
declare sub AsyncIAdviseSink_Begin_OnRename_Proxy(byval This as IAdviseSink ptr, byval pmk as IMoniker ptr)
declare function AsyncIAdviseSink_Begin_OnRename_Stub(byval This as IAdviseSink ptr, byval pmk as IMoniker ptr) as HRESULT
declare sub AsyncIAdviseSink_Finish_OnRename_Proxy(byval This as IAdviseSink ptr)
declare function AsyncIAdviseSink_Finish_OnRename_Stub(byval This as IAdviseSink ptr, byval pmk as IMoniker ptr) as HRESULT
declare sub AsyncIAdviseSink_Begin_OnSave_Proxy(byval This as IAdviseSink ptr)
declare function AsyncIAdviseSink_Begin_OnSave_Stub(byval This as IAdviseSink ptr) as HRESULT
declare sub AsyncIAdviseSink_Finish_OnSave_Proxy(byval This as IAdviseSink ptr)
declare function AsyncIAdviseSink_Finish_OnSave_Stub(byval This as IAdviseSink ptr) as HRESULT
declare sub AsyncIAdviseSink_Begin_OnClose_Proxy(byval This as IAdviseSink ptr)
declare function AsyncIAdviseSink_Begin_OnClose_Stub(byval This as IAdviseSink ptr) as HRESULT
declare sub AsyncIAdviseSink_Finish_OnClose_Proxy(byval This as IAdviseSink ptr)
declare function AsyncIAdviseSink_Finish_OnClose_Stub(byval This as IAdviseSink ptr) as HRESULT
type IAdviseSink2 as IAdviseSink2_
type LPADVISESINK2 as IAdviseSink2 ptr
extern IID_IAdviseSink2 as const GUID

type IAdviseSink2Vtbl
 QueryInterface as function(byval This as IAdviseSink2 ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IAdviseSink2 ptr) as ULONG
 Release as function(byval This as IAdviseSink2 ptr) as ULONG
 OnDataChange as sub(byval This as IAdviseSink2 ptr, byval pFormatetc as FORMATETC ptr, byval pStgmed as STGMEDIUM ptr)
 OnViewChange as sub(byval This as IAdviseSink2 ptr, byval dwAspect as DWORD, byval lindex as LONG)
 OnRename as sub(byval This as IAdviseSink2 ptr, byval pmk as IMoniker ptr)
 OnSave as sub(byval This as IAdviseSink2 ptr)
 OnClose as sub(byval This as IAdviseSink2 ptr)
 OnLinkSrcChange as sub(byval This as IAdviseSink2 ptr, byval pmk as IMoniker ptr)
end type

type IAdviseSink2_
 lpVtbl as IAdviseSink2Vtbl ptr
end type


declare function IAdviseSink2_RemoteOnLinkSrcChange_Proxy(byval This as IAdviseSink2 ptr, byval pmk as IMoniker ptr) as HRESULT
declare sub IAdviseSink2_RemoteOnLinkSrcChange_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub IAdviseSink2_OnLinkSrcChange_Proxy(byval This as IAdviseSink2 ptr, byval pmk as IMoniker ptr)
declare function IAdviseSink2_OnLinkSrcChange_Stub(byval This as IAdviseSink2 ptr, byval pmk as IMoniker ptr) as HRESULT
extern IID_AsyncIAdviseSink2 as const GUID
type AsyncIAdviseSink2 as AsyncIAdviseSink2_

type AsyncIAdviseSink2Vtbl
 QueryInterface as function(byval This as AsyncIAdviseSink2 ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as AsyncIAdviseSink2 ptr) as ULONG
 Release as function(byval This as AsyncIAdviseSink2 ptr) as ULONG
 Begin_OnDataChange as sub(byval This as AsyncIAdviseSink2 ptr, byval pFormatetc as FORMATETC ptr, byval pStgmed as STGMEDIUM ptr)
 Finish_OnDataChange as sub(byval This as AsyncIAdviseSink2 ptr)
 Begin_OnViewChange as sub(byval This as AsyncIAdviseSink2 ptr, byval dwAspect as DWORD, byval lindex as LONG)
 Finish_OnViewChange as sub(byval This as AsyncIAdviseSink2 ptr)
 Begin_OnRename as sub(byval This as AsyncIAdviseSink2 ptr, byval pmk as IMoniker ptr)
 Finish_OnRename as sub(byval This as AsyncIAdviseSink2 ptr)
 Begin_OnSave as sub(byval This as AsyncIAdviseSink2 ptr)
 Finish_OnSave as sub(byval This as AsyncIAdviseSink2 ptr)
 Begin_OnClose as sub(byval This as AsyncIAdviseSink2 ptr)
 Finish_OnClose as sub(byval This as AsyncIAdviseSink2 ptr)
 Begin_OnLinkSrcChange as sub(byval This as AsyncIAdviseSink2 ptr, byval pmk as IMoniker ptr)
 Finish_OnLinkSrcChange as sub(byval This as AsyncIAdviseSink2 ptr)
end type

type AsyncIAdviseSink2_
 lpVtbl as AsyncIAdviseSink2Vtbl ptr
end type


declare function AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(byval This as IAdviseSink2 ptr, byval pmk as IMoniker ptr) as HRESULT
declare sub AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(byval This as IAdviseSink2 ptr, byval pmk as IMoniker ptr) as HRESULT
declare sub AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare sub AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(byval This as IAdviseSink2 ptr, byval pmk as IMoniker ptr)
declare function AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(byval This as IAdviseSink2 ptr, byval pmk as IMoniker ptr) as HRESULT
declare sub AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(byval This as IAdviseSink2 ptr)
declare function AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(byval This as IAdviseSink2 ptr, byval pmk as IMoniker ptr) as HRESULT
type IDataObject as IDataObject_
type LPDATAOBJECT as IDataObject ptr

type tagDATADIR as long
enum
 DATADIR_GET = 1
 DATADIR_SET = 2
end enum

type DATADIR as tagDATADIR
extern IID_IDataObject as const GUID

type IDataObjectVtbl
 QueryInterface as function(byval This as IDataObject ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IDataObject ptr) as ULONG
 Release as function(byval This as IDataObject ptr) as ULONG
 GetData as function(byval This as IDataObject ptr, byval pformatetcIn as FORMATETC ptr, byval pmedium as STGMEDIUM ptr) as HRESULT
 GetDataHere as function(byval This as IDataObject ptr, byval pformatetc as FORMATETC ptr, byval pmedium as STGMEDIUM ptr) as HRESULT
 QueryGetData as function(byval This as IDataObject ptr, byval pformatetc as FORMATETC ptr) as HRESULT
 GetCanonicalFormatEtc as function(byval This as IDataObject ptr, byval pformatectIn as FORMATETC ptr, byval pformatetcOut as FORMATETC ptr) as HRESULT
 SetData as function(byval This as IDataObject ptr, byval pformatetc as FORMATETC ptr, byval pmedium as STGMEDIUM ptr, byval fRelease as WINBOOL) as HRESULT
 EnumFormatEtc as function(byval This as IDataObject ptr, byval dwDirection as DWORD, byval ppenumFormatEtc as IEnumFORMATETC ptr ptr) as HRESULT
 DAdvise as function(byval This as IDataObject ptr, byval pformatetc as FORMATETC ptr, byval advf as DWORD, byval pAdvSink as IAdviseSink ptr, byval pdwConnection as DWORD ptr) as HRESULT
 DUnadvise as function(byval This as IDataObject ptr, byval dwConnection as DWORD) as HRESULT
 EnumDAdvise as function(byval This as IDataObject ptr, byval ppenumAdvise as IEnumSTATDATA ptr ptr) as HRESULT
end type

type IDataObject_
 lpVtbl as IDataObjectVtbl ptr
end type


declare function IDataObject_RemoteGetData_Proxy(byval This as IDataObject ptr, byval pformatetcIn as FORMATETC ptr, byval pRemoteMedium as STGMEDIUM ptr) as HRESULT
declare sub IDataObject_RemoteGetData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDataObject_RemoteGetDataHere_Proxy(byval This as IDataObject ptr, byval pformatetc as FORMATETC ptr, byval pRemoteMedium as STGMEDIUM ptr) as HRESULT
declare sub IDataObject_RemoteGetDataHere_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDataObject_QueryGetData_Proxy(byval This as IDataObject ptr, byval pformatetc as FORMATETC ptr) as HRESULT
declare sub IDataObject_QueryGetData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDataObject_GetCanonicalFormatEtc_Proxy(byval This as IDataObject ptr, byval pformatectIn as FORMATETC ptr, byval pformatetcOut as FORMATETC ptr) as HRESULT
declare sub IDataObject_GetCanonicalFormatEtc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDataObject_RemoteSetData_Proxy(byval This as IDataObject ptr, byval pformatetc as FORMATETC ptr, byval pmedium as FLAG_STGMEDIUM ptr, byval fRelease as WINBOOL) as HRESULT
declare sub IDataObject_RemoteSetData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDataObject_EnumFormatEtc_Proxy(byval This as IDataObject ptr, byval dwDirection as DWORD, byval ppenumFormatEtc as IEnumFORMATETC ptr ptr) as HRESULT
declare sub IDataObject_EnumFormatEtc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDataObject_DAdvise_Proxy(byval This as IDataObject ptr, byval pformatetc as FORMATETC ptr, byval advf as DWORD, byval pAdvSink as IAdviseSink ptr, byval pdwConnection as DWORD ptr) as HRESULT
declare sub IDataObject_DAdvise_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDataObject_DUnadvise_Proxy(byval This as IDataObject ptr, byval dwConnection as DWORD) as HRESULT
declare sub IDataObject_DUnadvise_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDataObject_EnumDAdvise_Proxy(byval This as IDataObject ptr, byval ppenumAdvise as IEnumSTATDATA ptr ptr) as HRESULT
declare sub IDataObject_EnumDAdvise_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDataObject_GetData_Proxy(byval This as IDataObject ptr, byval pformatetcIn as FORMATETC ptr, byval pmedium as STGMEDIUM ptr) as HRESULT
declare function IDataObject_GetData_Stub(byval This as IDataObject ptr, byval pformatetcIn as FORMATETC ptr, byval pRemoteMedium as STGMEDIUM ptr) as HRESULT
declare function IDataObject_GetDataHere_Proxy(byval This as IDataObject ptr, byval pformatetc as FORMATETC ptr, byval pmedium as STGMEDIUM ptr) as HRESULT
declare function IDataObject_GetDataHere_Stub(byval This as IDataObject ptr, byval pformatetc as FORMATETC ptr, byval pRemoteMedium as STGMEDIUM ptr) as HRESULT
declare function IDataObject_SetData_Proxy(byval This as IDataObject ptr, byval pformatetc as FORMATETC ptr, byval pmedium as STGMEDIUM ptr, byval fRelease as WINBOOL) as HRESULT
declare function IDataObject_SetData_Stub(byval This as IDataObject ptr, byval pformatetc as FORMATETC ptr, byval pmedium as FLAG_STGMEDIUM ptr, byval fRelease as WINBOOL) as HRESULT
type IDataAdviseHolder as IDataAdviseHolder_
type LPDATAADVISEHOLDER as IDataAdviseHolder ptr
extern IID_IDataAdviseHolder as const GUID

type IDataAdviseHolderVtbl
 QueryInterface as function(byval This as IDataAdviseHolder ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IDataAdviseHolder ptr) as ULONG
 Release as function(byval This as IDataAdviseHolder ptr) as ULONG
 Advise as function(byval This as IDataAdviseHolder ptr, byval pDataObject as IDataObject ptr, byval pFetc as FORMATETC ptr, byval advf as DWORD, byval pAdvise as IAdviseSink ptr, byval pdwConnection as DWORD ptr) as HRESULT
 Unadvise as function(byval This as IDataAdviseHolder ptr, byval dwConnection as DWORD) as HRESULT
 EnumAdvise as function(byval This as IDataAdviseHolder ptr, byval ppenumAdvise as IEnumSTATDATA ptr ptr) as HRESULT
 SendOnDataChange as function(byval This as IDataAdviseHolder ptr, byval pDataObject as IDataObject ptr, byval dwReserved as DWORD, byval advf as DWORD) as HRESULT
end type

type IDataAdviseHolder_
 lpVtbl as IDataAdviseHolderVtbl ptr
end type


declare function IDataAdviseHolder_Advise_Proxy(byval This as IDataAdviseHolder ptr, byval pDataObject as IDataObject ptr, byval pFetc as FORMATETC ptr, byval advf as DWORD, byval pAdvise as IAdviseSink ptr, byval pdwConnection as DWORD ptr) as HRESULT
declare sub IDataAdviseHolder_Advise_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDataAdviseHolder_Unadvise_Proxy(byval This as IDataAdviseHolder ptr, byval dwConnection as DWORD) as HRESULT
declare sub IDataAdviseHolder_Unadvise_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDataAdviseHolder_EnumAdvise_Proxy(byval This as IDataAdviseHolder ptr, byval ppenumAdvise as IEnumSTATDATA ptr ptr) as HRESULT
declare sub IDataAdviseHolder_EnumAdvise_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDataAdviseHolder_SendOnDataChange_Proxy(byval This as IDataAdviseHolder ptr, byval pDataObject as IDataObject ptr, byval dwReserved as DWORD, byval advf as DWORD) as HRESULT
declare sub IDataAdviseHolder_SendOnDataChange_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IMessageFilter as IMessageFilter_
type LPMESSAGEFILTER as IMessageFilter ptr

type tagCALLTYPE as long
enum
 CALLTYPE_TOPLEVEL = 1
 CALLTYPE_NESTED = 2
 CALLTYPE_ASYNC = 3
 CALLTYPE_TOPLEVEL_CALLPENDING = 4
 CALLTYPE_ASYNC_CALLPENDING = 5
end enum

type CALLTYPE as tagCALLTYPE

type tagSERVERCALL as long
enum
 SERVERCALL_ISHANDLED = 0
 SERVERCALL_REJECTED = 1
 SERVERCALL_RETRYLATER = 2
end enum

type SERVERCALL as tagSERVERCALL

type tagPENDINGTYPE as long
enum
 PENDINGTYPE_TOPLEVEL = 1
 PENDINGTYPE_NESTED = 2
end enum

type PENDINGTYPE as tagPENDINGTYPE

type tagPENDINGMSG as long
enum
 PENDINGMSG_CANCELCALL = 0
 PENDINGMSG_WAITNOPROCESS = 1
 PENDINGMSG_WAITDEFPROCESS = 2
end enum

type PENDINGMSG as tagPENDINGMSG

type tagINTERFACEINFO
 pUnk as IUnknown ptr
 iid as IID
 wMethod as WORD
end type

type INTERFACEINFO as tagINTERFACEINFO
type LPINTERFACEINFO as tagINTERFACEINFO ptr
extern IID_IMessageFilter as const GUID

type IMessageFilterVtbl
 QueryInterface as function(byval This as IMessageFilter ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IMessageFilter ptr) as ULONG
 Release as function(byval This as IMessageFilter ptr) as ULONG
 HandleInComingCall as function(byval This as IMessageFilter ptr, byval dwCallType as DWORD, byval htaskCaller as HTASK, byval dwTickCount as DWORD, byval lpInterfaceInfo as LPINTERFACEINFO) as DWORD
 RetryRejectedCall as function(byval This as IMessageFilter ptr, byval htaskCallee as HTASK, byval dwTickCount as DWORD, byval dwRejectType as DWORD) as DWORD
 MessagePending as function(byval This as IMessageFilter ptr, byval htaskCallee as HTASK, byval dwTickCount as DWORD, byval dwPendingType as DWORD) as DWORD
end type

type IMessageFilter_
 lpVtbl as IMessageFilterVtbl ptr
end type


declare function IMessageFilter_HandleInComingCall_Proxy(byval This as IMessageFilter ptr, byval dwCallType as DWORD, byval htaskCaller as HTASK, byval dwTickCount as DWORD, byval lpInterfaceInfo as LPINTERFACEINFO) as DWORD
declare sub IMessageFilter_HandleInComingCall_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMessageFilter_RetryRejectedCall_Proxy(byval This as IMessageFilter ptr, byval htaskCallee as HTASK, byval dwTickCount as DWORD, byval dwRejectType as DWORD) as DWORD
declare sub IMessageFilter_RetryRejectedCall_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IMessageFilter_MessagePending_Proxy(byval This as IMessageFilter ptr, byval htaskCallee as HTASK, byval dwTickCount as DWORD, byval dwPendingType as DWORD) as DWORD
declare sub IMessageFilter_MessagePending_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)

extern FMTID_SummaryInformation as const FMTID
extern FMTID_DocSummaryInformation as const FMTID
extern FMTID_UserDefinedProperties as const FMTID
extern FMTID_DiscardableInformation as const FMTID
extern FMTID_ImageSummaryInformation as const FMTID
extern FMTID_AudioSummaryInformation as const FMTID
extern FMTID_VideoSummaryInformation as const FMTID
extern FMTID_MediaFileSummaryInformation as const FMTID
extern IID_IClassActivator as const GUID
type IClassActivator as IClassActivator_

type IClassActivatorVtbl
 QueryInterface as function(byval This as IClassActivator ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IClassActivator ptr) as ULONG
 Release as function(byval This as IClassActivator ptr) as ULONG
 GetClassObject as function(byval This as IClassActivator ptr, byval rclsid as const IID const ptr, byval dwClassContext as DWORD, byval locale as LCID, byval riid as const IID const ptr, byval ppv as any ptr ptr) as HRESULT
end type

type IClassActivator_
 lpVtbl as IClassActivatorVtbl ptr
end type

declare function IClassActivator_GetClassObject_Proxy(byval This as IClassActivator ptr, byval rclsid as const IID const ptr, byval dwClassContext as DWORD, byval locale as LCID, byval riid as const IID const ptr, byval ppv as any ptr ptr) as HRESULT
declare sub IClassActivator_GetClassObject_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IFillLockBytes as const GUID
type IFillLockBytes as IFillLockBytes_

type IFillLockBytesVtbl
 QueryInterface as function(byval This as IFillLockBytes ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IFillLockBytes ptr) as ULONG
 Release as function(byval This as IFillLockBytes ptr) as ULONG
 FillAppend as function(byval This as IFillLockBytes ptr, byval pv as const any ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
 FillAt as function(byval This as IFillLockBytes ptr, byval ulOffset as ULARGE_INTEGER, byval pv as const any ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
 SetFillSize as function(byval This as IFillLockBytes ptr, byval ulSize as ULARGE_INTEGER) as HRESULT
 Terminate as function(byval This as IFillLockBytes ptr, byval bCanceled as WINBOOL) as HRESULT
end type

type IFillLockBytes_
 lpVtbl as IFillLockBytesVtbl ptr
end type


declare function IFillLockBytes_RemoteFillAppend_Proxy(byval This as IFillLockBytes ptr, byval pv as const ubyte ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
declare sub IFillLockBytes_RemoteFillAppend_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IFillLockBytes_RemoteFillAt_Proxy(byval This as IFillLockBytes ptr, byval ulOffset as ULARGE_INTEGER, byval pv as const ubyte ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
declare sub IFillLockBytes_RemoteFillAt_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IFillLockBytes_SetFillSize_Proxy(byval This as IFillLockBytes ptr, byval ulSize as ULARGE_INTEGER) as HRESULT
declare sub IFillLockBytes_SetFillSize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IFillLockBytes_Terminate_Proxy(byval This as IFillLockBytes ptr, byval bCanceled as WINBOOL) as HRESULT
declare sub IFillLockBytes_Terminate_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IFillLockBytes_FillAppend_Proxy(byval This as IFillLockBytes ptr, byval pv as const any ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
declare function IFillLockBytes_FillAppend_Stub(byval This as IFillLockBytes ptr, byval pv as const ubyte ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
declare function IFillLockBytes_FillAt_Proxy(byval This as IFillLockBytes ptr, byval ulOffset as ULARGE_INTEGER, byval pv as const any ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
declare function IFillLockBytes_FillAt_Stub(byval This as IFillLockBytes ptr, byval ulOffset as ULARGE_INTEGER, byval pv as const ubyte ptr, byval cb as ULONG, byval pcbWritten as ULONG ptr) as HRESULT
extern IID_IProgressNotify as const GUID
type IProgressNotify as IProgressNotify_

type IProgressNotifyVtbl
 QueryInterface as function(byval This as IProgressNotify ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IProgressNotify ptr) as ULONG
 Release as function(byval This as IProgressNotify ptr) as ULONG
 OnProgress as function(byval This as IProgressNotify ptr, byval dwProgressCurrent as DWORD, byval dwProgressMaximum as DWORD, byval fAccurate as WINBOOL, byval fOwner as WINBOOL) as HRESULT
end type

type IProgressNotify_
 lpVtbl as IProgressNotifyVtbl ptr
end type

declare function IProgressNotify_OnProgress_Proxy(byval This as IProgressNotify ptr, byval dwProgressCurrent as DWORD, byval dwProgressMaximum as DWORD, byval fAccurate as WINBOOL, byval fOwner as WINBOOL) as HRESULT
declare sub IProgressNotify_OnProgress_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)

type tagStorageLayout
 LayoutType as DWORD
 pwcsElementName as wstring ptr
 cOffset as LARGE_INTEGER
 cBytes as LARGE_INTEGER
end type

type StorageLayout as tagStorageLayout
extern IID_ILayoutStorage as const GUID
type ILayoutStorage as ILayoutStorage_

type ILayoutStorageVtbl
 QueryInterface as function(byval This as ILayoutStorage ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ILayoutStorage ptr) as ULONG
 Release as function(byval This as ILayoutStorage ptr) as ULONG
 LayoutScript as function(byval This as ILayoutStorage ptr, byval pStorageLayout as StorageLayout ptr, byval nEntries as DWORD, byval glfInterleavedFlag as DWORD) as HRESULT
 BeginMonitor as function(byval This as ILayoutStorage ptr) as HRESULT
 EndMonitor as function(byval This as ILayoutStorage ptr) as HRESULT
 ReLayoutDocfile as function(byval This as ILayoutStorage ptr, byval pwcsNewDfName as wstring ptr) as HRESULT
 ReLayoutDocfileOnILockBytes as function(byval This as ILayoutStorage ptr, byval pILockBytes as ILockBytes ptr) as HRESULT
end type

type ILayoutStorage_
 lpVtbl as ILayoutStorageVtbl ptr
end type


declare function ILayoutStorage_LayoutScript_Proxy(byval This as ILayoutStorage ptr, byval pStorageLayout as StorageLayout ptr, byval nEntries as DWORD, byval glfInterleavedFlag as DWORD) as HRESULT
declare sub ILayoutStorage_LayoutScript_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ILayoutStorage_BeginMonitor_Proxy(byval This as ILayoutStorage ptr) as HRESULT
declare sub ILayoutStorage_BeginMonitor_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ILayoutStorage_EndMonitor_Proxy(byval This as ILayoutStorage ptr) as HRESULT
declare sub ILayoutStorage_EndMonitor_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ILayoutStorage_ReLayoutDocfile_Proxy(byval This as ILayoutStorage ptr, byval pwcsNewDfName as wstring ptr) as HRESULT
declare sub ILayoutStorage_ReLayoutDocfile_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy(byval This as ILayoutStorage ptr, byval pILockBytes as ILockBytes ptr) as HRESULT
declare sub ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IBlockingLock as const GUID
type IBlockingLock as IBlockingLock_

type IBlockingLockVtbl
 QueryInterface as function(byval This as IBlockingLock ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IBlockingLock ptr) as ULONG
 Release as function(byval This as IBlockingLock ptr) as ULONG
 Lock as function(byval This as IBlockingLock ptr, byval dwTimeout as DWORD) as HRESULT
 Unlock as function(byval This as IBlockingLock ptr) as HRESULT
end type

type IBlockingLock_
 lpVtbl as IBlockingLockVtbl ptr
end type


declare function IBlockingLock_Lock_Proxy(byval This as IBlockingLock ptr, byval dwTimeout as DWORD) as HRESULT
declare sub IBlockingLock_Lock_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBlockingLock_Unlock_Proxy(byval This as IBlockingLock ptr) as HRESULT
declare sub IBlockingLock_Unlock_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_ITimeAndNoticeControl as const GUID
type ITimeAndNoticeControl as ITimeAndNoticeControl_

type ITimeAndNoticeControlVtbl
 QueryInterface as function(byval This as ITimeAndNoticeControl ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ITimeAndNoticeControl ptr) as ULONG
 Release as function(byval This as ITimeAndNoticeControl ptr) as ULONG
 SuppressChanges as function(byval This as ITimeAndNoticeControl ptr, byval res1 as DWORD, byval res2 as DWORD) as HRESULT
end type

type ITimeAndNoticeControl_
 lpVtbl as ITimeAndNoticeControlVtbl ptr
end type

declare function ITimeAndNoticeControl_SuppressChanges_Proxy(byval This as ITimeAndNoticeControl ptr, byval res1 as DWORD, byval res2 as DWORD) as HRESULT
declare sub ITimeAndNoticeControl_SuppressChanges_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IOplockStorage as const GUID
type IOplockStorage as IOplockStorage_

type IOplockStorageVtbl
 QueryInterface as function(byval This as IOplockStorage ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IOplockStorage ptr) as ULONG
 Release as function(byval This as IOplockStorage ptr) as ULONG
 CreateStorageEx as function(byval This as IOplockStorage ptr, byval pwcsName as LPCWSTR, byval grfMode as DWORD, byval stgfmt as DWORD, byval grfAttrs as DWORD, byval riid as const IID const ptr, byval ppstgOpen as any ptr ptr) as HRESULT
 OpenStorageEx as function(byval This as IOplockStorage ptr, byval pwcsName as LPCWSTR, byval grfMode as DWORD, byval stgfmt as DWORD, byval grfAttrs as DWORD, byval riid as const IID const ptr, byval ppstgOpen as any ptr ptr) as HRESULT
end type

type IOplockStorage_
 lpVtbl as IOplockStorageVtbl ptr
end type


declare function IOplockStorage_CreateStorageEx_Proxy(byval This as IOplockStorage ptr, byval pwcsName as LPCWSTR, byval grfMode as DWORD, byval stgfmt as DWORD, byval grfAttrs as DWORD, byval riid as const IID const ptr, byval ppstgOpen as any ptr ptr) as HRESULT
declare sub IOplockStorage_CreateStorageEx_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOplockStorage_OpenStorageEx_Proxy(byval This as IOplockStorage ptr, byval pwcsName as LPCWSTR, byval grfMode as DWORD, byval stgfmt as DWORD, byval grfAttrs as DWORD, byval riid as const IID const ptr, byval ppstgOpen as any ptr ptr) as HRESULT
declare sub IOplockStorage_OpenStorageEx_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IDirectWriterLock as const GUID
type IDirectWriterLock as IDirectWriterLock_

type IDirectWriterLockVtbl
 QueryInterface as function(byval This as IDirectWriterLock ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IDirectWriterLock ptr) as ULONG
 Release as function(byval This as IDirectWriterLock ptr) as ULONG
 WaitForWriteAccess as function(byval This as IDirectWriterLock ptr, byval dwTimeout as DWORD) as HRESULT
 ReleaseWriteAccess as function(byval This as IDirectWriterLock ptr) as HRESULT
 HaveWriteAccess as function(byval This as IDirectWriterLock ptr) as HRESULT
end type

type IDirectWriterLock_
 lpVtbl as IDirectWriterLockVtbl ptr
end type


declare function IDirectWriterLock_WaitForWriteAccess_Proxy(byval This as IDirectWriterLock ptr, byval dwTimeout as DWORD) as HRESULT
declare sub IDirectWriterLock_WaitForWriteAccess_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDirectWriterLock_ReleaseWriteAccess_Proxy(byval This as IDirectWriterLock ptr) as HRESULT
declare sub IDirectWriterLock_ReleaseWriteAccess_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDirectWriterLock_HaveWriteAccess_Proxy(byval This as IDirectWriterLock ptr) as HRESULT
declare sub IDirectWriterLock_HaveWriteAccess_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IUrlMon as const GUID
type IUrlMon as IUrlMon_

type IUrlMonVtbl
 QueryInterface as function(byval This as IUrlMon ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IUrlMon ptr) as ULONG
 Release as function(byval This as IUrlMon ptr) as ULONG
 AsyncGetClassBits as function(byval This as IUrlMon ptr, byval rclsid as const IID const ptr, byval pszTYPE as LPCWSTR, byval pszExt as LPCWSTR, byval dwFileVersionMS as DWORD, byval dwFileVersionLS as DWORD, byval pszCodeBase as LPCWSTR, byval pbc as IBindCtx ptr, byval dwClassContext as DWORD, byval riid as const IID const ptr, byval flags as DWORD) as HRESULT
end type

type IUrlMon_
 lpVtbl as IUrlMonVtbl ptr
end type

declare function IUrlMon_AsyncGetClassBits_Proxy(byval This as IUrlMon ptr, byval rclsid as const IID const ptr, byval pszTYPE as LPCWSTR, byval pszExt as LPCWSTR, byval dwFileVersionMS as DWORD, byval dwFileVersionLS as DWORD, byval pszCodeBase as LPCWSTR, byval pbc as IBindCtx ptr, byval dwClassContext as DWORD, byval riid as const IID const ptr, byval flags as DWORD) as HRESULT
declare sub IUrlMon_AsyncGetClassBits_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IForegroundTransfer as const GUID
type IForegroundTransfer as IForegroundTransfer_

type IForegroundTransferVtbl
 QueryInterface as function(byval This as IForegroundTransfer ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IForegroundTransfer ptr) as ULONG
 Release as function(byval This as IForegroundTransfer ptr) as ULONG
 AllowForegroundTransfer as function(byval This as IForegroundTransfer ptr, byval lpvReserved as any ptr) as HRESULT
end type

type IForegroundTransfer_
 lpVtbl as IForegroundTransferVtbl ptr
end type

declare function IForegroundTransfer_AllowForegroundTransfer_Proxy(byval This as IForegroundTransfer ptr, byval lpvReserved as any ptr) as HRESULT
declare sub IForegroundTransfer_AllowForegroundTransfer_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IThumbnailExtractor as const GUID
type IThumbnailExtractor as IThumbnailExtractor_

type IThumbnailExtractorVtbl
 QueryInterface as function(byval This as IThumbnailExtractor ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IThumbnailExtractor ptr) as ULONG
 Release as function(byval This as IThumbnailExtractor ptr) as ULONG
 ExtractThumbnail as function(byval This as IThumbnailExtractor ptr, byval pStg as IStorage ptr, byval ulLength as ULONG, byval ulHeight as ULONG, byval pulOutputLength as ULONG ptr, byval pulOutputHeight as ULONG ptr, byval phOutputBitmap as HBITMAP ptr) as HRESULT
 OnFileUpdated as function(byval This as IThumbnailExtractor ptr, byval pStg as IStorage ptr) as HRESULT
end type

type IThumbnailExtractor_
 lpVtbl as IThumbnailExtractorVtbl ptr
end type


declare function IThumbnailExtractor_ExtractThumbnail_Proxy(byval This as IThumbnailExtractor ptr, byval pStg as IStorage ptr, byval ulLength as ULONG, byval ulHeight as ULONG, byval pulOutputLength as ULONG ptr, byval pulOutputHeight as ULONG ptr, byval phOutputBitmap as HBITMAP ptr) as HRESULT
declare sub IThumbnailExtractor_ExtractThumbnail_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IThumbnailExtractor_OnFileUpdated_Proxy(byval This as IThumbnailExtractor ptr, byval pStg as IStorage ptr) as HRESULT
declare sub IThumbnailExtractor_OnFileUpdated_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IDummyHICONIncluder as const GUID
type IDummyHICONIncluder as IDummyHICONIncluder_

type IDummyHICONIncluderVtbl
 QueryInterface as function(byval This as IDummyHICONIncluder ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IDummyHICONIncluder ptr) as ULONG
 Release as function(byval This as IDummyHICONIncluder ptr) as ULONG
 Dummy as function(byval This as IDummyHICONIncluder ptr, byval h1 as HICON, byval h2 as HDC) as HRESULT
end type

type IDummyHICONIncluder_
 lpVtbl as IDummyHICONIncluderVtbl ptr
end type

declare function IDummyHICONIncluder_Dummy_Proxy(byval This as IDummyHICONIncluder ptr, byval h1 as HICON, byval h2 as HDC) as HRESULT
declare sub IDummyHICONIncluder_Dummy_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)

type tagApplicationType as long
enum
 ServerApplication = 0
 LibraryApplication = 1
end enum

type ApplicationType as tagApplicationType

type tagShutdownType as long
enum
 IdleShutdown = 0
 ForcedShutdown = 1
end enum

type ShutdownType as tagShutdownType
extern IID_IProcessLock as const GUID
type IProcessLock as IProcessLock_

type IProcessLockVtbl
 QueryInterface as function(byval This as IProcessLock ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IProcessLock ptr) as ULONG
 Release as function(byval This as IProcessLock ptr) as ULONG
 AddRefOnProcess as function(byval This as IProcessLock ptr) as ULONG
 ReleaseRefOnProcess as function(byval This as IProcessLock ptr) as ULONG
end type

type IProcessLock_
 lpVtbl as IProcessLockVtbl ptr
end type


declare function IProcessLock_AddRefOnProcess_Proxy(byval This as IProcessLock ptr) as ULONG
declare sub IProcessLock_AddRefOnProcess_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IProcessLock_ReleaseRefOnProcess_Proxy(byval This as IProcessLock ptr) as ULONG
declare sub IProcessLock_ReleaseRefOnProcess_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_ISurrogateService as const GUID
type ISurrogateService as ISurrogateService_

type ISurrogateServiceVtbl
 QueryInterface as function(byval This as ISurrogateService ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ISurrogateService ptr) as ULONG
 Release as function(byval This as ISurrogateService ptr) as ULONG
 Init as function(byval This as ISurrogateService ptr, byval rguidProcessID as const GUID const ptr, byval pProcessLock as IProcessLock ptr, byval pfApplicationAware as WINBOOL ptr) as HRESULT
 ApplicationLaunch as function(byval This as ISurrogateService ptr, byval rguidApplID as const GUID const ptr, byval appType as ApplicationType) as HRESULT
 ApplicationFree as function(byval This as ISurrogateService ptr, byval rguidApplID as const GUID const ptr) as HRESULT
 CatalogRefresh as function(byval This as ISurrogateService ptr, byval ulReserved as ULONG) as HRESULT
 ProcessShutdown as function(byval This as ISurrogateService ptr, byval shutdownType as ShutdownType) as HRESULT
end type

type ISurrogateService_
 lpVtbl as ISurrogateServiceVtbl ptr
end type


declare function ISurrogateService_Init_Proxy(byval This as ISurrogateService ptr, byval rguidProcessID as const GUID const ptr, byval pProcessLock as IProcessLock ptr, byval pfApplicationAware as WINBOOL ptr) as HRESULT
declare sub ISurrogateService_Init_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ISurrogateService_ApplicationLaunch_Proxy(byval This as ISurrogateService ptr, byval rguidApplID as const GUID const ptr, byval appType as ApplicationType) as HRESULT
declare sub ISurrogateService_ApplicationLaunch_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ISurrogateService_ApplicationFree_Proxy(byval This as ISurrogateService ptr, byval rguidApplID as const GUID const ptr) as HRESULT
declare sub ISurrogateService_ApplicationFree_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ISurrogateService_CatalogRefresh_Proxy(byval This as ISurrogateService ptr, byval ulReserved as ULONG) as HRESULT
declare sub ISurrogateService_CatalogRefresh_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ISurrogateService_ProcessShutdown_Proxy(byval This as ISurrogateService ptr, byval shutdownType as ShutdownType) as HRESULT
declare sub ISurrogateService_ProcessShutdown_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IInitializeSpy as IInitializeSpy_
type LPINITIALIZESPY as IInitializeSpy ptr
extern IID_IInitializeSpy as const GUID

type IInitializeSpyVtbl
 QueryInterface as function(byval This as IInitializeSpy ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInitializeSpy ptr) as ULONG
 Release as function(byval This as IInitializeSpy ptr) as ULONG
 PreInitialize as function(byval This as IInitializeSpy ptr, byval dwCoInit as DWORD, byval dwCurThreadAptRefs as DWORD) as HRESULT
 PostInitialize as function(byval This as IInitializeSpy ptr, byval hrCoInit as HRESULT, byval dwCoInit as DWORD, byval dwNewThreadAptRefs as DWORD) as HRESULT
 PreUninitialize as function(byval This as IInitializeSpy ptr, byval dwCurThreadAptRefs as DWORD) as HRESULT
 PostUninitialize as function(byval This as IInitializeSpy ptr, byval dwNewThreadAptRefs as DWORD) as HRESULT
end type

type IInitializeSpy_
 lpVtbl as IInitializeSpyVtbl ptr
end type


declare function IInitializeSpy_PreInitialize_Proxy(byval This as IInitializeSpy ptr, byval dwCoInit as DWORD, byval dwCurThreadAptRefs as DWORD) as HRESULT
declare sub IInitializeSpy_PreInitialize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInitializeSpy_PostInitialize_Proxy(byval This as IInitializeSpy ptr, byval hrCoInit as HRESULT, byval dwCoInit as DWORD, byval dwNewThreadAptRefs as DWORD) as HRESULT
declare sub IInitializeSpy_PostInitialize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInitializeSpy_PreUninitialize_Proxy(byval This as IInitializeSpy ptr, byval dwCurThreadAptRefs as DWORD) as HRESULT
declare sub IInitializeSpy_PreUninitialize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInitializeSpy_PostUninitialize_Proxy(byval This as IInitializeSpy ptr, byval dwNewThreadAptRefs as DWORD) as HRESULT
declare sub IInitializeSpy_PostUninitialize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IApartmentShutdown as const GUID
type IApartmentShutdown as IApartmentShutdown_

type IApartmentShutdownVtbl
 QueryInterface as function(byval This as IApartmentShutdown ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IApartmentShutdown ptr) as ULONG
 Release as function(byval This as IApartmentShutdown ptr) as ULONG
 OnUninitialize as sub(byval This as IApartmentShutdown ptr, byval ui64ApartmentIdentifier as UINT64)
end type

type IApartmentShutdown_
 lpVtbl as IApartmentShutdownVtbl ptr
end type


declare sub IApartmentShutdown_OnUninitialize_Proxy(byval This as IApartmentShutdown ptr, byval ui64ApartmentIdentifier as UINT64)
declare sub IApartmentShutdown_OnUninitialize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function SNB_UserSize(byval as ULONG ptr, byval as ULONG, byval as SNB ptr) as ULONG
declare function SNB_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as SNB ptr) as ubyte ptr
declare function SNB_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as SNB ptr) as ubyte ptr
declare sub SNB_UserFree(byval as ULONG ptr, byval as SNB ptr)
declare function ASYNC_STGMEDIUM_UserSize(byval as ULONG ptr, byval as ULONG, byval as ASYNC_STGMEDIUM ptr) as ULONG
declare function ASYNC_STGMEDIUM_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as ASYNC_STGMEDIUM ptr) as ubyte ptr
declare function ASYNC_STGMEDIUM_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as ASYNC_STGMEDIUM ptr) as ubyte ptr
declare sub ASYNC_STGMEDIUM_UserFree(byval as ULONG ptr, byval as ASYNC_STGMEDIUM ptr)
declare function FLAG_STGMEDIUM_UserSize(byval as ULONG ptr, byval as ULONG, byval as FLAG_STGMEDIUM ptr) as ULONG
declare function FLAG_STGMEDIUM_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as FLAG_STGMEDIUM ptr) as ubyte ptr
declare function FLAG_STGMEDIUM_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as FLAG_STGMEDIUM ptr) as ubyte ptr
declare sub FLAG_STGMEDIUM_UserFree(byval as ULONG ptr, byval as FLAG_STGMEDIUM ptr)

end extern



extern "Windows"

declare sub BSTR_UserFree(byval as ULONG ptr, byval as BSTR ptr)
declare function BSTR_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as BSTR ptr) as ubyte ptr
declare function BSTR_UserSize(byval as ULONG ptr, byval as ULONG, byval as BSTR ptr) as ULONG
declare function BSTR_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as BSTR ptr) as ubyte ptr
declare sub CLIPFORMAT_UserFree(byval as ULONG ptr, byval as CLIPFORMAT ptr)
declare function CLIPFORMAT_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as CLIPFORMAT ptr) as ubyte ptr
declare function CLIPFORMAT_UserSize(byval as ULONG ptr, byval as ULONG, byval as CLIPFORMAT ptr) as ULONG
declare function CLIPFORMAT_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as CLIPFORMAT ptr) as ubyte ptr
declare sub HACCEL_UserFree(byval as ULONG ptr, byval as HACCEL ptr)
declare function HACCEL_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as HACCEL ptr) as ubyte ptr
declare function HACCEL_UserSize(byval as ULONG ptr, byval as ULONG, byval as HACCEL ptr) as ULONG
declare function HACCEL_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as HACCEL ptr) as ubyte ptr
declare sub HBITMAP_UserFree(byval as ULONG ptr, byval as HBITMAP ptr)
declare function HBITMAP_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as HBITMAP ptr) as ubyte ptr
declare function HBITMAP_UserSize(byval as ULONG ptr, byval as ULONG, byval as HBITMAP ptr) as ULONG
declare function HBITMAP_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as HBITMAP ptr) as ubyte ptr
declare sub HDC_UserFree(byval as ULONG ptr, byval as HDC ptr)
declare function HDC_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as HDC ptr) as ubyte ptr
declare function HDC_UserSize(byval as ULONG ptr, byval as ULONG, byval as HDC ptr) as ULONG
declare function HDC_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as HDC ptr) as ubyte ptr
declare sub HGLOBAL_UserFree(byval as ULONG ptr, byval as HGLOBAL ptr)
declare function HGLOBAL_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as HGLOBAL ptr) as ubyte ptr
declare function HGLOBAL_UserSize(byval as ULONG ptr, byval as ULONG, byval as HGLOBAL ptr) as ULONG
declare function HGLOBAL_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as HGLOBAL ptr) as ubyte ptr
declare sub HICON_UserFree(byval as ULONG ptr, byval as HICON ptr)
declare function HICON_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as HICON ptr) as ubyte ptr
declare function HICON_UserSize(byval as ULONG ptr, byval as ULONG, byval as HICON ptr) as ULONG
declare function HICON_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as HICON ptr) as ubyte ptr
declare sub HMENU_UserFree(byval as ULONG ptr, byval as HMENU ptr)
declare function HMENU_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as HMENU ptr) as ubyte ptr
declare function HMENU_UserSize(byval as ULONG ptr, byval as ULONG, byval as HMENU ptr) as ULONG
declare function HMENU_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as HMENU ptr) as ubyte ptr
declare sub HPALETTE_UserFree(byval as ULONG ptr, byval as HPALETTE ptr)
declare function HPALETTE_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as HPALETTE ptr) as ubyte ptr
declare function HPALETTE_UserSize(byval as ULONG ptr, byval as ULONG, byval as HPALETTE ptr) as ULONG
declare function HPALETTE_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as HPALETTE ptr) as ubyte ptr
declare sub HWND_UserFree(byval as ULONG ptr, byval as HWND ptr)
declare function HWND_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as HWND ptr) as ubyte ptr
declare function HWND_UserSize(byval as ULONG ptr, byval as ULONG, byval as HWND ptr) as ULONG
declare function HWND_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as HWND ptr) as ubyte ptr
declare sub STGMEDIUM_UserFree(byval as ULONG ptr, byval as STGMEDIUM ptr)
declare function STGMEDIUM_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as STGMEDIUM ptr) as ubyte ptr
declare function STGMEDIUM_UserSize(byval as ULONG ptr, byval as ULONG, byval as STGMEDIUM ptr) as ULONG
declare function STGMEDIUM_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as STGMEDIUM ptr) as ubyte ptr
type VARIANT as tagVARIANT
declare function VARIANT_UserSize(byval as ULONG ptr, byval as ULONG, byval as VARIANT ptr) as ULONG
declare function VARIANT_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as VARIANT ptr) as ubyte ptr
declare function VARIANT_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as VARIANT ptr) as ubyte ptr
declare sub VARIANT_UserFree(byval as ULONG ptr, byval as VARIANT ptr)

end extern


#inclib "uuid"






#inclib "uuid"


extern "Windows"

type IOleAdviseHolder as IOleAdviseHolder_
type LPOLEADVISEHOLDER as IOleAdviseHolder ptr
extern IID_IOleAdviseHolder as const GUID

type IOleAdviseHolderVtbl
 QueryInterface as function(byval This as IOleAdviseHolder ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IOleAdviseHolder ptr) as ULONG
 Release as function(byval This as IOleAdviseHolder ptr) as ULONG
 Advise as function(byval This as IOleAdviseHolder ptr, byval pAdvise as IAdviseSink ptr, byval pdwConnection as DWORD ptr) as HRESULT
 Unadvise as function(byval This as IOleAdviseHolder ptr, byval dwConnection as DWORD) as HRESULT
 EnumAdvise as function(byval This as IOleAdviseHolder ptr, byval ppenumAdvise as IEnumSTATDATA ptr ptr) as HRESULT
 SendOnRename as function(byval This as IOleAdviseHolder ptr, byval pmk as IMoniker ptr) as HRESULT
 SendOnSave as function(byval This as IOleAdviseHolder ptr) as HRESULT
 SendOnClose as function(byval This as IOleAdviseHolder ptr) as HRESULT
end type

type IOleAdviseHolder_
 lpVtbl as IOleAdviseHolderVtbl ptr
end type


declare function IOleAdviseHolder_Advise_Proxy(byval This as IOleAdviseHolder ptr, byval pAdvise as IAdviseSink ptr, byval pdwConnection as DWORD ptr) as HRESULT
declare sub IOleAdviseHolder_Advise_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleAdviseHolder_Unadvise_Proxy(byval This as IOleAdviseHolder ptr, byval dwConnection as DWORD) as HRESULT
declare sub IOleAdviseHolder_Unadvise_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleAdviseHolder_EnumAdvise_Proxy(byval This as IOleAdviseHolder ptr, byval ppenumAdvise as IEnumSTATDATA ptr ptr) as HRESULT
declare sub IOleAdviseHolder_EnumAdvise_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleAdviseHolder_SendOnRename_Proxy(byval This as IOleAdviseHolder ptr, byval pmk as IMoniker ptr) as HRESULT
declare sub IOleAdviseHolder_SendOnRename_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleAdviseHolder_SendOnSave_Proxy(byval This as IOleAdviseHolder ptr) as HRESULT
declare sub IOleAdviseHolder_SendOnSave_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleAdviseHolder_SendOnClose_Proxy(byval This as IOleAdviseHolder ptr) as HRESULT
declare sub IOleAdviseHolder_SendOnClose_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IOleCache as IOleCache_
type LPOLECACHE as IOleCache ptr
extern IID_IOleCache as const GUID

type IOleCacheVtbl
 QueryInterface as function(byval This as IOleCache ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IOleCache ptr) as ULONG
 Release as function(byval This as IOleCache ptr) as ULONG
 Cache as function(byval This as IOleCache ptr, byval pformatetc as FORMATETC ptr, byval advf as DWORD, byval pdwConnection as DWORD ptr) as HRESULT
 Uncache as function(byval This as IOleCache ptr, byval dwConnection as DWORD) as HRESULT
 EnumCache as function(byval This as IOleCache ptr, byval ppenumSTATDATA as IEnumSTATDATA ptr ptr) as HRESULT
 InitCache as function(byval This as IOleCache ptr, byval pDataObject as IDataObject ptr) as HRESULT
 SetData as function(byval This as IOleCache ptr, byval pformatetc as FORMATETC ptr, byval pmedium as STGMEDIUM ptr, byval fRelease as WINBOOL) as HRESULT
end type

type IOleCache_
 lpVtbl as IOleCacheVtbl ptr
end type


declare function IOleCache_Cache_Proxy(byval This as IOleCache ptr, byval pformatetc as FORMATETC ptr, byval advf as DWORD, byval pdwConnection as DWORD ptr) as HRESULT
declare sub IOleCache_Cache_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleCache_Uncache_Proxy(byval This as IOleCache ptr, byval dwConnection as DWORD) as HRESULT
declare sub IOleCache_Uncache_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleCache_EnumCache_Proxy(byval This as IOleCache ptr, byval ppenumSTATDATA as IEnumSTATDATA ptr ptr) as HRESULT
declare sub IOleCache_EnumCache_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleCache_InitCache_Proxy(byval This as IOleCache ptr, byval pDataObject as IDataObject ptr) as HRESULT
declare sub IOleCache_InitCache_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleCache_SetData_Proxy(byval This as IOleCache ptr, byval pformatetc as FORMATETC ptr, byval pmedium as STGMEDIUM ptr, byval fRelease as WINBOOL) as HRESULT
declare sub IOleCache_SetData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IOleCache2 as IOleCache2_
type LPOLECACHE2 as IOleCache2 ptr

const UPDFCACHE_NODATACACHE = &h1
const UPDFCACHE_ONSAVECACHE = &h2
const UPDFCACHE_ONSTOPCACHE = &h4
const UPDFCACHE_NORMALCACHE = &h8
const UPDFCACHE_IFBLANK = &h10
const UPDFCACHE_ONLYIFBLANK = &h80000000
const UPDFCACHE_IFBLANKORONSAVECACHE = UPDFCACHE_IFBLANK or UPDFCACHE_ONSAVECACHE
const UPDFCACHE_ALL = cast(DWORD, (not UPDFCACHE_ONLYIFBLANK) and &hFFFFFFFF)
const UPDFCACHE_ALLBUTNODATACACHE = UPDFCACHE_ALL and cast(DWORD, not UPDFCACHE_NODATACACHE)

type tagDISCARDCACHE as long
enum
 DISCARDCACHE_SAVEIFDIRTY = 0
 DISCARDCACHE_NOSAVE = 1
end enum

type DISCARDCACHE as tagDISCARDCACHE
extern IID_IOleCache2 as const GUID

type IOleCache2Vtbl
 QueryInterface as function(byval This as IOleCache2 ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IOleCache2 ptr) as ULONG
 Release as function(byval This as IOleCache2 ptr) as ULONG
 Cache as function(byval This as IOleCache2 ptr, byval pformatetc as FORMATETC ptr, byval advf as DWORD, byval pdwConnection as DWORD ptr) as HRESULT
 Uncache as function(byval This as IOleCache2 ptr, byval dwConnection as DWORD) as HRESULT
 EnumCache as function(byval This as IOleCache2 ptr, byval ppenumSTATDATA as IEnumSTATDATA ptr ptr) as HRESULT
 InitCache as function(byval This as IOleCache2 ptr, byval pDataObject as IDataObject ptr) as HRESULT
 SetData as function(byval This as IOleCache2 ptr, byval pformatetc as FORMATETC ptr, byval pmedium as STGMEDIUM ptr, byval fRelease as WINBOOL) as HRESULT
 UpdateCache as function(byval This as IOleCache2 ptr, byval pDataObject as LPDATAOBJECT, byval grfUpdf as DWORD, byval pReserved as LPVOID) as HRESULT
 DiscardCache as function(byval This as IOleCache2 ptr, byval dwDiscardOptions as DWORD) as HRESULT
end type

type IOleCache2_
 lpVtbl as IOleCache2Vtbl ptr
end type


declare function IOleCache2_RemoteUpdateCache_Proxy(byval This as IOleCache2 ptr, byval pDataObject as LPDATAOBJECT, byval grfUpdf as DWORD, byval pReserved as LONG_PTR) as HRESULT
declare sub IOleCache2_RemoteUpdateCache_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleCache2_DiscardCache_Proxy(byval This as IOleCache2 ptr, byval dwDiscardOptions as DWORD) as HRESULT
declare sub IOleCache2_DiscardCache_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleCache2_UpdateCache_Proxy(byval This as IOleCache2 ptr, byval pDataObject as LPDATAOBJECT, byval grfUpdf as DWORD, byval pReserved as LPVOID) as HRESULT
declare function IOleCache2_UpdateCache_Stub(byval This as IOleCache2 ptr, byval pDataObject as LPDATAOBJECT, byval grfUpdf as DWORD, byval pReserved as LONG_PTR) as HRESULT
type IOleCacheControl as IOleCacheControl_
type LPOLECACHECONTROL as IOleCacheControl ptr
extern IID_IOleCacheControl as const GUID

type IOleCacheControlVtbl
 QueryInterface as function(byval This as IOleCacheControl ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IOleCacheControl ptr) as ULONG
 Release as function(byval This as IOleCacheControl ptr) as ULONG
 OnRun as function(byval This as IOleCacheControl ptr, byval pDataObject as LPDATAOBJECT) as HRESULT
 OnStop as function(byval This as IOleCacheControl ptr) as HRESULT
end type

type IOleCacheControl_
 lpVtbl as IOleCacheControlVtbl ptr
end type


declare function IOleCacheControl_OnRun_Proxy(byval This as IOleCacheControl ptr, byval pDataObject as LPDATAOBJECT) as HRESULT
declare sub IOleCacheControl_OnRun_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleCacheControl_OnStop_Proxy(byval This as IOleCacheControl ptr) as HRESULT
declare sub IOleCacheControl_OnStop_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IParseDisplayName as IParseDisplayName_
type LPPARSEDISPLAYNAME as IParseDisplayName ptr
extern IID_IParseDisplayName as const GUID

type IParseDisplayNameVtbl
 QueryInterface as function(byval This as IParseDisplayName ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IParseDisplayName ptr) as ULONG
 Release as function(byval This as IParseDisplayName ptr) as ULONG
 ParseDisplayName as function(byval This as IParseDisplayName ptr, byval pbc as IBindCtx ptr, byval pszDisplayName as LPOLESTR, byval pchEaten as ULONG ptr, byval ppmkOut as IMoniker ptr ptr) as HRESULT
end type

type IParseDisplayName_
 lpVtbl as IParseDisplayNameVtbl ptr
end type

declare function IParseDisplayName_ParseDisplayName_Proxy(byval This as IParseDisplayName ptr, byval pbc as IBindCtx ptr, byval pszDisplayName as LPOLESTR, byval pchEaten as ULONG ptr, byval ppmkOut as IMoniker ptr ptr) as HRESULT
declare sub IParseDisplayName_ParseDisplayName_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IOleContainer as IOleContainer_
type LPOLECONTAINER as IOleContainer ptr
extern IID_IOleContainer as const GUID

type IOleContainerVtbl
 QueryInterface as function(byval This as IOleContainer ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IOleContainer ptr) as ULONG
 Release as function(byval This as IOleContainer ptr) as ULONG
 ParseDisplayName as function(byval This as IOleContainer ptr, byval pbc as IBindCtx ptr, byval pszDisplayName as LPOLESTR, byval pchEaten as ULONG ptr, byval ppmkOut as IMoniker ptr ptr) as HRESULT
 EnumObjects as function(byval This as IOleContainer ptr, byval grfFlags as DWORD, byval ppenum as IEnumUnknown ptr ptr) as HRESULT
 LockContainer as function(byval This as IOleContainer ptr, byval fLock as WINBOOL) as HRESULT
end type

type IOleContainer_
 lpVtbl as IOleContainerVtbl ptr
end type


declare function IOleContainer_EnumObjects_Proxy(byval This as IOleContainer ptr, byval grfFlags as DWORD, byval ppenum as IEnumUnknown ptr ptr) as HRESULT
declare sub IOleContainer_EnumObjects_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleContainer_LockContainer_Proxy(byval This as IOleContainer ptr, byval fLock as WINBOOL) as HRESULT
declare sub IOleContainer_LockContainer_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IOleClientSite as IOleClientSite_
type LPOLECLIENTSITE as IOleClientSite ptr
extern IID_IOleClientSite as const GUID

type IOleClientSiteVtbl
 QueryInterface as function(byval This as IOleClientSite ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IOleClientSite ptr) as ULONG
 Release as function(byval This as IOleClientSite ptr) as ULONG
 SaveObject as function(byval This as IOleClientSite ptr) as HRESULT
 GetMoniker as function(byval This as IOleClientSite ptr, byval dwAssign as DWORD, byval dwWhichMoniker as DWORD, byval ppmk as IMoniker ptr ptr) as HRESULT
 GetContainer as function(byval This as IOleClientSite ptr, byval ppContainer as IOleContainer ptr ptr) as HRESULT
 ShowObject as function(byval This as IOleClientSite ptr) as HRESULT
 OnShowWindow as function(byval This as IOleClientSite ptr, byval fShow as WINBOOL) as HRESULT
 RequestNewObjectLayout as function(byval This as IOleClientSite ptr) as HRESULT
end type

type IOleClientSite_
 lpVtbl as IOleClientSiteVtbl ptr
end type


declare function IOleClientSite_SaveObject_Proxy(byval This as IOleClientSite ptr) as HRESULT
declare sub IOleClientSite_SaveObject_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleClientSite_GetMoniker_Proxy(byval This as IOleClientSite ptr, byval dwAssign as DWORD, byval dwWhichMoniker as DWORD, byval ppmk as IMoniker ptr ptr) as HRESULT
declare sub IOleClientSite_GetMoniker_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleClientSite_GetContainer_Proxy(byval This as IOleClientSite ptr, byval ppContainer as IOleContainer ptr ptr) as HRESULT
declare sub IOleClientSite_GetContainer_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleClientSite_ShowObject_Proxy(byval This as IOleClientSite ptr) as HRESULT
declare sub IOleClientSite_ShowObject_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleClientSite_OnShowWindow_Proxy(byval This as IOleClientSite ptr, byval fShow as WINBOOL) as HRESULT
declare sub IOleClientSite_OnShowWindow_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleClientSite_RequestNewObjectLayout_Proxy(byval This as IOleClientSite ptr) as HRESULT
declare sub IOleClientSite_RequestNewObjectLayout_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IOleObject as IOleObject_
type LPOLEOBJECT as IOleObject ptr

type tagOLEGETMONIKER as long
enum
 OLEGETMONIKER_ONLYIFTHERE = 1
 OLEGETMONIKER_FORCEASSIGN = 2
 OLEGETMONIKER_UNASSIGN = 3
 OLEGETMONIKER_TEMPFORUSER = 4
end enum

type OLEGETMONIKER as tagOLEGETMONIKER

type tagOLEWHICHMK as long
enum
 OLEWHICHMK_CONTAINER = 1
 OLEWHICHMK_OBJREL = 2
 OLEWHICHMK_OBJFULL = 3
end enum

type OLEWHICHMK as tagOLEWHICHMK

type tagUSERCLASSTYPE as long
enum
 USERCLASSTYPE_FULL = 1
 USERCLASSTYPE_SHORT = 2
 USERCLASSTYPE_APPNAME = 3
end enum

type USERCLASSTYPE as tagUSERCLASSTYPE

type tagOLEMISC as long
enum
 OLEMISC_RECOMPOSEONRESIZE = &h1
 OLEMISC_ONLYICONIC = &h2
 OLEMISC_INSERTNOTREPLACE = &h4
 OLEMISC_STATIC = &h8
 OLEMISC_CANTLINKINSIDE = &h10
 OLEMISC_CANLINKBYOLE1 = &h20
 OLEMISC_ISLINKOBJECT = &h40
 OLEMISC_INSIDEOUT = &h80
 OLEMISC_ACTIVATEWHENVISIBLE = &h100
 OLEMISC_RENDERINGISDEVICEINDEPENDENT = &h200
 OLEMISC_INVISIBLEATRUNTIME = &h400
 OLEMISC_ALWAYSRUN = &h800
 OLEMISC_ACTSLIKEBUTTON = &h1000
 OLEMISC_ACTSLIKELABEL = &h2000
 OLEMISC_NOUIACTIVATE = &h4000
 OLEMISC_ALIGNABLE = &h8000
 OLEMISC_SIMPLEFRAME = &h10000
 OLEMISC_SETCLIENTSITEFIRST = &h20000
 OLEMISC_IMEMODE = &h40000
 OLEMISC_IGNOREACTIVATEWHENVISIBLE = &h80000
 OLEMISC_WANTSTOMENUMERGE = &h100000
 OLEMISC_SUPPORTSMULTILEVELUNDO = &h200000
end enum

type OLEMISC as tagOLEMISC

type tagOLECLOSE as long
enum
 OLECLOSE_SAVEIFDIRTY = 0
 OLECLOSE_NOSAVE = 1
 OLECLOSE_PROMPTSAVE = 2
end enum

type OLECLOSE as tagOLECLOSE
extern IID_IOleObject as const GUID
type IEnumOLEVERB as IEnumOLEVERB_

type IOleObjectVtbl
 QueryInterface as function(byval This as IOleObject ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IOleObject ptr) as ULONG
 Release as function(byval This as IOleObject ptr) as ULONG
 SetClientSite as function(byval This as IOleObject ptr, byval pClientSite as IOleClientSite ptr) as HRESULT
 GetClientSite as function(byval This as IOleObject ptr, byval ppClientSite as IOleClientSite ptr ptr) as HRESULT
 SetHostNames as function(byval This as IOleObject ptr, byval szContainerApp as LPCOLESTR, byval szContainerObj as LPCOLESTR) as HRESULT
 Close as function(byval This as IOleObject ptr, byval dwSaveOption as DWORD) as HRESULT
 SetMoniker as function(byval This as IOleObject ptr, byval dwWhichMoniker as DWORD, byval pmk as IMoniker ptr) as HRESULT
 GetMoniker as function(byval This as IOleObject ptr, byval dwAssign as DWORD, byval dwWhichMoniker as DWORD, byval ppmk as IMoniker ptr ptr) as HRESULT
 InitFromData as function(byval This as IOleObject ptr, byval pDataObject as IDataObject ptr, byval fCreation as WINBOOL, byval dwReserved as DWORD) as HRESULT
 GetClipboardData as function(byval This as IOleObject ptr, byval dwReserved as DWORD, byval ppDataObject as IDataObject ptr ptr) as HRESULT
 DoVerb as function(byval This as IOleObject ptr, byval iVerb as LONG, byval lpmsg as LPMSG, byval pActiveSite as IOleClientSite ptr, byval lindex as LONG, byval hwndParent as HWND, byval lprcPosRect as LPCRECT) as HRESULT
 EnumVerbs as function(byval This as IOleObject ptr, byval ppEnumOleVerb as IEnumOLEVERB ptr ptr) as HRESULT
 Update as function(byval This as IOleObject ptr) as HRESULT
 IsUpToDate as function(byval This as IOleObject ptr) as HRESULT
 GetUserClassID as function(byval This as IOleObject ptr, byval pClsid as CLSID ptr) as HRESULT
 GetUserType as function(byval This as IOleObject ptr, byval dwFormOfType as DWORD, byval pszUserType as LPOLESTR ptr) as HRESULT
 SetExtent as function(byval This as IOleObject ptr, byval dwDrawAspect as DWORD, byval psizel as SIZEL ptr) as HRESULT
 GetExtent as function(byval This as IOleObject ptr, byval dwDrawAspect as DWORD, byval psizel as SIZEL ptr) as HRESULT
 Advise as function(byval This as IOleObject ptr, byval pAdvSink as IAdviseSink ptr, byval pdwConnection as DWORD ptr) as HRESULT
 Unadvise as function(byval This as IOleObject ptr, byval dwConnection as DWORD) as HRESULT
 EnumAdvise as function(byval This as IOleObject ptr, byval ppenumAdvise as IEnumSTATDATA ptr ptr) as HRESULT
 GetMiscStatus as function(byval This as IOleObject ptr, byval dwAspect as DWORD, byval pdwStatus as DWORD ptr) as HRESULT
 SetColorScheme as function(byval This as IOleObject ptr, byval pLogpal as LOGPALETTE ptr) as HRESULT
end type

type IOleObject_
 lpVtbl as IOleObjectVtbl ptr
end type


declare function IOleObject_SetClientSite_Proxy(byval This as IOleObject ptr, byval pClientSite as IOleClientSite ptr) as HRESULT
declare sub IOleObject_SetClientSite_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_GetClientSite_Proxy(byval This as IOleObject ptr, byval ppClientSite as IOleClientSite ptr ptr) as HRESULT
declare sub IOleObject_GetClientSite_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_SetHostNames_Proxy(byval This as IOleObject ptr, byval szContainerApp as LPCOLESTR, byval szContainerObj as LPCOLESTR) as HRESULT
declare sub IOleObject_SetHostNames_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_Close_Proxy(byval This as IOleObject ptr, byval dwSaveOption as DWORD) as HRESULT
declare sub IOleObject_Close_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_SetMoniker_Proxy(byval This as IOleObject ptr, byval dwWhichMoniker as DWORD, byval pmk as IMoniker ptr) as HRESULT
declare sub IOleObject_SetMoniker_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_GetMoniker_Proxy(byval This as IOleObject ptr, byval dwAssign as DWORD, byval dwWhichMoniker as DWORD, byval ppmk as IMoniker ptr ptr) as HRESULT
declare sub IOleObject_GetMoniker_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_InitFromData_Proxy(byval This as IOleObject ptr, byval pDataObject as IDataObject ptr, byval fCreation as WINBOOL, byval dwReserved as DWORD) as HRESULT
declare sub IOleObject_InitFromData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_GetClipboardData_Proxy(byval This as IOleObject ptr, byval dwReserved as DWORD, byval ppDataObject as IDataObject ptr ptr) as HRESULT
declare sub IOleObject_GetClipboardData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_DoVerb_Proxy(byval This as IOleObject ptr, byval iVerb as LONG, byval lpmsg as LPMSG, byval pActiveSite as IOleClientSite ptr, byval lindex as LONG, byval hwndParent as HWND, byval lprcPosRect as LPCRECT) as HRESULT
declare sub IOleObject_DoVerb_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_EnumVerbs_Proxy(byval This as IOleObject ptr, byval ppEnumOleVerb as IEnumOLEVERB ptr ptr) as HRESULT
declare sub IOleObject_EnumVerbs_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_Update_Proxy(byval This as IOleObject ptr) as HRESULT
declare sub IOleObject_Update_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_IsUpToDate_Proxy(byval This as IOleObject ptr) as HRESULT
declare sub IOleObject_IsUpToDate_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_GetUserClassID_Proxy(byval This as IOleObject ptr, byval pClsid as CLSID ptr) as HRESULT
declare sub IOleObject_GetUserClassID_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_GetUserType_Proxy(byval This as IOleObject ptr, byval dwFormOfType as DWORD, byval pszUserType as LPOLESTR ptr) as HRESULT
declare sub IOleObject_GetUserType_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_SetExtent_Proxy(byval This as IOleObject ptr, byval dwDrawAspect as DWORD, byval psizel as SIZEL ptr) as HRESULT
declare sub IOleObject_SetExtent_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_GetExtent_Proxy(byval This as IOleObject ptr, byval dwDrawAspect as DWORD, byval psizel as SIZEL ptr) as HRESULT
declare sub IOleObject_GetExtent_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_Advise_Proxy(byval This as IOleObject ptr, byval pAdvSink as IAdviseSink ptr, byval pdwConnection as DWORD ptr) as HRESULT
declare sub IOleObject_Advise_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_Unadvise_Proxy(byval This as IOleObject ptr, byval dwConnection as DWORD) as HRESULT
declare sub IOleObject_Unadvise_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_EnumAdvise_Proxy(byval This as IOleObject ptr, byval ppenumAdvise as IEnumSTATDATA ptr ptr) as HRESULT
declare sub IOleObject_EnumAdvise_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_GetMiscStatus_Proxy(byval This as IOleObject ptr, byval dwAspect as DWORD, byval pdwStatus as DWORD ptr) as HRESULT
declare sub IOleObject_GetMiscStatus_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleObject_SetColorScheme_Proxy(byval This as IOleObject ptr, byval pLogpal as LOGPALETTE ptr) as HRESULT
declare sub IOleObject_SetColorScheme_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IOLETypes_v0_0_c_ifspec as RPC_IF_HANDLE
extern IOLETypes_v0_0_s_ifspec as RPC_IF_HANDLE

type tagOLERENDER as long
enum
 OLERENDER_NONE = 0
 OLERENDER_DRAW = 1
 OLERENDER_FORMAT = 2
 OLERENDER_ASIS = 3
end enum

type OLERENDER as tagOLERENDER
type LPOLERENDER as OLERENDER ptr

type tagOBJECTDESCRIPTOR
 cbSize as ULONG
 clsid as CLSID
 dwDrawAspect as DWORD
 sizel as SIZEL
 pointl as POINTL
 dwStatus as DWORD
 dwFullUserTypeName as DWORD
 dwSrcOfCopy as DWORD
end type

type OBJECTDESCRIPTOR as tagOBJECTDESCRIPTOR
type POBJECTDESCRIPTOR as tagOBJECTDESCRIPTOR ptr
type LPOBJECTDESCRIPTOR as tagOBJECTDESCRIPTOR ptr
type LINKSRCDESCRIPTOR as tagOBJECTDESCRIPTOR
type PLINKSRCDESCRIPTOR as tagOBJECTDESCRIPTOR ptr
type LPLINKSRCDESCRIPTOR as tagOBJECTDESCRIPTOR ptr
type IOleWindow as IOleWindow_
type LPOLEWINDOW as IOleWindow ptr
extern IID_IOleWindow as const GUID

type IOleWindowVtbl
 QueryInterface as function(byval This as IOleWindow ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IOleWindow ptr) as ULONG
 Release as function(byval This as IOleWindow ptr) as ULONG
 GetWindow as function(byval This as IOleWindow ptr, byval phwnd as HWND ptr) as HRESULT
 ContextSensitiveHelp as function(byval This as IOleWindow ptr, byval fEnterMode as WINBOOL) as HRESULT
end type

type IOleWindow_
 lpVtbl as IOleWindowVtbl ptr
end type


declare function IOleWindow_GetWindow_Proxy(byval This as IOleWindow ptr, byval phwnd as HWND ptr) as HRESULT
declare sub IOleWindow_GetWindow_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleWindow_ContextSensitiveHelp_Proxy(byval This as IOleWindow ptr, byval fEnterMode as WINBOOL) as HRESULT
declare sub IOleWindow_ContextSensitiveHelp_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IOleLink as IOleLink_
type LPOLELINK as IOleLink ptr

type tagOLEUPDATE as long
enum
 OLEUPDATE_ALWAYS = 1
 OLEUPDATE_ONCALL = 3
end enum

type OLEUPDATE as tagOLEUPDATE
type LPOLEUPDATE as OLEUPDATE ptr
type POLEUPDATE as OLEUPDATE ptr

type tagOLELINKBIND as long
enum
 OLELINKBIND_EVENIFCLASSDIFF = 1
end enum

type OLELINKBIND as tagOLELINKBIND
extern IID_IOleLink as const GUID

type IOleLinkVtbl
 QueryInterface as function(byval This as IOleLink ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IOleLink ptr) as ULONG
 Release as function(byval This as IOleLink ptr) as ULONG
 SetUpdateOptions as function(byval This as IOleLink ptr, byval dwUpdateOpt as DWORD) as HRESULT
 GetUpdateOptions as function(byval This as IOleLink ptr, byval pdwUpdateOpt as DWORD ptr) as HRESULT
 SetSourceMoniker as function(byval This as IOleLink ptr, byval pmk as IMoniker ptr, byval rclsid as const IID const ptr) as HRESULT
 GetSourceMoniker as function(byval This as IOleLink ptr, byval ppmk as IMoniker ptr ptr) as HRESULT
 SetSourceDisplayName as function(byval This as IOleLink ptr, byval pszStatusText as LPCOLESTR) as HRESULT
 GetSourceDisplayName as function(byval This as IOleLink ptr, byval ppszDisplayName as LPOLESTR ptr) as HRESULT
 BindToSource as function(byval This as IOleLink ptr, byval bindflags as DWORD, byval pbc as IBindCtx ptr) as HRESULT
 BindIfRunning as function(byval This as IOleLink ptr) as HRESULT
 GetBoundSource as function(byval This as IOleLink ptr, byval ppunk as IUnknown ptr ptr) as HRESULT
 UnbindSource as function(byval This as IOleLink ptr) as HRESULT
 Update as function(byval This as IOleLink ptr, byval pbc as IBindCtx ptr) as HRESULT
end type

type IOleLink_
 lpVtbl as IOleLinkVtbl ptr
end type


declare function IOleLink_SetUpdateOptions_Proxy(byval This as IOleLink ptr, byval dwUpdateOpt as DWORD) as HRESULT
declare sub IOleLink_SetUpdateOptions_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleLink_GetUpdateOptions_Proxy(byval This as IOleLink ptr, byval pdwUpdateOpt as DWORD ptr) as HRESULT
declare sub IOleLink_GetUpdateOptions_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleLink_SetSourceMoniker_Proxy(byval This as IOleLink ptr, byval pmk as IMoniker ptr, byval rclsid as const IID const ptr) as HRESULT
declare sub IOleLink_SetSourceMoniker_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleLink_GetSourceMoniker_Proxy(byval This as IOleLink ptr, byval ppmk as IMoniker ptr ptr) as HRESULT
declare sub IOleLink_GetSourceMoniker_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleLink_SetSourceDisplayName_Proxy(byval This as IOleLink ptr, byval pszStatusText as LPCOLESTR) as HRESULT
declare sub IOleLink_SetSourceDisplayName_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleLink_GetSourceDisplayName_Proxy(byval This as IOleLink ptr, byval ppszDisplayName as LPOLESTR ptr) as HRESULT
declare sub IOleLink_GetSourceDisplayName_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleLink_BindToSource_Proxy(byval This as IOleLink ptr, byval bindflags as DWORD, byval pbc as IBindCtx ptr) as HRESULT
declare sub IOleLink_BindToSource_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleLink_BindIfRunning_Proxy(byval This as IOleLink ptr) as HRESULT
declare sub IOleLink_BindIfRunning_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleLink_GetBoundSource_Proxy(byval This as IOleLink ptr, byval ppunk as IUnknown ptr ptr) as HRESULT
declare sub IOleLink_GetBoundSource_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleLink_UnbindSource_Proxy(byval This as IOleLink ptr) as HRESULT
declare sub IOleLink_UnbindSource_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleLink_Update_Proxy(byval This as IOleLink ptr, byval pbc as IBindCtx ptr) as HRESULT
declare sub IOleLink_Update_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IOleItemContainer as IOleItemContainer_
type LPOLEITEMCONTAINER as IOleItemContainer ptr

type tagBINDSPEED as long
enum
 BINDSPEED_INDEFINITE = 1
 BINDSPEED_MODERATE = 2
 BINDSPEED_IMMEDIATE = 3
end enum

type BINDSPEED as tagBINDSPEED

type tagOLECONTF as long
enum
 OLECONTF_EMBEDDINGS = 1
 OLECONTF_LINKS = 2
 OLECONTF_OTHERS = 4
 OLECONTF_ONLYUSER = 8
 OLECONTF_ONLYIFRUNNING = 16
end enum

type OLECONTF as tagOLECONTF
extern IID_IOleItemContainer as const GUID

type IOleItemContainerVtbl
 QueryInterface as function(byval This as IOleItemContainer ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IOleItemContainer ptr) as ULONG
 Release as function(byval This as IOleItemContainer ptr) as ULONG
 ParseDisplayName as function(byval This as IOleItemContainer ptr, byval pbc as IBindCtx ptr, byval pszDisplayName as LPOLESTR, byval pchEaten as ULONG ptr, byval ppmkOut as IMoniker ptr ptr) as HRESULT
 EnumObjects as function(byval This as IOleItemContainer ptr, byval grfFlags as DWORD, byval ppenum as IEnumUnknown ptr ptr) as HRESULT
 LockContainer as function(byval This as IOleItemContainer ptr, byval fLock as WINBOOL) as HRESULT
 GetObject as function(byval This as IOleItemContainer ptr, byval pszItem as LPOLESTR, byval dwSpeedNeeded as DWORD, byval pbc as IBindCtx ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 GetObjectStorage as function(byval This as IOleItemContainer ptr, byval pszItem as LPOLESTR, byval pbc as IBindCtx ptr, byval riid as const IID const ptr, byval ppvStorage as any ptr ptr) as HRESULT
 IsRunning as function(byval This as IOleItemContainer ptr, byval pszItem as LPOLESTR) as HRESULT
end type

type IOleItemContainer_
 lpVtbl as IOleItemContainerVtbl ptr
end type


declare function IOleItemContainer_GetObject_Proxy(byval This as IOleItemContainer ptr, byval pszItem as LPOLESTR, byval dwSpeedNeeded as DWORD, byval pbc as IBindCtx ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
declare sub IOleItemContainer_GetObject_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleItemContainer_GetObjectStorage_Proxy(byval This as IOleItemContainer ptr, byval pszItem as LPOLESTR, byval pbc as IBindCtx ptr, byval riid as const IID const ptr, byval ppvStorage as any ptr ptr) as HRESULT
declare sub IOleItemContainer_GetObjectStorage_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleItemContainer_IsRunning_Proxy(byval This as IOleItemContainer ptr, byval pszItem as LPOLESTR) as HRESULT
declare sub IOleItemContainer_IsRunning_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)

type IOleInPlaceUIWindow as IOleInPlaceUIWindow_
type LPOLEINPLACEUIWINDOW as IOleInPlaceUIWindow ptr
type BORDERWIDTHS as RECT
type LPBORDERWIDTHS as LPRECT
type LPCBORDERWIDTHS as LPCRECT
extern IID_IOleInPlaceUIWindow as const GUID
type IOleInPlaceActiveObject as IOleInPlaceActiveObject_

type IOleInPlaceUIWindowVtbl
 QueryInterface as function(byval This as IOleInPlaceUIWindow ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IOleInPlaceUIWindow ptr) as ULONG
 Release as function(byval This as IOleInPlaceUIWindow ptr) as ULONG
 GetWindow as function(byval This as IOleInPlaceUIWindow ptr, byval phwnd as HWND ptr) as HRESULT
 ContextSensitiveHelp as function(byval This as IOleInPlaceUIWindow ptr, byval fEnterMode as WINBOOL) as HRESULT
 GetBorder as function(byval This as IOleInPlaceUIWindow ptr, byval lprectBorder as LPRECT) as HRESULT
 RequestBorderSpace as function(byval This as IOleInPlaceUIWindow ptr, byval pborderwidths as LPCBORDERWIDTHS) as HRESULT
 SetBorderSpace as function(byval This as IOleInPlaceUIWindow ptr, byval pborderwidths as LPCBORDERWIDTHS) as HRESULT
 SetActiveObject as function(byval This as IOleInPlaceUIWindow ptr, byval pActiveObject as IOleInPlaceActiveObject ptr, byval pszObjName as LPCOLESTR) as HRESULT
end type

type IOleInPlaceUIWindow_
 lpVtbl as IOleInPlaceUIWindowVtbl ptr
end type


declare function IOleInPlaceUIWindow_GetBorder_Proxy(byval This as IOleInPlaceUIWindow ptr, byval lprectBorder as LPRECT) as HRESULT
declare sub IOleInPlaceUIWindow_GetBorder_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceUIWindow_RequestBorderSpace_Proxy(byval This as IOleInPlaceUIWindow ptr, byval pborderwidths as LPCBORDERWIDTHS) as HRESULT
declare sub IOleInPlaceUIWindow_RequestBorderSpace_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceUIWindow_SetBorderSpace_Proxy(byval This as IOleInPlaceUIWindow ptr, byval pborderwidths as LPCBORDERWIDTHS) as HRESULT
declare sub IOleInPlaceUIWindow_SetBorderSpace_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceUIWindow_SetActiveObject_Proxy(byval This as IOleInPlaceUIWindow ptr, byval pActiveObject as IOleInPlaceActiveObject ptr, byval pszObjName as LPCOLESTR) as HRESULT
declare sub IOleInPlaceUIWindow_SetActiveObject_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type LPOLEINPLACEACTIVEOBJECT as IOleInPlaceActiveObject ptr
extern IID_IOleInPlaceActiveObject as const GUID

type IOleInPlaceActiveObjectVtbl
 QueryInterface as function(byval This as IOleInPlaceActiveObject ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IOleInPlaceActiveObject ptr) as ULONG
 Release as function(byval This as IOleInPlaceActiveObject ptr) as ULONG
 GetWindow as function(byval This as IOleInPlaceActiveObject ptr, byval phwnd as HWND ptr) as HRESULT
 ContextSensitiveHelp as function(byval This as IOleInPlaceActiveObject ptr, byval fEnterMode as WINBOOL) as HRESULT
 TranslateAccelerator as function(byval This as IOleInPlaceActiveObject ptr, byval lpmsg as LPMSG) as HRESULT
 OnFrameWindowActivate as function(byval This as IOleInPlaceActiveObject ptr, byval fActivate as WINBOOL) as HRESULT
 OnDocWindowActivate as function(byval This as IOleInPlaceActiveObject ptr, byval fActivate as WINBOOL) as HRESULT
 ResizeBorder as function(byval This as IOleInPlaceActiveObject ptr, byval prcBorder as LPCRECT, byval pUIWindow as IOleInPlaceUIWindow ptr, byval fFrameWindow as WINBOOL) as HRESULT
 EnableModeless as function(byval This as IOleInPlaceActiveObject ptr, byval fEnable as WINBOOL) as HRESULT
end type

type IOleInPlaceActiveObject_
 lpVtbl as IOleInPlaceActiveObjectVtbl ptr
end type


declare function IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(byval This as IOleInPlaceActiveObject ptr) as HRESULT
declare sub IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy(byval This as IOleInPlaceActiveObject ptr, byval fActivate as WINBOOL) as HRESULT
declare sub IOleInPlaceActiveObject_OnFrameWindowActivate_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceActiveObject_OnDocWindowActivate_Proxy(byval This as IOleInPlaceActiveObject ptr, byval fActivate as WINBOOL) as HRESULT
declare sub IOleInPlaceActiveObject_OnDocWindowActivate_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(byval This as IOleInPlaceActiveObject ptr, byval prcBorder as LPCRECT, byval riid as const IID const ptr, byval pUIWindow as IOleInPlaceUIWindow ptr, byval fFrameWindow as WINBOOL) as HRESULT
declare sub IOleInPlaceActiveObject_RemoteResizeBorder_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceActiveObject_EnableModeless_Proxy(byval This as IOleInPlaceActiveObject ptr, byval fEnable as WINBOOL) as HRESULT
declare sub IOleInPlaceActiveObject_EnableModeless_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceActiveObject_TranslateAccelerator_Proxy(byval This as IOleInPlaceActiveObject ptr, byval lpmsg as LPMSG) as HRESULT
declare function IOleInPlaceActiveObject_TranslateAccelerator_Stub(byval This as IOleInPlaceActiveObject ptr) as HRESULT
declare function IOleInPlaceActiveObject_ResizeBorder_Proxy(byval This as IOleInPlaceActiveObject ptr, byval prcBorder as LPCRECT, byval pUIWindow as IOleInPlaceUIWindow ptr, byval fFrameWindow as WINBOOL) as HRESULT
declare function IOleInPlaceActiveObject_ResizeBorder_Stub(byval This as IOleInPlaceActiveObject ptr, byval prcBorder as LPCRECT, byval riid as const IID const ptr, byval pUIWindow as IOleInPlaceUIWindow ptr, byval fFrameWindow as WINBOOL) as HRESULT
type IOleInPlaceFrame as IOleInPlaceFrame_
type LPOLEINPLACEFRAME as IOleInPlaceFrame ptr

type tagOIFI
 cb as UINT
 fMDIApp as WINBOOL
 hwndFrame as HWND
 haccel as HACCEL
 cAccelEntries as UINT
end type

type OLEINPLACEFRAMEINFO as tagOIFI
type LPOLEINPLACEFRAMEINFO as tagOIFI ptr

type tagOleMenuGroupWidths
 width(0 to 5) as LONG
end type

type OLEMENUGROUPWIDTHS as tagOleMenuGroupWidths
type LPOLEMENUGROUPWIDTHS as tagOleMenuGroupWidths ptr
type HOLEMENU as HGLOBAL
extern IID_IOleInPlaceFrame as const GUID

type IOleInPlaceFrameVtbl
 QueryInterface as function(byval This as IOleInPlaceFrame ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IOleInPlaceFrame ptr) as ULONG
 Release as function(byval This as IOleInPlaceFrame ptr) as ULONG
 GetWindow as function(byval This as IOleInPlaceFrame ptr, byval phwnd as HWND ptr) as HRESULT
 ContextSensitiveHelp as function(byval This as IOleInPlaceFrame ptr, byval fEnterMode as WINBOOL) as HRESULT
 GetBorder as function(byval This as IOleInPlaceFrame ptr, byval lprectBorder as LPRECT) as HRESULT
 RequestBorderSpace as function(byval This as IOleInPlaceFrame ptr, byval pborderwidths as LPCBORDERWIDTHS) as HRESULT
 SetBorderSpace as function(byval This as IOleInPlaceFrame ptr, byval pborderwidths as LPCBORDERWIDTHS) as HRESULT
 SetActiveObject as function(byval This as IOleInPlaceFrame ptr, byval pActiveObject as IOleInPlaceActiveObject ptr, byval pszObjName as LPCOLESTR) as HRESULT
 InsertMenus as function(byval This as IOleInPlaceFrame ptr, byval hmenuShared as HMENU, byval lpMenuWidths as LPOLEMENUGROUPWIDTHS) as HRESULT
 SetMenu as function(byval This as IOleInPlaceFrame ptr, byval hmenuShared as HMENU, byval holemenu as HOLEMENU, byval hwndActiveObject as HWND) as HRESULT
 RemoveMenus as function(byval This as IOleInPlaceFrame ptr, byval hmenuShared as HMENU) as HRESULT
 SetStatusText as function(byval This as IOleInPlaceFrame ptr, byval pszStatusText as LPCOLESTR) as HRESULT
 EnableModeless as function(byval This as IOleInPlaceFrame ptr, byval fEnable as WINBOOL) as HRESULT
 TranslateAccelerator as function(byval This as IOleInPlaceFrame ptr, byval lpmsg as LPMSG, byval wID as WORD) as HRESULT
end type

type IOleInPlaceFrame_
 lpVtbl as IOleInPlaceFrameVtbl ptr
end type


declare function IOleInPlaceFrame_InsertMenus_Proxy(byval This as IOleInPlaceFrame ptr, byval hmenuShared as HMENU, byval lpMenuWidths as LPOLEMENUGROUPWIDTHS) as HRESULT
declare sub IOleInPlaceFrame_InsertMenus_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceFrame_SetMenu_Proxy(byval This as IOleInPlaceFrame ptr, byval hmenuShared as HMENU, byval holemenu as HOLEMENU, byval hwndActiveObject as HWND) as HRESULT
declare sub IOleInPlaceFrame_SetMenu_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceFrame_RemoveMenus_Proxy(byval This as IOleInPlaceFrame ptr, byval hmenuShared as HMENU) as HRESULT
declare sub IOleInPlaceFrame_RemoveMenus_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceFrame_SetStatusText_Proxy(byval This as IOleInPlaceFrame ptr, byval pszStatusText as LPCOLESTR) as HRESULT
declare sub IOleInPlaceFrame_SetStatusText_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceFrame_EnableModeless_Proxy(byval This as IOleInPlaceFrame ptr, byval fEnable as WINBOOL) as HRESULT
declare sub IOleInPlaceFrame_EnableModeless_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceFrame_TranslateAccelerator_Proxy(byval This as IOleInPlaceFrame ptr, byval lpmsg as LPMSG, byval wID as WORD) as HRESULT
declare sub IOleInPlaceFrame_TranslateAccelerator_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IOleInPlaceObject as IOleInPlaceObject_
type LPOLEINPLACEOBJECT as IOleInPlaceObject ptr
extern IID_IOleInPlaceObject as const GUID

type IOleInPlaceObjectVtbl
 QueryInterface as function(byval This as IOleInPlaceObject ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IOleInPlaceObject ptr) as ULONG
 Release as function(byval This as IOleInPlaceObject ptr) as ULONG
 GetWindow as function(byval This as IOleInPlaceObject ptr, byval phwnd as HWND ptr) as HRESULT
 ContextSensitiveHelp as function(byval This as IOleInPlaceObject ptr, byval fEnterMode as WINBOOL) as HRESULT
 InPlaceDeactivate as function(byval This as IOleInPlaceObject ptr) as HRESULT
 UIDeactivate as function(byval This as IOleInPlaceObject ptr) as HRESULT
 SetObjectRects as function(byval This as IOleInPlaceObject ptr, byval lprcPosRect as LPCRECT, byval lprcClipRect as LPCRECT) as HRESULT
 ReactivateAndUndo as function(byval This as IOleInPlaceObject ptr) as HRESULT
end type

type IOleInPlaceObject_
 lpVtbl as IOleInPlaceObjectVtbl ptr
end type


declare function IOleInPlaceObject_InPlaceDeactivate_Proxy(byval This as IOleInPlaceObject ptr) as HRESULT
declare sub IOleInPlaceObject_InPlaceDeactivate_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceObject_UIDeactivate_Proxy(byval This as IOleInPlaceObject ptr) as HRESULT
declare sub IOleInPlaceObject_UIDeactivate_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceObject_SetObjectRects_Proxy(byval This as IOleInPlaceObject ptr, byval lprcPosRect as LPCRECT, byval lprcClipRect as LPCRECT) as HRESULT
declare sub IOleInPlaceObject_SetObjectRects_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceObject_ReactivateAndUndo_Proxy(byval This as IOleInPlaceObject ptr) as HRESULT
declare sub IOleInPlaceObject_ReactivateAndUndo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IOleInPlaceSite as IOleInPlaceSite_
type LPOLEINPLACESITE as IOleInPlaceSite ptr
extern IID_IOleInPlaceSite as const GUID

type IOleInPlaceSiteVtbl
 QueryInterface as function(byval This as IOleInPlaceSite ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IOleInPlaceSite ptr) as ULONG
 Release as function(byval This as IOleInPlaceSite ptr) as ULONG
 GetWindow as function(byval This as IOleInPlaceSite ptr, byval phwnd as HWND ptr) as HRESULT
 ContextSensitiveHelp as function(byval This as IOleInPlaceSite ptr, byval fEnterMode as WINBOOL) as HRESULT
 CanInPlaceActivate as function(byval This as IOleInPlaceSite ptr) as HRESULT
 OnInPlaceActivate as function(byval This as IOleInPlaceSite ptr) as HRESULT
 OnUIActivate as function(byval This as IOleInPlaceSite ptr) as HRESULT
 GetWindowContext as function(byval This as IOleInPlaceSite ptr, byval ppFrame as IOleInPlaceFrame ptr ptr, byval ppDoc as IOleInPlaceUIWindow ptr ptr, byval lprcPosRect as LPRECT, byval lprcClipRect as LPRECT, byval lpFrameInfo as LPOLEINPLACEFRAMEINFO) as HRESULT
 Scroll as function(byval This as IOleInPlaceSite ptr, byval scrollExtant as SIZE) as HRESULT
 OnUIDeactivate as function(byval This as IOleInPlaceSite ptr, byval fUndoable as WINBOOL) as HRESULT
 OnInPlaceDeactivate as function(byval This as IOleInPlaceSite ptr) as HRESULT
 DiscardUndoState as function(byval This as IOleInPlaceSite ptr) as HRESULT
 DeactivateAndUndo as function(byval This as IOleInPlaceSite ptr) as HRESULT
 OnPosRectChange as function(byval This as IOleInPlaceSite ptr, byval lprcPosRect as LPCRECT) as HRESULT
end type

type IOleInPlaceSite_
 lpVtbl as IOleInPlaceSiteVtbl ptr
end type


declare function IOleInPlaceSite_CanInPlaceActivate_Proxy(byval This as IOleInPlaceSite ptr) as HRESULT
declare sub IOleInPlaceSite_CanInPlaceActivate_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceSite_OnInPlaceActivate_Proxy(byval This as IOleInPlaceSite ptr) as HRESULT
declare sub IOleInPlaceSite_OnInPlaceActivate_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceSite_OnUIActivate_Proxy(byval This as IOleInPlaceSite ptr) as HRESULT
declare sub IOleInPlaceSite_OnUIActivate_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceSite_GetWindowContext_Proxy(byval This as IOleInPlaceSite ptr, byval ppFrame as IOleInPlaceFrame ptr ptr, byval ppDoc as IOleInPlaceUIWindow ptr ptr, byval lprcPosRect as LPRECT, byval lprcClipRect as LPRECT, byval lpFrameInfo as LPOLEINPLACEFRAMEINFO) as HRESULT
declare sub IOleInPlaceSite_GetWindowContext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceSite_Scroll_Proxy(byval This as IOleInPlaceSite ptr, byval scrollExtant as SIZE) as HRESULT
declare sub IOleInPlaceSite_Scroll_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceSite_OnUIDeactivate_Proxy(byval This as IOleInPlaceSite ptr, byval fUndoable as WINBOOL) as HRESULT
declare sub IOleInPlaceSite_OnUIDeactivate_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceSite_OnInPlaceDeactivate_Proxy(byval This as IOleInPlaceSite ptr) as HRESULT
declare sub IOleInPlaceSite_OnInPlaceDeactivate_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceSite_DiscardUndoState_Proxy(byval This as IOleInPlaceSite ptr) as HRESULT
declare sub IOleInPlaceSite_DiscardUndoState_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceSite_DeactivateAndUndo_Proxy(byval This as IOleInPlaceSite ptr) as HRESULT
declare sub IOleInPlaceSite_DeactivateAndUndo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IOleInPlaceSite_OnPosRectChange_Proxy(byval This as IOleInPlaceSite ptr, byval lprcPosRect as LPCRECT) as HRESULT
declare sub IOleInPlaceSite_OnPosRectChange_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IContinue as const GUID
type IContinue as IContinue_

type IContinueVtbl
 QueryInterface as function(byval This as IContinue ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IContinue ptr) as ULONG
 Release as function(byval This as IContinue ptr) as ULONG
 FContinue as function(byval This as IContinue ptr) as HRESULT
end type

type IContinue_
 lpVtbl as IContinueVtbl ptr
end type

declare function IContinue_FContinue_Proxy(byval This as IContinue ptr) as HRESULT
declare sub IContinue_FContinue_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IViewObject as IViewObject_
type LPVIEWOBJECT as IViewObject ptr
extern IID_IViewObject as const GUID

type IViewObjectVtbl
 QueryInterface as function(byval This as IViewObject ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IViewObject ptr) as ULONG
 Release as function(byval This as IViewObject ptr) as ULONG
 Draw as function(byval This as IViewObject ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval pvAspect as any ptr, byval ptd as DVTARGETDEVICE ptr, byval hdcTargetDev as HDC, byval hdcDraw as HDC, byval lprcBounds as LPCRECTL, byval lprcWBounds as LPCRECTL, byval pfnContinue as function(byval dwContinue as ULONG_PTR) as WINBOOL, byval dwContinue as ULONG_PTR) as HRESULT
 GetColorSet as function(byval This as IViewObject ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval pvAspect as any ptr, byval ptd as DVTARGETDEVICE ptr, byval hicTargetDev as HDC, byval ppColorSet as LOGPALETTE ptr ptr) as HRESULT
 Freeze as function(byval This as IViewObject ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval pvAspect as any ptr, byval pdwFreeze as DWORD ptr) as HRESULT
 Unfreeze as function(byval This as IViewObject ptr, byval dwFreeze as DWORD) as HRESULT
 SetAdvise as function(byval This as IViewObject ptr, byval aspects as DWORD, byval advf as DWORD, byval pAdvSink as IAdviseSink ptr) as HRESULT
 GetAdvise as function(byval This as IViewObject ptr, byval pAspects as DWORD ptr, byval pAdvf as DWORD ptr, byval ppAdvSink as IAdviseSink ptr ptr) as HRESULT
end type

type IViewObject_
 lpVtbl as IViewObjectVtbl ptr
end type


declare function IViewObject_RemoteDraw_Proxy(byval This as IViewObject ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval pvAspect as ULONG_PTR, byval ptd as DVTARGETDEVICE ptr, byval hdcTargetDev as HDC, byval hdcDraw as HDC, byval lprcBounds as LPCRECTL, byval lprcWBounds as LPCRECTL, byval pContinue as IContinue ptr) as HRESULT
declare sub IViewObject_RemoteDraw_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IViewObject_RemoteGetColorSet_Proxy(byval This as IViewObject ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval pvAspect as ULONG_PTR, byval ptd as DVTARGETDEVICE ptr, byval hicTargetDev as ULONG_PTR, byval ppColorSet as LOGPALETTE ptr ptr) as HRESULT
declare sub IViewObject_RemoteGetColorSet_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IViewObject_RemoteFreeze_Proxy(byval This as IViewObject ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval pvAspect as ULONG_PTR, byval pdwFreeze as DWORD ptr) as HRESULT
declare sub IViewObject_RemoteFreeze_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IViewObject_Unfreeze_Proxy(byval This as IViewObject ptr, byval dwFreeze as DWORD) as HRESULT
declare sub IViewObject_Unfreeze_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IViewObject_SetAdvise_Proxy(byval This as IViewObject ptr, byval aspects as DWORD, byval advf as DWORD, byval pAdvSink as IAdviseSink ptr) as HRESULT
declare sub IViewObject_SetAdvise_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IViewObject_RemoteGetAdvise_Proxy(byval This as IViewObject ptr, byval pAspects as DWORD ptr, byval pAdvf as DWORD ptr, byval ppAdvSink as IAdviseSink ptr ptr) as HRESULT
declare sub IViewObject_RemoteGetAdvise_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IViewObject_Draw_Proxy(byval This as IViewObject ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval pvAspect as any ptr, byval ptd as DVTARGETDEVICE ptr, byval hdcTargetDev as HDC, byval hdcDraw as HDC, byval lprcBounds as LPCRECTL, byval lprcWBounds as LPCRECTL, byval pfnContinue as function(byval dwContinue as ULONG_PTR) as WINBOOL, byval dwContinue as ULONG_PTR) as HRESULT
declare function IViewObject_Draw_Stub(byval This as IViewObject ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval pvAspect as ULONG_PTR, byval ptd as DVTARGETDEVICE ptr, byval hdcTargetDev as HDC, byval hdcDraw as HDC, byval lprcBounds as LPCRECTL, byval lprcWBounds as LPCRECTL, byval pContinue as IContinue ptr) as HRESULT
declare function IViewObject_GetColorSet_Proxy(byval This as IViewObject ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval pvAspect as any ptr, byval ptd as DVTARGETDEVICE ptr, byval hicTargetDev as HDC, byval ppColorSet as LOGPALETTE ptr ptr) as HRESULT
declare function IViewObject_GetColorSet_Stub(byval This as IViewObject ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval pvAspect as ULONG_PTR, byval ptd as DVTARGETDEVICE ptr, byval hicTargetDev as ULONG_PTR, byval ppColorSet as LOGPALETTE ptr ptr) as HRESULT
declare function IViewObject_Freeze_Proxy(byval This as IViewObject ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval pvAspect as any ptr, byval pdwFreeze as DWORD ptr) as HRESULT
declare function IViewObject_Freeze_Stub(byval This as IViewObject ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval pvAspect as ULONG_PTR, byval pdwFreeze as DWORD ptr) as HRESULT
declare function IViewObject_GetAdvise_Proxy(byval This as IViewObject ptr, byval pAspects as DWORD ptr, byval pAdvf as DWORD ptr, byval ppAdvSink as IAdviseSink ptr ptr) as HRESULT
declare function IViewObject_GetAdvise_Stub(byval This as IViewObject ptr, byval pAspects as DWORD ptr, byval pAdvf as DWORD ptr, byval ppAdvSink as IAdviseSink ptr ptr) as HRESULT
type IViewObject2 as IViewObject2_
type LPVIEWOBJECT2 as IViewObject2 ptr
extern IID_IViewObject2 as const GUID

type IViewObject2Vtbl
 QueryInterface as function(byval This as IViewObject2 ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IViewObject2 ptr) as ULONG
 Release as function(byval This as IViewObject2 ptr) as ULONG
 Draw as function(byval This as IViewObject2 ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval pvAspect as any ptr, byval ptd as DVTARGETDEVICE ptr, byval hdcTargetDev as HDC, byval hdcDraw as HDC, byval lprcBounds as LPCRECTL, byval lprcWBounds as LPCRECTL, byval pfnContinue as function(byval dwContinue as ULONG_PTR) as WINBOOL, byval dwContinue as ULONG_PTR) as HRESULT
 GetColorSet as function(byval This as IViewObject2 ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval pvAspect as any ptr, byval ptd as DVTARGETDEVICE ptr, byval hicTargetDev as HDC, byval ppColorSet as LOGPALETTE ptr ptr) as HRESULT
 Freeze as function(byval This as IViewObject2 ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval pvAspect as any ptr, byval pdwFreeze as DWORD ptr) as HRESULT
 Unfreeze as function(byval This as IViewObject2 ptr, byval dwFreeze as DWORD) as HRESULT
 SetAdvise as function(byval This as IViewObject2 ptr, byval aspects as DWORD, byval advf as DWORD, byval pAdvSink as IAdviseSink ptr) as HRESULT
 GetAdvise as function(byval This as IViewObject2 ptr, byval pAspects as DWORD ptr, byval pAdvf as DWORD ptr, byval ppAdvSink as IAdviseSink ptr ptr) as HRESULT
 GetExtent as function(byval This as IViewObject2 ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval ptd as DVTARGETDEVICE ptr, byval lpsizel as LPSIZEL) as HRESULT
end type

type IViewObject2_
 lpVtbl as IViewObject2Vtbl ptr
end type

declare function IViewObject2_GetExtent_Proxy(byval This as IViewObject2 ptr, byval dwDrawAspect as DWORD, byval lindex as LONG, byval ptd as DVTARGETDEVICE ptr, byval lpsizel as LPSIZEL) as HRESULT
declare sub IViewObject2_GetExtent_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IDropSource as IDropSource_
type LPDROPSOURCE as IDropSource ptr
extern IID_IDropSource as const GUID

type IDropSourceVtbl
 QueryInterface as function(byval This as IDropSource ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IDropSource ptr) as ULONG
 Release as function(byval This as IDropSource ptr) as ULONG
 QueryContinueDrag as function(byval This as IDropSource ptr, byval fEscapePressed as WINBOOL, byval grfKeyState as DWORD) as HRESULT
 GiveFeedback as function(byval This as IDropSource ptr, byval dwEffect as DWORD) as HRESULT
end type

type IDropSource_
 lpVtbl as IDropSourceVtbl ptr
end type


declare function IDropSource_QueryContinueDrag_Proxy(byval This as IDropSource ptr, byval fEscapePressed as WINBOOL, byval grfKeyState as DWORD) as HRESULT
declare sub IDropSource_QueryContinueDrag_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDropSource_GiveFeedback_Proxy(byval This as IDropSource ptr, byval dwEffect as DWORD) as HRESULT
declare sub IDropSource_GiveFeedback_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IDropTarget as IDropTarget_
type LPDROPTARGET as IDropTarget ptr

const MK_ALT = &h20
const DROPEFFECT_NONE = 0
const DROPEFFECT_COPY = 1
const DROPEFFECT_MOVE = 2
const DROPEFFECT_LINK = 4
const DROPEFFECT_SCROLL = &h80000000
const DD_DEFSCROLLINSET = 11
const DD_DEFSCROLLDELAY = 50
const DD_DEFSCROLLINTERVAL = 50
const DD_DEFDRAGDELAY = 200
const DD_DEFDRAGMINDIST = 2
extern IID_IDropTarget as const GUID

type IDropTargetVtbl
 QueryInterface as function(byval This as IDropTarget ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IDropTarget ptr) as ULONG
 Release as function(byval This as IDropTarget ptr) as ULONG
 DragEnter as function(byval This as IDropTarget ptr, byval pDataObj as IDataObject ptr, byval grfKeyState as DWORD, byval pt as POINTL, byval pdwEffect as DWORD ptr) as HRESULT
 DragOver as function(byval This as IDropTarget ptr, byval grfKeyState as DWORD, byval pt as POINTL, byval pdwEffect as DWORD ptr) as HRESULT
 DragLeave as function(byval This as IDropTarget ptr) as HRESULT
 Drop as function(byval This as IDropTarget ptr, byval pDataObj as IDataObject ptr, byval grfKeyState as DWORD, byval pt as POINTL, byval pdwEffect as DWORD ptr) as HRESULT
end type

type IDropTarget_
 lpVtbl as IDropTargetVtbl ptr
end type


declare function IDropTarget_DragEnter_Proxy(byval This as IDropTarget ptr, byval pDataObj as IDataObject ptr, byval grfKeyState as DWORD, byval pt as POINTL, byval pdwEffect as DWORD ptr) as HRESULT
declare sub IDropTarget_DragEnter_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDropTarget_DragOver_Proxy(byval This as IDropTarget ptr, byval grfKeyState as DWORD, byval pt as POINTL, byval pdwEffect as DWORD ptr) as HRESULT
declare sub IDropTarget_DragOver_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDropTarget_DragLeave_Proxy(byval This as IDropTarget ptr) as HRESULT
declare sub IDropTarget_DragLeave_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDropTarget_Drop_Proxy(byval This as IDropTarget ptr, byval pDataObj as IDataObject ptr, byval grfKeyState as DWORD, byval pt as POINTL, byval pdwEffect as DWORD ptr) as HRESULT
declare sub IDropTarget_Drop_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_IDropSourceNotify as const GUID
type IDropSourceNotify as IDropSourceNotify_

type IDropSourceNotifyVtbl
 QueryInterface as function(byval This as IDropSourceNotify ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IDropSourceNotify ptr) as ULONG
 Release as function(byval This as IDropSourceNotify ptr) as ULONG
 DragEnterTarget as function(byval This as IDropSourceNotify ptr, byval hwndTarget as HWND) as HRESULT
 DragLeaveTarget as function(byval This as IDropSourceNotify ptr) as HRESULT
end type

type IDropSourceNotify_
 lpVtbl as IDropSourceNotifyVtbl ptr
end type


declare function IDropSourceNotify_DragEnterTarget_Proxy(byval This as IDropSourceNotify ptr, byval hwndTarget as HWND) as HRESULT
declare sub IDropSourceNotify_DragEnterTarget_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDropSourceNotify_DragLeaveTarget_Proxy(byval This as IDropSourceNotify ptr) as HRESULT
declare sub IDropSourceNotify_DragLeaveTarget_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type LPENUMOLEVERB as IEnumOLEVERB ptr

type tagOLEVERB
 lVerb as LONG
 lpszVerbName as LPOLESTR
 fuFlags as DWORD
 grfAttribs as DWORD
end type

type OLEVERB as tagOLEVERB
type LPOLEVERB as tagOLEVERB ptr

type tagOLEVERBATTRIB as long
enum
 OLEVERBATTRIB_NEVERDIRTIES = 1
 OLEVERBATTRIB_ONCONTAINERMENU = 2
end enum

type OLEVERBATTRIB as tagOLEVERBATTRIB
extern IID_IEnumOLEVERB as const GUID

type IEnumOLEVERBVtbl
 QueryInterface as function(byval This as IEnumOLEVERB ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IEnumOLEVERB ptr) as ULONG
 Release as function(byval This as IEnumOLEVERB ptr) as ULONG
 Next as function(byval This as IEnumOLEVERB ptr, byval celt as ULONG, byval rgelt as LPOLEVERB, byval pceltFetched as ULONG ptr) as HRESULT
 Skip as function(byval This as IEnumOLEVERB ptr, byval celt as ULONG) as HRESULT
 Reset as function(byval This as IEnumOLEVERB ptr) as HRESULT
 Clone as function(byval This as IEnumOLEVERB ptr, byval ppenum as IEnumOLEVERB ptr ptr) as HRESULT
end type

type IEnumOLEVERB_
 lpVtbl as IEnumOLEVERBVtbl ptr
end type


declare function IEnumOLEVERB_RemoteNext_Proxy(byval This as IEnumOLEVERB ptr, byval celt as ULONG, byval rgelt as LPOLEVERB, byval pceltFetched as ULONG ptr) as HRESULT
declare sub IEnumOLEVERB_RemoteNext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumOLEVERB_Skip_Proxy(byval This as IEnumOLEVERB ptr, byval celt as ULONG) as HRESULT
declare sub IEnumOLEVERB_Skip_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumOLEVERB_Reset_Proxy(byval This as IEnumOLEVERB ptr) as HRESULT
declare sub IEnumOLEVERB_Reset_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumOLEVERB_Clone_Proxy(byval This as IEnumOLEVERB ptr, byval ppenum as IEnumOLEVERB ptr ptr) as HRESULT
declare sub IEnumOLEVERB_Clone_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumOLEVERB_Next_Proxy(byval This as IEnumOLEVERB ptr, byval celt as ULONG, byval rgelt as LPOLEVERB, byval pceltFetched as ULONG ptr) as HRESULT
declare function IEnumOLEVERB_Next_Stub(byval This as IEnumOLEVERB ptr, byval celt as ULONG, byval rgelt as LPOLEVERB, byval pceltFetched as ULONG ptr) as HRESULT

end extern




extern "Windows"

type IServiceProvider as IServiceProvider_
type LPSERVICEPROVIDER as IServiceProvider ptr
extern IID_IServiceProvider as const GUID

type IServiceProviderVtbl
 QueryInterface as function(byval This as IServiceProvider ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IServiceProvider ptr) as ULONG
 Release as function(byval This as IServiceProvider ptr) as ULONG
 QueryService as function(byval This as IServiceProvider ptr, byval guidService as const GUID const ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
end type

type IServiceProvider_
 lpVtbl as IServiceProviderVtbl ptr
end type


declare function IServiceProvider_RemoteQueryService_Proxy(byval This as IServiceProvider ptr, byval guidService as const GUID const ptr, byval riid as const IID const ptr, byval ppvObject as IUnknown ptr ptr) as HRESULT
declare sub IServiceProvider_RemoteQueryService_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IServiceProvider_QueryService_Proxy(byval This as IServiceProvider ptr, byval guidService as const GUID const ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
declare function IServiceProvider_QueryService_Stub(byval This as IServiceProvider ptr, byval guidService as const GUID const ptr, byval riid as const IID const ptr, byval ppvObject as IUnknown ptr ptr) as HRESULT

end extern




#inclib "uuid"


extern "Windows"

extern IOleAutomationTypes_v1_0_c_ifspec as RPC_IF_HANDLE
extern IOleAutomationTypes_v1_0_s_ifspec as RPC_IF_HANDLE
type CURRENCY as CY

type tagSAFEARRAYBOUND
 cElements as ULONG
 lLbound as LONG
end type

type SAFEARRAYBOUND as tagSAFEARRAYBOUND
type LPSAFEARRAYBOUND as tagSAFEARRAYBOUND ptr
type wireVARIANT as _wireVARIANT ptr
type wireBRECORD as _wireBRECORD ptr

type _wireSAFEARR_BSTR
 Size as ULONG
 aBstr as wireBSTR ptr
end type

type SAFEARR_BSTR as _wireSAFEARR_BSTR

type _wireSAFEARR_UNKNOWN
 Size as ULONG
 apUnknown as IUnknown ptr ptr
end type

type SAFEARR_UNKNOWN as _wireSAFEARR_UNKNOWN
type IDispatch as IDispatch_

type _wireSAFEARR_DISPATCH
 Size as ULONG
 apDispatch as IDispatch ptr ptr
end type

type SAFEARR_DISPATCH as _wireSAFEARR_DISPATCH

type _wireSAFEARR_VARIANT
 Size as ULONG
 aVariant as wireVARIANT ptr
end type

type SAFEARR_VARIANT as _wireSAFEARR_VARIANT

type _wireSAFEARR_BRECORD
 Size as ULONG
 aRecord as wireBRECORD ptr
end type

type SAFEARR_BRECORD as _wireSAFEARR_BRECORD

type _wireSAFEARR_HAVEIID
 Size as ULONG
 apUnknown as IUnknown ptr ptr
 iid as IID
end type

type SAFEARR_HAVEIID as _wireSAFEARR_HAVEIID

type tagSF_TYPE as long
enum
 SF_ERROR = VT_ERROR
 SF_I1 = VT_I1
 SF_I2 = VT_I2
 SF_I4 = VT_I4
 SF_I8 = VT_I8
 SF_BSTR = VT_BSTR
 SF_UNKNOWN = VT_UNKNOWN
 SF_DISPATCH = VT_DISPATCH
 SF_VARIANT = VT_VARIANT
 SF_RECORD = VT_RECORD
 SF_HAVEIID = VT_UNKNOWN or VT_RESERVED
end enum

type SF_TYPE as tagSF_TYPE

union _wireSAFEARRAY_UNION_u
 BstrStr as SAFEARR_BSTR
 UnknownStr as SAFEARR_UNKNOWN
 DispatchStr as SAFEARR_DISPATCH
 VariantStr as SAFEARR_VARIANT
 RecordStr as SAFEARR_BRECORD
 HaveIidStr as SAFEARR_HAVEIID
 ByteStr as BYTE_SIZEDARR
 WordStr as WORD_SIZEDARR
 LongStr as DWORD_SIZEDARR
 HyperStr as HYPER_SIZEDARR
end union

type _wireSAFEARRAY_UNION
 sfType as ULONG
 u as _wireSAFEARRAY_UNION_u
end type

type SAFEARRAYUNION as _wireSAFEARRAY_UNION

type _wireSAFEARRAY
 cDims as USHORT
 fFeatures as USHORT
 cbElements as ULONG
 cLocks as ULONG
 uArrayStructs as SAFEARRAYUNION
 rgsabound(0 to 0) as SAFEARRAYBOUND
end type

type wireSAFEARRAY as _wireSAFEARRAY ptr
type wirePSAFEARRAY as wireSAFEARRAY ptr

type tagSAFEARRAY
 cDims as USHORT
 fFeatures as USHORT
 cbElements as ULONG
 cLocks as ULONG
 pvData as PVOID
 rgsabound(0 to 0) as SAFEARRAYBOUND
end type

type SAFEARRAY as tagSAFEARRAY
type LPSAFEARRAY as SAFEARRAY ptr
const FADF_AUTO = &h1
const FADF_STATIC = &h2
const FADF_EMBEDDED = &h4
const FADF_FIXEDSIZE = &h10
const FADF_RECORD = &h20
const FADF_HAVEIID = &h40
const FADF_HAVEVARTYPE = &h80
const FADF_BSTR = &h100
const FADF_UNKNOWN = &h200
const FADF_DISPATCH = &h400
const FADF_VARIANT = &h800
const FADF_RESERVED = &hf008
const _FORCENAMELESSUNION = 1
type IRecordInfo as IRecordInfo_

type tagVARIANT
 union
 type
 vt as VARTYPE
 wReserved1 as WORD
 wReserved2 as WORD
 wReserved3 as WORD

 union
 llVal as LONGLONG
 lVal as LONG
 bVal as UBYTE
 iVal as SHORT
 fltVal as FLOAT
 dblVal as DOUBLE
 boolVal as VARIANT_BOOL
 scode as SCODE
 cyVal as CY
 date as DATE_
 bstrVal as BSTR
 punkVal as IUnknown ptr
 pdispVal as IDispatch ptr
 parray as SAFEARRAY ptr
 pbVal as UBYTE ptr
 piVal as SHORT ptr
 plVal as LONG ptr
 pllVal as LONGLONG ptr
 pfltVal as FLOAT ptr
 pdblVal as DOUBLE ptr
 pboolVal as VARIANT_BOOL ptr
 pscode as SCODE ptr
 pcyVal as CY ptr
 pdate as DATE_ ptr
 pbstrVal as BSTR ptr
 ppunkVal as IUnknown ptr ptr
 ppdispVal as IDispatch ptr ptr
 pparray as SAFEARRAY ptr ptr
 pvarVal as VARIANT ptr
 byref as PVOID
 cVal as CHAR
 uiVal as USHORT
 ulVal as ULONG
 ullVal as ULONGLONG
 intVal as INT_
 uintVal as UINT
 pdecVal as DECIMAL ptr
 pcVal as CHAR ptr
 puiVal as USHORT ptr
 pulVal as ULONG ptr
 pullVal as ULONGLONG ptr
 pintVal as INT_ ptr
 puintVal as UINT ptr

 type
 pvRecord as PVOID
 pRecInfo as IRecordInfo ptr
 end type
 end union
 end type

 decVal as DECIMAL
 end union
end type

type LPVARIANT as VARIANT ptr
type VARIANTARG as VARIANT
type LPVARIANTARG as VARIANT ptr
type REFVARIANT as const VARIANT const ptr

type _wireBRECORD
 fFlags as ULONG
 clSize as ULONG
 pRecInfo as IRecordInfo ptr
 pRecord as ubyte ptr
end type

type _wireVARIANT
 clSize as DWORD
 rpcReserved as DWORD
 vt as USHORT
 wReserved1 as USHORT
 wReserved2 as USHORT
 wReserved3 as USHORT

 union
 llVal as LONGLONG
 lVal as LONG
 bVal as UBYTE
 iVal as SHORT
 fltVal as FLOAT
 dblVal as DOUBLE
 boolVal as VARIANT_BOOL
 scode as SCODE
 cyVal as CY
 date as DATE_
 bstrVal as wireBSTR
 punkVal as IUnknown ptr
 pdispVal as IDispatch ptr
 parray as wirePSAFEARRAY
 brecVal as wireBRECORD
 pbVal as UBYTE ptr
 piVal as SHORT ptr
 plVal as LONG ptr
 pllVal as LONGLONG ptr
 pfltVal as FLOAT ptr
 pdblVal as DOUBLE ptr
 pboolVal as VARIANT_BOOL ptr
 pscode as SCODE ptr
 pcyVal as CY ptr
 pdate as DATE_ ptr
 pbstrVal as wireBSTR ptr
 ppunkVal as IUnknown ptr ptr
 ppdispVal as IDispatch ptr ptr
 pparray as wirePSAFEARRAY ptr
 pvarVal as wireVARIANT ptr
 cVal as CHAR
 uiVal as USHORT
 ulVal as ULONG
 ullVal as ULONGLONG
 intVal as INT_
 uintVal as UINT
 decVal as DECIMAL
 pdecVal as DECIMAL ptr
 pcVal as CHAR ptr
 puiVal as USHORT ptr
 pulVal as ULONG ptr
 pullVal as ULONGLONG ptr
 pintVal as INT_ ptr
 puintVal as UINT ptr
 end union
end type

type DISPID as LONG
type MEMBERID as DISPID
type HREFTYPE as DWORD

type tagTYPEKIND as long
enum
 TKIND_ENUM = 0
 TKIND_RECORD = 1
 TKIND_MODULE = 2
 TKIND_INTERFACE = 3
 TKIND_DISPATCH = 4
 TKIND_COCLASS = 5
 TKIND_ALIAS = 6
 TKIND_UNION = 7
 TKIND_MAX = 8
end enum

type TYPEKIND as tagTYPEKIND
type tagARRAYDESC as tagARRAYDESC_

type tagTYPEDESC
 union
 lptdesc as tagTYPEDESC ptr
 lpadesc as tagARRAYDESC ptr
 hreftype as HREFTYPE
 end union

 vt as VARTYPE
end type

type TYPEDESC as tagTYPEDESC

type tagARRAYDESC_
 tdescElem as TYPEDESC
 cDims as USHORT
 rgbounds(0 to 0) as SAFEARRAYBOUND
end type

type ARRAYDESC as tagARRAYDESC

type tagPARAMDESCEX
 cBytes as ULONG
 varDefaultValue as VARIANTARG
end type

type PARAMDESCEX as tagPARAMDESCEX
type LPPARAMDESCEX as tagPARAMDESCEX ptr

type tagPARAMDESC
 pparamdescex as LPPARAMDESCEX
 wParamFlags as USHORT
end type

type PARAMDESC as tagPARAMDESC
type LPPARAMDESC as tagPARAMDESC ptr
const PARAMFLAG_NONE = &h00
const PARAMFLAG_FIN = &h1
const PARAMFLAG_FOUT = &h2
const PARAMFLAG_FLCID = &h4
const PARAMFLAG_FRETVAL = &h8
const PARAMFLAG_FOPT = &h10
const PARAMFLAG_FHASDEFAULT = &h20
const PARAMFLAG_FHASCUSTDATA = &h40

type tagIDLDESC
 dwReserved as ULONG_PTR
 wIDLFlags as USHORT
end type

type IDLDESC as tagIDLDESC
type LPIDLDESC as tagIDLDESC ptr
const IDLFLAG_NONE = PARAMFLAG_NONE
const IDLFLAG_FIN = PARAMFLAG_FIN
const IDLFLAG_FOUT = PARAMFLAG_FOUT
const IDLFLAG_FLCID = PARAMFLAG_FLCID
const IDLFLAG_FRETVAL = PARAMFLAG_FRETVAL

type tagELEMDESC
 tdesc as TYPEDESC

 union
 idldesc as IDLDESC
 paramdesc as PARAMDESC
 end union
end type

type ELEMDESC as tagELEMDESC
type LPELEMDESC as tagELEMDESC ptr

type tagTYPEATTR
 guid as GUID
 lcid as LCID
 dwReserved as DWORD
 memidConstructor as MEMBERID
 memidDestructor as MEMBERID
 lpstrSchema as LPOLESTR
 cbSizeInstance as ULONG
 typekind as TYPEKIND
 cFuncs as WORD
 cVars as WORD
 cImplTypes as WORD
 cbSizeVft as WORD
 cbAlignment as WORD
 wTypeFlags as WORD
 wMajorVerNum as WORD
 wMinorVerNum as WORD
 tdescAlias as TYPEDESC
 idldescType as IDLDESC
end type

type TYPEATTR as tagTYPEATTR
type LPTYPEATTR as tagTYPEATTR ptr

type tagDISPPARAMS
 rgvarg as VARIANTARG ptr
 rgdispidNamedArgs as DISPID ptr
 cArgs as UINT
 cNamedArgs as UINT
end type

type DISPPARAMS as tagDISPPARAMS

type tagEXCEPINFO
 wCode as WORD
 wReserved as WORD
 bstrSource as BSTR
 bstrDescription as BSTR
 bstrHelpFile as BSTR
 dwHelpContext as DWORD
 pvReserved as PVOID
 pfnDeferredFillIn as function(byval as tagEXCEPINFO ptr) as HRESULT
 scode as SCODE
end type

type EXCEPINFO as tagEXCEPINFO
type LPEXCEPINFO as tagEXCEPINFO ptr

type tagCALLCONV as long
enum
 CC_FASTCALL = 0
 CC_CDECL = 1
 CC_MSCPASCAL = 2
 CC_PASCAL = CC_MSCPASCAL
 CC_MACPASCAL = 3
 CC_STDCALL = 4
 CC_FPFASTCALL = 5
 CC_SYSCALL = 6
 CC_MPWCDECL = 7
 CC_MPWPASCAL = 8
 CC_MAX = 9
end enum

type CALLCONV as tagCALLCONV

type tagFUNCKIND as long
enum
 FUNC_VIRTUAL = 0
 FUNC_PUREVIRTUAL = 1
 FUNC_NONVIRTUAL = 2
 FUNC_STATIC = 3
 FUNC_DISPATCH = 4
end enum

type FUNCKIND as tagFUNCKIND

type tagINVOKEKIND as long
enum
 INVOKE_FUNC = 1
 INVOKE_PROPERTYGET = 2
 INVOKE_PROPERTYPUT = 4
 INVOKE_PROPERTYPUTREF = 8
end enum

type INVOKEKIND as tagINVOKEKIND

type tagFUNCDESC
 memid as MEMBERID
 lprgscode as SCODE ptr
 lprgelemdescParam as ELEMDESC ptr
 funckind as FUNCKIND
 invkind as INVOKEKIND
 callconv as CALLCONV
 cParams as SHORT
 cParamsOpt as SHORT
 oVft as SHORT
 cScodes as SHORT
 elemdescFunc as ELEMDESC
 wFuncFlags as WORD
end type

type FUNCDESC as tagFUNCDESC
type LPFUNCDESC as tagFUNCDESC ptr

type tagVARKIND as long
enum
 VAR_PERINSTANCE = 0
 VAR_STATIC = 1
 VAR_CONST = 2
 VAR_DISPATCH = 3
end enum

type VARKIND as tagVARKIND
const IMPLTYPEFLAG_FDEFAULT = &h1
const IMPLTYPEFLAG_FSOURCE = &h2
const IMPLTYPEFLAG_FRESTRICTED = &h4
const IMPLTYPEFLAG_FDEFAULTVTABLE = &h8

type tagVARDESC
 memid as MEMBERID
 lpstrSchema as LPOLESTR

 union
 oInst as ULONG
 lpvarValue as VARIANT ptr
 end union

 elemdescVar as ELEMDESC
 wVarFlags as WORD
 varkind as VARKIND
end type

type VARDESC as tagVARDESC
type LPVARDESC as tagVARDESC ptr

type tagTYPEFLAGS as long
enum
 TYPEFLAG_FAPPOBJECT = &h1
 TYPEFLAG_FCANCREATE = &h2
 TYPEFLAG_FLICENSED = &h4
 TYPEFLAG_FPREDECLID = &h8
 TYPEFLAG_FHIDDEN = &h10
 TYPEFLAG_FCONTROL = &h20
 TYPEFLAG_FDUAL = &h40
 TYPEFLAG_FNONEXTENSIBLE = &h80
 TYPEFLAG_FOLEAUTOMATION = &h100
 TYPEFLAG_FRESTRICTED = &h200
 TYPEFLAG_FAGGREGATABLE = &h400
 TYPEFLAG_FREPLACEABLE = &h800
 TYPEFLAG_FDISPATCHABLE = &h1000
 TYPEFLAG_FREVERSEBIND = &h2000
 TYPEFLAG_FPROXY = &h4000
end enum

type TYPEFLAGS as tagTYPEFLAGS

type tagFUNCFLAGS as long
enum
 FUNCFLAG_FRESTRICTED = &h1
 FUNCFLAG_FSOURCE = &h2
 FUNCFLAG_FBINDABLE = &h4
 FUNCFLAG_FREQUESTEDIT = &h8
 FUNCFLAG_FDISPLAYBIND = &h10
 FUNCFLAG_FDEFAULTBIND = &h20
 FUNCFLAG_FHIDDEN = &h40
 FUNCFLAG_FUSESGETLASTERROR = &h80
 FUNCFLAG_FDEFAULTCOLLELEM = &h100
 FUNCFLAG_FUIDEFAULT = &h200
 FUNCFLAG_FNONBROWSABLE = &h400
 FUNCFLAG_FREPLACEABLE = &h800
 FUNCFLAG_FIMMEDIATEBIND = &h1000
end enum

type FUNCFLAGS as tagFUNCFLAGS

type tagVARFLAGS as long
enum
 VARFLAG_FREADONLY = &h1
 VARFLAG_FSOURCE = &h2
 VARFLAG_FBINDABLE = &h4
 VARFLAG_FREQUESTEDIT = &h8
 VARFLAG_FDISPLAYBIND = &h10
 VARFLAG_FDEFAULTBIND = &h20
 VARFLAG_FHIDDEN = &h40
 VARFLAG_FRESTRICTED = &h80
 VARFLAG_FDEFAULTCOLLELEM = &h100
 VARFLAG_FUIDEFAULT = &h200
 VARFLAG_FNONBROWSABLE = &h400
 VARFLAG_FREPLACEABLE = &h800
 VARFLAG_FIMMEDIATEBIND = &h1000
end enum

type VARFLAGS as tagVARFLAGS

type tagCLEANLOCALSTORAGE
 pInterface as IUnknown ptr
 pStorage as PVOID
 flags as DWORD
end type

type CLEANLOCALSTORAGE as tagCLEANLOCALSTORAGE

type tagCUSTDATAITEM
 guid as GUID
 varValue as VARIANTARG
end type

type CUSTDATAITEM as tagCUSTDATAITEM
type LPCUSTDATAITEM as tagCUSTDATAITEM ptr

type tagCUSTDATA
 cCustData as DWORD
 prgCustData as LPCUSTDATAITEM
end type

type CUSTDATA as tagCUSTDATA
type LPCUSTDATA as tagCUSTDATA ptr
type ICreateTypeInfo as ICreateTypeInfo_
type LPCREATETYPEINFO as ICreateTypeInfo ptr
extern IID_ICreateTypeInfo as const GUID
type ITypeInfo as ITypeInfo_

type ICreateTypeInfoVtbl
 QueryInterface as function(byval This as ICreateTypeInfo ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ICreateTypeInfo ptr) as ULONG
 Release as function(byval This as ICreateTypeInfo ptr) as ULONG
 SetGuid as function(byval This as ICreateTypeInfo ptr, byval guid as const GUID const ptr) as HRESULT
 SetTypeFlags as function(byval This as ICreateTypeInfo ptr, byval uTypeFlags as UINT) as HRESULT
 SetDocString as function(byval This as ICreateTypeInfo ptr, byval pStrDoc as LPOLESTR) as HRESULT
 SetHelpContext as function(byval This as ICreateTypeInfo ptr, byval dwHelpContext as DWORD) as HRESULT
 SetVersion as function(byval This as ICreateTypeInfo ptr, byval wMajorVerNum as WORD, byval wMinorVerNum as WORD) as HRESULT
 AddRefTypeInfo as function(byval This as ICreateTypeInfo ptr, byval pTInfo as ITypeInfo ptr, byval phRefType as HREFTYPE ptr) as HRESULT
 AddFuncDesc as function(byval This as ICreateTypeInfo ptr, byval index as UINT, byval pFuncDesc as FUNCDESC ptr) as HRESULT
 AddImplType as function(byval This as ICreateTypeInfo ptr, byval index as UINT, byval hRefType as HREFTYPE) as HRESULT
 SetImplTypeFlags as function(byval This as ICreateTypeInfo ptr, byval index as UINT, byval implTypeFlags as INT_) as HRESULT
 SetAlignment as function(byval This as ICreateTypeInfo ptr, byval cbAlignment as WORD) as HRESULT
 SetSchema as function(byval This as ICreateTypeInfo ptr, byval pStrSchema as LPOLESTR) as HRESULT
 AddVarDesc as function(byval This as ICreateTypeInfo ptr, byval index as UINT, byval pVarDesc as VARDESC ptr) as HRESULT
 SetFuncAndParamNames as function(byval This as ICreateTypeInfo ptr, byval index as UINT, byval rgszNames as LPOLESTR ptr, byval cNames as UINT) as HRESULT
 SetVarName as function(byval This as ICreateTypeInfo ptr, byval index as UINT, byval szName as LPOLESTR) as HRESULT
 SetTypeDescAlias as function(byval This as ICreateTypeInfo ptr, byval pTDescAlias as TYPEDESC ptr) as HRESULT
 DefineFuncAsDllEntry as function(byval This as ICreateTypeInfo ptr, byval index as UINT, byval szDllName as LPOLESTR, byval szProcName as LPOLESTR) as HRESULT
 SetFuncDocString as function(byval This as ICreateTypeInfo ptr, byval index as UINT, byval szDocString as LPOLESTR) as HRESULT
 SetVarDocString as function(byval This as ICreateTypeInfo ptr, byval index as UINT, byval szDocString as LPOLESTR) as HRESULT
 SetFuncHelpContext as function(byval This as ICreateTypeInfo ptr, byval index as UINT, byval dwHelpContext as DWORD) as HRESULT
 SetVarHelpContext as function(byval This as ICreateTypeInfo ptr, byval index as UINT, byval dwHelpContext as DWORD) as HRESULT
 SetMops as function(byval This as ICreateTypeInfo ptr, byval index as UINT, byval bstrMops as BSTR) as HRESULT
 SetTypeIdldesc as function(byval This as ICreateTypeInfo ptr, byval pIdlDesc as IDLDESC ptr) as HRESULT
 LayOut as function(byval This as ICreateTypeInfo ptr) as HRESULT
end type

type ICreateTypeInfo_
 lpVtbl as ICreateTypeInfoVtbl ptr
end type


declare function ICreateTypeInfo_SetGuid_Proxy(byval This as ICreateTypeInfo ptr, byval guid as const GUID const ptr) as HRESULT
declare sub ICreateTypeInfo_SetGuid_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_SetTypeFlags_Proxy(byval This as ICreateTypeInfo ptr, byval uTypeFlags as UINT) as HRESULT
declare sub ICreateTypeInfo_SetTypeFlags_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_SetDocString_Proxy(byval This as ICreateTypeInfo ptr, byval pStrDoc as LPOLESTR) as HRESULT
declare sub ICreateTypeInfo_SetDocString_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_SetHelpContext_Proxy(byval This as ICreateTypeInfo ptr, byval dwHelpContext as DWORD) as HRESULT
declare sub ICreateTypeInfo_SetHelpContext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_SetVersion_Proxy(byval This as ICreateTypeInfo ptr, byval wMajorVerNum as WORD, byval wMinorVerNum as WORD) as HRESULT
declare sub ICreateTypeInfo_SetVersion_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_AddRefTypeInfo_Proxy(byval This as ICreateTypeInfo ptr, byval pTInfo as ITypeInfo ptr, byval phRefType as HREFTYPE ptr) as HRESULT
declare sub ICreateTypeInfo_AddRefTypeInfo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_AddFuncDesc_Proxy(byval This as ICreateTypeInfo ptr, byval index as UINT, byval pFuncDesc as FUNCDESC ptr) as HRESULT
declare sub ICreateTypeInfo_AddFuncDesc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_AddImplType_Proxy(byval This as ICreateTypeInfo ptr, byval index as UINT, byval hRefType as HREFTYPE) as HRESULT
declare sub ICreateTypeInfo_AddImplType_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_SetImplTypeFlags_Proxy(byval This as ICreateTypeInfo ptr, byval index as UINT, byval implTypeFlags as INT_) as HRESULT
declare sub ICreateTypeInfo_SetImplTypeFlags_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_SetAlignment_Proxy(byval This as ICreateTypeInfo ptr, byval cbAlignment as WORD) as HRESULT
declare sub ICreateTypeInfo_SetAlignment_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_SetSchema_Proxy(byval This as ICreateTypeInfo ptr, byval pStrSchema as LPOLESTR) as HRESULT
declare sub ICreateTypeInfo_SetSchema_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_AddVarDesc_Proxy(byval This as ICreateTypeInfo ptr, byval index as UINT, byval pVarDesc as VARDESC ptr) as HRESULT
declare sub ICreateTypeInfo_AddVarDesc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_SetFuncAndParamNames_Proxy(byval This as ICreateTypeInfo ptr, byval index as UINT, byval rgszNames as LPOLESTR ptr, byval cNames as UINT) as HRESULT
declare sub ICreateTypeInfo_SetFuncAndParamNames_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_SetVarName_Proxy(byval This as ICreateTypeInfo ptr, byval index as UINT, byval szName as LPOLESTR) as HRESULT
declare sub ICreateTypeInfo_SetVarName_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_SetTypeDescAlias_Proxy(byval This as ICreateTypeInfo ptr, byval pTDescAlias as TYPEDESC ptr) as HRESULT
declare sub ICreateTypeInfo_SetTypeDescAlias_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_DefineFuncAsDllEntry_Proxy(byval This as ICreateTypeInfo ptr, byval index as UINT, byval szDllName as LPOLESTR, byval szProcName as LPOLESTR) as HRESULT
declare sub ICreateTypeInfo_DefineFuncAsDllEntry_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_SetFuncDocString_Proxy(byval This as ICreateTypeInfo ptr, byval index as UINT, byval szDocString as LPOLESTR) as HRESULT
declare sub ICreateTypeInfo_SetFuncDocString_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_SetVarDocString_Proxy(byval This as ICreateTypeInfo ptr, byval index as UINT, byval szDocString as LPOLESTR) as HRESULT
declare sub ICreateTypeInfo_SetVarDocString_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_SetFuncHelpContext_Proxy(byval This as ICreateTypeInfo ptr, byval index as UINT, byval dwHelpContext as DWORD) as HRESULT
declare sub ICreateTypeInfo_SetFuncHelpContext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_SetVarHelpContext_Proxy(byval This as ICreateTypeInfo ptr, byval index as UINT, byval dwHelpContext as DWORD) as HRESULT
declare sub ICreateTypeInfo_SetVarHelpContext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_SetMops_Proxy(byval This as ICreateTypeInfo ptr, byval index as UINT, byval bstrMops as BSTR) as HRESULT
declare sub ICreateTypeInfo_SetMops_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_SetTypeIdldesc_Proxy(byval This as ICreateTypeInfo ptr, byval pIdlDesc as IDLDESC ptr) as HRESULT
declare sub ICreateTypeInfo_SetTypeIdldesc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo_LayOut_Proxy(byval This as ICreateTypeInfo ptr) as HRESULT
declare sub ICreateTypeInfo_LayOut_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type ICreateTypeInfo2 as ICreateTypeInfo2_
type LPCREATETYPEINFO2 as ICreateTypeInfo2 ptr
extern IID_ICreateTypeInfo2 as const GUID

type ICreateTypeInfo2Vtbl
 QueryInterface as function(byval This as ICreateTypeInfo2 ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ICreateTypeInfo2 ptr) as ULONG
 Release as function(byval This as ICreateTypeInfo2 ptr) as ULONG
 SetGuid as function(byval This as ICreateTypeInfo2 ptr, byval guid as const GUID const ptr) as HRESULT
 SetTypeFlags as function(byval This as ICreateTypeInfo2 ptr, byval uTypeFlags as UINT) as HRESULT
 SetDocString as function(byval This as ICreateTypeInfo2 ptr, byval pStrDoc as LPOLESTR) as HRESULT
 SetHelpContext as function(byval This as ICreateTypeInfo2 ptr, byval dwHelpContext as DWORD) as HRESULT
 SetVersion as function(byval This as ICreateTypeInfo2 ptr, byval wMajorVerNum as WORD, byval wMinorVerNum as WORD) as HRESULT
 AddRefTypeInfo as function(byval This as ICreateTypeInfo2 ptr, byval pTInfo as ITypeInfo ptr, byval phRefType as HREFTYPE ptr) as HRESULT
 AddFuncDesc as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval pFuncDesc as FUNCDESC ptr) as HRESULT
 AddImplType as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval hRefType as HREFTYPE) as HRESULT
 SetImplTypeFlags as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval implTypeFlags as INT_) as HRESULT
 SetAlignment as function(byval This as ICreateTypeInfo2 ptr, byval cbAlignment as WORD) as HRESULT
 SetSchema as function(byval This as ICreateTypeInfo2 ptr, byval pStrSchema as LPOLESTR) as HRESULT
 AddVarDesc as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval pVarDesc as VARDESC ptr) as HRESULT
 SetFuncAndParamNames as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval rgszNames as LPOLESTR ptr, byval cNames as UINT) as HRESULT
 SetVarName as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval szName as LPOLESTR) as HRESULT
 SetTypeDescAlias as function(byval This as ICreateTypeInfo2 ptr, byval pTDescAlias as TYPEDESC ptr) as HRESULT
 DefineFuncAsDllEntry as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval szDllName as LPOLESTR, byval szProcName as LPOLESTR) as HRESULT
 SetFuncDocString as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval szDocString as LPOLESTR) as HRESULT
 SetVarDocString as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval szDocString as LPOLESTR) as HRESULT
 SetFuncHelpContext as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval dwHelpContext as DWORD) as HRESULT
 SetVarHelpContext as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval dwHelpContext as DWORD) as HRESULT
 SetMops as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval bstrMops as BSTR) as HRESULT
 SetTypeIdldesc as function(byval This as ICreateTypeInfo2 ptr, byval pIdlDesc as IDLDESC ptr) as HRESULT
 LayOut as function(byval This as ICreateTypeInfo2 ptr) as HRESULT
 DeleteFuncDesc as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT) as HRESULT
 DeleteFuncDescByMemId as function(byval This as ICreateTypeInfo2 ptr, byval memid as MEMBERID, byval invKind as INVOKEKIND) as HRESULT
 DeleteVarDesc as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT) as HRESULT
 DeleteVarDescByMemId as function(byval This as ICreateTypeInfo2 ptr, byval memid as MEMBERID) as HRESULT
 DeleteImplType as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT) as HRESULT
 SetCustData as function(byval This as ICreateTypeInfo2 ptr, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
 SetFuncCustData as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
 SetParamCustData as function(byval This as ICreateTypeInfo2 ptr, byval indexFunc as UINT, byval indexParam as UINT, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
 SetVarCustData as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
 SetImplTypeCustData as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
 SetHelpStringContext as function(byval This as ICreateTypeInfo2 ptr, byval dwHelpStringContext as ULONG) as HRESULT
 SetFuncHelpStringContext as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval dwHelpStringContext as ULONG) as HRESULT
 SetVarHelpStringContext as function(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval dwHelpStringContext as ULONG) as HRESULT
 Invalidate as function(byval This as ICreateTypeInfo2 ptr) as HRESULT
 SetName as function(byval This as ICreateTypeInfo2 ptr, byval szName as LPOLESTR) as HRESULT
end type

type ICreateTypeInfo2_
 lpVtbl as ICreateTypeInfo2Vtbl ptr
end type


declare function ICreateTypeInfo2_DeleteFuncDesc_Proxy(byval This as ICreateTypeInfo2 ptr, byval index as UINT) as HRESULT
declare sub ICreateTypeInfo2_DeleteFuncDesc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo2_DeleteFuncDescByMemId_Proxy(byval This as ICreateTypeInfo2 ptr, byval memid as MEMBERID, byval invKind as INVOKEKIND) as HRESULT
declare sub ICreateTypeInfo2_DeleteFuncDescByMemId_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo2_DeleteVarDesc_Proxy(byval This as ICreateTypeInfo2 ptr, byval index as UINT) as HRESULT
declare sub ICreateTypeInfo2_DeleteVarDesc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo2_DeleteVarDescByMemId_Proxy(byval This as ICreateTypeInfo2 ptr, byval memid as MEMBERID) as HRESULT
declare sub ICreateTypeInfo2_DeleteVarDescByMemId_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo2_DeleteImplType_Proxy(byval This as ICreateTypeInfo2 ptr, byval index as UINT) as HRESULT
declare sub ICreateTypeInfo2_DeleteImplType_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo2_SetCustData_Proxy(byval This as ICreateTypeInfo2 ptr, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
declare sub ICreateTypeInfo2_SetCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo2_SetFuncCustData_Proxy(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
declare sub ICreateTypeInfo2_SetFuncCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo2_SetParamCustData_Proxy(byval This as ICreateTypeInfo2 ptr, byval indexFunc as UINT, byval indexParam as UINT, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
declare sub ICreateTypeInfo2_SetParamCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo2_SetVarCustData_Proxy(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
declare sub ICreateTypeInfo2_SetVarCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo2_SetImplTypeCustData_Proxy(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
declare sub ICreateTypeInfo2_SetImplTypeCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo2_SetHelpStringContext_Proxy(byval This as ICreateTypeInfo2 ptr, byval dwHelpStringContext as ULONG) as HRESULT
declare sub ICreateTypeInfo2_SetHelpStringContext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo2_SetFuncHelpStringContext_Proxy(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval dwHelpStringContext as ULONG) as HRESULT
declare sub ICreateTypeInfo2_SetFuncHelpStringContext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo2_SetVarHelpStringContext_Proxy(byval This as ICreateTypeInfo2 ptr, byval index as UINT, byval dwHelpStringContext as ULONG) as HRESULT
declare sub ICreateTypeInfo2_SetVarHelpStringContext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo2_Invalidate_Proxy(byval This as ICreateTypeInfo2 ptr) as HRESULT
declare sub ICreateTypeInfo2_Invalidate_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeInfo2_SetName_Proxy(byval This as ICreateTypeInfo2 ptr, byval szName as LPOLESTR) as HRESULT
declare sub ICreateTypeInfo2_SetName_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type ICreateTypeLib as ICreateTypeLib_
type LPCREATETYPELIB as ICreateTypeLib ptr
extern IID_ICreateTypeLib as const GUID

type ICreateTypeLibVtbl
 QueryInterface as function(byval This as ICreateTypeLib ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ICreateTypeLib ptr) as ULONG
 Release as function(byval This as ICreateTypeLib ptr) as ULONG
 CreateTypeInfo as function(byval This as ICreateTypeLib ptr, byval szName as LPOLESTR, byval tkind as TYPEKIND, byval ppCTInfo as ICreateTypeInfo ptr ptr) as HRESULT
 SetName as function(byval This as ICreateTypeLib ptr, byval szName as LPOLESTR) as HRESULT
 SetVersion as function(byval This as ICreateTypeLib ptr, byval wMajorVerNum as WORD, byval wMinorVerNum as WORD) as HRESULT
 SetGuid as function(byval This as ICreateTypeLib ptr, byval guid as const GUID const ptr) as HRESULT
 SetDocString as function(byval This as ICreateTypeLib ptr, byval szDoc as LPOLESTR) as HRESULT
 SetHelpFileName as function(byval This as ICreateTypeLib ptr, byval szHelpFileName as LPOLESTR) as HRESULT
 SetHelpContext as function(byval This as ICreateTypeLib ptr, byval dwHelpContext as DWORD) as HRESULT
 SetLcid as function(byval This as ICreateTypeLib ptr, byval lcid as LCID) as HRESULT
 SetLibFlags as function(byval This as ICreateTypeLib ptr, byval uLibFlags as UINT) as HRESULT
 SaveAllChanges as function(byval This as ICreateTypeLib ptr) as HRESULT
end type

type ICreateTypeLib_
 lpVtbl as ICreateTypeLibVtbl ptr
end type


declare function ICreateTypeLib_CreateTypeInfo_Proxy(byval This as ICreateTypeLib ptr, byval szName as LPOLESTR, byval tkind as TYPEKIND, byval ppCTInfo as ICreateTypeInfo ptr ptr) as HRESULT
declare sub ICreateTypeLib_CreateTypeInfo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeLib_SetName_Proxy(byval This as ICreateTypeLib ptr, byval szName as LPOLESTR) as HRESULT
declare sub ICreateTypeLib_SetName_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeLib_SetVersion_Proxy(byval This as ICreateTypeLib ptr, byval wMajorVerNum as WORD, byval wMinorVerNum as WORD) as HRESULT
declare sub ICreateTypeLib_SetVersion_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeLib_SetGuid_Proxy(byval This as ICreateTypeLib ptr, byval guid as const GUID const ptr) as HRESULT
declare sub ICreateTypeLib_SetGuid_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeLib_SetDocString_Proxy(byval This as ICreateTypeLib ptr, byval szDoc as LPOLESTR) as HRESULT
declare sub ICreateTypeLib_SetDocString_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeLib_SetHelpFileName_Proxy(byval This as ICreateTypeLib ptr, byval szHelpFileName as LPOLESTR) as HRESULT
declare sub ICreateTypeLib_SetHelpFileName_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeLib_SetHelpContext_Proxy(byval This as ICreateTypeLib ptr, byval dwHelpContext as DWORD) as HRESULT
declare sub ICreateTypeLib_SetHelpContext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeLib_SetLcid_Proxy(byval This as ICreateTypeLib ptr, byval lcid as LCID) as HRESULT
declare sub ICreateTypeLib_SetLcid_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeLib_SetLibFlags_Proxy(byval This as ICreateTypeLib ptr, byval uLibFlags as UINT) as HRESULT
declare sub ICreateTypeLib_SetLibFlags_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeLib_SaveAllChanges_Proxy(byval This as ICreateTypeLib ptr) as HRESULT
declare sub ICreateTypeLib_SaveAllChanges_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type ICreateTypeLib2 as ICreateTypeLib2_
type LPCREATETYPELIB2 as ICreateTypeLib2 ptr
extern IID_ICreateTypeLib2 as const GUID

type ICreateTypeLib2Vtbl
 QueryInterface as function(byval This as ICreateTypeLib2 ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ICreateTypeLib2 ptr) as ULONG
 Release as function(byval This as ICreateTypeLib2 ptr) as ULONG
 CreateTypeInfo as function(byval This as ICreateTypeLib2 ptr, byval szName as LPOLESTR, byval tkind as TYPEKIND, byval ppCTInfo as ICreateTypeInfo ptr ptr) as HRESULT
 SetName as function(byval This as ICreateTypeLib2 ptr, byval szName as LPOLESTR) as HRESULT
 SetVersion as function(byval This as ICreateTypeLib2 ptr, byval wMajorVerNum as WORD, byval wMinorVerNum as WORD) as HRESULT
 SetGuid as function(byval This as ICreateTypeLib2 ptr, byval guid as const GUID const ptr) as HRESULT
 SetDocString as function(byval This as ICreateTypeLib2 ptr, byval szDoc as LPOLESTR) as HRESULT
 SetHelpFileName as function(byval This as ICreateTypeLib2 ptr, byval szHelpFileName as LPOLESTR) as HRESULT
 SetHelpContext as function(byval This as ICreateTypeLib2 ptr, byval dwHelpContext as DWORD) as HRESULT
 SetLcid as function(byval This as ICreateTypeLib2 ptr, byval lcid as LCID) as HRESULT
 SetLibFlags as function(byval This as ICreateTypeLib2 ptr, byval uLibFlags as UINT) as HRESULT
 SaveAllChanges as function(byval This as ICreateTypeLib2 ptr) as HRESULT
 DeleteTypeInfo as function(byval This as ICreateTypeLib2 ptr, byval szName as LPOLESTR) as HRESULT
 SetCustData as function(byval This as ICreateTypeLib2 ptr, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
 SetHelpStringContext as function(byval This as ICreateTypeLib2 ptr, byval dwHelpStringContext as ULONG) as HRESULT
 SetHelpStringDll as function(byval This as ICreateTypeLib2 ptr, byval szFileName as LPOLESTR) as HRESULT
end type

type ICreateTypeLib2_
 lpVtbl as ICreateTypeLib2Vtbl ptr
end type


declare function ICreateTypeLib2_DeleteTypeInfo_Proxy(byval This as ICreateTypeLib2 ptr, byval szName as LPOLESTR) as HRESULT
declare sub ICreateTypeLib2_DeleteTypeInfo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeLib2_SetCustData_Proxy(byval This as ICreateTypeLib2 ptr, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
declare sub ICreateTypeLib2_SetCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeLib2_SetHelpStringContext_Proxy(byval This as ICreateTypeLib2 ptr, byval dwHelpStringContext as ULONG) as HRESULT
declare sub ICreateTypeLib2_SetHelpStringContext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateTypeLib2_SetHelpStringDll_Proxy(byval This as ICreateTypeLib2 ptr, byval szFileName as LPOLESTR) as HRESULT
declare sub ICreateTypeLib2_SetHelpStringDll_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type LPDISPATCH as IDispatch ptr

const DISPID_UNKNOWN = -1
const DISPID_VALUE = 0
const DISPID_PROPERTYPUT = -3
const DISPID_NEWENUM = -4
const DISPID_EVALUATE = -5
const DISPID_CONSTRUCTOR = -6
const DISPID_DESTRUCTOR = -7
const DISPID_COLLECT = -8
extern IID_IDispatch as const GUID

type IDispatchVtbl
 QueryInterface as function(byval This as IDispatch ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IDispatch ptr) as ULONG
 Release as function(byval This as IDispatch ptr) as ULONG
 GetTypeInfoCount as function(byval This as IDispatch ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IDispatch ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IDispatch ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IDispatch ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
end type

type IDispatch_
 lpVtbl as IDispatchVtbl ptr
end type


declare function IDispatch_GetTypeInfoCount_Proxy(byval This as IDispatch ptr, byval pctinfo as UINT ptr) as HRESULT
declare sub IDispatch_GetTypeInfoCount_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDispatch_GetTypeInfo_Proxy(byval This as IDispatch ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
declare sub IDispatch_GetTypeInfo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDispatch_GetIDsOfNames_Proxy(byval This as IDispatch ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
declare sub IDispatch_GetIDsOfNames_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDispatch_RemoteInvoke_Proxy(byval This as IDispatch ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval dwFlags as DWORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval pArgErr as UINT ptr, byval cVarRef as UINT, byval rgVarRefIdx as UINT ptr, byval rgVarRef as VARIANTARG ptr) as HRESULT
declare sub IDispatch_RemoteInvoke_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDispatch_Invoke_Proxy(byval This as IDispatch ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
declare function IDispatch_Invoke_Stub(byval This as IDispatch ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval dwFlags as DWORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval pArgErr as UINT ptr, byval cVarRef as UINT, byval rgVarRefIdx as UINT ptr, byval rgVarRef as VARIANTARG ptr) as HRESULT
type IEnumVARIANT as IEnumVARIANT_
type LPENUMVARIANT as IEnumVARIANT ptr
extern IID_IEnumVARIANT as const GUID

type IEnumVARIANTVtbl
 QueryInterface as function(byval This as IEnumVARIANT ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IEnumVARIANT ptr) as ULONG
 Release as function(byval This as IEnumVARIANT ptr) as ULONG
 Next as function(byval This as IEnumVARIANT ptr, byval celt as ULONG, byval rgVar as VARIANT ptr, byval pCeltFetched as ULONG ptr) as HRESULT
 Skip as function(byval This as IEnumVARIANT ptr, byval celt as ULONG) as HRESULT
 Reset as function(byval This as IEnumVARIANT ptr) as HRESULT
 Clone as function(byval This as IEnumVARIANT ptr, byval ppEnum as IEnumVARIANT ptr ptr) as HRESULT
end type

type IEnumVARIANT_
 lpVtbl as IEnumVARIANTVtbl ptr
end type


declare function IEnumVARIANT_RemoteNext_Proxy(byval This as IEnumVARIANT ptr, byval celt as ULONG, byval rgVar as VARIANT ptr, byval pCeltFetched as ULONG ptr) as HRESULT
declare sub IEnumVARIANT_RemoteNext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumVARIANT_Skip_Proxy(byval This as IEnumVARIANT ptr, byval celt as ULONG) as HRESULT
declare sub IEnumVARIANT_Skip_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumVARIANT_Reset_Proxy(byval This as IEnumVARIANT ptr) as HRESULT
declare sub IEnumVARIANT_Reset_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumVARIANT_Clone_Proxy(byval This as IEnumVARIANT ptr, byval ppEnum as IEnumVARIANT ptr ptr) as HRESULT
declare sub IEnumVARIANT_Clone_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumVARIANT_Next_Proxy(byval This as IEnumVARIANT ptr, byval celt as ULONG, byval rgVar as VARIANT ptr, byval pCeltFetched as ULONG ptr) as HRESULT
declare function IEnumVARIANT_Next_Stub(byval This as IEnumVARIANT ptr, byval celt as ULONG, byval rgVar as VARIANT ptr, byval pCeltFetched as ULONG ptr) as HRESULT
type ITypeComp as ITypeComp_
type LPTYPECOMP as ITypeComp ptr

type tagDESCKIND as long
enum
 DESCKIND_NONE = 0
 DESCKIND_FUNCDESC = 1
 DESCKIND_VARDESC = 2
 DESCKIND_TYPECOMP = 3
 DESCKIND_IMPLICITAPPOBJ = 4
 DESCKIND_MAX = 5
end enum

type DESCKIND as tagDESCKIND

union tagBINDPTR
 lpfuncdesc as FUNCDESC ptr
 lpvardesc as VARDESC ptr
 lptcomp as ITypeComp ptr
end union

type BINDPTR as tagBINDPTR
type LPBINDPTR as tagBINDPTR ptr
extern IID_ITypeComp as const GUID

type ITypeCompVtbl
 QueryInterface as function(byval This as ITypeComp ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ITypeComp ptr) as ULONG
 Release as function(byval This as ITypeComp ptr) as ULONG
 Bind as function(byval This as ITypeComp ptr, byval szName as LPOLESTR, byval lHashVal as ULONG, byval wFlags as WORD, byval ppTInfo as ITypeInfo ptr ptr, byval pDescKind as DESCKIND ptr, byval pBindPtr as BINDPTR ptr) as HRESULT
 BindType as function(byval This as ITypeComp ptr, byval szName as LPOLESTR, byval lHashVal as ULONG, byval ppTInfo as ITypeInfo ptr ptr, byval ppTComp as ITypeComp ptr ptr) as HRESULT
end type

type ITypeComp_
 lpVtbl as ITypeCompVtbl ptr
end type


declare function ITypeComp_RemoteBind_Proxy(byval This as ITypeComp ptr, byval szName as LPOLESTR, byval lHashVal as ULONG, byval wFlags as WORD, byval ppTInfo as ITypeInfo ptr ptr, byval pDescKind as DESCKIND ptr, byval ppFuncDesc as LPFUNCDESC ptr, byval ppVarDesc as LPVARDESC ptr, byval ppTypeComp as ITypeComp ptr ptr, byval pDummy as CLEANLOCALSTORAGE ptr) as HRESULT
declare sub ITypeComp_RemoteBind_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeComp_RemoteBindType_Proxy(byval This as ITypeComp ptr, byval szName as LPOLESTR, byval lHashVal as ULONG, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
declare sub ITypeComp_RemoteBindType_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeComp_Bind_Proxy(byval This as ITypeComp ptr, byval szName as LPOLESTR, byval lHashVal as ULONG, byval wFlags as WORD, byval ppTInfo as ITypeInfo ptr ptr, byval pDescKind as DESCKIND ptr, byval pBindPtr as BINDPTR ptr) as HRESULT
declare function ITypeComp_Bind_Stub(byval This as ITypeComp ptr, byval szName as LPOLESTR, byval lHashVal as ULONG, byval wFlags as WORD, byval ppTInfo as ITypeInfo ptr ptr, byval pDescKind as DESCKIND ptr, byval ppFuncDesc as LPFUNCDESC ptr, byval ppVarDesc as LPVARDESC ptr, byval ppTypeComp as ITypeComp ptr ptr, byval pDummy as CLEANLOCALSTORAGE ptr) as HRESULT
declare function ITypeComp_BindType_Proxy(byval This as ITypeComp ptr, byval szName as LPOLESTR, byval lHashVal as ULONG, byval ppTInfo as ITypeInfo ptr ptr, byval ppTComp as ITypeComp ptr ptr) as HRESULT
declare function ITypeComp_BindType_Stub(byval This as ITypeComp ptr, byval szName as LPOLESTR, byval lHashVal as ULONG, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
type LPTYPEINFO as ITypeInfo ptr
extern IID_ITypeInfo as const GUID
type ITypeLib as ITypeLib_

type ITypeInfoVtbl
 QueryInterface as function(byval This as ITypeInfo ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ITypeInfo ptr) as ULONG
 Release as function(byval This as ITypeInfo ptr) as ULONG
 GetTypeAttr as function(byval This as ITypeInfo ptr, byval ppTypeAttr as TYPEATTR ptr ptr) as HRESULT
 GetTypeComp as function(byval This as ITypeInfo ptr, byval ppTComp as ITypeComp ptr ptr) as HRESULT
 GetFuncDesc as function(byval This as ITypeInfo ptr, byval index as UINT, byval ppFuncDesc as FUNCDESC ptr ptr) as HRESULT
 GetVarDesc as function(byval This as ITypeInfo ptr, byval index as UINT, byval ppVarDesc as VARDESC ptr ptr) as HRESULT
 GetNames as function(byval This as ITypeInfo ptr, byval memid as MEMBERID, byval rgBstrNames as BSTR ptr, byval cMaxNames as UINT, byval pcNames as UINT ptr) as HRESULT
 GetRefTypeOfImplType as function(byval This as ITypeInfo ptr, byval index as UINT, byval pRefType as HREFTYPE ptr) as HRESULT
 GetImplTypeFlags as function(byval This as ITypeInfo ptr, byval index as UINT, byval pImplTypeFlags as INT_ ptr) as HRESULT
 GetIDsOfNames as function(byval This as ITypeInfo ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval pMemId as MEMBERID ptr) as HRESULT
 Invoke as function(byval This as ITypeInfo ptr, byval pvInstance as PVOID, byval memid as MEMBERID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 GetDocumentation as function(byval This as ITypeInfo ptr, byval memid as MEMBERID, byval pBstrName as BSTR ptr, byval pBstrDocString as BSTR ptr, byval pdwHelpContext as DWORD ptr, byval pBstrHelpFile as BSTR ptr) as HRESULT
 GetDllEntry as function(byval This as ITypeInfo ptr, byval memid as MEMBERID, byval invKind as INVOKEKIND, byval pBstrDllName as BSTR ptr, byval pBstrName as BSTR ptr, byval pwOrdinal as WORD ptr) as HRESULT
 GetRefTypeInfo as function(byval This as ITypeInfo ptr, byval hRefType as HREFTYPE, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 AddressOfMember as function(byval This as ITypeInfo ptr, byval memid as MEMBERID, byval invKind as INVOKEKIND, byval ppv as PVOID ptr) as HRESULT
 CreateInstance as function(byval This as ITypeInfo ptr, byval pUnkOuter as IUnknown ptr, byval riid as const IID const ptr, byval ppvObj as PVOID ptr) as HRESULT
 GetMops as function(byval This as ITypeInfo ptr, byval memid as MEMBERID, byval pBstrMops as BSTR ptr) as HRESULT
 GetContainingTypeLib as function(byval This as ITypeInfo ptr, byval ppTLib as ITypeLib ptr ptr, byval pIndex as UINT ptr) as HRESULT
 ReleaseTypeAttr as sub(byval This as ITypeInfo ptr, byval pTypeAttr as TYPEATTR ptr)
 ReleaseFuncDesc as sub(byval This as ITypeInfo ptr, byval pFuncDesc as FUNCDESC ptr)
 ReleaseVarDesc as sub(byval This as ITypeInfo ptr, byval pVarDesc as VARDESC ptr)
end type

type ITypeInfo_
 lpVtbl as ITypeInfoVtbl ptr
end type


declare function ITypeInfo_RemoteGetTypeAttr_Proxy(byval This as ITypeInfo ptr, byval ppTypeAttr as LPTYPEATTR ptr, byval pDummy as CLEANLOCALSTORAGE ptr) as HRESULT
declare sub ITypeInfo_RemoteGetTypeAttr_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_GetTypeComp_Proxy(byval This as ITypeInfo ptr, byval ppTComp as ITypeComp ptr ptr) as HRESULT
declare sub ITypeInfo_GetTypeComp_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_RemoteGetFuncDesc_Proxy(byval This as ITypeInfo ptr, byval index as UINT, byval ppFuncDesc as LPFUNCDESC ptr, byval pDummy as CLEANLOCALSTORAGE ptr) as HRESULT
declare sub ITypeInfo_RemoteGetFuncDesc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_RemoteGetVarDesc_Proxy(byval This as ITypeInfo ptr, byval index as UINT, byval ppVarDesc as LPVARDESC ptr, byval pDummy as CLEANLOCALSTORAGE ptr) as HRESULT
declare sub ITypeInfo_RemoteGetVarDesc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_RemoteGetNames_Proxy(byval This as ITypeInfo ptr, byval memid as MEMBERID, byval rgBstrNames as BSTR ptr, byval cMaxNames as UINT, byval pcNames as UINT ptr) as HRESULT
declare sub ITypeInfo_RemoteGetNames_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_GetRefTypeOfImplType_Proxy(byval This as ITypeInfo ptr, byval index as UINT, byval pRefType as HREFTYPE ptr) as HRESULT
declare sub ITypeInfo_GetRefTypeOfImplType_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_GetImplTypeFlags_Proxy(byval This as ITypeInfo ptr, byval index as UINT, byval pImplTypeFlags as INT_ ptr) as HRESULT
declare sub ITypeInfo_GetImplTypeFlags_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_LocalGetIDsOfNames_Proxy(byval This as ITypeInfo ptr) as HRESULT
declare sub ITypeInfo_LocalGetIDsOfNames_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_LocalInvoke_Proxy(byval This as ITypeInfo ptr) as HRESULT
declare sub ITypeInfo_LocalInvoke_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_RemoteGetDocumentation_Proxy(byval This as ITypeInfo ptr, byval memid as MEMBERID, byval refPtrFlags as DWORD, byval pBstrName as BSTR ptr, byval pBstrDocString as BSTR ptr, byval pdwHelpContext as DWORD ptr, byval pBstrHelpFile as BSTR ptr) as HRESULT
declare sub ITypeInfo_RemoteGetDocumentation_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_RemoteGetDllEntry_Proxy(byval This as ITypeInfo ptr, byval memid as MEMBERID, byval invKind as INVOKEKIND, byval refPtrFlags as DWORD, byval pBstrDllName as BSTR ptr, byval pBstrName as BSTR ptr, byval pwOrdinal as WORD ptr) as HRESULT
declare sub ITypeInfo_RemoteGetDllEntry_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_GetRefTypeInfo_Proxy(byval This as ITypeInfo ptr, byval hRefType as HREFTYPE, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
declare sub ITypeInfo_GetRefTypeInfo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_LocalAddressOfMember_Proxy(byval This as ITypeInfo ptr) as HRESULT
declare sub ITypeInfo_LocalAddressOfMember_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_RemoteCreateInstance_Proxy(byval This as ITypeInfo ptr, byval riid as const IID const ptr, byval ppvObj as IUnknown ptr ptr) as HRESULT
declare sub ITypeInfo_RemoteCreateInstance_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_GetMops_Proxy(byval This as ITypeInfo ptr, byval memid as MEMBERID, byval pBstrMops as BSTR ptr) as HRESULT
declare sub ITypeInfo_GetMops_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_RemoteGetContainingTypeLib_Proxy(byval This as ITypeInfo ptr, byval ppTLib as ITypeLib ptr ptr, byval pIndex as UINT ptr) as HRESULT
declare sub ITypeInfo_RemoteGetContainingTypeLib_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_LocalReleaseTypeAttr_Proxy(byval This as ITypeInfo ptr) as HRESULT
declare sub ITypeInfo_LocalReleaseTypeAttr_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_LocalReleaseFuncDesc_Proxy(byval This as ITypeInfo ptr) as HRESULT
declare sub ITypeInfo_LocalReleaseFuncDesc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_LocalReleaseVarDesc_Proxy(byval This as ITypeInfo ptr) as HRESULT
declare sub ITypeInfo_LocalReleaseVarDesc_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo_GetTypeAttr_Proxy(byval This as ITypeInfo ptr, byval ppTypeAttr as TYPEATTR ptr ptr) as HRESULT
declare function ITypeInfo_GetTypeAttr_Stub(byval This as ITypeInfo ptr, byval ppTypeAttr as LPTYPEATTR ptr, byval pDummy as CLEANLOCALSTORAGE ptr) as HRESULT
declare function ITypeInfo_GetFuncDesc_Proxy(byval This as ITypeInfo ptr, byval index as UINT, byval ppFuncDesc as FUNCDESC ptr ptr) as HRESULT
declare function ITypeInfo_GetFuncDesc_Stub(byval This as ITypeInfo ptr, byval index as UINT, byval ppFuncDesc as LPFUNCDESC ptr, byval pDummy as CLEANLOCALSTORAGE ptr) as HRESULT
declare function ITypeInfo_GetVarDesc_Proxy(byval This as ITypeInfo ptr, byval index as UINT, byval ppVarDesc as VARDESC ptr ptr) as HRESULT
declare function ITypeInfo_GetVarDesc_Stub(byval This as ITypeInfo ptr, byval index as UINT, byval ppVarDesc as LPVARDESC ptr, byval pDummy as CLEANLOCALSTORAGE ptr) as HRESULT
declare function ITypeInfo_GetNames_Proxy(byval This as ITypeInfo ptr, byval memid as MEMBERID, byval rgBstrNames as BSTR ptr, byval cMaxNames as UINT, byval pcNames as UINT ptr) as HRESULT
declare function ITypeInfo_GetNames_Stub(byval This as ITypeInfo ptr, byval memid as MEMBERID, byval rgBstrNames as BSTR ptr, byval cMaxNames as UINT, byval pcNames as UINT ptr) as HRESULT
declare function ITypeInfo_GetIDsOfNames_Proxy(byval This as ITypeInfo ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval pMemId as MEMBERID ptr) as HRESULT
declare function ITypeInfo_GetIDsOfNames_Stub(byval This as ITypeInfo ptr) as HRESULT
declare function ITypeInfo_Invoke_Proxy(byval This as ITypeInfo ptr, byval pvInstance as PVOID, byval memid as MEMBERID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
declare function ITypeInfo_Invoke_Stub(byval This as ITypeInfo ptr) as HRESULT
declare function ITypeInfo_GetDocumentation_Proxy(byval This as ITypeInfo ptr, byval memid as MEMBERID, byval pBstrName as BSTR ptr, byval pBstrDocString as BSTR ptr, byval pdwHelpContext as DWORD ptr, byval pBstrHelpFile as BSTR ptr) as HRESULT
declare function ITypeInfo_GetDocumentation_Stub(byval This as ITypeInfo ptr, byval memid as MEMBERID, byval refPtrFlags as DWORD, byval pBstrName as BSTR ptr, byval pBstrDocString as BSTR ptr, byval pdwHelpContext as DWORD ptr, byval pBstrHelpFile as BSTR ptr) as HRESULT
declare function ITypeInfo_GetDllEntry_Proxy(byval This as ITypeInfo ptr, byval memid as MEMBERID, byval invKind as INVOKEKIND, byval pBstrDllName as BSTR ptr, byval pBstrName as BSTR ptr, byval pwOrdinal as WORD ptr) as HRESULT
declare function ITypeInfo_GetDllEntry_Stub(byval This as ITypeInfo ptr, byval memid as MEMBERID, byval invKind as INVOKEKIND, byval refPtrFlags as DWORD, byval pBstrDllName as BSTR ptr, byval pBstrName as BSTR ptr, byval pwOrdinal as WORD ptr) as HRESULT
declare function ITypeInfo_AddressOfMember_Proxy(byval This as ITypeInfo ptr, byval memid as MEMBERID, byval invKind as INVOKEKIND, byval ppv as PVOID ptr) as HRESULT
declare function ITypeInfo_AddressOfMember_Stub(byval This as ITypeInfo ptr) as HRESULT
declare function ITypeInfo_CreateInstance_Proxy(byval This as ITypeInfo ptr, byval pUnkOuter as IUnknown ptr, byval riid as const IID const ptr, byval ppvObj as PVOID ptr) as HRESULT
declare function ITypeInfo_CreateInstance_Stub(byval This as ITypeInfo ptr, byval riid as const IID const ptr, byval ppvObj as IUnknown ptr ptr) as HRESULT
declare function ITypeInfo_GetContainingTypeLib_Proxy(byval This as ITypeInfo ptr, byval ppTLib as ITypeLib ptr ptr, byval pIndex as UINT ptr) as HRESULT
declare function ITypeInfo_GetContainingTypeLib_Stub(byval This as ITypeInfo ptr, byval ppTLib as ITypeLib ptr ptr, byval pIndex as UINT ptr) as HRESULT
declare sub ITypeInfo_ReleaseTypeAttr_Proxy(byval This as ITypeInfo ptr, byval pTypeAttr as TYPEATTR ptr)
declare function ITypeInfo_ReleaseTypeAttr_Stub(byval This as ITypeInfo ptr) as HRESULT
declare sub ITypeInfo_ReleaseFuncDesc_Proxy(byval This as ITypeInfo ptr, byval pFuncDesc as FUNCDESC ptr)
declare function ITypeInfo_ReleaseFuncDesc_Stub(byval This as ITypeInfo ptr) as HRESULT
declare sub ITypeInfo_ReleaseVarDesc_Proxy(byval This as ITypeInfo ptr, byval pVarDesc as VARDESC ptr)
declare function ITypeInfo_ReleaseVarDesc_Stub(byval This as ITypeInfo ptr) as HRESULT
type ITypeInfo2 as ITypeInfo2_
type LPTYPEINFO2 as ITypeInfo2 ptr
extern IID_ITypeInfo2 as const GUID

type ITypeInfo2Vtbl
 QueryInterface as function(byval This as ITypeInfo2 ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ITypeInfo2 ptr) as ULONG
 Release as function(byval This as ITypeInfo2 ptr) as ULONG
 GetTypeAttr as function(byval This as ITypeInfo2 ptr, byval ppTypeAttr as TYPEATTR ptr ptr) as HRESULT
 GetTypeComp as function(byval This as ITypeInfo2 ptr, byval ppTComp as ITypeComp ptr ptr) as HRESULT
 GetFuncDesc as function(byval This as ITypeInfo2 ptr, byval index as UINT, byval ppFuncDesc as FUNCDESC ptr ptr) as HRESULT
 GetVarDesc as function(byval This as ITypeInfo2 ptr, byval index as UINT, byval ppVarDesc as VARDESC ptr ptr) as HRESULT
 GetNames as function(byval This as ITypeInfo2 ptr, byval memid as MEMBERID, byval rgBstrNames as BSTR ptr, byval cMaxNames as UINT, byval pcNames as UINT ptr) as HRESULT
 GetRefTypeOfImplType as function(byval This as ITypeInfo2 ptr, byval index as UINT, byval pRefType as HREFTYPE ptr) as HRESULT
 GetImplTypeFlags as function(byval This as ITypeInfo2 ptr, byval index as UINT, byval pImplTypeFlags as INT_ ptr) as HRESULT
 GetIDsOfNames as function(byval This as ITypeInfo2 ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval pMemId as MEMBERID ptr) as HRESULT
 Invoke as function(byval This as ITypeInfo2 ptr, byval pvInstance as PVOID, byval memid as MEMBERID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 GetDocumentation as function(byval This as ITypeInfo2 ptr, byval memid as MEMBERID, byval pBstrName as BSTR ptr, byval pBstrDocString as BSTR ptr, byval pdwHelpContext as DWORD ptr, byval pBstrHelpFile as BSTR ptr) as HRESULT
 GetDllEntry as function(byval This as ITypeInfo2 ptr, byval memid as MEMBERID, byval invKind as INVOKEKIND, byval pBstrDllName as BSTR ptr, byval pBstrName as BSTR ptr, byval pwOrdinal as WORD ptr) as HRESULT
 GetRefTypeInfo as function(byval This as ITypeInfo2 ptr, byval hRefType as HREFTYPE, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 AddressOfMember as function(byval This as ITypeInfo2 ptr, byval memid as MEMBERID, byval invKind as INVOKEKIND, byval ppv as PVOID ptr) as HRESULT
 CreateInstance as function(byval This as ITypeInfo2 ptr, byval pUnkOuter as IUnknown ptr, byval riid as const IID const ptr, byval ppvObj as PVOID ptr) as HRESULT
 GetMops as function(byval This as ITypeInfo2 ptr, byval memid as MEMBERID, byval pBstrMops as BSTR ptr) as HRESULT
 GetContainingTypeLib as function(byval This as ITypeInfo2 ptr, byval ppTLib as ITypeLib ptr ptr, byval pIndex as UINT ptr) as HRESULT
 ReleaseTypeAttr as sub(byval This as ITypeInfo2 ptr, byval pTypeAttr as TYPEATTR ptr)
 ReleaseFuncDesc as sub(byval This as ITypeInfo2 ptr, byval pFuncDesc as FUNCDESC ptr)
 ReleaseVarDesc as sub(byval This as ITypeInfo2 ptr, byval pVarDesc as VARDESC ptr)
 GetTypeKind as function(byval This as ITypeInfo2 ptr, byval pTypeKind as TYPEKIND ptr) as HRESULT
 GetTypeFlags as function(byval This as ITypeInfo2 ptr, byval pTypeFlags as ULONG ptr) as HRESULT
 GetFuncIndexOfMemId as function(byval This as ITypeInfo2 ptr, byval memid as MEMBERID, byval invKind as INVOKEKIND, byval pFuncIndex as UINT ptr) as HRESULT
 GetVarIndexOfMemId as function(byval This as ITypeInfo2 ptr, byval memid as MEMBERID, byval pVarIndex as UINT ptr) as HRESULT
 GetCustData as function(byval This as ITypeInfo2 ptr, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
 GetFuncCustData as function(byval This as ITypeInfo2 ptr, byval index as UINT, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
 GetParamCustData as function(byval This as ITypeInfo2 ptr, byval indexFunc as UINT, byval indexParam as UINT, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
 GetVarCustData as function(byval This as ITypeInfo2 ptr, byval index as UINT, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
 GetImplTypeCustData as function(byval This as ITypeInfo2 ptr, byval index as UINT, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
 GetDocumentation2 as function(byval This as ITypeInfo2 ptr, byval memid as MEMBERID, byval lcid as LCID, byval pbstrHelpString as BSTR ptr, byval pdwHelpStringContext as DWORD ptr, byval pbstrHelpStringDll as BSTR ptr) as HRESULT
 GetAllCustData as function(byval This as ITypeInfo2 ptr, byval pCustData as CUSTDATA ptr) as HRESULT
 GetAllFuncCustData as function(byval This as ITypeInfo2 ptr, byval index as UINT, byval pCustData as CUSTDATA ptr) as HRESULT
 GetAllParamCustData as function(byval This as ITypeInfo2 ptr, byval indexFunc as UINT, byval indexParam as UINT, byval pCustData as CUSTDATA ptr) as HRESULT
 GetAllVarCustData as function(byval This as ITypeInfo2 ptr, byval index as UINT, byval pCustData as CUSTDATA ptr) as HRESULT
 GetAllImplTypeCustData as function(byval This as ITypeInfo2 ptr, byval index as UINT, byval pCustData as CUSTDATA ptr) as HRESULT
end type

type ITypeInfo2_
 lpVtbl as ITypeInfo2Vtbl ptr
end type


declare function ITypeInfo2_GetTypeKind_Proxy(byval This as ITypeInfo2 ptr, byval pTypeKind as TYPEKIND ptr) as HRESULT
declare sub ITypeInfo2_GetTypeKind_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo2_GetTypeFlags_Proxy(byval This as ITypeInfo2 ptr, byval pTypeFlags as ULONG ptr) as HRESULT
declare sub ITypeInfo2_GetTypeFlags_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo2_GetFuncIndexOfMemId_Proxy(byval This as ITypeInfo2 ptr, byval memid as MEMBERID, byval invKind as INVOKEKIND, byval pFuncIndex as UINT ptr) as HRESULT
declare sub ITypeInfo2_GetFuncIndexOfMemId_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo2_GetVarIndexOfMemId_Proxy(byval This as ITypeInfo2 ptr, byval memid as MEMBERID, byval pVarIndex as UINT ptr) as HRESULT
declare sub ITypeInfo2_GetVarIndexOfMemId_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo2_GetCustData_Proxy(byval This as ITypeInfo2 ptr, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
declare sub ITypeInfo2_GetCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo2_GetFuncCustData_Proxy(byval This as ITypeInfo2 ptr, byval index as UINT, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
declare sub ITypeInfo2_GetFuncCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo2_GetParamCustData_Proxy(byval This as ITypeInfo2 ptr, byval indexFunc as UINT, byval indexParam as UINT, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
declare sub ITypeInfo2_GetParamCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo2_GetVarCustData_Proxy(byval This as ITypeInfo2 ptr, byval index as UINT, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
declare sub ITypeInfo2_GetVarCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo2_GetImplTypeCustData_Proxy(byval This as ITypeInfo2 ptr, byval index as UINT, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
declare sub ITypeInfo2_GetImplTypeCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo2_RemoteGetDocumentation2_Proxy(byval This as ITypeInfo2 ptr, byval memid as MEMBERID, byval lcid as LCID, byval refPtrFlags as DWORD, byval pbstrHelpString as BSTR ptr, byval pdwHelpStringContext as DWORD ptr, byval pbstrHelpStringDll as BSTR ptr) as HRESULT
declare sub ITypeInfo2_RemoteGetDocumentation2_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo2_GetAllCustData_Proxy(byval This as ITypeInfo2 ptr, byval pCustData as CUSTDATA ptr) as HRESULT
declare sub ITypeInfo2_GetAllCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo2_GetAllFuncCustData_Proxy(byval This as ITypeInfo2 ptr, byval index as UINT, byval pCustData as CUSTDATA ptr) as HRESULT
declare sub ITypeInfo2_GetAllFuncCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo2_GetAllParamCustData_Proxy(byval This as ITypeInfo2 ptr, byval indexFunc as UINT, byval indexParam as UINT, byval pCustData as CUSTDATA ptr) as HRESULT
declare sub ITypeInfo2_GetAllParamCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo2_GetAllVarCustData_Proxy(byval This as ITypeInfo2 ptr, byval index as UINT, byval pCustData as CUSTDATA ptr) as HRESULT
declare sub ITypeInfo2_GetAllVarCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo2_GetAllImplTypeCustData_Proxy(byval This as ITypeInfo2 ptr, byval index as UINT, byval pCustData as CUSTDATA ptr) as HRESULT
declare sub ITypeInfo2_GetAllImplTypeCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeInfo2_GetDocumentation2_Proxy(byval This as ITypeInfo2 ptr, byval memid as MEMBERID, byval lcid as LCID, byval pbstrHelpString as BSTR ptr, byval pdwHelpStringContext as DWORD ptr, byval pbstrHelpStringDll as BSTR ptr) as HRESULT
declare function ITypeInfo2_GetDocumentation2_Stub(byval This as ITypeInfo2 ptr, byval memid as MEMBERID, byval lcid as LCID, byval refPtrFlags as DWORD, byval pbstrHelpString as BSTR ptr, byval pdwHelpStringContext as DWORD ptr, byval pbstrHelpStringDll as BSTR ptr) as HRESULT

type tagSYSKIND as long
enum
 SYS_WIN16 = 0
 SYS_WIN32 = 1
 SYS_MAC = 2
 SYS_WIN64 = 3
end enum

type SYSKIND as tagSYSKIND

type tagLIBFLAGS as long
enum
 LIBFLAG_FRESTRICTED = &h1
 LIBFLAG_FCONTROL = &h2
 LIBFLAG_FHIDDEN = &h4
 LIBFLAG_FHASDISKIMAGE = &h8
end enum

type LIBFLAGS as tagLIBFLAGS
type LPTYPELIB as ITypeLib ptr

type tagTLIBATTR
 guid as GUID
 lcid as LCID
 syskind as SYSKIND
 wMajorVerNum as WORD
 wMinorVerNum as WORD
 wLibFlags as WORD
end type

type TLIBATTR as tagTLIBATTR
type LPTLIBATTR as tagTLIBATTR ptr
extern IID_ITypeLib as const GUID

type ITypeLibVtbl
 QueryInterface as function(byval This as ITypeLib ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ITypeLib ptr) as ULONG
 Release as function(byval This as ITypeLib ptr) as ULONG
 GetTypeInfoCount as function(byval This as ITypeLib ptr) as UINT
 GetTypeInfo as function(byval This as ITypeLib ptr, byval index as UINT, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetTypeInfoType as function(byval This as ITypeLib ptr, byval index as UINT, byval pTKind as TYPEKIND ptr) as HRESULT
 GetTypeInfoOfGuid as function(byval This as ITypeLib ptr, byval guid as const GUID const ptr, byval ppTinfo as ITypeInfo ptr ptr) as HRESULT
 GetLibAttr as function(byval This as ITypeLib ptr, byval ppTLibAttr as TLIBATTR ptr ptr) as HRESULT
 GetTypeComp as function(byval This as ITypeLib ptr, byval ppTComp as ITypeComp ptr ptr) as HRESULT
 GetDocumentation as function(byval This as ITypeLib ptr, byval index as INT_, byval pBstrName as BSTR ptr, byval pBstrDocString as BSTR ptr, byval pdwHelpContext as DWORD ptr, byval pBstrHelpFile as BSTR ptr) as HRESULT
 IsName as function(byval This as ITypeLib ptr, byval szNameBuf as LPOLESTR, byval lHashVal as ULONG, byval pfName as WINBOOL ptr) as HRESULT
 FindName as function(byval This as ITypeLib ptr, byval szNameBuf as LPOLESTR, byval lHashVal as ULONG, byval ppTInfo as ITypeInfo ptr ptr, byval rgMemId as MEMBERID ptr, byval pcFound as USHORT ptr) as HRESULT
 ReleaseTLibAttr as sub(byval This as ITypeLib ptr, byval pTLibAttr as TLIBATTR ptr)
end type

type ITypeLib_
 lpVtbl as ITypeLibVtbl ptr
end type


declare function ITypeLib_RemoteGetTypeInfoCount_Proxy(byval This as ITypeLib ptr, byval pcTInfo as UINT ptr) as HRESULT
declare sub ITypeLib_RemoteGetTypeInfoCount_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeLib_GetTypeInfo_Proxy(byval This as ITypeLib ptr, byval index as UINT, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
declare sub ITypeLib_GetTypeInfo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeLib_GetTypeInfoType_Proxy(byval This as ITypeLib ptr, byval index as UINT, byval pTKind as TYPEKIND ptr) as HRESULT
declare sub ITypeLib_GetTypeInfoType_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeLib_GetTypeInfoOfGuid_Proxy(byval This as ITypeLib ptr, byval guid as const GUID const ptr, byval ppTinfo as ITypeInfo ptr ptr) as HRESULT
declare sub ITypeLib_GetTypeInfoOfGuid_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeLib_RemoteGetLibAttr_Proxy(byval This as ITypeLib ptr, byval ppTLibAttr as LPTLIBATTR ptr, byval pDummy as CLEANLOCALSTORAGE ptr) as HRESULT
declare sub ITypeLib_RemoteGetLibAttr_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeLib_GetTypeComp_Proxy(byval This as ITypeLib ptr, byval ppTComp as ITypeComp ptr ptr) as HRESULT
declare sub ITypeLib_GetTypeComp_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeLib_RemoteGetDocumentation_Proxy(byval This as ITypeLib ptr, byval index as INT_, byval refPtrFlags as DWORD, byval pBstrName as BSTR ptr, byval pBstrDocString as BSTR ptr, byval pdwHelpContext as DWORD ptr, byval pBstrHelpFile as BSTR ptr) as HRESULT
declare sub ITypeLib_RemoteGetDocumentation_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeLib_RemoteIsName_Proxy(byval This as ITypeLib ptr, byval szNameBuf as LPOLESTR, byval lHashVal as ULONG, byval pfName as WINBOOL ptr, byval pBstrLibName as BSTR ptr) as HRESULT
declare sub ITypeLib_RemoteIsName_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeLib_RemoteFindName_Proxy(byval This as ITypeLib ptr, byval szNameBuf as LPOLESTR, byval lHashVal as ULONG, byval ppTInfo as ITypeInfo ptr ptr, byval rgMemId as MEMBERID ptr, byval pcFound as USHORT ptr, byval pBstrLibName as BSTR ptr) as HRESULT
declare sub ITypeLib_RemoteFindName_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeLib_LocalReleaseTLibAttr_Proxy(byval This as ITypeLib ptr) as HRESULT
declare sub ITypeLib_LocalReleaseTLibAttr_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeLib_GetTypeInfoCount_Proxy(byval This as ITypeLib ptr) as UINT
declare function ITypeLib_GetTypeInfoCount_Stub(byval This as ITypeLib ptr, byval pcTInfo as UINT ptr) as HRESULT
declare function ITypeLib_GetLibAttr_Proxy(byval This as ITypeLib ptr, byval ppTLibAttr as TLIBATTR ptr ptr) as HRESULT
declare function ITypeLib_GetLibAttr_Stub(byval This as ITypeLib ptr, byval ppTLibAttr as LPTLIBATTR ptr, byval pDummy as CLEANLOCALSTORAGE ptr) as HRESULT
declare function ITypeLib_GetDocumentation_Proxy(byval This as ITypeLib ptr, byval index as INT_, byval pBstrName as BSTR ptr, byval pBstrDocString as BSTR ptr, byval pdwHelpContext as DWORD ptr, byval pBstrHelpFile as BSTR ptr) as HRESULT
declare function ITypeLib_GetDocumentation_Stub(byval This as ITypeLib ptr, byval index as INT_, byval refPtrFlags as DWORD, byval pBstrName as BSTR ptr, byval pBstrDocString as BSTR ptr, byval pdwHelpContext as DWORD ptr, byval pBstrHelpFile as BSTR ptr) as HRESULT
declare function ITypeLib_IsName_Proxy(byval This as ITypeLib ptr, byval szNameBuf as LPOLESTR, byval lHashVal as ULONG, byval pfName as WINBOOL ptr) as HRESULT
declare function ITypeLib_IsName_Stub(byval This as ITypeLib ptr, byval szNameBuf as LPOLESTR, byval lHashVal as ULONG, byval pfName as WINBOOL ptr, byval pBstrLibName as BSTR ptr) as HRESULT
declare function ITypeLib_FindName_Proxy(byval This as ITypeLib ptr, byval szNameBuf as LPOLESTR, byval lHashVal as ULONG, byval ppTInfo as ITypeInfo ptr ptr, byval rgMemId as MEMBERID ptr, byval pcFound as USHORT ptr) as HRESULT
declare function ITypeLib_FindName_Stub(byval This as ITypeLib ptr, byval szNameBuf as LPOLESTR, byval lHashVal as ULONG, byval ppTInfo as ITypeInfo ptr ptr, byval rgMemId as MEMBERID ptr, byval pcFound as USHORT ptr, byval pBstrLibName as BSTR ptr) as HRESULT
declare sub ITypeLib_ReleaseTLibAttr_Proxy(byval This as ITypeLib ptr, byval pTLibAttr as TLIBATTR ptr)
declare function ITypeLib_ReleaseTLibAttr_Stub(byval This as ITypeLib ptr) as HRESULT
type ITypeLib2 as ITypeLib2_
type LPTYPELIB2 as ITypeLib2 ptr
extern IID_ITypeLib2 as const GUID

type ITypeLib2Vtbl
 QueryInterface as function(byval This as ITypeLib2 ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ITypeLib2 ptr) as ULONG
 Release as function(byval This as ITypeLib2 ptr) as ULONG
 GetTypeInfoCount as function(byval This as ITypeLib2 ptr) as UINT
 GetTypeInfo as function(byval This as ITypeLib2 ptr, byval index as UINT, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetTypeInfoType as function(byval This as ITypeLib2 ptr, byval index as UINT, byval pTKind as TYPEKIND ptr) as HRESULT
 GetTypeInfoOfGuid as function(byval This as ITypeLib2 ptr, byval guid as const GUID const ptr, byval ppTinfo as ITypeInfo ptr ptr) as HRESULT
 GetLibAttr as function(byval This as ITypeLib2 ptr, byval ppTLibAttr as TLIBATTR ptr ptr) as HRESULT
 GetTypeComp as function(byval This as ITypeLib2 ptr, byval ppTComp as ITypeComp ptr ptr) as HRESULT
 GetDocumentation as function(byval This as ITypeLib2 ptr, byval index as INT_, byval pBstrName as BSTR ptr, byval pBstrDocString as BSTR ptr, byval pdwHelpContext as DWORD ptr, byval pBstrHelpFile as BSTR ptr) as HRESULT
 IsName as function(byval This as ITypeLib2 ptr, byval szNameBuf as LPOLESTR, byval lHashVal as ULONG, byval pfName as WINBOOL ptr) as HRESULT
 FindName as function(byval This as ITypeLib2 ptr, byval szNameBuf as LPOLESTR, byval lHashVal as ULONG, byval ppTInfo as ITypeInfo ptr ptr, byval rgMemId as MEMBERID ptr, byval pcFound as USHORT ptr) as HRESULT
 ReleaseTLibAttr as sub(byval This as ITypeLib2 ptr, byval pTLibAttr as TLIBATTR ptr)
 GetCustData as function(byval This as ITypeLib2 ptr, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
 GetLibStatistics as function(byval This as ITypeLib2 ptr, byval pcUniqueNames as ULONG ptr, byval pcchUniqueNames as ULONG ptr) as HRESULT
 GetDocumentation2 as function(byval This as ITypeLib2 ptr, byval index as INT_, byval lcid as LCID, byval pbstrHelpString as BSTR ptr, byval pdwHelpStringContext as DWORD ptr, byval pbstrHelpStringDll as BSTR ptr) as HRESULT
 GetAllCustData as function(byval This as ITypeLib2 ptr, byval pCustData as CUSTDATA ptr) as HRESULT
end type

type ITypeLib2_
 lpVtbl as ITypeLib2Vtbl ptr
end type


declare function ITypeLib2_GetCustData_Proxy(byval This as ITypeLib2 ptr, byval guid as const GUID const ptr, byval pVarVal as VARIANT ptr) as HRESULT
declare sub ITypeLib2_GetCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeLib2_RemoteGetLibStatistics_Proxy(byval This as ITypeLib2 ptr, byval pcUniqueNames as ULONG ptr, byval pcchUniqueNames as ULONG ptr) as HRESULT
declare sub ITypeLib2_RemoteGetLibStatistics_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeLib2_RemoteGetDocumentation2_Proxy(byval This as ITypeLib2 ptr, byval index as INT_, byval lcid as LCID, byval refPtrFlags as DWORD, byval pbstrHelpString as BSTR ptr, byval pdwHelpStringContext as DWORD ptr, byval pbstrHelpStringDll as BSTR ptr) as HRESULT
declare sub ITypeLib2_RemoteGetDocumentation2_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeLib2_GetAllCustData_Proxy(byval This as ITypeLib2 ptr, byval pCustData as CUSTDATA ptr) as HRESULT
declare sub ITypeLib2_GetAllCustData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeLib2_GetLibStatistics_Proxy(byval This as ITypeLib2 ptr, byval pcUniqueNames as ULONG ptr, byval pcchUniqueNames as ULONG ptr) as HRESULT
declare function ITypeLib2_GetLibStatistics_Stub(byval This as ITypeLib2 ptr, byval pcUniqueNames as ULONG ptr, byval pcchUniqueNames as ULONG ptr) as HRESULT
declare function ITypeLib2_GetDocumentation2_Proxy(byval This as ITypeLib2 ptr, byval index as INT_, byval lcid as LCID, byval pbstrHelpString as BSTR ptr, byval pdwHelpStringContext as DWORD ptr, byval pbstrHelpStringDll as BSTR ptr) as HRESULT
declare function ITypeLib2_GetDocumentation2_Stub(byval This as ITypeLib2 ptr, byval index as INT_, byval lcid as LCID, byval refPtrFlags as DWORD, byval pbstrHelpString as BSTR ptr, byval pdwHelpStringContext as DWORD ptr, byval pbstrHelpStringDll as BSTR ptr) as HRESULT
type ITypeChangeEvents as ITypeChangeEvents_
type LPTYPECHANGEEVENTS as ITypeChangeEvents ptr

type tagCHANGEKIND as long
enum
 CHANGEKIND_ADDMEMBER = 0
 CHANGEKIND_DELETEMEMBER = 1
 CHANGEKIND_SETNAMES = 2
 CHANGEKIND_SETDOCUMENTATION = 3
 CHANGEKIND_GENERAL = 4
 CHANGEKIND_INVALIDATE = 5
 CHANGEKIND_CHANGEFAILED = 6
 CHANGEKIND_MAX = 7
end enum

type CHANGEKIND as tagCHANGEKIND
extern IID_ITypeChangeEvents as const GUID

type ITypeChangeEventsVtbl
 QueryInterface as function(byval This as ITypeChangeEvents ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ITypeChangeEvents ptr) as ULONG
 Release as function(byval This as ITypeChangeEvents ptr) as ULONG
 RequestTypeChange as function(byval This as ITypeChangeEvents ptr, byval changeKind as CHANGEKIND, byval pTInfoBefore as ITypeInfo ptr, byval pStrName as LPOLESTR, byval pfCancel as INT_ ptr) as HRESULT
 AfterTypeChange as function(byval This as ITypeChangeEvents ptr, byval changeKind as CHANGEKIND, byval pTInfoAfter as ITypeInfo ptr, byval pStrName as LPOLESTR) as HRESULT
end type

type ITypeChangeEvents_
 lpVtbl as ITypeChangeEventsVtbl ptr
end type


declare function ITypeChangeEvents_RequestTypeChange_Proxy(byval This as ITypeChangeEvents ptr, byval changeKind as CHANGEKIND, byval pTInfoBefore as ITypeInfo ptr, byval pStrName as LPOLESTR, byval pfCancel as INT_ ptr) as HRESULT
declare sub ITypeChangeEvents_RequestTypeChange_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeChangeEvents_AfterTypeChange_Proxy(byval This as ITypeChangeEvents ptr, byval changeKind as CHANGEKIND, byval pTInfoAfter as ITypeInfo ptr, byval pStrName as LPOLESTR) as HRESULT
declare sub ITypeChangeEvents_AfterTypeChange_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IErrorInfo as IErrorInfo_
type LPERRORINFO as IErrorInfo ptr
extern IID_IErrorInfo as const GUID

type IErrorInfoVtbl
 QueryInterface as function(byval This as IErrorInfo ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IErrorInfo ptr) as ULONG
 Release as function(byval This as IErrorInfo ptr) as ULONG
 GetGUID as function(byval This as IErrorInfo ptr, byval pGUID as GUID ptr) as HRESULT
 GetSource as function(byval This as IErrorInfo ptr, byval pBstrSource as BSTR ptr) as HRESULT
 GetDescription as function(byval This as IErrorInfo ptr, byval pBstrDescription as BSTR ptr) as HRESULT
 GetHelpFile as function(byval This as IErrorInfo ptr, byval pBstrHelpFile as BSTR ptr) as HRESULT
 GetHelpContext as function(byval This as IErrorInfo ptr, byval pdwHelpContext as DWORD ptr) as HRESULT
end type

type IErrorInfo_
 lpVtbl as IErrorInfoVtbl ptr
end type


declare function IErrorInfo_GetGUID_Proxy(byval This as IErrorInfo ptr, byval pGUID as GUID ptr) as HRESULT
declare sub IErrorInfo_GetGUID_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IErrorInfo_GetSource_Proxy(byval This as IErrorInfo ptr, byval pBstrSource as BSTR ptr) as HRESULT
declare sub IErrorInfo_GetSource_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IErrorInfo_GetDescription_Proxy(byval This as IErrorInfo ptr, byval pBstrDescription as BSTR ptr) as HRESULT
declare sub IErrorInfo_GetDescription_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IErrorInfo_GetHelpFile_Proxy(byval This as IErrorInfo ptr, byval pBstrHelpFile as BSTR ptr) as HRESULT
declare sub IErrorInfo_GetHelpFile_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IErrorInfo_GetHelpContext_Proxy(byval This as IErrorInfo ptr, byval pdwHelpContext as DWORD ptr) as HRESULT
declare sub IErrorInfo_GetHelpContext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type ICreateErrorInfo as ICreateErrorInfo_
type LPCREATEERRORINFO as ICreateErrorInfo ptr
extern IID_ICreateErrorInfo as const GUID

type ICreateErrorInfoVtbl
 QueryInterface as function(byval This as ICreateErrorInfo ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ICreateErrorInfo ptr) as ULONG
 Release as function(byval This as ICreateErrorInfo ptr) as ULONG
 SetGUID as function(byval This as ICreateErrorInfo ptr, byval rguid as const GUID const ptr) as HRESULT
 SetSource as function(byval This as ICreateErrorInfo ptr, byval szSource as LPOLESTR) as HRESULT
 SetDescription as function(byval This as ICreateErrorInfo ptr, byval szDescription as LPOLESTR) as HRESULT
 SetHelpFile as function(byval This as ICreateErrorInfo ptr, byval szHelpFile as LPOLESTR) as HRESULT
 SetHelpContext as function(byval This as ICreateErrorInfo ptr, byval dwHelpContext as DWORD) as HRESULT
end type

type ICreateErrorInfo_
 lpVtbl as ICreateErrorInfoVtbl ptr
end type


declare function ICreateErrorInfo_SetGUID_Proxy(byval This as ICreateErrorInfo ptr, byval rguid as const GUID const ptr) as HRESULT
declare sub ICreateErrorInfo_SetGUID_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateErrorInfo_SetSource_Proxy(byval This as ICreateErrorInfo ptr, byval szSource as LPOLESTR) as HRESULT
declare sub ICreateErrorInfo_SetSource_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateErrorInfo_SetDescription_Proxy(byval This as ICreateErrorInfo ptr, byval szDescription as LPOLESTR) as HRESULT
declare sub ICreateErrorInfo_SetDescription_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateErrorInfo_SetHelpFile_Proxy(byval This as ICreateErrorInfo ptr, byval szHelpFile as LPOLESTR) as HRESULT
declare sub ICreateErrorInfo_SetHelpFile_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICreateErrorInfo_SetHelpContext_Proxy(byval This as ICreateErrorInfo ptr, byval dwHelpContext as DWORD) as HRESULT
declare sub ICreateErrorInfo_SetHelpContext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type ISupportErrorInfo as ISupportErrorInfo_
type LPSUPPORTERRORINFO as ISupportErrorInfo ptr
extern IID_ISupportErrorInfo as const GUID

type ISupportErrorInfoVtbl
 QueryInterface as function(byval This as ISupportErrorInfo ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ISupportErrorInfo ptr) as ULONG
 Release as function(byval This as ISupportErrorInfo ptr) as ULONG
 InterfaceSupportsErrorInfo as function(byval This as ISupportErrorInfo ptr, byval riid as const IID const ptr) as HRESULT
end type

type ISupportErrorInfo_
 lpVtbl as ISupportErrorInfoVtbl ptr
end type

declare function ISupportErrorInfo_InterfaceSupportsErrorInfo_Proxy(byval This as ISupportErrorInfo ptr, byval riid as const IID const ptr) as HRESULT
declare sub ISupportErrorInfo_InterfaceSupportsErrorInfo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_ITypeFactory as const GUID
type ITypeFactory as ITypeFactory_

type ITypeFactoryVtbl
 QueryInterface as function(byval This as ITypeFactory ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ITypeFactory ptr) as ULONG
 Release as function(byval This as ITypeFactory ptr) as ULONG
 CreateFromTypeInfo as function(byval This as ITypeFactory ptr, byval pTypeInfo as ITypeInfo ptr, byval riid as const IID const ptr, byval ppv as IUnknown ptr ptr) as HRESULT
end type

type ITypeFactory_
 lpVtbl as ITypeFactoryVtbl ptr
end type

declare function ITypeFactory_CreateFromTypeInfo_Proxy(byval This as ITypeFactory ptr, byval pTypeInfo as ITypeInfo ptr, byval riid as const IID const ptr, byval ppv as IUnknown ptr ptr) as HRESULT
declare sub ITypeFactory_CreateFromTypeInfo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
extern IID_ITypeMarshal as const GUID
type ITypeMarshal as ITypeMarshal_

type ITypeMarshalVtbl
 QueryInterface as function(byval This as ITypeMarshal ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ITypeMarshal ptr) as ULONG
 Release as function(byval This as ITypeMarshal ptr) as ULONG
 Size as function(byval This as ITypeMarshal ptr, byval pvType as PVOID, byval dwDestContext as DWORD, byval pvDestContext as PVOID, byval pSize as ULONG ptr) as HRESULT
 Marshal as function(byval This as ITypeMarshal ptr, byval pvType as PVOID, byval dwDestContext as DWORD, byval pvDestContext as PVOID, byval cbBufferLength as ULONG, byval pBuffer as UBYTE ptr, byval pcbWritten as ULONG ptr) as HRESULT
 Unmarshal as function(byval This as ITypeMarshal ptr, byval pvType as PVOID, byval dwFlags as DWORD, byval cbBufferLength as ULONG, byval pBuffer as UBYTE ptr, byval pcbRead as ULONG ptr) as HRESULT
 Free as function(byval This as ITypeMarshal ptr, byval pvType as PVOID) as HRESULT
end type

type ITypeMarshal_
 lpVtbl as ITypeMarshalVtbl ptr
end type


declare function ITypeMarshal_Size_Proxy(byval This as ITypeMarshal ptr, byval pvType as PVOID, byval dwDestContext as DWORD, byval pvDestContext as PVOID, byval pSize as ULONG ptr) as HRESULT
declare sub ITypeMarshal_Size_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeMarshal_Marshal_Proxy(byval This as ITypeMarshal ptr, byval pvType as PVOID, byval dwDestContext as DWORD, byval pvDestContext as PVOID, byval cbBufferLength as ULONG, byval pBuffer as UBYTE ptr, byval pcbWritten as ULONG ptr) as HRESULT
declare sub ITypeMarshal_Marshal_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeMarshal_Unmarshal_Proxy(byval This as ITypeMarshal ptr, byval pvType as PVOID, byval dwFlags as DWORD, byval cbBufferLength as ULONG, byval pBuffer as UBYTE ptr, byval pcbRead as ULONG ptr) as HRESULT
declare sub ITypeMarshal_Unmarshal_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ITypeMarshal_Free_Proxy(byval This as ITypeMarshal ptr, byval pvType as PVOID) as HRESULT
declare sub ITypeMarshal_Free_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type LPRECORDINFO as IRecordInfo ptr
extern IID_IRecordInfo as const GUID

type IRecordInfoVtbl
 QueryInterface as function(byval This as IRecordInfo ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IRecordInfo ptr) as ULONG
 Release as function(byval This as IRecordInfo ptr) as ULONG
 RecordInit as function(byval This as IRecordInfo ptr, byval pvNew as PVOID) as HRESULT
 RecordClear as function(byval This as IRecordInfo ptr, byval pvExisting as PVOID) as HRESULT
 RecordCopy as function(byval This as IRecordInfo ptr, byval pvExisting as PVOID, byval pvNew as PVOID) as HRESULT
 GetGuid as function(byval This as IRecordInfo ptr, byval pguid as GUID ptr) as HRESULT
 GetName as function(byval This as IRecordInfo ptr, byval pbstrName as BSTR ptr) as HRESULT
 GetSize as function(byval This as IRecordInfo ptr, byval pcbSize as ULONG ptr) as HRESULT
 GetTypeInfo as function(byval This as IRecordInfo ptr, byval ppTypeInfo as ITypeInfo ptr ptr) as HRESULT
 GetField as function(byval This as IRecordInfo ptr, byval pvData as PVOID, byval szFieldName as LPCOLESTR, byval pvarField as VARIANT ptr) as HRESULT
 GetFieldNoCopy as function(byval This as IRecordInfo ptr, byval pvData as PVOID, byval szFieldName as LPCOLESTR, byval pvarField as VARIANT ptr, byval ppvDataCArray as PVOID ptr) as HRESULT
 PutField as function(byval This as IRecordInfo ptr, byval wFlags as ULONG, byval pvData as PVOID, byval szFieldName as LPCOLESTR, byval pvarField as VARIANT ptr) as HRESULT
 PutFieldNoCopy as function(byval This as IRecordInfo ptr, byval wFlags as ULONG, byval pvData as PVOID, byval szFieldName as LPCOLESTR, byval pvarField as VARIANT ptr) as HRESULT
 GetFieldNames as function(byval This as IRecordInfo ptr, byval pcNames as ULONG ptr, byval rgBstrNames as BSTR ptr) as HRESULT
 IsMatchingType as function(byval This as IRecordInfo ptr, byval pRecordInfo as IRecordInfo ptr) as WINBOOL
 RecordCreate as function(byval This as IRecordInfo ptr) as PVOID
 RecordCreateCopy as function(byval This as IRecordInfo ptr, byval pvSource as PVOID, byval ppvDest as PVOID ptr) as HRESULT
 RecordDestroy as function(byval This as IRecordInfo ptr, byval pvRecord as PVOID) as HRESULT
end type

type IRecordInfo_
 lpVtbl as IRecordInfoVtbl ptr
end type


declare function IRecordInfo_RecordInit_Proxy(byval This as IRecordInfo ptr, byval pvNew as PVOID) as HRESULT
declare sub IRecordInfo_RecordInit_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRecordInfo_RecordClear_Proxy(byval This as IRecordInfo ptr, byval pvExisting as PVOID) as HRESULT
declare sub IRecordInfo_RecordClear_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRecordInfo_RecordCopy_Proxy(byval This as IRecordInfo ptr, byval pvExisting as PVOID, byval pvNew as PVOID) as HRESULT
declare sub IRecordInfo_RecordCopy_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRecordInfo_GetGuid_Proxy(byval This as IRecordInfo ptr, byval pguid as GUID ptr) as HRESULT
declare sub IRecordInfo_GetGuid_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRecordInfo_GetName_Proxy(byval This as IRecordInfo ptr, byval pbstrName as BSTR ptr) as HRESULT
declare sub IRecordInfo_GetName_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRecordInfo_GetSize_Proxy(byval This as IRecordInfo ptr, byval pcbSize as ULONG ptr) as HRESULT
declare sub IRecordInfo_GetSize_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRecordInfo_GetTypeInfo_Proxy(byval This as IRecordInfo ptr, byval ppTypeInfo as ITypeInfo ptr ptr) as HRESULT
declare sub IRecordInfo_GetTypeInfo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRecordInfo_GetField_Proxy(byval This as IRecordInfo ptr, byval pvData as PVOID, byval szFieldName as LPCOLESTR, byval pvarField as VARIANT ptr) as HRESULT
declare sub IRecordInfo_GetField_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRecordInfo_GetFieldNoCopy_Proxy(byval This as IRecordInfo ptr, byval pvData as PVOID, byval szFieldName as LPCOLESTR, byval pvarField as VARIANT ptr, byval ppvDataCArray as PVOID ptr) as HRESULT
declare sub IRecordInfo_GetFieldNoCopy_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRecordInfo_PutField_Proxy(byval This as IRecordInfo ptr, byval wFlags as ULONG, byval pvData as PVOID, byval szFieldName as LPCOLESTR, byval pvarField as VARIANT ptr) as HRESULT
declare sub IRecordInfo_PutField_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRecordInfo_PutFieldNoCopy_Proxy(byval This as IRecordInfo ptr, byval wFlags as ULONG, byval pvData as PVOID, byval szFieldName as LPCOLESTR, byval pvarField as VARIANT ptr) as HRESULT
declare sub IRecordInfo_PutFieldNoCopy_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRecordInfo_GetFieldNames_Proxy(byval This as IRecordInfo ptr, byval pcNames as ULONG ptr, byval rgBstrNames as BSTR ptr) as HRESULT
declare sub IRecordInfo_GetFieldNames_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRecordInfo_IsMatchingType_Proxy(byval This as IRecordInfo ptr, byval pRecordInfo as IRecordInfo ptr) as WINBOOL
declare sub IRecordInfo_IsMatchingType_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRecordInfo_RecordCreate_Proxy(byval This as IRecordInfo ptr) as PVOID
declare sub IRecordInfo_RecordCreate_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRecordInfo_RecordCreateCopy_Proxy(byval This as IRecordInfo ptr, byval pvSource as PVOID, byval ppvDest as PVOID ptr) as HRESULT
declare sub IRecordInfo_RecordCreateCopy_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IRecordInfo_RecordDestroy_Proxy(byval This as IRecordInfo ptr, byval pvRecord as PVOID) as HRESULT
declare sub IRecordInfo_RecordDestroy_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IErrorLog as IErrorLog_
type LPERRORLOG as IErrorLog ptr
extern IID_IErrorLog as const GUID

type IErrorLogVtbl
 QueryInterface as function(byval This as IErrorLog ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IErrorLog ptr) as ULONG
 Release as function(byval This as IErrorLog ptr) as ULONG
 AddError as function(byval This as IErrorLog ptr, byval pszPropName as LPCOLESTR, byval pExcepInfo as EXCEPINFO ptr) as HRESULT
end type

type IErrorLog_
 lpVtbl as IErrorLogVtbl ptr
end type

declare function IErrorLog_AddError_Proxy(byval This as IErrorLog ptr, byval pszPropName as LPCOLESTR, byval pExcepInfo as EXCEPINFO ptr) as HRESULT
declare sub IErrorLog_AddError_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IPropertyBag as IPropertyBag_
type LPPROPERTYBAG as IPropertyBag ptr
extern IID_IPropertyBag as const GUID

type IPropertyBagVtbl
 QueryInterface as function(byval This as IPropertyBag ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IPropertyBag ptr) as ULONG
 Release as function(byval This as IPropertyBag ptr) as ULONG
 Read as function(byval This as IPropertyBag ptr, byval pszPropName as LPCOLESTR, byval pVar as VARIANT ptr, byval pErrorLog as IErrorLog ptr) as HRESULT
 Write as function(byval This as IPropertyBag ptr, byval pszPropName as LPCOLESTR, byval pVar as VARIANT ptr) as HRESULT
end type

type IPropertyBag_
 lpVtbl as IPropertyBagVtbl ptr
end type


declare function IPropertyBag_RemoteRead_Proxy(byval This as IPropertyBag ptr, byval pszPropName as LPCOLESTR, byval pVar as VARIANT ptr, byval pErrorLog as IErrorLog ptr, byval varType as DWORD, byval pUnkObj as IUnknown ptr) as HRESULT
declare sub IPropertyBag_RemoteRead_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPropertyBag_Write_Proxy(byval This as IPropertyBag ptr, byval pszPropName as LPCOLESTR, byval pVar as VARIANT ptr) as HRESULT
declare sub IPropertyBag_Write_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPropertyBag_Read_Proxy(byval This as IPropertyBag ptr, byval pszPropName as LPCOLESTR, byval pVar as VARIANT ptr, byval pErrorLog as IErrorLog ptr) as HRESULT
declare function IPropertyBag_Read_Stub(byval This as IPropertyBag ptr, byval pszPropName as LPCOLESTR, byval pVar as VARIANT ptr, byval pErrorLog as IErrorLog ptr, byval varType as DWORD, byval pUnkObj as IUnknown ptr) as HRESULT
declare function CLEANLOCALSTORAGE_UserSize(byval as ULONG ptr, byval as ULONG, byval as CLEANLOCALSTORAGE ptr) as ULONG
declare function CLEANLOCALSTORAGE_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as CLEANLOCALSTORAGE ptr) as ubyte ptr
declare function CLEANLOCALSTORAGE_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as CLEANLOCALSTORAGE ptr) as ubyte ptr
declare sub CLEANLOCALSTORAGE_UserFree(byval as ULONG ptr, byval as CLEANLOCALSTORAGE ptr)
declare function LPSAFEARRAY_UserMarshal(byval as ULONG ptr, byval as ubyte ptr, byval as LPSAFEARRAY ptr) as ubyte ptr
declare function LPSAFEARRAY_UserSize(byval as ULONG ptr, byval as ULONG, byval as LPSAFEARRAY ptr) as ULONG
declare function LPSAFEARRAY_UserUnmarshal(byval as ULONG ptr, byval as ubyte ptr, byval as LPSAFEARRAY ptr) as ubyte ptr
declare sub LPSAFEARRAY_UserFree(byval as ULONG ptr, byval as LPSAFEARRAY ptr)

end extern


extern "Windows"


type _xml_error
 _nLine as ulong
 _pchBuf as BSTR
 _cchBuf as ulong
 _ich as ulong
 _pszFound as BSTR
 _pszExpected as BSTR
 _reserved1 as DWORD
 _reserved2 as DWORD
end type

type XML_ERROR as _xml_error
extern __MIDL_itf_msxml_0000_v0_0_c_ifspec as RPC_IF_HANDLE
extern __MIDL_itf_msxml_0000_v0_0_s_ifspec as RPC_IF_HANDLE

type tagDOMNodeType as long
enum
 NODE_INVALID = 0
 NODE_ELEMENT
 NODE_ATTRIBUTE
 NODE_TEXT
 NODE_CDATA_SECTION
 NODE_ENTITY_REFERENCE
 NODE_ENTITY
 NODE_PROCESSING_INSTRUCTION
 NODE_COMMENT
 NODE_DOCUMENT
 NODE_DOCUMENT_TYPE
 NODE_DOCUMENT_FRAGMENT
 NODE_NOTATION
end enum

type DOMNodeType as tagDOMNodeType

type tagXMLEMEM_TYPE as long
enum
 XMLELEMTYPE_ELEMENT = 0
 XMLELEMTYPE_TEXT
 XMLELEMTYPE_COMMENT
 XMLELEMTYPE_DOCUMENT
 XMLELEMTYPE_DTD
 XMLELEMTYPE_PI
 XMLELEMTYPE_OTHER
end enum

type XMLELEM_TYPE as tagXMLEMEM_TYPE
extern LIBID_MSXML as const IID
extern IID_IXMLDOMImplementation as const IID
type IXMLDOMImplementation as IXMLDOMImplementation_

type IXMLDOMImplementationVtbl
 QueryInterface as function(byval This as IXMLDOMImplementation ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMImplementation ptr) as ULONG
 Release as function(byval This as IXMLDOMImplementation ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMImplementation ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMImplementation ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMImplementation ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMImplementation ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 hasFeature as function(byval This as IXMLDOMImplementation ptr, byval feature as BSTR, byval version as BSTR, byval hasFeature as VARIANT_BOOL ptr) as HRESULT
end type

type IXMLDOMImplementation_
 lpVtbl as IXMLDOMImplementationVtbl ptr
end type

declare function IXMLDOMImplementation_hasFeature_Proxy(byval This as IXMLDOMImplementation ptr, byval feature as BSTR, byval version as BSTR, byval hasFeature as VARIANT_BOOL ptr) as HRESULT
declare sub IXMLDOMImplementation_hasFeature_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLDOMNode as const IID

type IXMLDOMNode as IXMLDOMNode_
type IXMLDOMNodeList as IXMLDOMNodeList_
type IXMLDOMNamedNodeMap as IXMLDOMNamedNodeMap_
type IXMLDOMDocument as IXMLDOMDocument_

type IXMLDOMNodeVtbl
 QueryInterface as function(byval This as IXMLDOMNode ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMNode ptr) as ULONG
 Release as function(byval This as IXMLDOMNode ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMNode ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMNode ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMNode ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMNode ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_nodeName as function(byval This as IXMLDOMNode ptr, byval name as BSTR ptr) as HRESULT
 get_nodeValue as function(byval This as IXMLDOMNode ptr, byval value as VARIANT ptr) as HRESULT
 put_nodeValue as function(byval This as IXMLDOMNode ptr, byval value as VARIANT) as HRESULT
 get_nodeType as function(byval This as IXMLDOMNode ptr, byval type as DOMNodeType ptr) as HRESULT
 get_parentNode as function(byval This as IXMLDOMNode ptr, byval parent as IXMLDOMNode ptr ptr) as HRESULT
 get_childNodes as function(byval This as IXMLDOMNode ptr, byval childList as IXMLDOMNodeList ptr ptr) as HRESULT
 get_firstChild as function(byval This as IXMLDOMNode ptr, byval firstChild as IXMLDOMNode ptr ptr) as HRESULT
 get_lastChild as function(byval This as IXMLDOMNode ptr, byval lastChild as IXMLDOMNode ptr ptr) as HRESULT
 get_previousSibling as function(byval This as IXMLDOMNode ptr, byval previousSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_nextSibling as function(byval This as IXMLDOMNode ptr, byval nextSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_attributes as function(byval This as IXMLDOMNode ptr, byval attributeMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
 insertBefore as function(byval This as IXMLDOMNode ptr, byval newChild as IXMLDOMNode ptr, byval refChild as VARIANT, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 replaceChild as function(byval This as IXMLDOMNode ptr, byval newChild as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr, byval outOldChild as IXMLDOMNode ptr ptr) as HRESULT
 removeChild as function(byval This as IXMLDOMNode ptr, byval childNode as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr ptr) as HRESULT
 appendChild as function(byval This as IXMLDOMNode ptr, byval newChild as IXMLDOMNode ptr, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 hasChildNodes as function(byval This as IXMLDOMNode ptr, byval hasChild as VARIANT_BOOL ptr) as HRESULT
 get_ownerDocument as function(byval This as IXMLDOMNode ptr, byval DOMDocument as IXMLDOMDocument ptr ptr) as HRESULT
 cloneNode as function(byval This as IXMLDOMNode ptr, byval deep as VARIANT_BOOL, byval cloneRoot as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypeString as function(byval This as IXMLDOMNode ptr, byval nodeType as BSTR ptr) as HRESULT
 get_text as function(byval This as IXMLDOMNode ptr, byval text as BSTR ptr) as HRESULT
 put_text as function(byval This as IXMLDOMNode ptr, byval text as BSTR) as HRESULT
 get_specified as function(byval This as IXMLDOMNode ptr, byval isSpecified as VARIANT_BOOL ptr) as HRESULT
 get_definition as function(byval This as IXMLDOMNode ptr, byval definitionNode as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypedValue as function(byval This as IXMLDOMNode ptr, byval typedValue as VARIANT ptr) as HRESULT
 put_nodeTypedValue as function(byval This as IXMLDOMNode ptr, byval typedValue as VARIANT) as HRESULT
 get_dataType as function(byval This as IXMLDOMNode ptr, byval dataTypeName as VARIANT ptr) as HRESULT
 put_dataType as function(byval This as IXMLDOMNode ptr, byval dataTypeName as BSTR) as HRESULT
 get_xml as function(byval This as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
 transformNode as function(byval This as IXMLDOMNode ptr, byval stylesheet as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
 selectNodes as function(byval This as IXMLDOMNode ptr, byval queryString as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 selectSingleNode as function(byval This as IXMLDOMNode ptr, byval queryString as BSTR, byval resultNode as IXMLDOMNode ptr ptr) as HRESULT
 get_parsed as function(byval This as IXMLDOMNode ptr, byval isParsed as VARIANT_BOOL ptr) as HRESULT
 get_namespaceURI as function(byval This as IXMLDOMNode ptr, byval namespaceURI as BSTR ptr) as HRESULT
 get_prefix as function(byval This as IXMLDOMNode ptr, byval prefixString as BSTR ptr) as HRESULT
 get_baseName as function(byval This as IXMLDOMNode ptr, byval nameString as BSTR ptr) as HRESULT
 transformNodeToObject as function(byval This as IXMLDOMNode ptr, byval stylesheet as IXMLDOMNode ptr, byval outputObject as VARIANT) as HRESULT
end type

type IXMLDOMNode_
 lpVtbl as IXMLDOMNodeVtbl ptr
end type


declare function IXMLDOMNode_get_nodeName_Proxy(byval This as IXMLDOMNode ptr, byval name as BSTR ptr) as HRESULT
declare sub IXMLDOMNode_get_nodeName_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_nodeValue_Proxy(byval This as IXMLDOMNode ptr, byval value as VARIANT ptr) as HRESULT
declare sub IXMLDOMNode_get_nodeValue_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_put_nodeValue_Proxy(byval This as IXMLDOMNode ptr, byval value as VARIANT) as HRESULT
declare sub IXMLDOMNode_put_nodeValue_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_nodeType_Proxy(byval This as IXMLDOMNode ptr, byval type as DOMNodeType ptr) as HRESULT
declare sub IXMLDOMNode_get_nodeType_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_parentNode_Proxy(byval This as IXMLDOMNode ptr, byval parent as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNode_get_parentNode_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_childNodes_Proxy(byval This as IXMLDOMNode ptr, byval childList as IXMLDOMNodeList ptr ptr) as HRESULT
declare sub IXMLDOMNode_get_childNodes_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_firstChild_Proxy(byval This as IXMLDOMNode ptr, byval firstChild as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNode_get_firstChild_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_lastChild_Proxy(byval This as IXMLDOMNode ptr, byval lastChild as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNode_get_lastChild_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_previousSibling_Proxy(byval This as IXMLDOMNode ptr, byval previousSibling as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNode_get_previousSibling_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_nextSibling_Proxy(byval This as IXMLDOMNode ptr, byval nextSibling as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNode_get_nextSibling_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_attributes_Proxy(byval This as IXMLDOMNode ptr, byval attributeMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
declare sub IXMLDOMNode_get_attributes_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_insertBefore_Proxy(byval This as IXMLDOMNode ptr, byval newChild as IXMLDOMNode ptr, byval refChild as VARIANT, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNode_insertBefore_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_replaceChild_Proxy(byval This as IXMLDOMNode ptr, byval newChild as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr, byval outOldChild as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNode_replaceChild_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_removeChild_Proxy(byval This as IXMLDOMNode ptr, byval childNode as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNode_removeChild_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_appendChild_Proxy(byval This as IXMLDOMNode ptr, byval newChild as IXMLDOMNode ptr, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNode_appendChild_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_hasChildNodes_Proxy(byval This as IXMLDOMNode ptr, byval hasChild as VARIANT_BOOL ptr) as HRESULT
declare sub IXMLDOMNode_hasChildNodes_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_ownerDocument_Proxy(byval This as IXMLDOMNode ptr, byval DOMDocument as IXMLDOMDocument ptr ptr) as HRESULT
declare sub IXMLDOMNode_get_ownerDocument_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_cloneNode_Proxy(byval This as IXMLDOMNode ptr, byval deep as VARIANT_BOOL, byval cloneRoot as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNode_cloneNode_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_nodeTypeString_Proxy(byval This as IXMLDOMNode ptr, byval nodeType as BSTR ptr) as HRESULT
declare sub IXMLDOMNode_get_nodeTypeString_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_text_Proxy(byval This as IXMLDOMNode ptr, byval text as BSTR ptr) as HRESULT
declare sub IXMLDOMNode_get_text_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_put_text_Proxy(byval This as IXMLDOMNode ptr, byval text as BSTR) as HRESULT
declare sub IXMLDOMNode_put_text_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_specified_Proxy(byval This as IXMLDOMNode ptr, byval isSpecified as VARIANT_BOOL ptr) as HRESULT
declare sub IXMLDOMNode_get_specified_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_definition_Proxy(byval This as IXMLDOMNode ptr, byval definitionNode as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNode_get_definition_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_nodeTypedValue_Proxy(byval This as IXMLDOMNode ptr, byval typedValue as VARIANT ptr) as HRESULT
declare sub IXMLDOMNode_get_nodeTypedValue_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_put_nodeTypedValue_Proxy(byval This as IXMLDOMNode ptr, byval typedValue as VARIANT) as HRESULT
declare sub IXMLDOMNode_put_nodeTypedValue_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_dataType_Proxy(byval This as IXMLDOMNode ptr, byval dataTypeName as VARIANT ptr) as HRESULT
declare sub IXMLDOMNode_get_dataType_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_put_dataType_Proxy(byval This as IXMLDOMNode ptr, byval dataTypeName as BSTR) as HRESULT
declare sub IXMLDOMNode_put_dataType_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_xml_Proxy(byval This as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
declare sub IXMLDOMNode_get_xml_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_transformNode_Proxy(byval This as IXMLDOMNode ptr, byval stylesheet as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
declare sub IXMLDOMNode_transformNode_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_selectNodes_Proxy(byval This as IXMLDOMNode ptr, byval queryString as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
declare sub IXMLDOMNode_selectNodes_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_selectSingleNode_Proxy(byval This as IXMLDOMNode ptr, byval queryString as BSTR, byval resultNode as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNode_selectSingleNode_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_parsed_Proxy(byval This as IXMLDOMNode ptr, byval isParsed as VARIANT_BOOL ptr) as HRESULT
declare sub IXMLDOMNode_get_parsed_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_namespaceURI_Proxy(byval This as IXMLDOMNode ptr, byval namespaceURI as BSTR ptr) as HRESULT
declare sub IXMLDOMNode_get_namespaceURI_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_prefix_Proxy(byval This as IXMLDOMNode ptr, byval prefixString as BSTR ptr) as HRESULT
declare sub IXMLDOMNode_get_prefix_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_get_baseName_Proxy(byval This as IXMLDOMNode ptr, byval nameString as BSTR ptr) as HRESULT
declare sub IXMLDOMNode_get_baseName_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNode_transformNodeToObject_Proxy(byval This as IXMLDOMNode ptr, byval stylesheet as IXMLDOMNode ptr, byval outputObject as VARIANT) as HRESULT
declare sub IXMLDOMNode_transformNodeToObject_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLDOMDocumentFragment as const IID
type IXMLDOMDocumentFragment as IXMLDOMDocumentFragment_

type IXMLDOMDocumentFragmentVtbl
 QueryInterface as function(byval This as IXMLDOMDocumentFragment ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMDocumentFragment ptr) as ULONG
 Release as function(byval This as IXMLDOMDocumentFragment ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMDocumentFragment ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMDocumentFragment ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMDocumentFragment ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMDocumentFragment ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_nodeName as function(byval This as IXMLDOMDocumentFragment ptr, byval name as BSTR ptr) as HRESULT
 get_nodeValue as function(byval This as IXMLDOMDocumentFragment ptr, byval value as VARIANT ptr) as HRESULT
 put_nodeValue as function(byval This as IXMLDOMDocumentFragment ptr, byval value as VARIANT) as HRESULT
 get_nodeType as function(byval This as IXMLDOMDocumentFragment ptr, byval type as DOMNodeType ptr) as HRESULT
 get_parentNode as function(byval This as IXMLDOMDocumentFragment ptr, byval parent as IXMLDOMNode ptr ptr) as HRESULT
 get_childNodes as function(byval This as IXMLDOMDocumentFragment ptr, byval childList as IXMLDOMNodeList ptr ptr) as HRESULT
 get_firstChild as function(byval This as IXMLDOMDocumentFragment ptr, byval firstChild as IXMLDOMNode ptr ptr) as HRESULT
 get_lastChild as function(byval This as IXMLDOMDocumentFragment ptr, byval lastChild as IXMLDOMNode ptr ptr) as HRESULT
 get_previousSibling as function(byval This as IXMLDOMDocumentFragment ptr, byval previousSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_nextSibling as function(byval This as IXMLDOMDocumentFragment ptr, byval nextSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_attributes as function(byval This as IXMLDOMDocumentFragment ptr, byval attributeMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
 insertBefore as function(byval This as IXMLDOMDocumentFragment ptr, byval newChild as IXMLDOMNode ptr, byval refChild as VARIANT, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 replaceChild as function(byval This as IXMLDOMDocumentFragment ptr, byval newChild as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr, byval outOldChild as IXMLDOMNode ptr ptr) as HRESULT
 removeChild as function(byval This as IXMLDOMDocumentFragment ptr, byval childNode as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr ptr) as HRESULT
 appendChild as function(byval This as IXMLDOMDocumentFragment ptr, byval newChild as IXMLDOMNode ptr, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 hasChildNodes as function(byval This as IXMLDOMDocumentFragment ptr, byval hasChild as VARIANT_BOOL ptr) as HRESULT
 get_ownerDocument as function(byval This as IXMLDOMDocumentFragment ptr, byval DOMDocument as IXMLDOMDocument ptr ptr) as HRESULT
 cloneNode as function(byval This as IXMLDOMDocumentFragment ptr, byval deep as VARIANT_BOOL, byval cloneRoot as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypeString as function(byval This as IXMLDOMDocumentFragment ptr, byval nodeType as BSTR ptr) as HRESULT
 get_text as function(byval This as IXMLDOMDocumentFragment ptr, byval text as BSTR ptr) as HRESULT
 put_text as function(byval This as IXMLDOMDocumentFragment ptr, byval text as BSTR) as HRESULT
 get_specified as function(byval This as IXMLDOMDocumentFragment ptr, byval isSpecified as VARIANT_BOOL ptr) as HRESULT
 get_definition as function(byval This as IXMLDOMDocumentFragment ptr, byval definitionNode as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypedValue as function(byval This as IXMLDOMDocumentFragment ptr, byval typedValue as VARIANT ptr) as HRESULT
 put_nodeTypedValue as function(byval This as IXMLDOMDocumentFragment ptr, byval typedValue as VARIANT) as HRESULT
 get_dataType as function(byval This as IXMLDOMDocumentFragment ptr, byval dataTypeName as VARIANT ptr) as HRESULT
 put_dataType as function(byval This as IXMLDOMDocumentFragment ptr, byval dataTypeName as BSTR) as HRESULT
 get_xml as function(byval This as IXMLDOMDocumentFragment ptr, byval xmlString as BSTR ptr) as HRESULT
 transformNode as function(byval This as IXMLDOMDocumentFragment ptr, byval stylesheet as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
 selectNodes as function(byval This as IXMLDOMDocumentFragment ptr, byval queryString as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 selectSingleNode as function(byval This as IXMLDOMDocumentFragment ptr, byval queryString as BSTR, byval resultNode as IXMLDOMNode ptr ptr) as HRESULT
 get_parsed as function(byval This as IXMLDOMDocumentFragment ptr, byval isParsed as VARIANT_BOOL ptr) as HRESULT
 get_namespaceURI as function(byval This as IXMLDOMDocumentFragment ptr, byval namespaceURI as BSTR ptr) as HRESULT
 get_prefix as function(byval This as IXMLDOMDocumentFragment ptr, byval prefixString as BSTR ptr) as HRESULT
 get_baseName as function(byval This as IXMLDOMDocumentFragment ptr, byval nameString as BSTR ptr) as HRESULT
 transformNodeToObject as function(byval This as IXMLDOMDocumentFragment ptr, byval stylesheet as IXMLDOMNode ptr, byval outputObject as VARIANT) as HRESULT
end type

type IXMLDOMDocumentFragment_
 lpVtbl as IXMLDOMDocumentFragmentVtbl ptr
end type

extern IID_IXMLDOMDocument as const IID

type IXMLDOMDocumentType as IXMLDOMDocumentType_
type IXMLDOMElement as IXMLDOMElement_
type IXMLDOMText as IXMLDOMText_
type IXMLDOMComment as IXMLDOMComment_
type IXMLDOMCDATASection as IXMLDOMCDATASection_
type IXMLDOMProcessingInstruction as IXMLDOMProcessingInstruction_
type IXMLDOMAttribute as IXMLDOMAttribute_
type IXMLDOMEntityReference as IXMLDOMEntityReference_
type IXMLDOMParseError as IXMLDOMParseError_

type IXMLDOMDocumentVtbl
 QueryInterface as function(byval This as IXMLDOMDocument ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMDocument ptr) as ULONG
 Release as function(byval This as IXMLDOMDocument ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMDocument ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMDocument ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMDocument ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMDocument ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_nodeName as function(byval This as IXMLDOMDocument ptr, byval name as BSTR ptr) as HRESULT
 get_nodeValue as function(byval This as IXMLDOMDocument ptr, byval value as VARIANT ptr) as HRESULT
 put_nodeValue as function(byval This as IXMLDOMDocument ptr, byval value as VARIANT) as HRESULT
 get_nodeType as function(byval This as IXMLDOMDocument ptr, byval type as DOMNodeType ptr) as HRESULT
 get_parentNode as function(byval This as IXMLDOMDocument ptr, byval parent as IXMLDOMNode ptr ptr) as HRESULT
 get_childNodes as function(byval This as IXMLDOMDocument ptr, byval childList as IXMLDOMNodeList ptr ptr) as HRESULT
 get_firstChild as function(byval This as IXMLDOMDocument ptr, byval firstChild as IXMLDOMNode ptr ptr) as HRESULT
 get_lastChild as function(byval This as IXMLDOMDocument ptr, byval lastChild as IXMLDOMNode ptr ptr) as HRESULT
 get_previousSibling as function(byval This as IXMLDOMDocument ptr, byval previousSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_nextSibling as function(byval This as IXMLDOMDocument ptr, byval nextSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_attributes as function(byval This as IXMLDOMDocument ptr, byval attributeMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
 insertBefore as function(byval This as IXMLDOMDocument ptr, byval newChild as IXMLDOMNode ptr, byval refChild as VARIANT, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 replaceChild as function(byval This as IXMLDOMDocument ptr, byval newChild as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr, byval outOldChild as IXMLDOMNode ptr ptr) as HRESULT
 removeChild as function(byval This as IXMLDOMDocument ptr, byval childNode as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr ptr) as HRESULT
 appendChild as function(byval This as IXMLDOMDocument ptr, byval newChild as IXMLDOMNode ptr, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 hasChildNodes as function(byval This as IXMLDOMDocument ptr, byval hasChild as VARIANT_BOOL ptr) as HRESULT
 get_ownerDocument as function(byval This as IXMLDOMDocument ptr, byval DOMDocument as IXMLDOMDocument ptr ptr) as HRESULT
 cloneNode as function(byval This as IXMLDOMDocument ptr, byval deep as VARIANT_BOOL, byval cloneRoot as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypeString as function(byval This as IXMLDOMDocument ptr, byval nodeType as BSTR ptr) as HRESULT
 get_text as function(byval This as IXMLDOMDocument ptr, byval text as BSTR ptr) as HRESULT
 put_text as function(byval This as IXMLDOMDocument ptr, byval text as BSTR) as HRESULT
 get_specified as function(byval This as IXMLDOMDocument ptr, byval isSpecified as VARIANT_BOOL ptr) as HRESULT
 get_definition as function(byval This as IXMLDOMDocument ptr, byval definitionNode as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypedValue as function(byval This as IXMLDOMDocument ptr, byval typedValue as VARIANT ptr) as HRESULT
 put_nodeTypedValue as function(byval This as IXMLDOMDocument ptr, byval typedValue as VARIANT) as HRESULT
 get_dataType as function(byval This as IXMLDOMDocument ptr, byval dataTypeName as VARIANT ptr) as HRESULT
 put_dataType as function(byval This as IXMLDOMDocument ptr, byval dataTypeName as BSTR) as HRESULT
 get_xml as function(byval This as IXMLDOMDocument ptr, byval xmlString as BSTR ptr) as HRESULT
 transformNode as function(byval This as IXMLDOMDocument ptr, byval stylesheet as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
 selectNodes as function(byval This as IXMLDOMDocument ptr, byval queryString as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 selectSingleNode as function(byval This as IXMLDOMDocument ptr, byval queryString as BSTR, byval resultNode as IXMLDOMNode ptr ptr) as HRESULT
 get_parsed as function(byval This as IXMLDOMDocument ptr, byval isParsed as VARIANT_BOOL ptr) as HRESULT
 get_namespaceURI as function(byval This as IXMLDOMDocument ptr, byval namespaceURI as BSTR ptr) as HRESULT
 get_prefix as function(byval This as IXMLDOMDocument ptr, byval prefixString as BSTR ptr) as HRESULT
 get_baseName as function(byval This as IXMLDOMDocument ptr, byval nameString as BSTR ptr) as HRESULT
 transformNodeToObject as function(byval This as IXMLDOMDocument ptr, byval stylesheet as IXMLDOMNode ptr, byval outputObject as VARIANT) as HRESULT
 get_doctype as function(byval This as IXMLDOMDocument ptr, byval documentType as IXMLDOMDocumentType ptr ptr) as HRESULT
 get_implementation as function(byval This as IXMLDOMDocument ptr, byval impl as IXMLDOMImplementation ptr ptr) as HRESULT
 get_documentElement as function(byval This as IXMLDOMDocument ptr, byval DOMElement as IXMLDOMElement ptr ptr) as HRESULT
 putref_documentElement as function(byval This as IXMLDOMDocument ptr, byval DOMElement as IXMLDOMElement ptr) as HRESULT
 createElement as function(byval This as IXMLDOMDocument ptr, byval tagName as BSTR, byval element as IXMLDOMElement ptr ptr) as HRESULT
 createDocumentFragment as function(byval This as IXMLDOMDocument ptr, byval docFrag as IXMLDOMDocumentFragment ptr ptr) as HRESULT
 createTextNode as function(byval This as IXMLDOMDocument ptr, byval data as BSTR, byval text as IXMLDOMText ptr ptr) as HRESULT
 createComment as function(byval This as IXMLDOMDocument ptr, byval data as BSTR, byval comment as IXMLDOMComment ptr ptr) as HRESULT
 createCDATASection as function(byval This as IXMLDOMDocument ptr, byval data as BSTR, byval cdata as IXMLDOMCDATASection ptr ptr) as HRESULT
 createProcessingInstruction as function(byval This as IXMLDOMDocument ptr, byval target as BSTR, byval data as BSTR, byval pi as IXMLDOMProcessingInstruction ptr ptr) as HRESULT
 createAttribute as function(byval This as IXMLDOMDocument ptr, byval name as BSTR, byval attribute as IXMLDOMAttribute ptr ptr) as HRESULT
 createEntityReference as function(byval This as IXMLDOMDocument ptr, byval name as BSTR, byval entityRef as IXMLDOMEntityReference ptr ptr) as HRESULT
 getElementsByTagName as function(byval This as IXMLDOMDocument ptr, byval tagName as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 createNode as function(byval This as IXMLDOMDocument ptr, byval Type as VARIANT, byval name as BSTR, byval namespaceURI as BSTR, byval node as IXMLDOMNode ptr ptr) as HRESULT
 nodeFromID as function(byval This as IXMLDOMDocument ptr, byval idString as BSTR, byval node as IXMLDOMNode ptr ptr) as HRESULT
 load as function(byval This as IXMLDOMDocument ptr, byval xmlSource as VARIANT, byval isSuccessful as VARIANT_BOOL ptr) as HRESULT
 get_readyState as function(byval This as IXMLDOMDocument ptr, byval value as LONG ptr) as HRESULT
 get_parseError as function(byval This as IXMLDOMDocument ptr, byval errorObj as IXMLDOMParseError ptr ptr) as HRESULT
 get_url as function(byval This as IXMLDOMDocument ptr, byval urlString as BSTR ptr) as HRESULT
 get_async as function(byval This as IXMLDOMDocument ptr, byval isAsync as VARIANT_BOOL ptr) as HRESULT
 put_async as function(byval This as IXMLDOMDocument ptr, byval isAsync as VARIANT_BOOL) as HRESULT
 abort as function(byval This as IXMLDOMDocument ptr) as HRESULT
 loadXML as function(byval This as IXMLDOMDocument ptr, byval bstrXML as BSTR, byval isSuccessful as VARIANT_BOOL ptr) as HRESULT
 save as function(byval This as IXMLDOMDocument ptr, byval destination as VARIANT) as HRESULT
 get_validateOnParse as function(byval This as IXMLDOMDocument ptr, byval isValidating as VARIANT_BOOL ptr) as HRESULT
 put_validateOnParse as function(byval This as IXMLDOMDocument ptr, byval isValidating as VARIANT_BOOL) as HRESULT
 get_resolveExternals as function(byval This as IXMLDOMDocument ptr, byval isResolving as VARIANT_BOOL ptr) as HRESULT
 put_resolveExternals as function(byval This as IXMLDOMDocument ptr, byval isResolving as VARIANT_BOOL) as HRESULT
 get_preserveWhiteSpace as function(byval This as IXMLDOMDocument ptr, byval isPreserving as VARIANT_BOOL ptr) as HRESULT
 put_preserveWhiteSpace as function(byval This as IXMLDOMDocument ptr, byval isPreserving as VARIANT_BOOL) as HRESULT
 put_onreadystatechange as function(byval This as IXMLDOMDocument ptr, byval readystatechangeSink as VARIANT) as HRESULT
 put_ondataavailable as function(byval This as IXMLDOMDocument ptr, byval ondataavailableSink as VARIANT) as HRESULT
 put_ontransformnode as function(byval This as IXMLDOMDocument ptr, byval ontransformnodeSink as VARIANT) as HRESULT
end type

type IXMLDOMDocument_
 lpVtbl as IXMLDOMDocumentVtbl ptr
end type


declare function IXMLDOMDocument_get_doctype_Proxy(byval This as IXMLDOMDocument ptr, byval documentType as IXMLDOMDocumentType ptr ptr) as HRESULT
declare sub IXMLDOMDocument_get_doctype_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_get_implementation_Proxy(byval This as IXMLDOMDocument ptr, byval impl as IXMLDOMImplementation ptr ptr) as HRESULT
declare sub IXMLDOMDocument_get_implementation_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_get_documentElement_Proxy(byval This as IXMLDOMDocument ptr, byval DOMElement as IXMLDOMElement ptr ptr) as HRESULT
declare sub IXMLDOMDocument_get_documentElement_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_putref_documentElement_Proxy(byval This as IXMLDOMDocument ptr, byval DOMElement as IXMLDOMElement ptr) as HRESULT
declare sub IXMLDOMDocument_putref_documentElement_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_createElement_Proxy(byval This as IXMLDOMDocument ptr, byval tagName as BSTR, byval element as IXMLDOMElement ptr ptr) as HRESULT
declare sub IXMLDOMDocument_createElement_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_createDocumentFragment_Proxy(byval This as IXMLDOMDocument ptr, byval docFrag as IXMLDOMDocumentFragment ptr ptr) as HRESULT
declare sub IXMLDOMDocument_createDocumentFragment_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_createTextNode_Proxy(byval This as IXMLDOMDocument ptr, byval data as BSTR, byval text as IXMLDOMText ptr ptr) as HRESULT
declare sub IXMLDOMDocument_createTextNode_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_createComment_Proxy(byval This as IXMLDOMDocument ptr, byval data as BSTR, byval comment as IXMLDOMComment ptr ptr) as HRESULT
declare sub IXMLDOMDocument_createComment_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_createCDATASection_Proxy(byval This as IXMLDOMDocument ptr, byval data as BSTR, byval cdata as IXMLDOMCDATASection ptr ptr) as HRESULT
declare sub IXMLDOMDocument_createCDATASection_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_createProcessingInstruction_Proxy(byval This as IXMLDOMDocument ptr, byval target as BSTR, byval data as BSTR, byval pi as IXMLDOMProcessingInstruction ptr ptr) as HRESULT
declare sub IXMLDOMDocument_createProcessingInstruction_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_createAttribute_Proxy(byval This as IXMLDOMDocument ptr, byval name as BSTR, byval attribute as IXMLDOMAttribute ptr ptr) as HRESULT
declare sub IXMLDOMDocument_createAttribute_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_createEntityReference_Proxy(byval This as IXMLDOMDocument ptr, byval name as BSTR, byval entityRef as IXMLDOMEntityReference ptr ptr) as HRESULT
declare sub IXMLDOMDocument_createEntityReference_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_getElementsByTagName_Proxy(byval This as IXMLDOMDocument ptr, byval tagName as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
declare sub IXMLDOMDocument_getElementsByTagName_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_createNode_Proxy(byval This as IXMLDOMDocument ptr, byval Type as VARIANT, byval name as BSTR, byval namespaceURI as BSTR, byval node as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMDocument_createNode_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_nodeFromID_Proxy(byval This as IXMLDOMDocument ptr, byval idString as BSTR, byval node as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMDocument_nodeFromID_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_load_Proxy(byval This as IXMLDOMDocument ptr, byval xmlSource as VARIANT, byval isSuccessful as VARIANT_BOOL ptr) as HRESULT
declare sub IXMLDOMDocument_load_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_get_readyState_Proxy(byval This as IXMLDOMDocument ptr, byval value as LONG ptr) as HRESULT
declare sub IXMLDOMDocument_get_readyState_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_get_parseError_Proxy(byval This as IXMLDOMDocument ptr, byval errorObj as IXMLDOMParseError ptr ptr) as HRESULT
declare sub IXMLDOMDocument_get_parseError_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_get_url_Proxy(byval This as IXMLDOMDocument ptr, byval urlString as BSTR ptr) as HRESULT
declare sub IXMLDOMDocument_get_url_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_get_async_Proxy(byval This as IXMLDOMDocument ptr, byval isAsync as VARIANT_BOOL ptr) as HRESULT
declare sub IXMLDOMDocument_get_async_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_put_async_Proxy(byval This as IXMLDOMDocument ptr, byval isAsync as VARIANT_BOOL) as HRESULT
declare sub IXMLDOMDocument_put_async_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_abort_Proxy(byval This as IXMLDOMDocument ptr) as HRESULT
declare sub IXMLDOMDocument_abort_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_loadXML_Proxy(byval This as IXMLDOMDocument ptr, byval bstrXML as BSTR, byval isSuccessful as VARIANT_BOOL ptr) as HRESULT
declare sub IXMLDOMDocument_loadXML_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_save_Proxy(byval This as IXMLDOMDocument ptr, byval destination as VARIANT) as HRESULT
declare sub IXMLDOMDocument_save_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_get_validateOnParse_Proxy(byval This as IXMLDOMDocument ptr, byval isValidating as VARIANT_BOOL ptr) as HRESULT
declare sub IXMLDOMDocument_get_validateOnParse_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_put_validateOnParse_Proxy(byval This as IXMLDOMDocument ptr, byval isValidating as VARIANT_BOOL) as HRESULT
declare sub IXMLDOMDocument_put_validateOnParse_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_get_resolveExternals_Proxy(byval This as IXMLDOMDocument ptr, byval isResolving as VARIANT_BOOL ptr) as HRESULT
declare sub IXMLDOMDocument_get_resolveExternals_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_put_resolveExternals_Proxy(byval This as IXMLDOMDocument ptr, byval isResolving as VARIANT_BOOL) as HRESULT
declare sub IXMLDOMDocument_put_resolveExternals_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_get_preserveWhiteSpace_Proxy(byval This as IXMLDOMDocument ptr, byval isPreserving as VARIANT_BOOL ptr) as HRESULT
declare sub IXMLDOMDocument_get_preserveWhiteSpace_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_put_preserveWhiteSpace_Proxy(byval This as IXMLDOMDocument ptr, byval isPreserving as VARIANT_BOOL) as HRESULT
declare sub IXMLDOMDocument_put_preserveWhiteSpace_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_put_onreadystatechange_Proxy(byval This as IXMLDOMDocument ptr, byval readystatechangeSink as VARIANT) as HRESULT
declare sub IXMLDOMDocument_put_onreadystatechange_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_put_ondataavailable_Proxy(byval This as IXMLDOMDocument ptr, byval ondataavailableSink as VARIANT) as HRESULT
declare sub IXMLDOMDocument_put_ondataavailable_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocument_put_ontransformnode_Proxy(byval This as IXMLDOMDocument ptr, byval ontransformnodeSink as VARIANT) as HRESULT
declare sub IXMLDOMDocument_put_ontransformnode_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLDOMNodeList as const IID

type IXMLDOMNodeListVtbl
 QueryInterface as function(byval This as IXMLDOMNodeList ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMNodeList ptr) as ULONG
 Release as function(byval This as IXMLDOMNodeList ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMNodeList ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMNodeList ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMNodeList ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMNodeList ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_item as function(byval This as IXMLDOMNodeList ptr, byval index as LONG, byval listItem as IXMLDOMNode ptr ptr) as HRESULT
 get_length as function(byval This as IXMLDOMNodeList ptr, byval listLength as LONG ptr) as HRESULT
 nextNode as function(byval This as IXMLDOMNodeList ptr, byval nextItem as IXMLDOMNode ptr ptr) as HRESULT
 reset as function(byval This as IXMLDOMNodeList ptr) as HRESULT
 get__newEnum as function(byval This as IXMLDOMNodeList ptr, byval ppUnk as IUnknown ptr ptr) as HRESULT
end type

type IXMLDOMNodeList_
 lpVtbl as IXMLDOMNodeListVtbl ptr
end type


declare function IXMLDOMNodeList_get_item_Proxy(byval This as IXMLDOMNodeList ptr, byval index as LONG, byval listItem as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNodeList_get_item_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNodeList_get_length_Proxy(byval This as IXMLDOMNodeList ptr, byval listLength as LONG ptr) as HRESULT
declare sub IXMLDOMNodeList_get_length_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNodeList_nextNode_Proxy(byval This as IXMLDOMNodeList ptr, byval nextItem as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNodeList_nextNode_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNodeList_reset_Proxy(byval This as IXMLDOMNodeList ptr) as HRESULT
declare sub IXMLDOMNodeList_reset_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNodeList_get__newEnum_Proxy(byval This as IXMLDOMNodeList ptr, byval ppUnk as IUnknown ptr ptr) as HRESULT
declare sub IXMLDOMNodeList_get__newEnum_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLDOMNamedNodeMap as const IID

type IXMLDOMNamedNodeMapVtbl
 QueryInterface as function(byval This as IXMLDOMNamedNodeMap ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMNamedNodeMap ptr) as ULONG
 Release as function(byval This as IXMLDOMNamedNodeMap ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMNamedNodeMap ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMNamedNodeMap ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMNamedNodeMap ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMNamedNodeMap ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 getNamedItem as function(byval This as IXMLDOMNamedNodeMap ptr, byval name as BSTR, byval namedItem as IXMLDOMNode ptr ptr) as HRESULT
 setNamedItem as function(byval This as IXMLDOMNamedNodeMap ptr, byval newItem as IXMLDOMNode ptr, byval nameItem as IXMLDOMNode ptr ptr) as HRESULT
 removeNamedItem as function(byval This as IXMLDOMNamedNodeMap ptr, byval name as BSTR, byval namedItem as IXMLDOMNode ptr ptr) as HRESULT
 get_item as function(byval This as IXMLDOMNamedNodeMap ptr, byval index as LONG, byval listItem as IXMLDOMNode ptr ptr) as HRESULT
 get_length as function(byval This as IXMLDOMNamedNodeMap ptr, byval listLength as LONG ptr) as HRESULT
 getQualifiedItem as function(byval This as IXMLDOMNamedNodeMap ptr, byval baseName as BSTR, byval namespaceURI as BSTR, byval qualifiedItem as IXMLDOMNode ptr ptr) as HRESULT
 removeQualifiedItem as function(byval This as IXMLDOMNamedNodeMap ptr, byval baseName as BSTR, byval namespaceURI as BSTR, byval qualifiedItem as IXMLDOMNode ptr ptr) as HRESULT
 nextNode as function(byval This as IXMLDOMNamedNodeMap ptr, byval nextItem as IXMLDOMNode ptr ptr) as HRESULT
 reset as function(byval This as IXMLDOMNamedNodeMap ptr) as HRESULT
 get__newEnum as function(byval This as IXMLDOMNamedNodeMap ptr, byval ppUnk as IUnknown ptr ptr) as HRESULT
end type

type IXMLDOMNamedNodeMap_
 lpVtbl as IXMLDOMNamedNodeMapVtbl ptr
end type


declare function IXMLDOMNamedNodeMap_getNamedItem_Proxy(byval This as IXMLDOMNamedNodeMap ptr, byval name as BSTR, byval namedItem as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNamedNodeMap_getNamedItem_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNamedNodeMap_setNamedItem_Proxy(byval This as IXMLDOMNamedNodeMap ptr, byval newItem as IXMLDOMNode ptr, byval nameItem as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNamedNodeMap_setNamedItem_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNamedNodeMap_removeNamedItem_Proxy(byval This as IXMLDOMNamedNodeMap ptr, byval name as BSTR, byval namedItem as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNamedNodeMap_removeNamedItem_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNamedNodeMap_get_item_Proxy(byval This as IXMLDOMNamedNodeMap ptr, byval index as LONG, byval listItem as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNamedNodeMap_get_item_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNamedNodeMap_get_length_Proxy(byval This as IXMLDOMNamedNodeMap ptr, byval listLength as LONG ptr) as HRESULT
declare sub IXMLDOMNamedNodeMap_get_length_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNamedNodeMap_getQualifiedItem_Proxy(byval This as IXMLDOMNamedNodeMap ptr, byval baseName as BSTR, byval namespaceURI as BSTR, byval qualifiedItem as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNamedNodeMap_getQualifiedItem_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNamedNodeMap_removeQualifiedItem_Proxy(byval This as IXMLDOMNamedNodeMap ptr, byval baseName as BSTR, byval namespaceURI as BSTR, byval qualifiedItem as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNamedNodeMap_removeQualifiedItem_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNamedNodeMap_nextNode_Proxy(byval This as IXMLDOMNamedNodeMap ptr, byval nextItem as IXMLDOMNode ptr ptr) as HRESULT
declare sub IXMLDOMNamedNodeMap_nextNode_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNamedNodeMap_reset_Proxy(byval This as IXMLDOMNamedNodeMap ptr) as HRESULT
declare sub IXMLDOMNamedNodeMap_reset_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNamedNodeMap_get__newEnum_Proxy(byval This as IXMLDOMNamedNodeMap ptr, byval ppUnk as IUnknown ptr ptr) as HRESULT
declare sub IXMLDOMNamedNodeMap_get__newEnum_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLDOMCharacterData as const IID
type IXMLDOMCharacterData as IXMLDOMCharacterData_

type IXMLDOMCharacterDataVtbl
 QueryInterface as function(byval This as IXMLDOMCharacterData ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMCharacterData ptr) as ULONG
 Release as function(byval This as IXMLDOMCharacterData ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMCharacterData ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMCharacterData ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMCharacterData ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMCharacterData ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_nodeName as function(byval This as IXMLDOMCharacterData ptr, byval name as BSTR ptr) as HRESULT
 get_nodeValue as function(byval This as IXMLDOMCharacterData ptr, byval value as VARIANT ptr) as HRESULT
 put_nodeValue as function(byval This as IXMLDOMCharacterData ptr, byval value as VARIANT) as HRESULT
 get_nodeType as function(byval This as IXMLDOMCharacterData ptr, byval type as DOMNodeType ptr) as HRESULT
 get_parentNode as function(byval This as IXMLDOMCharacterData ptr, byval parent as IXMLDOMNode ptr ptr) as HRESULT
 get_childNodes as function(byval This as IXMLDOMCharacterData ptr, byval childList as IXMLDOMNodeList ptr ptr) as HRESULT
 get_firstChild as function(byval This as IXMLDOMCharacterData ptr, byval firstChild as IXMLDOMNode ptr ptr) as HRESULT
 get_lastChild as function(byval This as IXMLDOMCharacterData ptr, byval lastChild as IXMLDOMNode ptr ptr) as HRESULT
 get_previousSibling as function(byval This as IXMLDOMCharacterData ptr, byval previousSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_nextSibling as function(byval This as IXMLDOMCharacterData ptr, byval nextSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_attributes as function(byval This as IXMLDOMCharacterData ptr, byval attributeMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
 insertBefore as function(byval This as IXMLDOMCharacterData ptr, byval newChild as IXMLDOMNode ptr, byval refChild as VARIANT, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 replaceChild as function(byval This as IXMLDOMCharacterData ptr, byval newChild as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr, byval outOldChild as IXMLDOMNode ptr ptr) as HRESULT
 removeChild as function(byval This as IXMLDOMCharacterData ptr, byval childNode as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr ptr) as HRESULT
 appendChild as function(byval This as IXMLDOMCharacterData ptr, byval newChild as IXMLDOMNode ptr, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 hasChildNodes as function(byval This as IXMLDOMCharacterData ptr, byval hasChild as VARIANT_BOOL ptr) as HRESULT
 get_ownerDocument as function(byval This as IXMLDOMCharacterData ptr, byval DOMDocument as IXMLDOMDocument ptr ptr) as HRESULT
 cloneNode as function(byval This as IXMLDOMCharacterData ptr, byval deep as VARIANT_BOOL, byval cloneRoot as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypeString as function(byval This as IXMLDOMCharacterData ptr, byval nodeType as BSTR ptr) as HRESULT
 get_text as function(byval This as IXMLDOMCharacterData ptr, byval text as BSTR ptr) as HRESULT
 put_text as function(byval This as IXMLDOMCharacterData ptr, byval text as BSTR) as HRESULT
 get_specified as function(byval This as IXMLDOMCharacterData ptr, byval isSpecified as VARIANT_BOOL ptr) as HRESULT
 get_definition as function(byval This as IXMLDOMCharacterData ptr, byval definitionNode as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypedValue as function(byval This as IXMLDOMCharacterData ptr, byval typedValue as VARIANT ptr) as HRESULT
 put_nodeTypedValue as function(byval This as IXMLDOMCharacterData ptr, byval typedValue as VARIANT) as HRESULT
 get_dataType as function(byval This as IXMLDOMCharacterData ptr, byval dataTypeName as VARIANT ptr) as HRESULT
 put_dataType as function(byval This as IXMLDOMCharacterData ptr, byval dataTypeName as BSTR) as HRESULT
 get_xml as function(byval This as IXMLDOMCharacterData ptr, byval xmlString as BSTR ptr) as HRESULT
 transformNode as function(byval This as IXMLDOMCharacterData ptr, byval stylesheet as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
 selectNodes as function(byval This as IXMLDOMCharacterData ptr, byval queryString as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 selectSingleNode as function(byval This as IXMLDOMCharacterData ptr, byval queryString as BSTR, byval resultNode as IXMLDOMNode ptr ptr) as HRESULT
 get_parsed as function(byval This as IXMLDOMCharacterData ptr, byval isParsed as VARIANT_BOOL ptr) as HRESULT
 get_namespaceURI as function(byval This as IXMLDOMCharacterData ptr, byval namespaceURI as BSTR ptr) as HRESULT
 get_prefix as function(byval This as IXMLDOMCharacterData ptr, byval prefixString as BSTR ptr) as HRESULT
 get_baseName as function(byval This as IXMLDOMCharacterData ptr, byval nameString as BSTR ptr) as HRESULT
 transformNodeToObject as function(byval This as IXMLDOMCharacterData ptr, byval stylesheet as IXMLDOMNode ptr, byval outputObject as VARIANT) as HRESULT
 get_data as function(byval This as IXMLDOMCharacterData ptr, byval data as BSTR ptr) as HRESULT
 put_data as function(byval This as IXMLDOMCharacterData ptr, byval data as BSTR) as HRESULT
 get_length as function(byval This as IXMLDOMCharacterData ptr, byval dataLength as LONG ptr) as HRESULT
 substringData as function(byval This as IXMLDOMCharacterData ptr, byval offset as LONG, byval count as LONG, byval data as BSTR ptr) as HRESULT
 appendData as function(byval This as IXMLDOMCharacterData ptr, byval data as BSTR) as HRESULT
 insertData as function(byval This as IXMLDOMCharacterData ptr, byval offset as LONG, byval data as BSTR) as HRESULT
 deleteData as function(byval This as IXMLDOMCharacterData ptr, byval offset as LONG, byval count as LONG) as HRESULT
 replaceData as function(byval This as IXMLDOMCharacterData ptr, byval offset as LONG, byval count as LONG, byval data as BSTR) as HRESULT
end type

type IXMLDOMCharacterData_
 lpVtbl as IXMLDOMCharacterDataVtbl ptr
end type


declare function IXMLDOMCharacterData_get_data_Proxy(byval This as IXMLDOMCharacterData ptr, byval data as BSTR ptr) as HRESULT
declare sub IXMLDOMCharacterData_get_data_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMCharacterData_put_data_Proxy(byval This as IXMLDOMCharacterData ptr, byval data as BSTR) as HRESULT
declare sub IXMLDOMCharacterData_put_data_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMCharacterData_get_length_Proxy(byval This as IXMLDOMCharacterData ptr, byval dataLength as LONG ptr) as HRESULT
declare sub IXMLDOMCharacterData_get_length_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMCharacterData_substringData_Proxy(byval This as IXMLDOMCharacterData ptr, byval offset as LONG, byval count as LONG, byval data as BSTR ptr) as HRESULT
declare sub IXMLDOMCharacterData_substringData_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMCharacterData_appendData_Proxy(byval This as IXMLDOMCharacterData ptr, byval data as BSTR) as HRESULT
declare sub IXMLDOMCharacterData_appendData_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMCharacterData_insertData_Proxy(byval This as IXMLDOMCharacterData ptr, byval offset as LONG, byval data as BSTR) as HRESULT
declare sub IXMLDOMCharacterData_insertData_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMCharacterData_deleteData_Proxy(byval This as IXMLDOMCharacterData ptr, byval offset as LONG, byval count as LONG) as HRESULT
declare sub IXMLDOMCharacterData_deleteData_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMCharacterData_replaceData_Proxy(byval This as IXMLDOMCharacterData ptr, byval offset as LONG, byval count as LONG, byval data as BSTR) as HRESULT
declare sub IXMLDOMCharacterData_replaceData_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLDOMAttribute as const IID

type IXMLDOMAttributeVtbl
 QueryInterface as function(byval This as IXMLDOMAttribute ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMAttribute ptr) as ULONG
 Release as function(byval This as IXMLDOMAttribute ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMAttribute ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMAttribute ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMAttribute ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMAttribute ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_nodeName as function(byval This as IXMLDOMAttribute ptr, byval name as BSTR ptr) as HRESULT
 get_nodeValue as function(byval This as IXMLDOMAttribute ptr, byval value as VARIANT ptr) as HRESULT
 put_nodeValue as function(byval This as IXMLDOMAttribute ptr, byval value as VARIANT) as HRESULT
 get_nodeType as function(byval This as IXMLDOMAttribute ptr, byval type as DOMNodeType ptr) as HRESULT
 get_parentNode as function(byval This as IXMLDOMAttribute ptr, byval parent as IXMLDOMNode ptr ptr) as HRESULT
 get_childNodes as function(byval This as IXMLDOMAttribute ptr, byval childList as IXMLDOMNodeList ptr ptr) as HRESULT
 get_firstChild as function(byval This as IXMLDOMAttribute ptr, byval firstChild as IXMLDOMNode ptr ptr) as HRESULT
 get_lastChild as function(byval This as IXMLDOMAttribute ptr, byval lastChild as IXMLDOMNode ptr ptr) as HRESULT
 get_previousSibling as function(byval This as IXMLDOMAttribute ptr, byval previousSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_nextSibling as function(byval This as IXMLDOMAttribute ptr, byval nextSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_attributes as function(byval This as IXMLDOMAttribute ptr, byval attributeMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
 insertBefore as function(byval This as IXMLDOMAttribute ptr, byval newChild as IXMLDOMNode ptr, byval refChild as VARIANT, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 replaceChild as function(byval This as IXMLDOMAttribute ptr, byval newChild as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr, byval outOldChild as IXMLDOMNode ptr ptr) as HRESULT
 removeChild as function(byval This as IXMLDOMAttribute ptr, byval childNode as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr ptr) as HRESULT
 appendChild as function(byval This as IXMLDOMAttribute ptr, byval newChild as IXMLDOMNode ptr, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 hasChildNodes as function(byval This as IXMLDOMAttribute ptr, byval hasChild as VARIANT_BOOL ptr) as HRESULT
 get_ownerDocument as function(byval This as IXMLDOMAttribute ptr, byval DOMDocument as IXMLDOMDocument ptr ptr) as HRESULT
 cloneNode as function(byval This as IXMLDOMAttribute ptr, byval deep as VARIANT_BOOL, byval cloneRoot as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypeString as function(byval This as IXMLDOMAttribute ptr, byval nodeType as BSTR ptr) as HRESULT
 get_text as function(byval This as IXMLDOMAttribute ptr, byval text as BSTR ptr) as HRESULT
 put_text as function(byval This as IXMLDOMAttribute ptr, byval text as BSTR) as HRESULT
 get_specified as function(byval This as IXMLDOMAttribute ptr, byval isSpecified as VARIANT_BOOL ptr) as HRESULT
 get_definition as function(byval This as IXMLDOMAttribute ptr, byval definitionNode as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypedValue as function(byval This as IXMLDOMAttribute ptr, byval typedValue as VARIANT ptr) as HRESULT
 put_nodeTypedValue as function(byval This as IXMLDOMAttribute ptr, byval typedValue as VARIANT) as HRESULT
 get_dataType as function(byval This as IXMLDOMAttribute ptr, byval dataTypeName as VARIANT ptr) as HRESULT
 put_dataType as function(byval This as IXMLDOMAttribute ptr, byval dataTypeName as BSTR) as HRESULT
 get_xml as function(byval This as IXMLDOMAttribute ptr, byval xmlString as BSTR ptr) as HRESULT
 transformNode as function(byval This as IXMLDOMAttribute ptr, byval stylesheet as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
 selectNodes as function(byval This as IXMLDOMAttribute ptr, byval queryString as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 selectSingleNode as function(byval This as IXMLDOMAttribute ptr, byval queryString as BSTR, byval resultNode as IXMLDOMNode ptr ptr) as HRESULT
 get_parsed as function(byval This as IXMLDOMAttribute ptr, byval isParsed as VARIANT_BOOL ptr) as HRESULT
 get_namespaceURI as function(byval This as IXMLDOMAttribute ptr, byval namespaceURI as BSTR ptr) as HRESULT
 get_prefix as function(byval This as IXMLDOMAttribute ptr, byval prefixString as BSTR ptr) as HRESULT
 get_baseName as function(byval This as IXMLDOMAttribute ptr, byval nameString as BSTR ptr) as HRESULT
 transformNodeToObject as function(byval This as IXMLDOMAttribute ptr, byval stylesheet as IXMLDOMNode ptr, byval outputObject as VARIANT) as HRESULT
 get_name as function(byval This as IXMLDOMAttribute ptr, byval attributeName as BSTR ptr) as HRESULT
 get_value as function(byval This as IXMLDOMAttribute ptr, byval attributeValue as VARIANT ptr) as HRESULT
 put_value as function(byval This as IXMLDOMAttribute ptr, byval attributeValue as VARIANT) as HRESULT
end type

type IXMLDOMAttribute_
 lpVtbl as IXMLDOMAttributeVtbl ptr
end type


declare function IXMLDOMAttribute_get_name_Proxy(byval This as IXMLDOMAttribute ptr, byval attributeName as BSTR ptr) as HRESULT
declare sub IXMLDOMAttribute_get_name_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMAttribute_get_value_Proxy(byval This as IXMLDOMAttribute ptr, byval attributeValue as VARIANT ptr) as HRESULT
declare sub IXMLDOMAttribute_get_value_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMAttribute_put_value_Proxy(byval This as IXMLDOMAttribute ptr, byval attributeValue as VARIANT) as HRESULT
declare sub IXMLDOMAttribute_put_value_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLDOMElement as const IID

type IXMLDOMElementVtbl
 QueryInterface as function(byval This as IXMLDOMElement ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMElement ptr) as ULONG
 Release as function(byval This as IXMLDOMElement ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMElement ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMElement ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMElement ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMElement ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_nodeName as function(byval This as IXMLDOMElement ptr, byval name as BSTR ptr) as HRESULT
 get_nodeValue as function(byval This as IXMLDOMElement ptr, byval value as VARIANT ptr) as HRESULT
 put_nodeValue as function(byval This as IXMLDOMElement ptr, byval value as VARIANT) as HRESULT
 get_nodeType as function(byval This as IXMLDOMElement ptr, byval type as DOMNodeType ptr) as HRESULT
 get_parentNode as function(byval This as IXMLDOMElement ptr, byval parent as IXMLDOMNode ptr ptr) as HRESULT
 get_childNodes as function(byval This as IXMLDOMElement ptr, byval childList as IXMLDOMNodeList ptr ptr) as HRESULT
 get_firstChild as function(byval This as IXMLDOMElement ptr, byval firstChild as IXMLDOMNode ptr ptr) as HRESULT
 get_lastChild as function(byval This as IXMLDOMElement ptr, byval lastChild as IXMLDOMNode ptr ptr) as HRESULT
 get_previousSibling as function(byval This as IXMLDOMElement ptr, byval previousSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_nextSibling as function(byval This as IXMLDOMElement ptr, byval nextSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_attributes as function(byval This as IXMLDOMElement ptr, byval attributeMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
 insertBefore as function(byval This as IXMLDOMElement ptr, byval newChild as IXMLDOMNode ptr, byval refChild as VARIANT, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 replaceChild as function(byval This as IXMLDOMElement ptr, byval newChild as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr, byval outOldChild as IXMLDOMNode ptr ptr) as HRESULT
 removeChild as function(byval This as IXMLDOMElement ptr, byval childNode as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr ptr) as HRESULT
 appendChild as function(byval This as IXMLDOMElement ptr, byval newChild as IXMLDOMNode ptr, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 hasChildNodes as function(byval This as IXMLDOMElement ptr, byval hasChild as VARIANT_BOOL ptr) as HRESULT
 get_ownerDocument as function(byval This as IXMLDOMElement ptr, byval DOMDocument as IXMLDOMDocument ptr ptr) as HRESULT
 cloneNode as function(byval This as IXMLDOMElement ptr, byval deep as VARIANT_BOOL, byval cloneRoot as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypeString as function(byval This as IXMLDOMElement ptr, byval nodeType as BSTR ptr) as HRESULT
 get_text as function(byval This as IXMLDOMElement ptr, byval text as BSTR ptr) as HRESULT
 put_text as function(byval This as IXMLDOMElement ptr, byval text as BSTR) as HRESULT
 get_specified as function(byval This as IXMLDOMElement ptr, byval isSpecified as VARIANT_BOOL ptr) as HRESULT
 get_definition as function(byval This as IXMLDOMElement ptr, byval definitionNode as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypedValue as function(byval This as IXMLDOMElement ptr, byval typedValue as VARIANT ptr) as HRESULT
 put_nodeTypedValue as function(byval This as IXMLDOMElement ptr, byval typedValue as VARIANT) as HRESULT
 get_dataType as function(byval This as IXMLDOMElement ptr, byval dataTypeName as VARIANT ptr) as HRESULT
 put_dataType as function(byval This as IXMLDOMElement ptr, byval dataTypeName as BSTR) as HRESULT
 get_xml as function(byval This as IXMLDOMElement ptr, byval xmlString as BSTR ptr) as HRESULT
 transformNode as function(byval This as IXMLDOMElement ptr, byval stylesheet as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
 selectNodes as function(byval This as IXMLDOMElement ptr, byval queryString as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 selectSingleNode as function(byval This as IXMLDOMElement ptr, byval queryString as BSTR, byval resultNode as IXMLDOMNode ptr ptr) as HRESULT
 get_parsed as function(byval This as IXMLDOMElement ptr, byval isParsed as VARIANT_BOOL ptr) as HRESULT
 get_namespaceURI as function(byval This as IXMLDOMElement ptr, byval namespaceURI as BSTR ptr) as HRESULT
 get_prefix as function(byval This as IXMLDOMElement ptr, byval prefixString as BSTR ptr) as HRESULT
 get_baseName as function(byval This as IXMLDOMElement ptr, byval nameString as BSTR ptr) as HRESULT
 transformNodeToObject as function(byval This as IXMLDOMElement ptr, byval stylesheet as IXMLDOMNode ptr, byval outputObject as VARIANT) as HRESULT
 get_tagName as function(byval This as IXMLDOMElement ptr, byval tagName as BSTR ptr) as HRESULT
 getAttribute as function(byval This as IXMLDOMElement ptr, byval name as BSTR, byval value as VARIANT ptr) as HRESULT
 setAttribute as function(byval This as IXMLDOMElement ptr, byval name as BSTR, byval value as VARIANT) as HRESULT
 removeAttribute as function(byval This as IXMLDOMElement ptr, byval name as BSTR) as HRESULT
 getAttributeNode as function(byval This as IXMLDOMElement ptr, byval name as BSTR, byval attributeNode as IXMLDOMAttribute ptr ptr) as HRESULT
 setAttributeNode as function(byval This as IXMLDOMElement ptr, byval DOMAttribute as IXMLDOMAttribute ptr, byval attributeNode as IXMLDOMAttribute ptr ptr) as HRESULT
 removeAttributeNode as function(byval This as IXMLDOMElement ptr, byval DOMAttribute as IXMLDOMAttribute ptr, byval attributeNode as IXMLDOMAttribute ptr ptr) as HRESULT
 getElementsByTagName as function(byval This as IXMLDOMElement ptr, byval tagName as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 normalize as function(byval This as IXMLDOMElement ptr) as HRESULT
end type

type IXMLDOMElement_
 lpVtbl as IXMLDOMElementVtbl ptr
end type


declare function IXMLDOMElement_get_tagName_Proxy(byval This as IXMLDOMElement ptr, byval tagName as BSTR ptr) as HRESULT
declare sub IXMLDOMElement_get_tagName_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMElement_getAttribute_Proxy(byval This as IXMLDOMElement ptr, byval name as BSTR, byval value as VARIANT ptr) as HRESULT
declare sub IXMLDOMElement_getAttribute_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMElement_setAttribute_Proxy(byval This as IXMLDOMElement ptr, byval name as BSTR, byval value as VARIANT) as HRESULT
declare sub IXMLDOMElement_setAttribute_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMElement_removeAttribute_Proxy(byval This as IXMLDOMElement ptr, byval name as BSTR) as HRESULT
declare sub IXMLDOMElement_removeAttribute_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMElement_getAttributeNode_Proxy(byval This as IXMLDOMElement ptr, byval name as BSTR, byval attributeNode as IXMLDOMAttribute ptr ptr) as HRESULT
declare sub IXMLDOMElement_getAttributeNode_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMElement_setAttributeNode_Proxy(byval This as IXMLDOMElement ptr, byval DOMAttribute as IXMLDOMAttribute ptr, byval attributeNode as IXMLDOMAttribute ptr ptr) as HRESULT
declare sub IXMLDOMElement_setAttributeNode_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMElement_removeAttributeNode_Proxy(byval This as IXMLDOMElement ptr, byval DOMAttribute as IXMLDOMAttribute ptr, byval attributeNode as IXMLDOMAttribute ptr ptr) as HRESULT
declare sub IXMLDOMElement_removeAttributeNode_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMElement_getElementsByTagName_Proxy(byval This as IXMLDOMElement ptr, byval tagName as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
declare sub IXMLDOMElement_getElementsByTagName_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMElement_normalize_Proxy(byval This as IXMLDOMElement ptr) as HRESULT
declare sub IXMLDOMElement_normalize_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLDOMText as const IID

type IXMLDOMTextVtbl
 QueryInterface as function(byval This as IXMLDOMText ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMText ptr) as ULONG
 Release as function(byval This as IXMLDOMText ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMText ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMText ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMText ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMText ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_nodeName as function(byval This as IXMLDOMText ptr, byval name as BSTR ptr) as HRESULT
 get_nodeValue as function(byval This as IXMLDOMText ptr, byval value as VARIANT ptr) as HRESULT
 put_nodeValue as function(byval This as IXMLDOMText ptr, byval value as VARIANT) as HRESULT
 get_nodeType as function(byval This as IXMLDOMText ptr, byval type as DOMNodeType ptr) as HRESULT
 get_parentNode as function(byval This as IXMLDOMText ptr, byval parent as IXMLDOMNode ptr ptr) as HRESULT
 get_childNodes as function(byval This as IXMLDOMText ptr, byval childList as IXMLDOMNodeList ptr ptr) as HRESULT
 get_firstChild as function(byval This as IXMLDOMText ptr, byval firstChild as IXMLDOMNode ptr ptr) as HRESULT
 get_lastChild as function(byval This as IXMLDOMText ptr, byval lastChild as IXMLDOMNode ptr ptr) as HRESULT
 get_previousSibling as function(byval This as IXMLDOMText ptr, byval previousSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_nextSibling as function(byval This as IXMLDOMText ptr, byval nextSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_attributes as function(byval This as IXMLDOMText ptr, byval attributeMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
 insertBefore as function(byval This as IXMLDOMText ptr, byval newChild as IXMLDOMNode ptr, byval refChild as VARIANT, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 replaceChild as function(byval This as IXMLDOMText ptr, byval newChild as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr, byval outOldChild as IXMLDOMNode ptr ptr) as HRESULT
 removeChild as function(byval This as IXMLDOMText ptr, byval childNode as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr ptr) as HRESULT
 appendChild as function(byval This as IXMLDOMText ptr, byval newChild as IXMLDOMNode ptr, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 hasChildNodes as function(byval This as IXMLDOMText ptr, byval hasChild as VARIANT_BOOL ptr) as HRESULT
 get_ownerDocument as function(byval This as IXMLDOMText ptr, byval DOMDocument as IXMLDOMDocument ptr ptr) as HRESULT
 cloneNode as function(byval This as IXMLDOMText ptr, byval deep as VARIANT_BOOL, byval cloneRoot as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypeString as function(byval This as IXMLDOMText ptr, byval nodeType as BSTR ptr) as HRESULT
 get_text as function(byval This as IXMLDOMText ptr, byval text as BSTR ptr) as HRESULT
 put_text as function(byval This as IXMLDOMText ptr, byval text as BSTR) as HRESULT
 get_specified as function(byval This as IXMLDOMText ptr, byval isSpecified as VARIANT_BOOL ptr) as HRESULT
 get_definition as function(byval This as IXMLDOMText ptr, byval definitionNode as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypedValue as function(byval This as IXMLDOMText ptr, byval typedValue as VARIANT ptr) as HRESULT
 put_nodeTypedValue as function(byval This as IXMLDOMText ptr, byval typedValue as VARIANT) as HRESULT
 get_dataType as function(byval This as IXMLDOMText ptr, byval dataTypeName as VARIANT ptr) as HRESULT
 put_dataType as function(byval This as IXMLDOMText ptr, byval dataTypeName as BSTR) as HRESULT
 get_xml as function(byval This as IXMLDOMText ptr, byval xmlString as BSTR ptr) as HRESULT
 transformNode as function(byval This as IXMLDOMText ptr, byval stylesheet as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
 selectNodes as function(byval This as IXMLDOMText ptr, byval queryString as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 selectSingleNode as function(byval This as IXMLDOMText ptr, byval queryString as BSTR, byval resultNode as IXMLDOMNode ptr ptr) as HRESULT
 get_parsed as function(byval This as IXMLDOMText ptr, byval isParsed as VARIANT_BOOL ptr) as HRESULT
 get_namespaceURI as function(byval This as IXMLDOMText ptr, byval namespaceURI as BSTR ptr) as HRESULT
 get_prefix as function(byval This as IXMLDOMText ptr, byval prefixString as BSTR ptr) as HRESULT
 get_baseName as function(byval This as IXMLDOMText ptr, byval nameString as BSTR ptr) as HRESULT
 transformNodeToObject as function(byval This as IXMLDOMText ptr, byval stylesheet as IXMLDOMNode ptr, byval outputObject as VARIANT) as HRESULT
 get_data as function(byval This as IXMLDOMText ptr, byval data as BSTR ptr) as HRESULT
 put_data as function(byval This as IXMLDOMText ptr, byval data as BSTR) as HRESULT
 get_length as function(byval This as IXMLDOMText ptr, byval dataLength as LONG ptr) as HRESULT
 substringData as function(byval This as IXMLDOMText ptr, byval offset as LONG, byval count as LONG, byval data as BSTR ptr) as HRESULT
 appendData as function(byval This as IXMLDOMText ptr, byval data as BSTR) as HRESULT
 insertData as function(byval This as IXMLDOMText ptr, byval offset as LONG, byval data as BSTR) as HRESULT
 deleteData as function(byval This as IXMLDOMText ptr, byval offset as LONG, byval count as LONG) as HRESULT
 replaceData as function(byval This as IXMLDOMText ptr, byval offset as LONG, byval count as LONG, byval data as BSTR) as HRESULT
 splitText as function(byval This as IXMLDOMText ptr, byval offset as LONG, byval rightHandTextNode as IXMLDOMText ptr ptr) as HRESULT
end type

type IXMLDOMText_
 lpVtbl as IXMLDOMTextVtbl ptr
end type

declare function IXMLDOMText_splitText_Proxy(byval This as IXMLDOMText ptr, byval offset as LONG, byval rightHandTextNode as IXMLDOMText ptr ptr) as HRESULT
declare sub IXMLDOMText_splitText_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLDOMComment as const IID

type IXMLDOMCommentVtbl
 QueryInterface as function(byval This as IXMLDOMComment ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMComment ptr) as ULONG
 Release as function(byval This as IXMLDOMComment ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMComment ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMComment ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMComment ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMComment ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_nodeName as function(byval This as IXMLDOMComment ptr, byval name as BSTR ptr) as HRESULT
 get_nodeValue as function(byval This as IXMLDOMComment ptr, byval value as VARIANT ptr) as HRESULT
 put_nodeValue as function(byval This as IXMLDOMComment ptr, byval value as VARIANT) as HRESULT
 get_nodeType as function(byval This as IXMLDOMComment ptr, byval type as DOMNodeType ptr) as HRESULT
 get_parentNode as function(byval This as IXMLDOMComment ptr, byval parent as IXMLDOMNode ptr ptr) as HRESULT
 get_childNodes as function(byval This as IXMLDOMComment ptr, byval childList as IXMLDOMNodeList ptr ptr) as HRESULT
 get_firstChild as function(byval This as IXMLDOMComment ptr, byval firstChild as IXMLDOMNode ptr ptr) as HRESULT
 get_lastChild as function(byval This as IXMLDOMComment ptr, byval lastChild as IXMLDOMNode ptr ptr) as HRESULT
 get_previousSibling as function(byval This as IXMLDOMComment ptr, byval previousSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_nextSibling as function(byval This as IXMLDOMComment ptr, byval nextSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_attributes as function(byval This as IXMLDOMComment ptr, byval attributeMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
 insertBefore as function(byval This as IXMLDOMComment ptr, byval newChild as IXMLDOMNode ptr, byval refChild as VARIANT, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 replaceChild as function(byval This as IXMLDOMComment ptr, byval newChild as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr, byval outOldChild as IXMLDOMNode ptr ptr) as HRESULT
 removeChild as function(byval This as IXMLDOMComment ptr, byval childNode as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr ptr) as HRESULT
 appendChild as function(byval This as IXMLDOMComment ptr, byval newChild as IXMLDOMNode ptr, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 hasChildNodes as function(byval This as IXMLDOMComment ptr, byval hasChild as VARIANT_BOOL ptr) as HRESULT
 get_ownerDocument as function(byval This as IXMLDOMComment ptr, byval DOMDocument as IXMLDOMDocument ptr ptr) as HRESULT
 cloneNode as function(byval This as IXMLDOMComment ptr, byval deep as VARIANT_BOOL, byval cloneRoot as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypeString as function(byval This as IXMLDOMComment ptr, byval nodeType as BSTR ptr) as HRESULT
 get_text as function(byval This as IXMLDOMComment ptr, byval text as BSTR ptr) as HRESULT
 put_text as function(byval This as IXMLDOMComment ptr, byval text as BSTR) as HRESULT
 get_specified as function(byval This as IXMLDOMComment ptr, byval isSpecified as VARIANT_BOOL ptr) as HRESULT
 get_definition as function(byval This as IXMLDOMComment ptr, byval definitionNode as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypedValue as function(byval This as IXMLDOMComment ptr, byval typedValue as VARIANT ptr) as HRESULT
 put_nodeTypedValue as function(byval This as IXMLDOMComment ptr, byval typedValue as VARIANT) as HRESULT
 get_dataType as function(byval This as IXMLDOMComment ptr, byval dataTypeName as VARIANT ptr) as HRESULT
 put_dataType as function(byval This as IXMLDOMComment ptr, byval dataTypeName as BSTR) as HRESULT
 get_xml as function(byval This as IXMLDOMComment ptr, byval xmlString as BSTR ptr) as HRESULT
 transformNode as function(byval This as IXMLDOMComment ptr, byval stylesheet as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
 selectNodes as function(byval This as IXMLDOMComment ptr, byval queryString as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 selectSingleNode as function(byval This as IXMLDOMComment ptr, byval queryString as BSTR, byval resultNode as IXMLDOMNode ptr ptr) as HRESULT
 get_parsed as function(byval This as IXMLDOMComment ptr, byval isParsed as VARIANT_BOOL ptr) as HRESULT
 get_namespaceURI as function(byval This as IXMLDOMComment ptr, byval namespaceURI as BSTR ptr) as HRESULT
 get_prefix as function(byval This as IXMLDOMComment ptr, byval prefixString as BSTR ptr) as HRESULT
 get_baseName as function(byval This as IXMLDOMComment ptr, byval nameString as BSTR ptr) as HRESULT
 transformNodeToObject as function(byval This as IXMLDOMComment ptr, byval stylesheet as IXMLDOMNode ptr, byval outputObject as VARIANT) as HRESULT
 get_data as function(byval This as IXMLDOMComment ptr, byval data as BSTR ptr) as HRESULT
 put_data as function(byval This as IXMLDOMComment ptr, byval data as BSTR) as HRESULT
 get_length as function(byval This as IXMLDOMComment ptr, byval dataLength as LONG ptr) as HRESULT
 substringData as function(byval This as IXMLDOMComment ptr, byval offset as LONG, byval count as LONG, byval data as BSTR ptr) as HRESULT
 appendData as function(byval This as IXMLDOMComment ptr, byval data as BSTR) as HRESULT
 insertData as function(byval This as IXMLDOMComment ptr, byval offset as LONG, byval data as BSTR) as HRESULT
 deleteData as function(byval This as IXMLDOMComment ptr, byval offset as LONG, byval count as LONG) as HRESULT
 replaceData as function(byval This as IXMLDOMComment ptr, byval offset as LONG, byval count as LONG, byval data as BSTR) as HRESULT
end type

type IXMLDOMComment_
 lpVtbl as IXMLDOMCommentVtbl ptr
end type

extern IID_IXMLDOMProcessingInstruction as const IID

type IXMLDOMProcessingInstructionVtbl
 QueryInterface as function(byval This as IXMLDOMProcessingInstruction ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMProcessingInstruction ptr) as ULONG
 Release as function(byval This as IXMLDOMProcessingInstruction ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMProcessingInstruction ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMProcessingInstruction ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMProcessingInstruction ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMProcessingInstruction ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_nodeName as function(byval This as IXMLDOMProcessingInstruction ptr, byval name as BSTR ptr) as HRESULT
 get_nodeValue as function(byval This as IXMLDOMProcessingInstruction ptr, byval value as VARIANT ptr) as HRESULT
 put_nodeValue as function(byval This as IXMLDOMProcessingInstruction ptr, byval value as VARIANT) as HRESULT
 get_nodeType as function(byval This as IXMLDOMProcessingInstruction ptr, byval type as DOMNodeType ptr) as HRESULT
 get_parentNode as function(byval This as IXMLDOMProcessingInstruction ptr, byval parent as IXMLDOMNode ptr ptr) as HRESULT
 get_childNodes as function(byval This as IXMLDOMProcessingInstruction ptr, byval childList as IXMLDOMNodeList ptr ptr) as HRESULT
 get_firstChild as function(byval This as IXMLDOMProcessingInstruction ptr, byval firstChild as IXMLDOMNode ptr ptr) as HRESULT
 get_lastChild as function(byval This as IXMLDOMProcessingInstruction ptr, byval lastChild as IXMLDOMNode ptr ptr) as HRESULT
 get_previousSibling as function(byval This as IXMLDOMProcessingInstruction ptr, byval previousSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_nextSibling as function(byval This as IXMLDOMProcessingInstruction ptr, byval nextSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_attributes as function(byval This as IXMLDOMProcessingInstruction ptr, byval attributeMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
 insertBefore as function(byval This as IXMLDOMProcessingInstruction ptr, byval newChild as IXMLDOMNode ptr, byval refChild as VARIANT, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 replaceChild as function(byval This as IXMLDOMProcessingInstruction ptr, byval newChild as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr, byval outOldChild as IXMLDOMNode ptr ptr) as HRESULT
 removeChild as function(byval This as IXMLDOMProcessingInstruction ptr, byval childNode as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr ptr) as HRESULT
 appendChild as function(byval This as IXMLDOMProcessingInstruction ptr, byval newChild as IXMLDOMNode ptr, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 hasChildNodes as function(byval This as IXMLDOMProcessingInstruction ptr, byval hasChild as VARIANT_BOOL ptr) as HRESULT
 get_ownerDocument as function(byval This as IXMLDOMProcessingInstruction ptr, byval DOMDocument as IXMLDOMDocument ptr ptr) as HRESULT
 cloneNode as function(byval This as IXMLDOMProcessingInstruction ptr, byval deep as VARIANT_BOOL, byval cloneRoot as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypeString as function(byval This as IXMLDOMProcessingInstruction ptr, byval nodeType as BSTR ptr) as HRESULT
 get_text as function(byval This as IXMLDOMProcessingInstruction ptr, byval text as BSTR ptr) as HRESULT
 put_text as function(byval This as IXMLDOMProcessingInstruction ptr, byval text as BSTR) as HRESULT
 get_specified as function(byval This as IXMLDOMProcessingInstruction ptr, byval isSpecified as VARIANT_BOOL ptr) as HRESULT
 get_definition as function(byval This as IXMLDOMProcessingInstruction ptr, byval definitionNode as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypedValue as function(byval This as IXMLDOMProcessingInstruction ptr, byval typedValue as VARIANT ptr) as HRESULT
 put_nodeTypedValue as function(byval This as IXMLDOMProcessingInstruction ptr, byval typedValue as VARIANT) as HRESULT
 get_dataType as function(byval This as IXMLDOMProcessingInstruction ptr, byval dataTypeName as VARIANT ptr) as HRESULT
 put_dataType as function(byval This as IXMLDOMProcessingInstruction ptr, byval dataTypeName as BSTR) as HRESULT
 get_xml as function(byval This as IXMLDOMProcessingInstruction ptr, byval xmlString as BSTR ptr) as HRESULT
 transformNode as function(byval This as IXMLDOMProcessingInstruction ptr, byval stylesheet as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
 selectNodes as function(byval This as IXMLDOMProcessingInstruction ptr, byval queryString as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 selectSingleNode as function(byval This as IXMLDOMProcessingInstruction ptr, byval queryString as BSTR, byval resultNode as IXMLDOMNode ptr ptr) as HRESULT
 get_parsed as function(byval This as IXMLDOMProcessingInstruction ptr, byval isParsed as VARIANT_BOOL ptr) as HRESULT
 get_namespaceURI as function(byval This as IXMLDOMProcessingInstruction ptr, byval namespaceURI as BSTR ptr) as HRESULT
 get_prefix as function(byval This as IXMLDOMProcessingInstruction ptr, byval prefixString as BSTR ptr) as HRESULT
 get_baseName as function(byval This as IXMLDOMProcessingInstruction ptr, byval nameString as BSTR ptr) as HRESULT
 transformNodeToObject as function(byval This as IXMLDOMProcessingInstruction ptr, byval stylesheet as IXMLDOMNode ptr, byval outputObject as VARIANT) as HRESULT
 get_target as function(byval This as IXMLDOMProcessingInstruction ptr, byval name as BSTR ptr) as HRESULT
 get_data as function(byval This as IXMLDOMProcessingInstruction ptr, byval value as BSTR ptr) as HRESULT
 put_data as function(byval This as IXMLDOMProcessingInstruction ptr, byval value as BSTR) as HRESULT
end type

type IXMLDOMProcessingInstruction_
 lpVtbl as IXMLDOMProcessingInstructionVtbl ptr
end type


declare function IXMLDOMProcessingInstruction_get_target_Proxy(byval This as IXMLDOMProcessingInstruction ptr, byval name as BSTR ptr) as HRESULT
declare sub IXMLDOMProcessingInstruction_get_target_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMProcessingInstruction_get_data_Proxy(byval This as IXMLDOMProcessingInstruction ptr, byval value as BSTR ptr) as HRESULT
declare sub IXMLDOMProcessingInstruction_get_data_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMProcessingInstruction_put_data_Proxy(byval This as IXMLDOMProcessingInstruction ptr, byval value as BSTR) as HRESULT
declare sub IXMLDOMProcessingInstruction_put_data_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLDOMCDATASection as const IID

type IXMLDOMCDATASectionVtbl
 QueryInterface as function(byval This as IXMLDOMCDATASection ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMCDATASection ptr) as ULONG
 Release as function(byval This as IXMLDOMCDATASection ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMCDATASection ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMCDATASection ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMCDATASection ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMCDATASection ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_nodeName as function(byval This as IXMLDOMCDATASection ptr, byval name as BSTR ptr) as HRESULT
 get_nodeValue as function(byval This as IXMLDOMCDATASection ptr, byval value as VARIANT ptr) as HRESULT
 put_nodeValue as function(byval This as IXMLDOMCDATASection ptr, byval value as VARIANT) as HRESULT
 get_nodeType as function(byval This as IXMLDOMCDATASection ptr, byval type as DOMNodeType ptr) as HRESULT
 get_parentNode as function(byval This as IXMLDOMCDATASection ptr, byval parent as IXMLDOMNode ptr ptr) as HRESULT
 get_childNodes as function(byval This as IXMLDOMCDATASection ptr, byval childList as IXMLDOMNodeList ptr ptr) as HRESULT
 get_firstChild as function(byval This as IXMLDOMCDATASection ptr, byval firstChild as IXMLDOMNode ptr ptr) as HRESULT
 get_lastChild as function(byval This as IXMLDOMCDATASection ptr, byval lastChild as IXMLDOMNode ptr ptr) as HRESULT
 get_previousSibling as function(byval This as IXMLDOMCDATASection ptr, byval previousSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_nextSibling as function(byval This as IXMLDOMCDATASection ptr, byval nextSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_attributes as function(byval This as IXMLDOMCDATASection ptr, byval attributeMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
 insertBefore as function(byval This as IXMLDOMCDATASection ptr, byval newChild as IXMLDOMNode ptr, byval refChild as VARIANT, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 replaceChild as function(byval This as IXMLDOMCDATASection ptr, byval newChild as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr, byval outOldChild as IXMLDOMNode ptr ptr) as HRESULT
 removeChild as function(byval This as IXMLDOMCDATASection ptr, byval childNode as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr ptr) as HRESULT
 appendChild as function(byval This as IXMLDOMCDATASection ptr, byval newChild as IXMLDOMNode ptr, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 hasChildNodes as function(byval This as IXMLDOMCDATASection ptr, byval hasChild as VARIANT_BOOL ptr) as HRESULT
 get_ownerDocument as function(byval This as IXMLDOMCDATASection ptr, byval DOMDocument as IXMLDOMDocument ptr ptr) as HRESULT
 cloneNode as function(byval This as IXMLDOMCDATASection ptr, byval deep as VARIANT_BOOL, byval cloneRoot as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypeString as function(byval This as IXMLDOMCDATASection ptr, byval nodeType as BSTR ptr) as HRESULT
 get_text as function(byval This as IXMLDOMCDATASection ptr, byval text as BSTR ptr) as HRESULT
 put_text as function(byval This as IXMLDOMCDATASection ptr, byval text as BSTR) as HRESULT
 get_specified as function(byval This as IXMLDOMCDATASection ptr, byval isSpecified as VARIANT_BOOL ptr) as HRESULT
 get_definition as function(byval This as IXMLDOMCDATASection ptr, byval definitionNode as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypedValue as function(byval This as IXMLDOMCDATASection ptr, byval typedValue as VARIANT ptr) as HRESULT
 put_nodeTypedValue as function(byval This as IXMLDOMCDATASection ptr, byval typedValue as VARIANT) as HRESULT
 get_dataType as function(byval This as IXMLDOMCDATASection ptr, byval dataTypeName as VARIANT ptr) as HRESULT
 put_dataType as function(byval This as IXMLDOMCDATASection ptr, byval dataTypeName as BSTR) as HRESULT
 get_xml as function(byval This as IXMLDOMCDATASection ptr, byval xmlString as BSTR ptr) as HRESULT
 transformNode as function(byval This as IXMLDOMCDATASection ptr, byval stylesheet as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
 selectNodes as function(byval This as IXMLDOMCDATASection ptr, byval queryString as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 selectSingleNode as function(byval This as IXMLDOMCDATASection ptr, byval queryString as BSTR, byval resultNode as IXMLDOMNode ptr ptr) as HRESULT
 get_parsed as function(byval This as IXMLDOMCDATASection ptr, byval isParsed as VARIANT_BOOL ptr) as HRESULT
 get_namespaceURI as function(byval This as IXMLDOMCDATASection ptr, byval namespaceURI as BSTR ptr) as HRESULT
 get_prefix as function(byval This as IXMLDOMCDATASection ptr, byval prefixString as BSTR ptr) as HRESULT
 get_baseName as function(byval This as IXMLDOMCDATASection ptr, byval nameString as BSTR ptr) as HRESULT
 transformNodeToObject as function(byval This as IXMLDOMCDATASection ptr, byval stylesheet as IXMLDOMNode ptr, byval outputObject as VARIANT) as HRESULT
 get_data as function(byval This as IXMLDOMCDATASection ptr, byval data as BSTR ptr) as HRESULT
 put_data as function(byval This as IXMLDOMCDATASection ptr, byval data as BSTR) as HRESULT
 get_length as function(byval This as IXMLDOMCDATASection ptr, byval dataLength as LONG ptr) as HRESULT
 substringData as function(byval This as IXMLDOMCDATASection ptr, byval offset as LONG, byval count as LONG, byval data as BSTR ptr) as HRESULT
 appendData as function(byval This as IXMLDOMCDATASection ptr, byval data as BSTR) as HRESULT
 insertData as function(byval This as IXMLDOMCDATASection ptr, byval offset as LONG, byval data as BSTR) as HRESULT
 deleteData as function(byval This as IXMLDOMCDATASection ptr, byval offset as LONG, byval count as LONG) as HRESULT
 replaceData as function(byval This as IXMLDOMCDATASection ptr, byval offset as LONG, byval count as LONG, byval data as BSTR) as HRESULT
 splitText as function(byval This as IXMLDOMCDATASection ptr, byval offset as LONG, byval rightHandTextNode as IXMLDOMText ptr ptr) as HRESULT
end type

type IXMLDOMCDATASection_
 lpVtbl as IXMLDOMCDATASectionVtbl ptr
end type

extern IID_IXMLDOMDocumentType as const IID

type IXMLDOMDocumentTypeVtbl
 QueryInterface as function(byval This as IXMLDOMDocumentType ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMDocumentType ptr) as ULONG
 Release as function(byval This as IXMLDOMDocumentType ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMDocumentType ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMDocumentType ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMDocumentType ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMDocumentType ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_nodeName as function(byval This as IXMLDOMDocumentType ptr, byval name as BSTR ptr) as HRESULT
 get_nodeValue as function(byval This as IXMLDOMDocumentType ptr, byval value as VARIANT ptr) as HRESULT
 put_nodeValue as function(byval This as IXMLDOMDocumentType ptr, byval value as VARIANT) as HRESULT
 get_nodeType as function(byval This as IXMLDOMDocumentType ptr, byval type as DOMNodeType ptr) as HRESULT
 get_parentNode as function(byval This as IXMLDOMDocumentType ptr, byval parent as IXMLDOMNode ptr ptr) as HRESULT
 get_childNodes as function(byval This as IXMLDOMDocumentType ptr, byval childList as IXMLDOMNodeList ptr ptr) as HRESULT
 get_firstChild as function(byval This as IXMLDOMDocumentType ptr, byval firstChild as IXMLDOMNode ptr ptr) as HRESULT
 get_lastChild as function(byval This as IXMLDOMDocumentType ptr, byval lastChild as IXMLDOMNode ptr ptr) as HRESULT
 get_previousSibling as function(byval This as IXMLDOMDocumentType ptr, byval previousSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_nextSibling as function(byval This as IXMLDOMDocumentType ptr, byval nextSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_attributes as function(byval This as IXMLDOMDocumentType ptr, byval attributeMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
 insertBefore as function(byval This as IXMLDOMDocumentType ptr, byval newChild as IXMLDOMNode ptr, byval refChild as VARIANT, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 replaceChild as function(byval This as IXMLDOMDocumentType ptr, byval newChild as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr, byval outOldChild as IXMLDOMNode ptr ptr) as HRESULT
 removeChild as function(byval This as IXMLDOMDocumentType ptr, byval childNode as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr ptr) as HRESULT
 appendChild as function(byval This as IXMLDOMDocumentType ptr, byval newChild as IXMLDOMNode ptr, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 hasChildNodes as function(byval This as IXMLDOMDocumentType ptr, byval hasChild as VARIANT_BOOL ptr) as HRESULT
 get_ownerDocument as function(byval This as IXMLDOMDocumentType ptr, byval DOMDocument as IXMLDOMDocument ptr ptr) as HRESULT
 cloneNode as function(byval This as IXMLDOMDocumentType ptr, byval deep as VARIANT_BOOL, byval cloneRoot as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypeString as function(byval This as IXMLDOMDocumentType ptr, byval nodeType as BSTR ptr) as HRESULT
 get_text as function(byval This as IXMLDOMDocumentType ptr, byval text as BSTR ptr) as HRESULT
 put_text as function(byval This as IXMLDOMDocumentType ptr, byval text as BSTR) as HRESULT
 get_specified as function(byval This as IXMLDOMDocumentType ptr, byval isSpecified as VARIANT_BOOL ptr) as HRESULT
 get_definition as function(byval This as IXMLDOMDocumentType ptr, byval definitionNode as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypedValue as function(byval This as IXMLDOMDocumentType ptr, byval typedValue as VARIANT ptr) as HRESULT
 put_nodeTypedValue as function(byval This as IXMLDOMDocumentType ptr, byval typedValue as VARIANT) as HRESULT
 get_dataType as function(byval This as IXMLDOMDocumentType ptr, byval dataTypeName as VARIANT ptr) as HRESULT
 put_dataType as function(byval This as IXMLDOMDocumentType ptr, byval dataTypeName as BSTR) as HRESULT
 get_xml as function(byval This as IXMLDOMDocumentType ptr, byval xmlString as BSTR ptr) as HRESULT
 transformNode as function(byval This as IXMLDOMDocumentType ptr, byval stylesheet as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
 selectNodes as function(byval This as IXMLDOMDocumentType ptr, byval queryString as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 selectSingleNode as function(byval This as IXMLDOMDocumentType ptr, byval queryString as BSTR, byval resultNode as IXMLDOMNode ptr ptr) as HRESULT
 get_parsed as function(byval This as IXMLDOMDocumentType ptr, byval isParsed as VARIANT_BOOL ptr) as HRESULT
 get_namespaceURI as function(byval This as IXMLDOMDocumentType ptr, byval namespaceURI as BSTR ptr) as HRESULT
 get_prefix as function(byval This as IXMLDOMDocumentType ptr, byval prefixString as BSTR ptr) as HRESULT
 get_baseName as function(byval This as IXMLDOMDocumentType ptr, byval nameString as BSTR ptr) as HRESULT
 transformNodeToObject as function(byval This as IXMLDOMDocumentType ptr, byval stylesheet as IXMLDOMNode ptr, byval outputObject as VARIANT) as HRESULT
 get_name as function(byval This as IXMLDOMDocumentType ptr, byval rootName as BSTR ptr) as HRESULT
 get_entities as function(byval This as IXMLDOMDocumentType ptr, byval entityMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
 get_notations as function(byval This as IXMLDOMDocumentType ptr, byval notationMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
end type

type IXMLDOMDocumentType_
 lpVtbl as IXMLDOMDocumentTypeVtbl ptr
end type


declare function IXMLDOMDocumentType_get_name_Proxy(byval This as IXMLDOMDocumentType ptr, byval rootName as BSTR ptr) as HRESULT
declare sub IXMLDOMDocumentType_get_name_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocumentType_get_entities_Proxy(byval This as IXMLDOMDocumentType ptr, byval entityMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
declare sub IXMLDOMDocumentType_get_entities_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMDocumentType_get_notations_Proxy(byval This as IXMLDOMDocumentType ptr, byval notationMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
declare sub IXMLDOMDocumentType_get_notations_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLDOMNotation as const IID
type IXMLDOMNotation as IXMLDOMNotation_

type IXMLDOMNotationVtbl
 QueryInterface as function(byval This as IXMLDOMNotation ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMNotation ptr) as ULONG
 Release as function(byval This as IXMLDOMNotation ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMNotation ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMNotation ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMNotation ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMNotation ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_nodeName as function(byval This as IXMLDOMNotation ptr, byval name as BSTR ptr) as HRESULT
 get_nodeValue as function(byval This as IXMLDOMNotation ptr, byval value as VARIANT ptr) as HRESULT
 put_nodeValue as function(byval This as IXMLDOMNotation ptr, byval value as VARIANT) as HRESULT
 get_nodeType as function(byval This as IXMLDOMNotation ptr, byval type as DOMNodeType ptr) as HRESULT
 get_parentNode as function(byval This as IXMLDOMNotation ptr, byval parent as IXMLDOMNode ptr ptr) as HRESULT
 get_childNodes as function(byval This as IXMLDOMNotation ptr, byval childList as IXMLDOMNodeList ptr ptr) as HRESULT
 get_firstChild as function(byval This as IXMLDOMNotation ptr, byval firstChild as IXMLDOMNode ptr ptr) as HRESULT
 get_lastChild as function(byval This as IXMLDOMNotation ptr, byval lastChild as IXMLDOMNode ptr ptr) as HRESULT
 get_previousSibling as function(byval This as IXMLDOMNotation ptr, byval previousSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_nextSibling as function(byval This as IXMLDOMNotation ptr, byval nextSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_attributes as function(byval This as IXMLDOMNotation ptr, byval attributeMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
 insertBefore as function(byval This as IXMLDOMNotation ptr, byval newChild as IXMLDOMNode ptr, byval refChild as VARIANT, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 replaceChild as function(byval This as IXMLDOMNotation ptr, byval newChild as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr, byval outOldChild as IXMLDOMNode ptr ptr) as HRESULT
 removeChild as function(byval This as IXMLDOMNotation ptr, byval childNode as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr ptr) as HRESULT
 appendChild as function(byval This as IXMLDOMNotation ptr, byval newChild as IXMLDOMNode ptr, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 hasChildNodes as function(byval This as IXMLDOMNotation ptr, byval hasChild as VARIANT_BOOL ptr) as HRESULT
 get_ownerDocument as function(byval This as IXMLDOMNotation ptr, byval DOMDocument as IXMLDOMDocument ptr ptr) as HRESULT
 cloneNode as function(byval This as IXMLDOMNotation ptr, byval deep as VARIANT_BOOL, byval cloneRoot as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypeString as function(byval This as IXMLDOMNotation ptr, byval nodeType as BSTR ptr) as HRESULT
 get_text as function(byval This as IXMLDOMNotation ptr, byval text as BSTR ptr) as HRESULT
 put_text as function(byval This as IXMLDOMNotation ptr, byval text as BSTR) as HRESULT
 get_specified as function(byval This as IXMLDOMNotation ptr, byval isSpecified as VARIANT_BOOL ptr) as HRESULT
 get_definition as function(byval This as IXMLDOMNotation ptr, byval definitionNode as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypedValue as function(byval This as IXMLDOMNotation ptr, byval typedValue as VARIANT ptr) as HRESULT
 put_nodeTypedValue as function(byval This as IXMLDOMNotation ptr, byval typedValue as VARIANT) as HRESULT
 get_dataType as function(byval This as IXMLDOMNotation ptr, byval dataTypeName as VARIANT ptr) as HRESULT
 put_dataType as function(byval This as IXMLDOMNotation ptr, byval dataTypeName as BSTR) as HRESULT
 get_xml as function(byval This as IXMLDOMNotation ptr, byval xmlString as BSTR ptr) as HRESULT
 transformNode as function(byval This as IXMLDOMNotation ptr, byval stylesheet as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
 selectNodes as function(byval This as IXMLDOMNotation ptr, byval queryString as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 selectSingleNode as function(byval This as IXMLDOMNotation ptr, byval queryString as BSTR, byval resultNode as IXMLDOMNode ptr ptr) as HRESULT
 get_parsed as function(byval This as IXMLDOMNotation ptr, byval isParsed as VARIANT_BOOL ptr) as HRESULT
 get_namespaceURI as function(byval This as IXMLDOMNotation ptr, byval namespaceURI as BSTR ptr) as HRESULT
 get_prefix as function(byval This as IXMLDOMNotation ptr, byval prefixString as BSTR ptr) as HRESULT
 get_baseName as function(byval This as IXMLDOMNotation ptr, byval nameString as BSTR ptr) as HRESULT
 transformNodeToObject as function(byval This as IXMLDOMNotation ptr, byval stylesheet as IXMLDOMNode ptr, byval outputObject as VARIANT) as HRESULT
 get_publicId as function(byval This as IXMLDOMNotation ptr, byval publicID as VARIANT ptr) as HRESULT
 get_systemId as function(byval This as IXMLDOMNotation ptr, byval systemID as VARIANT ptr) as HRESULT
end type

type IXMLDOMNotation_
 lpVtbl as IXMLDOMNotationVtbl ptr
end type


declare function IXMLDOMNotation_get_publicId_Proxy(byval This as IXMLDOMNotation ptr, byval publicID as VARIANT ptr) as HRESULT
declare sub IXMLDOMNotation_get_publicId_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMNotation_get_systemId_Proxy(byval This as IXMLDOMNotation ptr, byval systemID as VARIANT ptr) as HRESULT
declare sub IXMLDOMNotation_get_systemId_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLDOMEntity as const IID
type IXMLDOMEntity as IXMLDOMEntity_

type IXMLDOMEntityVtbl
 QueryInterface as function(byval This as IXMLDOMEntity ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMEntity ptr) as ULONG
 Release as function(byval This as IXMLDOMEntity ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMEntity ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMEntity ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMEntity ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMEntity ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_nodeName as function(byval This as IXMLDOMEntity ptr, byval name as BSTR ptr) as HRESULT
 get_nodeValue as function(byval This as IXMLDOMEntity ptr, byval value as VARIANT ptr) as HRESULT
 put_nodeValue as function(byval This as IXMLDOMEntity ptr, byval value as VARIANT) as HRESULT
 get_nodeType as function(byval This as IXMLDOMEntity ptr, byval type as DOMNodeType ptr) as HRESULT
 get_parentNode as function(byval This as IXMLDOMEntity ptr, byval parent as IXMLDOMNode ptr ptr) as HRESULT
 get_childNodes as function(byval This as IXMLDOMEntity ptr, byval childList as IXMLDOMNodeList ptr ptr) as HRESULT
 get_firstChild as function(byval This as IXMLDOMEntity ptr, byval firstChild as IXMLDOMNode ptr ptr) as HRESULT
 get_lastChild as function(byval This as IXMLDOMEntity ptr, byval lastChild as IXMLDOMNode ptr ptr) as HRESULT
 get_previousSibling as function(byval This as IXMLDOMEntity ptr, byval previousSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_nextSibling as function(byval This as IXMLDOMEntity ptr, byval nextSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_attributes as function(byval This as IXMLDOMEntity ptr, byval attributeMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
 insertBefore as function(byval This as IXMLDOMEntity ptr, byval newChild as IXMLDOMNode ptr, byval refChild as VARIANT, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 replaceChild as function(byval This as IXMLDOMEntity ptr, byval newChild as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr, byval outOldChild as IXMLDOMNode ptr ptr) as HRESULT
 removeChild as function(byval This as IXMLDOMEntity ptr, byval childNode as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr ptr) as HRESULT
 appendChild as function(byval This as IXMLDOMEntity ptr, byval newChild as IXMLDOMNode ptr, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 hasChildNodes as function(byval This as IXMLDOMEntity ptr, byval hasChild as VARIANT_BOOL ptr) as HRESULT
 get_ownerDocument as function(byval This as IXMLDOMEntity ptr, byval DOMDocument as IXMLDOMDocument ptr ptr) as HRESULT
 cloneNode as function(byval This as IXMLDOMEntity ptr, byval deep as VARIANT_BOOL, byval cloneRoot as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypeString as function(byval This as IXMLDOMEntity ptr, byval nodeType as BSTR ptr) as HRESULT
 get_text as function(byval This as IXMLDOMEntity ptr, byval text as BSTR ptr) as HRESULT
 put_text as function(byval This as IXMLDOMEntity ptr, byval text as BSTR) as HRESULT
 get_specified as function(byval This as IXMLDOMEntity ptr, byval isSpecified as VARIANT_BOOL ptr) as HRESULT
 get_definition as function(byval This as IXMLDOMEntity ptr, byval definitionNode as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypedValue as function(byval This as IXMLDOMEntity ptr, byval typedValue as VARIANT ptr) as HRESULT
 put_nodeTypedValue as function(byval This as IXMLDOMEntity ptr, byval typedValue as VARIANT) as HRESULT
 get_dataType as function(byval This as IXMLDOMEntity ptr, byval dataTypeName as VARIANT ptr) as HRESULT
 put_dataType as function(byval This as IXMLDOMEntity ptr, byval dataTypeName as BSTR) as HRESULT
 get_xml as function(byval This as IXMLDOMEntity ptr, byval xmlString as BSTR ptr) as HRESULT
 transformNode as function(byval This as IXMLDOMEntity ptr, byval stylesheet as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
 selectNodes as function(byval This as IXMLDOMEntity ptr, byval queryString as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 selectSingleNode as function(byval This as IXMLDOMEntity ptr, byval queryString as BSTR, byval resultNode as IXMLDOMNode ptr ptr) as HRESULT
 get_parsed as function(byval This as IXMLDOMEntity ptr, byval isParsed as VARIANT_BOOL ptr) as HRESULT
 get_namespaceURI as function(byval This as IXMLDOMEntity ptr, byval namespaceURI as BSTR ptr) as HRESULT
 get_prefix as function(byval This as IXMLDOMEntity ptr, byval prefixString as BSTR ptr) as HRESULT
 get_baseName as function(byval This as IXMLDOMEntity ptr, byval nameString as BSTR ptr) as HRESULT
 transformNodeToObject as function(byval This as IXMLDOMEntity ptr, byval stylesheet as IXMLDOMNode ptr, byval outputObject as VARIANT) as HRESULT
 get_publicId as function(byval This as IXMLDOMEntity ptr, byval publicID as VARIANT ptr) as HRESULT
 get_systemId as function(byval This as IXMLDOMEntity ptr, byval systemID as VARIANT ptr) as HRESULT
 get_notationName as function(byval This as IXMLDOMEntity ptr, byval name as BSTR ptr) as HRESULT
end type

type IXMLDOMEntity_
 lpVtbl as IXMLDOMEntityVtbl ptr
end type


declare function IXMLDOMEntity_get_publicId_Proxy(byval This as IXMLDOMEntity ptr, byval publicID as VARIANT ptr) as HRESULT
declare sub IXMLDOMEntity_get_publicId_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMEntity_get_systemId_Proxy(byval This as IXMLDOMEntity ptr, byval systemID as VARIANT ptr) as HRESULT
declare sub IXMLDOMEntity_get_systemId_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMEntity_get_notationName_Proxy(byval This as IXMLDOMEntity ptr, byval name as BSTR ptr) as HRESULT
declare sub IXMLDOMEntity_get_notationName_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLDOMEntityReference as const IID

type IXMLDOMEntityReferenceVtbl
 QueryInterface as function(byval This as IXMLDOMEntityReference ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMEntityReference ptr) as ULONG
 Release as function(byval This as IXMLDOMEntityReference ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMEntityReference ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMEntityReference ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMEntityReference ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMEntityReference ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_nodeName as function(byval This as IXMLDOMEntityReference ptr, byval name as BSTR ptr) as HRESULT
 get_nodeValue as function(byval This as IXMLDOMEntityReference ptr, byval value as VARIANT ptr) as HRESULT
 put_nodeValue as function(byval This as IXMLDOMEntityReference ptr, byval value as VARIANT) as HRESULT
 get_nodeType as function(byval This as IXMLDOMEntityReference ptr, byval type as DOMNodeType ptr) as HRESULT
 get_parentNode as function(byval This as IXMLDOMEntityReference ptr, byval parent as IXMLDOMNode ptr ptr) as HRESULT
 get_childNodes as function(byval This as IXMLDOMEntityReference ptr, byval childList as IXMLDOMNodeList ptr ptr) as HRESULT
 get_firstChild as function(byval This as IXMLDOMEntityReference ptr, byval firstChild as IXMLDOMNode ptr ptr) as HRESULT
 get_lastChild as function(byval This as IXMLDOMEntityReference ptr, byval lastChild as IXMLDOMNode ptr ptr) as HRESULT
 get_previousSibling as function(byval This as IXMLDOMEntityReference ptr, byval previousSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_nextSibling as function(byval This as IXMLDOMEntityReference ptr, byval nextSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_attributes as function(byval This as IXMLDOMEntityReference ptr, byval attributeMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
 insertBefore as function(byval This as IXMLDOMEntityReference ptr, byval newChild as IXMLDOMNode ptr, byval refChild as VARIANT, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 replaceChild as function(byval This as IXMLDOMEntityReference ptr, byval newChild as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr, byval outOldChild as IXMLDOMNode ptr ptr) as HRESULT
 removeChild as function(byval This as IXMLDOMEntityReference ptr, byval childNode as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr ptr) as HRESULT
 appendChild as function(byval This as IXMLDOMEntityReference ptr, byval newChild as IXMLDOMNode ptr, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 hasChildNodes as function(byval This as IXMLDOMEntityReference ptr, byval hasChild as VARIANT_BOOL ptr) as HRESULT
 get_ownerDocument as function(byval This as IXMLDOMEntityReference ptr, byval DOMDocument as IXMLDOMDocument ptr ptr) as HRESULT
 cloneNode as function(byval This as IXMLDOMEntityReference ptr, byval deep as VARIANT_BOOL, byval cloneRoot as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypeString as function(byval This as IXMLDOMEntityReference ptr, byval nodeType as BSTR ptr) as HRESULT
 get_text as function(byval This as IXMLDOMEntityReference ptr, byval text as BSTR ptr) as HRESULT
 put_text as function(byval This as IXMLDOMEntityReference ptr, byval text as BSTR) as HRESULT
 get_specified as function(byval This as IXMLDOMEntityReference ptr, byval isSpecified as VARIANT_BOOL ptr) as HRESULT
 get_definition as function(byval This as IXMLDOMEntityReference ptr, byval definitionNode as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypedValue as function(byval This as IXMLDOMEntityReference ptr, byval typedValue as VARIANT ptr) as HRESULT
 put_nodeTypedValue as function(byval This as IXMLDOMEntityReference ptr, byval typedValue as VARIANT) as HRESULT
 get_dataType as function(byval This as IXMLDOMEntityReference ptr, byval dataTypeName as VARIANT ptr) as HRESULT
 put_dataType as function(byval This as IXMLDOMEntityReference ptr, byval dataTypeName as BSTR) as HRESULT
 get_xml as function(byval This as IXMLDOMEntityReference ptr, byval xmlString as BSTR ptr) as HRESULT
 transformNode as function(byval This as IXMLDOMEntityReference ptr, byval stylesheet as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
 selectNodes as function(byval This as IXMLDOMEntityReference ptr, byval queryString as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 selectSingleNode as function(byval This as IXMLDOMEntityReference ptr, byval queryString as BSTR, byval resultNode as IXMLDOMNode ptr ptr) as HRESULT
 get_parsed as function(byval This as IXMLDOMEntityReference ptr, byval isParsed as VARIANT_BOOL ptr) as HRESULT
 get_namespaceURI as function(byval This as IXMLDOMEntityReference ptr, byval namespaceURI as BSTR ptr) as HRESULT
 get_prefix as function(byval This as IXMLDOMEntityReference ptr, byval prefixString as BSTR ptr) as HRESULT
 get_baseName as function(byval This as IXMLDOMEntityReference ptr, byval nameString as BSTR ptr) as HRESULT
 transformNodeToObject as function(byval This as IXMLDOMEntityReference ptr, byval stylesheet as IXMLDOMNode ptr, byval outputObject as VARIANT) as HRESULT
end type

type IXMLDOMEntityReference_
 lpVtbl as IXMLDOMEntityReferenceVtbl ptr
end type

extern IID_IXMLDOMParseError as const IID

type IXMLDOMParseErrorVtbl
 QueryInterface as function(byval This as IXMLDOMParseError ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDOMParseError ptr) as ULONG
 Release as function(byval This as IXMLDOMParseError ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDOMParseError ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDOMParseError ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDOMParseError ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDOMParseError ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_errorCode as function(byval This as IXMLDOMParseError ptr, byval errorCode as LONG ptr) as HRESULT
 get_url as function(byval This as IXMLDOMParseError ptr, byval urlString as BSTR ptr) as HRESULT
 get_reason as function(byval This as IXMLDOMParseError ptr, byval reasonString as BSTR ptr) as HRESULT
 get_srcText as function(byval This as IXMLDOMParseError ptr, byval sourceString as BSTR ptr) as HRESULT
 get_line as function(byval This as IXMLDOMParseError ptr, byval lineNumber as LONG ptr) as HRESULT
 get_linepos as function(byval This as IXMLDOMParseError ptr, byval linePosition as LONG ptr) as HRESULT
 get_filepos as function(byval This as IXMLDOMParseError ptr, byval filePosition as LONG ptr) as HRESULT
end type

type IXMLDOMParseError_
 lpVtbl as IXMLDOMParseErrorVtbl ptr
end type


declare function IXMLDOMParseError_get_errorCode_Proxy(byval This as IXMLDOMParseError ptr, byval errorCode as LONG ptr) as HRESULT
declare sub IXMLDOMParseError_get_errorCode_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMParseError_get_url_Proxy(byval This as IXMLDOMParseError ptr, byval urlString as BSTR ptr) as HRESULT
declare sub IXMLDOMParseError_get_url_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMParseError_get_reason_Proxy(byval This as IXMLDOMParseError ptr, byval reasonString as BSTR ptr) as HRESULT
declare sub IXMLDOMParseError_get_reason_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMParseError_get_srcText_Proxy(byval This as IXMLDOMParseError ptr, byval sourceString as BSTR ptr) as HRESULT
declare sub IXMLDOMParseError_get_srcText_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMParseError_get_line_Proxy(byval This as IXMLDOMParseError ptr, byval lineNumber as LONG ptr) as HRESULT
declare sub IXMLDOMParseError_get_line_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMParseError_get_linepos_Proxy(byval This as IXMLDOMParseError ptr, byval linePosition as LONG ptr) as HRESULT
declare sub IXMLDOMParseError_get_linepos_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDOMParseError_get_filepos_Proxy(byval This as IXMLDOMParseError ptr, byval filePosition as LONG ptr) as HRESULT
declare sub IXMLDOMParseError_get_filepos_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXTLRuntime as const IID
type IXTLRuntime as IXTLRuntime_

type IXTLRuntimeVtbl
 QueryInterface as function(byval This as IXTLRuntime ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXTLRuntime ptr) as ULONG
 Release as function(byval This as IXTLRuntime ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXTLRuntime ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXTLRuntime ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXTLRuntime ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXTLRuntime ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_nodeName as function(byval This as IXTLRuntime ptr, byval name as BSTR ptr) as HRESULT
 get_nodeValue as function(byval This as IXTLRuntime ptr, byval value as VARIANT ptr) as HRESULT
 put_nodeValue as function(byval This as IXTLRuntime ptr, byval value as VARIANT) as HRESULT
 get_nodeType as function(byval This as IXTLRuntime ptr, byval type as DOMNodeType ptr) as HRESULT
 get_parentNode as function(byval This as IXTLRuntime ptr, byval parent as IXMLDOMNode ptr ptr) as HRESULT
 get_childNodes as function(byval This as IXTLRuntime ptr, byval childList as IXMLDOMNodeList ptr ptr) as HRESULT
 get_firstChild as function(byval This as IXTLRuntime ptr, byval firstChild as IXMLDOMNode ptr ptr) as HRESULT
 get_lastChild as function(byval This as IXTLRuntime ptr, byval lastChild as IXMLDOMNode ptr ptr) as HRESULT
 get_previousSibling as function(byval This as IXTLRuntime ptr, byval previousSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_nextSibling as function(byval This as IXTLRuntime ptr, byval nextSibling as IXMLDOMNode ptr ptr) as HRESULT
 get_attributes as function(byval This as IXTLRuntime ptr, byval attributeMap as IXMLDOMNamedNodeMap ptr ptr) as HRESULT
 insertBefore as function(byval This as IXTLRuntime ptr, byval newChild as IXMLDOMNode ptr, byval refChild as VARIANT, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 replaceChild as function(byval This as IXTLRuntime ptr, byval newChild as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr, byval outOldChild as IXMLDOMNode ptr ptr) as HRESULT
 removeChild as function(byval This as IXTLRuntime ptr, byval childNode as IXMLDOMNode ptr, byval oldChild as IXMLDOMNode ptr ptr) as HRESULT
 appendChild as function(byval This as IXTLRuntime ptr, byval newChild as IXMLDOMNode ptr, byval outNewChild as IXMLDOMNode ptr ptr) as HRESULT
 hasChildNodes as function(byval This as IXTLRuntime ptr, byval hasChild as VARIANT_BOOL ptr) as HRESULT
 get_ownerDocument as function(byval This as IXTLRuntime ptr, byval DOMDocument as IXMLDOMDocument ptr ptr) as HRESULT
 cloneNode as function(byval This as IXTLRuntime ptr, byval deep as VARIANT_BOOL, byval cloneRoot as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypeString as function(byval This as IXTLRuntime ptr, byval nodeType as BSTR ptr) as HRESULT
 get_text as function(byval This as IXTLRuntime ptr, byval text as BSTR ptr) as HRESULT
 put_text as function(byval This as IXTLRuntime ptr, byval text as BSTR) as HRESULT
 get_specified as function(byval This as IXTLRuntime ptr, byval isSpecified as VARIANT_BOOL ptr) as HRESULT
 get_definition as function(byval This as IXTLRuntime ptr, byval definitionNode as IXMLDOMNode ptr ptr) as HRESULT
 get_nodeTypedValue as function(byval This as IXTLRuntime ptr, byval typedValue as VARIANT ptr) as HRESULT
 put_nodeTypedValue as function(byval This as IXTLRuntime ptr, byval typedValue as VARIANT) as HRESULT
 get_dataType as function(byval This as IXTLRuntime ptr, byval dataTypeName as VARIANT ptr) as HRESULT
 put_dataType as function(byval This as IXTLRuntime ptr, byval dataTypeName as BSTR) as HRESULT
 get_xml as function(byval This as IXTLRuntime ptr, byval xmlString as BSTR ptr) as HRESULT
 transformNode as function(byval This as IXTLRuntime ptr, byval stylesheet as IXMLDOMNode ptr, byval xmlString as BSTR ptr) as HRESULT
 selectNodes as function(byval This as IXTLRuntime ptr, byval queryString as BSTR, byval resultList as IXMLDOMNodeList ptr ptr) as HRESULT
 selectSingleNode as function(byval This as IXTLRuntime ptr, byval queryString as BSTR, byval resultNode as IXMLDOMNode ptr ptr) as HRESULT
 get_parsed as function(byval This as IXTLRuntime ptr, byval isParsed as VARIANT_BOOL ptr) as HRESULT
 get_namespaceURI as function(byval This as IXTLRuntime ptr, byval namespaceURI as BSTR ptr) as HRESULT
 get_prefix as function(byval This as IXTLRuntime ptr, byval prefixString as BSTR ptr) as HRESULT
 get_baseName as function(byval This as IXTLRuntime ptr, byval nameString as BSTR ptr) as HRESULT
 transformNodeToObject as function(byval This as IXTLRuntime ptr, byval stylesheet as IXMLDOMNode ptr, byval outputObject as VARIANT) as HRESULT
 uniqueID as function(byval This as IXTLRuntime ptr, byval pNode as IXMLDOMNode ptr, byval pID as LONG ptr) as HRESULT
 depth as function(byval This as IXTLRuntime ptr, byval pNode as IXMLDOMNode ptr, byval pDepth as LONG ptr) as HRESULT
 childNumber as function(byval This as IXTLRuntime ptr, byval pNode as IXMLDOMNode ptr, byval pNumber as LONG ptr) as HRESULT
 ancestorChildNumber as function(byval This as IXTLRuntime ptr, byval bstrNodeName as BSTR, byval pNode as IXMLDOMNode ptr, byval pNumber as LONG ptr) as HRESULT
 absoluteChildNumber as function(byval This as IXTLRuntime ptr, byval pNode as IXMLDOMNode ptr, byval pNumber as LONG ptr) as HRESULT
 formatIndex as function(byval This as IXTLRuntime ptr, byval lIndex as LONG, byval bstrFormat as BSTR, byval pbstrFormattedString as BSTR ptr) as HRESULT
 formatNumber as function(byval This as IXTLRuntime ptr, byval dblNumber as double, byval bstrFormat as BSTR, byval pbstrFormattedString as BSTR ptr) as HRESULT
 formatDate as function(byval This as IXTLRuntime ptr, byval varDate as VARIANT, byval bstrFormat as BSTR, byval varDestLocale as VARIANT, byval pbstrFormattedString as BSTR ptr) as HRESULT
 formatTime as function(byval This as IXTLRuntime ptr, byval varTime as VARIANT, byval bstrFormat as BSTR, byval varDestLocale as VARIANT, byval pbstrFormattedString as BSTR ptr) as HRESULT
end type

type IXTLRuntime_
 lpVtbl as IXTLRuntimeVtbl ptr
end type


declare function IXTLRuntime_uniqueID_Proxy(byval This as IXTLRuntime ptr, byval pNode as IXMLDOMNode ptr, byval pID as LONG ptr) as HRESULT
declare sub IXTLRuntime_uniqueID_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXTLRuntime_depth_Proxy(byval This as IXTLRuntime ptr, byval pNode as IXMLDOMNode ptr, byval pDepth as LONG ptr) as HRESULT
declare sub IXTLRuntime_depth_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXTLRuntime_childNumber_Proxy(byval This as IXTLRuntime ptr, byval pNode as IXMLDOMNode ptr, byval pNumber as LONG ptr) as HRESULT
declare sub IXTLRuntime_childNumber_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXTLRuntime_ancestorChildNumber_Proxy(byval This as IXTLRuntime ptr, byval bstrNodeName as BSTR, byval pNode as IXMLDOMNode ptr, byval pNumber as LONG ptr) as HRESULT
declare sub IXTLRuntime_ancestorChildNumber_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXTLRuntime_absoluteChildNumber_Proxy(byval This as IXTLRuntime ptr, byval pNode as IXMLDOMNode ptr, byval pNumber as LONG ptr) as HRESULT
declare sub IXTLRuntime_absoluteChildNumber_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXTLRuntime_formatIndex_Proxy(byval This as IXTLRuntime ptr, byval lIndex as LONG, byval bstrFormat as BSTR, byval pbstrFormattedString as BSTR ptr) as HRESULT
declare sub IXTLRuntime_formatIndex_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXTLRuntime_formatNumber_Proxy(byval This as IXTLRuntime ptr, byval dblNumber as double, byval bstrFormat as BSTR, byval pbstrFormattedString as BSTR ptr) as HRESULT
declare sub IXTLRuntime_formatNumber_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXTLRuntime_formatDate_Proxy(byval This as IXTLRuntime ptr, byval varDate as VARIANT, byval bstrFormat as BSTR, byval varDestLocale as VARIANT, byval pbstrFormattedString as BSTR ptr) as HRESULT
declare sub IXTLRuntime_formatDate_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXTLRuntime_formatTime_Proxy(byval This as IXTLRuntime ptr, byval varTime as VARIANT, byval bstrFormat as BSTR, byval varDestLocale as VARIANT, byval pbstrFormattedString as BSTR ptr) as HRESULT
declare sub IXTLRuntime_formatTime_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern DIID_XMLDOMDocumentEvents as const IID
type XMLDOMDocumentEvents as XMLDOMDocumentEvents_

type XMLDOMDocumentEventsVtbl
 QueryInterface as function(byval This as XMLDOMDocumentEvents ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as XMLDOMDocumentEvents ptr) as ULONG
 Release as function(byval This as XMLDOMDocumentEvents ptr) as ULONG
 GetTypeInfoCount as function(byval This as XMLDOMDocumentEvents ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as XMLDOMDocumentEvents ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as XMLDOMDocumentEvents ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as XMLDOMDocumentEvents ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
end type

type XMLDOMDocumentEvents_
 lpVtbl as XMLDOMDocumentEventsVtbl ptr
end type

extern CLSID_DOMDocument as const CLSID
extern CLSID_DOMFreeThreadedDocument as const CLSID
extern IID_IXMLHttpRequest as const IID
type IXMLHttpRequest as IXMLHttpRequest_

type IXMLHttpRequestVtbl
 QueryInterface as function(byval This as IXMLHttpRequest ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLHttpRequest ptr) as ULONG
 Release as function(byval This as IXMLHttpRequest ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLHttpRequest ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLHttpRequest ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLHttpRequest ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLHttpRequest ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 open as function(byval This as IXMLHttpRequest ptr, byval bstrMethod as BSTR, byval bstrUrl as BSTR, byval varAsync as VARIANT, byval bstrUser as VARIANT, byval bstrPassword as VARIANT) as HRESULT
 setRequestHeader as function(byval This as IXMLHttpRequest ptr, byval bstrHeader as BSTR, byval bstrValue as BSTR) as HRESULT
 getResponseHeader as function(byval This as IXMLHttpRequest ptr, byval bstrHeader as BSTR, byval pbstrValue as BSTR ptr) as HRESULT
 getAllResponseHeaders as function(byval This as IXMLHttpRequest ptr, byval pbstrHeaders as BSTR ptr) as HRESULT
 send as function(byval This as IXMLHttpRequest ptr, byval varBody as VARIANT) as HRESULT
 abort as function(byval This as IXMLHttpRequest ptr) as HRESULT
 get_status as function(byval This as IXMLHttpRequest ptr, byval plStatus as LONG ptr) as HRESULT
 get_statusText as function(byval This as IXMLHttpRequest ptr, byval pbstrStatus as BSTR ptr) as HRESULT
 get_responseXML as function(byval This as IXMLHttpRequest ptr, byval ppBody as IDispatch ptr ptr) as HRESULT
 get_responseText as function(byval This as IXMLHttpRequest ptr, byval pbstrBody as BSTR ptr) as HRESULT
 get_responseBody as function(byval This as IXMLHttpRequest ptr, byval pvarBody as VARIANT ptr) as HRESULT
 get_responseStream as function(byval This as IXMLHttpRequest ptr, byval pvarBody as VARIANT ptr) as HRESULT
 get_readyState as function(byval This as IXMLHttpRequest ptr, byval plState as LONG ptr) as HRESULT
 put_onreadystatechange as function(byval This as IXMLHttpRequest ptr, byval pReadyStateSink as IDispatch ptr) as HRESULT
end type

type IXMLHttpRequest_
 lpVtbl as IXMLHttpRequestVtbl ptr
end type


declare function IXMLHttpRequest_open_Proxy(byval This as IXMLHttpRequest ptr, byval bstrMethod as BSTR, byval bstrUrl as BSTR, byval varAsync as VARIANT, byval bstrUser as VARIANT, byval bstrPassword as VARIANT) as HRESULT
declare sub IXMLHttpRequest_open_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLHttpRequest_setRequestHeader_Proxy(byval This as IXMLHttpRequest ptr, byval bstrHeader as BSTR, byval bstrValue as BSTR) as HRESULT
declare sub IXMLHttpRequest_setRequestHeader_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLHttpRequest_getResponseHeader_Proxy(byval This as IXMLHttpRequest ptr, byval bstrHeader as BSTR, byval pbstrValue as BSTR ptr) as HRESULT
declare sub IXMLHttpRequest_getResponseHeader_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLHttpRequest_getAllResponseHeaders_Proxy(byval This as IXMLHttpRequest ptr, byval pbstrHeaders as BSTR ptr) as HRESULT
declare sub IXMLHttpRequest_getAllResponseHeaders_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLHttpRequest_send_Proxy(byval This as IXMLHttpRequest ptr, byval varBody as VARIANT) as HRESULT
declare sub IXMLHttpRequest_send_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLHttpRequest_abort_Proxy(byval This as IXMLHttpRequest ptr) as HRESULT
declare sub IXMLHttpRequest_abort_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLHttpRequest_get_status_Proxy(byval This as IXMLHttpRequest ptr, byval plStatus as LONG ptr) as HRESULT
declare sub IXMLHttpRequest_get_status_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLHttpRequest_get_statusText_Proxy(byval This as IXMLHttpRequest ptr, byval pbstrStatus as BSTR ptr) as HRESULT
declare sub IXMLHttpRequest_get_statusText_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLHttpRequest_get_responseXML_Proxy(byval This as IXMLHttpRequest ptr, byval ppBody as IDispatch ptr ptr) as HRESULT
declare sub IXMLHttpRequest_get_responseXML_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLHttpRequest_get_responseText_Proxy(byval This as IXMLHttpRequest ptr, byval pbstrBody as BSTR ptr) as HRESULT
declare sub IXMLHttpRequest_get_responseText_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLHttpRequest_get_responseBody_Proxy(byval This as IXMLHttpRequest ptr, byval pvarBody as VARIANT ptr) as HRESULT
declare sub IXMLHttpRequest_get_responseBody_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLHttpRequest_get_responseStream_Proxy(byval This as IXMLHttpRequest ptr, byval pvarBody as VARIANT ptr) as HRESULT
declare sub IXMLHttpRequest_get_responseStream_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLHttpRequest_get_readyState_Proxy(byval This as IXMLHttpRequest ptr, byval plState as LONG ptr) as HRESULT
declare sub IXMLHttpRequest_get_readyState_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLHttpRequest_put_onreadystatechange_Proxy(byval This as IXMLHttpRequest ptr, byval pReadyStateSink as IDispatch ptr) as HRESULT
declare sub IXMLHttpRequest_put_onreadystatechange_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern CLSID_XMLHTTPRequest as const CLSID
extern IID_IXMLDSOControl as const IID
type IXMLDSOControl as IXMLDSOControl_

type IXMLDSOControlVtbl
 QueryInterface as function(byval This as IXMLDSOControl ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDSOControl ptr) as ULONG
 Release as function(byval This as IXMLDSOControl ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDSOControl ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDSOControl ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDSOControl ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDSOControl ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_XMLDocument as function(byval This as IXMLDSOControl ptr, byval ppDoc as IXMLDOMDocument ptr ptr) as HRESULT
 put_XMLDocument as function(byval This as IXMLDSOControl ptr, byval ppDoc as IXMLDOMDocument ptr) as HRESULT
 get_JavaDSOCompatible as function(byval This as IXMLDSOControl ptr, byval fJavaDSOCompatible as WINBOOL ptr) as HRESULT
 put_JavaDSOCompatible as function(byval This as IXMLDSOControl ptr, byval fJavaDSOCompatible as WINBOOL) as HRESULT
 get_readyState as function(byval This as IXMLDSOControl ptr, byval state as LONG ptr) as HRESULT
end type

type IXMLDSOControl_
 lpVtbl as IXMLDSOControlVtbl ptr
end type


declare function IXMLDSOControl_get_XMLDocument_Proxy(byval This as IXMLDSOControl ptr, byval ppDoc as IXMLDOMDocument ptr ptr) as HRESULT
declare sub IXMLDSOControl_get_XMLDocument_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDSOControl_put_XMLDocument_Proxy(byval This as IXMLDSOControl ptr, byval ppDoc as IXMLDOMDocument ptr) as HRESULT
declare sub IXMLDSOControl_put_XMLDocument_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDSOControl_get_JavaDSOCompatible_Proxy(byval This as IXMLDSOControl ptr, byval fJavaDSOCompatible as WINBOOL ptr) as HRESULT
declare sub IXMLDSOControl_get_JavaDSOCompatible_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDSOControl_put_JavaDSOCompatible_Proxy(byval This as IXMLDSOControl ptr, byval fJavaDSOCompatible as WINBOOL) as HRESULT
declare sub IXMLDSOControl_put_JavaDSOCompatible_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDSOControl_get_readyState_Proxy(byval This as IXMLDSOControl ptr, byval state as LONG ptr) as HRESULT
declare sub IXMLDSOControl_get_readyState_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern CLSID_XMLDSOControl as const CLSID
extern IID_IXMLElementCollection as const IID
type IXMLElementCollection as IXMLElementCollection_

type IXMLElementCollectionVtbl
 QueryInterface as function(byval This as IXMLElementCollection ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLElementCollection ptr) as ULONG
 Release as function(byval This as IXMLElementCollection ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLElementCollection ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLElementCollection ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLElementCollection ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLElementCollection ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 put_length as function(byval This as IXMLElementCollection ptr, byval v as LONG) as HRESULT
 get_length as function(byval This as IXMLElementCollection ptr, byval p as LONG ptr) as HRESULT
 get__newEnum as function(byval This as IXMLElementCollection ptr, byval ppUnk as IUnknown ptr ptr) as HRESULT
 item as function(byval This as IXMLElementCollection ptr, byval var1 as VARIANT, byval var2 as VARIANT, byval ppDisp as IDispatch ptr ptr) as HRESULT
end type

type IXMLElementCollection_
 lpVtbl as IXMLElementCollectionVtbl ptr
end type


declare function IXMLElementCollection_put_length_Proxy(byval This as IXMLElementCollection ptr, byval v as LONG) as HRESULT
declare sub IXMLElementCollection_put_length_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElementCollection_get_length_Proxy(byval This as IXMLElementCollection ptr, byval p as LONG ptr) as HRESULT
declare sub IXMLElementCollection_get_length_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElementCollection_get__newEnum_Proxy(byval This as IXMLElementCollection ptr, byval ppUnk as IUnknown ptr ptr) as HRESULT
declare sub IXMLElementCollection_get__newEnum_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElementCollection_item_Proxy(byval This as IXMLElementCollection ptr, byval var1 as VARIANT, byval var2 as VARIANT, byval ppDisp as IDispatch ptr ptr) as HRESULT
declare sub IXMLElementCollection_item_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLDocument as const IID
type IXMLDocument as IXMLDocument_
type IXMLElement as IXMLElement_

type IXMLDocumentVtbl
 QueryInterface as function(byval This as IXMLDocument ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDocument ptr) as ULONG
 Release as function(byval This as IXMLDocument ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDocument ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDocument ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDocument ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDocument ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_root as function(byval This as IXMLDocument ptr, byval p as IXMLElement ptr ptr) as HRESULT
 get_fileSize as function(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
 get_fileModifiedDate as function(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
 get_fileUpdatedDate as function(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
 get_URL as function(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
 put_URL as function(byval This as IXMLDocument ptr, byval p as BSTR) as HRESULT
 get_mimeType as function(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
 get_readyState as function(byval This as IXMLDocument ptr, byval pl as LONG ptr) as HRESULT
 get_charset as function(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
 put_charset as function(byval This as IXMLDocument ptr, byval p as BSTR) as HRESULT
 get_version as function(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
 get_doctype as function(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
 get_dtdURL as function(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
 createElement as function(byval This as IXMLDocument ptr, byval vType as VARIANT, byval var1 as VARIANT, byval ppElem as IXMLElement ptr ptr) as HRESULT
end type

type IXMLDocument_
 lpVtbl as IXMLDocumentVtbl ptr
end type


declare function IXMLDocument_get_root_Proxy(byval This as IXMLDocument ptr, byval p as IXMLElement ptr ptr) as HRESULT
declare sub IXMLDocument_get_root_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument_get_fileSize_Proxy(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument_get_fileSize_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument_get_fileModifiedDate_Proxy(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument_get_fileModifiedDate_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument_get_fileUpdatedDate_Proxy(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument_get_fileUpdatedDate_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument_get_URL_Proxy(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument_get_URL_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument_put_URL_Proxy(byval This as IXMLDocument ptr, byval p as BSTR) as HRESULT
declare sub IXMLDocument_put_URL_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument_get_mimeType_Proxy(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument_get_mimeType_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument_get_readyState_Proxy(byval This as IXMLDocument ptr, byval pl as LONG ptr) as HRESULT
declare sub IXMLDocument_get_readyState_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument_get_charset_Proxy(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument_get_charset_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument_put_charset_Proxy(byval This as IXMLDocument ptr, byval p as BSTR) as HRESULT
declare sub IXMLDocument_put_charset_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument_get_version_Proxy(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument_get_version_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument_get_doctype_Proxy(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument_get_doctype_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument_get_dtdURL_Proxy(byval This as IXMLDocument ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument_get_dtdURL_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument_createElement_Proxy(byval This as IXMLDocument ptr, byval vType as VARIANT, byval var1 as VARIANT, byval ppElem as IXMLElement ptr ptr) as HRESULT
declare sub IXMLDocument_createElement_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLDocument2 as const IID
type IXMLDocument2 as IXMLDocument2_
type IXMLElement2 as IXMLElement2_

type IXMLDocument2Vtbl
 QueryInterface as function(byval This as IXMLDocument2 ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLDocument2 ptr) as ULONG
 Release as function(byval This as IXMLDocument2 ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLDocument2 ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLDocument2 ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLDocument2 ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLDocument2 ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_root as function(byval This as IXMLDocument2 ptr, byval p as IXMLElement2 ptr ptr) as HRESULT
 get_fileSize as function(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
 get_fileModifiedDate as function(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
 get_fileUpdatedDate as function(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
 get_URL as function(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
 put_URL as function(byval This as IXMLDocument2 ptr, byval p as BSTR) as HRESULT
 get_mimeType as function(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
 get_readyState as function(byval This as IXMLDocument2 ptr, byval pl as LONG ptr) as HRESULT
 get_charset as function(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
 put_charset as function(byval This as IXMLDocument2 ptr, byval p as BSTR) as HRESULT
 get_version as function(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
 get_doctype as function(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
 get_dtdURL as function(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
 createElement as function(byval This as IXMLDocument2 ptr, byval vType as VARIANT, byval var1 as VARIANT, byval ppElem as IXMLElement2 ptr ptr) as HRESULT
 get_async as function(byval This as IXMLDocument2 ptr, byval pf as VARIANT_BOOL ptr) as HRESULT
 put_async as function(byval This as IXMLDocument2 ptr, byval f as VARIANT_BOOL) as HRESULT
end type

type IXMLDocument2_
 lpVtbl as IXMLDocument2Vtbl ptr
end type


declare function IXMLDocument2_get_root_Proxy(byval This as IXMLDocument2 ptr, byval p as IXMLElement2 ptr ptr) as HRESULT
declare sub IXMLDocument2_get_root_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument2_get_fileSize_Proxy(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument2_get_fileSize_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument2_get_fileModifiedDate_Proxy(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument2_get_fileModifiedDate_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument2_get_fileUpdatedDate_Proxy(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument2_get_fileUpdatedDate_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument2_get_URL_Proxy(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument2_get_URL_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument2_put_URL_Proxy(byval This as IXMLDocument2 ptr, byval p as BSTR) as HRESULT
declare sub IXMLDocument2_put_URL_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument2_get_mimeType_Proxy(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument2_get_mimeType_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument2_get_readyState_Proxy(byval This as IXMLDocument2 ptr, byval pl as LONG ptr) as HRESULT
declare sub IXMLDocument2_get_readyState_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument2_get_charset_Proxy(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument2_get_charset_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument2_put_charset_Proxy(byval This as IXMLDocument2 ptr, byval p as BSTR) as HRESULT
declare sub IXMLDocument2_put_charset_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument2_get_version_Proxy(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument2_get_version_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument2_get_doctype_Proxy(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument2_get_doctype_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument2_get_dtdURL_Proxy(byval This as IXMLDocument2 ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLDocument2_get_dtdURL_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument2_createElement_Proxy(byval This as IXMLDocument2 ptr, byval vType as VARIANT, byval var1 as VARIANT, byval ppElem as IXMLElement2 ptr ptr) as HRESULT
declare sub IXMLDocument2_createElement_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument2_get_async_Proxy(byval This as IXMLDocument2 ptr, byval pf as VARIANT_BOOL ptr) as HRESULT
declare sub IXMLDocument2_get_async_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLDocument2_put_async_Proxy(byval This as IXMLDocument2 ptr, byval f as VARIANT_BOOL) as HRESULT
declare sub IXMLDocument2_put_async_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLElement as const IID

type IXMLElementVtbl
 QueryInterface as function(byval This as IXMLElement ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLElement ptr) as ULONG
 Release as function(byval This as IXMLElement ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLElement ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLElement ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLElement ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLElement ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_tagName as function(byval This as IXMLElement ptr, byval p as BSTR ptr) as HRESULT
 put_tagName as function(byval This as IXMLElement ptr, byval p as BSTR) as HRESULT
 get_parent as function(byval This as IXMLElement ptr, byval ppParent as IXMLElement ptr ptr) as HRESULT
 setAttribute as function(byval This as IXMLElement ptr, byval strPropertyName as BSTR, byval PropertyValue as VARIANT) as HRESULT
 getAttribute as function(byval This as IXMLElement ptr, byval strPropertyName as BSTR, byval PropertyValue as VARIANT ptr) as HRESULT
 removeAttribute as function(byval This as IXMLElement ptr, byval strPropertyName as BSTR) as HRESULT
 get_children as function(byval This as IXMLElement ptr, byval pp as IXMLElementCollection ptr ptr) as HRESULT
 get_type as function(byval This as IXMLElement ptr, byval plType as LONG ptr) as HRESULT
 get_text as function(byval This as IXMLElement ptr, byval p as BSTR ptr) as HRESULT
 put_text as function(byval This as IXMLElement ptr, byval p as BSTR) as HRESULT
 addChild as function(byval This as IXMLElement ptr, byval pChildElem as IXMLElement ptr, byval lIndex as LONG, byval lReserved as LONG) as HRESULT
 removeChild as function(byval This as IXMLElement ptr, byval pChildElem as IXMLElement ptr) as HRESULT
end type

type IXMLElement_
 lpVtbl as IXMLElementVtbl ptr
end type


declare function IXMLElement_get_tagName_Proxy(byval This as IXMLElement ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLElement_get_tagName_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement_put_tagName_Proxy(byval This as IXMLElement ptr, byval p as BSTR) as HRESULT
declare sub IXMLElement_put_tagName_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement_get_parent_Proxy(byval This as IXMLElement ptr, byval ppParent as IXMLElement ptr ptr) as HRESULT
declare sub IXMLElement_get_parent_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement_setAttribute_Proxy(byval This as IXMLElement ptr, byval strPropertyName as BSTR, byval PropertyValue as VARIANT) as HRESULT
declare sub IXMLElement_setAttribute_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement_getAttribute_Proxy(byval This as IXMLElement ptr, byval strPropertyName as BSTR, byval PropertyValue as VARIANT ptr) as HRESULT
declare sub IXMLElement_getAttribute_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement_removeAttribute_Proxy(byval This as IXMLElement ptr, byval strPropertyName as BSTR) as HRESULT
declare sub IXMLElement_removeAttribute_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement_get_children_Proxy(byval This as IXMLElement ptr, byval pp as IXMLElementCollection ptr ptr) as HRESULT
declare sub IXMLElement_get_children_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement_get_type_Proxy(byval This as IXMLElement ptr, byval plType as LONG ptr) as HRESULT
declare sub IXMLElement_get_type_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement_get_text_Proxy(byval This as IXMLElement ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLElement_get_text_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement_put_text_Proxy(byval This as IXMLElement ptr, byval p as BSTR) as HRESULT
declare sub IXMLElement_put_text_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement_addChild_Proxy(byval This as IXMLElement ptr, byval pChildElem as IXMLElement ptr, byval lIndex as LONG, byval lReserved as LONG) as HRESULT
declare sub IXMLElement_addChild_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement_removeChild_Proxy(byval This as IXMLElement ptr, byval pChildElem as IXMLElement ptr) as HRESULT
declare sub IXMLElement_removeChild_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLElement2 as const IID

type IXMLElement2Vtbl
 QueryInterface as function(byval This as IXMLElement2 ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLElement2 ptr) as ULONG
 Release as function(byval This as IXMLElement2 ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLElement2 ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLElement2 ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLElement2 ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLElement2 ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_tagName as function(byval This as IXMLElement2 ptr, byval p as BSTR ptr) as HRESULT
 put_tagName as function(byval This as IXMLElement2 ptr, byval p as BSTR) as HRESULT
 get_parent as function(byval This as IXMLElement2 ptr, byval ppParent as IXMLElement2 ptr ptr) as HRESULT
 setAttribute as function(byval This as IXMLElement2 ptr, byval strPropertyName as BSTR, byval PropertyValue as VARIANT) as HRESULT
 getAttribute as function(byval This as IXMLElement2 ptr, byval strPropertyName as BSTR, byval PropertyValue as VARIANT ptr) as HRESULT
 removeAttribute as function(byval This as IXMLElement2 ptr, byval strPropertyName as BSTR) as HRESULT
 get_children as function(byval This as IXMLElement2 ptr, byval pp as IXMLElementCollection ptr ptr) as HRESULT
 get_type as function(byval This as IXMLElement2 ptr, byval plType as LONG ptr) as HRESULT
 get_text as function(byval This as IXMLElement2 ptr, byval p as BSTR ptr) as HRESULT
 put_text as function(byval This as IXMLElement2 ptr, byval p as BSTR) as HRESULT
 addChild as function(byval This as IXMLElement2 ptr, byval pChildElem as IXMLElement2 ptr, byval lIndex as LONG, byval lReserved as LONG) as HRESULT
 removeChild as function(byval This as IXMLElement2 ptr, byval pChildElem as IXMLElement2 ptr) as HRESULT
 get_attributes as function(byval This as IXMLElement2 ptr, byval pp as IXMLElementCollection ptr ptr) as HRESULT
end type

type IXMLElement2_
 lpVtbl as IXMLElement2Vtbl ptr
end type


declare function IXMLElement2_get_tagName_Proxy(byval This as IXMLElement2 ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLElement2_get_tagName_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement2_put_tagName_Proxy(byval This as IXMLElement2 ptr, byval p as BSTR) as HRESULT
declare sub IXMLElement2_put_tagName_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement2_get_parent_Proxy(byval This as IXMLElement2 ptr, byval ppParent as IXMLElement2 ptr ptr) as HRESULT
declare sub IXMLElement2_get_parent_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement2_setAttribute_Proxy(byval This as IXMLElement2 ptr, byval strPropertyName as BSTR, byval PropertyValue as VARIANT) as HRESULT
declare sub IXMLElement2_setAttribute_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement2_getAttribute_Proxy(byval This as IXMLElement2 ptr, byval strPropertyName as BSTR, byval PropertyValue as VARIANT ptr) as HRESULT
declare sub IXMLElement2_getAttribute_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement2_removeAttribute_Proxy(byval This as IXMLElement2 ptr, byval strPropertyName as BSTR) as HRESULT
declare sub IXMLElement2_removeAttribute_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement2_get_children_Proxy(byval This as IXMLElement2 ptr, byval pp as IXMLElementCollection ptr ptr) as HRESULT
declare sub IXMLElement2_get_children_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement2_get_type_Proxy(byval This as IXMLElement2 ptr, byval plType as LONG ptr) as HRESULT
declare sub IXMLElement2_get_type_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement2_get_text_Proxy(byval This as IXMLElement2 ptr, byval p as BSTR ptr) as HRESULT
declare sub IXMLElement2_get_text_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement2_put_text_Proxy(byval This as IXMLElement2 ptr, byval p as BSTR) as HRESULT
declare sub IXMLElement2_put_text_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement2_addChild_Proxy(byval This as IXMLElement2 ptr, byval pChildElem as IXMLElement2 ptr, byval lIndex as LONG, byval lReserved as LONG) as HRESULT
declare sub IXMLElement2_addChild_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement2_removeChild_Proxy(byval This as IXMLElement2 ptr, byval pChildElem as IXMLElement2 ptr) as HRESULT
declare sub IXMLElement2_removeChild_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLElement2_get_attributes_Proxy(byval This as IXMLElement2 ptr, byval pp as IXMLElementCollection ptr ptr) as HRESULT
declare sub IXMLElement2_get_attributes_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLAttribute as const IID
type IXMLAttribute as IXMLAttribute_

type IXMLAttributeVtbl
 QueryInterface as function(byval This as IXMLAttribute ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLAttribute ptr) as ULONG
 Release as function(byval This as IXMLAttribute ptr) as ULONG
 GetTypeInfoCount as function(byval This as IXMLAttribute ptr, byval pctinfo as UINT ptr) as HRESULT
 GetTypeInfo as function(byval This as IXMLAttribute ptr, byval iTInfo as UINT, byval lcid as LCID, byval ppTInfo as ITypeInfo ptr ptr) as HRESULT
 GetIDsOfNames as function(byval This as IXMLAttribute ptr, byval riid as const IID const ptr, byval rgszNames as LPOLESTR ptr, byval cNames as UINT, byval lcid as LCID, byval rgDispId as DISPID ptr) as HRESULT
 Invoke as function(byval This as IXMLAttribute ptr, byval dispIdMember as DISPID, byval riid as const IID const ptr, byval lcid as LCID, byval wFlags as WORD, byval pDispParams as DISPPARAMS ptr, byval pVarResult as VARIANT ptr, byval pExcepInfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
 get_name as function(byval This as IXMLAttribute ptr, byval n as BSTR ptr) as HRESULT
 get_value as function(byval This as IXMLAttribute ptr, byval v as BSTR ptr) as HRESULT
end type

type IXMLAttribute_
 lpVtbl as IXMLAttributeVtbl ptr
end type


declare function IXMLAttribute_get_name_Proxy(byval This as IXMLAttribute ptr, byval n as BSTR ptr) as HRESULT
declare sub IXMLAttribute_get_name_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
declare function IXMLAttribute_get_value_Proxy(byval This as IXMLAttribute ptr, byval v as BSTR ptr) as HRESULT
declare sub IXMLAttribute_get_value_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern IID_IXMLError as const IID
type IXMLError as IXMLError_

type IXMLErrorVtbl
 QueryInterface as function(byval This as IXMLError ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IXMLError ptr) as ULONG
 Release as function(byval This as IXMLError ptr) as ULONG
 GetErrorInfo as function(byval This as IXMLError ptr, byval pErrorReturn as XML_ERROR ptr) as HRESULT
end type

type IXMLError_
 lpVtbl as IXMLErrorVtbl ptr
end type

declare function IXMLError_GetErrorInfo_Proxy(byval This as IXMLError ptr, byval pErrorReturn as XML_ERROR ptr) as HRESULT
declare sub IXMLError_GetErrorInfo_Stub(byval This as IRpcStubBuffer ptr, byval _pRpcChannelBuffer as IRpcChannelBuffer ptr, byval _pRpcMessage as PRPC_MESSAGE, byval _pdwStubPhase as DWORD ptr)
extern CLSID_XMLDocument as const CLSID

end extern

extern "Windows"


#inclib "uuid"

extern CLSID_SBS_StdURLMoniker as const IID
extern CLSID_SBS_HttpProtocol as const IID
extern CLSID_SBS_FtpProtocol as const IID
extern CLSID_SBS_GopherProtocol as const IID
extern CLSID_SBS_HttpSProtocol as const IID
extern CLSID_SBS_FileProtocol as const IID
extern CLSID_SBS_MkProtocol as const IID
extern CLSID_SBS_UrlMkBindCtx as const IID
extern CLSID_SBS_SoftDistExt as const IID
extern CLSID_SBS_CdlProtocol as const IID
extern CLSID_SBS_ClassInstallFilter as const IID
extern CLSID_SBS_InternetSecurityManager as const IID
extern CLSID_SBS_InternetZoneManager as const IID
const INVALID_P_ROOT_SECURITY_ID = cptr(UBYTE ptr, -1)
extern IID_IAsyncMoniker as const IID
extern CLSID_StdURLMoniker as const IID
extern CLSID_HttpProtocol as const IID
extern CLSID_FtpProtocol as const IID
extern CLSID_GopherProtocol as const IID
extern CLSID_HttpSProtocol as const IID
extern CLSID_FileProtocol as const IID
extern CLSID_MkProtocol as const IID
extern CLSID_StdURLProtocol as const IID
extern CLSID_UrlMkBindCtx as const IID
extern CLSID_CdlProtocol as const IID
extern CLSID_ClassInstallFilter as const IID
extern IID_IAsyncBindCtx as const IID

const MKSYS_URLMONIKER = 6
const URL_MK_LEGACY = 0
const URL_MK_UNIFORM = 1
const URL_MK_NO_CANONICALIZE = 2

declare function CreateURLMoniker(byval pMkCtx as LPMONIKER, byval szURL as LPCWSTR, byval ppmk as LPMONIKER ptr) as HRESULT
declare function CreateURLMonikerEx(byval pMkCtx as LPMONIKER, byval szURL as LPCWSTR, byval ppmk as LPMONIKER ptr, byval dwFlags as DWORD) as HRESULT
declare function GetClassURL(byval szURL as LPCWSTR, byval pClsID as CLSID ptr) as HRESULT
type IBindStatusCallback as IBindStatusCallback_
declare function CreateAsyncBindCtx(byval reserved as DWORD, byval pBSCb as IBindStatusCallback ptr, byval pEFetc as IEnumFORMATETC ptr, byval ppBC as IBindCtx ptr ptr) as HRESULT


declare function CreateAsyncBindCtxEx(byval pbc as IBindCtx ptr, byval dwOptions as DWORD, byval pBSCb as IBindStatusCallback ptr, byval pEnum as IEnumFORMATETC ptr, byval ppBC as IBindCtx ptr ptr, byval reserved as DWORD) as HRESULT
declare function MkParseDisplayNameEx(byval pbc as IBindCtx ptr, byval szDisplayName as LPCWSTR, byval pchEaten as ULONG ptr, byval ppmk as LPMONIKER ptr) as HRESULT
declare function RegisterBindStatusCallback(byval pBC as LPBC, byval pBSCb as IBindStatusCallback ptr, byval ppBSCBPrev as IBindStatusCallback ptr ptr, byval dwReserved as DWORD) as HRESULT
declare function RevokeBindStatusCallback(byval pBC as LPBC, byval pBSCb as IBindStatusCallback ptr) as HRESULT
declare function GetClassFileOrMime(byval pBC as LPBC, byval szFilename as LPCWSTR, byval pBuffer as LPVOID, byval cbSize as DWORD, byval szMime as LPCWSTR, byval dwReserved as DWORD, byval pclsid as CLSID ptr) as HRESULT
declare function IsValidURL(byval pBC as LPBC, byval szURL as LPCWSTR, byval dwReserved as DWORD) as HRESULT
declare function CoGetClassObjectFromURL(byval rCLASSID as const IID const ptr, byval szCODE as LPCWSTR, byval dwFileVersionMS as DWORD, byval dwFileVersionLS as DWORD, byval szTYPE as LPCWSTR, byval pBindCtx as LPBINDCTX, byval dwClsContext as DWORD, byval pvReserved as LPVOID, byval riid as const IID const ptr, byval ppv as LPVOID ptr) as HRESULT
declare function IEInstallScope(byval pdwScope as LPDWORD) as HRESULT
declare function FaultInIEFeature(byval hWnd as HWND, byval pClassSpec as uCLSSPEC ptr, byval pQuery as QUERYCONTEXT ptr, byval dwFlags as DWORD) as HRESULT
declare function GetComponentIDFromCLSSPEC(byval pClassspec as uCLSSPEC ptr, byval ppszComponentID as LPSTR ptr) as HRESULT

const FIEF_FLAG_FORCE_JITUI = &h1
const FIEF_FLAG_PEEK = &h2
const FIEF_FLAG_SKIP_INSTALLED_VERSION_CHECK = &h4
declare function IsAsyncMoniker(byval pmk as IMoniker ptr) as HRESULT
type IBinding as IBinding_

declare function CreateURLBinding(byval lpszUrl as LPCWSTR, byval pbc as IBindCtx ptr, byval ppBdg as IBinding ptr ptr) as HRESULT
declare function RegisterMediaTypes(byval ctypes as UINT, byval rgszTypes as const LPCSTR ptr, byval rgcfTypes as CLIPFORMAT ptr) as HRESULT
declare function FindMediaType(byval rgszTypes as LPCSTR, byval rgcfTypes as CLIPFORMAT ptr) as HRESULT
declare function CreateFormatEnumerator(byval cfmtetc as UINT, byval rgfmtetc as FORMATETC ptr, byval ppenumfmtetc as IEnumFORMATETC ptr ptr) as HRESULT
declare function RegisterFormatEnumerator(byval pBC as LPBC, byval pEFetc as IEnumFORMATETC ptr, byval reserved as DWORD) as HRESULT
declare function RevokeFormatEnumerator(byval pBC as LPBC, byval pEFetc as IEnumFORMATETC ptr) as HRESULT
declare function RegisterMediaTypeClass(byval pBC as LPBC, byval ctypes as UINT, byval rgszTypes as const LPCSTR ptr, byval rgclsID as CLSID ptr, byval reserved as DWORD) as HRESULT
declare function FindMediaTypeClass(byval pBC as LPBC, byval szType as LPCSTR, byval pclsID as CLSID ptr, byval reserved as DWORD) as HRESULT
declare function UrlMkSetSessionOption(byval dwOption as DWORD, byval pBuffer as LPVOID, byval dwBufferLength as DWORD, byval dwReserved as DWORD) as HRESULT
declare function UrlMkGetSessionOption(byval dwOption as DWORD, byval pBuffer as LPVOID, byval dwBufferLength as DWORD, byval pdwBufferLengthOut as DWORD ptr, byval dwReserved as DWORD) as HRESULT
declare function FindMimeFromData(byval pBC as LPBC, byval pwzUrl as LPCWSTR, byval pBuffer as LPVOID, byval cbSize as DWORD, byval pwzMimeProposed as LPCWSTR, byval dwMimeFlags as DWORD, byval ppwzMimeOut as LPWSTR ptr, byval dwReserved as DWORD) as HRESULT
const FMFD_DEFAULT = &h00
const FMFD_URLASFILENAME = &h1


const FMFD_SERVERMIME = &h8
const FMFD_RESPECTTEXTPLAIN = &h10
const FMFD_RETURNUPDATEDIMGMIMES = &h20
const UAS_EXACTLEGACY = &h1000

declare function ObtainUserAgentString(byval dwOption as DWORD, byval pszUAOut as LPSTR, byval cbSize as DWORD ptr) as HRESULT
declare function CompareSecurityIds(byval pbSecurityId1 as UBYTE ptr, byval dwLen1 as DWORD, byval pbSecurityId2 as UBYTE ptr, byval dwLen2 as DWORD, byval dwReserved as DWORD) as HRESULT
declare function CompatFlagsFromClsid(byval pclsid as CLSID ptr, byval pdwCompatFlags as LPDWORD, byval pdwMiscStatusFlags as LPDWORD) as HRESULT

const URLMON_OPTION_USERAGENT = &h10000001
const URLMON_OPTION_USERAGENT_REFRESH = &h10000002
const URLMON_OPTION_URL_ENCODING = &h10000004


const CF_NULL = 0


type IPersistMoniker as IPersistMoniker_
type LPPERSISTMONIKER as IPersistMoniker ptr
extern IID_IPersistMoniker as const GUID

type IPersistMonikerVtbl
 QueryInterface as function(byval This as IPersistMoniker ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IPersistMoniker ptr) as ULONG
 Release as function(byval This as IPersistMoniker ptr) as ULONG
 GetClassID as function(byval This as IPersistMoniker ptr, byval pClassID as CLSID ptr) as HRESULT
 IsDirty as function(byval This as IPersistMoniker ptr) as HRESULT
 Load as function(byval This as IPersistMoniker ptr, byval fFullyAvailable as WINBOOL, byval pimkName as IMoniker ptr, byval pibc as LPBC, byval grfMode as DWORD) as HRESULT
 Save as function(byval This as IPersistMoniker ptr, byval pimkName as IMoniker ptr, byval pbc as LPBC, byval fRemember as WINBOOL) as HRESULT
 SaveCompleted as function(byval This as IPersistMoniker ptr, byval pimkName as IMoniker ptr, byval pibc as LPBC) as HRESULT
 GetCurMoniker as function(byval This as IPersistMoniker ptr, byval ppimkName as IMoniker ptr ptr) as HRESULT
end type

type IPersistMoniker_
 lpVtbl as IPersistMonikerVtbl ptr
end type


declare function IPersistMoniker_GetClassID_Proxy(byval This as IPersistMoniker ptr, byval pClassID as CLSID ptr) as HRESULT
declare sub IPersistMoniker_GetClassID_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistMoniker_IsDirty_Proxy(byval This as IPersistMoniker ptr) as HRESULT
declare sub IPersistMoniker_IsDirty_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistMoniker_Load_Proxy(byval This as IPersistMoniker ptr, byval fFullyAvailable as WINBOOL, byval pimkName as IMoniker ptr, byval pibc as LPBC, byval grfMode as DWORD) as HRESULT
declare sub IPersistMoniker_Load_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistMoniker_Save_Proxy(byval This as IPersistMoniker ptr, byval pimkName as IMoniker ptr, byval pbc as LPBC, byval fRemember as WINBOOL) as HRESULT
declare sub IPersistMoniker_Save_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistMoniker_SaveCompleted_Proxy(byval This as IPersistMoniker ptr, byval pimkName as IMoniker ptr, byval pibc as LPBC) as HRESULT
declare sub IPersistMoniker_SaveCompleted_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPersistMoniker_GetCurMoniker_Proxy(byval This as IPersistMoniker ptr, byval ppimkName as IMoniker ptr ptr) as HRESULT
declare sub IPersistMoniker_GetCurMoniker_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IMonikerProp as IMonikerProp_
type LPMONIKERPROP as IMonikerProp ptr

type __WIDL_urlmon_generated_name_00000002 as long
enum
 MIMETYPEPROP = &h00
 USE_SRC_URL = &h1
 CLASSIDPROP = &h2
 TRUSTEDDOWNLOADPROP = &h3
 POPUPLEVELPROP = &h4
end enum

type MONIKERPROPERTY as __WIDL_urlmon_generated_name_00000002
extern IID_IMonikerProp as const GUID

type IMonikerPropVtbl
 QueryInterface as function(byval This as IMonikerProp ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IMonikerProp ptr) as ULONG
 Release as function(byval This as IMonikerProp ptr) as ULONG
 PutProperty as function(byval This as IMonikerProp ptr, byval mkp as MONIKERPROPERTY, byval val as LPCWSTR) as HRESULT
end type

type IMonikerProp_
 lpVtbl as IMonikerPropVtbl ptr
end type

declare function IMonikerProp_PutProperty_Proxy(byval This as IMonikerProp ptr, byval mkp as MONIKERPROPERTY, byval val as LPCWSTR) as HRESULT
declare sub IMonikerProp_PutProperty_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IBindProtocol as IBindProtocol_
type LPBINDPROTOCOL as IBindProtocol ptr
extern IID_IBindProtocol as const GUID

type IBindProtocolVtbl
 QueryInterface as function(byval This as IBindProtocol ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IBindProtocol ptr) as ULONG
 Release as function(byval This as IBindProtocol ptr) as ULONG
 CreateBinding as function(byval This as IBindProtocol ptr, byval szUrl as LPCWSTR, byval pbc as IBindCtx ptr, byval ppb as IBinding ptr ptr) as HRESULT
end type

type IBindProtocol_
 lpVtbl as IBindProtocolVtbl ptr
end type

declare function IBindProtocol_CreateBinding_Proxy(byval This as IBindProtocol ptr, byval szUrl as LPCWSTR, byval pbc as IBindCtx ptr, byval ppb as IBinding ptr ptr) as HRESULT
declare sub IBindProtocol_CreateBinding_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type LPBINDING as IBinding ptr
extern IID_IBinding as const GUID

type IBindingVtbl
 QueryInterface as function(byval This as IBinding ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IBinding ptr) as ULONG
 Release as function(byval This as IBinding ptr) as ULONG
 Abort as function(byval This as IBinding ptr) as HRESULT
 Suspend as function(byval This as IBinding ptr) as HRESULT
 Resume as function(byval This as IBinding ptr) as HRESULT
 SetPriority as function(byval This as IBinding ptr, byval nPriority as LONG) as HRESULT
 GetPriority as function(byval This as IBinding ptr, byval pnPriority as LONG ptr) as HRESULT
 GetBindResult as function(byval This as IBinding ptr, byval pclsidProtocol as CLSID ptr, byval pdwResult as DWORD ptr, byval pszResult as LPOLESTR ptr, byval pdwReserved as DWORD ptr) as HRESULT
end type

type IBinding_
 lpVtbl as IBindingVtbl ptr
end type


declare function IBinding_Abort_Proxy(byval This as IBinding ptr) as HRESULT
declare sub IBinding_Abort_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBinding_Suspend_Proxy(byval This as IBinding ptr) as HRESULT
declare sub IBinding_Suspend_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBinding_Resume_Proxy(byval This as IBinding ptr) as HRESULT
declare sub IBinding_Resume_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBinding_SetPriority_Proxy(byval This as IBinding ptr, byval nPriority as LONG) as HRESULT
declare sub IBinding_SetPriority_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBinding_GetPriority_Proxy(byval This as IBinding ptr, byval pnPriority as LONG ptr) as HRESULT
declare sub IBinding_GetPriority_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBinding_RemoteGetBindResult_Proxy(byval This as IBinding ptr, byval pclsidProtocol as CLSID ptr, byval pdwResult as DWORD ptr, byval pszResult as LPOLESTR ptr, byval dwReserved as DWORD) as HRESULT
declare sub IBinding_RemoteGetBindResult_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBinding_GetBindResult_Proxy(byval This as IBinding ptr, byval pclsidProtocol as CLSID ptr, byval pdwResult as DWORD ptr, byval pszResult as LPOLESTR ptr, byval pdwReserved as DWORD ptr) as HRESULT
declare function IBinding_GetBindResult_Stub(byval This as IBinding ptr, byval pclsidProtocol as CLSID ptr, byval pdwResult as DWORD ptr, byval pszResult as LPOLESTR ptr, byval dwReserved as DWORD) as HRESULT
type LPBINDSTATUSCALLBACK as IBindStatusCallback ptr

type __WIDL_urlmon_generated_name_00000003 as long
enum
 BINDVERB_GET = &h00
 BINDVERB_POST = &h1
 BINDVERB_PUT = &h2
 BINDVERB_CUSTOM = &h3
 BINDVERB_RESERVED1 = &h4
end enum

type BINDVERB as __WIDL_urlmon_generated_name_00000003

type __WIDL_urlmon_generated_name_00000004 as long
enum
 BINDINFOF_URLENCODESTGMEDDATA = &h1
 BINDINFOF_URLENCODEDEXTRAINFO = &h2
end enum

type BINDINFOF as __WIDL_urlmon_generated_name_00000004

type __WIDL_urlmon_generated_name_00000005 as long
enum
 BINDF_ASYNCHRONOUS = &h1
 BINDF_ASYNCSTORAGE = &h2
 BINDF_NOPROGRESSIVERENDERING = &h4
 BINDF_OFFLINEOPERATION = &h8
 BINDF_GETNEWESTVERSION = &h10
 BINDF_NOWRITECACHE = &h20
 BINDF_NEEDFILE = &h40
 BINDF_PULLDATA = &h80
 BINDF_IGNORESECURITYPROBLEM = &h100
 BINDF_RESYNCHRONIZE = &h200
 BINDF_HYPERLINK = &h400
 BINDF_NO_UI = &h800
 BINDF_SILENTOPERATION = &h1000
 BINDF_PRAGMA_NO_CACHE = &h2000
 BINDF_GETCLASSOBJECT = &h4000
 BINDF_RESERVED_1 = &h8000
 BINDF_FREE_THREADED = &h10000
 BINDF_DIRECT_READ = &h20000
 BINDF_FORMS_SUBMIT = &h40000
 BINDF_GETFROMCACHE_IF_NET_FAIL = &h80000
 BINDF_FROMURLMON = &h100000
 BINDF_FWD_BACK = &h200000
 BINDF_PREFERDEFAULTHANDLER = &h400000
 BINDF_ENFORCERESTRICTED = &h800000
 BINDF_RESERVED_2 = &h80000000
 BINDF_RESERVED_3 = &h1000000
 BINDF_RESERVED_4 = &h2000000
 BINDF_RESERVED_5 = &h4000000
 BINDF_RESERVED_6 = &h8000000
 BINDF_RESERVED_7 = &h40000000
 BINDF_RESERVED_8 = &h20000000
end enum

const BINDF_NOCOPYDATA = BINDF_PULLDATA
const BINDF_DONTPUTINCACHE = BINDF_NOWRITECACHE
const BINDF_DONTUSECACHE = BINDF_GETNEWESTVERSION
type BINDF as __WIDL_urlmon_generated_name_00000005

type __WIDL_urlmon_generated_name_00000006 as long
enum
 URL_ENCODING_NONE = &h00
 URL_ENCODING_ENABLE_UTF8 = &h10000000
 URL_ENCODING_DISABLE_UTF8 = &h20000000
end enum

type URL_ENCODING as __WIDL_urlmon_generated_name_00000006

type _tagBINDINFO
 cbSize as ULONG
 szExtraInfo as LPWSTR
 stgmedData as STGMEDIUM
 grfBindInfoF as DWORD
 dwBindVerb as DWORD
 szCustomVerb as LPWSTR
 cbstgmedData as DWORD
 dwOptions as DWORD
 dwOptionsFlags as DWORD
 dwCodePage as DWORD
 securityAttributes as SECURITY_ATTRIBUTES
 iid as IID
 pUnk as IUnknown ptr
 dwReserved as DWORD
end type

type BINDINFO as _tagBINDINFO

type _REMSECURITY_ATTRIBUTES
 nLength as DWORD
 lpSecurityDescriptor as DWORD
 bInheritHandle as WINBOOL
end type

type REMSECURITY_ATTRIBUTES as _REMSECURITY_ATTRIBUTES
type PREMSECURITY_ATTRIBUTES as _REMSECURITY_ATTRIBUTES ptr
type LPREMSECURITY_ATTRIBUTES as _REMSECURITY_ATTRIBUTES ptr

type _tagRemBINDINFO
 cbSize as ULONG
 szExtraInfo as LPWSTR
 grfBindInfoF as DWORD
 dwBindVerb as DWORD
 szCustomVerb as LPWSTR
 cbstgmedData as DWORD
 dwOptions as DWORD
 dwOptionsFlags as DWORD
 dwCodePage as DWORD
 securityAttributes as REMSECURITY_ATTRIBUTES
 iid as IID
 pUnk as IUnknown ptr
 dwReserved as DWORD
end type

type RemBINDINFO as _tagRemBINDINFO

type tagRemFORMATETC
 cfFormat as DWORD
 ptd as DWORD
 dwAspect as DWORD
 lindex as LONG
 tymed as DWORD
end type

type RemFORMATETC as tagRemFORMATETC
type LPREMFORMATETC as tagRemFORMATETC ptr

type __WIDL_urlmon_generated_name_00000007 as long
enum
 BINDINFO_OPTIONS_WININETFLAG = &h10000
 BINDINFO_OPTIONS_ENABLE_UTF8 = &h20000
 BINDINFO_OPTIONS_DISABLE_UTF8 = &h40000
 BINDINFO_OPTIONS_USE_IE_ENCODING = &h80000
 BINDINFO_OPTIONS_BINDTOOBJECT = &h100000
 BINDINFO_OPTIONS_SECURITYOPTOUT = &h200000
 BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = &h400000
 BINDINFO_OPTIONS_USEBINDSTRINGCREDS = &h800000
 BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = &h1000000
 BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = &h2000000
 BINDINFO_WPC_DOWNLOADBLOCKED = &h8000000
 BINDINFO_WPC_LOGGING_ENABLED = &h10000000
 BINDINFO_OPTIONS_ALLOWCONNECTDATA = &h20000000
 BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = &h40000000
 BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = clng(&h80000000)
end enum

type BINDINFO_OPTIONS as __WIDL_urlmon_generated_name_00000007

type __WIDL_urlmon_generated_name_00000008 as long
enum
 BSCF_FIRSTDATANOTIFICATION = &h1
 BSCF_INTERMEDIATEDATANOTIFICATION = &h2
 BSCF_LASTDATANOTIFICATION = &h4
 BSCF_DATAFULLYAVAILABLE = &h8
 BSCF_AVAILABLEDATASIZEUNKNOWN = &h10
 BSCF_SKIPDRAINDATAFORFILEURLS = &h20
 BSCF_64BITLENGTHDOWNLOAD = &h40
end enum

type BSCF as __WIDL_urlmon_generated_name_00000008

type tagBINDSTATUS as long
enum
 BINDSTATUS_FINDINGRESOURCE = 1
 BINDSTATUS_CONNECTING = 2
 BINDSTATUS_REDIRECTING = 3
 BINDSTATUS_BEGINDOWNLOADDATA = 4
 BINDSTATUS_DOWNLOADINGDATA = 5
 BINDSTATUS_ENDDOWNLOADDATA = 6
 BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 7
 BINDSTATUS_INSTALLINGCOMPONENTS = 8
 BINDSTATUS_ENDDOWNLOADCOMPONENTS = 9
 BINDSTATUS_USINGCACHEDCOPY = 10
 BINDSTATUS_SENDINGREQUEST = 11
 BINDSTATUS_CLASSIDAVAILABLE = 12
 BINDSTATUS_MIMETYPEAVAILABLE = 13
 BINDSTATUS_CACHEFILENAMEAVAILABLE = 14
 BINDSTATUS_BEGINSYNCOPERATION = 15
 BINDSTATUS_ENDSYNCOPERATION = 16
 BINDSTATUS_BEGINUPLOADDATA = 17
 BINDSTATUS_UPLOADINGDATA = 18
 BINDSTATUS_ENDUPLOADDATA = 19
 BINDSTATUS_PROTOCOLCLASSID = 20
 BINDSTATUS_ENCODING = 21
 BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 22
 BINDSTATUS_CLASSINSTALLLOCATION = 23
 BINDSTATUS_DECODING = 24
 BINDSTATUS_LOADINGMIMEHANDLER = 25
 BINDSTATUS_CONTENTDISPOSITIONATTACH = 26
 BINDSTATUS_FILTERREPORTMIMETYPE = 27
 BINDSTATUS_CLSIDCANINSTANTIATE = 28
 BINDSTATUS_IUNKNOWNAVAILABLE = 29
 BINDSTATUS_DIRECTBIND = 30
 BINDSTATUS_RAWMIMETYPE = 31
 BINDSTATUS_PROXYDETECTING = 32
 BINDSTATUS_ACCEPTRANGES = 33
 BINDSTATUS_COOKIE_SENT = 34
 BINDSTATUS_COMPACT_POLICY_RECEIVED = 35
 BINDSTATUS_COOKIE_SUPPRESSED = 36
 BINDSTATUS_COOKIE_STATE_UNKNOWN = 37
 BINDSTATUS_COOKIE_STATE_ACCEPT = 38
 BINDSTATUS_COOKIE_STATE_REJECT = 39
 BINDSTATUS_COOKIE_STATE_PROMPT = 40
 BINDSTATUS_COOKIE_STATE_LEASH = 41
 BINDSTATUS_COOKIE_STATE_DOWNGRADE = 42
 BINDSTATUS_POLICY_HREF = 43
 BINDSTATUS_P3P_HEADER = 44
 BINDSTATUS_SESSION_COOKIE_RECEIVED = 45
 BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46
 BINDSTATUS_SESSION_COOKIES_ALLOWED = 47
 BINDSTATUS_CACHECONTROL = 48
 BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49
 BINDSTATUS_MIMETEXTPLAINMISMATCH = 50
 BINDSTATUS_PUBLISHERAVAILABLE = 51
 BINDSTATUS_DISPLAYNAMEAVAILABLE = 52
 BINDSTATUS_SSLUX_NAVBLOCKED = 53
 BINDSTATUS_SERVER_MIMETYPEAVAILABLE = 54
 BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = 55
 BINDSTATUS_64BIT_PROGRESS = 56
 BINDSTATUS_LAST = BINDSTATUS_64BIT_PROGRESS
 BINDSTATUS_RESERVED_0 = 57
 BINDSTATUS_RESERVED_1 = 58
 BINDSTATUS_RESERVED_2 = 59
 BINDSTATUS_RESERVED_3 = 60
 BINDSTATUS_RESERVED_4 = 61
 BINDSTATUS_RESERVED_5 = 62
 BINDSTATUS_RESERVED_6 = 63
 BINDSTATUS_RESERVED_7 = 64
 BINDSTATUS_RESERVED_8 = 65
 BINDSTATUS_RESERVED_9 = 66
 BINDSTATUS_LAST_PRIVATE = BINDSTATUS_RESERVED_9
end enum

type BINDSTATUS as tagBINDSTATUS
extern IID_IBindStatusCallback as const GUID

type IBindStatusCallbackVtbl
 QueryInterface as function(byval This as IBindStatusCallback ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IBindStatusCallback ptr) as ULONG
 Release as function(byval This as IBindStatusCallback ptr) as ULONG
 OnStartBinding as function(byval This as IBindStatusCallback ptr, byval dwReserved as DWORD, byval pib as IBinding ptr) as HRESULT
 GetPriority as function(byval This as IBindStatusCallback ptr, byval pnPriority as LONG ptr) as HRESULT
 OnLowResource as function(byval This as IBindStatusCallback ptr, byval reserved as DWORD) as HRESULT
 OnProgress as function(byval This as IBindStatusCallback ptr, byval ulProgress as ULONG, byval ulProgressMax as ULONG, byval ulStatusCode as ULONG, byval szStatusText as LPCWSTR) as HRESULT
 OnStopBinding as function(byval This as IBindStatusCallback ptr, byval hresult as HRESULT, byval szError as LPCWSTR) as HRESULT
 GetBindInfo as function(byval This as IBindStatusCallback ptr, byval grfBINDF as DWORD ptr, byval pbindinfo as BINDINFO ptr) as HRESULT
 OnDataAvailable as function(byval This as IBindStatusCallback ptr, byval grfBSCF as DWORD, byval dwSize as DWORD, byval pformatetc as FORMATETC ptr, byval pstgmed as STGMEDIUM ptr) as HRESULT
 OnObjectAvailable as function(byval This as IBindStatusCallback ptr, byval riid as const IID const ptr, byval punk as IUnknown ptr) as HRESULT
end type

type IBindStatusCallback_
 lpVtbl as IBindStatusCallbackVtbl ptr
end type


declare function IBindStatusCallback_OnStartBinding_Proxy(byval This as IBindStatusCallback ptr, byval dwReserved as DWORD, byval pib as IBinding ptr) as HRESULT
declare sub IBindStatusCallback_OnStartBinding_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindStatusCallback_GetPriority_Proxy(byval This as IBindStatusCallback ptr, byval pnPriority as LONG ptr) as HRESULT
declare sub IBindStatusCallback_GetPriority_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindStatusCallback_OnLowResource_Proxy(byval This as IBindStatusCallback ptr, byval reserved as DWORD) as HRESULT
declare sub IBindStatusCallback_OnLowResource_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindStatusCallback_OnProgress_Proxy(byval This as IBindStatusCallback ptr, byval ulProgress as ULONG, byval ulProgressMax as ULONG, byval ulStatusCode as ULONG, byval szStatusText as LPCWSTR) as HRESULT
declare sub IBindStatusCallback_OnProgress_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindStatusCallback_OnStopBinding_Proxy(byval This as IBindStatusCallback ptr, byval hresult as HRESULT, byval szError as LPCWSTR) as HRESULT
declare sub IBindStatusCallback_OnStopBinding_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindStatusCallback_RemoteGetBindInfo_Proxy(byval This as IBindStatusCallback ptr, byval grfBINDF as DWORD ptr, byval pbindinfo as RemBINDINFO ptr, byval pstgmed as RemSTGMEDIUM ptr) as HRESULT
declare sub IBindStatusCallback_RemoteGetBindInfo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindStatusCallback_RemoteOnDataAvailable_Proxy(byval This as IBindStatusCallback ptr, byval grfBSCF as DWORD, byval dwSize as DWORD, byval pformatetc as RemFORMATETC ptr, byval pstgmed as RemSTGMEDIUM ptr) as HRESULT
declare sub IBindStatusCallback_RemoteOnDataAvailable_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindStatusCallback_OnObjectAvailable_Proxy(byval This as IBindStatusCallback ptr, byval riid as const IID const ptr, byval punk as IUnknown ptr) as HRESULT
declare sub IBindStatusCallback_OnObjectAvailable_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindStatusCallback_GetBindInfo_Proxy(byval This as IBindStatusCallback ptr, byval grfBINDF as DWORD ptr, byval pbindinfo as BINDINFO ptr) as HRESULT
declare function IBindStatusCallback_GetBindInfo_Stub(byval This as IBindStatusCallback ptr, byval grfBINDF as DWORD ptr, byval pbindinfo as RemBINDINFO ptr, byval pstgmed as RemSTGMEDIUM ptr) as HRESULT
declare function IBindStatusCallback_OnDataAvailable_Proxy(byval This as IBindStatusCallback ptr, byval grfBSCF as DWORD, byval dwSize as DWORD, byval pformatetc as FORMATETC ptr, byval pstgmed as STGMEDIUM ptr) as HRESULT
declare function IBindStatusCallback_OnDataAvailable_Stub(byval This as IBindStatusCallback ptr, byval grfBSCF as DWORD, byval dwSize as DWORD, byval pformatetc as RemFORMATETC ptr, byval pstgmed as RemSTGMEDIUM ptr) as HRESULT
type IBindStatusCallbackEx as IBindStatusCallbackEx_
type LPBINDSTATUSCALLBACKEX as IBindStatusCallbackEx ptr

type __WIDL_urlmon_generated_name_00000009 as long
enum
 BINDF2_DISABLEBASICOVERHTTP = &h1
 BINDF2_DISABLEAUTOCOOKIEHANDLING = &h2
 BINDF2_READ_DATA_GREATER_THAN_4GB = &h4
 BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = &h8
 BINDF2_SETDOWNLOADMODE = &h20
 BINDF2_DISABLE_HTTP_REDIRECT_CACHING = &h40
 BINDF2_KEEP_CALLBACK_MODULE_LOADED = &h80
 BINDF2_ALLOW_PROXY_CRED_PROMPT = &h100
 BINDF2_RESERVED_F = &h20000
 BINDF2_RESERVED_E = &h40000
 BINDF2_RESERVED_D = &h80000
 BINDF2_RESERVED_C = &h100000
 BINDF2_RESERVED_B = &h200000
 BINDF2_RESERVED_A = &h400000
 BINDF2_RESERVED_9 = &h800000
 BINDF2_RESERVED_8 = &h1000000
 BINDF2_RESERVED_7 = &h2000000
 BINDF2_RESERVED_6 = &h4000000
 BINDF2_RESERVED_5 = &h8000000
 BINDF2_RESERVED_4 = &h10000000
 BINDF2_RESERVED_3 = &h20000000
 BINDF2_RESERVED_2 = &h40000000
 BINDF2_RESERVED_1 = &h80000000
end enum

type BINDF2 as __WIDL_urlmon_generated_name_00000009
extern IID_IBindStatusCallbackEx as const GUID

type IBindStatusCallbackExVtbl
 QueryInterface as function(byval This as IBindStatusCallbackEx ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IBindStatusCallbackEx ptr) as ULONG
 Release as function(byval This as IBindStatusCallbackEx ptr) as ULONG
 OnStartBinding as function(byval This as IBindStatusCallbackEx ptr, byval dwReserved as DWORD, byval pib as IBinding ptr) as HRESULT
 GetPriority as function(byval This as IBindStatusCallbackEx ptr, byval pnPriority as LONG ptr) as HRESULT
 OnLowResource as function(byval This as IBindStatusCallbackEx ptr, byval reserved as DWORD) as HRESULT
 OnProgress as function(byval This as IBindStatusCallbackEx ptr, byval ulProgress as ULONG, byval ulProgressMax as ULONG, byval ulStatusCode as ULONG, byval szStatusText as LPCWSTR) as HRESULT
 OnStopBinding as function(byval This as IBindStatusCallbackEx ptr, byval hresult as HRESULT, byval szError as LPCWSTR) as HRESULT
 GetBindInfo as function(byval This as IBindStatusCallbackEx ptr, byval grfBINDF as DWORD ptr, byval pbindinfo as BINDINFO ptr) as HRESULT
 OnDataAvailable as function(byval This as IBindStatusCallbackEx ptr, byval grfBSCF as DWORD, byval dwSize as DWORD, byval pformatetc as FORMATETC ptr, byval pstgmed as STGMEDIUM ptr) as HRESULT
 OnObjectAvailable as function(byval This as IBindStatusCallbackEx ptr, byval riid as const IID const ptr, byval punk as IUnknown ptr) as HRESULT
 GetBindInfoEx as function(byval This as IBindStatusCallbackEx ptr, byval grfBINDF as DWORD ptr, byval pbindinfo as BINDINFO ptr, byval grfBINDF2 as DWORD ptr, byval pdwReserved as DWORD ptr) as HRESULT
end type

type IBindStatusCallbackEx_
 lpVtbl as IBindStatusCallbackExVtbl ptr
end type


declare function IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(byval This as IBindStatusCallbackEx ptr, byval grfBINDF as DWORD ptr, byval pbindinfo as RemBINDINFO ptr, byval pstgmed as RemSTGMEDIUM ptr, byval grfBINDF2 as DWORD ptr, byval pdwReserved as DWORD ptr) as HRESULT
declare sub IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindStatusCallbackEx_GetBindInfoEx_Proxy(byval This as IBindStatusCallbackEx ptr, byval grfBINDF as DWORD ptr, byval pbindinfo as BINDINFO ptr, byval grfBINDF2 as DWORD ptr, byval pdwReserved as DWORD ptr) as HRESULT
declare function IBindStatusCallbackEx_GetBindInfoEx_Stub(byval This as IBindStatusCallbackEx ptr, byval grfBINDF as DWORD ptr, byval pbindinfo as RemBINDINFO ptr, byval pstgmed as RemSTGMEDIUM ptr, byval grfBINDF2 as DWORD ptr, byval pdwReserved as DWORD ptr) as HRESULT
type IAuthenticate as IAuthenticate_
type LPAUTHENTICATION as IAuthenticate ptr
extern IID_IAuthenticate as const GUID

type IAuthenticateVtbl
 QueryInterface as function(byval This as IAuthenticate ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IAuthenticate ptr) as ULONG
 Release as function(byval This as IAuthenticate ptr) as ULONG
 Authenticate as function(byval This as IAuthenticate ptr, byval phwnd as HWND ptr, byval pszUsername as LPWSTR ptr, byval pszPassword as LPWSTR ptr) as HRESULT
end type

type IAuthenticate_
 lpVtbl as IAuthenticateVtbl ptr
end type

declare function IAuthenticate_Authenticate_Proxy(byval This as IAuthenticate ptr, byval phwnd as HWND ptr, byval pszUsername as LPWSTR ptr, byval pszPassword as LPWSTR ptr) as HRESULT
declare sub IAuthenticate_Authenticate_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IAuthenticateEx as IAuthenticateEx_
type LPAUTHENTICATIONEX as IAuthenticateEx ptr

type __WIDL_urlmon_generated_name_0000000A as long
enum
 AUTHENTICATEF_PROXY = &h1
 AUTHENTICATEF_BASIC = &h2
 AUTHENTICATEF_HTTP = &h4
end enum

type AUTHENTICATEF as __WIDL_urlmon_generated_name_0000000A

type _tagAUTHENTICATEINFO
 dwFlags as DWORD
 dwReserved as DWORD
end type

type AUTHENTICATEINFO as _tagAUTHENTICATEINFO
extern IID_IAuthenticateEx as const GUID

type IAuthenticateExVtbl
 QueryInterface as function(byval This as IAuthenticateEx ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IAuthenticateEx ptr) as ULONG
 Release as function(byval This as IAuthenticateEx ptr) as ULONG
 Authenticate as function(byval This as IAuthenticateEx ptr, byval phwnd as HWND ptr, byval pszUsername as LPWSTR ptr, byval pszPassword as LPWSTR ptr) as HRESULT
 AuthenticateEx as function(byval This as IAuthenticateEx ptr, byval phwnd as HWND ptr, byval pszUsername as LPWSTR ptr, byval pszPassword as LPWSTR ptr, byval pauthinfo as AUTHENTICATEINFO ptr) as HRESULT
end type

type IAuthenticateEx_
 lpVtbl as IAuthenticateExVtbl ptr
end type

declare function IAuthenticateEx_AuthenticateEx_Proxy(byval This as IAuthenticateEx ptr, byval phwnd as HWND ptr, byval pszUsername as LPWSTR ptr, byval pszPassword as LPWSTR ptr, byval pauthinfo as AUTHENTICATEINFO ptr) as HRESULT
declare sub IAuthenticateEx_AuthenticateEx_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IHttpNegotiate as IHttpNegotiate_
type LPHTTPNEGOTIATE as IHttpNegotiate ptr
extern IID_IHttpNegotiate as const GUID

type IHttpNegotiateVtbl
 QueryInterface as function(byval This as IHttpNegotiate ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IHttpNegotiate ptr) as ULONG
 Release as function(byval This as IHttpNegotiate ptr) as ULONG
 BeginningTransaction as function(byval This as IHttpNegotiate ptr, byval szURL as LPCWSTR, byval szHeaders as LPCWSTR, byval dwReserved as DWORD, byval pszAdditionalHeaders as LPWSTR ptr) as HRESULT
 OnResponse as function(byval This as IHttpNegotiate ptr, byval dwResponseCode as DWORD, byval szResponseHeaders as LPCWSTR, byval szRequestHeaders as LPCWSTR, byval pszAdditionalRequestHeaders as LPWSTR ptr) as HRESULT
end type

type IHttpNegotiate_
 lpVtbl as IHttpNegotiateVtbl ptr
end type


declare function IHttpNegotiate_BeginningTransaction_Proxy(byval This as IHttpNegotiate ptr, byval szURL as LPCWSTR, byval szHeaders as LPCWSTR, byval dwReserved as DWORD, byval pszAdditionalHeaders as LPWSTR ptr) as HRESULT
declare sub IHttpNegotiate_BeginningTransaction_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IHttpNegotiate_OnResponse_Proxy(byval This as IHttpNegotiate ptr, byval dwResponseCode as DWORD, byval szResponseHeaders as LPCWSTR, byval szRequestHeaders as LPCWSTR, byval pszAdditionalRequestHeaders as LPWSTR ptr) as HRESULT
declare sub IHttpNegotiate_OnResponse_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IHttpNegotiate2 as IHttpNegotiate2_
type LPHTTPNEGOTIATE2 as IHttpNegotiate2 ptr
extern IID_IHttpNegotiate2 as const GUID

type IHttpNegotiate2Vtbl
 QueryInterface as function(byval This as IHttpNegotiate2 ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IHttpNegotiate2 ptr) as ULONG
 Release as function(byval This as IHttpNegotiate2 ptr) as ULONG
 BeginningTransaction as function(byval This as IHttpNegotiate2 ptr, byval szURL as LPCWSTR, byval szHeaders as LPCWSTR, byval dwReserved as DWORD, byval pszAdditionalHeaders as LPWSTR ptr) as HRESULT
 OnResponse as function(byval This as IHttpNegotiate2 ptr, byval dwResponseCode as DWORD, byval szResponseHeaders as LPCWSTR, byval szRequestHeaders as LPCWSTR, byval pszAdditionalRequestHeaders as LPWSTR ptr) as HRESULT
 GetRootSecurityId as function(byval This as IHttpNegotiate2 ptr, byval pbSecurityId as UBYTE ptr, byval pcbSecurityId as DWORD ptr, byval dwReserved as DWORD_PTR) as HRESULT
end type

type IHttpNegotiate2_
 lpVtbl as IHttpNegotiate2Vtbl ptr
end type

declare function IHttpNegotiate2_GetRootSecurityId_Proxy(byval This as IHttpNegotiate2 ptr, byval pbSecurityId as UBYTE ptr, byval pcbSecurityId as DWORD ptr, byval dwReserved as DWORD_PTR) as HRESULT
declare sub IHttpNegotiate2_GetRootSecurityId_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IHttpNegotiate3 as IHttpNegotiate3_
type LPHTTPNEGOTIATE3 as IHttpNegotiate3 ptr
extern IID_IHttpNegotiate3 as const GUID

type IHttpNegotiate3Vtbl
 QueryInterface as function(byval This as IHttpNegotiate3 ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IHttpNegotiate3 ptr) as ULONG
 Release as function(byval This as IHttpNegotiate3 ptr) as ULONG
 BeginningTransaction as function(byval This as IHttpNegotiate3 ptr, byval szURL as LPCWSTR, byval szHeaders as LPCWSTR, byval dwReserved as DWORD, byval pszAdditionalHeaders as LPWSTR ptr) as HRESULT
 OnResponse as function(byval This as IHttpNegotiate3 ptr, byval dwResponseCode as DWORD, byval szResponseHeaders as LPCWSTR, byval szRequestHeaders as LPCWSTR, byval pszAdditionalRequestHeaders as LPWSTR ptr) as HRESULT
 GetRootSecurityId as function(byval This as IHttpNegotiate3 ptr, byval pbSecurityId as UBYTE ptr, byval pcbSecurityId as DWORD ptr, byval dwReserved as DWORD_PTR) as HRESULT
 GetSerializedClientCertContext as function(byval This as IHttpNegotiate3 ptr, byval ppbCert as UBYTE ptr ptr, byval pcbCert as DWORD ptr) as HRESULT
end type

type IHttpNegotiate3_
 lpVtbl as IHttpNegotiate3Vtbl ptr
end type

declare function IHttpNegotiate3_GetSerializedClientCertContext_Proxy(byval This as IHttpNegotiate3 ptr, byval ppbCert as UBYTE ptr ptr, byval pcbCert as DWORD ptr) as HRESULT
declare sub IHttpNegotiate3_GetSerializedClientCertContext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IWinInetFileStream as IWinInetFileStream_
type LPWININETFILESTREAM as IWinInetFileStream ptr
extern IID_IWinInetFileStream as const GUID

type IWinInetFileStreamVtbl
 QueryInterface as function(byval This as IWinInetFileStream ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IWinInetFileStream ptr) as ULONG
 Release as function(byval This as IWinInetFileStream ptr) as ULONG
 SetHandleForUnlock as function(byval This as IWinInetFileStream ptr, byval hWinInetLockHandle as DWORD_PTR, byval dwReserved as DWORD_PTR) as HRESULT
 SetDeleteFile as function(byval This as IWinInetFileStream ptr, byval dwReserved as DWORD_PTR) as HRESULT
end type

type IWinInetFileStream_
 lpVtbl as IWinInetFileStreamVtbl ptr
end type


declare function IWinInetFileStream_SetHandleForUnlock_Proxy(byval This as IWinInetFileStream ptr, byval hWinInetLockHandle as DWORD_PTR, byval dwReserved as DWORD_PTR) as HRESULT
declare sub IWinInetFileStream_SetHandleForUnlock_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IWinInetFileStream_SetDeleteFile_Proxy(byval This as IWinInetFileStream ptr, byval dwReserved as DWORD_PTR) as HRESULT
declare sub IWinInetFileStream_SetDeleteFile_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IWindowForBindingUI as IWindowForBindingUI_
type LPWINDOWFORBINDINGUI as IWindowForBindingUI ptr
extern IID_IWindowForBindingUI as const GUID

type IWindowForBindingUIVtbl
 QueryInterface as function(byval This as IWindowForBindingUI ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IWindowForBindingUI ptr) as ULONG
 Release as function(byval This as IWindowForBindingUI ptr) as ULONG
 GetWindow as function(byval This as IWindowForBindingUI ptr, byval rguidReason as const GUID const ptr, byval phwnd as HWND ptr) as HRESULT
end type

type IWindowForBindingUI_
 lpVtbl as IWindowForBindingUIVtbl ptr
end type

declare function IWindowForBindingUI_GetWindow_Proxy(byval This as IWindowForBindingUI ptr, byval rguidReason as const GUID const ptr, byval phwnd as HWND ptr) as HRESULT
declare sub IWindowForBindingUI_GetWindow_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type ICodeInstall as ICodeInstall_
type LPCODEINSTALL as ICodeInstall ptr

type __WIDL_urlmon_generated_name_0000000B as long
enum
 CIP_DISK_FULL = 0
 CIP_ACCESS_DENIED = 1
 CIP_NEWER_VERSION_EXISTS = 2
 CIP_OLDER_VERSION_EXISTS = 3
 CIP_NAME_CONFLICT = 4
 CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 5
 CIP_EXE_SELF_REGISTERATION_TIMEOUT = 6
 CIP_UNSAFE_TO_ABORT = 7
 CIP_NEED_REBOOT = 8
 CIP_NEED_REBOOT_UI_PERMISSION = 9
end enum

type CIP_STATUS as __WIDL_urlmon_generated_name_0000000B
extern IID_ICodeInstall as const GUID

type ICodeInstallVtbl
 QueryInterface as function(byval This as ICodeInstall ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ICodeInstall ptr) as ULONG
 Release as function(byval This as ICodeInstall ptr) as ULONG
 GetWindow as function(byval This as ICodeInstall ptr, byval rguidReason as const GUID const ptr, byval phwnd as HWND ptr) as HRESULT
 OnCodeInstallProblem as function(byval This as ICodeInstall ptr, byval ulStatusCode as ULONG, byval szDestination as LPCWSTR, byval szSource as LPCWSTR, byval dwReserved as DWORD) as HRESULT
end type

type ICodeInstall_
 lpVtbl as ICodeInstallVtbl ptr
end type

declare function ICodeInstall_OnCodeInstallProblem_Proxy(byval This as ICodeInstall ptr, byval ulStatusCode as ULONG, byval szDestination as LPCWSTR, byval szSource as LPCWSTR, byval dwReserved as DWORD) as HRESULT
declare sub ICodeInstall_OnCodeInstallProblem_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)


type IWinInetInfo as IWinInetInfo_
type LPWININETINFO as IWinInetInfo ptr
extern IID_IWinInetInfo as const GUID

type IWinInetInfoVtbl
 QueryInterface as function(byval This as IWinInetInfo ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IWinInetInfo ptr) as ULONG
 Release as function(byval This as IWinInetInfo ptr) as ULONG
 QueryOption as function(byval This as IWinInetInfo ptr, byval dwOption as DWORD, byval pBuffer as LPVOID, byval pcbBuf as DWORD ptr) as HRESULT
end type

type IWinInetInfo_
 lpVtbl as IWinInetInfoVtbl ptr
end type


declare function IWinInetInfo_RemoteQueryOption_Proxy(byval This as IWinInetInfo ptr, byval dwOption as DWORD, byval pBuffer as UBYTE ptr, byval pcbBuf as DWORD ptr) as HRESULT
declare sub IWinInetInfo_RemoteQueryOption_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IWinInetInfo_QueryOption_Proxy(byval This as IWinInetInfo ptr, byval dwOption as DWORD, byval pBuffer as LPVOID, byval pcbBuf as DWORD ptr) as HRESULT
declare function IWinInetInfo_QueryOption_Stub(byval This as IWinInetInfo ptr, byval dwOption as DWORD, byval pBuffer as UBYTE ptr, byval pcbBuf as DWORD ptr) as HRESULT

const WININETINFO_OPTION_LOCK_HANDLE = 65534
type IHttpSecurity as IHttpSecurity_
type LPHTTPSECURITY as IHttpSecurity ptr
extern IID_IHttpSecurity as const GUID

type IHttpSecurityVtbl
 QueryInterface as function(byval This as IHttpSecurity ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IHttpSecurity ptr) as ULONG
 Release as function(byval This as IHttpSecurity ptr) as ULONG
 GetWindow as function(byval This as IHttpSecurity ptr, byval rguidReason as const GUID const ptr, byval phwnd as HWND ptr) as HRESULT
 OnSecurityProblem as function(byval This as IHttpSecurity ptr, byval dwProblem as DWORD) as HRESULT
end type

type IHttpSecurity_
 lpVtbl as IHttpSecurityVtbl ptr
end type

declare function IHttpSecurity_OnSecurityProblem_Proxy(byval This as IHttpSecurity ptr, byval dwProblem as DWORD) as HRESULT
declare sub IHttpSecurity_OnSecurityProblem_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IWinInetHttpInfo as IWinInetHttpInfo_
type LPWININETHTTPINFO as IWinInetHttpInfo ptr
extern IID_IWinInetHttpInfo as const GUID

type IWinInetHttpInfoVtbl
 QueryInterface as function(byval This as IWinInetHttpInfo ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IWinInetHttpInfo ptr) as ULONG
 Release as function(byval This as IWinInetHttpInfo ptr) as ULONG
 QueryOption as function(byval This as IWinInetHttpInfo ptr, byval dwOption as DWORD, byval pBuffer as LPVOID, byval pcbBuf as DWORD ptr) as HRESULT
 QueryInfo as function(byval This as IWinInetHttpInfo ptr, byval dwOption as DWORD, byval pBuffer as LPVOID, byval pcbBuf as DWORD ptr, byval pdwFlags as DWORD ptr, byval pdwReserved as DWORD ptr) as HRESULT
end type

type IWinInetHttpInfo_
 lpVtbl as IWinInetHttpInfoVtbl ptr
end type


declare function IWinInetHttpInfo_RemoteQueryInfo_Proxy(byval This as IWinInetHttpInfo ptr, byval dwOption as DWORD, byval pBuffer as UBYTE ptr, byval pcbBuf as DWORD ptr, byval pdwFlags as DWORD ptr, byval pdwReserved as DWORD ptr) as HRESULT
declare sub IWinInetHttpInfo_RemoteQueryInfo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IWinInetHttpInfo_QueryInfo_Proxy(byval This as IWinInetHttpInfo ptr, byval dwOption as DWORD, byval pBuffer as LPVOID, byval pcbBuf as DWORD ptr, byval pdwFlags as DWORD ptr, byval pdwReserved as DWORD ptr) as HRESULT
declare function IWinInetHttpInfo_QueryInfo_Stub(byval This as IWinInetHttpInfo ptr, byval dwOption as DWORD, byval pBuffer as UBYTE ptr, byval pcbBuf as DWORD ptr, byval pdwFlags as DWORD ptr, byval pdwReserved as DWORD ptr) as HRESULT
extern IID_IWinInetHttpTimeouts as const GUID
type IWinInetHttpTimeouts as IWinInetHttpTimeouts_

type IWinInetHttpTimeoutsVtbl
 QueryInterface as function(byval This as IWinInetHttpTimeouts ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IWinInetHttpTimeouts ptr) as ULONG
 Release as function(byval This as IWinInetHttpTimeouts ptr) as ULONG
 GetRequestTimeouts as function(byval This as IWinInetHttpTimeouts ptr, byval pdwConnectTimeout as DWORD ptr, byval pdwSendTimeout as DWORD ptr, byval pdwReceiveTimeout as DWORD ptr) as HRESULT
end type

type IWinInetHttpTimeouts_
 lpVtbl as IWinInetHttpTimeoutsVtbl ptr
end type

declare function IWinInetHttpTimeouts_GetRequestTimeouts_Proxy(byval This as IWinInetHttpTimeouts ptr, byval pdwConnectTimeout as DWORD ptr, byval pdwSendTimeout as DWORD ptr, byval pdwReceiveTimeout as DWORD ptr) as HRESULT
declare sub IWinInetHttpTimeouts_GetRequestTimeouts_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)


extern SID_BindHost as const GUID
type IBindHost as IBindHost_
type LPBINDHOST as IBindHost ptr
extern IID_IBindHost as const GUID
extern SID_IBindHost alias "IID_IBindHost" as const GUID
extern SID_SBindHost alias "IID_IBindHost" as const GUID

type IBindHostVtbl
 QueryInterface as function(byval This as IBindHost ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IBindHost ptr) as ULONG
 Release as function(byval This as IBindHost ptr) as ULONG
 CreateMoniker as function(byval This as IBindHost ptr, byval szName as LPOLESTR, byval pBC as IBindCtx ptr, byval ppmk as IMoniker ptr ptr, byval dwReserved as DWORD) as HRESULT
 MonikerBindToStorage as function(byval This as IBindHost ptr, byval pMk as IMoniker ptr, byval pBC as IBindCtx ptr, byval pBSC as IBindStatusCallback ptr, byval riid as const IID const ptr, byval ppvObj as any ptr ptr) as HRESULT
 MonikerBindToObject as function(byval This as IBindHost ptr, byval pMk as IMoniker ptr, byval pBC as IBindCtx ptr, byval pBSC as IBindStatusCallback ptr, byval riid as const IID const ptr, byval ppvObj as any ptr ptr) as HRESULT
end type

type IBindHost_
 lpVtbl as IBindHostVtbl ptr
end type


declare function IBindHost_CreateMoniker_Proxy(byval This as IBindHost ptr, byval szName as LPOLESTR, byval pBC as IBindCtx ptr, byval ppmk as IMoniker ptr ptr, byval dwReserved as DWORD) as HRESULT
declare sub IBindHost_CreateMoniker_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindHost_RemoteMonikerBindToStorage_Proxy(byval This as IBindHost ptr, byval pMk as IMoniker ptr, byval pBC as IBindCtx ptr, byval pBSC as IBindStatusCallback ptr, byval riid as const IID const ptr, byval ppvObj as IUnknown ptr ptr) as HRESULT
declare sub IBindHost_RemoteMonikerBindToStorage_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindHost_RemoteMonikerBindToObject_Proxy(byval This as IBindHost ptr, byval pMk as IMoniker ptr, byval pBC as IBindCtx ptr, byval pBSC as IBindStatusCallback ptr, byval riid as const IID const ptr, byval ppvObj as IUnknown ptr ptr) as HRESULT
declare sub IBindHost_RemoteMonikerBindToObject_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IBindHost_MonikerBindToStorage_Proxy(byval This as IBindHost ptr, byval pMk as IMoniker ptr, byval pBC as IBindCtx ptr, byval pBSC as IBindStatusCallback ptr, byval riid as const IID const ptr, byval ppvObj as any ptr ptr) as HRESULT
declare function IBindHost_MonikerBindToStorage_Stub(byval This as IBindHost ptr, byval pMk as IMoniker ptr, byval pBC as IBindCtx ptr, byval pBSC as IBindStatusCallback ptr, byval riid as const IID const ptr, byval ppvObj as IUnknown ptr ptr) as HRESULT
declare function IBindHost_MonikerBindToObject_Proxy(byval This as IBindHost ptr, byval pMk as IMoniker ptr, byval pBC as IBindCtx ptr, byval pBSC as IBindStatusCallback ptr, byval riid as const IID const ptr, byval ppvObj as any ptr ptr) as HRESULT
declare function IBindHost_MonikerBindToObject_Stub(byval This as IBindHost ptr, byval pMk as IMoniker ptr, byval pBC as IBindCtx ptr, byval pBSC as IBindStatusCallback ptr, byval riid as const IID const ptr, byval ppvObj as IUnknown ptr ptr) as HRESULT

const URLOSTRM_USECACHEDCOPY_ONLY = &h1
const URLOSTRM_USECACHEDCOPY = &h2
const URLOSTRM_GETNEWESTVERSION = &h3

declare function HlinkSimpleNavigateToString(byval szTarget as LPCWSTR, byval szLocation as LPCWSTR, byval szTargetFrameName as LPCWSTR, byval pUnk as IUnknown ptr, byval pbc as IBindCtx ptr, byval as IBindStatusCallback ptr, byval grfHLNF as DWORD, byval dwReserved as DWORD) as HRESULT
declare function HlinkSimpleNavigateToMoniker(byval pmkTarget as IMoniker ptr, byval szLocation as LPCWSTR, byval szTargetFrameName as LPCWSTR, byval pUnk as IUnknown ptr, byval pbc as IBindCtx ptr, byval as IBindStatusCallback ptr, byval grfHLNF as DWORD, byval dwReserved as DWORD) as HRESULT
declare function URLOpenStreamA(byval as LPUNKNOWN, byval as LPCSTR, byval as DWORD, byval as LPBINDSTATUSCALLBACK) as HRESULT
declare function URLOpenStreamW(byval as LPUNKNOWN, byval as LPCWSTR, byval as DWORD, byval as LPBINDSTATUSCALLBACK) as HRESULT
declare function URLOpenPullStreamA(byval as LPUNKNOWN, byval as LPCSTR, byval as DWORD, byval as LPBINDSTATUSCALLBACK) as HRESULT
declare function URLOpenPullStreamW(byval as LPUNKNOWN, byval as LPCWSTR, byval as DWORD, byval as LPBINDSTATUSCALLBACK) as HRESULT
declare function URLDownloadToFileA(byval as LPUNKNOWN, byval as LPCSTR, byval as LPCSTR, byval as DWORD, byval as LPBINDSTATUSCALLBACK) as HRESULT
declare function URLDownloadToFileW(byval as LPUNKNOWN, byval as LPCWSTR, byval as LPCWSTR, byval as DWORD, byval as LPBINDSTATUSCALLBACK) as HRESULT
declare function URLDownloadToCacheFileA(byval as LPUNKNOWN, byval as LPCSTR, byval as LPSTR, byval as DWORD, byval as DWORD, byval as LPBINDSTATUSCALLBACK) as HRESULT
declare function URLDownloadToCacheFileW(byval as LPUNKNOWN, byval as LPCWSTR, byval as LPWSTR, byval as DWORD, byval as DWORD, byval as LPBINDSTATUSCALLBACK) as HRESULT
declare function URLOpenBlockingStreamA(byval as LPUNKNOWN, byval as LPCSTR, byval as LPSTREAM ptr, byval as DWORD, byval as LPBINDSTATUSCALLBACK) as HRESULT
declare function URLOpenBlockingStreamW(byval as LPUNKNOWN, byval as LPCWSTR, byval as LPSTREAM ptr, byval as DWORD, byval as LPBINDSTATUSCALLBACK) as HRESULT

 declare function URLOpenStream alias "URLOpenStreamA"(byval as LPUNKNOWN, byval as LPCSTR, byval as DWORD, byval as LPBINDSTATUSCALLBACK) as HRESULT
 declare function URLOpenPullStream alias "URLOpenPullStreamA"(byval as LPUNKNOWN, byval as LPCSTR, byval as DWORD, byval as LPBINDSTATUSCALLBACK) as HRESULT
 declare function URLDownloadToFile alias "URLDownloadToFileA"(byval as LPUNKNOWN, byval as LPCSTR, byval as LPCSTR, byval as DWORD, byval as LPBINDSTATUSCALLBACK) as HRESULT
 declare function URLDownloadToCacheFile alias "URLDownloadToCacheFileA"(byval as LPUNKNOWN, byval as LPCSTR, byval as LPSTR, byval as DWORD, byval as DWORD, byval as LPBINDSTATUSCALLBACK) as HRESULT
 declare function URLOpenBlockingStream alias "URLOpenBlockingStreamA"(byval as LPUNKNOWN, byval as LPCSTR, byval as LPSTREAM ptr, byval as DWORD, byval as LPBINDSTATUSCALLBACK) as HRESULT

declare function HlinkGoBack(byval pUnk as IUnknown ptr) as HRESULT
declare function HlinkGoForward(byval pUnk as IUnknown ptr) as HRESULT
declare function HlinkNavigateString(byval pUnk as IUnknown ptr, byval szTarget as LPCWSTR) as HRESULT
declare function HlinkNavigateMoniker(byval pUnk as IUnknown ptr, byval pmkTarget as IMoniker ptr) as HRESULT
type IInternet as IInternet_
type LPIINTERNET as IInternet ptr
extern IID_IInternet as const GUID

type IInternetVtbl
 QueryInterface as function(byval This as IInternet ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInternet ptr) as ULONG
 Release as function(byval This as IInternet ptr) as ULONG
end type

type IInternet_
 lpVtbl as IInternetVtbl ptr
end type

type IInternetBindInfo as IInternetBindInfo_
type LPIINTERNETBINDINFO as IInternetBindInfo ptr

type tagBINDSTRING as long
enum
 BINDSTRING_HEADERS = 1
 BINDSTRING_ACCEPT_MIMES = 2
 BINDSTRING_EXTRA_URL = 3
 BINDSTRING_LANGUAGE = 4
 BINDSTRING_USERNAME = 5
 BINDSTRING_PASSWORD = 6
 BINDSTRING_UA_PIXELS = 7
 BINDSTRING_UA_COLOR = 8
 BINDSTRING_OS = 9
 BINDSTRING_USER_AGENT = 10
 BINDSTRING_ACCEPT_ENCODINGS = 11
 BINDSTRING_POST_COOKIE = 12
 BINDSTRING_POST_DATA_MIME = 13
 BINDSTRING_URL = 14
 BINDSTRING_IID = 15
 BINDSTRING_FLAG_BIND_TO_OBJECT = 16
 BINDSTRING_PTR_BIND_CONTEXT = 17
 BINDSTRING_XDR_ORIGIN = 18
 BINDSTRING_DOWNLOADPATH = 19
 BINDSTRING_ROOTDOC_URL = 20
 BINDSTRING_INITIAL_FILENAME = 21
 BINDSTRING_PROXY_USERNAME = 22
 BINDSTRING_PROXY_PASSWORD = 23
end enum

type BINDSTRING as tagBINDSTRING
extern IID_IInternetBindInfo as const GUID

type IInternetBindInfoVtbl
 QueryInterface as function(byval This as IInternetBindInfo ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInternetBindInfo ptr) as ULONG
 Release as function(byval This as IInternetBindInfo ptr) as ULONG
 GetBindInfo as function(byval This as IInternetBindInfo ptr, byval grfBINDF as DWORD ptr, byval pbindinfo as BINDINFO ptr) as HRESULT
 GetBindString as function(byval This as IInternetBindInfo ptr, byval ulStringType as ULONG, byval ppwzStr as LPOLESTR ptr, byval cEl as ULONG, byval pcElFetched as ULONG ptr) as HRESULT
end type

type IInternetBindInfo_
 lpVtbl as IInternetBindInfoVtbl ptr
end type


declare function IInternetBindInfo_GetBindInfo_Proxy(byval This as IInternetBindInfo ptr, byval grfBINDF as DWORD ptr, byval pbindinfo as BINDINFO ptr) as HRESULT
declare sub IInternetBindInfo_GetBindInfo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetBindInfo_GetBindString_Proxy(byval This as IInternetBindInfo ptr, byval ulStringType as ULONG, byval ppwzStr as LPOLESTR ptr, byval cEl as ULONG, byval pcElFetched as ULONG ptr) as HRESULT
declare sub IInternetBindInfo_GetBindString_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IInternetBindInfoEx as IInternetBindInfoEx_
type LPIINTERNETBINDINFOEX as IInternetBindInfoEx ptr
extern IID_IInternetBindInfoEx as const GUID

type IInternetBindInfoExVtbl
 QueryInterface as function(byval This as IInternetBindInfoEx ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInternetBindInfoEx ptr) as ULONG
 Release as function(byval This as IInternetBindInfoEx ptr) as ULONG
 GetBindInfo as function(byval This as IInternetBindInfoEx ptr, byval grfBINDF as DWORD ptr, byval pbindinfo as BINDINFO ptr) as HRESULT
 GetBindString as function(byval This as IInternetBindInfoEx ptr, byval ulStringType as ULONG, byval ppwzStr as LPOLESTR ptr, byval cEl as ULONG, byval pcElFetched as ULONG ptr) as HRESULT
 GetBindInfoEx as function(byval This as IInternetBindInfoEx ptr, byval grfBINDF as DWORD ptr, byval pbindinfo as BINDINFO ptr, byval grfBINDF2 as DWORD ptr, byval pdwReserved as DWORD ptr) as HRESULT
end type

type IInternetBindInfoEx_
 lpVtbl as IInternetBindInfoExVtbl ptr
end type

declare function IInternetBindInfoEx_GetBindInfoEx_Proxy(byval This as IInternetBindInfoEx ptr, byval grfBINDF as DWORD ptr, byval pbindinfo as BINDINFO ptr, byval grfBINDF2 as DWORD ptr, byval pdwReserved as DWORD ptr) as HRESULT
declare sub IInternetBindInfoEx_GetBindInfoEx_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IInternetProtocolRoot as IInternetProtocolRoot_
type LPIINTERNETPROTOCOLROOT as IInternetProtocolRoot ptr

type _tagPI_FLAGS as long
enum
 PI_PARSE_URL = &h1
 PI_FILTER_MODE = &h2
 PI_FORCE_ASYNC = &h4
 PI_USE_WORKERTHREAD = &h8
 PI_MIMEVERIFICATION = &h10
 PI_CLSIDLOOKUP = &h20
 PI_DATAPROGRESS = &h40
 PI_SYNCHRONOUS = &h80
 PI_APARTMENTTHREADED = &h100
 PI_CLASSINSTALL = &h200
 PI_PASSONBINDCTX = &h2000
 PI_NOMIMEHANDLER = &h8000
 PI_LOADAPPDIRECT = &h4000
 PD_FORCE_SWITCH = &h10000
 PI_PREFERDEFAULTHANDLER = &h20000
end enum

const PI_DOCFILECLSIDLOOKUP = PI_CLSIDLOOKUP
type PI_FLAGS as _tagPI_FLAGS

type _tagPROTOCOLDATA
 grfFlags as DWORD
 dwState as DWORD
 pData as LPVOID
 cbData as ULONG
end type

type PROTOCOLDATA as _tagPROTOCOLDATA

type _tagStartParam
 iid as IID
 pIBindCtx as IBindCtx ptr
 pItf as IUnknown ptr
end type

type StartParam as _tagStartParam
extern IID_IInternetProtocolRoot as const GUID
type IInternetProtocolSink as IInternetProtocolSink_

type IInternetProtocolRootVtbl
 QueryInterface as function(byval This as IInternetProtocolRoot ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInternetProtocolRoot ptr) as ULONG
 Release as function(byval This as IInternetProtocolRoot ptr) as ULONG
 Start as function(byval This as IInternetProtocolRoot ptr, byval szUrl as LPCWSTR, byval pOIProtSink as IInternetProtocolSink ptr, byval pOIBindInfo as IInternetBindInfo ptr, byval grfPI as DWORD, byval dwReserved as HANDLE_PTR) as HRESULT
 Continue as function(byval This as IInternetProtocolRoot ptr, byval pProtocolData as PROTOCOLDATA ptr) as HRESULT
 Abort as function(byval This as IInternetProtocolRoot ptr, byval hrReason as HRESULT, byval dwOptions as DWORD) as HRESULT
 Terminate as function(byval This as IInternetProtocolRoot ptr, byval dwOptions as DWORD) as HRESULT
 Suspend as function(byval This as IInternetProtocolRoot ptr) as HRESULT
 Resume as function(byval This as IInternetProtocolRoot ptr) as HRESULT
end type

type IInternetProtocolRoot_
 lpVtbl as IInternetProtocolRootVtbl ptr
end type


declare function IInternetProtocolRoot_Start_Proxy(byval This as IInternetProtocolRoot ptr, byval szUrl as LPCWSTR, byval pOIProtSink as IInternetProtocolSink ptr, byval pOIBindInfo as IInternetBindInfo ptr, byval grfPI as DWORD, byval dwReserved as HANDLE_PTR) as HRESULT
declare sub IInternetProtocolRoot_Start_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetProtocolRoot_Continue_Proxy(byval This as IInternetProtocolRoot ptr, byval pProtocolData as PROTOCOLDATA ptr) as HRESULT
declare sub IInternetProtocolRoot_Continue_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetProtocolRoot_Abort_Proxy(byval This as IInternetProtocolRoot ptr, byval hrReason as HRESULT, byval dwOptions as DWORD) as HRESULT
declare sub IInternetProtocolRoot_Abort_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetProtocolRoot_Terminate_Proxy(byval This as IInternetProtocolRoot ptr, byval dwOptions as DWORD) as HRESULT
declare sub IInternetProtocolRoot_Terminate_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetProtocolRoot_Suspend_Proxy(byval This as IInternetProtocolRoot ptr) as HRESULT
declare sub IInternetProtocolRoot_Suspend_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetProtocolRoot_Resume_Proxy(byval This as IInternetProtocolRoot ptr) as HRESULT
declare sub IInternetProtocolRoot_Resume_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IInternetProtocol as IInternetProtocol_
type LPIINTERNETPROTOCOL as IInternetProtocol ptr
extern IID_IInternetProtocol as const GUID

type IInternetProtocolVtbl
 QueryInterface as function(byval This as IInternetProtocol ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInternetProtocol ptr) as ULONG
 Release as function(byval This as IInternetProtocol ptr) as ULONG
 Start as function(byval This as IInternetProtocol ptr, byval szUrl as LPCWSTR, byval pOIProtSink as IInternetProtocolSink ptr, byval pOIBindInfo as IInternetBindInfo ptr, byval grfPI as DWORD, byval dwReserved as HANDLE_PTR) as HRESULT
 Continue as function(byval This as IInternetProtocol ptr, byval pProtocolData as PROTOCOLDATA ptr) as HRESULT
 Abort as function(byval This as IInternetProtocol ptr, byval hrReason as HRESULT, byval dwOptions as DWORD) as HRESULT
 Terminate as function(byval This as IInternetProtocol ptr, byval dwOptions as DWORD) as HRESULT
 Suspend as function(byval This as IInternetProtocol ptr) as HRESULT
 Resume as function(byval This as IInternetProtocol ptr) as HRESULT
 Read as function(byval This as IInternetProtocol ptr, byval pv as any ptr, byval cb as ULONG, byval pcbRead as ULONG ptr) as HRESULT
 Seek as function(byval This as IInternetProtocol ptr, byval dlibMove as LARGE_INTEGER, byval dwOrigin as DWORD, byval plibNewPosition as ULARGE_INTEGER ptr) as HRESULT
 LockRequest as function(byval This as IInternetProtocol ptr, byval dwOptions as DWORD) as HRESULT
 UnlockRequest as function(byval This as IInternetProtocol ptr) as HRESULT
end type

type IInternetProtocol_
 lpVtbl as IInternetProtocolVtbl ptr
end type


declare function IInternetProtocol_Read_Proxy(byval This as IInternetProtocol ptr, byval pv as any ptr, byval cb as ULONG, byval pcbRead as ULONG ptr) as HRESULT
declare sub IInternetProtocol_Read_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetProtocol_Seek_Proxy(byval This as IInternetProtocol ptr, byval dlibMove as LARGE_INTEGER, byval dwOrigin as DWORD, byval plibNewPosition as ULARGE_INTEGER ptr) as HRESULT
declare sub IInternetProtocol_Seek_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetProtocol_LockRequest_Proxy(byval This as IInternetProtocol ptr, byval dwOptions as DWORD) as HRESULT
declare sub IInternetProtocol_LockRequest_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetProtocol_UnlockRequest_Proxy(byval This as IInternetProtocol ptr) as HRESULT
declare sub IInternetProtocol_UnlockRequest_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)


type LPIINTERNETPROTOCOLSINK as IInternetProtocolSink ptr
extern IID_IInternetProtocolSink as const GUID

type IInternetProtocolSinkVtbl
 QueryInterface as function(byval This as IInternetProtocolSink ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInternetProtocolSink ptr) as ULONG
 Release as function(byval This as IInternetProtocolSink ptr) as ULONG
 Switch as function(byval This as IInternetProtocolSink ptr, byval pProtocolData as PROTOCOLDATA ptr) as HRESULT
 ReportProgress as function(byval This as IInternetProtocolSink ptr, byval ulStatusCode as ULONG, byval szStatusText as LPCWSTR) as HRESULT
 ReportData as function(byval This as IInternetProtocolSink ptr, byval grfBSCF as DWORD, byval ulProgress as ULONG, byval ulProgressMax as ULONG) as HRESULT
 ReportResult as function(byval This as IInternetProtocolSink ptr, byval hrResult as HRESULT, byval dwError as DWORD, byval szResult as LPCWSTR) as HRESULT
end type

type IInternetProtocolSink_
 lpVtbl as IInternetProtocolSinkVtbl ptr
end type


declare function IInternetProtocolSink_Switch_Proxy(byval This as IInternetProtocolSink ptr, byval pProtocolData as PROTOCOLDATA ptr) as HRESULT
declare sub IInternetProtocolSink_Switch_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetProtocolSink_ReportProgress_Proxy(byval This as IInternetProtocolSink ptr, byval ulStatusCode as ULONG, byval szStatusText as LPCWSTR) as HRESULT
declare sub IInternetProtocolSink_ReportProgress_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetProtocolSink_ReportData_Proxy(byval This as IInternetProtocolSink ptr, byval grfBSCF as DWORD, byval ulProgress as ULONG, byval ulProgressMax as ULONG) as HRESULT
declare sub IInternetProtocolSink_ReportData_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetProtocolSink_ReportResult_Proxy(byval This as IInternetProtocolSink ptr, byval hrResult as HRESULT, byval dwError as DWORD, byval szResult as LPCWSTR) as HRESULT
declare sub IInternetProtocolSink_ReportResult_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IInternetProtocolSinkStackable as IInternetProtocolSinkStackable_
type LPIINTERNETPROTOCOLSINKStackable as IInternetProtocolSinkStackable ptr
extern IID_IInternetProtocolSinkStackable as const GUID

type IInternetProtocolSinkStackableVtbl
 QueryInterface as function(byval This as IInternetProtocolSinkStackable ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInternetProtocolSinkStackable ptr) as ULONG
 Release as function(byval This as IInternetProtocolSinkStackable ptr) as ULONG
 SwitchSink as function(byval This as IInternetProtocolSinkStackable ptr, byval pOIProtSink as IInternetProtocolSink ptr) as HRESULT
 CommitSwitch as function(byval This as IInternetProtocolSinkStackable ptr) as HRESULT
 RollbackSwitch as function(byval This as IInternetProtocolSinkStackable ptr) as HRESULT
end type

type IInternetProtocolSinkStackable_
 lpVtbl as IInternetProtocolSinkStackableVtbl ptr
end type


declare function IInternetProtocolSinkStackable_SwitchSink_Proxy(byval This as IInternetProtocolSinkStackable ptr, byval pOIProtSink as IInternetProtocolSink ptr) as HRESULT
declare sub IInternetProtocolSinkStackable_SwitchSink_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetProtocolSinkStackable_CommitSwitch_Proxy(byval This as IInternetProtocolSinkStackable ptr) as HRESULT
declare sub IInternetProtocolSinkStackable_CommitSwitch_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetProtocolSinkStackable_RollbackSwitch_Proxy(byval This as IInternetProtocolSinkStackable ptr) as HRESULT
declare sub IInternetProtocolSinkStackable_RollbackSwitch_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IInternetSession as IInternetSession_
type LPIINTERNETSESSION as IInternetSession ptr

type _tagOIBDG_FLAGS as long
enum
 OIBDG_APARTMENTTHREADED = &h100
 OIBDG_DATAONLY = &h1000
end enum

type OIBDG_FLAGS as _tagOIBDG_FLAGS
extern IID_IInternetSession as const GUID

type IInternetSessionVtbl
 QueryInterface as function(byval This as IInternetSession ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInternetSession ptr) as ULONG
 Release as function(byval This as IInternetSession ptr) as ULONG
 RegisterNameSpace as function(byval This as IInternetSession ptr, byval pCF as IClassFactory ptr, byval rclsid as const IID const ptr, byval pwzProtocol as LPCWSTR, byval cPatterns as ULONG, byval ppwzPatterns as const LPCWSTR ptr, byval dwReserved as DWORD) as HRESULT
 UnregisterNameSpace as function(byval This as IInternetSession ptr, byval pCF as IClassFactory ptr, byval pszProtocol as LPCWSTR) as HRESULT
 RegisterMimeFilter as function(byval This as IInternetSession ptr, byval pCF as IClassFactory ptr, byval rclsid as const IID const ptr, byval pwzType as LPCWSTR) as HRESULT
 UnregisterMimeFilter as function(byval This as IInternetSession ptr, byval pCF as IClassFactory ptr, byval pwzType as LPCWSTR) as HRESULT
 CreateBinding as function(byval This as IInternetSession ptr, byval pBC as LPBC, byval szUrl as LPCWSTR, byval pUnkOuter as IUnknown ptr, byval ppUnk as IUnknown ptr ptr, byval ppOInetProt as IInternetProtocol ptr ptr, byval dwOption as DWORD) as HRESULT
 SetSessionOption as function(byval This as IInternetSession ptr, byval dwOption as DWORD, byval pBuffer as LPVOID, byval dwBufferLength as DWORD, byval dwReserved as DWORD) as HRESULT
 GetSessionOption as function(byval This as IInternetSession ptr, byval dwOption as DWORD, byval pBuffer as LPVOID, byval pdwBufferLength as DWORD ptr, byval dwReserved as DWORD) as HRESULT
end type

type IInternetSession_
 lpVtbl as IInternetSessionVtbl ptr
end type


declare function IInternetSession_RegisterNameSpace_Proxy(byval This as IInternetSession ptr, byval pCF as IClassFactory ptr, byval rclsid as const IID const ptr, byval pwzProtocol as LPCWSTR, byval cPatterns as ULONG, byval ppwzPatterns as const LPCWSTR ptr, byval dwReserved as DWORD) as HRESULT
declare sub IInternetSession_RegisterNameSpace_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetSession_UnregisterNameSpace_Proxy(byval This as IInternetSession ptr, byval pCF as IClassFactory ptr, byval pszProtocol as LPCWSTR) as HRESULT
declare sub IInternetSession_UnregisterNameSpace_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetSession_RegisterMimeFilter_Proxy(byval This as IInternetSession ptr, byval pCF as IClassFactory ptr, byval rclsid as const IID const ptr, byval pwzType as LPCWSTR) as HRESULT
declare sub IInternetSession_RegisterMimeFilter_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetSession_UnregisterMimeFilter_Proxy(byval This as IInternetSession ptr, byval pCF as IClassFactory ptr, byval pwzType as LPCWSTR) as HRESULT
declare sub IInternetSession_UnregisterMimeFilter_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetSession_CreateBinding_Proxy(byval This as IInternetSession ptr, byval pBC as LPBC, byval szUrl as LPCWSTR, byval pUnkOuter as IUnknown ptr, byval ppUnk as IUnknown ptr ptr, byval ppOInetProt as IInternetProtocol ptr ptr, byval dwOption as DWORD) as HRESULT
declare sub IInternetSession_CreateBinding_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetSession_SetSessionOption_Proxy(byval This as IInternetSession ptr, byval dwOption as DWORD, byval pBuffer as LPVOID, byval dwBufferLength as DWORD, byval dwReserved as DWORD) as HRESULT
declare sub IInternetSession_SetSessionOption_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetSession_GetSessionOption_Proxy(byval This as IInternetSession ptr, byval dwOption as DWORD, byval pBuffer as LPVOID, byval pdwBufferLength as DWORD ptr, byval dwReserved as DWORD) as HRESULT
declare sub IInternetSession_GetSessionOption_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IInternetThreadSwitch as IInternetThreadSwitch_
type LPIINTERNETTHREADSWITCH as IInternetThreadSwitch ptr
extern IID_IInternetThreadSwitch as const GUID

type IInternetThreadSwitchVtbl
 QueryInterface as function(byval This as IInternetThreadSwitch ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInternetThreadSwitch ptr) as ULONG
 Release as function(byval This as IInternetThreadSwitch ptr) as ULONG
 Prepare as function(byval This as IInternetThreadSwitch ptr) as HRESULT
 Continue as function(byval This as IInternetThreadSwitch ptr) as HRESULT
end type

type IInternetThreadSwitch_
 lpVtbl as IInternetThreadSwitchVtbl ptr
end type


declare function IInternetThreadSwitch_Prepare_Proxy(byval This as IInternetThreadSwitch ptr) as HRESULT
declare sub IInternetThreadSwitch_Prepare_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetThreadSwitch_Continue_Proxy(byval This as IInternetThreadSwitch ptr) as HRESULT
declare sub IInternetThreadSwitch_Continue_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IInternetPriority as IInternetPriority_
type LPIINTERNETPRIORITY as IInternetPriority ptr
extern IID_IInternetPriority as const GUID

type IInternetPriorityVtbl
 QueryInterface as function(byval This as IInternetPriority ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInternetPriority ptr) as ULONG
 Release as function(byval This as IInternetPriority ptr) as ULONG
 SetPriority as function(byval This as IInternetPriority ptr, byval nPriority as LONG) as HRESULT
 GetPriority as function(byval This as IInternetPriority ptr, byval pnPriority as LONG ptr) as HRESULT
end type

type IInternetPriority_
 lpVtbl as IInternetPriorityVtbl ptr
end type


declare function IInternetPriority_SetPriority_Proxy(byval This as IInternetPriority ptr, byval nPriority as LONG) as HRESULT
declare sub IInternetPriority_SetPriority_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetPriority_GetPriority_Proxy(byval This as IInternetPriority ptr, byval pnPriority as LONG ptr) as HRESULT
declare sub IInternetPriority_GetPriority_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IInternetProtocolInfo as IInternetProtocolInfo_
type LPIINTERNETPROTOCOLINFO as IInternetProtocolInfo ptr

type _tagPARSEACTION as long
enum
 PARSE_CANONICALIZE = 1
 PARSE_FRIENDLY = 2
 PARSE_SECURITY_URL = 3
 PARSE_ROOTDOCUMENT = 4
 PARSE_DOCUMENT = 5
 PARSE_ANCHOR = 6
 PARSE_ENCODE_IS_UNESCAPE = 7
 PARSE_DECODE_IS_ESCAPE = 8
 PARSE_PATH_FROM_URL = 9
 PARSE_URL_FROM_PATH = 10
 PARSE_MIME = 11
 PARSE_SERVER = 12
 PARSE_SCHEMA = 13
 PARSE_SITE = 14
 PARSE_DOMAIN = 15
 PARSE_LOCATION = 16
 PARSE_SECURITY_DOMAIN = 17
 PARSE_ESCAPE = 18
 PARSE_UNESCAPE = 19
end enum

type PARSEACTION as _tagPARSEACTION

type _tagPSUACTION as long
enum
 PSU_DEFAULT = 1
 PSU_SECURITY_URL_ONLY = 2
end enum

type PSUACTION as _tagPSUACTION

type _tagQUERYOPTION as long
enum
 QUERY_EXPIRATION_DATE = 1
 QUERY_TIME_OF_LAST_CHANGE = 2
 QUERY_CONTENT_ENCODING = 3
 QUERY_CONTENT_TYPE = 4
 QUERY_REFRESH = 5
 QUERY_RECOMBINE = 6
 QUERY_CAN_NAVIGATE = 7
 QUERY_USES_NETWORK = 8
 QUERY_IS_CACHED = 9
 QUERY_IS_INSTALLEDENTRY = 10
 QUERY_IS_CACHED_OR_MAPPED = 11
 QUERY_USES_CACHE = 12
 QUERY_IS_SECURE = 13
 QUERY_IS_SAFE = 14
 QUERY_USES_HISTORYFOLDER = 15
 QUERY_IS_CACHED_AND_USABLE_OFFLINE = 16
end enum

type QUERYOPTION as _tagQUERYOPTION
extern IID_IInternetProtocolInfo as const GUID

type IInternetProtocolInfoVtbl
 QueryInterface as function(byval This as IInternetProtocolInfo ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInternetProtocolInfo ptr) as ULONG
 Release as function(byval This as IInternetProtocolInfo ptr) as ULONG
 ParseUrl as function(byval This as IInternetProtocolInfo ptr, byval pwzUrl as LPCWSTR, byval ParseAction as PARSEACTION, byval dwParseFlags as DWORD, byval pwzResult as LPWSTR, byval cchResult as DWORD, byval pcchResult as DWORD ptr, byval dwReserved as DWORD) as HRESULT
 CombineUrl as function(byval This as IInternetProtocolInfo ptr, byval pwzBaseUrl as LPCWSTR, byval pwzRelativeUrl as LPCWSTR, byval dwCombineFlags as DWORD, byval pwzResult as LPWSTR, byval cchResult as DWORD, byval pcchResult as DWORD ptr, byval dwReserved as DWORD) as HRESULT
 CompareUrl as function(byval This as IInternetProtocolInfo ptr, byval pwzUrl1 as LPCWSTR, byval pwzUrl2 as LPCWSTR, byval dwCompareFlags as DWORD) as HRESULT
 QueryInfo as function(byval This as IInternetProtocolInfo ptr, byval pwzUrl as LPCWSTR, byval OueryOption as QUERYOPTION, byval dwQueryFlags as DWORD, byval pBuffer as LPVOID, byval cbBuffer as DWORD, byval pcbBuf as DWORD ptr, byval dwReserved as DWORD) as HRESULT
end type

type IInternetProtocolInfo_
 lpVtbl as IInternetProtocolInfoVtbl ptr
end type


declare function IInternetProtocolInfo_ParseUrl_Proxy(byval This as IInternetProtocolInfo ptr, byval pwzUrl as LPCWSTR, byval ParseAction as PARSEACTION, byval dwParseFlags as DWORD, byval pwzResult as LPWSTR, byval cchResult as DWORD, byval pcchResult as DWORD ptr, byval dwReserved as DWORD) as HRESULT
declare sub IInternetProtocolInfo_ParseUrl_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetProtocolInfo_CombineUrl_Proxy(byval This as IInternetProtocolInfo ptr, byval pwzBaseUrl as LPCWSTR, byval pwzRelativeUrl as LPCWSTR, byval dwCombineFlags as DWORD, byval pwzResult as LPWSTR, byval cchResult as DWORD, byval pcchResult as DWORD ptr, byval dwReserved as DWORD) as HRESULT
declare sub IInternetProtocolInfo_CombineUrl_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetProtocolInfo_CompareUrl_Proxy(byval This as IInternetProtocolInfo ptr, byval pwzUrl1 as LPCWSTR, byval pwzUrl2 as LPCWSTR, byval dwCompareFlags as DWORD) as HRESULT
declare sub IInternetProtocolInfo_CompareUrl_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetProtocolInfo_QueryInfo_Proxy(byval This as IInternetProtocolInfo ptr, byval pwzUrl as LPCWSTR, byval OueryOption as QUERYOPTION, byval dwQueryFlags as DWORD, byval pBuffer as LPVOID, byval cbBuffer as DWORD, byval pcbBuf as DWORD ptr, byval dwReserved as DWORD) as HRESULT
declare sub IInternetProtocolInfo_QueryInfo_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
const PARSE_ENCODE = PARSE_ENCODE_IS_UNESCAPE
const PARSE_DECODE = PARSE_DECODE_IS_ESCAPE

type IOInet as IInternet
type IOInetBindInfo as IInternetBindInfo
type IOInetBindInfoEx as IInternetBindInfoEx
type IOInetProtocolRoot as IInternetProtocolRoot
type IOInetProtocol as IInternetProtocol


type IOInetProtocolSink as IInternetProtocolSink
type IOInetProtocolInfo as IInternetProtocolInfo
type IOInetSession as IInternetSession
type IOInetPriority as IInternetPriority
type IOInetThreadSwitch as IInternetThreadSwitch
type IOInetProtocolSinkStackable as IInternetProtocolSinkStackable
type LPOINET as LPIINTERNET
type LPOINETPROTOCOLINFO as LPIINTERNETPROTOCOLINFO
type LPOINETBINDINFO as LPIINTERNETBINDINFO
type LPOINETPROTOCOLROOT as LPIINTERNETPROTOCOLROOT
type LPOINETPROTOCOL as LPIINTERNETPROTOCOL


type LPOINETPROTOCOLSINK as LPIINTERNETPROTOCOLSINK
type LPOINETSESSION as LPIINTERNETSESSION
type LPOINETTHREADSWITCH as LPIINTERNETTHREADSWITCH
type LPOINETPRIORITY as LPIINTERNETPRIORITY
type LPOINETPROTOCOLINFO as LPIINTERNETPROTOCOLINFO

extern IID_IOInet alias "IID_IInternet" as const GUID
extern IID_IOInetBindInfo alias "IID_IInternetBindInfo" as const GUID
extern IID_IOInetBindInfoEx alias "IID_IInternetBindInfoEx" as const GUID
extern IID_IOInetProtocolRoot alias "IID_IInternetProtocolRoot" as const GUID
extern IID_IOInetProtocol alias "IID_IInternetProtocol" as const GUID


extern IID_IOInetProtocolSink alias "IID_IInternetProtocolSink" as const GUID
extern IID_IOInetProtocolInfo alias "IID_IInternetProtocolInfo" as const GUID
extern IID_IOInetSession alias "IID_IInternetSession" as const GUID
extern IID_IOInetPriority alias "IID_IInternetPriority" as const GUID
extern IID_IOInetThreadSwitch alias "IID_IInternetThreadSwitch" as const GUID
extern IID_IOInetProtocolSinkStackable alias "IID_IInternetProtocolSinkStackable" as const GUID
declare function CoInternetParseUrl(byval pwzUrl as LPCWSTR, byval ParseAction as PARSEACTION, byval dwFlags as DWORD, byval pszResult as LPWSTR, byval cchResult as DWORD, byval pcchResult as DWORD ptr, byval dwReserved as DWORD) as HRESULT


declare function CoInternetCombineUrl(byval pwzBaseUrl as LPCWSTR, byval pwzRelativeUrl as LPCWSTR, byval dwCombineFlags as DWORD, byval pszResult as LPWSTR, byval cchResult as DWORD, byval pcchResult as DWORD ptr, byval dwReserved as DWORD) as HRESULT


declare function CoInternetCompareUrl(byval pwzUrl1 as LPCWSTR, byval pwzUrl2 as LPCWSTR, byval dwFlags as DWORD) as HRESULT
declare function CoInternetGetProtocolFlags(byval pwzUrl as LPCWSTR, byval pdwFlags as DWORD ptr, byval dwReserved as DWORD) as HRESULT
declare function CoInternetQueryInfo(byval pwzUrl as LPCWSTR, byval QueryOptions as QUERYOPTION, byval dwQueryFlags as DWORD, byval pvBuffer as LPVOID, byval cbBuffer as DWORD, byval pcbBuffer as DWORD ptr, byval dwReserved as DWORD) as HRESULT
declare function CoInternetGetSession(byval dwSessionMode as DWORD, byval ppIInternetSession as IInternetSession ptr ptr, byval dwReserved as DWORD) as HRESULT
declare function CoInternetGetSecurityUrl(byval pwszUrl as LPCWSTR, byval ppwszSecUrl as LPWSTR ptr, byval psuAction as PSUACTION, byval dwReserved as DWORD) as HRESULT
declare function AsyncInstallDistributionUnit(byval szDistUnit as LPCWSTR, byval szTYPE as LPCWSTR, byval szExt as LPCWSTR, byval dwFileVersionMS as DWORD, byval dwFileVersionLS as DWORD, byval szURL as LPCWSTR, byval pbc as IBindCtx ptr, byval pvReserved as LPVOID, byval flags as DWORD) as HRESULT


declare function CopyStgMedium(byval pcstgmedSrc as const STGMEDIUM ptr, byval pstgmedDest as STGMEDIUM ptr) as HRESULT
declare function CopyBindInfo(byval pcbiSrc as const BINDINFO ptr, byval pbiDest as BINDINFO ptr) as HRESULT
declare sub ReleaseBindInfo(byval pbindinfo as BINDINFO ptr)

declare function OInetParseUrl alias "CoInternetParseUrl"(byval pwzUrl as LPCWSTR, byval ParseAction as PARSEACTION, byval dwFlags as DWORD, byval pszResult as LPWSTR, byval cchResult as DWORD, byval pcchResult as DWORD ptr, byval dwReserved as DWORD) as HRESULT
declare function OInetCombineUrl alias "CoInternetCombineUrl"(byval pwzBaseUrl as LPCWSTR, byval pwzRelativeUrl as LPCWSTR, byval dwCombineFlags as DWORD, byval pszResult as LPWSTR, byval cchResult as DWORD, byval pcchResult as DWORD ptr, byval dwReserved as DWORD) as HRESULT


declare function OInetCompareUrl alias "CoInternetCompareUrl"(byval pwzUrl1 as LPCWSTR, byval pwzUrl2 as LPCWSTR, byval dwFlags as DWORD) as HRESULT
declare function OInetQueryInfo alias "CoInternetQueryInfo"(byval pwzUrl as LPCWSTR, byval QueryOptions as QUERYOPTION, byval dwQueryFlags as DWORD, byval pvBuffer as LPVOID, byval cbBuffer as DWORD, byval pcbBuffer as DWORD ptr, byval dwReserved as DWORD) as HRESULT
declare function OInetGetSession alias "CoInternetGetSession"(byval dwSessionMode as DWORD, byval ppIInternetSession as IInternetSession ptr ptr, byval dwReserved as DWORD) as HRESULT
const PROTOCOLFLAG_NO_PICS_CHECK = &h1

 type IInternetSecurityManager as IInternetSecurityManager_

declare function CoInternetCreateSecurityManager(byval pSP as IServiceProvider ptr, byval ppSM as IInternetSecurityManager ptr ptr, byval dwReserved as DWORD) as HRESULT
type IInternetZoneManager as IInternetZoneManager_
declare function CoInternetCreateZoneManager(byval pSP as IServiceProvider ptr, byval ppZM as IInternetZoneManager ptr ptr, byval dwReserved as DWORD) as HRESULT
extern CLSID_InternetSecurityManager as const IID
extern CLSID_InternetZoneManager as const IID


extern IID_IInternetSecurityMgrSite as const GUID
type IInternetSecurityMgrSite as IInternetSecurityMgrSite_

type IInternetSecurityMgrSiteVtbl
 QueryInterface as function(byval This as IInternetSecurityMgrSite ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInternetSecurityMgrSite ptr) as ULONG
 Release as function(byval This as IInternetSecurityMgrSite ptr) as ULONG
 GetWindow as function(byval This as IInternetSecurityMgrSite ptr, byval phwnd as HWND ptr) as HRESULT
 EnableModeless as function(byval This as IInternetSecurityMgrSite ptr, byval fEnable as WINBOOL) as HRESULT
end type

type IInternetSecurityMgrSite_
 lpVtbl as IInternetSecurityMgrSiteVtbl ptr
end type


declare function IInternetSecurityMgrSite_GetWindow_Proxy(byval This as IInternetSecurityMgrSite ptr, byval phwnd as HWND ptr) as HRESULT
declare sub IInternetSecurityMgrSite_GetWindow_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetSecurityMgrSite_EnableModeless_Proxy(byval This as IInternetSecurityMgrSite ptr, byval fEnable as WINBOOL) as HRESULT
declare sub IInternetSecurityMgrSite_EnableModeless_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)

const MUTZ_NOSAVEDFILECHECK = &h1
const MUTZ_ISFILE = &h2
const MUTZ_ACCEPT_WILDCARD_SCHEME = &h80
const MUTZ_ENFORCERESTRICTED = &h100
const MUTZ_RESERVED = &h200
const MUTZ_REQUIRESAVEDFILECHECK = &h400
const MUTZ_DONT_UNESCAPE = &h800
const MUTZ_DONT_USE_CACHE = &h1000
const MUTZ_FORCE_INTRANET_FLAGS = &h2000
const MUTZ_IGNORE_ZONE_MAPPINGS = &h4000
const MAX_SIZE_SECURITY_ID = 512

type __WIDL_urlmon_generated_name_0000000E as long
enum
 PUAF_DEFAULT = &h00
 PUAF_NOUI = &h1
 PUAF_ISFILE = &h2
 PUAF_WARN_IF_DENIED = &h4
 PUAF_FORCEUI_FOREGROUND = &h8
 PUAF_CHECK_TIFS = &h10
 PUAF_DONTCHECKBOXINDIALOG = &h20
 PUAF_TRUSTED = &h40
 PUAF_ACCEPT_WILDCARD_SCHEME = &h80
 PUAF_ENFORCERESTRICTED = &h100
 PUAF_NOSAVEDFILECHECK = &h200
 PUAF_REQUIRESAVEDFILECHECK = &h400
 PUAF_DONT_USE_CACHE = &h1000
 PUAF_RESERVED1 = &h2000
 PUAF_RESERVED2 = &h4000
 PUAF_LMZ_UNLOCKED = &h10000
 PUAF_LMZ_LOCKED = &h20000
 PUAF_DEFAULTZONEPOL = &h40000
 PUAF_NPL_USE_LOCKED_IF_RESTRICTED = &h80000
 PUAF_NOUIIFLOCKED = &h100000
 PUAF_DRAGPROTOCOLCHECK = &h200000
end enum

type PUAF as __WIDL_urlmon_generated_name_0000000E

type __WIDL_urlmon_generated_name_0000000F as long
enum
 PUAFOUT_DEFAULT = &h00
 PUAFOUT_ISLOCKZONEPOLICY = &h1
end enum

type PUAFOUT as __WIDL_urlmon_generated_name_0000000F

type __WIDL_urlmon_generated_name_00000010 as long
enum
 SZM_CREATE = &h00
 SZM_DELETE = &h1
end enum

type SZM_FLAGS as __WIDL_urlmon_generated_name_00000010
extern IID_IInternetSecurityManager as const GUID
extern SID_SInternetSecurityManager alias "IID_IInternetSecurityManager" as const GUID

type IInternetSecurityManagerVtbl
 QueryInterface as function(byval This as IInternetSecurityManager ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInternetSecurityManager ptr) as ULONG
 Release as function(byval This as IInternetSecurityManager ptr) as ULONG
 SetSecuritySite as function(byval This as IInternetSecurityManager ptr, byval pSite as IInternetSecurityMgrSite ptr) as HRESULT
 GetSecuritySite as function(byval This as IInternetSecurityManager ptr, byval ppSite as IInternetSecurityMgrSite ptr ptr) as HRESULT
 MapUrlToZone as function(byval This as IInternetSecurityManager ptr, byval pwszUrl as LPCWSTR, byval pdwZone as DWORD ptr, byval dwFlags as DWORD) as HRESULT
 GetSecurityId as function(byval This as IInternetSecurityManager ptr, byval pwszUrl as LPCWSTR, byval pbSecurityId as UBYTE ptr, byval pcbSecurityId as DWORD ptr, byval dwReserved as DWORD_PTR) as HRESULT
 ProcessUrlAction as function(byval This as IInternetSecurityManager ptr, byval pwszUrl as LPCWSTR, byval dwAction as DWORD, byval pPolicy as UBYTE ptr, byval cbPolicy as DWORD, byval pContext as UBYTE ptr, byval cbContext as DWORD, byval dwFlags as DWORD, byval dwReserved as DWORD) as HRESULT
 QueryCustomPolicy as function(byval This as IInternetSecurityManager ptr, byval pwszUrl as LPCWSTR, byval guidKey as const GUID const ptr, byval ppPolicy as UBYTE ptr ptr, byval pcbPolicy as DWORD ptr, byval pContext as UBYTE ptr, byval cbContext as DWORD, byval dwReserved as DWORD) as HRESULT
 SetZoneMapping as function(byval This as IInternetSecurityManager ptr, byval dwZone as DWORD, byval lpszPattern as LPCWSTR, byval dwFlags as DWORD) as HRESULT
 GetZoneMappings as function(byval This as IInternetSecurityManager ptr, byval dwZone as DWORD, byval ppenumString as IEnumString ptr ptr, byval dwFlags as DWORD) as HRESULT
end type

type IInternetSecurityManager_
 lpVtbl as IInternetSecurityManagerVtbl ptr
end type


declare function IInternetSecurityManager_SetSecuritySite_Proxy(byval This as IInternetSecurityManager ptr, byval pSite as IInternetSecurityMgrSite ptr) as HRESULT
declare sub IInternetSecurityManager_SetSecuritySite_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetSecurityManager_GetSecuritySite_Proxy(byval This as IInternetSecurityManager ptr, byval ppSite as IInternetSecurityMgrSite ptr ptr) as HRESULT
declare sub IInternetSecurityManager_GetSecuritySite_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetSecurityManager_MapUrlToZone_Proxy(byval This as IInternetSecurityManager ptr, byval pwszUrl as LPCWSTR, byval pdwZone as DWORD ptr, byval dwFlags as DWORD) as HRESULT
declare sub IInternetSecurityManager_MapUrlToZone_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetSecurityManager_GetSecurityId_Proxy(byval This as IInternetSecurityManager ptr, byval pwszUrl as LPCWSTR, byval pbSecurityId as UBYTE ptr, byval pcbSecurityId as DWORD ptr, byval dwReserved as DWORD_PTR) as HRESULT
declare sub IInternetSecurityManager_GetSecurityId_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetSecurityManager_ProcessUrlAction_Proxy(byval This as IInternetSecurityManager ptr, byval pwszUrl as LPCWSTR, byval dwAction as DWORD, byval pPolicy as UBYTE ptr, byval cbPolicy as DWORD, byval pContext as UBYTE ptr, byval cbContext as DWORD, byval dwFlags as DWORD, byval dwReserved as DWORD) as HRESULT
declare sub IInternetSecurityManager_ProcessUrlAction_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetSecurityManager_QueryCustomPolicy_Proxy(byval This as IInternetSecurityManager ptr, byval pwszUrl as LPCWSTR, byval guidKey as const GUID const ptr, byval ppPolicy as UBYTE ptr ptr, byval pcbPolicy as DWORD ptr, byval pContext as UBYTE ptr, byval cbContext as DWORD, byval dwReserved as DWORD) as HRESULT
declare sub IInternetSecurityManager_QueryCustomPolicy_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetSecurityManager_SetZoneMapping_Proxy(byval This as IInternetSecurityManager ptr, byval dwZone as DWORD, byval lpszPattern as LPCWSTR, byval dwFlags as DWORD) as HRESULT
declare sub IInternetSecurityManager_SetZoneMapping_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetSecurityManager_GetZoneMappings_Proxy(byval This as IInternetSecurityManager ptr, byval dwZone as DWORD, byval ppenumString as IEnumString ptr ptr, byval dwFlags as DWORD) as HRESULT
declare sub IInternetSecurityManager_GetZoneMappings_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)


extern IID_IInternetHostSecurityManager as const GUID
extern SID_SInternetHostSecurityManager alias "IID_IInternetHostSecurityManager" as const GUID
type IInternetHostSecurityManager as IInternetHostSecurityManager_

type IInternetHostSecurityManagerVtbl
 QueryInterface as function(byval This as IInternetHostSecurityManager ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInternetHostSecurityManager ptr) as ULONG
 Release as function(byval This as IInternetHostSecurityManager ptr) as ULONG
 GetSecurityId as function(byval This as IInternetHostSecurityManager ptr, byval pbSecurityId as UBYTE ptr, byval pcbSecurityId as DWORD ptr, byval dwReserved as DWORD_PTR) as HRESULT
 ProcessUrlAction as function(byval This as IInternetHostSecurityManager ptr, byval dwAction as DWORD, byval pPolicy as UBYTE ptr, byval cbPolicy as DWORD, byval pContext as UBYTE ptr, byval cbContext as DWORD, byval dwFlags as DWORD, byval dwReserved as DWORD) as HRESULT
 QueryCustomPolicy as function(byval This as IInternetHostSecurityManager ptr, byval guidKey as const GUID const ptr, byval ppPolicy as UBYTE ptr ptr, byval pcbPolicy as DWORD ptr, byval pContext as UBYTE ptr, byval cbContext as DWORD, byval dwReserved as DWORD) as HRESULT
end type

type IInternetHostSecurityManager_
 lpVtbl as IInternetHostSecurityManagerVtbl ptr
end type


declare function IInternetHostSecurityManager_GetSecurityId_Proxy(byval This as IInternetHostSecurityManager ptr, byval pbSecurityId as UBYTE ptr, byval pcbSecurityId as DWORD ptr, byval dwReserved as DWORD_PTR) as HRESULT
declare sub IInternetHostSecurityManager_GetSecurityId_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetHostSecurityManager_ProcessUrlAction_Proxy(byval This as IInternetHostSecurityManager ptr, byval dwAction as DWORD, byval pPolicy as UBYTE ptr, byval cbPolicy as DWORD, byval pContext as UBYTE ptr, byval cbContext as DWORD, byval dwFlags as DWORD, byval dwReserved as DWORD) as HRESULT
declare sub IInternetHostSecurityManager_ProcessUrlAction_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetHostSecurityManager_QueryCustomPolicy_Proxy(byval This as IInternetHostSecurityManager ptr, byval guidKey as const GUID const ptr, byval ppPolicy as UBYTE ptr ptr, byval pcbPolicy as DWORD ptr, byval pContext as UBYTE ptr, byval cbContext as DWORD, byval dwReserved as DWORD) as HRESULT
declare sub IInternetHostSecurityManager_QueryCustomPolicy_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)

const URLACTION_MIN = &h1000
const URLACTION_DOWNLOAD_MIN = &h1000
const URLACTION_DOWNLOAD_SIGNED_ACTIVEX = &h1001
const URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX = &h1004
const URLACTION_DOWNLOAD_CURR_MAX = &h1004
const URLACTION_DOWNLOAD_MAX = &h11FF
const URLACTION_ACTIVEX_MIN = &h1200
const URLACTION_ACTIVEX_RUN = &h1200
const URLPOLICY_ACTIVEX_CHECK_LIST = &h10000
const URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY = &h1201
const URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY = &h1202
const URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY = &h1203
const URLACTION_SCRIPT_OVERRIDE_SAFETY = &h1401
const URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY = &h1204
const URLACTION_ACTIVEX_TREATASUNTRUSTED = &h1205
const URLACTION_ACTIVEX_NO_WEBOC_SCRIPT = &h1206
const URLACTION_ACTIVEX_OVERRIDE_REPURPOSEDETECTION = &h1207
const URLACTION_ACTIVEX_OVERRIDE_OPTIN = &h1208
const URLACTION_ACTIVEX_SCRIPTLET_RUN = &h1209
const URLACTION_ACTIVEX_DYNSRC_VIDEO_AND_ANIMATION = &h120A
const URLACTION_ACTIVEX_OVERRIDE_DOMAINLIST = &h120B
const URLACTION_ACTIVEX_CURR_MAX = &h120B
const URLACTION_ACTIVEX_MAX = &h13ff
const URLACTION_SCRIPT_MIN = &h1400
const URLACTION_SCRIPT_RUN = &h1400
const URLACTION_SCRIPT_JAVA_USE = &h1402
const URLACTION_SCRIPT_SAFE_ACTIVEX = &h1405
const URLACTION_CROSS_DOMAIN_DATA = &h1406
const URLACTION_SCRIPT_PASTE = &h1407
const URLACTION_ALLOW_XDOMAIN_SUBFRAME_RESIZE = &h1408
const URLACTION_SCRIPT_XSSFILTER = &h1409
const URLACTION_SCRIPT_NAVIGATE = &h140A
const URLACTION_PLUGGABLE_PROTOCOL_XHR = &h140B
const URLACTION_SCRIPT_CURR_MAX = &h140B
const URLACTION_SCRIPT_MAX = &h15ff
const URLACTION_HTML_MIN = &h1600
const URLACTION_HTML_SUBMIT_FORMS = &h1601
const URLACTION_HTML_SUBMIT_FORMS_FROM = &h1602
const URLACTION_HTML_SUBMIT_FORMS_TO = &h1603
const URLACTION_HTML_FONT_DOWNLOAD = &h1604
const URLACTION_HTML_JAVA_RUN = &h1605
const URLACTION_HTML_USERDATA_SAVE = &h1606
const URLACTION_HTML_SUBFRAME_NAVIGATE = &h1607
const URLACTION_HTML_META_REFRESH = &h1608
const URLACTION_HTML_MIXED_CONTENT = &h1609
const URLACTION_HTML_INCLUDE_FILE_PATH = &h160A
const URLACTION_HTML_ALLOW_INJECTED_DYNAMIC_HTML = &h160B
const URLACTION_HTML_REQUIRE_UTF8_DOCUMENT_CODEPAGE = &h160C
const URLACTION_HTML_ALLOW_CROSS_DOMAIN_CANVAS = &h160D
const URLACTION_HTML_ALLOW_WINDOW_CLOSE = &h160E
const URLACTION_HTML_ALLOW_CROSS_DOMAIN_WEBWORKER = &h160F
const URLACTION_HTML_ALLOW_CROSS_DOMAIN_TEXTTRACK = &h1610
const URLACTION_HTML_ALLOW_INDEXEDDB = &h1611
const URLACTION_HTML_MAX = &h17ff
const URLACTION_SHELL_MIN = &h1800
const URLACTION_SHELL_INSTALL_DTITEMS = &h1800
const URLACTION_SHELL_MOVE_OR_COPY = &h1802
const URLACTION_SHELL_FILE_DOWNLOAD = &h1803
const URLACTION_SHELL_VERB = &h1804
const URLACTION_SHELL_WEBVIEW_VERB = &h1805
const URLACTION_SHELL_SHELLEXECUTE = &h1806



const URLACTION_SHELL_CURR_MAX = &h1811
const URLACTION_SHELL_MAX = &h19ff
const URLACTION_NETWORK_MIN = &h1A00
const URLACTION_CREDENTIALS_USE = &h1A00
const URLPOLICY_CREDENTIALS_SILENT_LOGON_OK = &h00
const URLPOLICY_CREDENTIALS_MUST_PROMPT_USER = &h10000
const URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT = &h20000
const URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY = &h30000
const URLACTION_AUTHENTICATE_CLIENT = &h1A01
const URLPOLICY_AUTHENTICATE_CLEARTEXT_OK = &h00
const URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE = &h10000
const URLPOLICY_AUTHENTICATE_MUTUAL_ONLY = &h30000
const URLACTION_COOKIES = &h1A02
const URLACTION_COOKIES_SESSION = &h1A03
const URLACTION_CLIENT_CERT_PROMPT = &h1A04
const URLACTION_COOKIES_THIRD_PARTY = &h1A05
const URLACTION_COOKIES_SESSION_THIRD_PARTY = &h1A06
const URLACTION_COOKIES_ENABLED = &h1A10
const URLACTION_NETWORK_CURR_MAX = &h1A10
const URLACTION_NETWORK_MAX = &h1Bff
const URLACTION_JAVA_MIN = &h1C00
const URLACTION_JAVA_PERMISSIONS = &h1C00
const URLPOLICY_JAVA_PROHIBIT = &h00
const URLPOLICY_JAVA_HIGH = &h10000
const URLPOLICY_JAVA_MEDIUM = &h20000
const URLPOLICY_JAVA_LOW = &h30000
const URLPOLICY_JAVA_CUSTOM = &h800000
const URLACTION_JAVA_CURR_MAX = &h1C00
const URLACTION_JAVA_MAX = &h1Cff
const URLACTION_INFODELIVERY_MIN = &h1D00
const URLACTION_INFODELIVERY_NO_ADDING_CHANNELS = &h1D00
const URLACTION_INFODELIVERY_NO_EDITING_CHANNELS = &h1D01
const URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS = &h1D02
const URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS = &h1D03
const URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS = &h1D04
const URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS = &h1D05
const URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING = &h1D06
const URLACTION_INFODELIVERY_CURR_MAX = &h1D06
const URLACTION_INFODELIVERY_MAX = &h1Dff
const URLACTION_CHANNEL_SOFTDIST_MIN = &h1E00
const URLACTION_CHANNEL_SOFTDIST_PERMISSIONS = &h1E05
const URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT = &h10000
const URLPOLICY_CHANNEL_SOFTDIST_PRECACHE = &h20000
const URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL = &h30000
const URLACTION_CHANNEL_SOFTDIST_MAX = &h1Eff



const URLACTION_ALLOW_AUDIO_VIDEO = &h2701
const URLACTION_ALLOW_ACTIVEX_FILTERING = &h2702
const URLACTION_ALLOW_STRUCTURED_STORAGE_SNIFFING = &h2703
const URLACTION_ALLOW_AUDIO_VIDEO_PLUGINS = &h2704
const URLACTION_ALLOW_ZONE_ELEVATION_VIA_OPT_OUT = &h2705
const URLACTION_ALLOW_ZONE_ELEVATION_OPT_OUT_ADDITION = &h2706
const URLACTION_ALLOW_CROSSDOMAIN_DROP_WITHIN_WINDOW = &h2708
const URLACTION_ALLOW_CROSSDOMAIN_DROP_ACROSS_WINDOWS = &h2709
const URLACTION_ALLOW_CROSSDOMAIN_APPCACHE_MANIFEST = &h270A
const URLACTION_ALLOW_RENDER_LEGACY_DXTFILTERS = &h270B
const URLPOLICY_ALLOW = &h00
const URLPOLICY_QUERY = &h1
const URLPOLICY_DISALLOW = &h3
const URLPOLICY_NOTIFY_ON_ALLOW = &h10
const URLPOLICY_NOTIFY_ON_DISALLOW = &h20
const URLPOLICY_LOG_ON_ALLOW = &h40
const URLPOLICY_LOG_ON_DISALLOW = &h80
const URLPOLICY_MASK_PERMISSIONS = &h0f
const URLPOLICY_DONTCHECKDLGBOX = &h100


type LPURLZONEMANAGER as IInternetZoneManager ptr

type tagURLZONE as long
enum
 URLZONE_INVALID = -1
 URLZONE_PREDEFINED_MIN = 0
 URLZONE_LOCAL_MACHINE = 0
 URLZONE_INTRANET = 1
 URLZONE_TRUSTED = 2
 URLZONE_INTERNET = 3
 URLZONE_UNTRUSTED = 4
 URLZONE_PREDEFINED_MAX = 999
 URLZONE_USER_MIN = 1000
 URLZONE_USER_MAX = 10000
end enum

type URLZONE as tagURLZONE
const URLZONE_ESC_FLAG = &h100

type tagURLTEMPLATE as long
enum
 URLTEMPLATE_CUSTOM = &h00
 URLTEMPLATE_PREDEFINED_MIN = &h10000
 URLTEMPLATE_LOW = &h10000
 URLTEMPLATE_MEDLOW = &h10500
 URLTEMPLATE_MEDIUM = &h11000
 URLTEMPLATE_MEDHIGH = &h11500
 URLTEMPLATE_HIGH = &h12000
 URLTEMPLATE_PREDEFINED_MAX = &h20000
end enum

type URLTEMPLATE as tagURLTEMPLATE

enum
 MAX_ZONE_PATH = 260
 MAX_ZONE_DESCRIPTION = 200
end enum

type __WIDL_urlmon_generated_name_00000011 as long
enum
 ZAFLAGS_CUSTOM_EDIT = &h1
 ZAFLAGS_ADD_SITES = &h2
 ZAFLAGS_REQUIRE_VERIFICATION = &h4
 ZAFLAGS_INCLUDE_PROXY_OVERRIDE = &h8
 ZAFLAGS_INCLUDE_INTRANET_SITES = &h10
 ZAFLAGS_NO_UI = &h20
 ZAFLAGS_SUPPORTS_VERIFICATION = &h40
 ZAFLAGS_UNC_AS_INTRANET = &h80
 ZAFLAGS_DETECT_INTRANET = &h100
 ZAFLAGS_USE_LOCKED_ZONES = &h10000
 ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = &h20000
 ZAFLAGS_NO_CACHE = &h40000
end enum

type ZAFLAGS as __WIDL_urlmon_generated_name_00000011

type _ZONEATTRIBUTES
 cbSize as ULONG
 szDisplayName as wstring * 260
 szDescription as wstring * 200
 szIconPath as wstring * 260
 dwTemplateMinLevel as DWORD
 dwTemplateRecommended as DWORD
 dwTemplateCurrentLevel as DWORD
 dwFlags as DWORD
end type

type ZONEATTRIBUTES as _ZONEATTRIBUTES
type LPZONEATTRIBUTES as _ZONEATTRIBUTES ptr

type _URLZONEREG as long
enum
 URLZONEREG_DEFAULT = 0
 URLZONEREG_HKLM = 1
 URLZONEREG_HKCU = 2
end enum

type URLZONEREG as _URLZONEREG
extern IID_IInternetZoneManager as const GUID

type IInternetZoneManagerVtbl
 QueryInterface as function(byval This as IInternetZoneManager ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IInternetZoneManager ptr) as ULONG
 Release as function(byval This as IInternetZoneManager ptr) as ULONG
 GetZoneAttributes as function(byval This as IInternetZoneManager ptr, byval dwZone as DWORD, byval pZoneAttributes as ZONEATTRIBUTES ptr) as HRESULT
 SetZoneAttributes as function(byval This as IInternetZoneManager ptr, byval dwZone as DWORD, byval pZoneAttributes as ZONEATTRIBUTES ptr) as HRESULT
 GetZoneCustomPolicy as function(byval This as IInternetZoneManager ptr, byval dwZone as DWORD, byval guidKey as const GUID const ptr, byval ppPolicy as UBYTE ptr ptr, byval pcbPolicy as DWORD ptr, byval urlZoneReg as URLZONEREG) as HRESULT
 SetZoneCustomPolicy as function(byval This as IInternetZoneManager ptr, byval dwZone as DWORD, byval guidKey as const GUID const ptr, byval pPolicy as UBYTE ptr, byval cbPolicy as DWORD, byval urlZoneReg as URLZONEREG) as HRESULT
 GetZoneActionPolicy as function(byval This as IInternetZoneManager ptr, byval dwZone as DWORD, byval dwAction as DWORD, byval pPolicy as UBYTE ptr, byval cbPolicy as DWORD, byval urlZoneReg as URLZONEREG) as HRESULT
 SetZoneActionPolicy as function(byval This as IInternetZoneManager ptr, byval dwZone as DWORD, byval dwAction as DWORD, byval pPolicy as UBYTE ptr, byval cbPolicy as DWORD, byval urlZoneReg as URLZONEREG) as HRESULT
 PromptAction as function(byval This as IInternetZoneManager ptr, byval dwAction as DWORD, byval hwndParent as HWND, byval pwszUrl as LPCWSTR, byval pwszText as LPCWSTR, byval dwPromptFlags as DWORD) as HRESULT
 LogAction as function(byval This as IInternetZoneManager ptr, byval dwAction as DWORD, byval pwszUrl as LPCWSTR, byval pwszText as LPCWSTR, byval dwLogFlags as DWORD) as HRESULT
 CreateZoneEnumerator as function(byval This as IInternetZoneManager ptr, byval pdwEnum as DWORD ptr, byval pdwCount as DWORD ptr, byval dwFlags as DWORD) as HRESULT
 GetZoneAt as function(byval This as IInternetZoneManager ptr, byval dwEnum as DWORD, byval dwIndex as DWORD, byval pdwZone as DWORD ptr) as HRESULT
 DestroyZoneEnumerator as function(byval This as IInternetZoneManager ptr, byval dwEnum as DWORD) as HRESULT
 CopyTemplatePoliciesToZone as function(byval This as IInternetZoneManager ptr, byval dwTemplate as DWORD, byval dwZone as DWORD, byval dwReserved as DWORD) as HRESULT
end type

type IInternetZoneManager_
 lpVtbl as IInternetZoneManagerVtbl ptr
end type


declare function IInternetZoneManager_GetZoneAttributes_Proxy(byval This as IInternetZoneManager ptr, byval dwZone as DWORD, byval pZoneAttributes as ZONEATTRIBUTES ptr) as HRESULT
declare sub IInternetZoneManager_GetZoneAttributes_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetZoneManager_SetZoneAttributes_Proxy(byval This as IInternetZoneManager ptr, byval dwZone as DWORD, byval pZoneAttributes as ZONEATTRIBUTES ptr) as HRESULT
declare sub IInternetZoneManager_SetZoneAttributes_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetZoneManager_GetZoneCustomPolicy_Proxy(byval This as IInternetZoneManager ptr, byval dwZone as DWORD, byval guidKey as const GUID const ptr, byval ppPolicy as UBYTE ptr ptr, byval pcbPolicy as DWORD ptr, byval urlZoneReg as URLZONEREG) as HRESULT
declare sub IInternetZoneManager_GetZoneCustomPolicy_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetZoneManager_SetZoneCustomPolicy_Proxy(byval This as IInternetZoneManager ptr, byval dwZone as DWORD, byval guidKey as const GUID const ptr, byval pPolicy as UBYTE ptr, byval cbPolicy as DWORD, byval urlZoneReg as URLZONEREG) as HRESULT
declare sub IInternetZoneManager_SetZoneCustomPolicy_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetZoneManager_GetZoneActionPolicy_Proxy(byval This as IInternetZoneManager ptr, byval dwZone as DWORD, byval dwAction as DWORD, byval pPolicy as UBYTE ptr, byval cbPolicy as DWORD, byval urlZoneReg as URLZONEREG) as HRESULT
declare sub IInternetZoneManager_GetZoneActionPolicy_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetZoneManager_SetZoneActionPolicy_Proxy(byval This as IInternetZoneManager ptr, byval dwZone as DWORD, byval dwAction as DWORD, byval pPolicy as UBYTE ptr, byval cbPolicy as DWORD, byval urlZoneReg as URLZONEREG) as HRESULT
declare sub IInternetZoneManager_SetZoneActionPolicy_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetZoneManager_PromptAction_Proxy(byval This as IInternetZoneManager ptr, byval dwAction as DWORD, byval hwndParent as HWND, byval pwszUrl as LPCWSTR, byval pwszText as LPCWSTR, byval dwPromptFlags as DWORD) as HRESULT
declare sub IInternetZoneManager_PromptAction_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetZoneManager_LogAction_Proxy(byval This as IInternetZoneManager ptr, byval dwAction as DWORD, byval pwszUrl as LPCWSTR, byval pwszText as LPCWSTR, byval dwLogFlags as DWORD) as HRESULT
declare sub IInternetZoneManager_LogAction_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetZoneManager_CreateZoneEnumerator_Proxy(byval This as IInternetZoneManager ptr, byval pdwEnum as DWORD ptr, byval pdwCount as DWORD ptr, byval dwFlags as DWORD) as HRESULT
declare sub IInternetZoneManager_CreateZoneEnumerator_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetZoneManager_GetZoneAt_Proxy(byval This as IInternetZoneManager ptr, byval dwEnum as DWORD, byval dwIndex as DWORD, byval pdwZone as DWORD ptr) as HRESULT
declare sub IInternetZoneManager_GetZoneAt_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetZoneManager_DestroyZoneEnumerator_Proxy(byval This as IInternetZoneManager ptr, byval dwEnum as DWORD) as HRESULT
declare sub IInternetZoneManager_DestroyZoneEnumerator_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IInternetZoneManager_CopyTemplatePoliciesToZone_Proxy(byval This as IInternetZoneManager ptr, byval dwTemplate as DWORD, byval dwZone as DWORD, byval dwReserved as DWORD) as HRESULT
declare sub IInternetZoneManager_CopyTemplatePoliciesToZone_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)


extern CLSID_SoftDistExt as const IID
const SOFTDIST_FLAG_USAGE_EMAIL = &h1
const SOFTDIST_FLAG_USAGE_PRECACHE = &h2
const SOFTDIST_FLAG_USAGE_AUTOINSTALL = &h4
const SOFTDIST_FLAG_DELETE_SUBSCRIPTION = &h8
const SOFTDIST_ADSTATE_NONE = &h00
const SOFTDIST_ADSTATE_AVAILABLE = &h1
const SOFTDIST_ADSTATE_DOWNLOADED = &h2
const SOFTDIST_ADSTATE_INSTALLED = &h3

type _tagCODEBASEHOLD
 cbSize as ULONG
 szDistUnit as LPWSTR
 szCodeBase as LPWSTR
 dwVersionMS as DWORD
 dwVersionLS as DWORD
 dwStyle as DWORD
end type

type CODEBASEHOLD as _tagCODEBASEHOLD
type LPCODEBASEHOLD as _tagCODEBASEHOLD ptr

type _tagSOFTDISTINFO
 cbSize as ULONG
 dwFlags as DWORD
 dwAdState as DWORD
 szTitle as LPWSTR
 szAbstract as LPWSTR
 szHREF as LPWSTR
 dwInstalledVersionMS as DWORD
 dwInstalledVersionLS as DWORD
 dwUpdateVersionMS as DWORD
 dwUpdateVersionLS as DWORD
 dwAdvertisedVersionMS as DWORD
 dwAdvertisedVersionLS as DWORD
 dwReserved as DWORD
end type

type SOFTDISTINFO as _tagSOFTDISTINFO
type LPSOFTDISTINFO as _tagSOFTDISTINFO ptr
extern IID_ISoftDistExt as const GUID
type ISoftDistExt as ISoftDistExt_

type ISoftDistExtVtbl
 QueryInterface as function(byval This as ISoftDistExt ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ISoftDistExt ptr) as ULONG
 Release as function(byval This as ISoftDistExt ptr) as ULONG
 ProcessSoftDist as function(byval This as ISoftDistExt ptr, byval szCDFURL as LPCWSTR, byval pSoftDistElement as IXMLElement ptr, byval lpsdi as LPSOFTDISTINFO) as HRESULT
 GetFirstCodeBase as function(byval This as ISoftDistExt ptr, byval szCodeBase as LPWSTR ptr, byval dwMaxSize as LPDWORD) as HRESULT
 GetNextCodeBase as function(byval This as ISoftDistExt ptr, byval szCodeBase as LPWSTR ptr, byval dwMaxSize as LPDWORD) as HRESULT
 AsyncInstallDistributionUnit as function(byval This as ISoftDistExt ptr, byval pbc as IBindCtx ptr, byval pvReserved as LPVOID, byval flags as DWORD, byval lpcbh as LPCODEBASEHOLD) as HRESULT
end type

type ISoftDistExt_
 lpVtbl as ISoftDistExtVtbl ptr
end type


declare function ISoftDistExt_ProcessSoftDist_Proxy(byval This as ISoftDistExt ptr, byval szCDFURL as LPCWSTR, byval pSoftDistElement as IXMLElement ptr, byval lpsdi as LPSOFTDISTINFO) as HRESULT
declare sub ISoftDistExt_ProcessSoftDist_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ISoftDistExt_GetFirstCodeBase_Proxy(byval This as ISoftDistExt ptr, byval szCodeBase as LPWSTR ptr, byval dwMaxSize as LPDWORD) as HRESULT
declare sub ISoftDistExt_GetFirstCodeBase_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ISoftDistExt_GetNextCodeBase_Proxy(byval This as ISoftDistExt ptr, byval szCodeBase as LPWSTR ptr, byval dwMaxSize as LPDWORD) as HRESULT
declare sub ISoftDistExt_GetNextCodeBase_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ISoftDistExt_AsyncInstallDistributionUnit_Proxy(byval This as ISoftDistExt ptr, byval pbc as IBindCtx ptr, byval pvReserved as LPVOID, byval flags as DWORD, byval lpcbh as LPCODEBASEHOLD) as HRESULT
declare sub ISoftDistExt_AsyncInstallDistributionUnit_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function GetSoftwareUpdateInfo(byval szDistUnit as LPCWSTR, byval psdi as LPSOFTDISTINFO) as HRESULT
declare function SetSoftwareUpdateAdvertisementState(byval szDistUnit as LPCWSTR, byval dwAdState as DWORD, byval dwAdvertisedVersionMS as DWORD, byval dwAdvertisedVersionLS as DWORD) as HRESULT
type ICatalogFileInfo as ICatalogFileInfo_
type LPCATALOGFILEINFO as ICatalogFileInfo ptr
extern IID_ICatalogFileInfo as const GUID

type ICatalogFileInfoVtbl
 QueryInterface as function(byval This as ICatalogFileInfo ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as ICatalogFileInfo ptr) as ULONG
 Release as function(byval This as ICatalogFileInfo ptr) as ULONG
 GetCatalogFile as function(byval This as ICatalogFileInfo ptr, byval ppszCatalogFile as LPSTR ptr) as HRESULT
 GetJavaTrust as function(byval This as ICatalogFileInfo ptr, byval ppJavaTrust as any ptr ptr) as HRESULT
end type

type ICatalogFileInfo_
 lpVtbl as ICatalogFileInfoVtbl ptr
end type


declare function ICatalogFileInfo_GetCatalogFile_Proxy(byval This as ICatalogFileInfo ptr, byval ppszCatalogFile as LPSTR ptr) as HRESULT
declare sub ICatalogFileInfo_GetCatalogFile_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function ICatalogFileInfo_GetJavaTrust_Proxy(byval This as ICatalogFileInfo ptr, byval ppJavaTrust as any ptr ptr) as HRESULT
declare sub ICatalogFileInfo_GetJavaTrust_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IDataFilter as IDataFilter_
type LPDATAFILTER as IDataFilter ptr
extern IID_IDataFilter as const GUID

type IDataFilterVtbl
 QueryInterface as function(byval This as IDataFilter ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IDataFilter ptr) as ULONG
 Release as function(byval This as IDataFilter ptr) as ULONG
 DoEncode as function(byval This as IDataFilter ptr, byval dwFlags as DWORD, byval lInBufferSize as LONG, byval pbInBuffer as UBYTE ptr, byval lOutBufferSize as LONG, byval pbOutBuffer as UBYTE ptr, byval lInBytesAvailable as LONG, byval plInBytesRead as LONG ptr, byval plOutBytesWritten as LONG ptr, byval dwReserved as DWORD) as HRESULT
 DoDecode as function(byval This as IDataFilter ptr, byval dwFlags as DWORD, byval lInBufferSize as LONG, byval pbInBuffer as UBYTE ptr, byval lOutBufferSize as LONG, byval pbOutBuffer as UBYTE ptr, byval lInBytesAvailable as LONG, byval plInBytesRead as LONG ptr, byval plOutBytesWritten as LONG ptr, byval dwReserved as DWORD) as HRESULT
 SetEncodingLevel as function(byval This as IDataFilter ptr, byval dwEncLevel as DWORD) as HRESULT
end type

type IDataFilter_
 lpVtbl as IDataFilterVtbl ptr
end type


declare function IDataFilter_DoEncode_Proxy(byval This as IDataFilter ptr, byval dwFlags as DWORD, byval lInBufferSize as LONG, byval pbInBuffer as UBYTE ptr, byval lOutBufferSize as LONG, byval pbOutBuffer as UBYTE ptr, byval lInBytesAvailable as LONG, byval plInBytesRead as LONG ptr, byval plOutBytesWritten as LONG ptr, byval dwReserved as DWORD) as HRESULT
declare sub IDataFilter_DoEncode_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDataFilter_DoDecode_Proxy(byval This as IDataFilter ptr, byval dwFlags as DWORD, byval lInBufferSize as LONG, byval pbInBuffer as UBYTE ptr, byval lOutBufferSize as LONG, byval pbOutBuffer as UBYTE ptr, byval lInBytesAvailable as LONG, byval plInBytesRead as LONG ptr, byval plOutBytesWritten as LONG ptr, byval dwReserved as DWORD) as HRESULT
declare sub IDataFilter_DoDecode_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IDataFilter_SetEncodingLevel_Proxy(byval This as IDataFilter ptr, byval dwEncLevel as DWORD) as HRESULT
declare sub IDataFilter_SetEncodingLevel_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)

type _tagPROTOCOLFILTERDATA
 cbSize as DWORD
 pProtocolSink as IInternetProtocolSink ptr
 pProtocol as IInternetProtocol ptr
 pUnk as IUnknown ptr
 dwFilterFlags as DWORD
end type

type PROTOCOLFILTERDATA as _tagPROTOCOLFILTERDATA
type IEncodingFilterFactory as IEncodingFilterFactory_
type LPENCODINGFILTERFACTORY as IEncodingFilterFactory ptr

type _tagDATAINFO
 ulTotalSize as ULONG
 ulavrPacketSize as ULONG
 ulConnectSpeed as ULONG
 ulProcessorSpeed as ULONG
end type

type DATAINFO as _tagDATAINFO
extern IID_IEncodingFilterFactory as const GUID

type IEncodingFilterFactoryVtbl
 QueryInterface as function(byval This as IEncodingFilterFactory ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IEncodingFilterFactory ptr) as ULONG
 Release as function(byval This as IEncodingFilterFactory ptr) as ULONG
 FindBestFilter as function(byval This as IEncodingFilterFactory ptr, byval pwzCodeIn as LPCWSTR, byval pwzCodeOut as LPCWSTR, byval info as DATAINFO, byval ppDF as IDataFilter ptr ptr) as HRESULT
 GetDefaultFilter as function(byval This as IEncodingFilterFactory ptr, byval pwzCodeIn as LPCWSTR, byval pwzCodeOut as LPCWSTR, byval ppDF as IDataFilter ptr ptr) as HRESULT
end type

type IEncodingFilterFactory_
 lpVtbl as IEncodingFilterFactoryVtbl ptr
end type


declare function IEncodingFilterFactory_FindBestFilter_Proxy(byval This as IEncodingFilterFactory ptr, byval pwzCodeIn as LPCWSTR, byval pwzCodeOut as LPCWSTR, byval info as DATAINFO, byval ppDF as IDataFilter ptr ptr) as HRESULT
declare sub IEncodingFilterFactory_FindBestFilter_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEncodingFilterFactory_GetDefaultFilter_Proxy(byval This as IEncodingFilterFactory ptr, byval pwzCodeIn as LPCWSTR, byval pwzCodeOut as LPCWSTR, byval ppDF as IDataFilter ptr ptr) as HRESULT
declare sub IEncodingFilterFactory_GetDefaultFilter_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IsLoggingEnabledA(byval pszUrl as LPCSTR) as WINBOOL
declare function IsLoggingEnabledW(byval pwszUrl as LPCWSTR) as WINBOOL

 declare function IsLoggingEnabled alias "IsLoggingEnabledA"(byval pszUrl as LPCSTR) as WINBOOL

type _tagHIT_LOGGING_INFO
 dwStructSize as DWORD
 lpszLoggedUrlName as LPSTR
 StartTime as SYSTEMTIME
 EndTime as SYSTEMTIME
 lpszExtendedInfo as LPSTR
end type

type HIT_LOGGING_INFO as _tagHIT_LOGGING_INFO
type LPHIT_LOGGING_INFO as _tagHIT_LOGGING_INFO ptr
declare function WriteHitLogging(byval lpLogginginfo as LPHIT_LOGGING_INFO) as WINBOOL
const CONFIRMSAFETYACTION_LOADOBJECT = &h1

type CONFIRMSAFETY
 clsid as CLSID
 pUnk as IUnknown ptr
 dwFlags as DWORD
end type

extern GUID_CUSTOM_CONFIRMOBJECTSAFETY as const GUID
type IWrappedProtocol as IWrappedProtocol_
type LPIWRAPPEDPROTOCOL as IWrappedProtocol ptr
extern IID_IWrappedProtocol as const GUID

type IWrappedProtocolVtbl
 QueryInterface as function(byval This as IWrappedProtocol ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IWrappedProtocol ptr) as ULONG
 Release as function(byval This as IWrappedProtocol ptr) as ULONG
 GetWrapperCode as function(byval This as IWrappedProtocol ptr, byval pnCode as LONG ptr, byval dwReserved as DWORD_PTR) as HRESULT
end type

type IWrappedProtocol_
 lpVtbl as IWrappedProtocolVtbl ptr
end type

declare function IWrappedProtocol_GetWrapperCode_Proxy(byval This as IWrappedProtocol ptr, byval pnCode as LONG ptr, byval dwReserved as DWORD_PTR) as HRESULT
declare sub IWrappedProtocol_GetWrapperCode_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IGetBindHandle as IGetBindHandle_
type LPGETBINDHANDLE as IGetBindHandle ptr

type __WIDL_urlmon_generated_name_00000012 as long
enum
 BINDHANDLETYPES_APPCACHE = &h00
 BINDHANDLETYPES_DEPENDENCY = &h1
 BINDHANDLETYPES_COUNT = &h2
end enum

type BINDHANDLETYPES as __WIDL_urlmon_generated_name_00000012
extern IID_IGetBindHandle as const GUID

type IGetBindHandleVtbl
 QueryInterface as function(byval This as IGetBindHandle ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IGetBindHandle ptr) as ULONG
 Release as function(byval This as IGetBindHandle ptr) as ULONG
 GetBindHandle as function(byval This as IGetBindHandle ptr, byval enumRequestedHandle as BINDHANDLETYPES, byval pRetHandle as HANDLE ptr) as HRESULT
end type

type IGetBindHandle_
 lpVtbl as IGetBindHandleVtbl ptr
end type

declare function IGetBindHandle_GetBindHandle_Proxy(byval This as IGetBindHandle ptr, byval enumRequestedHandle as BINDHANDLETYPES, byval pRetHandle as HANDLE ptr) as HRESULT
declare sub IGetBindHandle_GetBindHandle_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)

type _tagPROTOCOL_ARGUMENT
 szMethod as LPCWSTR
 szTargetUrl as LPCWSTR
end type

type PROTOCOL_ARGUMENT as _tagPROTOCOL_ARGUMENT
type LPPROTOCOL_ARGUMENT as _tagPROTOCOL_ARGUMENT ptr
type IBindCallbackRedirect as IBindCallbackRedirect_
type LPBINDCALLBACKREDIRECT as IBindCallbackRedirect ptr
extern IID_IBindCallbackRedirect as const GUID

type IBindCallbackRedirectVtbl
 QueryInterface as function(byval This as IBindCallbackRedirect ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IBindCallbackRedirect ptr) as ULONG
 Release as function(byval This as IBindCallbackRedirect ptr) as ULONG
 Redirect as function(byval This as IBindCallbackRedirect ptr, byval lpcUrl as LPCWSTR, byval vbCancel as VARIANT_BOOL ptr) as HRESULT
end type

type IBindCallbackRedirect_
 lpVtbl as IBindCallbackRedirectVtbl ptr
end type


declare function IBindCallbackRedirect_Redirect_Proxy(byval This as IBindCallbackRedirect ptr, byval lpcUrl as LPCWSTR, byval vbCancel as VARIANT_BOOL ptr) as HRESULT
declare sub IBindCallbackRedirect_Redirect_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)

end extern




extern "Windows"


type tagVersionedStream
 guidVersion as GUID
 pStream as IStream ptr
end type

type VERSIONEDSTREAM as tagVersionedStream
type LPVERSIONEDSTREAM as tagVersionedStream ptr
const PROPSETFLAG_DEFAULT = 0
const PROPSETFLAG_NONSIMPLE = 1
const PROPSETFLAG_ANSI = 2
const PROPSETFLAG_UNBUFFERED = 4
const PROPSETFLAG_CASE_SENSITIVE = 8
const PROPSET_BEHAVIOR_CASE_SENSITIVE = 1
type PROPVARIANT as tagPROPVARIANT

type tagCAC
 cElems as ULONG
 pElems as CHAR ptr
end type

type CAC as tagCAC

type tagCAUB
 cElems as ULONG
 pElems as UCHAR ptr
end type

type CAUB as tagCAUB

type tagCAI
 cElems as ULONG
 pElems as SHORT ptr
end type

type CAI as tagCAI

type tagCAUI
 cElems as ULONG
 pElems as USHORT ptr
end type

type CAUI as tagCAUI

type tagCAL
 cElems as ULONG
 pElems as LONG ptr
end type

type CAL as tagCAL

type tagCAUL
 cElems as ULONG
 pElems as ULONG ptr
end type

type CAUL as tagCAUL

type tagCAFLT
 cElems as ULONG
 pElems as FLOAT ptr
end type

type CAFLT as tagCAFLT

type tagCADBL
 cElems as ULONG
 pElems as DOUBLE ptr
end type

type CADBL as tagCADBL

type tagCACY
 cElems as ULONG
 pElems as CY ptr
end type

type CACY as tagCACY

type tagCADATE
 cElems as ULONG
 pElems as DATE_ ptr
end type

type CADATE as tagCADATE

type tagCABSTR
 cElems as ULONG
 pElems as BSTR ptr
end type

type CABSTR as tagCABSTR

type tagCABSTRBLOB
 cElems as ULONG
 pElems as BSTRBLOB ptr
end type

type CABSTRBLOB as tagCABSTRBLOB

type tagCABOOL
 cElems as ULONG
 pElems as VARIANT_BOOL ptr
end type

type CABOOL as tagCABOOL

type tagCASCODE
 cElems as ULONG
 pElems as SCODE ptr
end type

type CASCODE as tagCASCODE

type tagCAPROPVARIANT
 cElems as ULONG
 pElems as PROPVARIANT ptr
end type

type CAPROPVARIANT as tagCAPROPVARIANT

type tagCAH
 cElems as ULONG
 pElems as LARGE_INTEGER ptr
end type

type CAH as tagCAH

type tagCAUH
 cElems as ULONG
 pElems as ULARGE_INTEGER ptr
end type

type CAUH as tagCAUH

type tagCALPSTR
 cElems as ULONG
 pElems as LPSTR ptr
end type

type CALPSTR as tagCALPSTR

type tagCALPWSTR
 cElems as ULONG
 pElems as LPWSTR ptr
end type

type CALPWSTR as tagCALPWSTR

type tagCAFILETIME
 cElems as ULONG
 pElems as FILETIME ptr
end type

type CAFILETIME as tagCAFILETIME

type tagCACLIPDATA
 cElems as ULONG
 pElems as CLIPDATA ptr
end type

type CACLIPDATA as tagCACLIPDATA

type tagCACLSID
 cElems as ULONG
 pElems as CLSID ptr
end type

type CACLSID as tagCACLSID
type PROPVAR_PAD1 as WORD
type PROPVAR_PAD2 as WORD
type PROPVAR_PAD3 as WORD

type tagPROPVARIANT
 union
 type
 vt as VARTYPE
 wReserved1 as PROPVAR_PAD1
 wReserved2 as PROPVAR_PAD2
 wReserved3 as PROPVAR_PAD3

 union
 cVal as CHAR
 bVal as UCHAR
 iVal as SHORT
 uiVal as USHORT
 lVal as LONG
 ulVal as ULONG
 intVal as INT_
 uintVal as UINT
 hVal as LARGE_INTEGER
 uhVal as ULARGE_INTEGER
 fltVal as FLOAT
 dblVal as DOUBLE
 boolVal as VARIANT_BOOL
 scode as SCODE
 cyVal as CY
 date as DATE_
 filetime as FILETIME
 puuid as CLSID ptr
 pclipdata as CLIPDATA ptr
 bstrVal as BSTR
 bstrblobVal as BSTRBLOB
 blob as BLOB
 pszVal as LPSTR
 pwszVal as LPWSTR
 punkVal as IUnknown ptr
 pdispVal as IDispatch ptr
 pStream as IStream ptr
 pStorage as IStorage ptr
 pVersionedStream as LPVERSIONEDSTREAM
 parray as LPSAFEARRAY
 cac as CAC
 caub as CAUB
 cai as CAI
 caui as CAUI
 cal as CAL
 caul as CAUL
 cah as CAH
 cauh as CAUH
 caflt as CAFLT
 cadbl as CADBL
 cabool as CABOOL
 cascode as CASCODE
 cacy as CACY
 cadate as CADATE
 cafiletime as CAFILETIME
 cauuid as CACLSID
 caclipdata as CACLIPDATA
 cabstr as CABSTR
 cabstrblob as CABSTRBLOB
 calpstr as CALPSTR
 calpwstr as CALPWSTR
 capropvar as CAPROPVARIANT
 pcVal as CHAR ptr
 pbVal as UCHAR ptr
 piVal as SHORT ptr
 puiVal as USHORT ptr
 plVal as LONG ptr
 pulVal as ULONG ptr
 pintVal as INT_ ptr
 puintVal as UINT ptr
 pfltVal as FLOAT ptr
 pdblVal as DOUBLE ptr
 pboolVal as VARIANT_BOOL ptr
 pdecVal as DECIMAL ptr
 pscode as SCODE ptr
 pcyVal as CY ptr
 pdate as DATE_ ptr
 pbstrVal as BSTR ptr
 ppunkVal as IUnknown ptr ptr
 ppdispVal as IDispatch ptr ptr
 pparray as LPSAFEARRAY ptr
 pvarVal as PROPVARIANT ptr
 end union
 end type

 decVal as DECIMAL
 end union
end type

type LPPROPVARIANT as tagPROPVARIANT ptr
type REFPROPVARIANT as const PROPVARIANT const ptr
const PID_DICTIONARY = &h00
const PID_CODEPAGE = &h1
const PID_FIRST_USABLE = &h2
const PID_FIRST_NAME_DEFAULT = &hfff
const PID_LOCALE = &h80000000
const PID_MODIFY_TIME = &h80000001
const PID_SECURITY = &h80000002
const PID_BEHAVIOR = &h80000003
const PID_ILLEGAL = &hffffffff
const PID_MIN_READONLY = &h80000000
const PID_MAX_READONLY = &hbfffffff
const PIDDI_THUMBNAIL = &h2
const PIDSI_TITLE = &h2
const PIDSI_SUBJECT = &h3
const PIDSI_AUTHOR = &h4
const PIDSI_KEYWORDS = &h5
const PIDSI_COMMENTS = &h6
const PIDSI_TEMPLATE = &h7
const PIDSI_LASTAUTHOR = &h8
const PIDSI_REVNUMBER = &h9
const PIDSI_EDITTIME = &ha
const PIDSI_LASTPRINTED = &hb
const PIDSI_CREATE_DTM = &hc
const PIDSI_LASTSAVE_DTM = &hd
const PIDSI_PAGECOUNT = &he
const PIDSI_WORDCOUNT = &hf
const PIDSI_CHARCOUNT = &h10
const PIDSI_THUMBNAIL = &h11
const PIDSI_APPNAME = &h12
const PIDSI_DOC_SECURITY = &h13
const PIDDSI_CATEGORY = &h00000002
const PIDDSI_PRESFORMAT = &h00000003
const PIDDSI_BYTECOUNT = &h00000004
const PIDDSI_LINECOUNT = &h00000005
const PIDDSI_PARCOUNT = &h00000006
const PIDDSI_SLIDECOUNT = &h00000007
const PIDDSI_NOTECOUNT = &h00000008
const PIDDSI_HIDDENCOUNT = &h00000009
const PIDDSI_MMCLIPCOUNT = &h0000000A
const PIDDSI_SCALE = &h0000000B
const PIDDSI_HEADINGPAIR = &h0000000C
const PIDDSI_DOCPARTS = &h0000000D
const PIDDSI_MANAGER = &h0000000E
const PIDDSI_COMPANY = &h0000000F
const PIDDSI_LINKSDIRTY = &h00000010
const PIDMSI_EDITOR = &h2
const PIDMSI_SUPPLIER = &h3
const PIDMSI_SOURCE = &h4
const PIDMSI_SEQUENCE_NO = &h5
const PIDMSI_PROJECT = &h6
const PIDMSI_STATUS = &h7
const PIDMSI_OWNER = &h8
const PIDMSI_RATING = &h9
const PIDMSI_PRODUCTION = &ha
const PIDMSI_COPYRIGHT = &hb

type PIDMSI_STATUS_VALUE as long
enum
 PIDMSI_STATUS_NORMAL = 0
 PIDMSI_STATUS_NEW = 1
 PIDMSI_STATUS_PRELIM = 2
 PIDMSI_STATUS_DRAFT = 3
 PIDMSI_STATUS_INPROGRESS = 4
 PIDMSI_STATUS_EDIT = 5
 PIDMSI_STATUS_REVIEW = 6
 PIDMSI_STATUS_PROOF = 7
 PIDMSI_STATUS_FINAL = 8
 PIDMSI_STATUS_OTHER = &h7fff
end enum

const PRSPEC_INVALID = &hffffffff
const PRSPEC_LPWSTR = 0
const PRSPEC_PROPID = 1

type tagPROPSPEC
 ulKind as ULONG

 union
 propid as PROPID
 lpwstr as LPOLESTR
 end union
end type

type PROPSPEC as tagPROPSPEC

type tagSTATPROPSTG
 lpwstrName as LPOLESTR
 propid as PROPID
 vt as VARTYPE
end type

type STATPROPSTG as tagSTATPROPSTG
const PROPSETHDR_OSVERSION_UNKNOWN = &hffffffff

type tagSTATPROPSETSTG
 fmtid as FMTID
 clsid as CLSID
 grfFlags as DWORD
 mtime as FILETIME
 ctime as FILETIME
 atime as FILETIME
 dwOSVersion as DWORD
end type

type STATPROPSETSTG as tagSTATPROPSETSTG
extern IID_IPropertyStorage as const GUID
type IPropertyStorage as IPropertyStorage_
type IEnumSTATPROPSTG as IEnumSTATPROPSTG_

type IPropertyStorageVtbl
 QueryInterface as function(byval This as IPropertyStorage ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IPropertyStorage ptr) as ULONG
 Release as function(byval This as IPropertyStorage ptr) as ULONG
 ReadMultiple as function(byval This as IPropertyStorage ptr, byval cpspec as ULONG, byval rgpspec as const PROPSPEC ptr, byval rgpropvar as PROPVARIANT ptr) as HRESULT
 WriteMultiple as function(byval This as IPropertyStorage ptr, byval cpspec as ULONG, byval rgpspec as const PROPSPEC ptr, byval rgpropvar as const PROPVARIANT ptr, byval propidNameFirst as PROPID) as HRESULT
 DeleteMultiple as function(byval This as IPropertyStorage ptr, byval cpspec as ULONG, byval rgpspec as const PROPSPEC ptr) as HRESULT
 ReadPropertyNames as function(byval This as IPropertyStorage ptr, byval cpropid as ULONG, byval rgpropid as const PROPID ptr, byval rglpwstrName as LPOLESTR ptr) as HRESULT
 WritePropertyNames as function(byval This as IPropertyStorage ptr, byval cpropid as ULONG, byval rgpropid as const PROPID ptr, byval rglpwstrName as const LPOLESTR ptr) as HRESULT
 DeletePropertyNames as function(byval This as IPropertyStorage ptr, byval cpropid as ULONG, byval rgpropid as const PROPID ptr) as HRESULT
 Commit as function(byval This as IPropertyStorage ptr, byval grfCommitFlags as DWORD) as HRESULT
 Revert as function(byval This as IPropertyStorage ptr) as HRESULT
 as function(byval This as IPropertyStorage ptr, byval ppenum as IEnumSTATPROPSTG ptr ptr) as HRESULT Enum
 SetTimes as function(byval This as IPropertyStorage ptr, byval pctime as const FILETIME ptr, byval patime as const FILETIME ptr, byval pmtime as const FILETIME ptr) as HRESULT
 SetClass as function(byval This as IPropertyStorage ptr, byval clsid as const IID const ptr) as HRESULT
 Stat as function(byval This as IPropertyStorage ptr, byval pstatpsstg as STATPROPSETSTG ptr) as HRESULT
end type

type IPropertyStorage_
 lpVtbl as IPropertyStorageVtbl ptr
end type


declare function IPropertyStorage_ReadMultiple_Proxy(byval This as IPropertyStorage ptr, byval cpspec as ULONG, byval rgpspec as const PROPSPEC ptr, byval rgpropvar as PROPVARIANT ptr) as HRESULT
declare sub IPropertyStorage_ReadMultiple_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPropertyStorage_WriteMultiple_Proxy(byval This as IPropertyStorage ptr, byval cpspec as ULONG, byval rgpspec as const PROPSPEC ptr, byval rgpropvar as const PROPVARIANT ptr, byval propidNameFirst as PROPID) as HRESULT
declare sub IPropertyStorage_WriteMultiple_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPropertyStorage_DeleteMultiple_Proxy(byval This as IPropertyStorage ptr, byval cpspec as ULONG, byval rgpspec as const PROPSPEC ptr) as HRESULT
declare sub IPropertyStorage_DeleteMultiple_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPropertyStorage_ReadPropertyNames_Proxy(byval This as IPropertyStorage ptr, byval cpropid as ULONG, byval rgpropid as const PROPID ptr, byval rglpwstrName as LPOLESTR ptr) as HRESULT
declare sub IPropertyStorage_ReadPropertyNames_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPropertyStorage_WritePropertyNames_Proxy(byval This as IPropertyStorage ptr, byval cpropid as ULONG, byval rgpropid as const PROPID ptr, byval rglpwstrName as const LPOLESTR ptr) as HRESULT
declare sub IPropertyStorage_WritePropertyNames_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPropertyStorage_DeletePropertyNames_Proxy(byval This as IPropertyStorage ptr, byval cpropid as ULONG, byval rgpropid as const PROPID ptr) as HRESULT
declare sub IPropertyStorage_DeletePropertyNames_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPropertyStorage_Commit_Proxy(byval This as IPropertyStorage ptr, byval grfCommitFlags as DWORD) as HRESULT
declare sub IPropertyStorage_Commit_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPropertyStorage_Revert_Proxy(byval This as IPropertyStorage ptr) as HRESULT
declare sub IPropertyStorage_Revert_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPropertyStorage_Enum_Proxy(byval This as IPropertyStorage ptr, byval ppenum as IEnumSTATPROPSTG ptr ptr) as HRESULT
declare sub IPropertyStorage_Enum_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPropertyStorage_SetTimes_Proxy(byval This as IPropertyStorage ptr, byval pctime as const FILETIME ptr, byval patime as const FILETIME ptr, byval pmtime as const FILETIME ptr) as HRESULT
declare sub IPropertyStorage_SetTimes_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPropertyStorage_SetClass_Proxy(byval This as IPropertyStorage ptr, byval clsid as const IID const ptr) as HRESULT
declare sub IPropertyStorage_SetClass_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPropertyStorage_Stat_Proxy(byval This as IPropertyStorage ptr, byval pstatpsstg as STATPROPSETSTG ptr) as HRESULT
declare sub IPropertyStorage_Stat_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type IPropertySetStorage as IPropertySetStorage_
type LPPROPERTYSETSTORAGE as IPropertySetStorage ptr
extern IID_IPropertySetStorage as const GUID
type IEnumSTATPROPSETSTG as IEnumSTATPROPSETSTG_

type IPropertySetStorageVtbl
 QueryInterface as function(byval This as IPropertySetStorage ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IPropertySetStorage ptr) as ULONG
 Release as function(byval This as IPropertySetStorage ptr) as ULONG
 Create as function(byval This as IPropertySetStorage ptr, byval rfmtid as const IID const ptr, byval pclsid as const CLSID ptr, byval grfFlags as DWORD, byval grfMode as DWORD, byval ppprstg as IPropertyStorage ptr ptr) as HRESULT
 Open as function(byval This as IPropertySetStorage ptr, byval rfmtid as const IID const ptr, byval grfMode as DWORD, byval ppprstg as IPropertyStorage ptr ptr) as HRESULT
 Delete_ as function(byval This as IPropertySetStorage ptr, byval rfmtid as const IID const ptr) as HRESULT
 as function(byval This as IPropertySetStorage ptr, byval ppenum as IEnumSTATPROPSETSTG ptr ptr) as HRESULT Enum
end type

type IPropertySetStorage_
 lpVtbl as IPropertySetStorageVtbl ptr
end type


declare function IPropertySetStorage_Create_Proxy(byval This as IPropertySetStorage ptr, byval rfmtid as const IID const ptr, byval pclsid as const CLSID ptr, byval grfFlags as DWORD, byval grfMode as DWORD, byval ppprstg as IPropertyStorage ptr ptr) as HRESULT
declare sub IPropertySetStorage_Create_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPropertySetStorage_Open_Proxy(byval This as IPropertySetStorage ptr, byval rfmtid as const IID const ptr, byval grfMode as DWORD, byval ppprstg as IPropertyStorage ptr ptr) as HRESULT
declare sub IPropertySetStorage_Open_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPropertySetStorage_Delete_Proxy(byval This as IPropertySetStorage ptr, byval rfmtid as const IID const ptr) as HRESULT
declare sub IPropertySetStorage_Delete_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IPropertySetStorage_Enum_Proxy(byval This as IPropertySetStorage ptr, byval ppenum as IEnumSTATPROPSETSTG ptr ptr) as HRESULT
declare sub IPropertySetStorage_Enum_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
type LPENUMSTATPROPSTG as IEnumSTATPROPSTG ptr
extern IID_IEnumSTATPROPSTG as const GUID

type IEnumSTATPROPSTGVtbl
 QueryInterface as function(byval This as IEnumSTATPROPSTG ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IEnumSTATPROPSTG ptr) as ULONG
 Release as function(byval This as IEnumSTATPROPSTG ptr) as ULONG
 Next as function(byval This as IEnumSTATPROPSTG ptr, byval celt as ULONG, byval rgelt as STATPROPSTG ptr, byval pceltFetched as ULONG ptr) as HRESULT
 Skip as function(byval This as IEnumSTATPROPSTG ptr, byval celt as ULONG) as HRESULT
 Reset as function(byval This as IEnumSTATPROPSTG ptr) as HRESULT
 Clone as function(byval This as IEnumSTATPROPSTG ptr, byval ppenum as IEnumSTATPROPSTG ptr ptr) as HRESULT
end type

type IEnumSTATPROPSTG_
 lpVtbl as IEnumSTATPROPSTGVtbl ptr
end type


declare function IEnumSTATPROPSTG_RemoteNext_Proxy(byval This as IEnumSTATPROPSTG ptr, byval celt as ULONG, byval rgelt as STATPROPSTG ptr, byval pceltFetched as ULONG ptr) as HRESULT
declare sub IEnumSTATPROPSTG_RemoteNext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumSTATPROPSTG_Skip_Proxy(byval This as IEnumSTATPROPSTG ptr, byval celt as ULONG) as HRESULT
declare sub IEnumSTATPROPSTG_Skip_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumSTATPROPSTG_Reset_Proxy(byval This as IEnumSTATPROPSTG ptr) as HRESULT
declare sub IEnumSTATPROPSTG_Reset_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumSTATPROPSTG_Clone_Proxy(byval This as IEnumSTATPROPSTG ptr, byval ppenum as IEnumSTATPROPSTG ptr ptr) as HRESULT
declare sub IEnumSTATPROPSTG_Clone_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumSTATPROPSTG_Next_Proxy(byval This as IEnumSTATPROPSTG ptr, byval celt as ULONG, byval rgelt as STATPROPSTG ptr, byval pceltFetched as ULONG ptr) as HRESULT
declare function IEnumSTATPROPSTG_Next_Stub(byval This as IEnumSTATPROPSTG ptr, byval celt as ULONG, byval rgelt as STATPROPSTG ptr, byval pceltFetched as ULONG ptr) as HRESULT
type LPENUMSTATPROPSETSTG as IEnumSTATPROPSETSTG ptr
extern IID_IEnumSTATPROPSETSTG as const GUID

type IEnumSTATPROPSETSTGVtbl
 QueryInterface as function(byval This as IEnumSTATPROPSETSTG ptr, byval riid as const IID const ptr, byval ppvObject as any ptr ptr) as HRESULT
 AddRef as function(byval This as IEnumSTATPROPSETSTG ptr) as ULONG
 Release as function(byval This as IEnumSTATPROPSETSTG ptr) as ULONG
 Next as function(byval This as IEnumSTATPROPSETSTG ptr, byval celt as ULONG, byval rgelt as STATPROPSETSTG ptr, byval pceltFetched as ULONG ptr) as HRESULT
 Skip as function(byval This as IEnumSTATPROPSETSTG ptr, byval celt as ULONG) as HRESULT
 Reset as function(byval This as IEnumSTATPROPSETSTG ptr) as HRESULT
 Clone as function(byval This as IEnumSTATPROPSETSTG ptr, byval ppenum as IEnumSTATPROPSETSTG ptr ptr) as HRESULT
end type

type IEnumSTATPROPSETSTG_
 lpVtbl as IEnumSTATPROPSETSTGVtbl ptr
end type


declare function IEnumSTATPROPSETSTG_RemoteNext_Proxy(byval This as IEnumSTATPROPSETSTG ptr, byval celt as ULONG, byval rgelt as STATPROPSETSTG ptr, byval pceltFetched as ULONG ptr) as HRESULT
declare sub IEnumSTATPROPSETSTG_RemoteNext_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumSTATPROPSETSTG_Skip_Proxy(byval This as IEnumSTATPROPSETSTG ptr, byval celt as ULONG) as HRESULT
declare sub IEnumSTATPROPSETSTG_Skip_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumSTATPROPSETSTG_Reset_Proxy(byval This as IEnumSTATPROPSETSTG ptr) as HRESULT
declare sub IEnumSTATPROPSETSTG_Reset_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumSTATPROPSETSTG_Clone_Proxy(byval This as IEnumSTATPROPSETSTG ptr, byval ppenum as IEnumSTATPROPSETSTG ptr ptr) as HRESULT
declare sub IEnumSTATPROPSETSTG_Clone_Stub(byval This as IRpcStubBuffer ptr, byval pRpcChannelBuffer as IRpcChannelBuffer ptr, byval pRpcMessage as PRPC_MESSAGE, byval pdwStubPhase as DWORD ptr)
declare function IEnumSTATPROPSETSTG_Next_Proxy(byval This as IEnumSTATPROPSETSTG ptr, byval celt as ULONG, byval rgelt as STATPROPSETSTG ptr, byval pceltFetched as ULONG ptr) as HRESULT
declare function IEnumSTATPROPSETSTG_Next_Stub(byval This as IEnumSTATPROPSETSTG ptr, byval celt as ULONG, byval rgelt as STATPROPSETSTG ptr, byval pceltFetched as ULONG ptr) as HRESULT
type LPPROPERTYSTORAGE as IPropertyStorage ptr
declare function PropVariantCopy(byval pvarDest as PROPVARIANT ptr, byval pvarSrc as const PROPVARIANT ptr) as HRESULT
declare function PropVariantClear(byval pvar as PROPVARIANT ptr) as HRESULT
declare function FreePropVariantArray(byval cVariants as ULONG, byval rgvars as PROPVARIANT ptr) as HRESULT
declare function StgCreatePropStg(byval pUnk as IUnknown ptr, byval fmtid as const IID const ptr, byval pclsid as const CLSID ptr, byval grfFlags as DWORD, byval dwReserved as DWORD, byval ppPropStg as IPropertyStorage ptr ptr) as HRESULT
declare function StgOpenPropStg(byval pUnk as IUnknown ptr, byval fmtid as const IID const ptr, byval grfFlags as DWORD, byval dwReserved as DWORD, byval ppPropStg as IPropertyStorage ptr ptr) as HRESULT
declare function StgCreatePropSetStg(byval pStorage as IStorage ptr, byval dwReserved as DWORD, byval ppPropSetStg as IPropertySetStorage ptr ptr) as HRESULT
const CCH_MAX_PROPSTG_NAME = 31
declare function FmtIdToPropStgName(byval pfmtid as const FMTID ptr, byval oszName as LPOLESTR) as HRESULT
declare function PropStgNameToFmtId(byval oszName as const LPOLESTR, byval pfmtid as FMTID ptr) as HRESULT

type tagSERIALIZEDPROPERTYVALUE
 dwType as DWORD
 rgb_(0 to 0) as UBYTE
end type

type SERIALIZEDPROPERTYVALUE as tagSERIALIZEDPROPERTYVALUE
declare function StgConvertVariantToProperty(byval pvar as const PROPVARIANT ptr, byval CodePage as USHORT, byval pprop as SERIALIZEDPROPERTYVALUE ptr, byval pcb as ULONG ptr, byval pid as PROPID, byval fReserved as WINBOOLEAN, byval pcIndirect as ULONG ptr) as SERIALIZEDPROPERTYVALUE ptr

end extern


extern "Windows"


type tagCOINIT as long
enum
 COINIT_APARTMENTTHREADED = &h2
 COINIT_MULTITHREADED = COINITBASE_MULTITHREADED
 COINIT_DISABLE_OLE1DDE = &h4
 COINIT_SPEED_OVER_MEMORY = &h8
end enum

type COINIT as tagCOINIT
const MARSHALINTERFACE_MIN = 500
const CWCSTORAGENAME = 32
const STGM_DIRECT = &h000000000
const STGM_TRANSACTED = &h00010000
const STGM_SIMPLE = &h08000000
const STGM_READ = &h000000000
const STGM_WRITE = &h00000001
const STGM_READWRITE = &h00000002
const STGM_SHARE_DENY_NONE = &h00000040
const STGM_SHARE_DENY_READ = &h00000030
const STGM_SHARE_DENY_WRITE = &h00000020
const STGM_SHARE_EXCLUSIVE = &h00000010
const STGM_PRIORITY = &h00040000
const STGM_DELETEONRELEASE = &h04000000
const STGM_NOSCRATCH = &h00100000
const STGM_CREATE = &h00001000
const STGM_CONVERT = &h00020000
const STGM_FAILIFTHERE = &h000000000
const STGM_NOSNAPSHOT = &h00200000
const STGM_DIRECT_SWMR = &h00400000
const ASYNC_MODE_COMPATIBILITY = &h00000001
const ASYNC_MODE_DEFAULT = &h000000000
const STGTY_REPEAT = &h00000100
const STG_TOEND = &hffffffff
const STG_LAYOUT_SEQUENTIAL = &h000000000
const STG_LAYOUT_INTERLEAVED = &h00000001
type STGFMT as DWORD
const STGFMT_STORAGE = 0
const STGFMT_NATIVE = 1
const STGFMT_FILE = 3
const STGFMT_ANY = 4
const STGFMT_DOCFILE = 5
const STGFMT_DOCUMENT = 0

declare function CoBuildVersion() as DWORD
declare function CoInitialize(byval pvReserved as LPVOID) as HRESULT
declare function CoRegisterMallocSpy(byval pMallocSpy as LPMALLOCSPY) as HRESULT
declare function CoRevokeMallocSpy() as HRESULT
declare function CoCreateStandardMalloc(byval memctx as DWORD, byval ppMalloc as IMalloc ptr ptr) as HRESULT
declare function CoRegisterInitializeSpy(byval pSpy as LPINITIALIZESPY, byval puliCookie as ULARGE_INTEGER ptr) as HRESULT
declare function CoRevokeInitializeSpy(byval uliCookie as ULARGE_INTEGER) as HRESULT

type tagCOMSD as long
enum
 SD_LAUNCHPERMISSIONS = 0
 SD_ACCESSPERMISSIONS = 1
 SD_LAUNCHRESTRICTIONS = 2
 SD_ACCESSRESTRICTIONS = 3
end enum

type COMSD as tagCOMSD
declare function CoGetSystemSecurityPermissions(byval comSDType as COMSD, byval ppSD as PSECURITY_DESCRIPTOR ptr) as HRESULT
declare function CoLoadLibrary(byval lpszLibName as LPOLESTR, byval bAutoFree as WINBOOL) as HINSTANCE
declare sub CoFreeLibrary(byval hInst as HINSTANCE)
declare sub CoFreeAllLibraries()
declare function CoGetInstanceFromFile(byval pServerInfo as COSERVERINFO ptr, byval pClsid as CLSID ptr, byval punkOuter as IUnknown ptr, byval dwClsCtx as DWORD, byval grfMode as DWORD, byval pwszName as wstring ptr, byval dwCount as DWORD, byval pResults as MULTI_QI ptr) as HRESULT
declare function CoGetInstanceFromIStorage(byval pServerInfo as COSERVERINFO ptr, byval pClsid as CLSID ptr, byval punkOuter as IUnknown ptr, byval dwClsCtx as DWORD, byval pstg as IStorage ptr, byval dwCount as DWORD, byval pResults as MULTI_QI ptr) as HRESULT
declare function CoAllowSetForegroundWindow(byval pUnk as IUnknown ptr, byval lpvReserved as LPVOID) as HRESULT
declare function DcomChannelSetHResult(byval pvReserved as LPVOID, byval pulReserved as ULONG ptr, byval appsHR as HRESULT) as HRESULT
declare function CoIsOle1Class(byval rclsid as const IID const ptr) as WINBOOL
declare function CLSIDFromProgIDEx(byval lpszProgID as LPCOLESTR, byval lpclsid as LPCLSID) as HRESULT
declare function CoFileTimeToDosDateTime(byval lpFileTime as FILETIME ptr, byval lpDosDate as LPWORD, byval lpDosTime as LPWORD) as WINBOOL
declare function CoDosDateTimeToFileTime(byval nDosDate as WORD, byval nDosTime as WORD, byval lpFileTime as FILETIME ptr) as WINBOOL
declare function CoFileTimeNow(byval lpFileTime as FILETIME ptr) as HRESULT
declare function CoRegisterMessageFilter(byval lpMessageFilter as LPMESSAGEFILTER, byval lplpMessageFilter as LPMESSAGEFILTER ptr) as HRESULT
declare function CoRegisterChannelHook(byval ExtensionUuid as const GUID const ptr, byval pChannelHook as IChannelHook ptr) as HRESULT
declare function CoTreatAsClass(byval clsidOld as const IID const ptr, byval clsidNew as const IID const ptr) as HRESULT
declare function CreateDataAdviseHolder(byval ppDAHolder as LPDATAADVISEHOLDER ptr) as HRESULT
declare function CreateDataCache(byval pUnkOuter as LPUNKNOWN, byval rclsid as const IID const ptr, byval iid as const IID const ptr, byval ppv as LPVOID ptr) as HRESULT
declare function StgOpenLayoutDocfile(byval pwcsDfName as const wstring ptr, byval grfMode as DWORD, byval reserved as DWORD, byval ppstgOpen as IStorage ptr ptr) as HRESULT
declare function StgCreateDocfile(byval pwcsName as const wstring ptr, byval grfMode as DWORD, byval reserved as DWORD, byval ppstgOpen as IStorage ptr ptr) as HRESULT
declare function StgCreateDocfileOnILockBytes(byval plkbyt as ILockBytes ptr, byval grfMode as DWORD, byval reserved as DWORD, byval ppstgOpen as IStorage ptr ptr) as HRESULT
declare function StgOpenStorage(byval pwcsName as const wstring ptr, byval pstgPriority as IStorage ptr, byval grfMode as DWORD, byval snbExclude as SNB, byval reserved as DWORD, byval ppstgOpen as IStorage ptr ptr) as HRESULT
declare function StgOpenStorageOnILockBytes(byval plkbyt as ILockBytes ptr, byval pstgPriority as IStorage ptr, byval grfMode as DWORD, byval snbExclude as SNB, byval reserved as DWORD, byval ppstgOpen as IStorage ptr ptr) as HRESULT
declare function StgIsStorageFile(byval pwcsName as const wstring ptr) as HRESULT
declare function StgIsStorageILockBytes(byval plkbyt as ILockBytes ptr) as HRESULT
declare function StgSetTimes(byval lpszName as const wstring ptr, byval pctime as const FILETIME ptr, byval patime as const FILETIME ptr, byval pmtime as const FILETIME ptr) as HRESULT
declare function StgOpenAsyncDocfileOnIFillLockBytes(byval pflb as IFillLockBytes ptr, byval grfMode as DWORD, byval asyncFlags as DWORD, byval ppstgOpen as IStorage ptr ptr) as HRESULT
declare function StgGetIFillLockBytesOnILockBytes(byval pilb as ILockBytes ptr, byval ppflb as IFillLockBytes ptr ptr) as HRESULT
declare function StgGetIFillLockBytesOnFile(byval pwcsName as const wstring ptr, byval ppflb as IFillLockBytes ptr ptr) as HRESULT
const STGOPTIONS_VERSION = 2

type tagSTGOPTIONS
 usVersion as USHORT
 reserved as USHORT
 ulSectorSize as ULONG
 pwcsTemplateFile as const wstring ptr
end type

type STGOPTIONS as tagSTGOPTIONS
declare function StgCreateStorageEx(byval pwcsName as const wstring ptr, byval grfMode as DWORD, byval stgfmt as DWORD, byval grfAttrs as DWORD, byval pStgOptions as STGOPTIONS ptr, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval riid as const IID const ptr, byval ppObjectOpen as any ptr ptr) as HRESULT
declare function StgOpenStorageEx(byval pwcsName as const wstring ptr, byval grfMode as DWORD, byval stgfmt as DWORD, byval grfAttrs as DWORD, byval pStgOptions as STGOPTIONS ptr, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval riid as const IID const ptr, byval ppObjectOpen as any ptr ptr) as HRESULT
declare function BindMoniker(byval pmk as LPMONIKER, byval grfOpt as DWORD, byval iidResult as const IID const ptr, byval ppvResult as LPVOID ptr) as HRESULT
declare function CoGetObject(byval pszName as LPCWSTR, byval pBindOptions as BIND_OPTS ptr, byval riid as const IID const ptr, byval ppv as any ptr ptr) as HRESULT
declare function MkParseDisplayName(byval pbc as LPBC, byval szUserName as LPCOLESTR, byval pchEaten as ULONG ptr, byval ppmk as LPMONIKER ptr) as HRESULT
declare function MonikerRelativePathTo(byval pmkSrc as LPMONIKER, byval pmkDest as LPMONIKER, byval ppmkRelPath as LPMONIKER ptr, byval dwReserved as WINBOOL) as HRESULT
declare function MonikerCommonPrefixWith(byval pmkThis as LPMONIKER, byval pmkOther as LPMONIKER, byval ppmkCommon as LPMONIKER ptr) as HRESULT
declare function CreateBindCtx(byval reserved as DWORD, byval ppbc as LPBC ptr) as HRESULT
declare function CreateGenericComposite(byval pmkFirst as LPMONIKER, byval pmkRest as LPMONIKER, byval ppmkComposite as LPMONIKER ptr) as HRESULT
declare function GetClassFile(byval szFilename as LPCOLESTR, byval pclsid as CLSID ptr) as HRESULT
declare function CreateClassMoniker(byval rclsid as const IID const ptr, byval ppmk as LPMONIKER ptr) as HRESULT
declare function CreateFileMoniker(byval lpszPathName as LPCOLESTR, byval ppmk as LPMONIKER ptr) as HRESULT
declare function CreateItemMoniker(byval lpszDelim as LPCOLESTR, byval lpszItem as LPCOLESTR, byval ppmk as LPMONIKER ptr) as HRESULT
declare function CreateAntiMoniker(byval ppmk as LPMONIKER ptr) as HRESULT
declare function CreatePointerMoniker(byval punk as LPUNKNOWN, byval ppmk as LPMONIKER ptr) as HRESULT
declare function CreateObjrefMoniker(byval punk as LPUNKNOWN, byval ppmk as LPMONIKER ptr) as HRESULT
declare function CoInstall(byval pbc as IBindCtx ptr, byval dwFlags as DWORD, byval pClassSpec as uCLSSPEC ptr, byval pQuery as QUERYCONTEXT ptr, byval pszCodeBase as LPWSTR) as HRESULT
declare function GetRunningObjectTable(byval reserved as DWORD, byval pprot as LPRUNNINGOBJECTTABLE ptr) as HRESULT
declare function CreateStdProgressIndicator(byval hwndParent as HWND, byval pszTitle as LPCOLESTR, byval pIbscCaller as IBindStatusCallback ptr, byval ppIbsc as IBindStatusCallback ptr ptr) as HRESULT

end extern


#inclib "oleaut32"


extern "Windows"

extern IID_StdOle as const IID
const STDOLE_MAJORVERNUM = &h1
const STDOLE_MINORVERNUM = &h00
const STDOLE_LCID = &h00000
const STDOLE2_MAJORVERNUM = &h2
const STDOLE2_MINORVERNUM = &h00
const STDOLE2_LCID = &h00000

declare function SysAllocString(byval as const wstring ptr) as BSTR
declare function SysReAllocString(byval as BSTR ptr, byval as const wstring ptr) as INT_
declare function SysAllocStringLen(byval as const wstring ptr, byval as UINT) as BSTR
declare function SysReAllocStringLen(byval as BSTR ptr, byval as const wstring ptr, byval as UINT) as INT_
declare sub SysFreeString(byval as BSTR)
declare function SysStringLen(byval as BSTR) as UINT
declare function SysStringByteLen(byval bstr as BSTR) as UINT
declare function SysAllocStringByteLen(byval psz as LPCSTR, byval len as UINT) as BSTR
declare function DosDateTimeToVariantTime(byval wDosDate as USHORT, byval wDosTime as USHORT, byval pvtime as DOUBLE ptr) as INT_
declare function VariantTimeToDosDateTime(byval vtime as DOUBLE, byval pwDosDate as USHORT ptr, byval pwDosTime as USHORT ptr) as INT_
declare function SystemTimeToVariantTime(byval lpSystemTime as LPSYSTEMTIME, byval pvtime as DOUBLE ptr) as INT_
declare function VariantTimeToSystemTime(byval vtime as DOUBLE, byval lpSystemTime as LPSYSTEMTIME) as INT_
declare function SafeArrayAllocDescriptor(byval cDims as UINT, byval ppsaOut as SAFEARRAY ptr ptr) as HRESULT
declare function SafeArrayAllocDescriptorEx(byval vt as VARTYPE, byval cDims as UINT, byval ppsaOut as SAFEARRAY ptr ptr) as HRESULT
declare function SafeArrayAllocData(byval psa as SAFEARRAY ptr) as HRESULT
declare function SafeArrayCreate(byval vt as VARTYPE, byval cDims as UINT, byval rgsabound as SAFEARRAYBOUND ptr) as SAFEARRAY ptr
declare function SafeArrayCreateEx(byval vt as VARTYPE, byval cDims as UINT, byval rgsabound as SAFEARRAYBOUND ptr, byval pvExtra as PVOID) as SAFEARRAY ptr
declare function SafeArrayCopyData(byval psaSource as SAFEARRAY ptr, byval psaTarget as SAFEARRAY ptr) as HRESULT
declare function SafeArrayDestroyDescriptor(byval psa as SAFEARRAY ptr) as HRESULT
declare function SafeArrayDestroyData(byval psa as SAFEARRAY ptr) as HRESULT
declare function SafeArrayDestroy(byval psa as SAFEARRAY ptr) as HRESULT
declare function SafeArrayRedim(byval psa as SAFEARRAY ptr, byval psaboundNew as SAFEARRAYBOUND ptr) as HRESULT
declare function SafeArrayGetDim(byval psa as SAFEARRAY ptr) as UINT
declare function SafeArrayGetElemsize(byval psa as SAFEARRAY ptr) as UINT
declare function SafeArrayGetUBound(byval psa as SAFEARRAY ptr, byval nDim as UINT, byval plUbound as LONG ptr) as HRESULT
declare function SafeArrayGetLBound(byval psa as SAFEARRAY ptr, byval nDim as UINT, byval plLbound as LONG ptr) as HRESULT
declare function SafeArrayLock(byval psa as SAFEARRAY ptr) as HRESULT
declare function SafeArrayUnlock(byval psa as SAFEARRAY ptr) as HRESULT
declare function SafeArrayAccessData(byval psa as SAFEARRAY ptr, byval ppvData as any ptr ptr) as HRESULT
declare function SafeArrayUnaccessData(byval psa as SAFEARRAY ptr) as HRESULT
declare function SafeArrayGetElement(byval psa as SAFEARRAY ptr, byval rgIndices as LONG ptr, byval pv as any ptr) as HRESULT
declare function SafeArrayPutElement(byval psa as SAFEARRAY ptr, byval rgIndices as LONG ptr, byval pv as any ptr) as HRESULT
declare function SafeArrayCopy(byval psa as SAFEARRAY ptr, byval ppsaOut as SAFEARRAY ptr ptr) as HRESULT
declare function SafeArrayPtrOfIndex(byval psa as SAFEARRAY ptr, byval rgIndices as LONG ptr, byval ppvData as any ptr ptr) as HRESULT
declare function SafeArraySetRecordInfo(byval psa as SAFEARRAY ptr, byval prinfo as IRecordInfo ptr) as HRESULT
declare function SafeArrayGetRecordInfo(byval psa as SAFEARRAY ptr, byval prinfo as IRecordInfo ptr ptr) as HRESULT
declare function SafeArraySetIID(byval psa as SAFEARRAY ptr, byval guid as const GUID const ptr) as HRESULT
declare function SafeArrayGetIID(byval psa as SAFEARRAY ptr, byval pguid as GUID ptr) as HRESULT
declare function SafeArrayGetVartype(byval psa as SAFEARRAY ptr, byval pvt as VARTYPE ptr) as HRESULT
declare function SafeArrayCreateVector(byval vt as VARTYPE, byval lLbound as LONG, byval cElements as ULONG) as SAFEARRAY ptr
declare function SafeArrayCreateVectorEx(byval vt as VARTYPE, byval lLbound as LONG, byval cElements as ULONG, byval pvExtra as PVOID) as SAFEARRAY ptr
declare sub VariantInit(byval pvarg as VARIANTARG ptr)
declare function VariantClear(byval pvarg as VARIANTARG ptr) as HRESULT
declare function VariantCopy(byval pvargDest as VARIANTARG ptr, byval pvargSrc as VARIANTARG ptr) as HRESULT
declare function VariantCopyInd(byval pvarDest as VARIANT ptr, byval pvargSrc as VARIANTARG ptr) as HRESULT
declare function VariantChangeType(byval pvargDest as VARIANTARG ptr, byval pvarSrc as VARIANTARG ptr, byval wFlags as USHORT, byval vt as VARTYPE) as HRESULT
declare function VariantChangeTypeEx(byval pvargDest as VARIANTARG ptr, byval pvarSrc as VARIANTARG ptr, byval lcid as LCID, byval wFlags as USHORT, byval vt as VARTYPE) as HRESULT

const VARIANT_NOVALUEPROP = &h01
const VARIANT_ALPHABOOL = &h02
const VARIANT_NOUSEROVERRIDE = &h04
const VARIANT_CALENDAR_HIJRI = &h08
const VARIANT_LOCALBOOL = &h10
const VARIANT_CALENDAR_THAI = &h20
const VARIANT_CALENDAR_GREGORIAN = &h40
const VARIANT_USE_NLS = &h80
declare function VectorFromBstr(byval bstr as BSTR, byval ppsa as SAFEARRAY ptr ptr) as HRESULT
declare function BstrFromVector(byval psa as SAFEARRAY ptr, byval pbstr as BSTR ptr) as HRESULT
const VAR_TIMEVALUEONLY = cast(DWORD, &h00000001)
const VAR_DATEVALUEONLY = cast(DWORD, &h00000002)
const VAR_VALIDDATE = cast(DWORD, &h00000004)
const VAR_CALENDAR_HIJRI = cast(DWORD, &h00000008)
const VAR_LOCALBOOL = cast(DWORD, &h00000010)
const VAR_FORMAT_NOSUBSTITUTE = cast(DWORD, &h00000020)
const VAR_FOURDIGITYEARS = cast(DWORD, &h00000040)
const LOCALE_USE_NLS = &h10000000
const VAR_CALENDAR_THAI = cast(DWORD, &h00000080)
const VAR_CALENDAR_GREGORIAN = cast(DWORD, &h00000100)
const VTDATEGRE_MAX = 2958465
const VTDATEGRE_MIN = -657434

declare function VarUI1FromI2(byval sIn as SHORT, byval pbOut as UBYTE ptr) as HRESULT
declare function VarUI1FromI4(byval lIn as LONG, byval pbOut as UBYTE ptr) as HRESULT
declare function VarUI1FromI8(byval i64In as LONG64, byval pbOut as UBYTE ptr) as HRESULT
declare function VarUI1FromR4(byval fltIn as FLOAT, byval pbOut as UBYTE ptr) as HRESULT
declare function VarUI1FromR8(byval dblIn as DOUBLE, byval pbOut as UBYTE ptr) as HRESULT
declare function VarUI1FromCy(byval cyIn as CY, byval pbOut as UBYTE ptr) as HRESULT
declare function VarUI1FromDate(byval dateIn as DATE_, byval pbOut as UBYTE ptr) as HRESULT
declare function VarUI1FromStr(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ULONG, byval pbOut as UBYTE ptr) as HRESULT
declare function VarUI1FromDisp(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval pbOut as UBYTE ptr) as HRESULT
declare function VarUI1FromBool(byval boolIn as VARIANT_BOOL, byval pbOut as UBYTE ptr) as HRESULT
declare function VarUI1FromI1(byval cIn as CHAR, byval pbOut as UBYTE ptr) as HRESULT
declare function VarUI1FromUI2(byval uiIn as USHORT, byval pbOut as UBYTE ptr) as HRESULT
declare function VarUI1FromUI4(byval ulIn as ULONG, byval pbOut as UBYTE ptr) as HRESULT
declare function VarUI1FromUI8(byval ui64In as ULONG64, byval pbOut as UBYTE ptr) as HRESULT
declare function VarUI1FromDec(byval pdecIn as DECIMAL ptr, byval pbOut as UBYTE ptr) as HRESULT
declare function VarI2FromUI1(byval bIn as UBYTE, byval psOut as SHORT ptr) as HRESULT
declare function VarI2FromI4(byval lIn as LONG, byval psOut as SHORT ptr) as HRESULT
declare function VarI2FromI8(byval i64In as LONG64, byval psOut as SHORT ptr) as HRESULT
declare function VarI2FromR4(byval fltIn as FLOAT, byval psOut as SHORT ptr) as HRESULT
declare function VarI2FromR8(byval dblIn as DOUBLE, byval psOut as SHORT ptr) as HRESULT
declare function VarI2FromCy(byval cyIn as CY, byval psOut as SHORT ptr) as HRESULT
declare function VarI2FromDate(byval dateIn as DATE_, byval psOut as SHORT ptr) as HRESULT
declare function VarI2FromStr(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ULONG, byval psOut as SHORT ptr) as HRESULT
declare function VarI2FromDisp(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval psOut as SHORT ptr) as HRESULT
declare function VarI2FromBool(byval boolIn as VARIANT_BOOL, byval psOut as SHORT ptr) as HRESULT
declare function VarI2FromI1(byval cIn as CHAR, byval psOut as SHORT ptr) as HRESULT
declare function VarI2FromUI2(byval uiIn as USHORT, byval psOut as SHORT ptr) as HRESULT
declare function VarI2FromUI4(byval ulIn as ULONG, byval psOut as SHORT ptr) as HRESULT
declare function VarI2FromUI8(byval ui64In as ULONG64, byval psOut as SHORT ptr) as HRESULT
declare function VarI2FromDec(byval pdecIn as DECIMAL ptr, byval psOut as SHORT ptr) as HRESULT
declare function VarI4FromUI1(byval bIn as UBYTE, byval plOut as LONG ptr) as HRESULT
declare function VarI4FromI2(byval sIn as SHORT, byval plOut as LONG ptr) as HRESULT
declare function VarI4FromI8(byval i64In as LONG64, byval plOut as LONG ptr) as HRESULT
declare function VarI4FromR4(byval fltIn as FLOAT, byval plOut as LONG ptr) as HRESULT
declare function VarI4FromR8(byval dblIn as DOUBLE, byval plOut as LONG ptr) as HRESULT
declare function VarI4FromCy(byval cyIn as CY, byval plOut as LONG ptr) as HRESULT
declare function VarI4FromDate(byval dateIn as DATE_, byval plOut as LONG ptr) as HRESULT
declare function VarI4FromStr(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ULONG, byval plOut as LONG ptr) as HRESULT
declare function VarI4FromDisp(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval plOut as LONG ptr) as HRESULT
declare function VarI4FromBool(byval boolIn as VARIANT_BOOL, byval plOut as LONG ptr) as HRESULT
declare function VarI4FromI1(byval cIn as CHAR, byval plOut as LONG ptr) as HRESULT
declare function VarI4FromUI2(byval uiIn as USHORT, byval plOut as LONG ptr) as HRESULT
declare function VarI4FromUI4(byval ulIn as ULONG, byval plOut as LONG ptr) as HRESULT
declare function VarI4FromUI8(byval ui64In as ULONG64, byval plOut as LONG ptr) as HRESULT
declare function VarI4FromDec(byval pdecIn as DECIMAL ptr, byval plOut as LONG ptr) as HRESULT
declare function VarI4FromInt(byval intIn as INT_, byval plOut as LONG ptr) as HRESULT
declare function VarI8FromUI1(byval bIn as UBYTE, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarI8FromI2(byval sIn as SHORT, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarI8FromI4(byval lIn as LONG, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarI8FromR4(byval fltIn as FLOAT, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarI8FromR8(byval dblIn as DOUBLE, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarI8FromCy(byval cyIn as CY, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarI8FromDate(byval dateIn as DATE_, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarI8FromStr(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ulong, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarI8FromDisp(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarI8FromBool(byval boolIn as VARIANT_BOOL, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarI8FromI1(byval cIn as CHAR, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarI8FromUI2(byval uiIn as USHORT, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarI8FromUI4(byval ulIn as ULONG, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarI8FromUI8(byval ui64In as ULONG64, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarI8FromDec(byval pdecIn as DECIMAL ptr, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarI8FromInt(byval intIn as INT_, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarR4FromUI1(byval bIn as UBYTE, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR4FromI2(byval sIn as SHORT, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR4FromI4(byval lIn as LONG, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR4FromI8(byval i64In as LONG64, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR4FromR8(byval dblIn as DOUBLE, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR4FromCy(byval cyIn as CY, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR4FromDate(byval dateIn as DATE_, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR4FromStr(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ULONG, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR4FromDisp(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR4FromBool(byval boolIn as VARIANT_BOOL, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR4FromI1(byval cIn as CHAR, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR4FromUI2(byval uiIn as USHORT, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR4FromUI4(byval ulIn as ULONG, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR4FromUI8(byval ui64In as ULONG64, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR4FromDec(byval pdecIn as DECIMAL ptr, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR8FromUI1(byval bIn as UBYTE, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarR8FromI2(byval sIn as SHORT, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarR8FromI4(byval lIn as LONG, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarR8FromI8(byval i64In as LONG64, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarR8FromR4(byval fltIn as FLOAT, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarR8FromCy(byval cyIn as CY, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarR8FromDate(byval dateIn as DATE_, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarR8FromStr(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ULONG, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarR8FromDisp(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarR8FromBool(byval boolIn as VARIANT_BOOL, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarR8FromI1(byval cIn as CHAR, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarR8FromUI2(byval uiIn as USHORT, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarR8FromUI4(byval ulIn as ULONG, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarR8FromUI8(byval ui64In as ULONG64, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarR8FromDec(byval pdecIn as DECIMAL ptr, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarDateFromUI1(byval bIn as UBYTE, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarDateFromI2(byval sIn as SHORT, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarDateFromI4(byval lIn as LONG, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarDateFromI8(byval i64In as LONG64, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarDateFromR4(byval fltIn as FLOAT, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarDateFromR8(byval dblIn as DOUBLE, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarDateFromCy(byval cyIn as CY, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarDateFromStr(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ULONG, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarDateFromDisp(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarDateFromBool(byval boolIn as VARIANT_BOOL, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarDateFromI1(byval cIn as CHAR, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarDateFromUI2(byval uiIn as USHORT, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarDateFromUI4(byval ulIn as ULONG, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarDateFromUI8(byval ui64In as ULONG64, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarDateFromDec(byval pdecIn as DECIMAL ptr, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarCyFromUI1(byval bIn as UBYTE, byval pcyOut as CY ptr) as HRESULT
declare function VarCyFromI2(byval sIn as SHORT, byval pcyOut as CY ptr) as HRESULT
declare function VarCyFromI4(byval lIn as LONG, byval pcyOut as CY ptr) as HRESULT
declare function VarCyFromI8(byval i64In as LONG64, byval pcyOut as CY ptr) as HRESULT
declare function VarCyFromR4(byval fltIn as FLOAT, byval pcyOut as CY ptr) as HRESULT
declare function VarCyFromR8(byval dblIn as DOUBLE, byval pcyOut as CY ptr) as HRESULT
declare function VarCyFromDate(byval dateIn as DATE_, byval pcyOut as CY ptr) as HRESULT
declare function VarCyFromStr(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ULONG, byval pcyOut as CY ptr) as HRESULT
declare function VarCyFromDisp(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval pcyOut as CY ptr) as HRESULT
declare function VarCyFromBool(byval boolIn as VARIANT_BOOL, byval pcyOut as CY ptr) as HRESULT
declare function VarCyFromI1(byval cIn as CHAR, byval pcyOut as CY ptr) as HRESULT
declare function VarCyFromUI2(byval uiIn as USHORT, byval pcyOut as CY ptr) as HRESULT
declare function VarCyFromUI4(byval ulIn as ULONG, byval pcyOut as CY ptr) as HRESULT
declare function VarCyFromUI8(byval ui64In as ULONG64, byval pcyOut as CY ptr) as HRESULT
declare function VarCyFromDec(byval pdecIn as DECIMAL ptr, byval pcyOut as CY ptr) as HRESULT
declare function VarBstrFromUI1(byval bVal as UBYTE, byval lcid as LCID, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBstrFromI2(byval iVal as SHORT, byval lcid as LCID, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBstrFromI4(byval lIn as LONG, byval lcid as LCID, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBstrFromI8(byval i64In as LONG64, byval lcid as LCID, byval dwFlags as ulong, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBstrFromR4(byval fltIn as FLOAT, byval lcid as LCID, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBstrFromR8(byval dblIn as DOUBLE, byval lcid as LCID, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBstrFromCy(byval cyIn as CY, byval lcid as LCID, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBstrFromDate(byval dateIn as DATE_, byval lcid as LCID, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBstrFromDisp(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBstrFromBool(byval boolIn as VARIANT_BOOL, byval lcid as LCID, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBstrFromI1(byval cIn as CHAR, byval lcid as LCID, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBstrFromUI2(byval uiIn as USHORT, byval lcid as LCID, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBstrFromUI4(byval ulIn as ULONG, byval lcid as LCID, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBstrFromUI8(byval ui64In as ULONG64, byval lcid as LCID, byval dwFlags as ulong, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBstrFromDec(byval pdecIn as DECIMAL ptr, byval lcid as LCID, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBoolFromUI1(byval bIn as UBYTE, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarBoolFromI2(byval sIn as SHORT, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarBoolFromI4(byval lIn as LONG, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarBoolFromI8(byval i64In as LONG64, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarBoolFromR4(byval fltIn as FLOAT, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarBoolFromR8(byval dblIn as DOUBLE, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarBoolFromDate(byval dateIn as DATE_, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarBoolFromCy(byval cyIn as CY, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarBoolFromStr(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ULONG, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarBoolFromDisp(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarBoolFromI1(byval cIn as CHAR, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarBoolFromUI2(byval uiIn as USHORT, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarBoolFromUI4(byval ulIn as ULONG, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarBoolFromUI8(byval i64In as ULONG64, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarBoolFromDec(byval pdecIn as DECIMAL ptr, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarI1FromUI1(byval bIn as UBYTE, byval pcOut as CHAR ptr) as HRESULT
declare function VarI1FromI2(byval uiIn as SHORT, byval pcOut as CHAR ptr) as HRESULT
declare function VarI1FromI4(byval lIn as LONG, byval pcOut as CHAR ptr) as HRESULT
declare function VarI1FromI8(byval i64In as LONG64, byval pcOut as CHAR ptr) as HRESULT
declare function VarI1FromR4(byval fltIn as FLOAT, byval pcOut as CHAR ptr) as HRESULT
declare function VarI1FromR8(byval dblIn as DOUBLE, byval pcOut as CHAR ptr) as HRESULT
declare function VarI1FromDate(byval dateIn as DATE_, byval pcOut as CHAR ptr) as HRESULT
declare function VarI1FromCy(byval cyIn as CY, byval pcOut as CHAR ptr) as HRESULT
declare function VarI1FromStr(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ULONG, byval pcOut as CHAR ptr) as HRESULT
declare function VarI1FromDisp(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval pcOut as CHAR ptr) as HRESULT
declare function VarI1FromBool(byval boolIn as VARIANT_BOOL, byval pcOut as CHAR ptr) as HRESULT
declare function VarI1FromUI2(byval uiIn as USHORT, byval pcOut as CHAR ptr) as HRESULT
declare function VarI1FromUI4(byval ulIn as ULONG, byval pcOut as CHAR ptr) as HRESULT
declare function VarI1FromUI8(byval i64In as ULONG64, byval pcOut as CHAR ptr) as HRESULT
declare function VarI1FromDec(byval pdecIn as DECIMAL ptr, byval pcOut as CHAR ptr) as HRESULT
declare function VarUI2FromUI1(byval bIn as UBYTE, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI2FromI2(byval uiIn as SHORT, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI2FromI4(byval lIn as LONG, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI2FromI8(byval i64In as LONG64, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI2FromR4(byval fltIn as FLOAT, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI2FromR8(byval dblIn as DOUBLE, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI2FromDate(byval dateIn as DATE_, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI2FromCy(byval cyIn as CY, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI2FromStr(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ULONG, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI2FromDisp(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI2FromBool(byval boolIn as VARIANT_BOOL, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI2FromI1(byval cIn as CHAR, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI2FromUI4(byval ulIn as ULONG, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI2FromUI8(byval i64In as ULONG64, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI2FromDec(byval pdecIn as DECIMAL ptr, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI4FromUI1(byval bIn as UBYTE, byval pulOut as ULONG ptr) as HRESULT
declare function VarUI4FromI2(byval uiIn as SHORT, byval pulOut as ULONG ptr) as HRESULT
declare function VarUI4FromI4(byval lIn as LONG, byval pulOut as ULONG ptr) as HRESULT
declare function VarUI4FromI8(byval i64In as LONG64, byval plOut as ULONG ptr) as HRESULT
declare function VarUI4FromR4(byval fltIn as FLOAT, byval pulOut as ULONG ptr) as HRESULT
declare function VarUI4FromR8(byval dblIn as DOUBLE, byval pulOut as ULONG ptr) as HRESULT
declare function VarUI4FromDate(byval dateIn as DATE_, byval pulOut as ULONG ptr) as HRESULT
declare function VarUI4FromCy(byval cyIn as CY, byval pulOut as ULONG ptr) as HRESULT
declare function VarUI4FromStr(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ULONG, byval pulOut as ULONG ptr) as HRESULT
declare function VarUI4FromDisp(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval pulOut as ULONG ptr) as HRESULT
declare function VarUI4FromBool(byval boolIn as VARIANT_BOOL, byval pulOut as ULONG ptr) as HRESULT
declare function VarUI4FromI1(byval cIn as CHAR, byval pulOut as ULONG ptr) as HRESULT
declare function VarUI4FromUI2(byval uiIn as USHORT, byval pulOut as ULONG ptr) as HRESULT
declare function VarUI4FromUI8(byval ui64In as ULONG64, byval plOut as ULONG ptr) as HRESULT
declare function VarUI4FromDec(byval pdecIn as DECIMAL ptr, byval pulOut as ULONG ptr) as HRESULT
declare function VarUI8FromUI1(byval bIn as UBYTE, byval pi64Out as ULONG64 ptr) as HRESULT
declare function VarUI8FromI2(byval sIn as SHORT, byval pi64Out as ULONG64 ptr) as HRESULT
declare function VarUI8FromI4(byval lIn as LONG, byval pi64Out as ULONG64 ptr) as HRESULT
declare function VarUI8FromI8(byval ui64In as LONG64, byval pi64Out as ULONG64 ptr) as HRESULT
declare function VarUI8FromR4(byval fltIn as FLOAT, byval pi64Out as ULONG64 ptr) as HRESULT
declare function VarUI8FromR8(byval dblIn as DOUBLE, byval pi64Out as ULONG64 ptr) as HRESULT
declare function VarUI8FromCy(byval cyIn as CY, byval pi64Out as ULONG64 ptr) as HRESULT
declare function VarUI8FromDate(byval dateIn as DATE_, byval pi64Out as ULONG64 ptr) as HRESULT
declare function VarUI8FromStr(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ulong, byval pi64Out as ULONG64 ptr) as HRESULT
declare function VarUI8FromDisp(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval pi64Out as ULONG64 ptr) as HRESULT
declare function VarUI8FromBool(byval boolIn as VARIANT_BOOL, byval pi64Out as ULONG64 ptr) as HRESULT
declare function VarUI8FromI1(byval cIn as CHAR, byval pi64Out as ULONG64 ptr) as HRESULT
declare function VarUI8FromUI2(byval uiIn as USHORT, byval pi64Out as ULONG64 ptr) as HRESULT
declare function VarUI8FromUI4(byval ulIn as ULONG, byval pi64Out as ULONG64 ptr) as HRESULT
declare function VarUI8FromDec(byval pdecIn as DECIMAL ptr, byval pi64Out as ULONG64 ptr) as HRESULT
declare function VarUI8FromInt(byval intIn as INT_, byval pi64Out as ULONG64 ptr) as HRESULT
declare function VarDecFromUI1(byval bIn as UBYTE, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarDecFromI2(byval uiIn as SHORT, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarDecFromI4(byval lIn as LONG, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarDecFromI8(byval i64In as LONG64, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarDecFromR4(byval fltIn as FLOAT, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarDecFromR8(byval dblIn as DOUBLE, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarDecFromDate(byval dateIn as DATE_, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarDecFromCy(byval cyIn as CY, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarDecFromStr(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ULONG, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarDecFromDisp(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarDecFromBool(byval boolIn as VARIANT_BOOL, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarDecFromI1(byval cIn as CHAR, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarDecFromUI2(byval uiIn as USHORT, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarDecFromUI4(byval ulIn as ULONG, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarDecFromUI8(byval ui64In as ULONG64, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarUI1FromInt alias "VarUI1FromI4"(byval lIn as LONG, byval pbOut as UBYTE ptr) as HRESULT
declare function VarUI1FromUint alias "VarUI1FromUI4"(byval ulIn as ULONG, byval pbOut as UBYTE ptr) as HRESULT
declare function VarI2FromInt alias "VarI2FromI4"(byval lIn as LONG, byval psOut as SHORT ptr) as HRESULT
declare function VarI2FromUint alias "VarI2FromUI4"(byval ulIn as ULONG, byval psOut as SHORT ptr) as HRESULT
declare function VarI4FromUint alias "VarI4FromUI4"(byval ulIn as ULONG, byval plOut as LONG ptr) as HRESULT
declare function VarI8FromUint alias "VarI8FromUI4"(byval ulIn as ULONG, byval pi64Out as LONG64 ptr) as HRESULT
declare function VarR4FromInt alias "VarR4FromI4"(byval lIn as LONG, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR4FromUint alias "VarR4FromUI4"(byval ulIn as ULONG, byval pfltOut as FLOAT ptr) as HRESULT
declare function VarR8FromInt alias "VarR8FromI4"(byval lIn as LONG, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarR8FromUint alias "VarR8FromUI4"(byval ulIn as ULONG, byval pdblOut as DOUBLE ptr) as HRESULT
declare function VarDateFromInt alias "VarDateFromI4"(byval lIn as LONG, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarDateFromUint alias "VarDateFromUI4"(byval ulIn as ULONG, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarCyFromInt alias "VarCyFromI4"(byval lIn as LONG, byval pcyOut as CY ptr) as HRESULT
declare function VarCyFromUint alias "VarCyFromUI4"(byval ulIn as ULONG, byval pcyOut as CY ptr) as HRESULT
declare function VarBstrFromInt alias "VarBstrFromI4"(byval lIn as LONG, byval lcid as LCID, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBstrFromUint alias "VarBstrFromUI4"(byval ulIn as ULONG, byval lcid as LCID, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarBoolFromInt alias "VarBoolFromI4"(byval lIn as LONG, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarBoolFromUint alias "VarBoolFromUI4"(byval ulIn as ULONG, byval pboolOut as VARIANT_BOOL ptr) as HRESULT
declare function VarI1FromInt alias "VarI1FromI4"(byval lIn as LONG, byval pcOut as CHAR ptr) as HRESULT
declare function VarI1FromUint alias "VarI1FromUI4"(byval ulIn as ULONG, byval pcOut as CHAR ptr) as HRESULT
declare function VarUI2FromInt alias "VarUI2FromI4"(byval lIn as LONG, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI2FromUint alias "VarUI2FromUI4"(byval ulIn as ULONG, byval puiOut as USHORT ptr) as HRESULT
declare function VarUI4FromInt alias "VarUI4FromI4"(byval lIn as LONG, byval pulOut as ULONG ptr) as HRESULT
declare function VarDecFromInt alias "VarDecFromI4"(byval lIn as LONG, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarDecFromUint alias "VarDecFromUI4"(byval ulIn as ULONG, byval pdecOut as DECIMAL ptr) as HRESULT
declare function VarIntFromUI1 alias "VarI4FromUI1"(byval bIn as UBYTE, byval plOut as LONG ptr) as HRESULT
declare function VarIntFromI2 alias "VarI4FromI2"(byval sIn as SHORT, byval plOut as LONG ptr) as HRESULT
declare function VarIntFromR4 alias "VarI4FromR4"(byval fltIn as FLOAT, byval plOut as LONG ptr) as HRESULT
declare function VarIntFromR8 alias "VarI4FromR8"(byval dblIn as DOUBLE, byval plOut as LONG ptr) as HRESULT
declare function VarIntFromDate alias "VarI4FromDate"(byval dateIn as DATE_, byval plOut as LONG ptr) as HRESULT
declare function VarIntFromCy alias "VarI4FromCy"(byval cyIn as CY, byval plOut as LONG ptr) as HRESULT
declare function VarIntFromStr alias "VarI4FromStr"(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ULONG, byval plOut as LONG ptr) as HRESULT
declare function VarIntFromDisp alias "VarI4FromDisp"(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval plOut as LONG ptr) as HRESULT
declare function VarIntFromBool alias "VarI4FromBool"(byval boolIn as VARIANT_BOOL, byval plOut as LONG ptr) as HRESULT
declare function VarIntFromI1 alias "VarI4FromI1"(byval cIn as CHAR, byval plOut as LONG ptr) as HRESULT
declare function VarIntFromUI2 alias "VarI4FromUI2"(byval uiIn as USHORT, byval plOut as LONG ptr) as HRESULT
declare function VarIntFromUI4 alias "VarI4FromUI4"(byval ulIn as ULONG, byval plOut as LONG ptr) as HRESULT
declare function VarIntFromDec alias "VarI4FromDec"(byval pdecIn as DECIMAL ptr, byval plOut as LONG ptr) as HRESULT
declare function VarIntFromUint alias "VarI4FromUI4"(byval ulIn as ULONG, byval plOut as LONG ptr) as HRESULT
declare function VarUintFromUI1 alias "VarUI4FromUI1"(byval bIn as UBYTE, byval pulOut as ULONG ptr) as HRESULT
declare function VarUintFromI2 alias "VarUI4FromI2"(byval uiIn as SHORT, byval pulOut as ULONG ptr) as HRESULT
declare function VarUintFromI4 alias "VarUI4FromI4"(byval lIn as LONG, byval pulOut as ULONG ptr) as HRESULT
declare function VarUintFromI8 alias "VarUI4FromI8"(byval i64In as LONG64, byval plOut as ULONG ptr) as HRESULT
declare function VarUintFromR4 alias "VarUI4FromR4"(byval fltIn as FLOAT, byval pulOut as ULONG ptr) as HRESULT
declare function VarUintFromR8 alias "VarUI4FromR8"(byval dblIn as DOUBLE, byval pulOut as ULONG ptr) as HRESULT
declare function VarUintFromDate alias "VarUI4FromDate"(byval dateIn as DATE_, byval pulOut as ULONG ptr) as HRESULT
declare function VarUintFromCy alias "VarUI4FromCy"(byval cyIn as CY, byval pulOut as ULONG ptr) as HRESULT
declare function VarUintFromStr alias "VarUI4FromStr"(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ULONG, byval pulOut as ULONG ptr) as HRESULT
declare function VarUintFromDisp alias "VarUI4FromDisp"(byval pdispIn as IDispatch ptr, byval lcid as LCID, byval pulOut as ULONG ptr) as HRESULT
declare function VarUintFromBool alias "VarUI4FromBool"(byval boolIn as VARIANT_BOOL, byval pulOut as ULONG ptr) as HRESULT
declare function VarUintFromI1 alias "VarUI4FromI1"(byval cIn as CHAR, byval pulOut as ULONG ptr) as HRESULT
declare function VarUintFromUI2 alias "VarUI4FromUI2"(byval uiIn as USHORT, byval pulOut as ULONG ptr) as HRESULT
declare function VarUintFromUI8 alias "VarUI4FromUI8"(byval ui64In as ULONG64, byval plOut as ULONG ptr) as HRESULT
declare function VarUintFromDec alias "VarUI4FromDec"(byval pdecIn as DECIMAL ptr, byval pulOut as ULONG ptr) as HRESULT
declare function VarUintFromInt alias "VarUI4FromI4"(byval lIn as LONG, byval pulOut as ULONG ptr) as HRESULT

type NUMPARSE
 cDig as INT_
 dwInFlags as ULONG
 dwOutFlags as ULONG
 cchUsed as INT_
 nBaseShift as INT_
 nPwr10 as INT_
end type

const NUMPRS_LEADING_WHITE = &h0001
const NUMPRS_TRAILING_WHITE = &h0002
const NUMPRS_LEADING_PLUS = &h0004
const NUMPRS_TRAILING_PLUS = &h0008
const NUMPRS_LEADING_MINUS = &h0010
const NUMPRS_TRAILING_MINUS = &h0020
const NUMPRS_HEX_OCT = &h0040
const NUMPRS_PARENS = &h0080
const NUMPRS_DECIMAL = &h0100
const NUMPRS_THOUSANDS = &h0200
const NUMPRS_CURRENCY = &h0400
const NUMPRS_EXPONENT = &h0800
const NUMPRS_USE_ALL = &h1000
const NUMPRS_STD = &h1FFF
const NUMPRS_NEG = &h10000
const NUMPRS_INEXACT = &h20000
const VTBIT_I1 = 1 shl VT_I1
const VTBIT_UI1 = 1 shl VT_UI1
const VTBIT_I2 = 1 shl VT_I2
const VTBIT_UI2 = 1 shl VT_UI2
const VTBIT_I4 = 1 shl VT_I4
const VTBIT_UI4 = 1 shl VT_UI4
const VTBIT_I8 = 1 shl VT_I8
const VTBIT_UI8 = 1 shl VT_UI8
const VTBIT_R4 = 1 shl VT_R4
const VTBIT_R8 = 1 shl VT_R8
const VTBIT_CY = 1 shl VT_CY
const VTBIT_DECIMAL = 1 shl VT_DECIMAL

declare function VarParseNumFromStr(byval strIn as wstring ptr, byval lcid as LCID, byval dwFlags as ULONG, byval pnumprs as NUMPARSE ptr, byval rgbDig as UBYTE ptr) as HRESULT
declare function VarNumFromParseNum(byval pnumprs as NUMPARSE ptr, byval rgbDig as UBYTE ptr, byval dwVtBits as ULONG, byval pvar as VARIANT ptr) as HRESULT
declare function VarAdd(byval pvarLeft as LPVARIANT, byval pvarRight as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarAnd(byval pvarLeft as LPVARIANT, byval pvarRight as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarCat(byval pvarLeft as LPVARIANT, byval pvarRight as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarDiv(byval pvarLeft as LPVARIANT, byval pvarRight as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarEqv(byval pvarLeft as LPVARIANT, byval pvarRight as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarIdiv(byval pvarLeft as LPVARIANT, byval pvarRight as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarImp(byval pvarLeft as LPVARIANT, byval pvarRight as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarMod(byval pvarLeft as LPVARIANT, byval pvarRight as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarMul(byval pvarLeft as LPVARIANT, byval pvarRight as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarOr(byval pvarLeft as LPVARIANT, byval pvarRight as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarPow(byval pvarLeft as LPVARIANT, byval pvarRight as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarSub(byval pvarLeft as LPVARIANT, byval pvarRight as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarXor(byval pvarLeft as LPVARIANT, byval pvarRight as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarAbs(byval pvarIn as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarFix(byval pvarIn as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarInt(byval pvarIn as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarNeg(byval pvarIn as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarNot(byval pvarIn as LPVARIANT, byval pvarResult as LPVARIANT) as HRESULT
declare function VarRound(byval pvarIn as LPVARIANT, byval cDecimals as long, byval pvarResult as LPVARIANT) as HRESULT
declare function VarCmp(byval pvarLeft as LPVARIANT, byval pvarRight as LPVARIANT, byval lcid as LCID, byval dwFlags as ULONG) as HRESULT
declare function VarDecAdd(byval pdecLeft as LPDECIMAL, byval pdecRight as LPDECIMAL, byval pdecResult as LPDECIMAL) as HRESULT
declare function VarDecDiv(byval pdecLeft as LPDECIMAL, byval pdecRight as LPDECIMAL, byval pdecResult as LPDECIMAL) as HRESULT
declare function VarDecMul(byval pdecLeft as LPDECIMAL, byval pdecRight as LPDECIMAL, byval pdecResult as LPDECIMAL) as HRESULT
declare function VarDecSub(byval pdecLeft as LPDECIMAL, byval pdecRight as LPDECIMAL, byval pdecResult as LPDECIMAL) as HRESULT
declare function VarDecAbs(byval pdecIn as LPDECIMAL, byval pdecResult as LPDECIMAL) as HRESULT
declare function VarDecFix(byval pdecIn as LPDECIMAL, byval pdecResult as LPDECIMAL) as HRESULT
declare function VarDecInt(byval pdecIn as LPDECIMAL, byval pdecResult as LPDECIMAL) as HRESULT
declare function VarDecNeg(byval pdecIn as LPDECIMAL, byval pdecResult as LPDECIMAL) as HRESULT
declare function VarDecRound(byval pdecIn as LPDECIMAL, byval cDecimals as long, byval pdecResult as LPDECIMAL) as HRESULT
declare function VarDecCmp(byval pdecLeft as LPDECIMAL, byval pdecRight as LPDECIMAL) as HRESULT
declare function VarDecCmpR8(byval pdecLeft as LPDECIMAL, byval dblRight as double) as HRESULT
declare function VarCyAdd(byval cyLeft as CY, byval cyRight as CY, byval pcyResult as LPCY) as HRESULT
declare function VarCyMul(byval cyLeft as CY, byval cyRight as CY, byval pcyResult as LPCY) as HRESULT
declare function VarCyMulI4(byval cyLeft as CY, byval lRight as long, byval pcyResult as LPCY) as HRESULT
declare function VarCyMulI8(byval cyLeft as CY, byval lRight as LONG64, byval pcyResult as LPCY) as HRESULT
declare function VarCySub(byval cyLeft as CY, byval cyRight as CY, byval pcyResult as LPCY) as HRESULT
declare function VarCyAbs(byval cyIn as CY, byval pcyResult as LPCY) as HRESULT
declare function VarCyFix(byval cyIn as CY, byval pcyResult as LPCY) as HRESULT
declare function VarCyInt(byval cyIn as CY, byval pcyResult as LPCY) as HRESULT
declare function VarCyNeg(byval cyIn as CY, byval pcyResult as LPCY) as HRESULT
declare function VarCyRound(byval cyIn as CY, byval cDecimals as long, byval pcyResult as LPCY) as HRESULT
declare function VarCyCmp(byval cyLeft as CY, byval cyRight as CY) as HRESULT
declare function VarCyCmpR8(byval cyLeft as CY, byval dblRight as double) as HRESULT
declare function VarBstrCat(byval bstrLeft as BSTR, byval bstrRight as BSTR, byval pbstrResult as LPBSTR) as HRESULT
declare function VarBstrCmp(byval bstrLeft as BSTR, byval bstrRight as BSTR, byval lcid as LCID, byval dwFlags as ULONG) as HRESULT
declare function VarR8Pow(byval dblLeft as double, byval dblRight as double, byval pdblResult as double ptr) as HRESULT
declare function VarR4CmpR8(byval fltLeft as single, byval dblRight as double) as HRESULT
declare function VarR8Round(byval dblIn as double, byval cDecimals as long, byval pdblResult as double ptr) as HRESULT

const VARCMP_LT = 0
const VARCMP_EQ = 1
const VARCMP_GT = 2
const VARCMP_NULL = 3
const VT_HARDTYPE = VT_RESERVED

type UDATE
 st as SYSTEMTIME
 wDayOfYear as USHORT
end type

declare function VarDateFromUdate(byval pudateIn as UDATE ptr, byval dwFlags as ULONG, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarDateFromUdateEx(byval pudateIn as UDATE ptr, byval lcid as LCID, byval dwFlags as ULONG, byval pdateOut as DATE_ ptr) as HRESULT
declare function VarUdateFromDate(byval dateIn as DATE_, byval dwFlags as ULONG, byval pudateOut as UDATE ptr) as HRESULT
declare function GetAltMonthNames(byval lcid as LCID, byval prgp as LPOLESTR ptr ptr) as HRESULT
declare function VarFormat(byval pvarIn as LPVARIANT, byval pstrFormat as LPOLESTR, byval iFirstDay as long, byval iFirstWeek as long, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarFormatDateTime(byval pvarIn as LPVARIANT, byval iNamedFormat as long, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarFormatNumber(byval pvarIn as LPVARIANT, byval iNumDig as long, byval iIncLead as long, byval iUseParens as long, byval iGroup as long, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarFormatPercent(byval pvarIn as LPVARIANT, byval iNumDig as long, byval iIncLead as long, byval iUseParens as long, byval iGroup as long, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarFormatCurrency(byval pvarIn as LPVARIANT, byval iNumDig as long, byval iIncLead as long, byval iUseParens as long, byval iGroup as long, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarWeekdayName(byval iWeekday as long, byval fAbbrev as long, byval iFirstDay as long, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarMonthName(byval iMonth as long, byval fAbbrev as long, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr) as HRESULT
declare function VarFormatFromTokens(byval pvarIn as LPVARIANT, byval pstrFormat as LPOLESTR, byval pbTokCur as LPBYTE, byval dwFlags as ULONG, byval pbstrOut as BSTR ptr, byval lcid as LCID) as HRESULT
declare function VarTokenizeFormatString(byval pstrFormat as LPOLESTR, byval rgbTok as LPBYTE, byval cbTok as long, byval iFirstDay as long, byval iFirstWeek as long, byval lcid as LCID, byval pcbActual as long ptr) as HRESULT
type LPTYPELIB as ITypeLib ptr
type DISPID as LONG
type MEMBERID as DISPID

const MEMBERID_NIL = DISPID_UNKNOWN
const ID_DEFAULTINST = -2
const DISPATCH_METHOD = &h1
const DISPATCH_PROPERTYGET = &h2
const DISPATCH_PROPERTYPUT = &h4
const DISPATCH_PROPERTYPUTREF = &h8
type LPTYPEINFO as ITypeInfo ptr
type LPTYPECOMP as ITypeComp ptr
type LPCREATETYPELIB as ICreateTypeLib ptr
type LPCREATETYPEINFO as ICreateTypeInfo ptr
declare function LHashValOfNameSysA(byval syskind as SYSKIND, byval lcid as LCID, byval szName as LPCSTR) as ULONG
declare function LHashValOfNameSys(byval syskind as SYSKIND, byval lcid as LCID, byval szName as const wstring ptr) as ULONG
declare function LoadTypeLib(byval szFile as const wstring ptr, byval pptlib as ITypeLib ptr ptr) as HRESULT

type tagREGKIND as long
enum
 REGKIND_DEFAULT
 REGKIND_REGISTER
 REGKIND_NONE
end enum

type REGKIND as tagREGKIND
const LOAD_TLB_AS_32BIT = &h20
const LOAD_TLB_AS_64BIT = &h40
const MASK_TO_RESET_TLB_BITS = not (LOAD_TLB_AS_32BIT or LOAD_TLB_AS_64BIT)

declare function LoadTypeLibEx(byval szFile as LPCOLESTR, byval regkind as REGKIND, byval pptlib as ITypeLib ptr ptr) as HRESULT
declare function LoadRegTypeLib(byval rguid as const GUID const ptr, byval wVerMajor as WORD, byval wVerMinor as WORD, byval lcid as LCID, byval pptlib as ITypeLib ptr ptr) as HRESULT
declare function QueryPathOfRegTypeLib(byval guid as const GUID const ptr, byval wMaj as USHORT, byval wMin as USHORT, byval lcid as LCID, byval lpbstrPathName as LPBSTR) as HRESULT
declare function RegisterTypeLib(byval ptlib as ITypeLib ptr, byval szFullPath as wstring ptr, byval szHelpDir as wstring ptr) as HRESULT
declare function UnRegisterTypeLib(byval libID as const GUID const ptr, byval wVerMajor as WORD, byval wVerMinor as WORD, byval lcid as LCID, byval syskind as SYSKIND) as HRESULT
declare function CreateTypeLib(byval syskind as SYSKIND, byval szFile as const wstring ptr, byval ppctlib as ICreateTypeLib ptr ptr) as HRESULT
declare function CreateTypeLib2(byval syskind as SYSKIND, byval szFile as LPCOLESTR, byval ppctlib as ICreateTypeLib2 ptr ptr) as HRESULT
type LPDISPATCH as IDispatch ptr

type tagPARAMDATA
 szName as wstring ptr
 vt as VARTYPE
end type

type PARAMDATA as tagPARAMDATA
type LPPARAMDATA as tagPARAMDATA ptr

type tagMETHODDATA
 szName as wstring ptr
 ppdata as PARAMDATA ptr
 dispid as DISPID
 iMeth as UINT
 cc as CALLCONV
 cArgs as UINT
 wFlags as WORD
 vtReturn as VARTYPE
end type

type METHODDATA as tagMETHODDATA
type LPMETHODDATA as tagMETHODDATA ptr

type tagINTERFACEDATA
 pmethdata as METHODDATA ptr
 cMembers as UINT
end type

type INTERFACEDATA as tagINTERFACEDATA
type LPINTERFACEDATA as tagINTERFACEDATA ptr
declare function DispGetParam(byval pdispparams as DISPPARAMS ptr, byval position as UINT, byval vtTarg as VARTYPE, byval pvarResult as VARIANT ptr, byval puArgErr as UINT ptr) as HRESULT
declare function DispGetIDsOfNames(byval ptinfo as ITypeInfo ptr, byval rgszNames as wstring ptr ptr, byval cNames as UINT, byval rgdispid as DISPID ptr) as HRESULT
declare function DispInvoke(byval _this as any ptr, byval ptinfo as ITypeInfo ptr, byval dispidMember as DISPID, byval wFlags as WORD, byval pparams as DISPPARAMS ptr, byval pvarResult as VARIANT ptr, byval pexcepinfo as EXCEPINFO ptr, byval puArgErr as UINT ptr) as HRESULT
declare function CreateDispTypeInfo(byval pidata as INTERFACEDATA ptr, byval lcid as LCID, byval pptinfo as ITypeInfo ptr ptr) as HRESULT
declare function CreateStdDispatch(byval punkOuter as IUnknown ptr, byval pvThis as any ptr, byval ptinfo as ITypeInfo ptr, byval ppunkStdDisp as IUnknown ptr ptr) as HRESULT
declare function DispCallFunc(byval pvInstance as any ptr, byval oVft as ULONG_PTR, byval cc as CALLCONV, byval vtReturn as VARTYPE, byval cActuals as UINT, byval prgvt as VARTYPE ptr, byval prgpvarg as VARIANTARG ptr ptr, byval pvargResult as VARIANT ptr) as HRESULT
const ACTIVEOBJECT_STRONG = &h00
const ACTIVEOBJECT_WEAK = &h1
declare function RegisterActiveObject(byval punk as IUnknown ptr, byval rclsid as const IID const ptr, byval dwFlags as DWORD, byval pdwRegister as DWORD ptr) as HRESULT
declare function RevokeActiveObject(byval dwRegister as DWORD, byval pvReserved as any ptr) as HRESULT
declare function GetActiveObject(byval rclsid as const IID const ptr, byval pvReserved as any ptr, byval ppunk as IUnknown ptr ptr) as HRESULT
declare function SetErrorInfo(byval dwReserved as ULONG, byval perrinfo as IErrorInfo ptr) as HRESULT
declare function GetErrorInfo(byval dwReserved as ULONG, byval pperrinfo as IErrorInfo ptr ptr) as HRESULT
declare function CreateErrorInfo(byval pperrinfo as ICreateErrorInfo ptr ptr) as HRESULT
declare function GetRecordInfoFromTypeInfo(byval pTypeInfo as ITypeInfo ptr, byval ppRecInfo as IRecordInfo ptr ptr) as HRESULT
declare function GetRecordInfoFromGuids(byval rGuidTypeLib as const GUID const ptr, byval uVerMajor as ULONG, byval uVerMinor as ULONG, byval lcid as LCID, byval rGuidTypeInfo as const GUID const ptr, byval ppRecInfo as IRecordInfo ptr ptr) as HRESULT
declare function OaBuildVersion() as ULONG
declare sub ClearCustData(byval pCustData as LPCUSTDATA)




end extern

extern "Windows"

const OLEIVERB_PRIMARY = 0
const OLEIVERB_SHOW = -1
const OLEIVERB_OPEN = -2
const OLEIVERB_HIDE = -3
const OLEIVERB_UIACTIVATE = -4
const OLEIVERB_INPLACEACTIVATE = -5
const OLEIVERB_DISCARDUNDOSTATE = -6
const EMBDHLP_INPROC_HANDLER = &h00000
const EMBDHLP_INPROC_SERVER = &h0001
const EMBDHLP_CREATENOW = &h000000000
const EMBDHLP_DELAYCREATE = &h00010000
const OLECREATE_LEAVERUNNING = &h1

declare function OleBuildVersion() as DWORD
declare function ReadClassStg(byval pStg as LPSTORAGE, byval pclsid as CLSID ptr) as HRESULT
declare function WriteClassStg(byval pStg as LPSTORAGE, byval rclsid as const IID const ptr) as HRESULT
declare function ReadClassStm(byval pStm as LPSTREAM, byval pclsid as CLSID ptr) as HRESULT
declare function WriteClassStm(byval pStm as LPSTREAM, byval rclsid as const IID const ptr) as HRESULT
declare function WriteFmtUserTypeStg(byval pstg as LPSTORAGE, byval cf as CLIPFORMAT, byval lpszUserType as LPOLESTR) as HRESULT
declare function ReadFmtUserTypeStg(byval pstg as LPSTORAGE, byval pcf as CLIPFORMAT ptr, byval lplpszUserType as LPOLESTR ptr) as HRESULT
declare function OleInitialize(byval pvReserved as LPVOID) as HRESULT
declare sub OleUninitialize()
declare function OleQueryLinkFromData(byval pSrcDataObject as LPDATAOBJECT) as HRESULT
declare function OleQueryCreateFromData(byval pSrcDataObject as LPDATAOBJECT) as HRESULT
declare function OleCreate(byval rclsid as const IID const ptr, byval riid as const IID const ptr, byval renderopt as DWORD, byval pFormatEtc as LPFORMATETC, byval pClientSite as LPOLECLIENTSITE, byval pStg as LPSTORAGE, byval ppvObj as LPVOID ptr) as HRESULT
declare function OleCreateEx(byval rclsid as const IID const ptr, byval riid as const IID const ptr, byval dwFlags as DWORD, byval renderopt as DWORD, byval cFormats as ULONG, byval rgAdvf as DWORD ptr, byval rgFormatEtc as LPFORMATETC, byval lpAdviseSink as IAdviseSink ptr, byval rgdwConnection as DWORD ptr, byval pClientSite as LPOLECLIENTSITE, byval pStg as LPSTORAGE, byval ppvObj as LPVOID ptr) as HRESULT
declare function OleCreateFromData(byval pSrcDataObj as LPDATAOBJECT, byval riid as const IID const ptr, byval renderopt as DWORD, byval pFormatEtc as LPFORMATETC, byval pClientSite as LPOLECLIENTSITE, byval pStg as LPSTORAGE, byval ppvObj as LPVOID ptr) as HRESULT
declare function OleCreateFromDataEx(byval pSrcDataObj as LPDATAOBJECT, byval riid as const IID const ptr, byval dwFlags as DWORD, byval renderopt as DWORD, byval cFormats as ULONG, byval rgAdvf as DWORD ptr, byval rgFormatEtc as LPFORMATETC, byval lpAdviseSink as IAdviseSink ptr, byval rgdwConnection as DWORD ptr, byval pClientSite as LPOLECLIENTSITE, byval pStg as LPSTORAGE, byval ppvObj as LPVOID ptr) as HRESULT
declare function OleCreateLinkFromData(byval pSrcDataObj as LPDATAOBJECT, byval riid as const IID const ptr, byval renderopt as DWORD, byval pFormatEtc as LPFORMATETC, byval pClientSite as LPOLECLIENTSITE, byval pStg as LPSTORAGE, byval ppvObj as LPVOID ptr) as HRESULT
declare function OleCreateLinkFromDataEx(byval pSrcDataObj as LPDATAOBJECT, byval riid as const IID const ptr, byval dwFlags as DWORD, byval renderopt as DWORD, byval cFormats as ULONG, byval rgAdvf as DWORD ptr, byval rgFormatEtc as LPFORMATETC, byval lpAdviseSink as IAdviseSink ptr, byval rgdwConnection as DWORD ptr, byval pClientSite as LPOLECLIENTSITE, byval pStg as LPSTORAGE, byval ppvObj as LPVOID ptr) as HRESULT
declare function OleCreateStaticFromData(byval pSrcDataObj as LPDATAOBJECT, byval iid as const IID const ptr, byval renderopt as DWORD, byval pFormatEtc as LPFORMATETC, byval pClientSite as LPOLECLIENTSITE, byval pStg as LPSTORAGE, byval ppvObj as LPVOID ptr) as HRESULT
declare function OleCreateLink(byval pmkLinkSrc as LPMONIKER, byval riid as const IID const ptr, byval renderopt as DWORD, byval lpFormatEtc as LPFORMATETC, byval pClientSite as LPOLECLIENTSITE, byval pStg as LPSTORAGE, byval ppvObj as LPVOID ptr) as HRESULT
declare function OleCreateLinkEx(byval pmkLinkSrc as LPMONIKER, byval riid as const IID const ptr, byval dwFlags as DWORD, byval renderopt as DWORD, byval cFormats as ULONG, byval rgAdvf as DWORD ptr, byval rgFormatEtc as LPFORMATETC, byval lpAdviseSink as IAdviseSink ptr, byval rgdwConnection as DWORD ptr, byval pClientSite as LPOLECLIENTSITE, byval pStg as LPSTORAGE, byval ppvObj as LPVOID ptr) as HRESULT
declare function OleCreateLinkToFile(byval lpszFileName as LPCOLESTR, byval riid as const IID const ptr, byval renderopt as DWORD, byval lpFormatEtc as LPFORMATETC, byval pClientSite as LPOLECLIENTSITE, byval pStg as LPSTORAGE, byval ppvObj as LPVOID ptr) as HRESULT
declare function OleCreateLinkToFileEx(byval lpszFileName as LPCOLESTR, byval riid as const IID const ptr, byval dwFlags as DWORD, byval renderopt as DWORD, byval cFormats as ULONG, byval rgAdvf as DWORD ptr, byval rgFormatEtc as LPFORMATETC, byval lpAdviseSink as IAdviseSink ptr, byval rgdwConnection as DWORD ptr, byval pClientSite as LPOLECLIENTSITE, byval pStg as LPSTORAGE, byval ppvObj as LPVOID ptr) as HRESULT
declare function OleCreateFromFile(byval rclsid as const IID const ptr, byval lpszFileName as LPCOLESTR, byval riid as const IID const ptr, byval renderopt as DWORD, byval lpFormatEtc as LPFORMATETC, byval pClientSite as LPOLECLIENTSITE, byval pStg as LPSTORAGE, byval ppvObj as LPVOID ptr) as HRESULT
declare function OleCreateFromFileEx(byval rclsid as const IID const ptr, byval lpszFileName as LPCOLESTR, byval riid as const IID const ptr, byval dwFlags as DWORD, byval renderopt as DWORD, byval cFormats as ULONG, byval rgAdvf as DWORD ptr, byval rgFormatEtc as LPFORMATETC, byval lpAdviseSink as IAdviseSink ptr, byval rgdwConnection as DWORD ptr, byval pClientSite as LPOLECLIENTSITE, byval pStg as LPSTORAGE, byval ppvObj as LPVOID ptr) as HRESULT
declare function OleLoad(byval pStg as LPSTORAGE, byval riid as const IID const ptr, byval pClientSite as LPOLECLIENTSITE, byval ppvObj as LPVOID ptr) as HRESULT
declare function OleSave(byval pPS as LPPERSISTSTORAGE, byval pStg as LPSTORAGE, byval fSameAsLoad as WINBOOL) as HRESULT
declare function OleLoadFromStream(byval pStm as LPSTREAM, byval iidInterface as const IID const ptr, byval ppvObj as LPVOID ptr) as HRESULT
declare function OleSaveToStream(byval pPStm as LPPERSISTSTREAM, byval pStm as LPSTREAM) as HRESULT
declare function OleSetContainedObject(byval pUnknown as LPUNKNOWN, byval fContained as WINBOOL) as HRESULT
declare function OleNoteObjectVisible(byval pUnknown as LPUNKNOWN, byval fVisible as WINBOOL) as HRESULT
declare function RegisterDragDrop(byval hwnd as HWND, byval pDropTarget as LPDROPTARGET) as HRESULT
declare function RevokeDragDrop(byval hwnd as HWND) as HRESULT
declare function DoDragDrop(byval pDataObj as LPDATAOBJECT, byval pDropSource as LPDROPSOURCE, byval dwOKEffects as DWORD, byval pdwEffect as LPDWORD) as HRESULT
declare function OleSetClipboard(byval pDataObj as LPDATAOBJECT) as HRESULT
declare function OleGetClipboard(byval ppDataObj as LPDATAOBJECT ptr) as HRESULT
declare function OleFlushClipboard() as HRESULT
declare function OleIsCurrentClipboard(byval pDataObj as LPDATAOBJECT) as HRESULT
declare function OleCreateMenuDescriptor(byval hmenuCombined as HMENU, byval lpMenuWidths as LPOLEMENUGROUPWIDTHS) as HOLEMENU
declare function OleSetMenuDescriptor(byval holemenu as HOLEMENU, byval hwndFrame as HWND, byval hwndActiveObject as HWND, byval lpFrame as LPOLEINPLACEFRAME, byval lpActiveObj as LPOLEINPLACEACTIVEOBJECT) as HRESULT
declare function OleDestroyMenuDescriptor(byval holemenu as HOLEMENU) as HRESULT
declare function OleTranslateAccelerator(byval lpFrame as LPOLEINPLACEFRAME, byval lpFrameInfo as LPOLEINPLACEFRAMEINFO, byval lpmsg as LPMSG) as HRESULT
declare function OleDuplicateData(byval hSrc as HANDLE, byval cfFormat as CLIPFORMAT, byval uiFlags as UINT) as HANDLE
declare function OleDraw(byval pUnknown as LPUNKNOWN, byval dwAspect as DWORD, byval hdcDraw as HDC, byval lprcBounds as LPCRECT) as HRESULT
declare function OleRun(byval pUnknown as LPUNKNOWN) as HRESULT
declare function OleIsRunning(byval pObject as LPOLEOBJECT) as WINBOOL
declare function OleLockRunning(byval pUnknown as LPUNKNOWN, byval fLock as WINBOOL, byval fLastUnlockCloses as WINBOOL) as HRESULT
declare sub ReleaseStgMedium(byval as LPSTGMEDIUM)
declare function CreateOleAdviseHolder(byval ppOAHolder as LPOLEADVISEHOLDER ptr) as HRESULT
declare function OleCreateDefaultHandler(byval clsid as const IID const ptr, byval pUnkOuter as LPUNKNOWN, byval riid as const IID const ptr, byval lplpObj as LPVOID ptr) as HRESULT
declare function OleCreateEmbeddingHelper(byval clsid as const IID const ptr, byval pUnkOuter as LPUNKNOWN, byval flags as DWORD, byval pCF as LPCLASSFACTORY, byval riid as const IID const ptr, byval lplpObj as LPVOID ptr) as HRESULT
declare function IsAccelerator(byval hAccel as HACCEL, byval cAccelEntries as long, byval lpMsg as LPMSG, byval lpwCmd as WORD ptr) as WINBOOL
declare function OleGetIconOfFile(byval lpszPath as LPOLESTR, byval fUseFileAsLabel as WINBOOL) as HGLOBAL
declare function OleGetIconOfClass(byval rclsid as const IID const ptr, byval lpszLabel as LPOLESTR, byval fUseTypeAsLabel as WINBOOL) as HGLOBAL
declare function OleMetafilePictFromIconAndLabel(byval hIcon as HICON, byval lpszLabel as LPOLESTR, byval lpszSourceFile as LPOLESTR, byval iIconIndex as UINT) as HGLOBAL
declare function OleRegGetUserType(byval clsid as const IID const ptr, byval dwFormOfType as DWORD, byval pszUserType as LPOLESTR ptr) as HRESULT
declare function OleRegGetMiscStatus(byval clsid as const IID const ptr, byval dwAspect as DWORD, byval pdwStatus as DWORD ptr) as HRESULT
declare function OleRegEnumFormatEtc(byval clsid as const IID const ptr, byval dwDirection as DWORD, byval ppenum as LPENUMFORMATETC ptr) as HRESULT
declare function OleRegEnumVerbs(byval clsid as const IID const ptr, byval ppenum as LPENUMOLEVERB ptr) as HRESULT
type LPOLESTREAM as _OLESTREAM ptr

type _OLESTREAMVTBL
 Get as function(byval as LPOLESTREAM, byval as any ptr, byval as DWORD) as DWORD
 Put as function(byval as LPOLESTREAM, byval as const any ptr, byval as DWORD) as DWORD
end type

type OLESTREAMVTBL as _OLESTREAMVTBL
type LPOLESTREAMVTBL as OLESTREAMVTBL ptr

type _OLESTREAM
 lpstbl as LPOLESTREAMVTBL
end type

type OLESTREAM as _OLESTREAM
declare function OleConvertOLESTREAMToIStorage(byval lpolestream as LPOLESTREAM, byval pstg as LPSTORAGE, byval ptd as const DVTARGETDEVICE ptr) as HRESULT
declare function OleConvertIStorageToOLESTREAM(byval pstg as LPSTORAGE, byval lpolestream as LPOLESTREAM) as HRESULT
declare function GetHGlobalFromILockBytes(byval plkbyt as LPLOCKBYTES, byval phglobal as HGLOBAL ptr) as HRESULT
declare function CreateILockBytesOnHGlobal(byval hGlobal as HGLOBAL, byval fDeleteOnRelease as WINBOOL, byval pplkbyt as LPLOCKBYTES ptr) as HRESULT
declare function OleDoAutoConvert(byval pStg as LPSTORAGE, byval pClsidNew as LPCLSID) as HRESULT
declare function OleGetAutoConvert(byval clsidOld as const IID const ptr, byval pClsidNew as LPCLSID) as HRESULT
declare function OleSetAutoConvert(byval clsidOld as const IID const ptr, byval clsidNew as const IID const ptr) as HRESULT
declare function GetConvertStg(byval pStg as LPSTORAGE) as HRESULT
declare function SetConvertStg(byval pStg as LPSTORAGE, byval fConvert as WINBOOL) as HRESULT
declare function OleConvertIStorageToOLESTREAMEx(byval pstg as LPSTORAGE, byval cfFormat as CLIPFORMAT, byval lWidth as LONG, byval lHeight as LONG, byval dwSize as DWORD, byval pmedium as LPSTGMEDIUM, byval polestm as LPOLESTREAM) as HRESULT
declare function OleConvertOLESTREAMToIStorageEx(byval polestm as LPOLESTREAM, byval pstg as LPSTORAGE, byval pcfFormat as CLIPFORMAT ptr, byval plwWidth as LONG ptr, byval plHeight as LONG ptr, byval pdwSize as DWORD ptr, byval pmedium as LPSTGMEDIUM) as HRESULT

end extern



extern "Windows"

const _RICHEDIT_VER = &h0800
const cchTextLimitDefault = 32767


const EM_CANPASTE = WM_USER + 50
const EM_DISPLAYBAND = WM_USER + 51
const EM_EXGETSEL = WM_USER + 52
const EM_EXLIMITTEXT = WM_USER + 53
const EM_EXLINEFROMCHAR = WM_USER + 54
const EM_EXSETSEL = WM_USER + 55
const EM_FINDTEXT = WM_USER + 56
const EM_FORMATRANGE = WM_USER + 57
const EM_GETCHARFORMAT = WM_USER + 58
const EM_GETEVENTMASK = WM_USER + 59
const EM_GETOLEINTERFACE = WM_USER + 60
const EM_GETPARAFORMAT = WM_USER + 61
const EM_GETSELTEXT = WM_USER + 62
const EM_HIDESELECTION = WM_USER + 63
const EM_PASTESPECIAL = WM_USER + 64
const EM_REQUESTRESIZE = WM_USER + 65
const EM_SELECTIONTYPE = WM_USER + 66
const EM_SETBKGNDCOLOR = WM_USER + 67
const EM_SETCHARFORMAT = WM_USER + 68
const EM_SETEVENTMASK = WM_USER + 69
const EM_SETOLECALLBACK = WM_USER + 70
const EM_SETPARAFORMAT = WM_USER + 71
const EM_SETTARGETDEVICE = WM_USER + 72
const EM_STREAMIN = WM_USER + 73
const EM_STREAMOUT = WM_USER + 74
const EM_GETTEXTRANGE = WM_USER + 75
const EM_FINDWORDBREAK = WM_USER + 76
const EM_SETOPTIONS = WM_USER + 77
const EM_GETOPTIONS = WM_USER + 78
const EM_FINDTEXTEX = WM_USER + 79
const EM_GETWORDBREAKPROCEX = WM_USER + 80
const EM_SETWORDBREAKPROCEX = WM_USER + 81
const EM_SETUNDOLIMIT = WM_USER + 82
const EM_REDO = WM_USER + 84
const EM_CANREDO = WM_USER + 85
const EM_GETUNDONAME = WM_USER + 86
const EM_GETREDONAME = WM_USER + 87
const EM_STOPGROUPTYPING = WM_USER + 88
const EM_SETTEXTMODE = WM_USER + 89
const EM_GETTEXTMODE = WM_USER + 90

type tagTextMode as long
enum
 TM_PLAINTEXT = 1
 TM_RICHTEXT = 2
 TM_SINGLELEVELUNDO = 4
 TM_MULTILEVELUNDO = 8
 TM_SINGLECODEPAGE = 16
 TM_MULTICODEPAGE = 32
end enum

type TEXTMODE as tagTextMode
const EM_AUTOURLDETECT = WM_USER + 91
const AURL_ENABLEURL = 1
const AURL_ENABLEEMAILADDR = 2
const AURL_ENABLETELNO = 4
const AURL_ENABLEEAURLS = 8
const AURL_ENABLEDRIVELETTERS = 16
const AURL_DISABLEMIXEDLGC = 32
const EM_GETAUTOURLDETECT = WM_USER + 92
const EM_SETPALETTE = WM_USER + 93
const EM_GETTEXTEX = WM_USER + 94
const EM_GETTEXTLENGTHEX = WM_USER + 95
const EM_SHOWSCROLLBAR = WM_USER + 96
const EM_SETTEXTEX = WM_USER + 97
const EM_SETPUNCTUATION = WM_USER + 100
const EM_GETPUNCTUATION = WM_USER + 101
const EM_SETWORDWRAPMODE = WM_USER + 102
const EM_GETWORDWRAPMODE = WM_USER + 103
const EM_SETIMECOLOR = WM_USER + 104
const EM_GETIMECOLOR = WM_USER + 105
const EM_SETIMEOPTIONS = WM_USER + 106
const EM_GETIMEOPTIONS = WM_USER + 107
const EM_CONVPOSITION = WM_USER + 108
const EM_SETLANGOPTIONS = WM_USER + 120
const EM_GETLANGOPTIONS = WM_USER + 121
const EM_GETIMECOMPMODE = WM_USER + 122
const EM_FINDTEXTW = WM_USER + 123
const EM_FINDTEXTEXW = WM_USER + 124
const EM_RECONVERSION = WM_USER + 125
const EM_SETIMEMODEBIAS = WM_USER + 126
const EM_GETIMEMODEBIAS = WM_USER + 127
const EM_SETBIDIOPTIONS = WM_USER + 200
const EM_GETBIDIOPTIONS = WM_USER + 201
const EM_SETTYPOGRAPHYOPTIONS = WM_USER + 202
const EM_GETTYPOGRAPHYOPTIONS = WM_USER + 203
const EM_SETEDITSTYLE = WM_USER + 204
const EM_GETEDITSTYLE = WM_USER + 205
const SES_EMULATESYSEDIT = 1
const SES_BEEPONMAXTEXT = 2
const SES_EXTENDBACKCOLOR = 4
const SES_MAPCPS = 8
const SES_HYPERLINKTOOLTIPS = 8
const SES_EMULATE10 = 16
const SES_DEFAULTLATINLIGA = 16
const SES_USECRLF = 32
const SES_USEAIMM = 64
const SES_NOIME = 128
const SES_ALLOWBEEPS = 256
const SES_UPPERCASE = 512
const SES_LOWERCASE = 1024
const SES_NOINPUTSEQUENCECHK = 2048
const SES_BIDI = 4096
const SES_SCROLLONKILLFOCUS = 8192
const SES_XLTCRCRLFTOCR = 16384
const SES_DRAFTMODE = 32768
const SES_USECTF = &h00010000
const SES_HIDEGRIDLINES = &h00020000
const SES_USEATFONT = &h00040000
const SES_CUSTOMLOOK = &h00080000
const SES_LBSCROLLNOTIFY = &h00100000
const SES_CTFALLOWEMBED = &h00200000
const SES_CTFALLOWSMARTTAG = &h00400000
const SES_CTFALLOWPROOFING = &h00800000
const SES_LOGICALCARET = &h01000000
const SES_WORDDRAGDROP = &h02000000
const SES_SMARTDRAGDROP = &h04000000
const SES_MULTISELECT = &h08000000
const SES_CTFNOLOCK = &h10000000
const SES_NOEALINEHEIGHTADJUST = &h20000000
const SES_MAX = &h20000000
const IMF_AUTOKEYBOARD = &h0001
const IMF_AUTOFONT = &h0002
const IMF_IMECANCELCOMPLETE = &h0004
const IMF_IMEALWAYSSENDNOTIFY = &h0008
const IMF_AUTOFONTSIZEADJUST = &h0010
const IMF_UIFONTS = &h0020
const IMF_NOIMPLICITLANG = &h0040
const IMF_DUALFONT = &h0080
const IMF_NOKBDLIDFIXUP = &h0200
const IMF_NORTFFONTSUBSTITUTE = &h0400
const IMF_SPELLCHECKING = &h0800
const IMF_TKBPREDICTION = &h1000
const ICM_NOTOPEN = &h00000
const ICM_LEVEL3 = &h0001
const ICM_LEVEL2 = &h0002
const ICM_LEVEL2_5 = &h0003
const ICM_LEVEL2_SUI = &h0004
const ICM_CTF = &h0005
const TO_ADVANCEDTYPOGRAPHY = &h0001
const TO_SIMPLELINEBREAK = &h0002
const TO_DISABLECUSTOMTEXTOUT = &h0004
const TO_ADVANCEDLAYOUT = &h0008
const EM_OUTLINE = WM_USER + 220
const EM_GETSCROLLPOS = WM_USER + 221
const EM_SETSCROLLPOS = WM_USER + 222
const EM_SETFONTSIZE = WM_USER + 223
const EM_GETZOOM = WM_USER + 224
const EM_SETZOOM = WM_USER + 225
const EM_GETVIEWKIND = WM_USER + 226
const EM_SETVIEWKIND = WM_USER + 227
const EM_GETPAGE = WM_USER + 228
const EM_SETPAGE = WM_USER + 229
const EM_GETHYPHENATEINFO = WM_USER + 230
const EM_SETHYPHENATEINFO = WM_USER + 231
const EM_GETPAGEROTATE = WM_USER + 235
const EM_SETPAGEROTATE = WM_USER + 236
const EM_GETCTFMODEBIAS = WM_USER + 237
const EM_SETCTFMODEBIAS = WM_USER + 238
const EM_GETCTFOPENSTATUS = WM_USER + 240
const EM_SETCTFOPENSTATUS = WM_USER + 241
const EM_GETIMECOMPTEXT = WM_USER + 242
const EM_ISIME = WM_USER + 243
const EM_GETIMEPROPERTY = WM_USER + 244
const EM_GETQUERYRTFOBJ = WM_USER + 269
const EM_SETQUERYRTFOBJ = WM_USER + 270
const EPR_0 = 0
const EPR_270 = 1
const EPR_180 = 2
const EPR_90 = 3
const EPR_SE = 5
const CTFMODEBIAS_DEFAULT = &h00000
const CTFMODEBIAS_FILENAME = &h0001
const CTFMODEBIAS_NAME = &h0002
const CTFMODEBIAS_READING = &h0003
const CTFMODEBIAS_DATETIME = &h0004
const CTFMODEBIAS_CONVERSATION = &h0005
const CTFMODEBIAS_NUMERIC = &h0006
const CTFMODEBIAS_HIRAGANA = &h0007
const CTFMODEBIAS_KATAKANA = &h0008
const CTFMODEBIAS_HANGUL = &h0009
const CTFMODEBIAS_HALFWIDTHKATAKANA = &h000a
const CTFMODEBIAS_FULLWIDTHALPHANUMERIC = &h000b
const CTFMODEBIAS_HALFWIDTHALPHANUMERIC = &h000c
const IMF_SMODE_PLAURALCLAUSE = &h0001
const IMF_SMODE_NONE = &h0002

type _imecomptext field = 4
 cb as LONG
 flags as DWORD
end type

type IMECOMPTEXT as _imecomptext
const ICT_RESULTREADSTR = 1
const EMO_EXIT = 0
const EMO_ENTER = 1
const EMO_PROMOTE = 2
const EMO_EXPAND = 3
const EMO_MOVESELECTION = 4
const EMO_GETVIEWMODE = 5
const EMO_EXPANDSELECTION = 0
const EMO_EXPANDDOCUMENT = 1
const VM_NORMAL = 4
const VM_OUTLINE = 2
const VM_PAGE = 9
const EM_INSERTTABLE = WM_USER + 232

type _tableRowParms field = 4
 cbRow as UBYTE
 cbCell as UBYTE
 cCell as UBYTE
 cRow as UBYTE
 dxCellMargin as LONG
 dxIndent as LONG
 dyHeight as LONG
 nAlignment : 3 as DWORD
 fRTL : 1 as DWORD
 fKeep : 1 as DWORD
 fKeepFollow : 1 as DWORD
 fWrap : 1 as DWORD
 fIdentCells : 1 as DWORD
 cpStartRow as LONG
 bTableLevel as UBYTE
 iCell as UBYTE
end type

type TABLEROWPARMS as _tableRowParms

type _tableCellParms field = 4
 dxWidth as LONG
 nVertAlign : 2 as WORD
 fMergeTop : 1 as WORD
 fMergePrev : 1 as WORD
 fVertical : 1 as WORD
 fMergeStart : 1 as WORD
 fMergeCont : 1 as WORD
 wShading as WORD
 dxBrdrLeft as SHORT
 dyBrdrTop as SHORT
 dxBrdrRight as SHORT
 dyBrdrBottom as SHORT
 crBrdrLeft as COLORREF
 crBrdrTop as COLORREF
 crBrdrRight as COLORREF
 crBrdrBottom as COLORREF
 crBackPat as COLORREF
 crForePat as COLORREF
end type

type TABLECELLPARMS as _tableCellParms
const EM_GETAUTOCORRECTPROC = WM_USER + 233
const EM_SETAUTOCORRECTPROC = WM_USER + 234
const EM_CALLAUTOCORRECTPROC = WM_USER + 255
type AutoCorrectProc as function(byval langid as LANGID, byval pszBefore as const wstring ptr, byval pszAfter as wstring ptr, byval cchAfter as LONG, byval pcchReplaced as LONG ptr) as long
const ATP_NOCHANGE = 0
const ATP_CHANGE = 1
const ATP_NODELIMITER = 2
const ATP_REPLACEALLTEXT = 4
const EM_GETTABLEPARMS = WM_USER + 265
const EM_SETEDITSTYLEEX = WM_USER + 275
const EM_GETEDITSTYLEEX = WM_USER + 276
const SES_EX_NOTABLE = &h00000004
const SES_EX_HANDLEFRIENDLYURL = &h00000100
const SES_EX_NOTHEMING = &h00080000
const SES_EX_NOACETATESELECTION = &h00100000
const SES_EX_USESINGLELINE = &h00200000
const SES_EX_MULTITOUCH = &h08000000
const SES_EX_HIDETEMPFORMAT = &h10000000
const SES_EX_USEMOUSEWPARAM = &h20000000
const EM_GETSTORYTYPE = WM_USER + 290
const EM_SETSTORYTYPE = WM_USER + 291
const EM_GETELLIPSISMODE = WM_USER + 305
const EM_SETELLIPSISMODE = WM_USER + 306
const ELLIPSIS_MASK = &h00000003
const ELLIPSIS_NONE = &h000000000
const ELLIPSIS_END = &h00000001
const ELLIPSIS_WORD = &h00000003
const EM_SETTABLEPARMS = WM_USER + 307
const EM_GETTOUCHOPTIONS = WM_USER + 310
const EM_SETTOUCHOPTIONS = WM_USER + 311
const EM_INSERTIMAGE = WM_USER + 314
const EM_SETUIANAME = WM_USER + 320
const EM_GETELLIPSISSTATE = WM_USER + 322
const RTO_SHOWHANDLES = 1
const RTO_DISABLEHANDLES = 2
const RTO_READINGMODE = 3

type tagRICHEDIT_IMAGE_PARAMETERS field = 4
 xWidth as LONG
 yHeight as LONG
 Ascent as LONG
 as LONG Type
 pwszAlternateText as LPCWSTR
 pIStream as IStream ptr
end type

type RICHEDIT_IMAGE_PARAMETERS as tagRICHEDIT_IMAGE_PARAMETERS
const EN_MSGFILTER = &h0700
const EN_REQUESTRESIZE = &h0701
const EN_SELCHANGE = &h0702
const EN_DROPFILES = &h0703
const EN_PROTECTED = &h0704
const EN_CORRECTTEXT = &h0705
const EN_STOPNOUNDO = &h0706
const EN_IMECHANGE = &h0707
const EN_SAVECLIPBOARD = &h0708
const EN_OLEOPFAILED = &h0709
const EN_OBJECTPOSITIONS = &h070a
const EN_LINK = &h070b
const EN_DRAGDROPDONE = &h070c
const EN_PARAGRAPHEXPANDED = &h070d
const EN_PAGECHANGE = &h070e
const EN_LOWFIRTF = &h070f
const EN_ALIGNLTR = &h0710
const EN_ALIGNRTL = &h0711
const EN_CLIPFORMAT = &h0712
const EN_STARTCOMPOSITION = &h0713
const EN_ENDCOMPOSITION = &h0714

type _endcomposition field = 4
 nmhdr as NMHDR
 dwCode as DWORD
end type

type ENDCOMPOSITIONNOTIFY as _endcomposition
const ECN_ENDCOMPOSITION = &h0001
const ECN_NEWTEXT = &h0002
const ENM_NONE = &h000000000
const ENM_CHANGE = &h00000001
const ENM_UPDATE = &h00000002
const ENM_SCROLL = &h00000004
const ENM_SCROLLEVENTS = &h00000008
const ENM_DRAGDROPDONE = &h00000010
const ENM_PARAGRAPHEXPANDED = &h00000020
const ENM_PAGECHANGE = &h00000040
const ENM_CLIPFORMAT = &h00000080
const ENM_KEYEVENTS = &h00010000
const ENM_MOUSEEVENTS = &h00020000
const ENM_REQUESTRESIZE = &h00040000
const ENM_SELCHANGE = &h00080000
const ENM_DROPFILES = &h00100000
const ENM_PROTECTED = &h00200000
const ENM_CORRECTTEXT = &h00400000
const ENM_IMECHANGE = &h00800000
const ENM_LANGCHANGE = &h01000000
const ENM_OBJECTPOSITIONS = &h02000000
const ENM_LINK = &h04000000
const ENM_LOWFIRTF = &h08000000
const ENM_STARTCOMPOSITION = &h10000000
const ENM_ENDCOMPOSITION = &h20000000
const ENM_GROUPTYPINGCHANGE = &h40000000
const ENM_HIDELINKTOOLTIP = &h80000000
const ES_SAVESEL = &h00008000
const ES_SUNKEN = &h00004000
const ES_DISABLENOSCROLL = &h00002000
const ES_SELECTIONBAR = &h01000000
const ES_NOOLEDRAGDROP = &h00000008
const ES_EX_NOCALLOLEINIT = &h000000000
const ES_VERTICAL = &h00400000
const ES_NOIME = &h00080000
const ES_SELFIME = &h00040000
const ECO_AUTOWORDSELECTION = &h00000001
const ECO_AUTOVSCROLL = &h00000040
const ECO_AUTOHSCROLL = &h00000080
const ECO_NOHIDESEL = &h00000100
const ECO_READONLY = &h00000800
const ECO_WANTRETURN = &h00001000
const ECO_SAVESEL = &h00008000
const ECO_SELECTIONBAR = &h01000000
const ECO_VERTICAL = &h00400000
const ECOOP_SET = &h0001
const ECOOP_OR = &h0002
const ECOOP_AND = &h0003
const ECOOP_XOR = &h0004
const WB_CLASSIFY = 3
const WB_MOVEWORDLEFT = 4
const WB_MOVEWORDRIGHT = 5
const WB_LEFTBREAK = 6
const WB_RIGHTBREAK = 7
const WB_MOVEWORDPREV = 4
const WB_MOVEWORDNEXT = 5
const WB_PREVBREAK = 6
const WB_NEXTBREAK = 7
const PC_FOLLOWING = 1
const PC_LEADING = 2
const PC_OVERFLOW = 3
const PC_DELIMITER = 4
const WBF_WORDWRAP = &h010
const WBF_WORDBREAK = &h020
const WBF_OVERFLOW = &h040
const WBF_LEVEL1 = &h080
const WBF_LEVEL2 = &h100
const WBF_CUSTOM = &h200
const IMF_FORCENONE = &h0001
const IMF_FORCEENABLE = &h0002
const IMF_FORCEDISABLE = &h0004
const IMF_CLOSESTATUSWINDOW = &h0008
const IMF_VERTICAL = &h0020
const IMF_FORCEACTIVE = &h0040
const IMF_FORCEINACTIVE = &h0080
const IMF_FORCEREMEMBER = &h0100
const IMF_MULTIPLEEDIT = &h0400
const WBF_CLASS = cast(UBYTE, &h0f)
const WBF_ISWHITE = cast(UBYTE, &h10)
const WBF_BREAKLINE = cast(UBYTE, &h20)
const WBF_BREAKAFTER = cast(UBYTE, &h40)
type EDITWORDBREAKPROCEX as function cdecl(byval pchText as zstring ptr, byval cchText as LONG, byval bCharSet as UBYTE, byval action as INT_) as LONG

type _charformat field = 4
 cbSize as UINT
 dwMask as DWORD
 dwEffects as DWORD
 yHeight as LONG
 yOffset as LONG
 crTextColor as COLORREF
 bCharSet as UBYTE
 bPitchAndFamily as UBYTE
 szFaceName as zstring * 32
end type

type CHARFORMATA as _charformat

type _charformatw field = 4
 cbSize as UINT
 dwMask as DWORD
 dwEffects as DWORD
 yHeight as LONG
 yOffset as LONG
 crTextColor as COLORREF
 bCharSet as UBYTE
 bPitchAndFamily as UBYTE
 szFaceName as wstring * 32
end type

type CHARFORMATW as _charformatw

 type CHARFORMAT as CHARFORMATA

type _charformat2w field = 4
 cbSize as UINT
 dwMask as DWORD
 dwEffects as DWORD
 yHeight as LONG
 yOffset as LONG
 crTextColor as COLORREF
 bCharSet as UBYTE
 bPitchAndFamily as UBYTE
 szFaceName as wstring * 32
 wWeight as WORD
 sSpacing as SHORT
 crBackColor as COLORREF
 lcid as LCID

 union field = 4
 dwReserved as DWORD
 dwCookie as DWORD
 end union

 sStyle as SHORT
 wKerning as WORD
 bUnderlineType as UBYTE
 bAnimation as UBYTE
 bRevAuthor as UBYTE
 bUnderlineColor as UBYTE
end type

type CHARFORMAT2W as _charformat2w

type _charformat2a field = 4
 cbSize as UINT
 dwMask as DWORD
 dwEffects as DWORD
 yHeight as LONG
 yOffset as LONG
 crTextColor as COLORREF
 bCharSet as UBYTE
 bPitchAndFamily as UBYTE
 szFaceName as zstring * 32
 wWeight as WORD
 sSpacing as SHORT
 crBackColor as COLORREF
 lcid as LCID

 union field = 4
 dwReserved as DWORD
 dwCookie as DWORD
 end union

 sStyle as SHORT
 wKerning as WORD
 bUnderlineType as UBYTE
 bAnimation as UBYTE
 bRevAuthor as UBYTE
 bUnderlineColor as UBYTE
end type

type CHARFORMAT2A as _charformat2a

 type CHARFORMAT2 as CHARFORMAT2A

const CFM_BOLD = &h00000001
const CFM_ITALIC = &h00000002
const CFM_UNDERLINE = &h00000004
const CFM_STRIKEOUT = &h00000008
const CFM_PROTECTED = &h00000010
const CFM_LINK = &h00000020
const CFM_SIZE = &h80000000
const CFM_COLOR = &h40000000
const CFM_FACE = &h20000000
const CFM_OFFSET = &h10000000
const CFM_CHARSET = &h08000000
const CFE_BOLD = &h00000001
const CFE_ITALIC = &h00000002
const CFE_UNDERLINE = &h00000004
const CFE_STRIKEOUT = &h00000008
const CFE_PROTECTED = &h00000010
const CFE_LINK = &h00000020
const CFE_AUTOCOLOR = &h40000000
const CFM_SMALLCAPS = &h00000040
const CFM_ALLCAPS = &h00000080
const CFM_HIDDEN = &h00000100
const CFM_OUTLINE = &h00000200
const CFM_SHADOW = &h00000400
const CFM_EMBOSS = &h00000800
const CFM_IMPRINT = &h00001000
const CFM_DISABLED = &h00002000
const CFM_REVISED = &h00004000
const CFM_REVAUTHOR = &h00008000
const CFE_SUBSCRIPT = &h00010000
const CFE_SUPERSCRIPT = &h00020000
const CFM_ANIMATION = &h00040000
const CFM_STYLE = &h00080000
const CFM_KERNING = &h00100000
const CFM_SPACING = &h00200000
const CFM_WEIGHT = &h00400000
const CFM_UNDERLINETYPE = &h00800000
const CFM_COOKIE = &h01000000
const CFM_LCID = &h02000000
const CFM_BACKCOLOR = &h04000000
const CFM_SUBSCRIPT = CFE_SUBSCRIPT or CFE_SUPERSCRIPT
const CFM_SUPERSCRIPT = CFM_SUBSCRIPT
const CFM_EFFECTS = (((((CFM_BOLD or CFM_ITALIC) or CFM_UNDERLINE) or CFM_COLOR) or CFM_STRIKEOUT) or CFE_PROTECTED) or CFM_LINK
const CFM_ALL = (((CFM_EFFECTS or CFM_SIZE) or CFM_FACE) or CFM_OFFSET) or CFM_CHARSET
const CFM_EFFECTS2 = (((((((((((CFM_EFFECTS or CFM_DISABLED) or CFM_SMALLCAPS) or CFM_ALLCAPS) or CFM_HIDDEN) or CFM_OUTLINE) or CFM_SHADOW) or CFM_EMBOSS) or CFM_IMPRINT) or CFM_REVISED) or CFM_SUBSCRIPT) or CFM_SUPERSCRIPT) or CFM_BACKCOLOR
const CFM_ALL2 = ((((((((((CFM_ALL or CFM_EFFECTS2) or CFM_BACKCOLOR) or CFM_LCID) or CFM_UNDERLINETYPE) or CFM_WEIGHT) or CFM_REVAUTHOR) or CFM_SPACING) or CFM_KERNING) or CFM_STYLE) or CFM_ANIMATION) or CFM_COOKIE
const CFE_SMALLCAPS = CFM_SMALLCAPS
const CFE_ALLCAPS = CFM_ALLCAPS
const CFE_HIDDEN = CFM_HIDDEN
const CFE_OUTLINE = CFM_OUTLINE
const CFE_SHADOW = CFM_SHADOW
const CFE_EMBOSS = CFM_EMBOSS
const CFE_IMPRINT = CFM_IMPRINT
const CFE_DISABLED = CFM_DISABLED
const CFE_REVISED = CFM_REVISED
const CFE_AUTOBACKCOLOR = CFM_BACKCOLOR
const CFM_FONTBOUND = &h00100000
const CFM_LINKPROTECTED = &h00800000
const CFM_EXTENDED = &h02000000
const CFM_MATHNOBUILDUP = &h08000000
const CFM_MATH = &h10000000
const CFM_MATHORDINARY = &h20000000
const CFM_ALLEFFECTS = ((((CFM_EFFECTS2 or CFM_FONTBOUND) or CFM_EXTENDED) or CFM_MATHNOBUILDUP) or CFM_MATH) or CFM_MATHORDINARY
const CFE_FONTBOUND = &h00100000
const CFE_LINKPROTECTED = &h00800000
const CFE_EXTENDED = &h02000000
const CFE_MATHNOBUILDUP = &h08000000
const CFE_MATH = &h10000000
const CFE_MATHORDINARY = &h20000000
const CFU_CF1UNDERLINE = &hff
const CFU_INVERT = &hfe
const CFU_UNDERLINETHICKLONGDASH = 18
const CFU_UNDERLINETHICKDOTTED = 17
const CFU_UNDERLINETHICKDASHDOTDOT = 16
const CFU_UNDERLINETHICKDASHDOT = 15
const CFU_UNDERLINETHICKDASH = 14
const CFU_UNDERLINELONGDASH = 13
const CFU_UNDERLINEHEAVYWAVE = 12
const CFU_UNDERLINEDOUBLEWAVE = 11
const CFU_UNDERLINEHAIRLINE = 10
const CFU_UNDERLINETHICK = 9
const CFU_UNDERLINEWAVE = 8
const CFU_UNDERLINEDASHDOTDOT = 7
const CFU_UNDERLINEDASHDOT = 6
const CFU_UNDERLINEDASH = 5
const CFU_UNDERLINEDOTTED = 4
const CFU_UNDERLINEDOUBLE = 3
const CFU_UNDERLINEWORD = 2
const CFU_UNDERLINE = 1
const CFU_UNDERLINENONE = 0
const yHeightCharPtsMost = 1638
const SCF_SELECTION = &h0001
const SCF_WORD = &h0002
const SCF_DEFAULT = &h00000
const SCF_ALL = &h0004
const SCF_USEUIRULES = &h0008
const SCF_ASSOCIATEFONT = &h0010
const SCF_NOKBUPDATE = &h0020
const SCF_ASSOCIATEFONT2 = &h0040
const SCF_SMARTFONT = &h0080
const SCF_CHARREPFROMLCID = &h0100
const SPF_DONTSETDEFAULT = &h0002
const SPF_SETDEFAULT = &h0004

type _charrange field = 4
 cpMin as LONG
 cpMax as LONG
end type

type CHARRANGE as _charrange

type _textrange field = 4
 chrg as CHARRANGE
 lpstrText as LPSTR
end type

type TEXTRANGEA as _textrange

type _textrangew field = 4
 chrg as CHARRANGE
 lpstrText as LPWSTR
end type

type TEXTRANGEW as _textrangew

 type TEXTRANGE as TEXTRANGEA

type EDITSTREAMCALLBACK as function(byval dwCookie as DWORD_PTR, byval pbBuff as LPBYTE, byval cb as LONG, byval pcb as LONG ptr) as DWORD

type _editstream field = 4
 dwCookie as DWORD_PTR
 dwError as DWORD
 pfnCallback as EDITSTREAMCALLBACK
end type

type EDITSTREAM as _editstream
const SF_TEXT = &h0001
const SF_RTF = &h0002
const SF_RTFNOOBJS = &h0003
const SF_TEXTIZED = &h0004
const SF_UNICODE = &h0010
const SF_USECODEPAGE = &h0020
const SF_NCRFORNONASCII = &h40
const SFF_WRITEXTRAPAR = &h80
const SFF_SELECTION = &h8000
const SFF_PLAINRTF = &h4000
const SFF_PERSISTVIEWSCALE = &h2000
const SFF_KEEPDOCINFO = &h1000
const SFF_PWD = &h0800
const SF_RTFVAL = &h0700

type _findtext field = 4
 chrg as CHARRANGE
 lpstrText as LPCSTR
end type

type FINDTEXTA as _findtext

type _findtextw field = 4
 chrg as CHARRANGE
 lpstrText as LPCWSTR
end type

type FINDTEXTW as _findtextw

 type FINDTEXT as FINDTEXTA

type _findtextexa field = 4
 chrg as CHARRANGE
 lpstrText as LPCSTR
 chrgText as CHARRANGE
end type

type FINDTEXTEXA as _findtextexa

type _findtextexw field = 4
 chrg as CHARRANGE
 lpstrText as LPCWSTR
 chrgText as CHARRANGE
end type

type FINDTEXTEXW as _findtextexw

 type FINDTEXTEX as FINDTEXTEXA

type _formatrange field = 4
 hdc as HDC
 hdcTarget as HDC
 rc as RECT
 rcPage as RECT
 chrg as CHARRANGE
end type

type FORMATRANGE as _formatrange
const MAX_TAB_STOPS = 32
const lDefaultTab = 720
const MAX_TABLE_CELLS = 63

type _paraformat field = 4
 cbSize as UINT
 dwMask as DWORD
 wNumbering as WORD

 union field = 4
 wReserved as WORD
 wEffects as WORD
 end union

 dxStartIndent as LONG
 dxRightIndent as LONG
 dxOffset as LONG
 wAlignment as WORD
 cTabCount as SHORT
 rgxTabs(0 to 31) as LONG
end type

type PARAFORMAT as _paraformat

type _paraformat2 field = 4
 cbSize as UINT
 dwMask as DWORD
 wNumbering as WORD

 union field = 4
 wReserved as WORD
 wEffects as WORD
 end union

 dxStartIndent as LONG
 dxRightIndent as LONG
 dxOffset as LONG
 wAlignment as WORD
 cTabCount as SHORT
 rgxTabs(0 to 31) as LONG
 dySpaceBefore as LONG
 dySpaceAfter as LONG
 dyLineSpacing as LONG
 sStyle as SHORT
 bLineSpacingRule as UBYTE
 bOutlineLevel as UBYTE
 wShadingWeight as WORD
 wShadingStyle as WORD
 wNumberingStart as WORD
 wNumberingStyle as WORD
 wNumberingTab as WORD
 wBorderSpace as WORD
 wBorderWidth as WORD
 wBorders as WORD
end type

type PARAFORMAT2 as _paraformat2
const PFM_STARTINDENT = &h00000001
const PFM_RIGHTINDENT = &h00000002
const PFM_OFFSET = &h00000004
const PFM_ALIGNMENT = &h00000008
const PFM_TABSTOPS = &h00000010
const PFM_NUMBERING = &h00000020
const PFM_OFFSETINDENT = &h80000000
const PFM_SPACEBEFORE = &h00000040
const PFM_SPACEAFTER = &h00000080
const PFM_LINESPACING = &h00000100
const PFM_STYLE = &h00000400
const PFM_BORDER = &h00000800
const PFM_SHADING = &h00001000
const PFM_NUMBERINGSTYLE = &h00002000
const PFM_NUMBERINGTAB = &h00004000
const PFM_NUMBERINGSTART = &h00008000
const PFM_RTLPARA = &h00010000
const PFM_KEEP = &h00020000
const PFM_KEEPNEXT = &h00040000
const PFM_PAGEBREAKBEFORE = &h00080000
const PFM_NOLINENUMBER = &h00100000
const PFM_NOWIDOWCONTROL = &h00200000
const PFM_DONOTHYPHEN = &h00400000
const PFM_SIDEBYSIDE = &h00800000
const PFM_COLLAPSED = &h01000000
const PFM_OUTLINELEVEL = &h02000000
const PFM_BOX = &h04000000
const PFM_RESERVED2 = &h08000000
const PFM_TABLEROWDELIMITER = &h10000000
const PFM_TEXTWRAPPINGBREAK = &h20000000
const PFM_TABLE = &h40000000
const PFM_ALL = ((((((PFM_STARTINDENT or PFM_RIGHTINDENT) or PFM_OFFSET) or PFM_ALIGNMENT) or PFM_TABSTOPS) or PFM_NUMBERING) or PFM_OFFSETINDENT) or PFM_RTLPARA
const PFM_EFFECTS = (((((((((PFM_RTLPARA or PFM_KEEP) or PFM_KEEPNEXT) or PFM_TABLE) or PFM_PAGEBREAKBEFORE) or PFM_NOLINENUMBER) or PFM_NOWIDOWCONTROL) or PFM_DONOTHYPHEN) or PFM_SIDEBYSIDE) or PFM_TABLE) or PFM_TABLEROWDELIMITER
const PFM_ALL2 = (((((((((PFM_ALL or PFM_EFFECTS) or PFM_SPACEBEFORE) or PFM_SPACEAFTER) or PFM_LINESPACING) or PFM_STYLE) or PFM_SHADING) or PFM_BORDER) or PFM_NUMBERINGTAB) or PFM_NUMBERINGSTART) or PFM_NUMBERINGSTYLE
const PFE_RTLPARA = PFM_RTLPARA shr 16
const PFE_KEEP = PFM_KEEP shr 16
const PFE_KEEPNEXT = PFM_KEEPNEXT shr 16
const PFE_PAGEBREAKBEFORE = PFM_PAGEBREAKBEFORE shr 16
const PFE_NOLINENUMBER = PFM_NOLINENUMBER shr 16
const PFE_NOWIDOWCONTROL = PFM_NOWIDOWCONTROL shr 16
const PFE_DONOTHYPHEN = PFM_DONOTHYPHEN shr 16
const PFE_SIDEBYSIDE = PFM_SIDEBYSIDE shr 16
const PFE_TEXTWRAPPINGBREAK = PFM_TEXTWRAPPINGBREAK shr 16
const PFE_COLLAPSED = PFM_COLLAPSED shr 16
const PFE_BOX = PFM_BOX shr 16
const PFE_TABLE = PFM_TABLE shr 16
const PFE_TABLEROWDELIMITER = PFM_TABLEROWDELIMITER shr 16
const PFN_BULLET = 1
const PFN_ARABIC = 2
const PFN_LCLETTER = 3
const PFN_UCLETTER = 4
const PFN_LCROMAN = 5
const PFN_UCROMAN = 6
const PFNS_PAREN = &h0000
const PFNS_PARENS = &h100
const PFNS_PERIOD = &h200
const PFNS_PLAIN = &h300
const PFNS_NONUMBER = &h400
const PFNS_NEWNUMBER = &h8000
const PFA_LEFT = 1
const PFA_RIGHT = 2
const PFA_CENTER = 3
const PFA_JUSTIFY = 4
const PFA_FULL_INTERWORD = 4

type _msgfilter field = 4
 nmhdr as NMHDR
 msg as UINT
 wParam as WPARAM
 lParam as LPARAM
end type

type MSGFILTER as _msgfilter

type _reqresize field = 4
 nmhdr as NMHDR
 rc as RECT
end type

type REQRESIZE as _reqresize

type _selchange field = 4
 nmhdr as NMHDR
 chrg as CHARRANGE
 seltyp as WORD
end type

type SELCHANGE as _selchange

type _grouptypingchange field = 4
 nmhdr as NMHDR
 fGroupTyping as WINBOOL
end type

type GROUPTYPINGCHANGE as _grouptypingchange

type _clipboardformat field = 4
 nmhdr as NMHDR
 cf as CLIPFORMAT
end type

type CLIPBOARDFORMAT as _clipboardformat
const SEL_EMPTY = &h00000
const SEL_TEXT = &h0001
const SEL_OBJECT = &h0002
const SEL_MULTICHAR = &h0004
const SEL_MULTIOBJECT = &h0008
const GCM_RIGHTMOUSEDROP = &h8000

type _getcontextmenuex field = 4
 chrg as CHARRANGE
 dwFlags as DWORD
 pt as POINT
 pvReserved as any ptr
end type

type GETCONTEXTMENUEX as _getcontextmenuex
const GCMF_GRIPPER = &h00000001
const GCMF_SPELLING = &h00000002
const GCMF_TOUCHMENU = &h00004000
const GCMF_MOUSEMENU = &h00002000

type _endropfiles field = 4
 nmhdr as NMHDR
 hDrop as HANDLE
 cp as LONG
 fProtected as WINBOOL
end type

type ENDROPFILES as _endropfiles

type _enprotected field = 4
 nmhdr as NMHDR
 msg as UINT
 wParam as WPARAM
 lParam as LPARAM
 chrg as CHARRANGE
end type

type ENPROTECTED as _enprotected

type _ensaveclipboard field = 4
 nmhdr as NMHDR
 cObjectCount as LONG
 cch as LONG
end type

type ENSAVECLIPBOARD as _ensaveclipboard

type _enoleopfailed field = 4
 nmhdr as NMHDR
 iob as LONG
 lOper as LONG
 hr as HRESULT
end type

type ENOLEOPFAILED as _enoleopfailed
const OLEOP_DOVERB = 1

type _objectpositions field = 4
 nmhdr as NMHDR
 cObjectCount as LONG
 pcpPositions as LONG ptr
end type

type OBJECTPOSITIONS as _objectpositions

type _enlink field = 4
 nmhdr as NMHDR
 msg as UINT
 wParam as WPARAM
 lParam as LPARAM
 chrg as CHARRANGE
end type

type ENLINK as _enlink

type _enlowfirtf field = 4
 nmhdr as NMHDR
 szControl as zstring ptr
end type

type ENLOWFIRTF as _enlowfirtf

type _encorrecttext field = 4
 nmhdr as NMHDR
 chrg as CHARRANGE
 seltyp as WORD
end type

type ENCORRECTTEXT as _encorrecttext

type _punctuation field = 4
 iSize as UINT
 szPunctuation as LPSTR
end type

type PUNCTUATION as _punctuation

type _compcolor field = 4
 crText as COLORREF
 crBackground as COLORREF
 dwEffects as DWORD
end type

type COMPCOLOR as _compcolor

type _repastespecial field = 4
 dwAspect as DWORD
 dwParam as DWORD_PTR
end type

type REPASTESPECIAL as _repastespecial

type _undonameid as long
enum
 UID_UNKNOWN = 0
 UID_TYPING = 1
 UID_DELETE = 2
 UID_DRAGDROP = 3
 UID_CUT = 4
 UID_PASTE = 5
 UID_AUTOTABLE = 6
end enum

type UNDONAMEID as _undonameid
const ST_DEFAULT = 0
const ST_KEEPUNDO = 1
const ST_SELECTION = 2
const ST_NEWCHARS = 4
const ST_UNICODE = 8

type _settextex field = 4
 flags as DWORD
 codepage as UINT
end type

type SETTEXTEX as _settextex
const GT_DEFAULT = 0
const GT_USECRLF = 1
const GT_SELECTION = 2
const GT_RAWTEXT = 4
const GT_NOHIDDENTEXT = 8

type _gettextex field = 4
 cb as DWORD
 flags as DWORD
 codepage as UINT
 lpDefaultChar as LPCSTR
 lpUsedDefChar as LPBOOL
end type

type GETTEXTEX as _gettextex
const GTL_DEFAULT = 0
const GTL_USECRLF = 1
const GTL_PRECISE = 2
const GTL_CLOSE = 4
const GTL_NUMCHARS = 8
const GTL_NUMBYTES = 16

type _gettextlengthex field = 4
 flags as DWORD
 codepage as UINT
end type

type GETTEXTLENGTHEX as _gettextlengthex

type _bidioptions field = 4
 cbSize as UINT
 wMask as WORD
 wEffects as WORD
end type

type BIDIOPTIONS as _bidioptions
const BOM_NEUTRALOVERRIDE = &h0004
const BOM_CONTEXTREADING = &h0008
const BOM_CONTEXTALIGNMENT = &h0010
const BOM_LEGACYBIDICLASS = &h0040
const BOM_UNICODEBIDI = &h0080
const BOE_NEUTRALOVERRIDE = &h0004
const BOE_CONTEXTREADING = &h0008
const BOE_CONTEXTALIGNMENT = &h0010
const BOE_FORCERECALC = &h0020
const BOE_LEGACYBIDICLASS = &h0040
const BOE_UNICODEBIDI = &h0080
const FR_MATCHDIAC = &h20000000
const FR_MATCHKASHIDA = &h40000000
const FR_MATCHALEFHAMZA = &h80000000
const WCH_EMBEDDING = cast(WCHAR, &hfffc)

type tagKHYPH as long
enum
 khyphNil
 khyphNormal
 khyphAddBefore
 khyphChangeBefore
 khyphDeleteBefore
 khyphChangeAfter
 khyphDelAndChange
end enum

type KHYPH as tagKHYPH

type HYPHRESULT field = 4
 khyph as KHYPH
 ichHyph as long
 chHyph as WCHAR
end type

declare sub HyphenateProc(byval pszWord as wstring ptr, byval langid as LANGID, byval ichExceed as long, byval phyphresult as HYPHRESULT ptr)

type tagHyphenateInfo field = 4
 cbSize as SHORT
 dxHyphenateZone as SHORT
 pfnHyphenate as sub(byval as wstring ptr, byval as LANGID, byval as long, byval as HYPHRESULT ptr)
end type

type HYPHENATEINFO as tagHyphenateInfo
const PFA_FULL_NEWSPAPER = 5
const PFA_FULL_INTERLETTER = 6
const PFA_FULL_SCALED = 7
const PFA_FULL_GLYPHS = 8
const AURL_ENABLEEA = 1
const GCM_TOUCHMENU = &h4000
const GCM_MOUSEMENU = &h2000

end extern


#inclib "uxtheme"


extern "Windows"

type HTHEME as HANDLE



declare function OpenThemeData(byval hwnd as HWND, byval pszClassList as LPCWSTR) as HTHEME


declare function CloseThemeData(byval hTheme as HTHEME) as HRESULT
declare function DrawThemeBackground(byval hTheme as HTHEME, byval hdc as HDC, byval iPartId as long, byval iStateId as long, byval pRect as const RECT ptr, byval pClipRect as const RECT ptr) as HRESULT
const DTT_GRAYED = &h1
declare function DrawThemeText(byval hTheme as HTHEME, byval hdc as HDC, byval iPartId as long, byval iStateId as long, byval pszText as LPCWSTR, byval iCharCount as long, byval dwTextFlags as DWORD, byval dwTextFlags2 as DWORD, byval pRect as const RECT ptr) as HRESULT


declare function GetThemeBackgroundContentRect(byval hTheme as HTHEME, byval hdc as HDC, byval iPartId as long, byval iStateId as long, byval pBoundingRect as const RECT ptr, byval pContentRect as RECT ptr) as HRESULT
declare function GetThemeBackgroundExtent(byval hTheme as HTHEME, byval hdc as HDC, byval iPartId as long, byval iStateId as long, byval pContentRect as const RECT ptr, byval pExtentRect as RECT ptr) as HRESULT

type THEMESIZE as long
enum
 TS_MIN
 TS_TRUE
 TS_DRAW
end enum

declare function GetThemePartSize(byval hTheme as HTHEME, byval hdc as HDC, byval iPartId as long, byval iStateId as long, byval prc as RECT ptr, byval eSize as THEMESIZE, byval psz as SIZE ptr) as HRESULT
declare function GetThemeTextExtent(byval hTheme as HTHEME, byval hdc as HDC, byval iPartId as long, byval iStateId as long, byval pszText as LPCWSTR, byval iCharCount as long, byval dwTextFlags as DWORD, byval pBoundingRect as const RECT ptr, byval pExtentRect as RECT ptr) as HRESULT
declare function GetThemeTextMetrics(byval hTheme as HTHEME, byval hdc as HDC, byval iPartId as long, byval iStateId as long, byval ptm as TEXTMETRIC ptr) as HRESULT
declare function GetThemeBackgroundRegion(byval hTheme as HTHEME, byval hdc as HDC, byval iPartId as long, byval iStateId as long, byval pRect as const RECT ptr, byval pRegion as HRGN ptr) as HRESULT

const HTTB_BACKGROUNDSEG = &h00000
const HTTB_FIXEDBORDER = &h0002
const HTTB_CAPTION = &h0004
const HTTB_RESIZINGBORDER_LEFT = &h0010
const HTTB_RESIZINGBORDER_TOP = &h0020
const HTTB_RESIZINGBORDER_RIGHT = &h0040
const HTTB_RESIZINGBORDER_BOTTOM = &h0080
const HTTB_RESIZINGBORDER = ((HTTB_RESIZINGBORDER_LEFT or HTTB_RESIZINGBORDER_TOP) or HTTB_RESIZINGBORDER_RIGHT) or HTTB_RESIZINGBORDER_BOTTOM
const HTTB_SIZINGTEMPLATE = &h0100
const HTTB_SYSTEMSIZINGMARGINS = &h0200

declare function HitTestThemeBackground(byval hTheme as HTHEME, byval hdc as HDC, byval iPartId as long, byval iStateId as long, byval dwOptions as DWORD, byval pRect as const RECT ptr, byval hrgn as HRGN, byval ptTest as POINT, byval pwHitTestCode as WORD ptr) as HRESULT
declare function DrawThemeEdge(byval hTheme as HTHEME, byval hdc as HDC, byval iPartId as long, byval iStateId as long, byval pDestRect as const RECT ptr, byval uEdge as UINT, byval uFlags as UINT, byval pContentRect as RECT ptr) as HRESULT
declare function DrawThemeIcon(byval hTheme as HTHEME, byval hdc as HDC, byval iPartId as long, byval iStateId as long, byval pRect as const RECT ptr, byval himl as HIMAGELIST, byval iImageIndex as long) as HRESULT
declare function IsThemePartDefined(byval hTheme as HTHEME, byval iPartId as long, byval iStateId as long) as WINBOOL
declare function IsThemeBackgroundPartiallyTransparent(byval hTheme as HTHEME, byval iPartId as long, byval iStateId as long) as WINBOOL
declare function GetThemeColor(byval hTheme as HTHEME, byval iPartId as long, byval iStateId as long, byval iPropId as long, byval pColor as COLORREF ptr) as HRESULT
declare function GetThemeMetric(byval hTheme as HTHEME, byval hdc as HDC, byval iPartId as long, byval iStateId as long, byval iPropId as long, byval piVal as long ptr) as HRESULT
declare function GetThemeString(byval hTheme as HTHEME, byval iPartId as long, byval iStateId as long, byval iPropId as long, byval pszBuff as LPWSTR, byval cchMaxBuffChars as long) as HRESULT
declare function GetThemeBool(byval hTheme as HTHEME, byval iPartId as long, byval iStateId as long, byval iPropId as long, byval pfVal as WINBOOL ptr) as HRESULT
declare function GetThemeInt(byval hTheme as HTHEME, byval iPartId as long, byval iStateId as long, byval iPropId as long, byval piVal as long ptr) as HRESULT
declare function GetThemeEnumValue(byval hTheme as HTHEME, byval iPartId as long, byval iStateId as long, byval iPropId as long, byval piVal as long ptr) as HRESULT
declare function GetThemePosition(byval hTheme as HTHEME, byval iPartId as long, byval iStateId as long, byval iPropId as long, byval pPoint as POINT ptr) as HRESULT
declare function GetThemeFont(byval hTheme as HTHEME, byval hdc as HDC, byval iPartId as long, byval iStateId as long, byval iPropId as long, byval pFont as LOGFONT ptr) as HRESULT
declare function GetThemeRect(byval hTheme as HTHEME, byval iPartId as long, byval iStateId as long, byval iPropId as long, byval pRect as RECT ptr) as HRESULT

type _MARGINS
 cxLeftWidth as long
 cxRightWidth as long
 cyTopHeight as long
 cyBottomHeight as long
end type

type MARGINS as _MARGINS
type PMARGINS as _MARGINS ptr
declare function GetThemeMargins(byval hTheme as HTHEME, byval hdc as HDC, byval iPartId as long, byval iStateId as long, byval iPropId as long, byval prc as RECT ptr, byval pMargins as MARGINS ptr) as HRESULT

 const MAX_INTLIST_COUNT = 10

type _INTLIST
 iValueCount as long

 iValues(0 to 9) as long
end type

type INTLIST as _INTLIST
type PINTLIST as _INTLIST ptr
declare function GetThemeIntList(byval hTheme as HTHEME, byval iPartId as long, byval iStateId as long, byval iPropId as long, byval pIntList as INTLIST ptr) as HRESULT

type PROPERTYORIGIN as long
enum
 PO_STATE
 PO_PART
 PO_CLASS
 PO_GLOBAL
 PO_NOTFOUND
end enum

declare function GetThemePropertyOrigin(byval hTheme as HTHEME, byval iPartId as long, byval iStateId as long, byval iPropId as long, byval pOrigin as PROPERTYORIGIN ptr) as HRESULT
declare function SetWindowTheme(byval hwnd as HWND, byval pszSubAppName as LPCWSTR, byval pszSubIdList as LPCWSTR) as HRESULT
declare function GetThemeFilename(byval hTheme as HTHEME, byval iPartId as long, byval iStateId as long, byval iPropId as long, byval pszThemeFileName as LPWSTR, byval cchMaxBuffChars as long) as HRESULT
declare function GetThemeSysColor(byval hTheme as HTHEME, byval iColorId as long) as COLORREF
declare function GetThemeSysColorBrush(byval hTheme as HTHEME, byval iColorId as long) as HBRUSH
declare function GetThemeSysBool(byval hTheme as HTHEME, byval iBoolId as long) as WINBOOL
declare function GetThemeSysSize(byval hTheme as HTHEME, byval iSizeId as long) as long
declare function GetThemeSysFont(byval hTheme as HTHEME, byval iFontId as long, byval plf as LOGFONT ptr) as HRESULT
declare function GetThemeSysString(byval hTheme as HTHEME, byval iStringId as long, byval pszStringBuff as LPWSTR, byval cchMaxStringChars as long) as HRESULT
declare function GetThemeSysInt(byval hTheme as HTHEME, byval iIntId as long, byval piValue as long ptr) as HRESULT
declare function IsThemeActive() as WINBOOL
declare function IsAppThemed() as WINBOOL
declare function GetWindowTheme(byval hwnd as HWND) as HTHEME

const ETDT_DISABLE = &h00000001
const ETDT_ENABLE = &h00000002
const ETDT_USETABTEXTURE = &h00000004
const ETDT_ENABLETAB = ETDT_ENABLE or ETDT_USETABTEXTURE


declare function EnableThemeDialogTexture(byval hwnd as HWND, byval dwFlags as DWORD) as HRESULT
declare function IsThemeDialogTextureEnabled(byval hwnd as HWND) as WINBOOL
const STAP_ALLOW_NONCLIENT = 1 shl 0
const STAP_ALLOW_CONTROLS = 1 shl 1
const STAP_ALLOW_WEBCONTENT = 1 shl 2

declare function GetThemeAppProperties() as DWORD
declare sub SetThemeAppProperties(byval dwFlags as DWORD)
declare function GetCurrentThemeName(byval pszThemeFileName as LPWSTR, byval cchMaxNameChars as long, byval pszColorBuff as LPWSTR, byval cchMaxColorChars as long, byval pszSizeBuff as LPWSTR, byval cchMaxSizeChars as long) as HRESULT

declare function GetThemeDocumentationProperty(byval pszThemeName as LPCWSTR, byval pszPropertyName as LPCWSTR, byval pszValueBuff as LPWSTR, byval cchMaxValChars as long) as HRESULT
declare function DrawThemeParentBackground(byval hwnd as HWND, byval hdc as HDC, byval prc as RECT ptr) as HRESULT


declare function EnableTheming(byval fEnable as WINBOOL) as HRESULT
const DTBG_CLIPRECT = &h00000001
const DTBG_DRAWSOLID = &h00000002
const DTBG_OMITBORDER = &h00000004
const DTBG_OMITCONTENT = &h00000008
const DTBG_COMPUTINGREGION = &h00000010
const DTBG_MIRRORDC = &h00000020
const DTBG_NOMIRROR = &h00000040
const DTBG_VALIDBITS = (((((DTBG_CLIPRECT or DTBG_DRAWSOLID) or DTBG_OMITBORDER) or DTBG_OMITCONTENT) or DTBG_COMPUTINGREGION) or DTBG_MIRRORDC) or DTBG_NOMIRROR

type _DTBGOPTS
 dwSize as DWORD
 dwFlags as DWORD
 rcClip as RECT
end type

type DTBGOPTS as _DTBGOPTS
type PDTBGOPTS as _DTBGOPTS ptr
declare function DrawThemeBackgroundEx(byval hTheme as HTHEME, byval hdc as HDC, byval iPartId as long, byval iStateId as long, byval pRect as const RECT ptr, byval pOptions as const DTBGOPTS ptr) as HRESULT

end extern

#inclib "msvcrt"



extern "c"

declare function strcat (byval as zstring ptr, byval as const zstring ptr) as zstring ptr
declare function strchr (byval as const zstring ptr, byval as long) as zstring ptr
declare function strcmp (byval as const zstring ptr, byval as const zstring ptr) as long
declare function strcoll (byval as const zstring ptr, byval as const zstring ptr) as long
declare function strcpy (byval as zstring ptr, byval as const zstring ptr) as zstring ptr
declare function strcspn (byval as const zstring ptr, byval as const zstring ptr) as size_t
declare function strerror (byval as long) as zstring ptr
declare function strlen (byval as const zstring ptr) as size_t
declare function strncat (byval as zstring ptr, byval as const zstring ptr, byval as size_t) as zstring ptr
declare function strncmp (byval as const zstring ptr, byval as const zstring ptr, byval as size_t) as long
declare function strncpy (byval as zstring ptr, byval as const zstring ptr, byval as size_t) as zstring ptr
declare function strpbrk (byval as const zstring ptr, byval as const zstring ptr) as zstring ptr
declare function strrchr (byval as const zstring ptr, byval as long) as zstring ptr
declare function strspn (byval as const zstring ptr, byval as const zstring ptr) as size_t
declare function strstr (byval as const zstring ptr, byval as const zstring ptr) as zstring ptr
declare function strtok (byval as zstring ptr, byval as const zstring ptr) as zstring ptr
declare function strxfrm (byval as zstring ptr, byval as const zstring ptr, byval as size_t) as size_t
declare function wcscat (byval as wchar_t ptr, byval as const wchar_t ptr) as wchar_t ptr
declare function wcschr (byval as const wchar_t ptr, byval as wchar_t) as wchar_t ptr
declare function wcscmp (byval as const wchar_t ptr, byval as const wchar_t ptr) as long
declare function wcscoll (byval as const wchar_t ptr, byval as const wchar_t ptr) as long
declare function wcscpy (byval as wchar_t ptr, byval as const wchar_t ptr) as wchar_t ptr
declare function wcscspn (byval as const wchar_t ptr, byval as const wchar_t ptr) as size_t
declare function wcslen (byval as const wchar_t ptr) as size_t
declare function wcsncat (byval as wchar_t ptr, byval as const wchar_t ptr, byval as size_t) as wchar_t ptr
declare function wcsncmp (byval as const wchar_t ptr, byval as const wchar_t ptr, byval as size_t) as long
declare function wcsncpy (byval as wchar_t ptr, byval as const wchar_t ptr, byval as size_t) as wchar_t ptr
declare function wcspbrk (byval as const wchar_t ptr, byval as const wchar_t ptr) as wchar_t ptr
declare function wcsrchr (byval as const wchar_t ptr, byval as wchar_t) as wchar_t ptr
declare function wcsspn (byval as const wchar_t ptr, byval as const wchar_t ptr) as size_t
declare function wcsstr (byval as const wchar_t ptr, byval as const wchar_t ptr) as wchar_t ptr
declare function wcstok (byval as wchar_t ptr, byval as const wchar_t ptr) as wchar_t ptr
declare function wcsxfrm (byval as wchar_t ptr, byval as const wchar_t ptr, byval as size_t) as size_t

declare function _strerror (byval as const zstring ptr) as zstring ptr
declare function _memccpy (byval as any ptr, byval as const any ptr, byval as long, byval as size_t) as any ptr
declare function _memicmp (byval as const any ptr, byval as const any ptr, byval as size_t) as long
declare function _strdup (byval as const zstring ptr) as zstring ptr
declare function _strcmpi (byval as const zstring ptr, byval as const zstring ptr) as long
declare function _stricmp (byval as const zstring ptr, byval as const zstring ptr) as long
declare function _stricoll (byval as const zstring ptr, byval as const zstring ptr) as long
declare function _strlwr (byval as zstring ptr) as zstring ptr
declare function _strnicmp (byval as const zstring ptr, byval as const zstring ptr, byval as size_t) as long
declare function _strnset (byval as zstring ptr, byval as long, byval as size_t) as zstring ptr
declare function _strrev (byval as zstring ptr) as zstring ptr
declare function _strset (byval as zstring ptr, byval as long) as zstring ptr
declare function _strupr (byval as zstring ptr) as zstring ptr
declare sub _swab (byval as zstring ptr, byval as zstring ptr, byval as size_t)
declare function _strncoll (byval as const zstring ptr, byval as const zstring ptr, byval as size_t) as long
declare function _strnicoll (byval as const zstring ptr, byval as const zstring ptr, byval as size_t) as long
declare function _wcsdup (byval as const wchar_t ptr) as wchar_t ptr
declare function _wcsicmp (byval as const wchar_t ptr, byval as const wchar_t ptr) as long
declare function _wcsicoll (byval as const wchar_t ptr, byval as const wchar_t ptr) as long
declare function _wcslwr (byval as wchar_t ptr) as wchar_t ptr
declare function _wcsnicmp (byval as const wchar_t ptr, byval as const wchar_t ptr, byval as size_t) as long
declare function _wcsnset (byval as wchar_t ptr, byval as wchar_t, byval as size_t) as wchar_t ptr
declare function _wcsrev (byval as wchar_t ptr) as wchar_t ptr
declare function _wcsset (byval as wchar_t ptr, byval as wchar_t) as wchar_t ptr
declare function _wcsupr (byval as wchar_t ptr) as wchar_t ptr
declare function _wcsncoll (byval as const wchar_t ptr, byval as const wchar_t ptr, byval as size_t) as long
declare function _wcsnicoll (byval as const wchar_t ptr, byval as const wchar_t ptr, byval as size_t) as long

end extern





extern "c"
declare function sin_ alias "sin" (byval as double) as double
declare function cos_ alias "cos" (byval as double) as double
declare function tan_ alias "tan" (byval as double) as double
declare function asin_ alias "asin" (byval as double) as double
declare function acos_ alias "acos" (byval as double) as double
declare function atan_ alias "atan" (byval as double) as double
declare function atan2_ alias "atan2" (byval as double, byval as double) as double
declare function exp_ alias "exp" (byval as double) as double
declare function log_ alias "log" (byval as double) as double
declare function sinh (byval as double) as double
declare function cosh (byval as double) as double
declare function tanh (byval as double) as double
declare function log10 (byval as double) as double
declare function pow (byval as double, byval as double) as double
declare function sqrt (byval as double) as double
declare function ceil (byval as double) as double
declare function floor (byval as double) as double
declare function fabs (byval as double) as double
declare function ldexp (byval as double, byval as long) as double
declare function frexp (byval as double, byval as long ptr) as double
declare function modf (byval as double, byval as double ptr) as double
declare function fmod (byval as double, byval as double) as double
declare function sinf (byval as single) as single
declare function sinl (byval as double) as double
declare function cosf (byval as single) as single
declare function cosl (byval as double) as double
declare function tanf (byval as single) as single
declare function tanl (byval as double) as double
declare function asinf (byval as single) as single
declare function asinl (byval as double) as double
declare function acosf (byval as single) as single
declare function acosl (byval as double) as double
declare function atanf (byval as single) as single
declare function atanl (byval as double) as double
declare function atan2f (byval as single, byval as single) as single
declare function atan2l (byval as double, byval as double) as double
declare function sinhf (byval x as single) as single
declare function sinhl (byval as double) as double
declare function coshf (byval x as single) as single
declare function coshl (byval as double) as double
declare function tanhf (byval x as single) as single
declare function tanhl (byval as double) as double
declare function expf (byval x as single) as single
declare function expl (byval as double) as double
declare function exp2 (byval as double) as double
declare function exp2f (byval as single) as single
declare function exp2l (byval as double) as double
declare function frexpf (byval as single, byval as long ptr) as single
declare function frexpl (byval as double, byval as long ptr) as double
declare function ilogb (byval as double) as long
declare function ilogbf (byval as single) as long
declare function ilogbl (byval as double) as long
declare function ldexpf (byval as single, byval as long) as single
declare function ldexpl (byval as double, byval as long) as double
declare function logf (byval as single) as single
declare function logl (byval as double) as double
declare function log10f (byval as single) as single
declare function log10l (byval as double) as double
declare function log1p (byval as double) as double
declare function log1pf (byval as single) as single
declare function log1pl (byval as double) as double
declare function log2 (byval as double) as double
declare function log2f (byval as single) as single
declare function log2l (byval as double) as double
declare function logb (byval x as double) as double
declare function logbf (byval x as single) as single
declare function logbl (byval x as double) as double
declare function modff (byval as single, byval as single ptr) as single
declare function modfl (byval as double, byval as double ptr) as double
declare function scalbn (byval as double, byval as long) as double
declare function scalbnf (byval as single, byval as long) as single
declare function scalbnl (byval as double, byval as long) as double
declare function scalbln (byval as double, byval as clong) as double
declare function scalblnf (byval as single, byval as clong) as single
declare function scalblnl (byval as double, byval as clong) as double
declare function cbrt (byval as double) as double
declare function cbrtf (byval as single) as single
declare function cbrtl (byval as double) as double
declare function fabsf (byval x as single) as single
declare function fabsl (byval x as double) as double
declare function hypot (byval as double, byval as double) as double
declare function hypotf (byval x as single, byval y as single) as single
declare function hypotl (byval as double, byval as double) as double
declare function powf (byval x as single, byval y as single) as single
declare function powl (byval as double, byval as double) as double
declare function sqrtf (byval as single) as single
declare function sqrtl (byval as double) as double
declare function erf (byval as double) as double
declare function erff (byval as single) as single
declare function erfc (byval as double) as double
declare function erfcf (byval as single) as single
declare function lgamma (byval as double) as double
declare function lgammaf (byval as single) as single
declare function lgammal (byval as double) as double
declare function tgamma (byval as double) as double
declare function tgammaf (byval as single) as single
declare function tgammal (byval as double) as double
declare function ceilf (byval as single) as single
declare function ceill (byval as double) as double
declare function floorf (byval as single) as single
declare function floorl (byval as double) as double
declare function nearbyint (byval as double) as double
declare function nearbyintf (byval as single) as single
declare function nearbyintl (byval as double) as double
declare function rint (byval x as double) as double
declare function rintf (byval x as single) as single
declare function rintl (byval x as double) as double
declare function lrint (byval x as double) as clong
declare function lrintf (byval x as single) as clong
declare function lrintl (byval x as double) as clong
declare function llrint (byval x as double) as longint
declare function llrintf (byval x as single) as longint
declare function llrintl (byval x as double) as longint
declare function round (byval as double) as double
declare function roundf (byval as single) as single
declare function roundl (byval as double) as double
declare function lround (byval as double) as clong
declare function lroundf (byval as single) as clong
declare function lroundl (byval as double) as clong
declare function llround (byval as double) as longint
declare function llroundf (byval as single) as longint
declare function llroundl (byval as double) as longint
declare function trunc (byval as double) as double
declare function truncf (byval as single) as single
declare function truncl (byval as double) as double
declare function fmodf (byval as single, byval as single) as single
declare function fmodl (byval as double, byval as double) as double
declare function remainder (byval as double, byval as double) as double
declare function remainderf (byval as single, byval as single) as single
declare function remainderl (byval as double, byval as double) as double
declare function remquo (byval as double, byval as double, byval as long ptr) as double
declare function remquof (byval as single, byval as single, byval as long ptr) as single
declare function remquol (byval as double, byval as double, byval as long ptr) as double
declare function copysign (byval as double, byval as double) as double
declare function copysignf (byval as single, byval as single) as single
declare function copysignl (byval as double, byval as double) as double
declare function nan (byval tagp as zstring ptr) as double
declare function nanf (byval tagp as zstring ptr) as single
declare function nanl (byval tagp as zstring ptr) as double
declare function nextafter (byval as double, byval as double) as double
declare function nextafterf (byval as single, byval as single) as single
declare function fdim (byval x as double, byval y as double) as double
declare function fdimf (byval x as single, byval y as single) as single
declare function fdiml (byval x as double, byval y as double) as double
declare function fmax (byval as double, byval as double) as double
declare function fmaxf (byval as single, byval as single) as single
declare function fmaxl (byval as double, byval as double) as double
declare function fmin (byval as double, byval as double) as double
declare function fminf (byval as single, byval as single) as single
declare function fminl (byval as double, byval as double) as double
declare function fma (byval as double, byval as double, byval as double) as double
declare function fmaf (byval as single, byval as single, byval as single) as single
declare function fmal (byval as double, byval as double, byval as double) as double
end extern

extern import _HUGE alias "_HUGE" as double ptr

type _exception
 type as long
 name as zstring ptr
 arg1 as double
 arg2 as double
 retval as double
end type

type _complex
 x as double
 y as double
end type

extern "c"
declare function _cabs (byval as _complex) as double
declare function _hypot (byval as double, byval as double) as double
declare function _j0 (byval as double) as double
declare function _j1 (byval as double) as double
declare function _jn (byval as long, byval as double) as double
declare function _y0 (byval as double) as double
declare function _y1 (byval as double) as double
declare function _yn (byval as long, byval as double) as double
declare function _matherr (byval as _exception ptr) as long
declare function _chgsign (byval as double) as double
declare function _copysign (byval as double, byval as double) as double
declare function _logb (byval as double) as double
declare function _nextafter (byval as double, byval as double) as double
declare function _scalb (byval as double, byval as clong) as double
declare function _finite (byval as double) as long
declare function _fpclass (byval as double) as long
declare function _isnan (byval as double) as long
declare function __fpclassifyf (byval as single) as long
declare function __fpclassify (byval as double) as long
declare function __fpclassifyl (byval x as double) as long
declare function __isnan (byval _x as double) as long
declare function __isnanf (byval _x as single) as long
declare function __isnanl (byval _x as double) as long
declare function __signbit (byval x as double) as long
declare function __signbitf (byval x as single) as long
declare function __signbitl (byval x as double) as long
end extern





type time_t as integer
type _off_t as long
type _dev_t as ulong
type _ino_t as ushort
type _pid_t as integer
type _mode_t as ushort
type _sigset_t as integer
type _ssize_t as integer
type off32_t as long
type off64_t as longint

 type off_t as long





type clock_t as clong

type tm
 tm_sec as long
 tm_min as long
 tm_hour as long
 tm_mday as long
 tm_mon as long
 tm_year as long
 tm_wday as long
 tm_yday as long
 tm_isdst as long
end type

extern "c"

declare sub _tzset ()
declare function _strdate (byval as zstring ptr) as zstring ptr
declare function _strtime (byval as zstring ptr) as zstring ptr
declare function __p__daylight () as long ptr
declare function __p__timezone () as long ptr
declare function __p__tzname () as byte ptr ptr

extern import _daylight as long
extern import _timezone as long
extern import _tzname as zstring * 2

end extern


extern "c"
declare function clock () as clock_t
declare function time_ alias "time" (byval as time_t ptr = NULL) as time_t
declare function difftime (byval as time_t, byval as time_t) as double
declare function mktime (byval as tm ptr) as time_t
declare function asctime (byval as tm ptr) as zstring ptr
declare function ctime (byval as time_t ptr) as zstring ptr
declare function gmtime (byval as time_t ptr) as tm ptr
declare function localtime (byval as time_t ptr) as tm ptr
declare function strftime (byval as zstring ptr, byval as size_t, byval as zstring ptr, byval as tm ptr) as size_t
declare function wcsftime (byval as wchar_t ptr, byval as size_t, byval as wchar_t ptr, byval as tm ptr) as size_t
end extern








type _iobuf
 _ptr as zstring ptr
 _cnt as long
 _base as zstring ptr
 _flag as long
 _file as long
 _charbuf as long
 _bufsiz as long
 _tmpfname as zstring ptr
end type

type FILE as _iobuf

extern "c"

 extern import _iob(0 to 2) alias "_iob" as FILE

type fpos_t as longint

declare function snprintf (byval as zstring ptr, byval as size_t, byval as const zstring ptr, ...) as long
declare function vsnprintf (byval as zstring ptr, byval as size_t, byval as const zstring ptr, byval as va_list) as long
declare function popen (byval as const zstring ptr, byval as const zstring ptr) as FILE ptr
declare function pclose (byval as FILE ptr) as long
declare function _flushall () as long
declare function _fgetchar () as long
declare function _fputchar (byval as long) as long
declare function _fdopen (byval as long, byval as const zstring ptr) as FILE ptr
declare function _fileno (byval as FILE ptr) as long
declare function _fcloseall () as long
declare function _getmaxstdio () as long
declare function _setmaxstdio (byval as long) as long
declare function _snwprintf (byval as wchar_t ptr, byval as size_t, byval as const wchar_t ptr, ...) as long
declare function _vsnwprintf (byval as wchar_t ptr, byval as size_t, byval as const wchar_t ptr, byval as va_list) as long
declare function _getws (byval as wchar_t ptr) as wchar_t ptr
declare function _putws (byval as const wchar_t ptr) as long
declare function _wfdopen (byval as long, byval as const wchar_t ptr) as FILE ptr
declare function _wfopen (byval as const wchar_t ptr, byval as const wchar_t ptr) as FILE ptr
declare function _wfreopen (byval as const wchar_t ptr, byval as const wchar_t ptr, byval as FILE ptr) as FILE ptr
declare function _wfsopen (byval as const wchar_t ptr, byval as const wchar_t ptr, byval as long) as FILE ptr
declare function _wtmpnam (byval as wchar_t ptr) as wchar_t ptr
declare function _wtempnam (byval as wchar_t ptr, byval as wchar_t ptr) as wchar_t ptr
declare function _wrename (byval as const wchar_t ptr, byval as const wchar_t ptr) as long
declare function _wremove (byval as const wchar_t ptr) as long
declare sub _wperror (byval as const wchar_t ptr)
declare function _wpopen (byval as const wchar_t ptr, byval as const wchar_t ptr) as FILE ptr
declare function _fgetwchar () as wint_t
declare function _fputwchar (byval as wint_t) as wint_t
declare function _tempnam (byval as zstring ptr, byval as zstring ptr) as zstring ptr
end extern


extern "c"
declare function rename (byval as const zstring ptr, byval as const zstring ptr) as long
declare function fopen (byval as const zstring ptr, byval as const zstring ptr) as FILE ptr
declare function freopen (byval as const zstring ptr, byval as const zstring ptr, byval as FILE ptr) as FILE ptr
declare function fflush (byval as FILE ptr) as long
declare function fclose (byval as FILE ptr) as long
declare function remove (byval as const zstring ptr) as long
declare function tmpfile () as FILE ptr
declare function tmpnam (byval as zstring ptr) as zstring ptr
declare function tempnam (byval as zstring ptr, byval as zstring ptr) as zstring ptr
declare function setvbuf (byval as FILE ptr, byval as zstring ptr, byval as long, byval as size_t) as long
declare sub setbuf (byval as FILE ptr, byval as zstring ptr)
declare function fprintf (byval as FILE ptr, byval as const zstring ptr, ...) as long
declare function printf (byval as const zstring ptr, ...) as long
declare function sprintf (byval as zstring ptr, byval as const zstring ptr, ...) as long
declare function vfprintf (byval as FILE ptr, byval as const zstring ptr, byval as va_list) as long
declare function vprintf (byval as const zstring ptr, byval as va_list) as long
declare function vsprintf (byval as zstring ptr, byval as const zstring ptr, byval as va_list) as long
declare function vscanf (byval as const zstring ptr, byval as va_list) as long
declare function vfscanf (byval as FILE ptr, byval as const zstring ptr, byval as va_list) as long
declare function vsscanf (byval as const zstring ptr, byval as const zstring ptr, byval as va_list) as long
declare function fscanf (byval as FILE ptr, byval as const zstring ptr, ...) as long
declare function scanf (byval as const zstring ptr, ...) as long
declare function sscanf (byval as const zstring ptr, byval as const zstring ptr, ...) as long
declare function fgetc (byval as FILE ptr) as long
declare function fgets (byval as zstring ptr, byval as long, byval as FILE ptr) as zstring ptr
declare function fputc (byval as long, byval as FILE ptr) as long
declare function fputs (byval as const zstring ptr, byval as FILE ptr) as long
declare function getc (byval as FILE ptr) as long
declare function getchar () as long
declare function gets (byval as zstring ptr) as zstring ptr
declare function putc (byval as long, byval as FILE ptr) as long
declare function putchar (byval as long) as long
declare function puts (byval as const zstring ptr) as long
declare function ungetc (byval as long, byval as FILE ptr) as long
declare function fread (byval as any ptr, byval as size_t, byval as size_t, byval as FILE ptr) as size_t
declare function fwrite (byval as const any ptr, byval as size_t, byval as size_t, byval as FILE ptr) as size_t
declare function fseek (byval as FILE ptr, byval as clong, byval as long) as long
declare function ftell (byval as FILE ptr) as clong
declare sub rewind (byval as FILE ptr)
declare function fgetpos (byval as FILE ptr, byval as fpos_t ptr) as long
declare function fsetpos (byval as FILE ptr, byval as fpos_t ptr) as long
declare sub clearerr (byval as FILE ptr)
declare function feof (byval as FILE ptr) as long
declare function ferror (byval as FILE ptr) as long
declare sub perror (byval as const zstring ptr)
declare function fwprintf (byval as FILE ptr, byval as const wchar_t ptr, ...) as long
declare function wprintf (byval as const wchar_t ptr, ...) as long
declare function swprintf (byval as wchar_t ptr, byval as const wchar_t ptr, ...) as long
declare function vfwprintf (byval as FILE ptr, byval as const wchar_t ptr, byval as va_list) as long
declare function vwprintf (byval as const wchar_t ptr, byval as va_list) as long
declare function vswprintf (byval as wchar_t ptr, byval as const wchar_t ptr, byval as va_list) as long
declare function fwscanf (byval as FILE ptr, byval as const wchar_t ptr, ...) as long
declare function wscanf (byval as const wchar_t ptr, ...) as long
declare function swscanf (byval as const wchar_t ptr, byval as const wchar_t ptr, ...) as long
declare function fgetwc (byval as FILE ptr) as wint_t
declare function fputwc (byval as wchar_t, byval as FILE ptr) as wint_t
declare function ungetwc (byval as wchar_t, byval as FILE ptr) as wint_t
declare function fgetws (byval as wchar_t ptr, byval as long, byval as FILE ptr) as wchar_t ptr
declare function fputws (byval as const wchar_t ptr, byval as FILE ptr) as long
declare function getwc (byval as FILE ptr) as wint_t
declare function getwchar () as wint_t
declare function putwc (byval as wint_t, byval as FILE ptr) as wint_t
declare function putwchar (byval as wint_t) as wint_t
declare function snwprintf (byval s as wchar_t ptr, byval n as size_t, byval format as const wchar_t ptr, ...) as long
declare function vsnwprintf (byval s as wchar_t ptr, byval n as size_t, byval format as const wchar_t ptr, byval arg as va_list) as long
declare function vwscanf (byval as const wchar_t ptr, byval as va_list) as long
declare function vfwscanf (byval as FILE ptr, byval as const wchar_t ptr, byval as va_list) as long
declare function vswscanf (byval as const wchar_t ptr, byval as const wchar_t ptr, byval as va_list) as long
declare function wpopen (byval as const wchar_t ptr, byval as const wchar_t ptr) as FILE ptr
end extern




type int8_t as byte
type int16_t as short
type int32_t as long
type int64_t as longint

type uint8_t as ubyte
type uint16_t as ushort
type uint32_t as ulong
type uint64_t as ulongint

type int_least8_t as int8_t
type int_least16_t as int16_t
type int_least32_t as int32_t
type int_least64_t as int64_t

type uint_least8_t as uint8_t
type uint_least16_t as uint16_t
type uint_least32_t as uint32_t
type uint_least64_t as uint64_t

type int_fast8_t as int8_t
type int_fast16_t as int16_t
type int_fast32_t as int32_t
type int_fast64_t as int64_t

type uint_fast8_t as uint8_t
type uint_fast16_t as uint16_t
type uint_fast32_t as uint32_t
type uint_fast64_t as uint64_t

type intptr_t as integer
type uintptr_t as uinteger

type intmax_t as int64_t
type uintmax_t as uint64_t






















type mbstate_t as long
type _Wint_t as wchar_t

type _fsize_t as culong

type _wfinddata_t
 attrib as ulong
 time_create as time_t
 time_access as time_t
 time_write as time_t
 size as _fsize_t
 name(0 to (260)-1) as wchar_t
end type

type _wfinddatai64_t
 attrib as ulong
 time_create as time_t
 time_access as time_t
 time_write as time_t
 size as longint
 name(0 to (260)-1) as wchar_t
end type

type _stat
 st_dev as _dev_t
 st_ino as _ino_t
 st_mode as _mode_t
 st_nlink as short
 st_uid as short
 st_gid as short
 st_rdev as _dev_t
 st_size as _off_t
 st_atime as time_t
 st_mtime as time_t
 st_ctime as time_t
end type

type stat as _stat

type _stati64
 st_dev as _dev_t
 st_ino as _ino_t
 st_mode as ushort
 st_nlink as short
 st_uid as short
 st_gid as short
 st_rdev as _dev_t
 st_size as longint
 st_atime as time_t
 st_mtime as time_t
 st_ctime as time_t
end type

extern "c"
declare function _waccess (byval as wchar_t ptr, byval as long) as long
declare function _wchmod (byval as wchar_t ptr, byval as long) as long
declare function _wcreat (byval as wchar_t ptr, byval as long) as long
declare function _wfindfirst (byval as wchar_t ptr, byval as _wfinddata_t ptr) as intptr_t
declare function _wfindnext (byval as intptr_t, byval as _wfinddata_t ptr) as long
declare function _wunlink (byval as wchar_t ptr) as long
declare function _wopen (byval as wchar_t ptr, byval as long, ...) as long
declare function _wsopen (byval as wchar_t ptr, byval as long, byval as long, ...) as long
declare function _wmktemp (byval as wchar_t ptr) as wchar_t ptr
declare function _wfindfirsti64 (byval as wchar_t ptr, byval as _wfinddatai64_t ptr) as intptr_t
declare function _wfindnexti64 (byval as intptr_t, byval as _wfinddatai64_t ptr) as long
declare function _wgetcwd (byval as wchar_t ptr, byval as long) as wchar_t ptr
declare function _wgetdcwd (byval as long, byval as wchar_t ptr, byval as long) as wchar_t ptr
declare function _wchdir (byval as wchar_t ptr) as long
declare function _wmkdir (byval as wchar_t ptr) as long
declare function _wrmdir (byval as wchar_t ptr) as long
declare function _wstat (byval as wchar_t ptr, byval as _stat ptr) as long
declare function _wstati64 (byval as wchar_t ptr, byval as _stati64 ptr) as long
declare function _wasctime (byval as tm ptr) as wchar_t ptr
declare function _wctime (byval as time_t ptr) as wchar_t ptr
declare function _wstrdate (byval as wchar_t ptr) as wchar_t ptr
declare function _wstrtime (byval as wchar_t ptr) as wchar_t ptr
declare function _wsetlocale (byval as long, byval as wchar_t ptr) as wchar_t ptr
end extern


extern "c"
declare function btowc (byval as long) as wint_t
declare function mbrlen (byval as const zstring ptr, byval as size_t, byval as mbstate_t ptr) as size_t
declare function mbrtowc (byval as const wchar_t ptr, byval as zstring ptr, byval as size_t, byval as mbstate_t ptr) as size_t
declare function mbsrtowcs (byval as wchar_t ptr, byval as const zstring ptr ptr, byval as size_t, byval as mbstate_t ptr) as size_t
declare function wcrtomb (byval as zstring ptr, byval as wchar_t, byval as mbstate_t ptr) as size_t
declare function wcsrtombs (byval as const zstring ptr, byval as wchar_t ptr ptr, byval as size_t, byval as mbstate_t ptr) as size_t
declare function wctob (byval as wint_t) as integer
declare function fwide (byval stream as FILE ptr, byval mode as long) as long
declare function mbsinit (byval ps as const mbstate_t ptr) as long
declare function wmemset (byval s as wchar_t ptr, byval c as wchar_t, byval n as size_t) as wchar_t ptr
declare function wmemchr (byval s as const wchar_t ptr, byval c as wchar_t, byval n as size_t) as wchar_t ptr
declare function wmemcmp (byval s1 as const wchar_t ptr, byval s2 as const wchar_t ptr, byval n as size_t) as integer
declare function wmemmove (byval s1 as wchar_t ptr, byval s2 as const wchar_t ptr, byval n as size_t) as wchar_t ptr
declare function wmemcpy(byval as wchar_t ptr, byval as const wchar_t ptr, byval as uinteger) as wstring ptr
end extern








type _finddata_t
 attrib as uinteger
 time_create as time_t
 time_access as time_t
 time_write as time_t
 size as _fsize_t
 name as zstring * (260)
end type

type _finddatai64_t
 attrib as uinteger
 time_create as time_t
 time_access as time_t
 time_write as time_t
 size as longint
 name as zstring * (260)
end type


extern "c"
declare function _findfirst (byval as zstring ptr, byval as _finddata_t ptr) as intptr_t
declare function _findnext (byval as intptr_t, byval as _finddata_t ptr) as long
declare function _findclose (byval as intptr_t) as long
declare function _chdir (byval as zstring ptr) as long
declare function _getcwd (byval as zstring ptr, byval as long) as zstring ptr
declare function _mkdir (byval as zstring ptr) as long
declare function _mktemp (byval as zstring ptr) as zstring ptr
declare function _rmdir (byval as zstring ptr) as long
declare function _chmod (byval as zstring ptr, byval as long) as long
declare function _filelengthi64 (byval as long) as longint
declare function _findfirsti64 (byval as zstring ptr, byval as _finddatai64_t ptr) as intptr_t
declare function _findnexti64 (byval as intptr_t, byval as _finddatai64_t ptr) as long
declare function _lseeki64 (byval as long, byval as longint, byval as long) as longint
declare function _telli64 (byval as long) as longint
declare function _access (byval as zstring ptr, byval as long) as long
declare function _chsize (byval as long, byval as clong) as long
declare function _close (byval as long) as long
declare function _commit (byval as long) as long
declare function _creat (byval as zstring ptr, byval as long) as long
declare function _dup (byval as long) as long
declare function _dup2 (byval as long, byval as long) as long
declare function _filelength (byval as long) as clong
declare function _get_osfhandle (byval as long) as intptr_t
declare function _isatty (byval as long) as long
declare function _eof (byval as long) as long
declare function _locking (byval as long, byval as long, byval as clong) as long
declare function _lseek (byval as long, byval as clong, byval as long) as clong
declare function _open (byval as zstring ptr, byval as long, ...) as long
declare function _open_osfhandle (byval as intptr_t, byval as long) as long
declare function _pipe (byval as long ptr, byval as ulong, byval as long) as long
declare function _read (byval as long, byval as any ptr, byval as ulong) as long
declare function _setmode (byval as long, byval as long) as long
declare function _sopen (byval as zstring ptr, byval as long, byval as long, ...) as long
declare function _tell (byval as long) as clong
declare function _umask (byval as long) as long
declare function _unlink (byval as zstring ptr) as long
declare function _write (byval as long, byval as any ptr, byval as ulong) as long
end extern











declare sub ThreadDetach alias "fb_ThreadDetach"( byval thread as any ptr )
declare function ThreadSelf alias "fb_ThreadSelf"( ) as any ptr

#undef File_Open




enum StatusParts
 spStatus
 spCursor
end enum
enum WindowControls
 wcMain
 wcButton
 wcLines
 wcEdit
 wcOutput
 wcStatus
 wcLast
end enum
enum WindowFonts
 wfDefault
 wfEdit
 wfStatus
 wfLast
end enum
enum Accelerators
 acFirst = 9100-1
 acToggleMenu
 acFilterDump
end enum







enum LayoutType
 ltPosX
 ltPosY
 ltWid
 ltHei
end enum
type ControlUnit
 wRelID:14 as ushort
 bIsPct:1 as ushort
 bIsEnd:1 as ushort
 wOffset as short
end type

type FontStruct
 as HFONT hFont
 as string sName
 as ubyte bCurWid , bCurHei
 as ubyte bSize
 as byte bBOld :1
 as byte bItalic:1
end type

type FormStruct_Fwd as FormStruct
type ControlStruct_Fwd as ControlStruct

type ControlAfterSizeCallback as sub ( pForm as FormStruct_Fwd , pCtl as ControlStruct_Fwd )
type ControlEventCallback as function ( pForm as FormStruct_Fwd , pCtl as ControlStruct_Fwd , pMsg as MSG ) as LRESULT

type ControlStruct
 as HWND hwnd
 cbAfterSize as ControlAfterSizeCallback
 cbEvent as ControlEventCallback
 pData as any ptr
 as ControlUnit tX,tY,tW,tH,tH2
 as short iX,iY,iW,iH,iH2
 as byte bFont
end type

type FormStruct
 as long iCliWid,iCliHei
 as long iCtlCnt,iFntCnt
 as ControlStruct ptr pCtl
 as FontStruct ptr pFnt
end type



const _SWP_Flags = SWP_NOZORDER or SWP_NOACTIVATE or SWP_NOCOPYBITS
sub ControlUpdateLayout( byref tForm as FormStruct , iCtl as long , bResize as WINBOOL )
 const cFromEdges = (1 shl 14)-1
 const cFromCenter = -32768
 with tForm.pCtl[iCtl]

 var wOffset = .tX.wOffset : .iX = 0
 if .tX.wRelID=cFromEdges then
 .iX = iif(.tX.bIsEnd , tForm.iCliWid , 0 )
 elseif .tX.wRelID then
 var pRel = tForm.pCtl+.tX.wRelID
 if wOffset = cFromCenter then
 wOffset = 0 : .iX = pRel->iX+((pRel->iW-.iW)\2)
 else
 .iX = pRel->iX + iif(.tX.bIsEnd , pRel->iW , 0 )
 end if
 end if
 .iX += iif( .tX.bIsPct , (wOffset*tForm.iCliWid)\(128*100) , wOffset )

 .iY = 0
 if .tY.wRelID=cFromEdges then
 .iY = iif(.tY.bIsEnd , tForm.iCliHei , 0 )
 elseif .tY.wRelID then
 var pRel = tForm.pCtl+.tY.wRelID
 .iY = pRel->iY + iif(.tY.bIsEnd , pRel->iH , 0 )
 end if
 .iY += iif( .tY.bIsPct , (.tY.wOffset*tForm.iCliHei)\(128*100) , .tY.wOffset )

 .iW = 0
 if .tW.wRelID=cFromEdges then
 .iW = iif(.tW.bIsEnd , tForm.iCliWid , 0 )-.iX
 elseif .tW.wRelID then
 var pRel = tForm.pCtl+.tW.wRelID
 .iW = (pRel->iX + iif(.tW.bIsEnd , pRel->iW , 0 ))-.iX
 end if
 .iW += iif( .tW.bIsPct , (.tW.wOffset*tForm.iCliWid)\(128*100) , .tW.wOffset )
 if .iW < 0 then .iW = -.iW : .iX -= .iW

 .iH = 0
 if .tH.wRelID=cFromEdges then
 .iH = iif(.tH.bIsEnd , tForm.iCliHei , 0 )-.iY
 elseif .tH.wRelID then
 var pRel = tForm.pCtl+.tH.wRelID
 .iH = (pRel->iY + iif(.tH.bIsEnd , pRel->iH , 0 ))-.iY
 end if
 .iH += iif( .tH.bIsPct , (.tH.wOffset*tForm.iCliHei)\(128*100) , .tH.wOffset )

 .iH2 = 0
 if .tH2.wRelID=cFromEdges then
 .iH2 = iif(.tH2.bIsEnd , tForm.iCliHei , 0 )-.iY
 elseif .tH2.wRelID then
 var pRel = tForm.pCtl+.tH2.wRelID
 .iH2 = (pRel->iY + iif(.tH2.bIsEnd , pRel->iH , 0 ))-.iY
 end if
 .iH2 += iif( .tH2.bIsPct , (.tH2.wOffset*tForm.iCliHei)\(128*100) , .tH2.wOffset )

 if bResize then SetWindowPos(.hwnd,0,.iX,.iY,.iW,iif(.iH2,.iH2,.iH),_SWP_Flags)

 end with
end sub
sub ResizeLayout( hWnd as HWND , tForm as FormStruct , iWidth as long , iHeight as long )


 with tForm
 .iCliWid = iWidth : .iCliHei = iHeight
 var iSzH = (.iCliWid*9)\16
 if .iCliHei < iSzH then iSzH = .iCliHei
 if iSzH < 1 then iSzH = 1

 var hDC = GetDC(hWnd)
 var iLogY = GetDeviceCaps(hDC, LOGPIXELSY) , iDPI = (360*72)\iSzH

 dim as HFONT hOldFont(.iFntCnt-1)
 for N as integer = 0 to .iFntCnt-1
 with .pFnt[N]
 hOldFont(N) = .hFont
 var nHeight = -MulDiv(.bSize, iLogY, iDPI)
 var cWeight = iif(.bBold, FW_BOLD , FW_NORMAL )
 const cQuality = DRAFT_QUALITY or ANTIALIASED_QUALITY
 .hFont = CreateFont(nHeight,0,0,0,cWeight,.bItalic,0,0,DEFAULT_CHARSET,0,0,cQuality,0,.sName)
 dim as size tSz = any
 SelectObject( hDC , .hFont )
 GetTextExtentPoint32( hDC , "_W^" , 3 , @tSz )
 .bCurWid = (tSz.cx\3) : .bCurHei = tSz.cy
 end with
 next N

 for N as integer = 0 to .iCtlCnt-1
 var hCurFont = .pFnt[cint(.pCtl[N].bFont)].hFont , hCtl = .pCtl[N].hwnd
 if hCtl = 0 then continue for
 if hCtl then SendMessage( hCtl , WM_SETFONT,cast(wparam, hCurFont),false )
 next N
 ReleaseDC( hWnd , hDC )
 for N as integer = 0 to .iFntCnt-1
 if hOldFont(N) then DeleteObject(hOldFont(N)):hOldFont(N)=0
 next N
 end with


 var hResize = BeginDeferWindowPos(tForm.iCtlCnt)
 for R as long = 0 to 1
 var hCtl = GetWindow(hWnd,GW_CHILD)
 do
 var N = GetDlgCtrlID( hCtl )
 with tForm.pCtl[N]
 if .hwnd then
 ControlUpdateLayout( tForm , N, R )
 end if
 if R then DeferWindowPos(hResize,.hwnd,0,.iX,.iY,.iW,iif(.iH2,.iH2,.iH),_SWP_Flags)
 end with
 hCtl = GetWindow( hCtl , GW_HWNDNEXT )
 loop while hCtl
 next R
 EndDeferWindowPos( hResize )



end sub
#undef _SWP_Flags
sub LayoutFreeResources( tForm as FormStruct )
 with tForm
 for N as integer = 0 to .iFntCnt-1
 with .pFnt[N]
 if .hFont then DeleteObject(.hFont):.hFont=NULL
 end with
 next N
 end with
end sub
sub _SetFont( byref hFnt as FontStruct , sName as string , iSize as ubyte , bBold as byte = 0 , bItalic as byte = 0 )
 with hFnt
 .sName = sName : .bSize = iSize : .bBold = bBold : .bItalic = bItalic
 end with
end sub


sub _SetControlsFont cdecl ( pCtl as ControlStruct ptr , bFont as byte , ... )
 var p = va_first()
 do
 var iID = peek(long,p)
 if iID < 0 then exit do
 pCtl[iID].bFont = bFont
 p = (cptr(long ptr, cptr(byte ptr, p) + (sizeof(long) + sizeof(any ptr)-1 and -sizeof(any ptr)) ) )
 loop
end sub
sub _SetControlsEventCallback cdecl ( pCtl as ControlStruct ptr , pCb as ControlEventCallback , ... )
 var p = va_first()
 do
 var iID = peek(long,p)
 if iID < 0 then exit do
 pCtl[iID].cbEvent = pCb
 p = (cptr(long ptr, cptr(byte ptr, p) + (sizeof(long) + sizeof(any ptr)-1 and -sizeof(any ptr)) ) )
 loop
end sub

sub _SetControlsAfterSize cdecl ( pCtl as ControlStruct ptr , pCb as ControlAfterSizeCallback , ... )
 var p = va_first()
 do
 var iID = peek(long,p)
 if iID < 0 then exit do
 pCtl[iID].cbAfterSize = pCb
 p = (cptr(long ptr, cptr(byte ptr, p) + (sizeof(long) + sizeof(any ptr)-1 and -sizeof(any ptr)) ) )
 loop
end sub

sub _ShowHideControlRange( pCtl as ControlStruct ptr , iShow as long , iBegin as long , iEnd as long )
 const cShowFlags = SWP_NOSIZE or SWP_NOMOVE or SWP_NOZORDER or SWP_NOACTIVATE
 var hDefer = BeginDeferWindowPos( (iEnd-iBegin)+1 )
 for N as integer = iBegin to iEnd
 if iShow then
 DeferWindowPos( hDefer , pCtl[N].hWnd , 0,0,0,0,0, cShowFlags or SWP_SHOWWINDOW )
 else
 DeferWindowPos( hDefer , pCtl[N].hWnd , 0,0,0,0,0, cShowFlags or SWP_HIDEWINDOW )
 end if
 next N
 EndDeferWindowPos( hDefer )
end sub

sub _InvalidateControlArea( pCtl0 as any ptr , iCtl as long )
 var pCtl = cast(ControlStruct ptr,pCtl0)
 if pCtl[iCtl].hWnd andalso pCtl[0].hWnd then
 dim as RECT tRc = any : GetClientRect( pCtl[iCtl].hWnd , @tRC )
 MapWindowPoints( pCtl[iCtl].hWnd , pCtl[0].hWnd , cast(POINT ptr,@tRc) , 2 )
 InvalidateRect( pCtl[0].hWnd , @tRc , true )
 end if
end sub

function DefFormProc( tForm as FormStruct , hwnd as HWND , message as UINT , wParam as WPARAM , lParam as LPARAM ) as LRESULT
 select case as const message
 case WM_CTLCOLORBTN,WM_CTLCOLORDLG,WM_CTLCOLOREDIT,WM_CTLCOLORLISTBOX,WM_CTLCOLORMSGBOX,WM_CTLCOLORSCROLLBAR,WM_CTLCOLORSTATIC
 var iID = GetDlgCtrlID(cast(HWND,lParam))
 if cuint(iID) < tForm.iCtlCnt then
 with tForm.pCtl[iID]
 if .cbEvent then
 var dwResu = .cbEvent( tForm , tForm.pCtl[iID] , type<MSG>(hwnd,message,wParam,lParam) )
 if dwResu then return dwResu
 end if
 end with
 end if
 case WM_NOTIFY
 var iID = cptr(NMHDR ptr,lParam)->idFrom
 if cuint(iID) < tForm.iCtlCnt then
 with tForm.pCtl[iID]
 if .cbEvent then return .cbEvent( tForm , tForm.pCtl[iID] , type<MSG>(hwnd,message,wParam,lParam) )
 end with
 end if
 case WM_COMMAND
 var iID = cint( (cuint(wParam) and &h0000FFFF))
 if cuint(iID) < tForm.iCtlCnt then
 with tForm.pCtl[iID]
 if .cbEvent then return .cbEvent( tForm , tForm.pCtl[iID] , type<MSG>(hwnd,message,wParam,lParam) )
 end with
 end if
 case WM_SIZE
 if lParam = 0 then
 dim as RECT tRc = any : GetClientRect( hWnd , @tRc )
 lParam = cast(LPARAM, cast(DWORD, cast(LONG, cast(WORD, cast(DWORD_PTR, (tRc.right)) and &hffff) or (cast(DWORD, cast(WORD, cast(DWORD_PTR, (tRc.bottom)) and &hffff)) shl 16))))
 end if
 ResizeLayout( hWnd ,tForm , (cuint(lParam) and &h0000FFFF) , (cuint(lParam) shr 16) )
 case WM_ERASEBKGND,WM_NCPAINT
 end select
 return DefWindowProc( hWnd, message, wParam, lParam )
end function

type FormContext
 as FormStruct tForm
 as ControlStruct hCTL(wcLast)
 as FontStruct hFnt(wfLast)
end type

const g_sMainFont = "verdana" , g_sFixedFont = "consolas"

dim shared as FormContext g_tMainCtx
dim shared as hinstance g_AppInstance
dim shared as string sAppName
dim shared as HMENU g_WndMenu
dim shared as long g_WndWid=640 , g_WndHei=480
dim shared g_hCurMenu as any ptr , g_CurItemID as long , g_CurItemState as long

dim shared as HANDLE g_hResizeEvent
dim shared as hwnd g_GfxHwnd
dim shared as byte g_DoQuit , g_Show3D
dim shared as string g_CurrentFilePath





const vbFalse = 0
const vbTrue = not vbFalse





declare function DateSerial alias "fb_DateSerial" ( byval year as long, byval month as long, byval day as long ) as long

declare function DateValue alias "fb_DateValue" ( byref s as const string ) as long

declare function IsDate alias "fb_IsDate" ( byref s as const string ) as long

declare function Year alias "fb_Year" ( byval serial as double ) as long

declare function Month alias "fb_Month" ( byval serial as double ) as long

declare function Day alias "fb_Day" ( byval serial as double ) as long

declare function Weekday alias "fb_Weekday" ( byval serial as double, byval FirstDayOfWeek as long = 0 ) as long

declare function TimeSerial alias "fb_TimeSerial" ( byval hour as long, byval minute as long, byval second as long ) as double

declare function TimeValue alias "fb_TimeValue" ( byref s as const string ) as double

declare function Hour alias "fb_Hour" ( byval serial as double ) as long

declare function Minute alias "fb_Minute" ( byval serial as double ) as long

declare function Second alias "fb_Second" ( byval serial as double ) as long

declare function Now alias "fb_Now" ( ) as double

declare function DateAdd alias "fb_DateAdd" ( byref interval as const string, byval number as double, byval serial as double ) as double

declare function DatePart alias "fb_DatePart" ( byref interval as const string, byval serial as double, byval FirstDayOfWeek as long = 0, byval FirstDayOfYear as long = 0 ) as long

declare function DateDiff alias "fb_DateDiff" ( byref interval as const string, byval serial1 as double, byval serial2 as double, byval FirstDayOfWeek as long = 0, byval FirstDayOfYear as long = 0 ) as longint

declare function MonthName alias "fb_MonthName" ( byval month as long, byval abbreviate as long = 0 ) as string

declare function WeekdayName alias "fb_WeekdayName" ( byval weekday as long, byval abbreviate as long = 0, byval FirstDayOfWeek as long = 0 ) as string


const vbUseSystem = 0

const vbFirstJan1 = 1
const vbFirstFourDays = 2
const vbFirstFullWeek = 3

const vbSunday = 1
const vbMonday = 2
const vbTuesday = 3
const vbWednesday = 4
const vbThursday = 5
const vbFriday = 6
const vbSaturday = 7


declare function format alias "fb_StrFormat" ( byval value as double, byref mask as const string="" ) as string





const vbReadOnly = &h01
const vbHidden = &h02
const vbSystem = &h04
const vbDirectory = &h10
const vbArchive = &h20
const vbNormal = ( &h01 or &h20)

const vbBack = chr( 8 )
const vbCr = chr( 13 )
const vbCrLf = chr( 13, 10 )
const vbLf = chr( 10 )
const vbNewLine = vbCrLf
const vbNullString = ""
const vbFormFeed = chr( 12 )
const vbTab = chr( 9 )
const vbVerticalTab = chr( 11 )


const fbFileAttrMode = 1
const fbFileAttrHandle = 2
const fbFileAttrEncoding = 3

const fbFileModeInput = 1
const fbFileModeOutput = 2
const fbFileModeRandom = 4
const fbFileModeAppend = 8
const fbFileModeBinary = 32

const fbFileEncodASCII = 0
const fbFileEncodUTF8 = 1
const fbFileEncodUTF16 = 2
const fbFileEncodUTF32 = 3


declare function FileCopy alias "fb_FileCopy" ( byval source as zstring ptr, byval destination as zstring ptr ) as long
declare function FileAttr alias "fb_FileAttr" ( byval filenumber as long, byval returntype as long = 1 ) as integer
declare function FileLen alias "fb_FileLen" ( byval filename as zstring ptr ) as longint
declare function FileExists alias "fb_FileExists" ( byval filename as zstring ptr ) as long
declare function FileDateTime alias "fb_FileDateTime" ( byval filename as zstring ptr ) as double


declare function FileFlush alias "fb_FileFlush" ( byval filenumber as long = -1, byval systembuffer as long = 0 ) as long
declare function FileSetEof alias "fb_FileSetEof" ( byval filenumber as long ) as long





const cScale = 1





type LineType1Struct
 as single fX,fY,fZ,fA,fB,fC,fD,fE,fF,fG,fH,fI
 as ulong lModelIndex
end type
type LineType2Struct
 as single fX1,fY1,fZ1,fX2,fY2,fZ2
end type
type LineType3Struct
 as single fX1,fY1,fZ1,fX2,fY2,fZ2,fX3,fY3,fZ3
end type
type LineType4Struct
 as single fX1,fY1,fZ1,fX2,fY2,fZ2,fX3,fY3,fZ3,fX4,fY4,fZ4
end type
type LineType5Struct
 as single fX1,fY1,fZ1,fX2,fY2,fZ2,fX3,fY3,fZ3,fX4,fY4,fZ4
end type


const cShadowMaxSecs = 8

enum PartCathegory
 pcNone
 pcPlate
 pcBrick
 pcBaseplate
 pcSlab
 pcOther
end enum

enum SubpartType
 spUnknown
 spStud
 spClutch
 spAxle
 spAxlehole
 spPin
 spPinhole
 spBar
 spBarhole
 spAlias
end enum
enum ShadowScale
 ss_None
 ss_YOnly
 ss_ROnly
 ss_YandR
end enum
enum ShadowCaps
 sc_None
 sc_One
 sc_Two
 sc_A
 sc_B
end enum
type ShadowGrid
 as byte Xcnt,Zcnt
 as ubyte Xstep,Zstep
end type
enum ShadowSecShape
 sss_Invalid
 sss_Round
 sss_Axle
 sss_Square
 sss_FlexPrev
 sss_FlexNext
end enum
type ShadowSec
 bshape as byte
 bLength as byte
 wFixRadius as short
end type
enum ShadowInfoType
 sit_Invalid
 sit_Include
 sit_Cylinder
end enum
type ShadowStruct
 bType:3 as ubyte
 bSecCnt:3 as ubyte
 bRecurse:2 as ubyte
 union
 bFlags as ubyte
 type
 bFlagMirror :1 as ubyte
 bFlagMale :1 as ubyte
 bFlagCenter :1 as ubyte
 bFlagSlide :1 as ubyte
 bFlagHasGrid :1 as ubyte
 bFlagOriMat :1 as ubyte
 end type
 end union
 bScale as ubyte
 bCaps as ubyte
 fPosX as single
 fPosY as single
 fPosZ as single
 fOri(9-1) as single
 tGrid as ShadowGrid
 tSecs(cShadowMaxSecs-1) as ShadowSec
end type

type PartStruct
 bType as ubyte
 union
 bFlags as ubyte
 end union
 union
 wColour as ushort
 wData as ushort
 end union
 union
 _1 as LineType1Struct
 _2 as LineType2Struct
 _3 as LineType3Struct
 _4 as LineType4Struct
 _5 as LineType5Struct
 end union
end type

const fUnused = -1234567

type PartSize
 as single xMin = fUnused , xMax = fUnused
 as single yMin = fUnused , yMax = fUnused
 as single zMin = fUnused , zMax = fUnused
end type

type DATFile
 iModelIndex as long
 iPartCount as long
 tSize as PartSize
 iShadowCount as long
 paShadow as ShadowStruct ptr
 pData as any ptr
 as PartStruct tParts( (1 shl 25)-1 )
end type
type ModelList
 iFilenameOffset as long
 pModel as DATFile ptr
end type

type fbStr
 pzData as ubyte ptr
 iLen as long
 iSize as long
end type


dim shared as zstring ptr g_pzPaths(...) = { NULL , @"\parts" , @"\unoff\parts" , @"\p\48" , @"\p" , @"\p\8" , @"\unoff\p\8" , @"\unoff\p" , @"\unoff\p\48" }

dim shared as string g_sPathList( ubound(g_pzPaths) )
scope
 var sPath = environ("userprofile")+"\Desktop\LDCAD\LDRAW"
 for N as long = 1 to ubound(g_pzPaths)
 g_sPathList(N) = sPath + *g_pzPaths(N)
 next N
end scope
#undef g_pzPaths

dim shared as zstring ptr g_pzShadowPaths(...) = { NULL , @"\parts" , @"\p" , @"\parts\s" }

dim shared as string g_sShadowPathList( ubound(g_pzShadowPaths) )
scope
 var sPath = environ("userprofile")+"\Desktop\LDCAD\shadow\offlib\shadow"
 for N as long = 1 to ubound(g_pzShadowPaths)
 g_sShadowPathList(N) = sPath + *g_pzShadowPaths(N)
 next N
end scope

#undef g_pzShadowPaths

dim shared as string g_sFilenames,g_sFilesToLoad
dim shared as long g_ModelCount
redim shared as ModelList g_tModels(0)

g_sFilenames = chr(0)
g_sFilesToLoad = chr(0)



function ReadHex( pFile as ubyte ptr , byref iInt as long ) as long
 dim as long iResu = 0, iRead, iHasDigits=0
 do
 select case pFile[iRead]
 case asc("0") to asc("9")
 iResu=iResu*16+(pFile[iRead]-asc("0"))
 iHasDigits = 1
 case asc("a") to asc("f")
 iResu=iResu*16+(pFile[iRead]-asc("a")+10)
 iHasDigits = 1
 case asc("A") to asc("F")
 iResu=iResu*16+(pFile[iRead]-asc("A")+10)
 iHasDigits = 1
 case asc(" "),9
 if iHasDigits then exit do
 case asc(!"\r")
 case asc(!"\n"),0
 iHasDigits = 1 : exit do
 case else
 exit do
 end select
 iRead += 1
 loop
 if iHasDigits=0 then iInt=pFile[iRead] : return -1
 iInt = iResu
 return iRead
end function
function ReadInt( pFile as ubyte ptr , byref iInt as long ) as long
 dim as long iResu = 0, iRead, iHasDigits=0, iSign=1
 do
 select case pFile[iRead]
 case asc("0") to asc("9")
 iResu=iResu*10+(pFile[iRead]-asc("0"))
 iHasDigits = 1
 case asc(" "),9
 if iHasDigits then exit do
 case asc(!"\r")
 case asc(!"\n"),0
 iHasDigits = 1 : exit do
 case asc("-")
 if iSign=1 andalso iHasDigits=0 then iSign=-1 else exit do
 case asc("x"),asc("X")
 if iHasDigits andalso iResu=0 andalso iSign=1 then
 iResu = ReadHex( pFile+iRead+1 , iInt )
 if iResu <> 7 orelse (iInt shr 24)<>2 then return -1
 return iResu+iRead+1
 end if
 exit do
 case else
 exit do
 end select
 iRead += 1
 loop
 if iHasDigits=0 then iInt=pFile[iRead] : return -1
 iInt = iResu*iSign
 return iRead
end function
function ReadFloat( pFile as ubyte ptr , byref fFloat as single ) as long
 dim as long iResu=0,iDecimal=0,iDecMask=1,iRead, iHasDigits=0,iHasDot,iSign=1
 do
 select case pFile[iRead]
 case asc("0") to asc("9")
 if iHasDot=0 then
 iResu=iResu*10+(pFile[iRead]-asc("0"))
 else
 iDecimal=iDecimal*10+(pFile[iRead]-asc("0"))
 iDecMask *= 10
 end if
 iHasDigits = 1
 case asc(" "),9
 if iHasDigits then exit do
 case asc(!"\r")
 case asc(!"\n"),0
 iHasDigits = 1 : exit do
 case asc(".")
 if iHasDot then exit do
 iHasDot=1 : iHasDigits=1
 case asc("-")
 if iSign=1 andalso iHasDigits=0 then iSign=-1 else exit do
 case asc("E"),asc("e")
 iRead += 1
 dim as long iExpoent = any, iExtra = any
 iExtra = ReadInt( pFile+iRead , iExpoent )
 if iExtra < 0 then return -1
 var fTemp = iResu*iSign+iDecimal/iDecMask
 if iExpoent < 0 then
 while iExpoent <= -5 : fTemp = fTemp/100000 : iExpoent += 5 : wend
 for N as long = 1 to -iExpoent : fTemp = fTemp/10 : next N
 else
 while iExpoent >= 5 : fTemp = fTemp*100000 : iExpoent -= 5 : wend
 for N as long = 1 to iExpoent : fTemp = fTemp*10 : next N
 end if
 fFloat = fTemp
 return iRead+iExtra
 case else
 exit do
 end select
 iRead += 1
 loop
 if iHasDigits=0 then fFloat=pFile[iRead] : return -1
 fFloat = (iResu+iDecimal/iDecMask)*iSign
 return iRead
end function
function ReadFilename( pFile as ubyte ptr , byref sString as string ) as long
 dim as long iRead, iSize
 var pzStart = cptr( zstring ptr , pFile )
 do
 select case pFile[iRead]
 case asc(" "),9
 if iSize=0 then iSize -= 1 : pzStart += 1
 case asc(!"\r"),asc(!"\n"),0
 exit do
 end select
 iRead += 1 : iSize += 1
 loop
 while iSize andalso (*pzStart)[iSize-1] = asc(" ") orelse (*pzStart)[iSize-1] = 9
 iSize -= 1
 wend
 dim as ubyte bPrevious = pzStart[iSize]
 pzStart[iSize] = 0
 sString = *pzStart
 pzStart[iSize] = bPrevious
 return iRead
end function
function ReadToken( pFile as ubyte ptr , byref sString as string ) as long
 dim as long iRead, iSize
 var pzStart = cptr( zstring ptr , pFile )
 do
 select case pFile[iRead]
 case asc(" "),9
 if iSize=0 then iSize -= 1 : pzStart += 1 else exit do
 case asc(!"\r"),asc(!"\n"),0
 exit do
 end select
 iRead += 1 : iSize += 1
 loop
 dim as ubyte bPrevious = pzStart[iSize]
 pzStart[iSize] = 0
 sString = *pzStart
 pzStart[iSize] = bPrevious
 return iRead
end function
function LoadFile( sFile as string , byref sFileContents as string , bAddPathToSearch as boolean = true ) as boolean

 if bAddPathToSearch then
 var iPathLen = instrrev(sFile,"\") , iPathLen2 = instrrev(sFile,"/")
 if iPathLen2 > iPathLen then iPathLen = iPathLen2
 if iPathLen then
 g_sPathList(0) = left(sFile,iPathLen-1)
 else
 g_sPathList(0) = ""
 end if
 end if

 var f = freefile()
 if open(sFile for input as #f) then
 print "Failed to open file '"+sFile+"'": sleep:system
 return false
 end if
 dim as uinteger uFileSize = lof(f)
 if uFileSize < (1024*1024) then
 else
 end if
 sFileContents = string( uFileSize , 0 )
 get #f,,sFileContents
 close #f
 return true
end function
function FindFile( sFile as string ) as long
 for I as long = 0 to ubound(g_sPathList)
 var sFullPathFile = g_sPathList(I)
 if sFile[0] <> asc("\") then sFullPathFile += "\"
 sFullPathFile += sFile
 if FileExists( sFullPathFile ) then
 sFile = lcase(sFullPathFile) : return TRUE
 end if
 next I
 return FALSE
end function
function FindShadowFile( sFile as string ) as long
 for I as long = 0 to ubound(g_sShadowPathList)
 var sFullPathFile = g_sShadowPathList(I)
 if sFile[0] <> asc("\") then sFullPathFile += "\"
 sFullPathFile += sFile
 if FileExists( sFullPathFile ) then
 sFile = sFullPathFile : return TRUE
 end if
 next I
 return FALSE
end function
function ReadBracketOption( pFile as ubyte ptr , sName as string , sParms as string ) as long
 dim as long iRead=0, iSize=0
 dim as zstring ptr pzName=0, pzParms=0
 dim as byte bOpen, bSpace
 dim as ubyte bPrevious = any
 do
 select case pFile[iRead]
 case asc(" "),9
 if bOpen then
 if iSize=0 then
 iSize -= 1 : if pzParms=0 then pzName += 1 else pzParms += 1
 else
 bSpace += 1 : iSize -= 1
 end if
 end if
 case asc("[")
 if bOpen then return -1
 pzName = pFile+iRead+1 : bOpen = 1
 iSize = -1 : bSpace = 0
 case asc("=")
 if bOpen=0 then return -1
 if pzParms then return -1
 bPrevious = (*pzName)[iSize]
 (*pzName)[iSize] = 0
 sName = *pzName
 (*pzName)[iSize] = bPrevious
 pzParms = pFile+iRead+1
 iSize=-1 : bSpace = 0
 case asc("]")
 if pzName=0 or pzParms=0 then return -1
 if bOpen=0 then return -1
 bPrevious = (*pzParms)[iSize]
 (*pzParms)[iSize] = 0
 sParms = *pzParms
 (*pzParms)[iSize] = bPrevious
 iRead += 1 : exit do
 case asc(!"\r"),asc(!"\n"),0
 if bOpen then return -1
 sName = ""
 exit do
 case else
 if bSpace then
 if pzParms=0 then
 return -1
 else
 iSize += bSpace
 end if
 bSpace = 0
 end if
 if bOpen=0 then return -1
 end select
 iRead += 1 : iSize += 1
 loop
 return iRead
end function


function LoadShadow( pPart as DATFile ptr , sFromFile as string , bRecursion as long = 0) as boolean


 var iPos = instrrev(sFromFile,"\") , iPos2 = instrrev(sFromFile,"/")
 if iPos2 > iPos then iPos = iPos2
 var sShadowFile = mid(sFromFile,iPos+1)
 if FindShadowFile( sShadowFile ) then
 else
 if bRecursion then
 printf(!"[%s] was referenced in a shadow file, but was not found\n",sShadowFile)
 end if
 return false
 end if

 dim as string sContent
 if LoadFile( sShadowFile , sContent , false ) then
 dim as ubyte ptr pFile = strptr(sContent)
 dim as long iType = any , iResu = any
 dim as long iFailed=0 , iLineNum = 1
 do
 iResu = ReadInt( pFile , iType )
 if iResu=0 then
 while *pFile <> asc(!"\n") andalso *pfile : pFile += 1 : wend
 if *pFile=0 then exit do
 iLineNum += 1 : pFile += 1 : continue do
 end if
 if iResu<0 then
 puts "Syntax" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu

 if iType<>0 then
 puts "ERROR: only comments are expect in shadow files, in '"+ sShadowFile+"' at line " & iLineNum
 while *pFile <> asc(!"\n") andalso *pfile : pFile += 1 : wend
 if *pFile=0 then exit do
 iLineNum += 1 : pFile += 1 : continue do
 end if


 dim as string sType
 iResu = ReadToken( pFile , sType )
 pFile += iResu

 var suType = ucase(sType)
 if suType = "//!LDCAD" then
 suType = "!LDCAD"
 end if
 if suType <> "!LDCAD" then
 while *pFile <> asc(!"\n") andalso *pfile : pFile += 1 : wend
 if *pFile=0 then exit do
 iLineNum += 1 : pFile += 1 : continue do
 end if
 iResu = ReadToken( pFile , sType )
 pFile += iResu

 select case ucase(sType)
 case "SNAP_INCL"
 if bRecursion=3 then
 iResu=-1
 if iResu<0 then
 puts "Shadow include Recursion limit reached" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end if
 ReadFilename( pFile , sType )
 dim as string sName,sParms
 pPart->iShadowCount += 1
 dim as ShadowStruct ptr pNew = realloc( pPart->paShadow , sizeof(ShadowStruct)*pPart->iShadowCount )
 if pNew = 0 then
 iResu=-1
 if iResu<0 then
 puts "Out of memory" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end if
 pPart->paShadow = pNew
 pNew += (pPart->iShadowCount-1)
 clear *pNew , 0 , sizeof(ShadowStruct)
 pNew->bType = sit_Include
 pNew->bRecurse = bRecursion
 pNew->tGrid.xCnt = 1 : pNew->tGrid.xStep = 0
 pNew->tGrid.zCnt = 1 : pNew->tGrid.zStep = 0
 dim as string sRefFile
 do
 var iResu = ReadBracketOption( pFile , sName , sParms )
 if iResu<0 then
 puts "Syntax" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu : if len(sName)=0 then exit do
 select case *cptr(ulong ptr,strptr(sName)) or &h20202020
 case cvl("ref" " ")
 if len(sRefFile) then
 iResu=-1
 if iResu<0 then
 puts "duplicated reference" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end if
 var pParm = cast(ubyte ptr,strptr(sParms))
 iResu = ReadToken( pParm , sRefFile )
 if iResu <= 0 then
 iResu=-1
 if iResu<0 then
 puts "null reference" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end if
 case cvl("pos" " ")
 var pPos = @(pNew->fPosX) , pParm = cast(ubyte ptr,strptr(sParms))
 for N as long = 0 to (3-1)
 iResu = ReadFloat( pParm , *pPos )
 if iResu<0 then
 puts "ERROR: Expected " "Position" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 pPos += 1
 next N
 case cvl("grid")
 var pParm = cast(ubyte ptr,strptr(sParms))
 dim as long lCntX=any , lCntZ=any
 dim as single fStepX=any, fStepZ=any
 While *pParm = asc(" ") orelse *pParm = 9 : pParm += 1 : wend
 if ((*pParm and (not &h20)) <> asc("C")) andalso ((*pParm < asc("0")) orelse (*pParm > asc("9"))) then
 iResu = -1
 if iResu<0 then
 puts "grid syntax" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end if
 if (*pParm and (not &h20))=asc("C") then
 pParm += 1
 iResu = ReadInt( pParm , lCntX )
 if iResu<0 then
 puts "ERROR: Expected " "grid X Count" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 lCntX = -lCntX
 else
 iResu = ReadInt( pParm , lCntX )
 if iResu<0 then
 puts "ERROR: Expected " "grid X count" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 end if
 if lCntX = 0 then
 iResu = -1
 if iResu<0 then
 puts "invalid grid X count" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end if
 While *pParm = asc(" ") orelse *pParm = 9 : pParm += 1 : wend
 if ((*pParm and (not &h20)) <> asc("C")) andalso ((*pParm < asc("0")) orelse (*pParm > asc("9"))) then
 iResu = -1
 if iResu<0 then
 puts "grid syntax" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end if
 if (*pParm and (not &h20))=asc("C") then
 pParm += 1
 iResu = ReadInt( pParm , lCntZ )
 if iResu<0 then
 puts "ERROR: Expected " "grid Z count" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 lCntZ = -lCntZ
 else
 iResu = ReadInt( pParm , lCntZ )
 if iResu<0 then
 puts "ERROR: Expected " "grid Z count" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 end if
 if lCntX = 0 then
 iResu = -1
 if iResu<0 then
 puts "invalid grid Z count" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end if
 iResu = ReadFloat( pParm , fStepX )
 if iResu<0 then
 puts "ERROR: Expected " "grid step X" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 if (cint(fStepX)*100) <> cint(fStepX*100) then printf(!"Warning: float grid step X (%f)\n", fStepX)
 iResu = ReadFloat( pParm , fStepZ )
 if iResu<0 then
 puts "ERROR: Expected " "grid step Z" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 if (cint(fStepZ)*100) <> cint(fStepZ*100) then printf(!"Warning: float grid step Z (%f)\n", fStepZ)
 pNew->bFlagHasGrid = true
 with pNew->tGrid
 .Xcnt = lCntX : .Zcnt = lCntZ
 .Xstep = fStepX : .Zstep = fStepZ
 end with
 case cvl("ori" " ")
 var pOri = @(pNew->fOri(0)) , pParm = cast(ubyte ptr,strptr(sParms))
 pNew->bFlagOriMat = true
 for N as long = 0 to (9-1)
 iResu = ReadFloat( pParm , *pOri )
 if iResu<0 then
 puts "ERROR: Expected " "Orientation" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 pOri += 1
 next N

 case else
 iResu=-1
 if iResu<0 then
 puts "shadow Include parm" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end select
 loop
 if len(sRefFile)=0 then
 iResu=-1
 if iResu<0 then
 puts "include without reference" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end if
 LoadShadow( pPart , sRefFile , bRecursion+1 )
 while *pFile <> asc(!"\n") andalso *pfile : pFile += 1 : wend
 if *pFile=0 then exit do
 iLineNum += 1 : pFile += 1 : continue do

 case "SNAP_CYL"
 ReadFilename( pFile , sType )
 dim as string sName,sParms
 pPart->iShadowCount += 1
 dim as ShadowStruct ptr pNew = realloc( pPart->paShadow , sizeof(ShadowStruct)*pPart->iShadowCount )
 if pNew = 0 then
 iResu=-1
 if iResu<0 then
 puts "Out of memory" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end if
 pPart->paShadow = pNew
 pNew += (pPart->iShadowCount-1)
 clear *pNew , 0 , sizeof(ShadowStruct)
 pNew->bType = sit_Cylinder
 pNew->bRecurse = bRecursion
 pNew->bFlagMirror = true
 pNew->tGrid.xCnt = 1 : pNew->tGrid.xStep = 0
 pNew->tGrid.zCnt = 1 : pNew->tGrid.zStep = 0
 do
 var iResu = ReadBracketOption( pFile , sName , sParms )
 if iResu<0 then
 puts "Syntax" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu : if len(sName)=0 then exit do
 select case *cptr(ulong ptr,strptr(sName)) or &h20202020
 case cvl("gender")
 select case sParms[0] or &h20
 case asc("f"): pNew->bFlagMale = false
 case asc("m"): pNew->bFlagMale = true
 case else
 iResu = -1
 if iResu<0 then
 puts "Invalid Gender" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end select
 case cvl("secs")
 var pParm = cast(ubyte ptr,strptr(sParms))
 dim sShape as string
 dim as long iSecs=0, iShapeID=any
 dim as single fRad=any , fLen=any
 do
 iResu = ReadToken( pParm , sShape )
 if iResu <= 0 then exit do
 if iSecs >= cShadowMaxSecs then
 iResu = -1
 if iResu<0 then
 puts "Too many secs" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end if
 pParm += iResu
 var iShape = *cptr(ushort ptr,strptr(sShape)) and (not &h2020)
 select case iShape
 case asc("R") : iShapeID=sss_Round
 case asc("A") : iShapeID=sss_Axle
 case asc("S") : iShapeID=sss_Square
 case cvshort("_L"): iShapeID=sss_FlexPrev
 case cvshort("L_"): iShapeID=sss_FlexNext
 case else
 iResu = -1
 if iResu<0 then
 puts "Invalid sec shape" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end select
 iResu = ReadFloat( pParm , fRad )
 if iResu<0 then
 puts "ERROR: Expected " "Radius" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 if (cint(fRad*100)*100) <> cint(fRad*100*100) then printf(!"Warning: innacurate fixed Radius (%f)\n", fRad)
 iResu = ReadFloat( pParm , fLen )
 if iResu<0 then
 puts "ERROR: Expected " "Length" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 if (cint(fLen)*100) <> cint(fLen*100) then printf(!"Warning: float Length (%f)\n", fLen)
 with pNew->tSecs(iSecs)
 .bshape = iShapeID
 .wFixRadius = fRad*100
 .bLength = fLen
 end with
 iSecs += 1
 loop
 if iSecs=0 then
 iResu = -1
 if iResu<0 then
 puts "sec syntax" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end if
 pNew->bSecCnt = iSecs
 case cvl("caps")
 select case *cptr(ushort ptr,strptr(sParms)) or &h2020
 case cvshort("none"): pNew->bCaps = sc_None
 case cvshort("one") : pNew->bCaps = sc_One
 case cvshort("two") : pNew->bCaps = sc_Two
 case cvshort("a ") : pNew->bCaps = sc_A
 case cvshort("b ") : pNew->bCaps = sc_B
 case else
 iResu = -1
 if iResu<0 then
 puts "Invalid caps" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end select
 case cvl("pos" " ")
 var pPos = @(pNew->fPosX) , pParm = cast(ubyte ptr,strptr(sParms))
 for N as long = 0 to (3-1)
 iResu = ReadFloat( pParm , *pPos )
 if iResu<0 then
 puts "ERROR: Expected " "Position" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 pPos += 1
 next N
 case cvl("grid")
 var pParm = cast(ubyte ptr,strptr(sParms))
 dim as long lCntX=any , lCntZ=any
 dim as single fStepX=any, fStepZ=any
 While *pParm = asc(" ") orelse *pParm = 9 : pParm += 1 : wend
 if ((*pParm and (not &h20)) <> asc("C")) andalso ((*pParm < asc("0")) orelse (*pParm > asc("9"))) then
 iResu = -1
 if iResu<0 then
 puts "grid syntax" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end if
 if (*pParm and (not &h20))=asc("C") then
 pParm += 1
 iResu = ReadInt( pParm , lCntX )
 if iResu<0 then
 puts "ERROR: Expected " "grid X Count" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 lCntX = -lCntX
 else
 iResu = ReadInt( pParm , lCntX )
 if iResu<0 then
 puts "ERROR: Expected " "grid X count" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 end if
 if lCntX = 0 then
 iResu = -1
 if iResu<0 then
 puts "invalid grid X count" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end if
 While *pParm = asc(" ") orelse *pParm = 9 : pParm += 1 : wend
 if ((*pParm and (not &h20)) <> asc("C")) andalso ((*pParm < asc("0")) orelse (*pParm > asc("9"))) then
 iResu = -1
 if iResu<0 then
 puts "grid syntax" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end if
 if (*pParm and (not &h20))=asc("C") then
 pParm += 1
 iResu = ReadInt( pParm , lCntZ )
 if iResu<0 then
 puts "ERROR: Expected " "grid Z count" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 lCntZ = -lCntZ
 else
 iResu = ReadInt( pParm , lCntZ )
 if iResu<0 then
 puts "ERROR: Expected " "grid Z count" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 end if
 if lCntX = 0 then
 iResu = -1
 if iResu<0 then
 puts "invalid grid Z count" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end if
 iResu = ReadFloat( pParm , fStepX )
 if iResu<0 then
 puts "ERROR: Expected " "grid step X" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 if (cint(fStepX)*100) <> cint(fStepX*100) then printf(!"Warning: float grid step X (%f)\n", fStepX)
 iResu = ReadFloat( pParm , fStepZ )
 if iResu<0 then
 puts "ERROR: Expected " "grid step Z" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 if (cint(fStepZ)*100) <> cint(fStepZ*100) then printf(!"Warning: float grid step Z (%f)\n", fStepZ)
 pNew->bFlagHasGrid = true
 with pNew->tGrid
 .Xcnt = lCntX : .Zcnt = lCntZ
 .Xstep = fStepX : .Zstep = fStepZ
 end with
 case cvl("ori" " ")
 var pOri = @(pNew->fOri(0)) , pParm = cast(ubyte ptr,strptr(sParms))
 pNew->bFlagOriMat = true
 for N as long = 0 to (9-1)
 iResu = ReadFloat( pParm , *pOri )
 if iResu<0 then
 puts "ERROR: Expected " "Orientation" " parameter" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pParm += iResu
 pOri += 1
 next N
 case cvl("center")
 select case sParms[0] or &h20
 case asc("f"): pNew->bFlagCenter = false
 case asc("t"): pNew->bFlagCenter = true
 case else
 iResu = -1
 if iResu<0 then
 puts "Invalid Cender" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end select
 case cvl("slide")
 select case sParms[0] or &h20
 case asc("f"): pNew->bFlagSlide = false
 case asc("t"): pNew->bFlagSlide = true
 case else
 iResu = -1
 if iResu<0 then
 puts "Invalid Cender" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end select
 case cvl("scale")
 select case *cptr(ulong ptr,strptr(sParms)) or &h20202020
 case cvl("none") : pNew->bScale = ss_None
 case cvl("yonly") : pNew->bScale = ss_YOnly
 case cvl("ronly") : pNew->bScale = ss_ROnly
 case cvl("yandr") : pNew->bScale = ss_YandR
 case else
 iResu = -1
 if iResu<0 then
 puts "Invalid Scale" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end select
 case cvl("mirror")
 select case *cptr(ulong ptr,strptr(sParms)) or &h20202020
 case cvl("none") : pNew->bFlagMirror = false
 case cvl("cor" " ") : pNew->bFlagMirror = true
 case else
 iResu = -1
 if iResu<0 then
 puts "Invalid Mirror" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end select
 case cvl("group")
 case else
 select case (*cptr(ulong ptr,strptr(sName)) or &h20202020) and &hFFFFFF
 case (cvl("id" "  ") and &hFFFFFF)
 case else
 iResu=-1
 if iResu<0 then
 puts "Cylinder Parm" " error reading '"+ sShadowFile+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 end select
 end select
 loop
 while *pFile <> asc(!"\n") andalso *pfile : pFile += 1 : wend
 if *pFile=0 then exit do
 iLineNum += 1 : pFile += 1 : continue do
 end select

 pFile += ReadFilename( pFile , sType )
 if sType="" then sType=" "
 while *pFile <> asc(!"\n") andalso *pfile : pFile += 1 : wend
 if *pFile=0 then exit do
 iLineNum += 1 : pFile += 1 : continue do
 loop
 if iFailed then
 printf("ERROR: Failed to load shadow file '%s'\n", sShadowFile)
 end if
 return iFailed=0
 end if
 return false

end function

function LoadModel( pFile as ubyte ptr , sFilename as string = "" , iModelIndex as long = -1 , iLoadDependencies as byte = 1 ) as DATFile ptr


 dim as long iLastPart=0 , iLimitParts=-1 , iFailed=0, iLineNum = 1
 dim as long iType = any , iColour = any , iResu = any
 dim as DATFile ptr pT = NULL
 dim as long iFilenameOffset=0
 static as long RecursionLevel , iTotalLines , iTotalParts
 iTotalLines = 0 : iTotalParts = 0
 RecursionLevel += 1

 if iModelIndex < 0 then
 iModelIndex = g_ModelCount
 redim preserve g_tModels( g_ModelCount )
 g_ModelCount += 1
 end if

 do
 if iLastPart > iLimitParts then
 iLimitParts += 4096
 var pNew = cptr(DATFile ptr , reallocate( pT , ( cint( @cast( DATFile ptr, 0 )->tParts(0) )+(iLimitParts+1)*sizeof(PartStruct)) ))
 if pNew=NULL then
 puts "Failed to allocate memory to load file"
 iFailed = 1 : exit do
 end if
 if pT=NULL then
 pT = pNew
 iFilenameOffset = len(g_sFilenames)
 g_sFilenames += chr(255)+mkl(iModelIndex)+chr(0)+lcase(sFilename)+chr(0)
 pNew->iModelIndex = iModelIndex
 pNew->iShadowCount = 0
 pNew->pData = NULL
 pNew->paShadow = NULL
 with pNew->tSize
 .xMin = fUnused : .xMax = fUnused
 .yMin = fUnused : .yMax = fUnused
 .zMin = fUnused : .zMax = fUnused
 end with
 end if
 pT = pNew
 end if
 iResu = ReadInt( pFile , iType )
 if iResu=0 then
 while *pFile <> asc(!"\n") andalso *pfile : pFile += 1 : wend
 if *pFile=0 then exit do
 iLineNum += 1 : pFile += 1 : continue do
 end if
 if iResu<=0 then
 puts "Syntax" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu

 if iType<>0 then
 iResu = ReadInt( pFile , iColour )
 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected colour as second parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pt->tParts(iLastPart).wColour = iColour
 pt->tParts(iLastPart).bType = iType
 pFile += iResu
 end if


 select case iType
 case 0
 dim as string sComment
 iResu = ReadToken( pFile , sComment )
 if ucase(sComment) = "BFC" then
 pFile += iResu
 iResu = ReadToken( pFile , sComment )
 elseif ucase(sComment) = "FILE" then
 dim as string sFile
 pFile += iResu
 ReadFilename( pFile , sFile )
 pFile += iResu
 while *pFile <> asc(!"\n") andalso *pfile : pFile += 1 : wend
 if *pFile=0 then exit do
 iLineNum += 1 : pFile += 1

 if iLastPart = 0 andalso RecursionLevel=1 then
 while *pFile <> asc(!"\n") andalso *pfile : pFile += 1 : wend
 if *pFile=0 then exit do
 iLineNum += 1 : pFile += 1 : continue do
 end if

 var sFileL = lcase(sFile)+chr(0), iIndex = -1
 var iOffset = instr(g_sFilenames,chr(0)+sFileL)


 if iOffset > 4 then
 iIndex = *cptr(ulong ptr,strptr(g_sFilenames)+iOffset-(1+sizeof(ulong)))
 iOffset = instr(lcase(g_sFilesToLoad),chr(0)+lcase(sFile)+chr(0))
 if iOffset = 0 then print "/!\ INTERNAL ERROR: forwarded entry not found at the 'To Load List' /!\"
 g_sFilesToLoad = left(g_sFilesToLoad,iOffset)+mid(g_sFilesToLoad,iOffset+len(sFile)+2)
 end if
 LoadModel( pFile , sFile , iIndex )
 exit do
 else
 ReadFilename( pFile , sComment )
 pFile += iResu
 end if
 while *pFile <> asc(!"\n") andalso *pfile : pFile += 1 : wend
 if *pFile=0 then exit do
 iLineNum += 1 : pFile += 1 : continue do
 case 1
 with pt->tParts(iLastPart)._1
 iResu = ReadFloat( pFile , .fX )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "X (float) as second" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fY )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Y (float) as third" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fZ )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Z (float) as fourth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fA )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "A (float) as fifth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fB )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "B (float) as sixth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fC )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "C (float) as seventh" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fD )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "D (float) as eighth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fE )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "E (float) as ninth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fF )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "F (float) as tenth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fG )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "G (float) as eleventh" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fH )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "H (float) as twelth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fI )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "I (float) as thirteenth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 dim as string sFile
 iResu = ReadFilename( pFile , sFile )
 if iResu<=0 then
 puts "Expected filename as fourteenth parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 var sFileL = lcase(sFile)+chr(0)
 var iOffset = instr(g_sFilenames,chr(0)+sFileL)
 if iOffset then
 .lModelIndex = *cptr(ulong ptr,strptr(g_sFilenames)+iOffset-(1+sizeof(ulong)))
 else
 .lModelIndex = g_ModelCount
 g_sFilenames += chr(255)+mkl(g_ModelCount)+chr(0)+sFileL
 g_sFilesToLoad += sFile+chr(0)
 redim preserve g_tModels( g_ModelCount ) : g_ModelCount += 1
 end if
 iLastPart += 1
 while *pFile <> asc(!"\n")
 select case *pFile
 case 0 : exit do
 case asc(!"\r"),9,asc(" ")
 case else
 puts " expect end of line in '"+sFilename+"' at line " & iLineNum
 iFailed = 1 : exit do
 end select
 pFile += 1
 wend
 iLineNum += 1 : pFile += 1 : continue do
 end with
 case 2
 with pt->tParts(iLastPart)._2
 iResu = ReadFloat( pFile , .fX1 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "X1 (float) as second" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fY1 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Y1 (float) as third" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fZ1 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Z1 (float) as fourth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fX2 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "X2 (float) as fifth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fY2 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Y2 (float) as sixth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fZ2 )

 if iResu<=0 then
 puts "Expected " "Z2 (float) as seventh" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 end with
 iLastPart += 1
 while *pFile <> asc(!"\n")
 select case *pFile
 case 0 : exit do
 case asc(!"\r"),9,asc(" ")
 case else
 puts " expect end of line in '"+sFilename+"' at line " & iLineNum
 iFailed = 1 : exit do
 end select
 pFile += 1
 wend
 iLineNum += 1 : pFile += 1 : continue do
 case 3
 with pt->tParts(iLastPart)._3
 iResu = ReadFloat( pFile , .fX1 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "X1 (float) as second" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fY1 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Y1 (float) as third" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fZ1 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Z1 (float) as fourth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fX2 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "X2 (float) as fifth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fY2 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Y2 (float) as sixth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fZ2 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Z2 (float) as seventh" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fX3 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "X3 (float) as eighth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fY3 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Y3 (float) as ninth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fZ3 )

 if iResu<=0 then
 puts "Expected " "Z3 (float) as tenth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 end with
 iLastPart += 1
 while *pFile <> asc(!"\n")
 select case *pFile
 case 0 : exit do
 case asc(!"\r"),9,asc(" ")
 case else
 puts " expect end of line in '"+sFilename+"' at line " & iLineNum
 iFailed = 1 : exit do
 end select
 pFile += 1
 wend
 iLineNum += 1 : pFile += 1 : continue do
 case 4
 with pt->tParts(iLastPart)._4
 iResu = ReadFloat( pFile , .fX1 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "X1 (float) as second" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fY1 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Y1 (float) as third" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fZ1 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Z1 (float) as fourth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fX2 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "X2 (float) as fifth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fY2 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Y2 (float) as sixth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fZ2 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Z2 (float) as seventh" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fX3 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "X3 (float) as eighth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fY3 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Y3 (float) as ninth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fZ3 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Z3 (float) as tenth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fX4 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "X4 (float) as eleventh" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fY4 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Y4 (float) as twelth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fZ4 )

 if iResu<=0 then
 puts "Expected " "Z4 (float) as thirteenth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 end with
 iLastPart += 1
 while *pFile <> asc(!"\n")
 select case *pFile
 case 0 : exit do
 case asc(!"\r"),9,asc(" ")
 case else
 puts " expect end of line in '"+sFilename+"' at line " & iLineNum
 iFailed = 1 : exit do
 end select
 pFile += 1
 wend
 iLineNum += 1 : pFile += 1 : continue do
 case 5
 with pt->tParts(iLastPart)._5
 iResu = ReadFloat( pFile , .fX1 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "X1 (float) as second" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fY1 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Y1 (float) as third" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fZ1 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Z1 (float) as fourth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fX2 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "X2 (float) as fifth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fY2 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Y2 (float) as sixth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fZ2 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Z2 (float) as seventh" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fX3 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "X3 (float) as eighth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fY3 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Y3 (float) as ninth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fZ3 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Z3 (float) as tenth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fX4 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "X4 (float) as eleventh" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fY4 )

 if iResu>0 andalso pFile[iResu] <> asc(" ") then iResu = -1
 if iResu<=0 then
 puts "Expected " "Y4 (float) as twelth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 iResu = ReadFloat( pFile , .fZ4 )

 if iResu<=0 then
 puts "Expected " "Z4 (float) as thirteenth" " parameter" " error reading '"+sFilename+"' at line " & iLineNum
 return false
 iFailed = 1 : exit do
 end if
 pFile += iResu
 end with
 iLastPart += 1
 while *pFile <> asc(!"\n")
 select case *pFile
 case 0 : exit do
 case asc(!"\r"),9,asc(" ")
 case else
 puts " expect end of line in '"+sFilename+"' at line " & iLineNum
 iFailed = 1 : exit do
 end select
 pFile += 1
 wend
 iLineNum += 1 : pFile += 1 : continue do
 case else
 puts "Unknown line"
 while *pFile <> asc(!"\n") andalso *pfile : pFile += 1 : wend
 if *pFile=0 then exit do
 iLineNum += 1 : pFile += 1 : continue do
 end select
 loop

 LoadShadow( pT , sFilename )

 RecursionLevel -= 1
 if iFailed then
 puts("Faillure?"): return false
 if pT then deallocate(pT): pT=NULL
 else
 g_tModels(iModelIndex).pModel = pT
 g_tModels(iModelIndex).iFilenameOffset = iFilenameOffset
 pT->iPartCount = iLastPart
 pT = reallocate( pT , ( cint( @cast( DATFile ptr, 0 )->tParts(0) )+(pT->iPartCount)*sizeof(PartStruct)) )
 iTotalLines += iLineNum : iTotalParts += pT->iPartCount
 if RecursionLevel=0 then
 if iLoadDependencies then
 var iStart=2, sFilesToLoad = g_sFilesToLoad : g_sFilesToLoad=chr(0)
 do
 var iEnd = instr( iStart , sFilesToLoad , chr(0) )
 if iEnd=0 then exit do
 var sFile = mid( sFilesToLoad , iStart , iEnd-iStart )
 iStart = iEnd+1
 var sFullPathFile = sFile
 if FindFile(sFullPathFile) then
 var sFileL = lcase(sFile)+chr(0), iIndex = -1
 var iOffset = instr(g_sFilenames,chr(0)+sFileL)
 iIndex = *cptr(ulong ptr,strptr(g_sFilenames)+iOffset-(1+sizeof(ulong)))
 dim as string sModel
 if LoadFile( sFullPathFile , sModel ) then
 LoadModel( strptr(sModel) , sFile , iIndex )
 continue do
 end if
 end if
 print "ERROR: DEPENDENCY NOT FOUND! '"+sFile+"'"
 print "Model Path: '"+g_sPathList(0)+"'"
 return false
 loop
 end if

 end if
 end if

 return pT

end function

sub FreeModel( byref pPart as DATFile ptr )
 if pPart = 0 then exit sub
 with *pPart
 if .iModelIndex < 0 then exit sub
 with g_tModels(.iModelIndex)
 var iPosEnd = instr(.iFilenameOffset+5,g_sFilenames,chr(255))
 if iPosEnd=0 then
 cptr(uinteger ptr,@g_sFilenames)[1] = .iFilenameOffset
 else
 memset( strptr(g_sFilenames)+.iFilenameOffset , 0 , (iPosEnd-.iFilenameOffset)-2 )
 end if
 .iFilenameOffset = - 1 : .pModel = 0
 end with
 if .paShadow then deallocate(.paShadow) : .paShadow = 0
 if .pData then deallocate(.pData) : .pData = 0
 .iModelIndex = -1
 end with
 Deallocate( pPart ) : pPart = NULL
end sub






static shared as ulong g_Colours(11000)
static shared as ulong g_EdgeColours(11000)

 const c_Black = 0
 const c_Blue = 1
 const c_Green = 2
 const c_Dark_Turquoise = 3
 const c_Red = 4
 const c_Dark_Pink = 5
 const c_Brown = 6
 const c_Light_Grey = 7
 const c_Dark_Grey = 8
 const c_Light_Blue = 9
 const c_Bright_Green = 10
 const c_Light_Turquoise = 11
 const c_Salmon = 12
 const c_Pink = 13
 const c_Yellow = 14
 const c_White = 15
 const c_Light_Green = 17
 const c_Light_Yellow = 18
 const c_Tan = 19
 const c_Light_Violet = 20
 const c_Purple = 22
 const c_Dark_Blue_Violet = 23
 const c_Orange = 25
 const c_Magenta = 26
 const c_Lime = 27
 const c_Dark_Tan = 28
 const c_Bright_Pink = 29
 const c_Medium_Lavender = 30
 const c_Lavender = 31
 const c_Very_Light_Orange = 68
 const c_Bright_Reddish_Lilac = 69
 const c_Reddish_Brown = 70
 const c_Light_Bluish_Grey = 71
 const c_Dark_Bluish_Grey = 72
 const c_Medium_Blue = 73
 const c_Medium_Green = 74
 const c_Light_Pink = 77
 const c_Light_Nougat = 78
 const c_Medium_Nougat = 84
 const c_Medium_Lilac = 85
 const c_Light_Brown = 86
 const c_Blue_Violet = 89
 const c_Nougat = 92
 const c_Light_Salmon = 100
 const c_Violet = 110
 const c_Medium_Violet = 112
 const c_Medium_Lime = 115
 const c_Aqua = 118
 const c_Light_Lime = 120
 const c_Light_Orange = 125
 const c_Dark_Nougat = 128
 const c_Very_Light_Bluish_Grey = 151
 const c_Bright_Light_Orange = 191
 const c_Bright_Light_Blue = 212
 const c_Rust = 216
 const c_Reddish_Lilac = 218
 const c_Lilac = 219
 const c_Bright_Light_Yellow = 226
 const c_Sky_Blue = 232
 const c_Dark_Blue = 272
 const c_Dark_Green = 288
 const c_Flamingo_Pink = 295
 const c_Dark_Brown = 308
 const c_Maersk_Blue = 313
 const c_Dark_Red = 320
 const c_Dark_Azure = 321
 const c_Medium_Azure = 322
 const c_Light_Aqua = 323
 const c_Yellowish_Green = 326
 const c_Olive_Green = 330
 const c_Sand_Red = 335
 const c_Medium_Dark_Pink = 351
 const c_Coral = 353
 const c_Earth_Orange = 366
 const c_Neon_Yellow = 368
 const c_Medium_Brown = 370
 const c_Medium_Tan = 371
 const c_Sand_Purple = 373
 const c_Sand_Green = 378
 const c_Sand_Blue = 379
 const c_Reddish_Orange = 402
 const c_Sienna_Brown = 422
 const c_Umber_Brown = 423
 const c_Fabuland_Brown = 450
 const c_Medium_Orange = 462
 const c_Dark_Orange = 484
 const c_Very_Light_Grey = 503
 const c_Light_Orange_Brown = 507
 const c_Fabuland_Red = 508
 const c_Fabuland_Orange = 509
 const c_Fabuland_Lime = 510
 const c_Trans_Dark_Blue = 33
 const c_Trans_Green = 34
 const c_Trans_Bright_Green = 35
 const c_Trans_Red = 36
 const c_Trans_Dark_Pink = 37
 const c_Trans_Neon_Orange = 38
 const c_Trans_Very_Light_Blue = 39
 const c_Trans_Brown = 40
 const c_Trans_Medium_Blue = 41
 const c_Trans_Neon_Green = 42
 const c_Trans_Light_Blue = 43
 const c_Trans_Bright_Reddish_Lilac = 44
 const c_Trans_Pink = 45
 const c_Trans_Yellow = 46
 const c_Trans_Clear = 47
 const c_Trans_Purple = 52
 const c_Trans_Neon_Yellow = 54
 const c_Trans_Orange = 57
 const c_Trans_Black_IR_Lens = 32
 const c_Trans_Neon_Red = 158
 const c_Trans_Bright_Light_Green = 227
 const c_Trans_Bright_Light_Orange = 231
 const c_Trans_Fire_Yellow = 234
 const c_Trans_Reddish_Lilac = 284
 const c_Trans_Light_Green = 285
 const c_Trans_Light_Blue_Violet = 293
 const c_Trans_Black = 10375
 const c_Chrome_Antique_Brass = 60
 const c_Chrome_Blue = 61
 const c_Chrome_Green = 62
 const c_Chrome_Pink = 63
 const c_Chrome_Black = 64
 const c_Chrome_Gold = 334
 const c_Chrome_Silver = 383
 const c_Pearl_Black = 83
 const c_Copper = 134
 const c_Pearl_Light_Grey = 135
 const c_Metallic_Blue = 137
 const c_Pearl_Light_Gold = 142
 const c_Pearl_Dark_Gold = 147
 const c_Pearl_Dark_Grey = 148
 const c_Pearl_Very_Light_Grey = 150
 const c_Pearl_Red = 176
 const c_Pearl_Yellow = 178
 const c_Pearl_Silver = 179
 const c_Pearl_White = 183
 const c_Metallic_Bright_Red = 184
 const c_Metallic_Bright_Blue = 185
 const c_Metallic_Dark_Green = 186
 const c_Pearl_Brown = 187
 const c_Reddish_Gold = 189
 const c_Lemon_Metallic = 200
 const c_Pearl_Gold = 297
 const c_Metallic_Silver = 80
 const c_Metallic_Green = 81
 const c_Metallic_Gold = 82
 const c_Metallic_Dark_Grey = 87
 const c_Metallic_Copper = 300
 const c_Metallic_Light_Blue = 10045
 const c_Metallic_Pink = 10046
 const c_Metallic_Light_Pink = 10049
 const c_Milky_White = 79
 const c_Glow_In_Dark_Opaque = 21
 const c_Glow_In_Dark_Trans = 294
 const c_Glow_In_Dark_White = 329
 const c_Glitter_Trans_Dark_Pink = 114
 const c_Glitter_Trans_Clear = 117
 const c_Glitter_Trans_Purple = 129
 const c_Glitter_Trans_Light_Blue = 302
 const c_Glitter_Trans_Neon_Green = 339
 const c_Glitter_Trans_Orange = 341
 const c_Opal_Trans_Clear = 360
 const c_Opal_Trans_Light_Blue = 362
 const c_Opal_Trans_Black = 363
 const c_Opal_Trans_Dark_Pink = 364
 const c_Opal_Trans_Purple = 365
 const c_Opal_Trans_Green = 367
 const c_Glitter_Trans_Bright_Green = 10351
 const c_Opal_Trans_Dark_Blue = 10366
 const c_Speckle_Black_Copper = 75
 const c_Speckle_Dark_Bluish_Grey_Silver = 76
 const c_Speckle_Black_Silver = 132
 const c_Speckle_Black_Gold = 133
 const c_Rubber_Yellow = 65
 const c_Rubber_Black = 256
 const c_Rubber_Blue = 273
 const c_Rubber_Red = 324
 const c_Rubber_Orange = 350
 const c_Rubber_Light_Grey = 375
 const c_Rubber_Dark_Blue = 406
 const c_Rubber_Purple = 449
 const c_Rubber_Lime = 490
 const c_Rubber_Light_Bluish_Grey = 496
 const c_Rubber_Flat_Silver = 504
 const c_Rubber_White = 511
 const c_Rubber_Green = 10002
 const c_Rubber_Bright_Green = 10010
 const c_Rubber_Magenta = 10026
 const c_Rubber_Medium_Lavender = 10030
 const c_Rubber_Lavender = 10031
 const c_Rubber_Reddish_Brown = 10070
 const c_Rubber_Medium_Blue = 10073
 const c_Rubber_Light_Nougat = 10078
 const c_Rubber_Bright_Light_Yellow = 10226
 const c_Rubber_Dark_Brown = 10308
 const c_Rubber_Dark_Red = 10320
 const c_Rubber_Dark_Azure = 10321
 const c_Rubber_Medium_Azure = 10322
 const c_Rubber_Light_Aqua = 10323
 const c_Rubber_Sand_Green = 10378
 const c_Rubber_Dark_Orange = 10484
 const c_Rubber_Trans_Yellow = 66
 const c_Rubber_Trans_Clear = 67
 const c_Rubber_Trans_Bright_Green = 10035
 const c_Rubber_Trans_Red = 10036
 const c_Rubber_Trans_Light_Blue = 10043
 const c_Main_Colour = 16
 const c_Edge_Colour = 24
 const c_Magnet = 493
 const c_Electric_Contact_Alloy = 494
 const c_Electric_Contact_Copper = 495
 const c_Trans_Sticker = 10047
 const c_Fabric_Cream = 10000

scope
 g_Colours( 0 ) = (((&h1B2A34) and &hFF) shl 16) or (((&h1B2A34) and &hFF00)) or (((&h1B2A34) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 1 ) = (((&h1E5AA8) and &hFF) shl 16) or (((&h1E5AA8) and &hFF00)) or (((&h1E5AA8) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 2 ) = (((&h00852B) and &hFF) shl 16) or (((&h00852B) and &hFF00)) or (((&h00852B) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 3 ) = (((&h069D9F) and &hFF) shl 16) or (((&h069D9F) and &hFF00)) or (((&h069D9F) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 4 ) = (((&hB40000) and &hFF) shl 16) or (((&hB40000) and &hFF00)) or (((&hB40000) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 5 ) = (((&hD3359D) and &hFF) shl 16) or (((&hD3359D) and &hFF00)) or (((&hD3359D) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 6 ) = (((&h543324) and &hFF) shl 16) or (((&h543324) and &hFF00)) or (((&h543324) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 7 ) = (((&h8A928D) and &hFF) shl 16) or (((&h8A928D) and &hFF00)) or (((&h8A928D) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 8 ) = (((&h545955) and &hFF) shl 16) or (((&h545955) and &hFF00)) or (((&h545955) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 9 ) = (((&h97CBD9) and &hFF) shl 16) or (((&h97CBD9) and &hFF00)) or (((&h97CBD9) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10 ) = (((&h58AB41) and &hFF) shl 16) or (((&h58AB41) and &hFF00)) or (((&h58AB41) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 11 ) = (((&h00AAA4) and &hFF) shl 16) or (((&h00AAA4) and &hFF00)) or (((&h00AAA4) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 12 ) = (((&hF06D61) and &hFF) shl 16) or (((&hF06D61) and &hFF00)) or (((&hF06D61) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 13 ) = (((&hF6A9BB) and &hFF) shl 16) or (((&hF6A9BB) and &hFF00)) or (((&hF6A9BB) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 14 ) = (((&hFAC80A) and &hFF) shl 16) or (((&hFAC80A) and &hFF00)) or (((&hFAC80A) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 15 ) = (((&hF4F4F4) and &hFF) shl 16) or (((&hF4F4F4) and &hFF00)) or (((&hF4F4F4) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 17 ) = (((&hADD9A8) and &hFF) shl 16) or (((&hADD9A8) and &hFF00)) or (((&hADD9A8) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 18 ) = (((&hFFD67F) and &hFF) shl 16) or (((&hFFD67F) and &hFF00)) or (((&hFFD67F) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 19 ) = (((&hD7BA8C) and &hFF) shl 16) or (((&hD7BA8C) and &hFF00)) or (((&hD7BA8C) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 20 ) = (((&hAFBED6) and &hFF) shl 16) or (((&hAFBED6) and &hFF00)) or (((&hAFBED6) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 22 ) = (((&h671F81) and &hFF) shl 16) or (((&h671F81) and &hFF00)) or (((&h671F81) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 23 ) = (((&h0E3E9A) and &hFF) shl 16) or (((&h0E3E9A) and &hFF00)) or (((&h0E3E9A) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 25 ) = (((&hD67923) and &hFF) shl 16) or (((&hD67923) and &hFF00)) or (((&hD67923) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 26 ) = (((&h901F76) and &hFF) shl 16) or (((&h901F76) and &hFF00)) or (((&h901F76) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 27 ) = (((&hA5CA18) and &hFF) shl 16) or (((&hA5CA18) and &hFF00)) or (((&hA5CA18) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 28 ) = (((&h897D62) and &hFF) shl 16) or (((&h897D62) and &hFF00)) or (((&h897D62) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 29 ) = (((&hFF9ECD) and &hFF) shl 16) or (((&hFF9ECD) and &hFF00)) or (((&hFF9ECD) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 30 ) = (((&hA06EB9) and &hFF) shl 16) or (((&hA06EB9) and &hFF00)) or (((&hA06EB9) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 31 ) = (((&hCDA4DE) and &hFF) shl 16) or (((&hCDA4DE) and &hFF00)) or (((&hCDA4DE) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 68 ) = (((&hFDC383) and &hFF) shl 16) or (((&hFDC383) and &hFF00)) or (((&hFDC383) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 69 ) = (((&h8A12A8) and &hFF) shl 16) or (((&h8A12A8) and &hFF00)) or (((&h8A12A8) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 70 ) = (((&h5F3109) and &hFF) shl 16) or (((&h5F3109) and &hFF00)) or (((&h5F3109) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 71 ) = (((&h969696) and &hFF) shl 16) or (((&h969696) and &hFF00)) or (((&h969696) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 72 ) = (((&h646464) and &hFF) shl 16) or (((&h646464) and &hFF00)) or (((&h646464) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 73 ) = (((&h7396C8) and &hFF) shl 16) or (((&h7396C8) and &hFF00)) or (((&h7396C8) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 74 ) = (((&h7FC475) and &hFF) shl 16) or (((&h7FC475) and &hFF00)) or (((&h7FC475) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 77 ) = (((&hFECCCF) and &hFF) shl 16) or (((&hFECCCF) and &hFF00)) or (((&hFECCCF) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 78 ) = (((&hFFC995) and &hFF) shl 16) or (((&hFFC995) and &hFF00)) or (((&hFFC995) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 84 ) = (((&hAA7D55) and &hFF) shl 16) or (((&hAA7D55) and &hFF00)) or (((&hAA7D55) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 85 ) = (((&h441A91) and &hFF) shl 16) or (((&h441A91) and &hFF00)) or (((&h441A91) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 86 ) = (((&h7B5D41) and &hFF) shl 16) or (((&h7B5D41) and &hFF00)) or (((&h7B5D41) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 89 ) = (((&h1C58A7) and &hFF) shl 16) or (((&h1C58A7) and &hFF00)) or (((&h1C58A7) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 92 ) = (((&hBB805A) and &hFF) shl 16) or (((&hBB805A) and &hFF00)) or (((&hBB805A) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 100 ) = (((&hF9B7A5) and &hFF) shl 16) or (((&hF9B7A5) and &hFF00)) or (((&hF9B7A5) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 110 ) = (((&h26469A) and &hFF) shl 16) or (((&h26469A) and &hFF00)) or (((&h26469A) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 112 ) = (((&h4861AC) and &hFF) shl 16) or (((&h4861AC) and &hFF00)) or (((&h4861AC) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 115 ) = (((&hB7D425) and &hFF) shl 16) or (((&hB7D425) and &hFF00)) or (((&hB7D425) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 118 ) = (((&h9CD6CC) and &hFF) shl 16) or (((&h9CD6CC) and &hFF00)) or (((&h9CD6CC) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 120 ) = (((&hDEEA92) and &hFF) shl 16) or (((&hDEEA92) and &hFF00)) or (((&hDEEA92) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 125 ) = (((&hF9A777) and &hFF) shl 16) or (((&hF9A777) and &hFF00)) or (((&hF9A777) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 128 ) = (((&hAD6140) and &hFF) shl 16) or (((&hAD6140) and &hFF00)) or (((&hAD6140) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 151 ) = (((&hC8C8C8) and &hFF) shl 16) or (((&hC8C8C8) and &hFF00)) or (((&hC8C8C8) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 191 ) = (((&hFCAC00) and &hFF) shl 16) or (((&hFCAC00) and &hFF00)) or (((&hFCAC00) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 212 ) = (((&h9DC3F7) and &hFF) shl 16) or (((&h9DC3F7) and &hFF00)) or (((&h9DC3F7) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 216 ) = (((&h872B17) and &hFF) shl 16) or (((&h872B17) and &hFF00)) or (((&h872B17) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 218 ) = (((&h8E5597) and &hFF) shl 16) or (((&h8E5597) and &hFF00)) or (((&h8E5597) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 219 ) = (((&h564E9D) and &hFF) shl 16) or (((&h564E9D) and &hFF00)) or (((&h564E9D) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 226 ) = (((&hFFEC6C) and &hFF) shl 16) or (((&hFFEC6C) and &hFF00)) or (((&hFFEC6C) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 232 ) = (((&h77C9D8) and &hFF) shl 16) or (((&h77C9D8) and &hFF00)) or (((&h77C9D8) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 272 ) = (((&h19325A) and &hFF) shl 16) or (((&h19325A) and &hFF00)) or (((&h19325A) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 288 ) = (((&h00451A) and &hFF) shl 16) or (((&h00451A) and &hFF00)) or (((&h00451A) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 295 ) = (((&hFF94C2) and &hFF) shl 16) or (((&hFF94C2) and &hFF00)) or (((&hFF94C2) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 308 ) = (((&h352100) and &hFF) shl 16) or (((&h352100) and &hFF00)) or (((&h352100) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 313 ) = (((&hABD9FF) and &hFF) shl 16) or (((&hABD9FF) and &hFF00)) or (((&hABD9FF) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 320 ) = (((&h720012) and &hFF) shl 16) or (((&h720012) and &hFF00)) or (((&h720012) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 321 ) = (((&h469BC3) and &hFF) shl 16) or (((&h469BC3) and &hFF00)) or (((&h469BC3) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 322 ) = (((&h68C3E2) and &hFF) shl 16) or (((&h68C3E2) and &hFF00)) or (((&h68C3E2) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 323 ) = (((&hD3F2EA) and &hFF) shl 16) or (((&hD3F2EA) and &hFF00)) or (((&hD3F2EA) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 326 ) = (((&hE2F99A) and &hFF) shl 16) or (((&hE2F99A) and &hFF00)) or (((&hE2F99A) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 330 ) = (((&h77774E) and &hFF) shl 16) or (((&h77774E) and &hFF00)) or (((&h77774E) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 335 ) = (((&h88605E) and &hFF) shl 16) or (((&h88605E) and &hFF00)) or (((&h88605E) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 351 ) = (((&hF785B1) and &hFF) shl 16) or (((&hF785B1) and &hFF00)) or (((&hF785B1) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 353 ) = (((&hFF6D77) and &hFF) shl 16) or (((&hFF6D77) and &hFF00)) or (((&hFF6D77) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 366 ) = (((&hD86D2C) and &hFF) shl 16) or (((&hD86D2C) and &hFF00)) or (((&hD86D2C) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 368 ) = (((&hEDFF21) and &hFF) shl 16) or (((&hEDFF21) and &hFF00)) or (((&hEDFF21) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 370 ) = (((&h755945) and &hFF) shl 16) or (((&h755945) and &hFF00)) or (((&h755945) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 371 ) = (((&hCCA373) and &hFF) shl 16) or (((&hCCA373) and &hFF00)) or (((&hCCA373) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 373 ) = (((&h75657D) and &hFF) shl 16) or (((&h75657D) and &hFF00)) or (((&h75657D) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 378 ) = (((&h708E7C) and &hFF) shl 16) or (((&h708E7C) and &hFF00)) or (((&h708E7C) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 379 ) = (((&h70819A) and &hFF) shl 16) or (((&h70819A) and &hFF00)) or (((&h70819A) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 402 ) = (((&hCA4C0B) and &hFF) shl 16) or (((&hCA4C0B) and &hFF00)) or (((&hCA4C0B) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 422 ) = (((&h915C3C) and &hFF) shl 16) or (((&h915C3C) and &hFF00)) or (((&h915C3C) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 423 ) = (((&h543F33) and &hFF) shl 16) or (((&h543F33) and &hFF00)) or (((&h543F33) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 450 ) = (((&hD27744) and &hFF) shl 16) or (((&hD27744) and &hFF00)) or (((&hD27744) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 462 ) = (((&hF58624) and &hFF) shl 16) or (((&hF58624) and &hFF00)) or (((&hF58624) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 484 ) = (((&h91501C) and &hFF) shl 16) or (((&h91501C) and &hFF00)) or (((&h91501C) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 503 ) = (((&hBCB4A5) and &hFF) shl 16) or (((&hBCB4A5) and &hFF00)) or (((&hBCB4A5) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 507 ) = (((&hFA9C1C) and &hFF) shl 16) or (((&hFA9C1C) and &hFF00)) or (((&hFA9C1C) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 508 ) = (((&hFF8014) and &hFF) shl 16) or (((&hFF8014) and &hFF00)) or (((&hFF8014) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 509 ) = (((&hCF8A47) and &hFF) shl 16) or (((&hCF8A47) and &hFF00)) or (((&hCF8A47) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 510 ) = (((&h78FC78) and &hFF) shl 16) or (((&h78FC78) and &hFF00)) or (((&h78FC78) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 33 ) = (((&h0020A0) and &hFF) shl 16) or (((&h0020A0) and &hFF00)) or (((&h0020A0) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 34 ) = (((&h237841) and &hFF) shl 16) or (((&h237841) and &hFF00)) or (((&h237841) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 35 ) = (((&h56E646) and &hFF) shl 16) or (((&h56E646) and &hFF00)) or (((&h56E646) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 36 ) = (((&hC91A09) and &hFF) shl 16) or (((&hC91A09) and &hFF00)) or (((&hC91A09) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 37 ) = (((&hDF6695) and &hFF) shl 16) or (((&hDF6695) and &hFF00)) or (((&hDF6695) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 38 ) = (((&hFF800D) and &hFF) shl 16) or (((&hFF800D) and &hFF00)) or (((&hFF800D) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 39 ) = (((&hC1DFF0) and &hFF) shl 16) or (((&hC1DFF0) and &hFF00)) or (((&hC1DFF0) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 40 ) = (((&h635F52) and &hFF) shl 16) or (((&h635F52) and &hFF00)) or (((&h635F52) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 41 ) = (((&h559AB7) and &hFF) shl 16) or (((&h559AB7) and &hFF00)) or (((&h559AB7) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 42 ) = (((&hC0FF00) and &hFF) shl 16) or (((&hC0FF00) and &hFF00)) or (((&hC0FF00) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 43 ) = (((&hAEE9EF) and &hFF) shl 16) or (((&hAEE9EF) and &hFF00)) or (((&hAEE9EF) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 44 ) = (((&h96709F) and &hFF) shl 16) or (((&h96709F) and &hFF00)) or (((&h96709F) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 45 ) = (((&hFC97AC) and &hFF) shl 16) or (((&hFC97AC) and &hFF00)) or (((&hFC97AC) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 46 ) = (((&hF5CD2F) and &hFF) shl 16) or (((&hF5CD2F) and &hFF00)) or (((&hF5CD2F) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 47 ) = (((&hFCFCFC) and &hFF) shl 16) or (((&hFCFCFC) and &hFF00)) or (((&hFCFCFC) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 52 ) = (((&hA5A5CB) and &hFF) shl 16) or (((&hA5A5CB) and &hFF00)) or (((&hA5A5CB) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 54 ) = (((&hDAB000) and &hFF) shl 16) or (((&hDAB000) and &hFF00)) or (((&hDAB000) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 57 ) = (((&hF08F1C) and &hFF) shl 16) or (((&hF08F1C) and &hFF00)) or (((&hF08F1C) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 32 ) = (((&h0000000) and &hFF) shl 16) or (((&h0000000) and &hFF00)) or (((&h0000000) and &hFF0000) shr 16) or ((210) shl 24)
 g_Colours( 158 ) = (((&hF18EBB) and &hFF) shl 16) or (((&hF18EBB) and &hFF00)) or (((&hF18EBB) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 227 ) = (((&hB5D96C) and &hFF) shl 16) or (((&hB5D96C) and &hFF00)) or (((&hB5D96C) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 231 ) = (((&hFCB76D) and &hFF) shl 16) or (((&hFCB76D) and &hFF00)) or (((&hFCB76D) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 234 ) = (((&hFBE890) and &hFF) shl 16) or (((&hFBE890) and &hFF00)) or (((&hFBE890) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 284 ) = (((&hC281A5) and &hFF) shl 16) or (((&hC281A5) and &hFF00)) or (((&hC281A5) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 285 ) = (((&h7DC291) and &hFF) shl 16) or (((&h7DC291) and &hFF00)) or (((&h7DC291) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 293 ) = (((&h6BABE4) and &hFF) shl 16) or (((&h6BABE4) and &hFF00)) or (((&h6BABE4) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 10375 ) = (((&h212121) and &hFF) shl 16) or (((&h212121) and &hFF00)) or (((&h212121) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 60 ) = (((&h645A4C) and &hFF) shl 16) or (((&h645A4C) and &hFF00)) or (((&h645A4C) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 61 ) = (((&h6C96BF) and &hFF) shl 16) or (((&h6C96BF) and &hFF00)) or (((&h6C96BF) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 62 ) = (((&h3CB371) and &hFF) shl 16) or (((&h3CB371) and &hFF00)) or (((&h3CB371) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 63 ) = (((&hAA4D8E) and &hFF) shl 16) or (((&hAA4D8E) and &hFF00)) or (((&hAA4D8E) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 64 ) = (((&h1B2A34) and &hFF) shl 16) or (((&h1B2A34) and &hFF00)) or (((&h1B2A34) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 334 ) = (((&hDFC176) and &hFF) shl 16) or (((&hDFC176) and &hFF00)) or (((&hDFC176) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 383 ) = (((&hCECECE) and &hFF) shl 16) or (((&hCECECE) and &hFF00)) or (((&hCECECE) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 83 ) = (((&h0A1327) and &hFF) shl 16) or (((&h0A1327) and &hFF00)) or (((&h0A1327) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 134 ) = (((&h764D3B) and &hFF) shl 16) or (((&h764D3B) and &hFF00)) or (((&h764D3B) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 135 ) = (((&hA0A0A0) and &hFF) shl 16) or (((&hA0A0A0) and &hFF00)) or (((&hA0A0A0) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 137 ) = (((&h5B7590) and &hFF) shl 16) or (((&h5B7590) and &hFF00)) or (((&h5B7590) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 142 ) = (((&hDEAC66) and &hFF) shl 16) or (((&hDEAC66) and &hFF00)) or (((&hDEAC66) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 147 ) = (((&h83724F) and &hFF) shl 16) or (((&h83724F) and &hFF00)) or (((&h83724F) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 148 ) = (((&h484D48) and &hFF) shl 16) or (((&h484D48) and &hFF00)) or (((&h484D48) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 150 ) = (((&h989B99) and &hFF) shl 16) or (((&h989B99) and &hFF00)) or (((&h989B99) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 176 ) = (((&h945148) and &hFF) shl 16) or (((&h945148) and &hFF00)) or (((&h945148) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 178 ) = (((&hAB673A) and &hFF) shl 16) or (((&hAB673A) and &hFF00)) or (((&hAB673A) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 179 ) = (((&h898788) and &hFF) shl 16) or (((&h898788) and &hFF00)) or (((&h898788) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 183 ) = (((&hF6F2DF) and &hFF) shl 16) or (((&hF6F2DF) and &hFF00)) or (((&hF6F2DF) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 184 ) = (((&hD60026) and &hFF) shl 16) or (((&hD60026) and &hFF00)) or (((&hD60026) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 185 ) = (((&h0059A3) and &hFF) shl 16) or (((&h0059A3) and &hFF00)) or (((&h0059A3) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 186 ) = (((&h008E3C) and &hFF) shl 16) or (((&h008E3C) and &hFF00)) or (((&h008E3C) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 187 ) = (((&h57392C) and &hFF) shl 16) or (((&h57392C) and &hFF00)) or (((&h57392C) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 189 ) = (((&hAC8247) and &hFF) shl 16) or (((&hAC8247) and &hFF00)) or (((&hAC8247) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 200 ) = (((&h708224) and &hFF) shl 16) or (((&h708224) and &hFF00)) or (((&h708224) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 297 ) = (((&hAA7F2E) and &hFF) shl 16) or (((&hAA7F2E) and &hFF00)) or (((&hAA7F2E) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 80 ) = (((&h767676) and &hFF) shl 16) or (((&h767676) and &hFF00)) or (((&h767676) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 81 ) = (((&hC2C06F) and &hFF) shl 16) or (((&hC2C06F) and &hFF00)) or (((&hC2C06F) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 82 ) = (((&hDBAC34) and &hFF) shl 16) or (((&hDBAC34) and &hFF00)) or (((&hDBAC34) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 87 ) = (((&h3E3C39) and &hFF) shl 16) or (((&h3E3C39) and &hFF00)) or (((&h3E3C39) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 300 ) = (((&hC27F53) and &hFF) shl 16) or (((&hC27F53) and &hFF00)) or (((&hC27F53) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10045 ) = (((&h97CBD9) and &hFF) shl 16) or (((&h97CBD9) and &hFF00)) or (((&h97CBD9) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10046 ) = (((&hAD659A) and &hFF) shl 16) or (((&hAD659A) and &hFF00)) or (((&hAD659A) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10049 ) = (((&hFECCCF) and &hFF) shl 16) or (((&hFECCCF) and &hFF00)) or (((&hFECCCF) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 79 ) = (((&hEEEEEE) and &hFF) shl 16) or (((&hEEEEEE) and &hFF00)) or (((&hEEEEEE) and &hFF0000) shr 16) or ((240) shl 24)
 g_Colours( 21 ) = (((&hE0FFB0) and &hFF) shl 16) or (((&hE0FFB0) and &hFF00)) or (((&hE0FFB0) and &hFF0000) shr 16) or ((240) shl 24)
 g_Colours( 294 ) = (((&hBDC6AD) and &hFF) shl 16) or (((&hBDC6AD) and &hFF00)) or (((&hBDC6AD) and &hFF0000) shr 16) or ((240) shl 24)
 g_Colours( 329 ) = (((&hF5F3D7) and &hFF) shl 16) or (((&hF5F3D7) and &hFF00)) or (((&hF5F3D7) and &hFF0000) shr 16) or ((240) shl 24)
 g_Colours( 114 ) = (((&hDF6695) and &hFF) shl 16) or (((&hDF6695) and &hFF00)) or (((&hDF6695) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 117 ) = (((&hEEEEEE) and &hFF) shl 16) or (((&hEEEEEE) and &hFF00)) or (((&hEEEEEE) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 129 ) = (((&h640061) and &hFF) shl 16) or (((&h640061) and &hFF00)) or (((&h640061) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 302 ) = (((&hAEE9EF) and &hFF) shl 16) or (((&hAEE9EF) and &hFF00)) or (((&hAEE9EF) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 339 ) = (((&hC0FF00) and &hFF) shl 16) or (((&hC0FF00) and &hFF00)) or (((&hC0FF00) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 341 ) = (((&hF08F1C) and &hFF) shl 16) or (((&hF08F1C) and &hFF00)) or (((&hF08F1C) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 360 ) = (((&hFCFCFC) and &hFF) shl 16) or (((&hFCFCFC) and &hFF00)) or (((&hFCFCFC) and &hFF0000) shr 16) or ((240) shl 24)
 g_Colours( 362 ) = (((&hAEE9EF) and &hFF) shl 16) or (((&hAEE9EF) and &hFF00)) or (((&hAEE9EF) and &hFF0000) shr 16) or ((200) shl 24)
 g_Colours( 363 ) = (((&h635F52) and &hFF) shl 16) or (((&h635F52) and &hFF00)) or (((&h635F52) and &hFF0000) shr 16) or ((200) shl 24)
 g_Colours( 364 ) = (((&hDF6695) and &hFF) shl 16) or (((&hDF6695) and &hFF00)) or (((&hDF6695) and &hFF0000) shr 16) or ((200) shl 24)
 g_Colours( 365 ) = (((&h671F81) and &hFF) shl 16) or (((&h671F81) and &hFF00)) or (((&h671F81) and &hFF0000) shr 16) or ((200) shl 24)
 g_Colours( 367 ) = (((&h237841) and &hFF) shl 16) or (((&h237841) and &hFF00)) or (((&h237841) and &hFF0000) shr 16) or ((200) shl 24)
 g_Colours( 10351 ) = (((&h56E646) and &hFF) shl 16) or (((&h56E646) and &hFF00)) or (((&h56E646) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 10366 ) = (((&h0020A0) and &hFF) shl 16) or (((&h0020A0) and &hFF00)) or (((&h0020A0) and &hFF0000) shr 16) or ((200) shl 24)
 g_Colours( 75 ) = (((&h0000000) and &hFF) shl 16) or (((&h0000000) and &hFF00)) or (((&h0000000) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 76 ) = (((&h635F61) and &hFF) shl 16) or (((&h635F61) and &hFF00)) or (((&h635F61) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 132 ) = (((&h0000000) and &hFF) shl 16) or (((&h0000000) and &hFF00)) or (((&h0000000) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 133 ) = (((&h0000000) and &hFF) shl 16) or (((&h0000000) and &hFF00)) or (((&h0000000) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 65 ) = (((&hFAC80A) and &hFF) shl 16) or (((&hFAC80A) and &hFF00)) or (((&hFAC80A) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 256 ) = (((&h1B2A34) and &hFF) shl 16) or (((&h1B2A34) and &hFF00)) or (((&h1B2A34) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 273 ) = (((&h1E5AA8) and &hFF) shl 16) or (((&h1E5AA8) and &hFF00)) or (((&h1E5AA8) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 324 ) = (((&hB40000) and &hFF) shl 16) or (((&hB40000) and &hFF00)) or (((&hB40000) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 350 ) = (((&hD67923) and &hFF) shl 16) or (((&hD67923) and &hFF00)) or (((&hD67923) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 375 ) = (((&h8A928D) and &hFF) shl 16) or (((&h8A928D) and &hFF00)) or (((&h8A928D) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 406 ) = (((&h19325A) and &hFF) shl 16) or (((&h19325A) and &hFF00)) or (((&h19325A) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 449 ) = (((&h671F81) and &hFF) shl 16) or (((&h671F81) and &hFF00)) or (((&h671F81) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 490 ) = (((&hA5CA18) and &hFF) shl 16) or (((&hA5CA18) and &hFF00)) or (((&hA5CA18) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 496 ) = (((&h969696) and &hFF) shl 16) or (((&h969696) and &hFF00)) or (((&h969696) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 504 ) = (((&h898788) and &hFF) shl 16) or (((&h898788) and &hFF00)) or (((&h898788) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 511 ) = (((&hF4F4F4) and &hFF) shl 16) or (((&hF4F4F4) and &hFF00)) or (((&hF4F4F4) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10002 ) = (((&h00852B) and &hFF) shl 16) or (((&h00852B) and &hFF00)) or (((&h00852B) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10010 ) = (((&h58AB41) and &hFF) shl 16) or (((&h58AB41) and &hFF00)) or (((&h58AB41) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10026 ) = (((&h901F76) and &hFF) shl 16) or (((&h901F76) and &hFF00)) or (((&h901F76) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10030 ) = (((&hA06EB9) and &hFF) shl 16) or (((&hA06EB9) and &hFF00)) or (((&hA06EB9) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10031 ) = (((&hCDA4DE) and &hFF) shl 16) or (((&hCDA4DE) and &hFF00)) or (((&hCDA4DE) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10070 ) = (((&h5F3109) and &hFF) shl 16) or (((&h5F3109) and &hFF00)) or (((&h5F3109) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10073 ) = (((&h7396C8) and &hFF) shl 16) or (((&h7396C8) and &hFF00)) or (((&h7396C8) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10078 ) = (((&hFFC995) and &hFF) shl 16) or (((&hFFC995) and &hFF00)) or (((&hFFC995) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10226 ) = (((&hFFEC6C) and &hFF) shl 16) or (((&hFFEC6C) and &hFF00)) or (((&hFFEC6C) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10308 ) = (((&h352100) and &hFF) shl 16) or (((&h352100) and &hFF00)) or (((&h352100) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10320 ) = (((&h720012) and &hFF) shl 16) or (((&h720012) and &hFF00)) or (((&h720012) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10321 ) = (((&h469BC3) and &hFF) shl 16) or (((&h469BC3) and &hFF00)) or (((&h469BC3) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10322 ) = (((&h68C3E2) and &hFF) shl 16) or (((&h68C3E2) and &hFF00)) or (((&h68C3E2) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10323 ) = (((&hD3F2EA) and &hFF) shl 16) or (((&hD3F2EA) and &hFF00)) or (((&hD3F2EA) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10378 ) = (((&h708E7C) and &hFF) shl 16) or (((&h708E7C) and &hFF00)) or (((&h708E7C) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10484 ) = (((&h91501C) and &hFF) shl 16) or (((&h91501C) and &hFF00)) or (((&h91501C) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 66 ) = (((&hF5CD2F) and &hFF) shl 16) or (((&hF5CD2F) and &hFF00)) or (((&hF5CD2F) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 67 ) = (((&hFCFCFC) and &hFF) shl 16) or (((&hFCFCFC) and &hFF00)) or (((&hFCFCFC) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 10035 ) = (((&h56E646) and &hFF) shl 16) or (((&h56E646) and &hFF00)) or (((&h56E646) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 10036 ) = (((&hC91A09) and &hFF) shl 16) or (((&hC91A09) and &hFF00)) or (((&hC91A09) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 10043 ) = (((&hAEE9EF) and &hFF) shl 16) or (((&hAEE9EF) and &hFF00)) or (((&hAEE9EF) and &hFF0000) shr 16) or ((128) shl 24)
 g_Colours( 16 ) = (((&hFFFF80) and &hFF) shl 16) or (((&hFFFF80) and &hFF00)) or (((&hFFFF80) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 24 ) = (((&h7F7F7F) and &hFF) shl 16) or (((&h7F7F7F) and &hFF00)) or (((&h7F7F7F) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 493 ) = (((&h656761) and &hFF) shl 16) or (((&h656761) and &hFF00)) or (((&h656761) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 494 ) = (((&hD0D0D0) and &hFF) shl 16) or (((&hD0D0D0) and &hFF00)) or (((&hD0D0D0) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 495 ) = (((&hAE7A59) and &hFF) shl 16) or (((&hAE7A59) and &hFF00)) or (((&hAE7A59) and &hFF0000) shr 16) or ((255) shl 24)
 g_Colours( 10047 ) = (((&hFFFFFF) and &hFF) shl 16) or (((&hFFFFFF) and &hFF00)) or (((&hFFFFFF) and &hFF0000) shr 16) or ((16) shl 24)
 g_Colours( 10000 ) = (((&hEBDFD1) and &hFF) shl 16) or (((&hEBDFD1) and &hFF00)) or (((&hEBDFD1) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 0 ) = (((&h808080) and &hFF) shl 16) or (((&h808080) and &hFF00)) or (((&h808080) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 1 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 2 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 3 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 4 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 5 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 6 ) = (((&h1E1E1E) and &hFF) shl 16) or (((&h1E1E1E) and &hFF00)) or (((&h1E1E1E) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 7 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 8 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 9 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 11 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 12 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 13 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 14 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 15 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 17 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 18 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 19 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 20 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 22 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 23 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 25 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 26 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 27 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 28 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 29 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 30 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 31 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 68 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 69 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 70 ) = (((&h808080) and &hFF) shl 16) or (((&h808080) and &hFF00)) or (((&h808080) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 71 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 72 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 73 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 74 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 77 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 78 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 84 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 85 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 86 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 89 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 92 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 100 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 110 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 112 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 115 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 118 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 120 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 125 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 128 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 151 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 191 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 212 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 216 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 218 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 219 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 226 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 232 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 272 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 288 ) = (((&h808080) and &hFF) shl 16) or (((&h808080) and &hFF00)) or (((&h808080) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 295 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 308 ) = (((&h808080) and &hFF) shl 16) or (((&h808080) and &hFF00)) or (((&h808080) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 313 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 320 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 321 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 322 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 323 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 326 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 330 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 335 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 351 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 353 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 366 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 368 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 370 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 371 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 373 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 378 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 379 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 402 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 422 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 423 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 450 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 462 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 484 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 503 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 507 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 508 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 509 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 510 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 33 ) = (((&h000B38) and &hFF) shl 16) or (((&h000B38) and &hFF00)) or (((&h000B38) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 34 ) = (((&h174F2B) and &hFF) shl 16) or (((&h174F2B) and &hFF00)) or (((&h174F2B) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 35 ) = (((&h27AF18) and &hFF) shl 16) or (((&h27AF18) and &hFF00)) or (((&h27AF18) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 36 ) = (((&h660D05) and &hFF) shl 16) or (((&h660D05) and &hFF00)) or (((&h660D05) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 37 ) = (((&hB9275F) and &hFF) shl 16) or (((&hB9275F) and &hFF00)) or (((&hB9275F) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 38 ) = (((&hA85100) and &hFF) shl 16) or (((&hA85100) and &hFF00)) or (((&hA85100) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 39 ) = (((&h6FB4DC) and &hFF) shl 16) or (((&h6FB4DC) and &hFF00)) or (((&h6FB4DC) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 40 ) = (((&h2A2823) and &hFF) shl 16) or (((&h2A2823) and &hFF00)) or (((&h2A2823) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 41 ) = (((&h326276) and &hFF) shl 16) or (((&h326276) and &hFF00)) or (((&h326276) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 42 ) = (((&h739900) and &hFF) shl 16) or (((&h739900) and &hFF00)) or (((&h739900) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 43 ) = (((&h59D1DE) and &hFF) shl 16) or (((&h59D1DE) and &hFF00)) or (((&h59D1DE) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 44 ) = (((&h5F4365) and &hFF) shl 16) or (((&h5F4365) and &hFF00)) or (((&h5F4365) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 45 ) = (((&hF9345B) and &hFF) shl 16) or (((&hF9345B) and &hFF00)) or (((&hF9345B) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 46 ) = (((&hB49208) and &hFF) shl 16) or (((&hB49208) and &hFF00)) or (((&hB49208) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 47 ) = (((&hC9C9C9) and &hFF) shl 16) or (((&hC9C9C9) and &hFF00)) or (((&hC9C9C9) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 52 ) = (((&h6464A6) and &hFF) shl 16) or (((&h6464A6) and &hFF00)) or (((&h6464A6) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 54 ) = (((&h755E00) and &hFF) shl 16) or (((&h755E00) and &hFF00)) or (((&h755E00) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 57 ) = (((&h9E5C0A) and &hFF) shl 16) or (((&h9E5C0A) and &hFF00)) or (((&h9E5C0A) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 32 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((210) shl 24)
 g_EdgeColours( 158 ) = (((&hE63384) and &hFF) shl 16) or (((&hE63384) and &hFF00)) or (((&hE63384) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 227 ) = (((&h86B22E) and &hFF) shl 16) or (((&h86B22E) and &hFF00)) or (((&h86B22E) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 231 ) = (((&hFA860A) and &hFF) shl 16) or (((&hFA860A) and &hFF00)) or (((&hFA860A) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 234 ) = (((&hF7D22B) and &hFF) shl 16) or (((&hF7D22B) and &hFF00)) or (((&hF7D22B) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 284 ) = (((&h944771) and &hFF) shl 16) or (((&h944771) and &hFF00)) or (((&h944771) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 285 ) = (((&h46955D) and &hFF) shl 16) or (((&h46955D) and &hFF00)) or (((&h46955D) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 293 ) = (((&h247BC6) and &hFF) shl 16) or (((&h247BC6) and &hFF00)) or (((&h247BC6) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 10375 ) = (((&h545454) and &hFF) shl 16) or (((&h545454) and &hFF00)) or (((&h545454) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 60 ) = (((&h665B4D) and &hFF) shl 16) or (((&h665B4D) and &hFF00)) or (((&h665B4D) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 61 ) = (((&h3D638A) and &hFF) shl 16) or (((&h3D638A) and &hFF00)) or (((&h3D638A) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 62 ) = (((&h226741) and &hFF) shl 16) or (((&h226741) and &hFF00)) or (((&h226741) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 63 ) = (((&h632C52) and &hFF) shl 16) or (((&h632C52) and &hFF00)) or (((&h632C52) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 64 ) = (((&h3D5F76) and &hFF) shl 16) or (((&h3D5F76) and &hFF00)) or (((&h3D5F76) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 334 ) = (((&hC2982E) and &hFF) shl 16) or (((&hC2982E) and &hFF00)) or (((&hC2982E) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 383 ) = (((&h9C9C9C) and &hFF) shl 16) or (((&h9C9C9C) and &hFF00)) or (((&h9C9C9C) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 83 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 134 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 135 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 137 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 142 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 147 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 148 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 150 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 176 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 178 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 179 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 183 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 184 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 185 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 186 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 187 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 189 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 200 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 297 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 80 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 81 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 82 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 87 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 300 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10045 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10046 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10049 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 79 ) = (((&hBABABA) and &hFF) shl 16) or (((&hBABABA) and &hFF00)) or (((&hBABABA) and &hFF0000) shr 16) or ((240) shl 24)
 g_EdgeColours( 21 ) = (((&hB8FF4D) and &hFF) shl 16) or (((&hB8FF4D) and &hFF00)) or (((&hB8FF4D) and &hFF0000) shr 16) or ((240) shl 24)
 g_EdgeColours( 294 ) = (((&h8D9D72) and &hFF) shl 16) or (((&h8D9D72) and &hFF00)) or (((&h8D9D72) and &hFF0000) shr 16) or ((240) shl 24)
 g_EdgeColours( 329 ) = (((&hE0DA85) and &hFF) shl 16) or (((&hE0DA85) and &hFF00)) or (((&hE0DA85) and &hFF0000) shr 16) or ((240) shl 24)
 g_EdgeColours( 114 ) = (((&hB9275F) and &hFF) shl 16) or (((&hB9275F) and &hFF00)) or (((&hB9275F) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 117 ) = (((&hBABABA) and &hFF) shl 16) or (((&hBABABA) and &hFF00)) or (((&hBABABA) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 129 ) = (((&h0000000) and &hFF) shl 16) or (((&h0000000) and &hFF00)) or (((&h0000000) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 302 ) = (((&h59D1DE) and &hFF) shl 16) or (((&h59D1DE) and &hFF00)) or (((&h59D1DE) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 339 ) = (((&h739900) and &hFF) shl 16) or (((&h739900) and &hFF00)) or (((&h739900) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 341 ) = (((&h9E5C0A) and &hFF) shl 16) or (((&h9E5C0A) and &hFF00)) or (((&h9E5C0A) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 360 ) = (((&hC9C9C9) and &hFF) shl 16) or (((&hC9C9C9) and &hFF00)) or (((&hC9C9C9) and &hFF0000) shr 16) or ((240) shl 24)
 g_EdgeColours( 362 ) = (((&h59D1DE) and &hFF) shl 16) or (((&h59D1DE) and &hFF00)) or (((&h59D1DE) and &hFF0000) shr 16) or ((200) shl 24)
 g_EdgeColours( 363 ) = (((&h2A2823) and &hFF) shl 16) or (((&h2A2823) and &hFF00)) or (((&h2A2823) and &hFF0000) shr 16) or ((200) shl 24)
 g_EdgeColours( 364 ) = (((&hB9275F) and &hFF) shl 16) or (((&hB9275F) and &hFF00)) or (((&hB9275F) and &hFF0000) shr 16) or ((200) shl 24)
 g_EdgeColours( 365 ) = (((&h441456) and &hFF) shl 16) or (((&h441456) and &hFF00)) or (((&h441456) and &hFF0000) shr 16) or ((200) shl 24)
 g_EdgeColours( 367 ) = (((&h174F2B) and &hFF) shl 16) or (((&h174F2B) and &hFF00)) or (((&h174F2B) and &hFF0000) shr 16) or ((200) shl 24)
 g_EdgeColours( 10351 ) = (((&h27AF18) and &hFF) shl 16) or (((&h27AF18) and &hFF00)) or (((&h27AF18) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 10366 ) = (((&h000B38) and &hFF) shl 16) or (((&h000B38) and &hFF00)) or (((&h000B38) and &hFF0000) shr 16) or ((200) shl 24)
 g_EdgeColours( 75 ) = (((&hAB6038) and &hFF) shl 16) or (((&hAB6038) and &hFF00)) or (((&hAB6038) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 76 ) = (((&h898788) and &hFF) shl 16) or (((&h898788) and &hFF00)) or (((&h898788) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 132 ) = (((&h898788) and &hFF) shl 16) or (((&h898788) and &hFF00)) or (((&h898788) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 133 ) = (((&hDBAC34) and &hFF) shl 16) or (((&hDBAC34) and &hFF00)) or (((&hDBAC34) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 65 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 256 ) = (((&h808080) and &hFF) shl 16) or (((&h808080) and &hFF00)) or (((&h808080) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 273 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 324 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 350 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 375 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 406 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 449 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 490 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 496 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 504 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 511 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10002 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10010 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10026 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10030 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10031 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10070 ) = (((&h808080) and &hFF) shl 16) or (((&h808080) and &hFF00)) or (((&h808080) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10073 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10078 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10226 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10308 ) = (((&h808080) and &hFF) shl 16) or (((&h808080) and &hFF00)) or (((&h808080) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10320 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10321 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10322 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10323 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10378 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10484 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 66 ) = (((&hB49208) and &hFF) shl 16) or (((&hB49208) and &hFF00)) or (((&hB49208) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 67 ) = (((&hC9C9C9) and &hFF) shl 16) or (((&hC9C9C9) and &hFF00)) or (((&hC9C9C9) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 10035 ) = (((&h27AF18) and &hFF) shl 16) or (((&h27AF18) and &hFF00)) or (((&h27AF18) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 10036 ) = (((&h660D05) and &hFF) shl 16) or (((&h660D05) and &hFF00)) or (((&h660D05) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 10043 ) = (((&h59D1DE) and &hFF) shl 16) or (((&h59D1DE) and &hFF00)) or (((&h59D1DE) and &hFF0000) shr 16) or ((128) shl 24)
 g_EdgeColours( 16 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 24 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 493 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 494 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 495 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
 g_EdgeColours( 10047 ) = (((&hFFFFFF) and &hFF) shl 16) or (((&hFFFFFF) and &hFF00)) or (((&hFFFFFF) and &hFF0000) shr 16) or ((16) shl 24)
 g_EdgeColours( 10000 ) = (((&h333333) and &hFF) shl 16) or (((&h333333) and &hFF00)) or (((&h333333) and &hFF0000) shr 16) or ((255) shl 24)
end scope


declare function SetClipboard(MYSTRING as string) as integer
declare function SetClipboardW(MYSTRING as wstring ptr) as integer
declare function GetClipboard() as string

function SetClipboard(MYSTRING as string) as integer
 function = 0
 do
 if OpenClipboard(NULL) = 0 then return 0
 if EmptyClipboard() = 0 then exit do
 dim as zstring ptr MYCLIPPTR
 dim as hglobal MYCLIPHAN
 MYCLIPHAN = GlobalAlloc(GMEM_MOVEABLE or GMEM_SHARE , len(MYSTRING)+1 )
 MYCLIPPTR = GlobalLock(MYCLIPHAN)
 if MYCLIPHAN = 0 or MYCLIPPTR = 0 then exit do
 *MYCLIPPTR = MYSTRING
 GlobalUnlock(MYCLIPPTR)
 if SetClipboardData(CF_TEXT,MYCLIPHAN) = 0 then exit do
 function = 1 : exit do
 loop
 CloseClipboard()
end function
function SetClipboardW(MYSTRING as wstring ptr) as integer
 if OpenClipboard(null) = 0 then return 0
 if EmptyClipboard() = 0 then return 0
 dim as wstring ptr MYCLIPPTR
 dim as hglobal MYCLIPHAN
 MYCLIPHAN = GlobalAlloc(GMEM_MOVEABLE or GMEM_SHARE , len(*MYSTRING)*2+1 )
 MYCLIPPTR = GlobalLock(MYCLIPHAN)
 if MYCLIPHAN = 0 or MYCLIPPTR = 0 then return 0
 *MYCLIPPTR = *MYSTRING
 GlobalUnlock(MYCLIPPTR)
 if SetClipboardData(CF_UNICODETEXT,MYCLIPHAN) = 0 then return 0
 if CloseClipboard() = 0 then return 0
 return 1
end function

function GetClipboard() as string
 OpenClipboard(null)
 dim as zstring ptr MYCLIPPTR
 dim as hglobal MYCLIPHAN
 MYCLIPHAN = GetClipboardData(CF_TEXT)
 MYCLIPPTR = GlobalLock(MYCLIPHAN)
 function = *MYCLIPPTR
 GlobalUnlock(MYCLIPPTR)
 CloseClipboard()
end function

function GetBitmapFromClipboard() as any ptr
 if OpenClipboard(null) = 0 then return 0
 dim as BITMAPINFO ptr MYDIB
 dim as hglobal MYCLIPHAN
 DeleteObject(GetClipboardData(CF_BITMAP))

 CloseClipboard()
end function






#inclib "opengl32"

extern "Windows"

type GLenum as ulong
type GLboolean as ubyte
type GLbitfield as ulong
type GLbyte as byte
type GLshort as short
type GLint as long
type GLsizei as long
type GLubyte as ubyte
type GLushort as ushort
type GLuint as ulong
type GLfloat as single
type GLclampf as single
type GLdouble as double
type GLclampd as double
type GLvoid as any

const GL_VERSION_1_1 = 1
const GL_ACCUM = &h0100
const GL_LOAD = &h0101
const GL_RETURN = &h0102
const GL_MULT = &h0103
const GL_ADD = &h0104
const GL_NEVER = &h0200
const GL_LESS = &h0201
const GL_EQUAL = &h0202
const GL_LEQUAL = &h0203
const GL_GREATER = &h0204
const GL_NOTEQUAL = &h0205
const GL_GEQUAL = &h0206
const GL_ALWAYS = &h0207
const GL_CURRENT_BIT = &h00000001
const GL_POINT_BIT = &h00000002
const GL_LINE_BIT = &h00000004
const GL_POLYGON_BIT = &h00000008
const GL_POLYGON_STIPPLE_BIT = &h00000010
const GL_PIXEL_MODE_BIT = &h00000020
const GL_LIGHTING_BIT = &h00000040
const GL_FOG_BIT = &h00000080
const GL_DEPTH_BUFFER_BIT = &h00000100
const GL_ACCUM_BUFFER_BIT = &h00000200
const GL_STENCIL_BUFFER_BIT = &h00000400
const GL_VIEWPORT_BIT = &h00000800
const GL_TRANSFORM_BIT = &h00001000
const GL_ENABLE_BIT = &h00002000
const GL_COLOR_BUFFER_BIT = &h00004000
const GL_HINT_BIT = &h00008000
const GL_EVAL_BIT = &h00010000
const GL_LIST_BIT = &h00020000
const GL_TEXTURE_BIT = &h00040000
const GL_SCISSOR_BIT = &h00080000
const GL_ALL_ATTRIB_BITS = &h000fffff
const GL_POINTS = &h00000
const GL_LINES = &h0001
const GL_LINE_LOOP = &h0002
const GL_LINE_STRIP = &h0003
const GL_TRIANGLES = &h0004
const GL_TRIANGLE_STRIP = &h0005
const GL_TRIANGLE_FAN = &h0006
const GL_QUADS = &h0007
const GL_QUAD_STRIP = &h0008
const GL_POLYGON = &h0009
const GL_ZERO = 0
const GL_ONE = 1
const GL_SRC_COLOR = &h0300
const GL_ONE_MINUS_SRC_COLOR = &h0301
const GL_SRC_ALPHA = &h0302
const GL_ONE_MINUS_SRC_ALPHA = &h0303
const GL_DST_ALPHA = &h0304
const GL_ONE_MINUS_DST_ALPHA = &h0305
const GL_DST_COLOR = &h0306
const GL_ONE_MINUS_DST_COLOR = &h0307
const GL_SRC_ALPHA_SATURATE = &h0308
const GL_TRUE = 1
const GL_FALSE = 0
const GL_CLIP_PLANE0 = &h3000
const GL_CLIP_PLANE1 = &h3001
const GL_CLIP_PLANE2 = &h3002
const GL_CLIP_PLANE3 = &h3003
const GL_CLIP_PLANE4 = &h3004
const GL_CLIP_PLANE5 = &h3005
const GL_BYTE = &h1400
const GL_UNSIGNED_BYTE = &h1401
const GL_SHORT = &h1402
const GL_UNSIGNED_SHORT = &h1403
const GL_INT = &h1404
const GL_UNSIGNED_INT = &h1405
const GL_FLOAT = &h1406
const GL_2_BYTES = &h1407
const GL_3_BYTES = &h1408
const GL_4_BYTES = &h1409
const GL_DOUBLE = &h140A
const GL_NONE = 0
const GL_FRONT_LEFT = &h0400
const GL_FRONT_RIGHT = &h0401
const GL_BACK_LEFT = &h0402
const GL_BACK_RIGHT = &h0403
const GL_FRONT = &h0404
const GL_BACK = &h0405
const GL_LEFT = &h0406
const GL_RIGHT = &h0407
const GL_FRONT_AND_BACK = &h0408
const GL_AUX0 = &h0409
const GL_AUX1 = &h040A
const GL_AUX2 = &h040B
const GL_AUX3 = &h040C
const GL_NO_ERROR = 0
const GL_INVALID_ENUM = &h0500
const GL_INVALID_VALUE = &h0501
const GL_INVALID_OPERATION = &h0502
const GL_STACK_OVERFLOW = &h0503
const GL_STACK_UNDERFLOW = &h0504
const GL_OUT_OF_MEMORY = &h0505
const GL_2D = &h0600
const GL_3D = &h0601
const GL_3D_COLOR = &h0602
const GL_3D_COLOR_TEXTURE = &h0603
const GL_4D_COLOR_TEXTURE = &h0604
const GL_PASS_THROUGH_TOKEN = &h0700
const GL_POINT_TOKEN = &h0701
const GL_LINE_TOKEN = &h0702
const GL_POLYGON_TOKEN = &h0703
const GL_BITMAP_TOKEN = &h0704
const GL_DRAW_PIXEL_TOKEN = &h0705
const GL_COPY_PIXEL_TOKEN = &h0706
const GL_LINE_RESET_TOKEN = &h0707
const GL_EXP = &h0800
const GL_EXP2 = &h0801
const GL_CW = &h0900
const GL_CCW = &h0901
const GL_COEFF = &h0A00
const GL_ORDER = &h0A01
const GL_DOMAIN = &h0A02
const GL_CURRENT_COLOR = &h0B00
const GL_CURRENT_INDEX = &h0B01
const GL_CURRENT_NORMAL = &h0B02
const GL_CURRENT_TEXTURE_COORDS = &h0B03
const GL_CURRENT_RASTER_COLOR = &h0B04
const GL_CURRENT_RASTER_INDEX = &h0B05
const GL_CURRENT_RASTER_TEXTURE_COORDS = &h0B06
const GL_CURRENT_RASTER_POSITION = &h0B07
const GL_CURRENT_RASTER_POSITION_VALID = &h0B08
const GL_CURRENT_RASTER_DISTANCE = &h0B09
const GL_POINT_SMOOTH = &h0B10
const GL_POINT_SIZE = &h0B11
const GL_POINT_SIZE_RANGE = &h0B12
const GL_POINT_SIZE_GRANULARITY = &h0B13
const GL_LINE_SMOOTH = &h0B20
const GL_LINE_WIDTH = &h0B21
const GL_LINE_WIDTH_RANGE = &h0B22
const GL_LINE_WIDTH_GRANULARITY = &h0B23
const GL_LINE_STIPPLE = &h0B24
const GL_LINE_STIPPLE_PATTERN = &h0B25
const GL_LINE_STIPPLE_REPEAT = &h0B26
const GL_LIST_MODE = &h0B30
const GL_MAX_LIST_NESTING = &h0B31
const GL_LIST_BASE = &h0B32
const GL_LIST_INDEX = &h0B33
const GL_POLYGON_MODE = &h0B40
const GL_POLYGON_SMOOTH = &h0B41
const GL_POLYGON_STIPPLE = &h0B42
const GL_EDGE_FLAG = &h0B43
const GL_CULL_FACE = &h0B44
const GL_CULL_FACE_MODE = &h0B45
const GL_FRONT_FACE = &h0B46
const GL_LIGHTING = &h0B50
const GL_LIGHT_MODEL_LOCAL_VIEWER = &h0B51
const GL_LIGHT_MODEL_TWO_SIDE = &h0B52
const GL_LIGHT_MODEL_AMBIENT = &h0B53
const GL_SHADE_MODEL = &h0B54
const GL_COLOR_MATERIAL_FACE = &h0B55
const GL_COLOR_MATERIAL_PARAMETER = &h0B56
const GL_COLOR_MATERIAL = &h0B57
const GL_FOG = &h0B60
const GL_FOG_INDEX = &h0B61
const GL_FOG_DENSITY = &h0B62
const GL_FOG_START = &h0B63
const GL_FOG_END = &h0B64
const GL_FOG_MODE = &h0B65
const GL_FOG_COLOR = &h0B66
const GL_DEPTH_RANGE = &h0B70
const GL_DEPTH_TEST = &h0B71
const GL_DEPTH_WRITEMASK = &h0B72
const GL_DEPTH_CLEAR_VALUE = &h0B73
const GL_DEPTH_FUNC = &h0B74
const GL_ACCUM_CLEAR_VALUE = &h0B80
const GL_STENCIL_TEST = &h0B90
const GL_STENCIL_CLEAR_VALUE = &h0B91
const GL_STENCIL_FUNC = &h0B92
const GL_STENCIL_VALUE_MASK = &h0B93
const GL_STENCIL_FAIL = &h0B94
const GL_STENCIL_PASS_DEPTH_FAIL = &h0B95
const GL_STENCIL_PASS_DEPTH_PASS = &h0B96
const GL_STENCIL_REF = &h0B97
const GL_STENCIL_WRITEMASK = &h0B98
const GL_MATRIX_MODE = &h0BA0
const GL_NORMALIZE = &h0BA1
const GL_VIEWPORT = &h0BA2
const GL_MODELVIEW_STACK_DEPTH = &h0BA3
const GL_PROJECTION_STACK_DEPTH = &h0BA4
const GL_TEXTURE_STACK_DEPTH = &h0BA5
const GL_MODELVIEW_MATRIX = &h0BA6
const GL_PROJECTION_MATRIX = &h0BA7
const GL_TEXTURE_MATRIX = &h0BA8
const GL_ATTRIB_STACK_DEPTH = &h0BB0
const GL_CLIENT_ATTRIB_STACK_DEPTH = &h0BB1
const GL_ALPHA_TEST = &h0BC0
const GL_ALPHA_TEST_FUNC = &h0BC1
const GL_ALPHA_TEST_REF = &h0BC2
const GL_DITHER = &h0BD0
const GL_BLEND_DST = &h0BE0
const GL_BLEND_SRC = &h0BE1
const GL_BLEND = &h0BE2
const GL_LOGIC_OP_MODE = &h0BF0
const GL_INDEX_LOGIC_OP = &h0BF1
const GL_COLOR_LOGIC_OP = &h0BF2
const GL_AUX_BUFFERS = &h0C00
const GL_DRAW_BUFFER = &h0C01
const GL_READ_BUFFER = &h0C02
const GL_SCISSOR_BOX = &h0C10
const GL_SCISSOR_TEST = &h0C11
const GL_INDEX_CLEAR_VALUE = &h0C20
const GL_INDEX_WRITEMASK = &h0C21
const GL_COLOR_CLEAR_VALUE = &h0C22
const GL_COLOR_WRITEMASK = &h0C23
const GL_INDEX_MODE = &h0C30
const GL_RGBA_MODE = &h0C31
const GL_DOUBLEBUFFER = &h0C32
const GL_STEREO = &h0C33
const GL_RENDER_MODE = &h0C40
const GL_PERSPECTIVE_CORRECTION_HINT = &h0C50
const GL_POINT_SMOOTH_HINT = &h0C51
const GL_LINE_SMOOTH_HINT = &h0C52
const GL_POLYGON_SMOOTH_HINT = &h0C53
const GL_FOG_HINT = &h0C54
const GL_TEXTURE_GEN_S = &h0C60
const GL_TEXTURE_GEN_T = &h0C61
const GL_TEXTURE_GEN_R = &h0C62
const GL_TEXTURE_GEN_Q = &h0C63
const GL_PIXEL_MAP_I_TO_I = &h0C70
const GL_PIXEL_MAP_S_TO_S = &h0C71
const GL_PIXEL_MAP_I_TO_R = &h0C72
const GL_PIXEL_MAP_I_TO_G = &h0C73
const GL_PIXEL_MAP_I_TO_B = &h0C74
const GL_PIXEL_MAP_I_TO_A = &h0C75
const GL_PIXEL_MAP_R_TO_R = &h0C76
const GL_PIXEL_MAP_G_TO_G = &h0C77
const GL_PIXEL_MAP_B_TO_B = &h0C78
const GL_PIXEL_MAP_A_TO_A = &h0C79
const GL_PIXEL_MAP_I_TO_I_SIZE = &h0CB0
const GL_PIXEL_MAP_S_TO_S_SIZE = &h0CB1
const GL_PIXEL_MAP_I_TO_R_SIZE = &h0CB2
const GL_PIXEL_MAP_I_TO_G_SIZE = &h0CB3
const GL_PIXEL_MAP_I_TO_B_SIZE = &h0CB4
const GL_PIXEL_MAP_I_TO_A_SIZE = &h0CB5
const GL_PIXEL_MAP_R_TO_R_SIZE = &h0CB6
const GL_PIXEL_MAP_G_TO_G_SIZE = &h0CB7
const GL_PIXEL_MAP_B_TO_B_SIZE = &h0CB8
const GL_PIXEL_MAP_A_TO_A_SIZE = &h0CB9
const GL_UNPACK_SWAP_BYTES = &h0CF0
const GL_UNPACK_LSB_FIRST = &h0CF1
const GL_UNPACK_ROW_LENGTH = &h0CF2
const GL_UNPACK_SKIP_ROWS = &h0CF3
const GL_UNPACK_SKIP_PIXELS = &h0CF4
const GL_UNPACK_ALIGNMENT = &h0CF5
const GL_PACK_SWAP_BYTES = &h0D00
const GL_PACK_LSB_FIRST = &h0D01
const GL_PACK_ROW_LENGTH = &h0D02
const GL_PACK_SKIP_ROWS = &h0D03
const GL_PACK_SKIP_PIXELS = &h0D04
const GL_PACK_ALIGNMENT = &h0D05
const GL_MAP_COLOR = &h0D10
const GL_MAP_STENCIL = &h0D11
const GL_INDEX_SHIFT = &h0D12
const GL_INDEX_OFFSET = &h0D13
const GL_RED_SCALE = &h0D14
const GL_RED_BIAS = &h0D15
const GL_ZOOM_X = &h0D16
const GL_ZOOM_Y = &h0D17
const GL_GREEN_SCALE = &h0D18
const GL_GREEN_BIAS = &h0D19
const GL_BLUE_SCALE = &h0D1A
const GL_BLUE_BIAS = &h0D1B
const GL_ALPHA_SCALE = &h0D1C
const GL_ALPHA_BIAS = &h0D1D
const GL_DEPTH_SCALE = &h0D1E
const GL_DEPTH_BIAS = &h0D1F
const GL_MAX_EVAL_ORDER = &h0D30
const GL_MAX_LIGHTS = &h0D31
const GL_MAX_CLIP_PLANES = &h0D32
const GL_MAX_TEXTURE_SIZE = &h0D33
const GL_MAX_PIXEL_MAP_TABLE = &h0D34
const GL_MAX_ATTRIB_STACK_DEPTH = &h0D35
const GL_MAX_MODELVIEW_STACK_DEPTH = &h0D36
const GL_MAX_NAME_STACK_DEPTH = &h0D37
const GL_MAX_PROJECTION_STACK_DEPTH = &h0D38
const GL_MAX_TEXTURE_STACK_DEPTH = &h0D39
const GL_MAX_VIEWPORT_DIMS = &h0D3A
const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = &h0D3B
const GL_SUBPIXEL_BITS = &h0D50
const GL_INDEX_BITS = &h0D51
const GL_RED_BITS = &h0D52
const GL_GREEN_BITS = &h0D53
const GL_BLUE_BITS = &h0D54
const GL_ALPHA_BITS = &h0D55
const GL_DEPTH_BITS = &h0D56
const GL_STENCIL_BITS = &h0D57
const GL_ACCUM_RED_BITS = &h0D58
const GL_ACCUM_GREEN_BITS = &h0D59
const GL_ACCUM_BLUE_BITS = &h0D5A
const GL_ACCUM_ALPHA_BITS = &h0D5B
const GL_NAME_STACK_DEPTH = &h0D70
const GL_AUTO_NORMAL = &h0D80
const GL_MAP1_COLOR_4 = &h0D90
const GL_MAP1_INDEX = &h0D91
const GL_MAP1_NORMAL = &h0D92
const GL_MAP1_TEXTURE_COORD_1 = &h0D93
const GL_MAP1_TEXTURE_COORD_2 = &h0D94
const GL_MAP1_TEXTURE_COORD_3 = &h0D95
const GL_MAP1_TEXTURE_COORD_4 = &h0D96
const GL_MAP1_VERTEX_3 = &h0D97
const GL_MAP1_VERTEX_4 = &h0D98
const GL_MAP2_COLOR_4 = &h0DB0
const GL_MAP2_INDEX = &h0DB1
const GL_MAP2_NORMAL = &h0DB2
const GL_MAP2_TEXTURE_COORD_1 = &h0DB3
const GL_MAP2_TEXTURE_COORD_2 = &h0DB4
const GL_MAP2_TEXTURE_COORD_3 = &h0DB5
const GL_MAP2_TEXTURE_COORD_4 = &h0DB6
const GL_MAP2_VERTEX_3 = &h0DB7
const GL_MAP2_VERTEX_4 = &h0DB8
const GL_MAP1_GRID_DOMAIN = &h0DD0
const GL_MAP1_GRID_SEGMENTS = &h0DD1
const GL_MAP2_GRID_DOMAIN = &h0DD2
const GL_MAP2_GRID_SEGMENTS = &h0DD3
const GL_TEXTURE_1D = &h0DE0
const GL_TEXTURE_2D = &h0DE1
const GL_FEEDBACK_BUFFER_POINTER = &h0DF0
const GL_FEEDBACK_BUFFER_SIZE = &h0DF1
const GL_FEEDBACK_BUFFER_TYPE = &h0DF2
const GL_SELECTION_BUFFER_POINTER = &h0DF3
const GL_SELECTION_BUFFER_SIZE = &h0DF4
const GL_TEXTURE_WIDTH = &h1000
const GL_TEXTURE_HEIGHT = &h1001
const GL_TEXTURE_INTERNAL_FORMAT = &h1003
const GL_TEXTURE_BORDER_COLOR = &h1004
const GL_TEXTURE_BORDER = &h1005
const GL_DONT_CARE = &h1100
const GL_FASTEST = &h1101
const GL_NICEST = &h1102
const GL_LIGHT0 = &h4000
const GL_LIGHT1 = &h4001
const GL_LIGHT2 = &h4002
const GL_LIGHT3 = &h4003
const GL_LIGHT4 = &h4004
const GL_LIGHT5 = &h4005
const GL_LIGHT6 = &h4006
const GL_LIGHT7 = &h4007
const GL_AMBIENT = &h1200
const GL_DIFFUSE = &h1201
const GL_SPECULAR = &h1202
const GL_POSITION = &h1203
const GL_SPOT_DIRECTION = &h1204
const GL_SPOT_EXPONENT = &h1205
const GL_SPOT_CUTOFF = &h1206
const GL_CONSTANT_ATTENUATION = &h1207
const GL_LINEAR_ATTENUATION = &h1208
const GL_QUADRATIC_ATTENUATION = &h1209
const GL_COMPILE = &h1300
const GL_COMPILE_AND_EXECUTE = &h1301
const GL_CLEAR = &h1500
const GL_AND = &h1501
const GL_AND_REVERSE = &h1502
const GL_COPY = &h1503
const GL_AND_INVERTED = &h1504
const GL_NOOP = &h1505
const GL_XOR = &h1506
const GL_OR = &h1507
const GL_NOR = &h1508
const GL_EQUIV = &h1509
const GL_INVERT = &h150A
const GL_OR_REVERSE = &h150B
const GL_COPY_INVERTED = &h150C
const GL_OR_INVERTED = &h150D
const GL_NAND = &h150E
const GL_SET = &h150F
const GL_EMISSION = &h1600
const GL_SHININESS = &h1601
const GL_AMBIENT_AND_DIFFUSE = &h1602
const GL_COLOR_INDEXES = &h1603
const GL_MODELVIEW = &h1700
const GL_PROJECTION = &h1701
const GL_TEXTURE = &h1702
const GL_COLOR = &h1800
const GL_DEPTH = &h1801
const GL_STENCIL = &h1802
const GL_COLOR_INDEX = &h1900
const GL_STENCIL_INDEX = &h1901
const GL_DEPTH_COMPONENT = &h1902
const GL_RED = &h1903
const GL_GREEN = &h1904
const GL_BLUE = &h1905
const GL_ALPHA = &h1906
const GL_RGB = &h1907
const GL_RGBA = &h1908
const GL_LUMINANCE = &h1909
const GL_LUMINANCE_ALPHA = &h190A
const GL_BITMAP = &h1A00
const GL_POINT = &h1B00
const GL_LINE = &h1B01
const GL_FILL = &h1B02
const GL_RENDER = &h1C00
const GL_FEEDBACK = &h1C01
const GL_SELECT = &h1C02
const GL_FLAT = &h1D00
const GL_SMOOTH = &h1D01
const GL_KEEP = &h1E00
const GL_REPLACE = &h1E01
const GL_INCR = &h1E02
const GL_DECR = &h1E03
const GL_VENDOR = &h1F00
const GL_RENDERER = &h1F01
const GL_VERSION = &h1F02
const GL_EXTENSIONS = &h1F03
const GL_S = &h2000
const GL_T = &h2001
const GL_R = &h2002
const GL_Q = &h2003
const GL_MODULATE = &h2100
const GL_DECAL = &h2101
const GL_TEXTURE_ENV_MODE = &h2200
const GL_TEXTURE_ENV_COLOR = &h2201
const GL_TEXTURE_ENV = &h2300
const GL_EYE_LINEAR = &h2400
const GL_OBJECT_LINEAR = &h2401
const GL_SPHERE_MAP = &h2402
const GL_TEXTURE_GEN_MODE = &h2500
const GL_OBJECT_PLANE = &h2501
const GL_EYE_PLANE = &h2502
const GL_NEAREST = &h2600
const GL_LINEAR = &h2601
const GL_NEAREST_MIPMAP_NEAREST = &h2700
const GL_LINEAR_MIPMAP_NEAREST = &h2701
const GL_NEAREST_MIPMAP_LINEAR = &h2702
const GL_LINEAR_MIPMAP_LINEAR = &h2703
const GL_TEXTURE_MAG_FILTER = &h2800
const GL_TEXTURE_MIN_FILTER = &h2801
const GL_TEXTURE_WRAP_S = &h2802
const GL_TEXTURE_WRAP_T = &h2803
const GL_CLAMP = &h2900
const GL_REPEAT = &h2901
const GL_CLIENT_PIXEL_STORE_BIT = &h00000001
const GL_CLIENT_VERTEX_ARRAY_BIT = &h00000002
const GL_CLIENT_ALL_ATTRIB_BITS = &hffffffff
const GL_POLYGON_OFFSET_FACTOR = &h8038
const GL_POLYGON_OFFSET_UNITS = &h2A00
const GL_POLYGON_OFFSET_POINT = &h2A01
const GL_POLYGON_OFFSET_LINE = &h2A02
const GL_POLYGON_OFFSET_FILL = &h8037
const GL_ALPHA4 = &h803B
const GL_ALPHA8 = &h803C
const GL_ALPHA12 = &h803D
const GL_ALPHA16 = &h803E
const GL_LUMINANCE4 = &h803F
const GL_LUMINANCE8 = &h8040
const GL_LUMINANCE12 = &h8041
const GL_LUMINANCE16 = &h8042
const GL_LUMINANCE4_ALPHA4 = &h8043
const GL_LUMINANCE6_ALPHA2 = &h8044
const GL_LUMINANCE8_ALPHA8 = &h8045
const GL_LUMINANCE12_ALPHA4 = &h8046
const GL_LUMINANCE12_ALPHA12 = &h8047
const GL_LUMINANCE16_ALPHA16 = &h8048
const GL_INTENSITY = &h8049
const GL_INTENSITY4 = &h804A
const GL_INTENSITY8 = &h804B
const GL_INTENSITY12 = &h804C
const GL_INTENSITY16 = &h804D
const GL_R3_G3_B2 = &h2A10
const GL_RGB4 = &h804F
const GL_RGB5 = &h8050
const GL_RGB8 = &h8051
const GL_RGB10 = &h8052
const GL_RGB12 = &h8053
const GL_RGB16 = &h8054
const GL_RGBA2 = &h8055
const GL_RGBA4 = &h8056
const GL_RGB5_A1 = &h8057
const GL_RGBA8 = &h8058
const GL_RGB10_A2 = &h8059
const GL_RGBA12 = &h805A
const GL_RGBA16 = &h805B
const GL_TEXTURE_RED_SIZE = &h805C
const GL_TEXTURE_GREEN_SIZE = &h805D
const GL_TEXTURE_BLUE_SIZE = &h805E
const GL_TEXTURE_ALPHA_SIZE = &h805F
const GL_TEXTURE_LUMINANCE_SIZE = &h8060
const GL_TEXTURE_INTENSITY_SIZE = &h8061
const GL_PROXY_TEXTURE_1D = &h8063
const GL_PROXY_TEXTURE_2D = &h8064
const GL_TEXTURE_PRIORITY = &h8066
const GL_TEXTURE_RESIDENT = &h8067
const GL_TEXTURE_BINDING_1D = &h8068
const GL_TEXTURE_BINDING_2D = &h8069
const GL_VERTEX_ARRAY = &h8074
const GL_NORMAL_ARRAY = &h8075
const GL_COLOR_ARRAY = &h8076
const GL_INDEX_ARRAY = &h8077
const GL_TEXTURE_COORD_ARRAY = &h8078
const GL_EDGE_FLAG_ARRAY = &h8079
const GL_VERTEX_ARRAY_SIZE = &h807A
const GL_VERTEX_ARRAY_TYPE = &h807B
const GL_VERTEX_ARRAY_STRIDE = &h807C
const GL_NORMAL_ARRAY_TYPE = &h807E
const GL_NORMAL_ARRAY_STRIDE = &h807F
const GL_COLOR_ARRAY_SIZE = &h8081
const GL_COLOR_ARRAY_TYPE = &h8082
const GL_COLOR_ARRAY_STRIDE = &h8083
const GL_INDEX_ARRAY_TYPE = &h8085
const GL_INDEX_ARRAY_STRIDE = &h8086
const GL_TEXTURE_COORD_ARRAY_SIZE = &h8088
const GL_TEXTURE_COORD_ARRAY_TYPE = &h8089
const GL_TEXTURE_COORD_ARRAY_STRIDE = &h808A
const GL_EDGE_FLAG_ARRAY_STRIDE = &h808C
const GL_VERTEX_ARRAY_POINTER = &h808E
const GL_NORMAL_ARRAY_POINTER = &h808F
const GL_COLOR_ARRAY_POINTER = &h8090
const GL_INDEX_ARRAY_POINTER = &h8091
const GL_TEXTURE_COORD_ARRAY_POINTER = &h8092
const GL_EDGE_FLAG_ARRAY_POINTER = &h8093
const GL_V2F = &h2A20
const GL_V3F = &h2A21
const GL_C4UB_V2F = &h2A22
const GL_C4UB_V3F = &h2A23
const GL_C3F_V3F = &h2A24
const GL_N3F_V3F = &h2A25
const GL_C4F_N3F_V3F = &h2A26
const GL_T2F_V3F = &h2A27
const GL_T4F_V4F = &h2A28
const GL_T2F_C4UB_V3F = &h2A29
const GL_T2F_C3F_V3F = &h2A2A
const GL_T2F_N3F_V3F = &h2A2B
const GL_T2F_C4F_N3F_V3F = &h2A2C
const GL_T4F_C4F_N3F_V4F = &h2A2D
const GL_EXT_vertex_array = 1
const GL_EXT_bgra = 1
const GL_EXT_paletted_texture = 1
const GL_WIN_swap_hint = 1
const GL_WIN_draw_range_elements = 1
const GL_VERTEX_ARRAY_EXT = &h8074
const GL_NORMAL_ARRAY_EXT = &h8075
const GL_COLOR_ARRAY_EXT = &h8076
const GL_INDEX_ARRAY_EXT = &h8077
const GL_TEXTURE_COORD_ARRAY_EXT = &h8078
const GL_EDGE_FLAG_ARRAY_EXT = &h8079
const GL_VERTEX_ARRAY_SIZE_EXT = &h807A
const GL_VERTEX_ARRAY_TYPE_EXT = &h807B
const GL_VERTEX_ARRAY_STRIDE_EXT = &h807C
const GL_VERTEX_ARRAY_COUNT_EXT = &h807D
const GL_NORMAL_ARRAY_TYPE_EXT = &h807E
const GL_NORMAL_ARRAY_STRIDE_EXT = &h807F
const GL_NORMAL_ARRAY_COUNT_EXT = &h8080
const GL_COLOR_ARRAY_SIZE_EXT = &h8081
const GL_COLOR_ARRAY_TYPE_EXT = &h8082
const GL_COLOR_ARRAY_STRIDE_EXT = &h8083
const GL_COLOR_ARRAY_COUNT_EXT = &h8084
const GL_INDEX_ARRAY_TYPE_EXT = &h8085
const GL_INDEX_ARRAY_STRIDE_EXT = &h8086
const GL_INDEX_ARRAY_COUNT_EXT = &h8087
const GL_TEXTURE_COORD_ARRAY_SIZE_EXT = &h8088
const GL_TEXTURE_COORD_ARRAY_TYPE_EXT = &h8089
const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = &h808A
const GL_TEXTURE_COORD_ARRAY_COUNT_EXT = &h808B
const GL_EDGE_FLAG_ARRAY_STRIDE_EXT = &h808C
const GL_EDGE_FLAG_ARRAY_COUNT_EXT = &h808D
const GL_VERTEX_ARRAY_POINTER_EXT = &h808E
const GL_NORMAL_ARRAY_POINTER_EXT = &h808F
const GL_COLOR_ARRAY_POINTER_EXT = &h8090
const GL_INDEX_ARRAY_POINTER_EXT = &h8091
const GL_TEXTURE_COORD_ARRAY_POINTER_EXT = &h8092
const GL_EDGE_FLAG_ARRAY_POINTER_EXT = &h8093
const GL_DOUBLE_EXT = GL_DOUBLE
const GL_BGR_EXT = &h80E0
const GL_BGRA_EXT = &h80E1
const GL_COLOR_TABLE_FORMAT_EXT = &h80D8
const GL_COLOR_TABLE_WIDTH_EXT = &h80D9
const GL_COLOR_TABLE_RED_SIZE_EXT = &h80DA
const GL_COLOR_TABLE_GREEN_SIZE_EXT = &h80DB
const GL_COLOR_TABLE_BLUE_SIZE_EXT = &h80DC
const GL_COLOR_TABLE_ALPHA_SIZE_EXT = &h80DD
const GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = &h80DE
const GL_COLOR_TABLE_INTENSITY_SIZE_EXT = &h80DF
const GL_COLOR_INDEX1_EXT = &h80E2
const GL_COLOR_INDEX2_EXT = &h80E3
const GL_COLOR_INDEX4_EXT = &h80E4
const GL_COLOR_INDEX8_EXT = &h80E5
const GL_COLOR_INDEX12_EXT = &h80E6
const GL_COLOR_INDEX16_EXT = &h80E7
const GL_MAX_ELEMENTS_VERTICES_WIN = &h80E8
const GL_MAX_ELEMENTS_INDICES_WIN = &h80E9
const GL_PHONG_WIN = &h80EA
const GL_PHONG_HINT_WIN = &h80EB
const GL_FOG_SPECULAR_TEXTURE_WIN = &h80EC
const GL_LOGIC_OP = GL_INDEX_LOGIC_OP
const GL_TEXTURE_COMPONENTS = GL_TEXTURE_INTERNAL_FORMAT

declare sub glAccum(byval op as GLenum, byval value as GLfloat)
declare sub glAlphaFunc(byval func as GLenum, byval ref as GLclampf)
declare function glAreTexturesResident(byval n as GLsizei, byval textures as const GLuint ptr, byval residences as GLboolean ptr) as GLboolean
declare sub glArrayElement(byval i as GLint)
declare sub glBegin(byval mode as GLenum)
declare sub glBindTexture(byval target as GLenum, byval texture as GLuint)
declare sub glBitmap(byval width as GLsizei, byval height as GLsizei, byval xorig as GLfloat, byval yorig as GLfloat, byval xmove as GLfloat, byval ymove as GLfloat, byval bitmap as const GLubyte ptr)
declare sub glBlendFunc(byval sfactor as GLenum, byval dfactor as GLenum)
declare sub glCallList(byval list as GLuint)
declare sub glCallLists(byval n as GLsizei, byval type as GLenum, byval lists as const GLvoid ptr)
declare sub glClear(byval mask as GLbitfield)
declare sub glClearAccum(byval red as GLfloat, byval green as GLfloat, byval blue as GLfloat, byval alpha as GLfloat)
declare sub glClearColor(byval red as GLclampf, byval green as GLclampf, byval blue as GLclampf, byval alpha as GLclampf)
declare sub glClearDepth(byval depth as GLclampd)
declare sub glClearIndex(byval c as GLfloat)
declare sub glClearStencil(byval s as GLint)
declare sub glClipPlane(byval plane as GLenum, byval equation as const GLdouble ptr)
declare sub glColor3b(byval red as GLbyte, byval green as GLbyte, byval blue as GLbyte)
declare sub glColor3bv(byval v as const GLbyte ptr)
declare sub glColor3d(byval red as GLdouble, byval green as GLdouble, byval blue as GLdouble)
declare sub glColor3dv(byval v as const GLdouble ptr)
declare sub glColor3f(byval red as GLfloat, byval green as GLfloat, byval blue as GLfloat)
declare sub glColor3fv(byval v as const GLfloat ptr)
declare sub glColor3i(byval red as GLint, byval green as GLint, byval blue as GLint)
declare sub glColor3iv(byval v as const GLint ptr)
declare sub glColor3s(byval red as GLshort, byval green as GLshort, byval blue as GLshort)
declare sub glColor3sv(byval v as const GLshort ptr)
declare sub glColor3ub(byval red as GLubyte, byval green as GLubyte, byval blue as GLubyte)
declare sub glColor3ubv(byval v as const GLubyte ptr)
declare sub glColor3ui(byval red as GLuint, byval green as GLuint, byval blue as GLuint)
declare sub glColor3uiv(byval v as const GLuint ptr)
declare sub glColor3us(byval red as GLushort, byval green as GLushort, byval blue as GLushort)
declare sub glColor3usv(byval v as const GLushort ptr)
declare sub glColor4b(byval red as GLbyte, byval green as GLbyte, byval blue as GLbyte, byval alpha as GLbyte)
declare sub glColor4bv(byval v as const GLbyte ptr)
declare sub glColor4d(byval red as GLdouble, byval green as GLdouble, byval blue as GLdouble, byval alpha as GLdouble)
declare sub glColor4dv(byval v as const GLdouble ptr)
declare sub glColor4f(byval red as GLfloat, byval green as GLfloat, byval blue as GLfloat, byval alpha as GLfloat)
declare sub glColor4fv(byval v as const GLfloat ptr)
declare sub glColor4i(byval red as GLint, byval green as GLint, byval blue as GLint, byval alpha as GLint)
declare sub glColor4iv(byval v as const GLint ptr)
declare sub glColor4s(byval red as GLshort, byval green as GLshort, byval blue as GLshort, byval alpha as GLshort)
declare sub glColor4sv(byval v as const GLshort ptr)
declare sub glColor4ub(byval red as GLubyte, byval green as GLubyte, byval blue as GLubyte, byval alpha as GLubyte)
declare sub glColor4ubv(byval v as const GLubyte ptr)
declare sub glColor4ui(byval red as GLuint, byval green as GLuint, byval blue as GLuint, byval alpha as GLuint)
declare sub glColor4uiv(byval v as const GLuint ptr)
declare sub glColor4us(byval red as GLushort, byval green as GLushort, byval blue as GLushort, byval alpha as GLushort)
declare sub glColor4usv(byval v as const GLushort ptr)
declare sub glColorMask(byval red as GLboolean, byval green as GLboolean, byval blue as GLboolean, byval alpha as GLboolean)
declare sub glColorMaterial(byval face as GLenum, byval mode as GLenum)
declare sub glColorPointer(byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval pointer as const GLvoid ptr)
declare sub glCopyPixels(byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei, byval type as GLenum)
declare sub glCopyTexImage1D(byval target as GLenum, byval level as GLint, byval internalFormat as GLenum, byval x as GLint, byval y as GLint, byval width as GLsizei, byval border as GLint)
declare sub glCopyTexImage2D(byval target as GLenum, byval level as GLint, byval internalFormat as GLenum, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei, byval border as GLint)
declare sub glCopyTexSubImage1D(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval x as GLint, byval y as GLint, byval width as GLsizei)
declare sub glCopyTexSubImage2D(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)
declare sub glCullFace(byval mode as GLenum)
declare sub glDeleteLists(byval list as GLuint, byval range as GLsizei)
declare sub glDeleteTextures(byval n as GLsizei, byval textures as const GLuint ptr)
declare sub glDepthFunc(byval func as GLenum)
declare sub glDepthMask(byval flag as GLboolean)
declare sub glDepthRange(byval zNear as GLclampd, byval zFar as GLclampd)
declare sub glDisable(byval cap as GLenum)
declare sub glDisableClientState(byval array as GLenum)
declare sub glDrawArrays(byval mode as GLenum, byval first as GLint, byval count as GLsizei)
declare sub glDrawBuffer(byval mode as GLenum)
declare sub glDrawElements(byval mode as GLenum, byval count as GLsizei, byval type as GLenum, byval indices as const GLvoid ptr)
declare sub glDrawPixels(byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const GLvoid ptr)
declare sub glEdgeFlag(byval flag as GLboolean)
declare sub glEdgeFlagPointer(byval stride as GLsizei, byval pointer as const GLvoid ptr)
declare sub glEdgeFlagv(byval flag as const GLboolean ptr)
declare sub glEnable(byval cap as GLenum)
declare sub glEnableClientState(byval array as GLenum)
declare sub glEnd()
declare sub glEndList()
declare sub glEvalCoord1d(byval u as GLdouble)
declare sub glEvalCoord1dv(byval u as const GLdouble ptr)
declare sub glEvalCoord1f(byval u as GLfloat)
declare sub glEvalCoord1fv(byval u as const GLfloat ptr)
declare sub glEvalCoord2d(byval u as GLdouble, byval v as GLdouble)
declare sub glEvalCoord2dv(byval u as const GLdouble ptr)
declare sub glEvalCoord2f(byval u as GLfloat, byval v as GLfloat)
declare sub glEvalCoord2fv(byval u as const GLfloat ptr)
declare sub glEvalMesh1(byval mode as GLenum, byval i1 as GLint, byval i2 as GLint)
declare sub glEvalMesh2(byval mode as GLenum, byval i1 as GLint, byval i2 as GLint, byval j1 as GLint, byval j2 as GLint)
declare sub glEvalPoint1(byval i as GLint)
declare sub glEvalPoint2(byval i as GLint, byval j as GLint)
declare sub glFeedbackBuffer(byval size as GLsizei, byval type as GLenum, byval buffer as GLfloat ptr)
declare sub glFinish()
declare sub glFlush()
declare sub glFogf(byval pname as GLenum, byval param as GLfloat)
declare sub glFogfv(byval pname as GLenum, byval params as const GLfloat ptr)
declare sub glFogi(byval pname as GLenum, byval param as GLint)
declare sub glFogiv(byval pname as GLenum, byval params as const GLint ptr)
declare sub glFrontFace(byval mode as GLenum)
declare sub glFrustum(byval left as GLdouble, byval right as GLdouble, byval bottom as GLdouble, byval top as GLdouble, byval zNear as GLdouble, byval zFar as GLdouble)
declare function glGenLists(byval range as GLsizei) as GLuint
declare sub glGenTextures(byval n as GLsizei, byval textures as GLuint ptr)
declare sub glGetBooleanv(byval pname as GLenum, byval params as GLboolean ptr)
declare sub glGetClipPlane(byval plane as GLenum, byval equation as GLdouble ptr)
declare sub glGetDoublev(byval pname as GLenum, byval params as GLdouble ptr)
declare function glGetError() as GLenum
declare sub glGetFloatv(byval pname as GLenum, byval params as GLfloat ptr)
declare sub glGetIntegerv(byval pname as GLenum, byval params as GLint ptr)
declare sub glGetLightfv(byval light as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
declare sub glGetLightiv(byval light as GLenum, byval pname as GLenum, byval params as GLint ptr)
declare sub glGetMapdv(byval target as GLenum, byval query as GLenum, byval v as GLdouble ptr)
declare sub glGetMapfv(byval target as GLenum, byval query as GLenum, byval v as GLfloat ptr)
declare sub glGetMapiv(byval target as GLenum, byval query as GLenum, byval v as GLint ptr)
declare sub glGetMaterialfv(byval face as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
declare sub glGetMaterialiv(byval face as GLenum, byval pname as GLenum, byval params as GLint ptr)
declare sub glGetPixelMapfv(byval map as GLenum, byval values as GLfloat ptr)
declare sub glGetPixelMapuiv(byval map as GLenum, byval values as GLuint ptr)
declare sub glGetPixelMapusv(byval map as GLenum, byval values as GLushort ptr)
declare sub glGetPointerv(byval pname as GLenum, byval params as GLvoid ptr ptr)
declare sub glGetPolygonStipple(byval mask as GLubyte ptr)
declare function glGetString(byval name as GLenum) as const zstring ptr
declare sub glGetTexEnvfv(byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
declare sub glGetTexEnviv(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
declare sub glGetTexGendv(byval coord as GLenum, byval pname as GLenum, byval params as GLdouble ptr)
declare sub glGetTexGenfv(byval coord as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
declare sub glGetTexGeniv(byval coord as GLenum, byval pname as GLenum, byval params as GLint ptr)
declare sub glGetTexImage(byval target as GLenum, byval level as GLint, byval format as GLenum, byval type as GLenum, byval pixels as GLvoid ptr)
declare sub glGetTexLevelParameterfv(byval target as GLenum, byval level as GLint, byval pname as GLenum, byval params as GLfloat ptr)
declare sub glGetTexLevelParameteriv(byval target as GLenum, byval level as GLint, byval pname as GLenum, byval params as GLint ptr)
declare sub glGetTexParameterfv(byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
declare sub glGetTexParameteriv(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
declare sub glHint(byval target as GLenum, byval mode as GLenum)
declare sub glIndexMask(byval mask as GLuint)
declare sub glIndexPointer(byval type as GLenum, byval stride as GLsizei, byval pointer as const GLvoid ptr)
declare sub glIndexd(byval c as GLdouble)
declare sub glIndexdv(byval c as const GLdouble ptr)
declare sub glIndexf(byval c as GLfloat)
declare sub glIndexfv(byval c as const GLfloat ptr)
declare sub glIndexi(byval c as GLint)
declare sub glIndexiv(byval c as const GLint ptr)
declare sub glIndexs(byval c as GLshort)
declare sub glIndexsv(byval c as const GLshort ptr)
declare sub glIndexub(byval c as GLubyte)
declare sub glIndexubv(byval c as const GLubyte ptr)
declare sub glInitNames()
declare sub glInterleavedArrays(byval format as GLenum, byval stride as GLsizei, byval pointer as const GLvoid ptr)
declare function glIsEnabled(byval cap as GLenum) as GLboolean
declare function glIsList(byval list as GLuint) as GLboolean
declare function glIsTexture(byval texture as GLuint) as GLboolean
declare sub glLightModelf(byval pname as GLenum, byval param as GLfloat)
declare sub glLightModelfv(byval pname as GLenum, byval params as const GLfloat ptr)
declare sub glLightModeli(byval pname as GLenum, byval param as GLint)
declare sub glLightModeliv(byval pname as GLenum, byval params as const GLint ptr)
declare sub glLightf(byval light as GLenum, byval pname as GLenum, byval param as GLfloat)
declare sub glLightfv(byval light as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
declare sub glLighti(byval light as GLenum, byval pname as GLenum, byval param as GLint)
declare sub glLightiv(byval light as GLenum, byval pname as GLenum, byval params as const GLint ptr)
declare sub glLineStipple(byval factor as GLint, byval pattern as GLushort)
declare sub glLineWidth(byval width as GLfloat)
declare sub glListBase(byval base as GLuint)
declare sub glLoadIdentity()
declare sub glLoadMatrixd(byval m as const GLdouble ptr)
declare sub glLoadMatrixf(byval m as const GLfloat ptr)
declare sub glLoadName(byval name as GLuint)
declare sub glLogicOp(byval opcode as GLenum)
declare sub glMap1d(byval target as GLenum, byval u1 as GLdouble, byval u2 as GLdouble, byval stride as GLint, byval order as GLint, byval points as const GLdouble ptr)
declare sub glMap1f(byval target as GLenum, byval u1 as GLfloat, byval u2 as GLfloat, byval stride as GLint, byval order as GLint, byval points as const GLfloat ptr)
declare sub glMap2d(byval target as GLenum, byval u1 as GLdouble, byval u2 as GLdouble, byval ustride as GLint, byval uorder as GLint, byval v1 as GLdouble, byval v2 as GLdouble, byval vstride as GLint, byval vorder as GLint, byval points as const GLdouble ptr)
declare sub glMap2f(byval target as GLenum, byval u1 as GLfloat, byval u2 as GLfloat, byval ustride as GLint, byval uorder as GLint, byval v1 as GLfloat, byval v2 as GLfloat, byval vstride as GLint, byval vorder as GLint, byval points as const GLfloat ptr)
declare sub glMapGrid1d(byval un as GLint, byval u1 as GLdouble, byval u2 as GLdouble)
declare sub glMapGrid1f(byval un as GLint, byval u1 as GLfloat, byval u2 as GLfloat)
declare sub glMapGrid2d(byval un as GLint, byval u1 as GLdouble, byval u2 as GLdouble, byval vn as GLint, byval v1 as GLdouble, byval v2 as GLdouble)
declare sub glMapGrid2f(byval un as GLint, byval u1 as GLfloat, byval u2 as GLfloat, byval vn as GLint, byval v1 as GLfloat, byval v2 as GLfloat)
declare sub glMaterialf(byval face as GLenum, byval pname as GLenum, byval param as GLfloat)
declare sub glMaterialfv(byval face as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
declare sub glMateriali(byval face as GLenum, byval pname as GLenum, byval param as GLint)
declare sub glMaterialiv(byval face as GLenum, byval pname as GLenum, byval params as const GLint ptr)
declare sub glMatrixMode(byval mode as GLenum)
declare sub glMultMatrixd(byval m as const GLdouble ptr)
declare sub glMultMatrixf(byval m as const GLfloat ptr)
declare sub glNewList(byval list as GLuint, byval mode as GLenum)
declare sub glNormal3b(byval nx as GLbyte, byval ny as GLbyte, byval nz as GLbyte)
declare sub glNormal3bv(byval v as const GLbyte ptr)
declare sub glNormal3d(byval nx as GLdouble, byval ny as GLdouble, byval nz as GLdouble)
declare sub glNormal3dv(byval v as const GLdouble ptr)
declare sub glNormal3f(byval nx as GLfloat, byval ny as GLfloat, byval nz as GLfloat)
declare sub glNormal3fv(byval v as const GLfloat ptr)
declare sub glNormal3i(byval nx as GLint, byval ny as GLint, byval nz as GLint)
declare sub glNormal3iv(byval v as const GLint ptr)
declare sub glNormal3s(byval nx as GLshort, byval ny as GLshort, byval nz as GLshort)
declare sub glNormal3sv(byval v as const GLshort ptr)
declare sub glNormalPointer(byval type as GLenum, byval stride as GLsizei, byval pointer as const GLvoid ptr)
declare sub glOrtho(byval left as GLdouble, byval right as GLdouble, byval bottom as GLdouble, byval top as GLdouble, byval zNear as GLdouble, byval zFar as GLdouble)
declare sub glPassThrough(byval token as GLfloat)
declare sub glPixelMapfv(byval map as GLenum, byval mapsize as GLsizei, byval values as const GLfloat ptr)
declare sub glPixelMapuiv(byval map as GLenum, byval mapsize as GLsizei, byval values as const GLuint ptr)
declare sub glPixelMapusv(byval map as GLenum, byval mapsize as GLsizei, byval values as const GLushort ptr)
declare sub glPixelStoref(byval pname as GLenum, byval param as GLfloat)
declare sub glPixelStorei(byval pname as GLenum, byval param as GLint)
declare sub glPixelTransferf(byval pname as GLenum, byval param as GLfloat)
declare sub glPixelTransferi(byval pname as GLenum, byval param as GLint)
declare sub glPixelZoom(byval xfactor as GLfloat, byval yfactor as GLfloat)
declare sub glPointSize(byval size as GLfloat)
declare sub glPolygonMode(byval face as GLenum, byval mode as GLenum)
declare sub glPolygonOffset(byval factor as GLfloat, byval units as GLfloat)
declare sub glPolygonStipple(byval mask as const GLubyte ptr)
declare sub glPopAttrib()
declare sub glPopClientAttrib()
declare sub glPopMatrix()
declare sub glPopName()
declare sub glPrioritizeTextures(byval n as GLsizei, byval textures as const GLuint ptr, byval priorities as const GLclampf ptr)
declare sub glPushAttrib(byval mask as GLbitfield)
declare sub glPushClientAttrib(byval mask as GLbitfield)
declare sub glPushMatrix()
declare sub glPushName(byval name as GLuint)
declare sub glRasterPos2d(byval x as GLdouble, byval y as GLdouble)
declare sub glRasterPos2dv(byval v as const GLdouble ptr)
declare sub glRasterPos2f(byval x as GLfloat, byval y as GLfloat)
declare sub glRasterPos2fv(byval v as const GLfloat ptr)
declare sub glRasterPos2i(byval x as GLint, byval y as GLint)
declare sub glRasterPos2iv(byval v as const GLint ptr)
declare sub glRasterPos2s(byval x as GLshort, byval y as GLshort)
declare sub glRasterPos2sv(byval v as const GLshort ptr)
declare sub glRasterPos3d(byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
declare sub glRasterPos3dv(byval v as const GLdouble ptr)
declare sub glRasterPos3f(byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
declare sub glRasterPos3fv(byval v as const GLfloat ptr)
declare sub glRasterPos3i(byval x as GLint, byval y as GLint, byval z as GLint)
declare sub glRasterPos3iv(byval v as const GLint ptr)
declare sub glRasterPos3s(byval x as GLshort, byval y as GLshort, byval z as GLshort)
declare sub glRasterPos3sv(byval v as const GLshort ptr)
declare sub glRasterPos4d(byval x as GLdouble, byval y as GLdouble, byval z as GLdouble, byval w as GLdouble)
declare sub glRasterPos4dv(byval v as const GLdouble ptr)
declare sub glRasterPos4f(byval x as GLfloat, byval y as GLfloat, byval z as GLfloat, byval w as GLfloat)
declare sub glRasterPos4fv(byval v as const GLfloat ptr)
declare sub glRasterPos4i(byval x as GLint, byval y as GLint, byval z as GLint, byval w as GLint)
declare sub glRasterPos4iv(byval v as const GLint ptr)
declare sub glRasterPos4s(byval x as GLshort, byval y as GLshort, byval z as GLshort, byval w as GLshort)
declare sub glRasterPos4sv(byval v as const GLshort ptr)
declare sub glReadBuffer(byval mode as GLenum)
declare sub glReadPixels(byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as GLvoid ptr)
declare sub glRectd(byval x1 as GLdouble, byval y1 as GLdouble, byval x2 as GLdouble, byval y2 as GLdouble)
declare sub glRectdv(byval v1 as const GLdouble ptr, byval v2 as const GLdouble ptr)
declare sub glRectf(byval x1 as GLfloat, byval y1 as GLfloat, byval x2 as GLfloat, byval y2 as GLfloat)
declare sub glRectfv(byval v1 as const GLfloat ptr, byval v2 as const GLfloat ptr)
declare sub glRecti(byval x1 as GLint, byval y1 as GLint, byval x2 as GLint, byval y2 as GLint)
declare sub glRectiv(byval v1 as const GLint ptr, byval v2 as const GLint ptr)
declare sub glRects(byval x1 as GLshort, byval y1 as GLshort, byval x2 as GLshort, byval y2 as GLshort)
declare sub glRectsv(byval v1 as const GLshort ptr, byval v2 as const GLshort ptr)
declare function glRenderMode(byval mode as GLenum) as GLint
declare sub glRotated(byval angle as GLdouble, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
declare sub glRotatef(byval angle as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
declare sub glScaled(byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
declare sub glScalef(byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
declare sub glScissor(byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)
declare sub glSelectBuffer(byval size as GLsizei, byval buffer as GLuint ptr)
declare sub glShadeModel(byval mode as GLenum)
declare sub glStencilFunc(byval func as GLenum, byval ref as GLint, byval mask as GLuint)
declare sub glStencilMask(byval mask as GLuint)
declare sub glStencilOp(byval fail as GLenum, byval zfail as GLenum, byval zpass as GLenum)
declare sub glTexCoord1d(byval s as GLdouble)
declare sub glTexCoord1dv(byval v as const GLdouble ptr)
declare sub glTexCoord1f(byval s as GLfloat)
declare sub glTexCoord1fv(byval v as const GLfloat ptr)
declare sub glTexCoord1i(byval s as GLint)
declare sub glTexCoord1iv(byval v as const GLint ptr)
declare sub glTexCoord1s(byval s as GLshort)
declare sub glTexCoord1sv(byval v as const GLshort ptr)
declare sub glTexCoord2d(byval s as GLdouble, byval t as GLdouble)
declare sub glTexCoord2dv(byval v as const GLdouble ptr)
declare sub glTexCoord2f(byval s as GLfloat, byval t as GLfloat)
declare sub glTexCoord2fv(byval v as const GLfloat ptr)
declare sub glTexCoord2i(byval s as GLint, byval t as GLint)
declare sub glTexCoord2iv(byval v as const GLint ptr)
declare sub glTexCoord2s(byval s as GLshort, byval t as GLshort)
declare sub glTexCoord2sv(byval v as const GLshort ptr)
declare sub glTexCoord3d(byval s as GLdouble, byval t as GLdouble, byval r as GLdouble)
declare sub glTexCoord3dv(byval v as const GLdouble ptr)
declare sub glTexCoord3f(byval s as GLfloat, byval t as GLfloat, byval r as GLfloat)
declare sub glTexCoord3fv(byval v as const GLfloat ptr)
declare sub glTexCoord3i(byval s as GLint, byval t as GLint, byval r as GLint)
declare sub glTexCoord3iv(byval v as const GLint ptr)
declare sub glTexCoord3s(byval s as GLshort, byval t as GLshort, byval r as GLshort)
declare sub glTexCoord3sv(byval v as const GLshort ptr)
declare sub glTexCoord4d(byval s as GLdouble, byval t as GLdouble, byval r as GLdouble, byval q as GLdouble)
declare sub glTexCoord4dv(byval v as const GLdouble ptr)
declare sub glTexCoord4f(byval s as GLfloat, byval t as GLfloat, byval r as GLfloat, byval q as GLfloat)
declare sub glTexCoord4fv(byval v as const GLfloat ptr)
declare sub glTexCoord4i(byval s as GLint, byval t as GLint, byval r as GLint, byval q as GLint)
declare sub glTexCoord4iv(byval v as const GLint ptr)
declare sub glTexCoord4s(byval s as GLshort, byval t as GLshort, byval r as GLshort, byval q as GLshort)
declare sub glTexCoord4sv(byval v as const GLshort ptr)
declare sub glTexCoordPointer(byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval pointer as const GLvoid ptr)
declare sub glTexEnvf(byval target as GLenum, byval pname as GLenum, byval param as GLfloat)
declare sub glTexEnvfv(byval target as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
declare sub glTexEnvi(byval target as GLenum, byval pname as GLenum, byval param as GLint)
declare sub glTexEnviv(byval target as GLenum, byval pname as GLenum, byval params as const GLint ptr)
declare sub glTexGend(byval coord as GLenum, byval pname as GLenum, byval param as GLdouble)
declare sub glTexGendv(byval coord as GLenum, byval pname as GLenum, byval params as const GLdouble ptr)
declare sub glTexGenf(byval coord as GLenum, byval pname as GLenum, byval param as GLfloat)
declare sub glTexGenfv(byval coord as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
declare sub glTexGeni(byval coord as GLenum, byval pname as GLenum, byval param as GLint)
declare sub glTexGeniv(byval coord as GLenum, byval pname as GLenum, byval params as const GLint ptr)
declare sub glTexImage1D(byval target as GLenum, byval level as GLint, byval internalformat as GLint, byval width as GLsizei, byval border as GLint, byval format as GLenum, byval type as GLenum, byval pixels as const GLvoid ptr)
declare sub glTexImage2D(byval target as GLenum, byval level as GLint, byval internalformat as GLint, byval width as GLsizei, byval height as GLsizei, byval border as GLint, byval format as GLenum, byval type as GLenum, byval pixels as const GLvoid ptr)
declare sub glTexParameterf(byval target as GLenum, byval pname as GLenum, byval param as GLfloat)
declare sub glTexParameterfv(byval target as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
declare sub glTexParameteri(byval target as GLenum, byval pname as GLenum, byval param as GLint)
declare sub glTexParameteriv(byval target as GLenum, byval pname as GLenum, byval params as const GLint ptr)
declare sub glTexSubImage1D(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval width as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const GLvoid ptr)
declare sub glTexSubImage2D(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const GLvoid ptr)
declare sub glTranslated(byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
declare sub glTranslatef(byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
declare sub glVertex2d(byval x as GLdouble, byval y as GLdouble)
declare sub glVertex2dv(byval v as const GLdouble ptr)
declare sub glVertex2f(byval x as GLfloat, byval y as GLfloat)
declare sub glVertex2fv(byval v as const GLfloat ptr)
declare sub glVertex2i(byval x as GLint, byval y as GLint)
declare sub glVertex2iv(byval v as const GLint ptr)
declare sub glVertex2s(byval x as GLshort, byval y as GLshort)
declare sub glVertex2sv(byval v as const GLshort ptr)
declare sub glVertex3d(byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
declare sub glVertex3dv(byval v as const GLdouble ptr)
declare sub glVertex3f(byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
declare sub glVertex3fv(byval v as const GLfloat ptr)
declare sub glVertex3i(byval x as GLint, byval y as GLint, byval z as GLint)
declare sub glVertex3iv(byval v as const GLint ptr)
declare sub glVertex3s(byval x as GLshort, byval y as GLshort, byval z as GLshort)
declare sub glVertex3sv(byval v as const GLshort ptr)
declare sub glVertex4d(byval x as GLdouble, byval y as GLdouble, byval z as GLdouble, byval w as GLdouble)
declare sub glVertex4dv(byval v as const GLdouble ptr)
declare sub glVertex4f(byval x as GLfloat, byval y as GLfloat, byval z as GLfloat, byval w as GLfloat)
declare sub glVertex4fv(byval v as const GLfloat ptr)
declare sub glVertex4i(byval x as GLint, byval y as GLint, byval z as GLint, byval w as GLint)
declare sub glVertex4iv(byval v as const GLint ptr)
declare sub glVertex4s(byval x as GLshort, byval y as GLshort, byval z as GLshort, byval w as GLshort)
declare sub glVertex4sv(byval v as const GLshort ptr)
declare sub glVertexPointer(byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval pointer as const GLvoid ptr)
declare sub glViewport(byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)

type PFNGLARRAYELEMENTEXTPROC as sub(byval i as GLint)
type PFNGLDRAWARRAYSEXTPROC as sub(byval mode as GLenum, byval first as GLint, byval count as GLsizei)
type PFNGLVERTEXPOINTEREXTPROC as sub(byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval count as GLsizei, byval pointer as const GLvoid ptr)
type PFNGLNORMALPOINTEREXTPROC as sub(byval type as GLenum, byval stride as GLsizei, byval count as GLsizei, byval pointer as const GLvoid ptr)
type PFNGLCOLORPOINTEREXTPROC as sub(byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval count as GLsizei, byval pointer as const GLvoid ptr)
type PFNGLINDEXPOINTEREXTPROC as sub(byval type as GLenum, byval stride as GLsizei, byval count as GLsizei, byval pointer as const GLvoid ptr)
type PFNGLTEXCOORDPOINTEREXTPROC as sub(byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval count as GLsizei, byval pointer as const GLvoid ptr)
type PFNGLEDGEFLAGPOINTEREXTPROC as sub(byval stride as GLsizei, byval count as GLsizei, byval pointer as const GLboolean ptr)
type PFNGLGETPOINTERVEXTPROC as sub(byval pname as GLenum, byval params as GLvoid ptr ptr)
type PFNGLARRAYELEMENTARRAYEXTPROC as sub(byval mode as GLenum, byval count as GLsizei, byval pi as const GLvoid ptr)
type PFNGLDRAWRANGEELEMENTSWINPROC as sub(byval mode as GLenum, byval start as GLuint, byval end as GLuint, byval count as GLsizei, byval type as GLenum, byval indices as const GLvoid ptr)
type PFNGLADDSWAPHINTRECTWINPROC as sub(byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)
type PFNGLCOLORTABLEEXTPROC as sub(byval target as GLenum, byval internalFormat as GLenum, byval width as GLsizei, byval format as GLenum, byval type as GLenum, byval data as const GLvoid ptr)
type PFNGLCOLORSUBTABLEEXTPROC as sub(byval target as GLenum, byval start as GLsizei, byval count as GLsizei, byval format as GLenum, byval type as GLenum, byval data as const GLvoid ptr)
type PFNGLGETCOLORTABLEEXTPROC as sub(byval target as GLenum, byval format as GLenum, byval type as GLenum, byval data as GLvoid ptr)
type PFNGLGETCOLORTABLEPARAMETERIVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETCOLORTABLEPARAMETERFVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)

end extern





extern "Windows"

const __glext_h_ = 1
const GL_GLEXT_VERSION = 20150104
const GL_VERSION_1_2 = 1
const GL_UNSIGNED_BYTE_3_3_2 = &h8032
const GL_UNSIGNED_SHORT_4_4_4_4 = &h8033
const GL_UNSIGNED_SHORT_5_5_5_1 = &h8034
const GL_UNSIGNED_INT_8_8_8_8 = &h8035
const GL_UNSIGNED_INT_10_10_10_2 = &h8036
const GL_TEXTURE_BINDING_3D = &h806A
const GL_PACK_SKIP_IMAGES = &h806B
const GL_PACK_IMAGE_HEIGHT = &h806C
const GL_UNPACK_SKIP_IMAGES = &h806D
const GL_UNPACK_IMAGE_HEIGHT = &h806E
const GL_TEXTURE_3D = &h806F
const GL_PROXY_TEXTURE_3D = &h8070
const GL_TEXTURE_DEPTH = &h8071
const GL_TEXTURE_WRAP_R = &h8072
const GL_MAX_3D_TEXTURE_SIZE = &h8073
const GL_UNSIGNED_BYTE_2_3_3_REV = &h8362
const GL_UNSIGNED_SHORT_5_6_5 = &h8363
const GL_UNSIGNED_SHORT_5_6_5_REV = &h8364
const GL_UNSIGNED_SHORT_4_4_4_4_REV = &h8365
const GL_UNSIGNED_SHORT_1_5_5_5_REV = &h8366
const GL_UNSIGNED_INT_8_8_8_8_REV = &h8367
const GL_UNSIGNED_INT_2_10_10_10_REV = &h8368
const GL_BGR = &h80E0
const GL_BGRA = &h80E1
const GL_MAX_ELEMENTS_VERTICES = &h80E8
const GL_MAX_ELEMENTS_INDICES = &h80E9
const GL_CLAMP_TO_EDGE = &h812F
const GL_TEXTURE_MIN_LOD = &h813A
const GL_TEXTURE_MAX_LOD = &h813B
const GL_TEXTURE_BASE_LEVEL = &h813C
const GL_TEXTURE_MAX_LEVEL = &h813D
const GL_SMOOTH_POINT_SIZE_RANGE = &h0B12
const GL_SMOOTH_POINT_SIZE_GRANULARITY = &h0B13
const GL_SMOOTH_LINE_WIDTH_RANGE = &h0B22
const GL_SMOOTH_LINE_WIDTH_GRANULARITY = &h0B23
const GL_ALIASED_LINE_WIDTH_RANGE = &h846E
const GL_RESCALE_NORMAL = &h803A
const GL_LIGHT_MODEL_COLOR_CONTROL = &h81F8
const GL_SINGLE_COLOR = &h81F9
const GL_SEPARATE_SPECULAR_COLOR = &h81FA
const GL_ALIASED_POINT_SIZE_RANGE = &h846D

type PFNGLDRAWRANGEELEMENTSPROC as sub(byval mode as GLenum, byval start as GLuint, byval end as GLuint, byval count as GLsizei, byval type as GLenum, byval indices as const any ptr)
type PFNGLTEXIMAGE3DPROC as sub(byval target as GLenum, byval level as GLint, byval internalformat as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval border as GLint, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLTEXSUBIMAGE3DPROC as sub(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLCOPYTEXSUBIMAGE3DPROC as sub(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)


const GL_VERSION_1_3 = 1
const GL_TEXTURE0 = &h84C0
const GL_TEXTURE1 = &h84C1
const GL_TEXTURE2 = &h84C2
const GL_TEXTURE3 = &h84C3
const GL_TEXTURE4 = &h84C4
const GL_TEXTURE5 = &h84C5
const GL_TEXTURE6 = &h84C6
const GL_TEXTURE7 = &h84C7
const GL_TEXTURE8 = &h84C8
const GL_TEXTURE9 = &h84C9
const GL_TEXTURE10 = &h84CA
const GL_TEXTURE11 = &h84CB
const GL_TEXTURE12 = &h84CC
const GL_TEXTURE13 = &h84CD
const GL_TEXTURE14 = &h84CE
const GL_TEXTURE15 = &h84CF
const GL_TEXTURE16 = &h84D0
const GL_TEXTURE17 = &h84D1
const GL_TEXTURE18 = &h84D2
const GL_TEXTURE19 = &h84D3
const GL_TEXTURE20 = &h84D4
const GL_TEXTURE21 = &h84D5
const GL_TEXTURE22 = &h84D6
const GL_TEXTURE23 = &h84D7
const GL_TEXTURE24 = &h84D8
const GL_TEXTURE25 = &h84D9
const GL_TEXTURE26 = &h84DA
const GL_TEXTURE27 = &h84DB
const GL_TEXTURE28 = &h84DC
const GL_TEXTURE29 = &h84DD
const GL_TEXTURE30 = &h84DE
const GL_TEXTURE31 = &h84DF
const GL_ACTIVE_TEXTURE = &h84E0
const GL_MULTISAMPLE = &h809D
const GL_SAMPLE_ALPHA_TO_COVERAGE = &h809E
const GL_SAMPLE_ALPHA_TO_ONE = &h809F
const GL_SAMPLE_COVERAGE = &h80A0
const GL_SAMPLE_BUFFERS = &h80A8
const GL_SAMPLES = &h80A9
const GL_SAMPLE_COVERAGE_VALUE = &h80AA
const GL_SAMPLE_COVERAGE_INVERT = &h80AB
const GL_TEXTURE_CUBE_MAP = &h8513
const GL_TEXTURE_BINDING_CUBE_MAP = &h8514
const GL_TEXTURE_CUBE_MAP_POSITIVE_X = &h8515
const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = &h8516
const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = &h8517
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = &h8518
const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = &h8519
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = &h851A
const GL_PROXY_TEXTURE_CUBE_MAP = &h851B
const GL_MAX_CUBE_MAP_TEXTURE_SIZE = &h851C
const GL_COMPRESSED_RGB = &h84ED
const GL_COMPRESSED_RGBA = &h84EE
const GL_TEXTURE_COMPRESSION_HINT = &h84EF
const GL_TEXTURE_COMPRESSED_IMAGE_SIZE = &h86A0
const GL_TEXTURE_COMPRESSED = &h86A1
const GL_NUM_COMPRESSED_TEXTURE_FORMATS = &h86A2
const GL_COMPRESSED_TEXTURE_FORMATS = &h86A3
const GL_CLAMP_TO_BORDER = &h812D
const GL_CLIENT_ACTIVE_TEXTURE = &h84E1
const GL_MAX_TEXTURE_UNITS = &h84E2
const GL_TRANSPOSE_MODELVIEW_MATRIX = &h84E3
const GL_TRANSPOSE_PROJECTION_MATRIX = &h84E4
const GL_TRANSPOSE_TEXTURE_MATRIX = &h84E5
const GL_TRANSPOSE_COLOR_MATRIX = &h84E6
const GL_MULTISAMPLE_BIT = &h20000000
const GL_NORMAL_MAP = &h8511
const GL_REFLECTION_MAP = &h8512
const GL_COMPRESSED_ALPHA = &h84E9
const GL_COMPRESSED_LUMINANCE = &h84EA
const GL_COMPRESSED_LUMINANCE_ALPHA = &h84EB
const GL_COMPRESSED_INTENSITY = &h84EC
const GL_COMBINE = &h8570
const GL_COMBINE_RGB = &h8571
const GL_COMBINE_ALPHA = &h8572
const GL_SOURCE0_RGB = &h8580
const GL_SOURCE1_RGB = &h8581
const GL_SOURCE2_RGB = &h8582
const GL_SOURCE0_ALPHA = &h8588
const GL_SOURCE1_ALPHA = &h8589
const GL_SOURCE2_ALPHA = &h858A
const GL_OPERAND0_RGB = &h8590
const GL_OPERAND1_RGB = &h8591
const GL_OPERAND2_RGB = &h8592
const GL_OPERAND0_ALPHA = &h8598
const GL_OPERAND1_ALPHA = &h8599
const GL_OPERAND2_ALPHA = &h859A
const GL_RGB_SCALE = &h8573
const GL_ADD_SIGNED = &h8574
const GL_INTERPOLATE = &h8575
const GL_SUBTRACT = &h84E7
const GL_CONSTANT = &h8576
const GL_PRIMARY_COLOR = &h8577
const GL_PREVIOUS = &h8578
const GL_DOT3_RGB = &h86AE
const GL_DOT3_RGBA = &h86AF

type PFNGLACTIVETEXTUREPROC as sub(byval texture as GLenum)
type PFNGLSAMPLECOVERAGEPROC as sub(byval value as GLfloat, byval invert as GLboolean)
type PFNGLCOMPRESSEDTEXIMAGE3DPROC as sub(byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval border as GLint, byval imageSize as GLsizei, byval data as const any ptr)
type PFNGLCOMPRESSEDTEXIMAGE2DPROC as sub(byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval border as GLint, byval imageSize as GLsizei, byval data as const any ptr)
type PFNGLCOMPRESSEDTEXIMAGE1DPROC as sub(byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval width as GLsizei, byval border as GLint, byval imageSize as GLsizei, byval data as const any ptr)
type PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC as sub(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval format as GLenum, byval imageSize as GLsizei, byval data as const any ptr)
type PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC as sub(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval imageSize as GLsizei, byval data as const any ptr)
type PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC as sub(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval width as GLsizei, byval format as GLenum, byval imageSize as GLsizei, byval data as const any ptr)
type PFNGLGETCOMPRESSEDTEXIMAGEPROC as sub(byval target as GLenum, byval level as GLint, byval img as any ptr)
type PFNGLCLIENTACTIVETEXTUREPROC as sub(byval texture as GLenum)
type PFNGLMULTITEXCOORD1DPROC as sub(byval target as GLenum, byval s as GLdouble)
type PFNGLMULTITEXCOORD1DVPROC as sub(byval target as GLenum, byval v as const GLdouble ptr)
type PFNGLMULTITEXCOORD1FPROC as sub(byval target as GLenum, byval s as GLfloat)
type PFNGLMULTITEXCOORD1FVPROC as sub(byval target as GLenum, byval v as const GLfloat ptr)
type PFNGLMULTITEXCOORD1IPROC as sub(byval target as GLenum, byval s as GLint)
type PFNGLMULTITEXCOORD1IVPROC as sub(byval target as GLenum, byval v as const GLint ptr)
type PFNGLMULTITEXCOORD1SPROC as sub(byval target as GLenum, byval s as GLshort)
type PFNGLMULTITEXCOORD1SVPROC as sub(byval target as GLenum, byval v as const GLshort ptr)
type PFNGLMULTITEXCOORD2DPROC as sub(byval target as GLenum, byval s as GLdouble, byval t as GLdouble)
type PFNGLMULTITEXCOORD2DVPROC as sub(byval target as GLenum, byval v as const GLdouble ptr)
type PFNGLMULTITEXCOORD2FPROC as sub(byval target as GLenum, byval s as GLfloat, byval t as GLfloat)
type PFNGLMULTITEXCOORD2FVPROC as sub(byval target as GLenum, byval v as const GLfloat ptr)
type PFNGLMULTITEXCOORD2IPROC as sub(byval target as GLenum, byval s as GLint, byval t as GLint)
type PFNGLMULTITEXCOORD2IVPROC as sub(byval target as GLenum, byval v as const GLint ptr)
type PFNGLMULTITEXCOORD2SPROC as sub(byval target as GLenum, byval s as GLshort, byval t as GLshort)
type PFNGLMULTITEXCOORD2SVPROC as sub(byval target as GLenum, byval v as const GLshort ptr)
type PFNGLMULTITEXCOORD3DPROC as sub(byval target as GLenum, byval s as GLdouble, byval t as GLdouble, byval r as GLdouble)
type PFNGLMULTITEXCOORD3DVPROC as sub(byval target as GLenum, byval v as const GLdouble ptr)
type PFNGLMULTITEXCOORD3FPROC as sub(byval target as GLenum, byval s as GLfloat, byval t as GLfloat, byval r as GLfloat)
type PFNGLMULTITEXCOORD3FVPROC as sub(byval target as GLenum, byval v as const GLfloat ptr)
type PFNGLMULTITEXCOORD3IPROC as sub(byval target as GLenum, byval s as GLint, byval t as GLint, byval r as GLint)
type PFNGLMULTITEXCOORD3IVPROC as sub(byval target as GLenum, byval v as const GLint ptr)
type PFNGLMULTITEXCOORD3SPROC as sub(byval target as GLenum, byval s as GLshort, byval t as GLshort, byval r as GLshort)
type PFNGLMULTITEXCOORD3SVPROC as sub(byval target as GLenum, byval v as const GLshort ptr)
type PFNGLMULTITEXCOORD4DPROC as sub(byval target as GLenum, byval s as GLdouble, byval t as GLdouble, byval r as GLdouble, byval q as GLdouble)
type PFNGLMULTITEXCOORD4DVPROC as sub(byval target as GLenum, byval v as const GLdouble ptr)
type PFNGLMULTITEXCOORD4FPROC as sub(byval target as GLenum, byval s as GLfloat, byval t as GLfloat, byval r as GLfloat, byval q as GLfloat)
type PFNGLMULTITEXCOORD4FVPROC as sub(byval target as GLenum, byval v as const GLfloat ptr)
type PFNGLMULTITEXCOORD4IPROC as sub(byval target as GLenum, byval s as GLint, byval t as GLint, byval r as GLint, byval q as GLint)
type PFNGLMULTITEXCOORD4IVPROC as sub(byval target as GLenum, byval v as const GLint ptr)
type PFNGLMULTITEXCOORD4SPROC as sub(byval target as GLenum, byval s as GLshort, byval t as GLshort, byval r as GLshort, byval q as GLshort)
type PFNGLMULTITEXCOORD4SVPROC as sub(byval target as GLenum, byval v as const GLshort ptr)
type PFNGLLOADTRANSPOSEMATRIXFPROC as sub(byval m as const GLfloat ptr)
type PFNGLLOADTRANSPOSEMATRIXDPROC as sub(byval m as const GLdouble ptr)
type PFNGLMULTTRANSPOSEMATRIXFPROC as sub(byval m as const GLfloat ptr)
type PFNGLMULTTRANSPOSEMATRIXDPROC as sub(byval m as const GLdouble ptr)


const GL_VERSION_1_4 = 1
const GL_BLEND_DST_RGB = &h80C8
const GL_BLEND_SRC_RGB = &h80C9
const GL_BLEND_DST_ALPHA = &h80CA
const GL_BLEND_SRC_ALPHA = &h80CB
const GL_POINT_FADE_THRESHOLD_SIZE = &h8128
const GL_DEPTH_COMPONENT16 = &h81A5
const GL_DEPTH_COMPONENT24 = &h81A6
const GL_DEPTH_COMPONENT32 = &h81A7
const GL_MIRRORED_REPEAT = &h8370
const GL_MAX_TEXTURE_LOD_BIAS = &h84FD
const GL_TEXTURE_LOD_BIAS = &h8501
const GL_INCR_WRAP = &h8507
const GL_DECR_WRAP = &h8508
const GL_TEXTURE_DEPTH_SIZE = &h884A
const GL_TEXTURE_COMPARE_MODE = &h884C
const GL_TEXTURE_COMPARE_FUNC = &h884D
const GL_POINT_SIZE_MIN = &h8126
const GL_POINT_SIZE_MAX = &h8127
const GL_POINT_DISTANCE_ATTENUATION = &h8129
const GL_GENERATE_MIPMAP = &h8191
const GL_GENERATE_MIPMAP_HINT = &h8192
const GL_FOG_COORDINATE_SOURCE = &h8450
const GL_FOG_COORDINATE = &h8451
const GL_FRAGMENT_DEPTH = &h8452
const GL_CURRENT_FOG_COORDINATE = &h8453
const GL_FOG_COORDINATE_ARRAY_TYPE = &h8454
const GL_FOG_COORDINATE_ARRAY_STRIDE = &h8455
const GL_FOG_COORDINATE_ARRAY_POINTER = &h8456
const GL_FOG_COORDINATE_ARRAY = &h8457
const GL_COLOR_SUM = &h8458
const GL_CURRENT_SECONDARY_COLOR = &h8459
const GL_SECONDARY_COLOR_ARRAY_SIZE = &h845A
const GL_SECONDARY_COLOR_ARRAY_TYPE = &h845B
const GL_SECONDARY_COLOR_ARRAY_STRIDE = &h845C
const GL_SECONDARY_COLOR_ARRAY_POINTER = &h845D
const GL_SECONDARY_COLOR_ARRAY = &h845E
const GL_TEXTURE_FILTER_CONTROL = &h8500
const GL_DEPTH_TEXTURE_MODE = &h884B
const GL_COMPARE_R_TO_TEXTURE = &h884E
const GL_FUNC_ADD = &h8006
const GL_FUNC_SUBTRACT = &h800A
const GL_FUNC_REVERSE_SUBTRACT = &h800B
const GL_MIN = &h8007
const GL_MAX = &h8008
const GL_CONSTANT_COLOR = &h8001
const GL_ONE_MINUS_CONSTANT_COLOR = &h8002
const GL_CONSTANT_ALPHA = &h8003
const GL_ONE_MINUS_CONSTANT_ALPHA = &h8004

type PFNGLBLENDFUNCSEPARATEPROC as sub(byval sfactorRGB as GLenum, byval dfactorRGB as GLenum, byval sfactorAlpha as GLenum, byval dfactorAlpha as GLenum)
type PFNGLMULTIDRAWARRAYSPROC as sub(byval mode as GLenum, byval first as const GLint ptr, byval count as const GLsizei ptr, byval drawcount as GLsizei)
type PFNGLMULTIDRAWELEMENTSPROC as sub(byval mode as GLenum, byval count as const GLsizei ptr, byval type as GLenum, byval indices as const any const ptr ptr, byval drawcount as GLsizei)
type PFNGLPOINTPARAMETERFPROC as sub(byval pname as GLenum, byval param as GLfloat)
type PFNGLPOINTPARAMETERFVPROC as sub(byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLPOINTPARAMETERIPROC as sub(byval pname as GLenum, byval param as GLint)
type PFNGLPOINTPARAMETERIVPROC as sub(byval pname as GLenum, byval params as const GLint ptr)
type PFNGLFOGCOORDFPROC as sub(byval coord as GLfloat)
type PFNGLFOGCOORDFVPROC as sub(byval coord as const GLfloat ptr)
type PFNGLFOGCOORDDPROC as sub(byval coord as GLdouble)
type PFNGLFOGCOORDDVPROC as sub(byval coord as const GLdouble ptr)
type PFNGLFOGCOORDPOINTERPROC as sub(byval type as GLenum, byval stride as GLsizei, byval pointer as const any ptr)
type PFNGLSECONDARYCOLOR3BPROC as sub(byval red as GLbyte, byval green as GLbyte, byval blue as GLbyte)
type PFNGLSECONDARYCOLOR3BVPROC as sub(byval v as const GLbyte ptr)
type PFNGLSECONDARYCOLOR3DPROC as sub(byval red as GLdouble, byval green as GLdouble, byval blue as GLdouble)
type PFNGLSECONDARYCOLOR3DVPROC as sub(byval v as const GLdouble ptr)
type PFNGLSECONDARYCOLOR3FPROC as sub(byval red as GLfloat, byval green as GLfloat, byval blue as GLfloat)
type PFNGLSECONDARYCOLOR3FVPROC as sub(byval v as const GLfloat ptr)
type PFNGLSECONDARYCOLOR3IPROC as sub(byval red as GLint, byval green as GLint, byval blue as GLint)
type PFNGLSECONDARYCOLOR3IVPROC as sub(byval v as const GLint ptr)
type PFNGLSECONDARYCOLOR3SPROC as sub(byval red as GLshort, byval green as GLshort, byval blue as GLshort)
type PFNGLSECONDARYCOLOR3SVPROC as sub(byval v as const GLshort ptr)
type PFNGLSECONDARYCOLOR3UBPROC as sub(byval red as GLubyte, byval green as GLubyte, byval blue as GLubyte)
type PFNGLSECONDARYCOLOR3UBVPROC as sub(byval v as const GLubyte ptr)
type PFNGLSECONDARYCOLOR3UIPROC as sub(byval red as GLuint, byval green as GLuint, byval blue as GLuint)
type PFNGLSECONDARYCOLOR3UIVPROC as sub(byval v as const GLuint ptr)
type PFNGLSECONDARYCOLOR3USPROC as sub(byval red as GLushort, byval green as GLushort, byval blue as GLushort)
type PFNGLSECONDARYCOLOR3USVPROC as sub(byval v as const GLushort ptr)
type PFNGLSECONDARYCOLORPOINTERPROC as sub(byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval pointer as const any ptr)
type PFNGLWINDOWPOS2DPROC as sub(byval x as GLdouble, byval y as GLdouble)
type PFNGLWINDOWPOS2DVPROC as sub(byval v as const GLdouble ptr)
type PFNGLWINDOWPOS2FPROC as sub(byval x as GLfloat, byval y as GLfloat)
type PFNGLWINDOWPOS2FVPROC as sub(byval v as const GLfloat ptr)
type PFNGLWINDOWPOS2IPROC as sub(byval x as GLint, byval y as GLint)
type PFNGLWINDOWPOS2IVPROC as sub(byval v as const GLint ptr)
type PFNGLWINDOWPOS2SPROC as sub(byval x as GLshort, byval y as GLshort)
type PFNGLWINDOWPOS2SVPROC as sub(byval v as const GLshort ptr)
type PFNGLWINDOWPOS3DPROC as sub(byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
type PFNGLWINDOWPOS3DVPROC as sub(byval v as const GLdouble ptr)
type PFNGLWINDOWPOS3FPROC as sub(byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLWINDOWPOS3FVPROC as sub(byval v as const GLfloat ptr)
type PFNGLWINDOWPOS3IPROC as sub(byval x as GLint, byval y as GLint, byval z as GLint)
type PFNGLWINDOWPOS3IVPROC as sub(byval v as const GLint ptr)
type PFNGLWINDOWPOS3SPROC as sub(byval x as GLshort, byval y as GLshort, byval z as GLshort)
type PFNGLWINDOWPOS3SVPROC as sub(byval v as const GLshort ptr)
type PFNGLBLENDCOLORPROC as sub(byval red as GLfloat, byval green as GLfloat, byval blue as GLfloat, byval alpha as GLfloat)
type PFNGLBLENDEQUATIONPROC as sub(byval mode as GLenum)


const GL_VERSION_1_5 = 1
type GLsizeiptr as integer
type GLintptr as integer
const GL_BUFFER_SIZE = &h8764
const GL_BUFFER_USAGE = &h8765
const GL_QUERY_COUNTER_BITS = &h8864
const GL_CURRENT_QUERY = &h8865
const GL_QUERY_RESULT = &h8866
const GL_QUERY_RESULT_AVAILABLE = &h8867
const GL_ARRAY_BUFFER = &h8892
const GL_ELEMENT_ARRAY_BUFFER = &h8893
const GL_ARRAY_BUFFER_BINDING = &h8894
const GL_ELEMENT_ARRAY_BUFFER_BINDING = &h8895
const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = &h889F
const GL_READ_ONLY = &h88B8
const GL_WRITE_ONLY = &h88B9
const GL_READ_WRITE = &h88BA
const GL_BUFFER_ACCESS = &h88BB
const GL_BUFFER_MAPPED = &h88BC
const GL_BUFFER_MAP_POINTER = &h88BD
const GL_STREAM_DRAW = &h88E0
const GL_STREAM_READ = &h88E1
const GL_STREAM_COPY = &h88E2
const GL_STATIC_DRAW = &h88E4
const GL_STATIC_READ = &h88E5
const GL_STATIC_COPY = &h88E6
const GL_DYNAMIC_DRAW = &h88E8
const GL_DYNAMIC_READ = &h88E9
const GL_DYNAMIC_COPY = &h88EA
const GL_SAMPLES_PASSED = &h8914
const GL_SRC1_ALPHA = &h8589
const GL_VERTEX_ARRAY_BUFFER_BINDING = &h8896
const GL_NORMAL_ARRAY_BUFFER_BINDING = &h8897
const GL_COLOR_ARRAY_BUFFER_BINDING = &h8898
const GL_INDEX_ARRAY_BUFFER_BINDING = &h8899
const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = &h889A
const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = &h889B
const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = &h889C
const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = &h889D
const GL_WEIGHT_ARRAY_BUFFER_BINDING = &h889E
const GL_FOG_COORD_SRC = &h8450
const GL_FOG_COORD = &h8451
const GL_CURRENT_FOG_COORD = &h8453
const GL_FOG_COORD_ARRAY_TYPE = &h8454
const GL_FOG_COORD_ARRAY_STRIDE = &h8455
const GL_FOG_COORD_ARRAY_POINTER = &h8456
const GL_FOG_COORD_ARRAY = &h8457
const GL_FOG_COORD_ARRAY_BUFFER_BINDING = &h889D
const GL_SRC0_RGB = &h8580
const GL_SRC1_RGB = &h8581
const GL_SRC2_RGB = &h8582
const GL_SRC0_ALPHA = &h8588
const GL_SRC2_ALPHA = &h858A

type PFNGLGENQUERIESPROC as sub(byval n as GLsizei, byval ids as GLuint ptr)
type PFNGLDELETEQUERIESPROC as sub(byval n as GLsizei, byval ids as const GLuint ptr)
type PFNGLISQUERYPROC as function(byval id as GLuint) as GLboolean
type PFNGLBEGINQUERYPROC as sub(byval target as GLenum, byval id as GLuint)
type PFNGLENDQUERYPROC as sub(byval target as GLenum)
type PFNGLGETQUERYIVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETQUERYOBJECTIVPROC as sub(byval id as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETQUERYOBJECTUIVPROC as sub(byval id as GLuint, byval pname as GLenum, byval params as GLuint ptr)
type PFNGLBINDBUFFERPROC as sub(byval target as GLenum, byval buffer as GLuint)
type PFNGLDELETEBUFFERSPROC as sub(byval n as GLsizei, byval buffers as const GLuint ptr)
type PFNGLGENBUFFERSPROC as sub(byval n as GLsizei, byval buffers as GLuint ptr)
type PFNGLISBUFFERPROC as function(byval buffer as GLuint) as GLboolean
type PFNGLBUFFERDATAPROC as sub(byval target as GLenum, byval size as GLsizeiptr, byval data as const any ptr, byval usage as GLenum)
type PFNGLBUFFERSUBDATAPROC as sub(byval target as GLenum, byval offset as GLintptr, byval size as GLsizeiptr, byval data as const any ptr)
type PFNGLGETBUFFERSUBDATAPROC as sub(byval target as GLenum, byval offset as GLintptr, byval size as GLsizeiptr, byval data as any ptr)
type PFNGLMAPBUFFERPROC as function(byval target as GLenum, byval access as GLenum) as any ptr
type PFNGLUNMAPBUFFERPROC as function(byval target as GLenum) as GLboolean
type PFNGLGETBUFFERPARAMETERIVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETBUFFERPOINTERVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as any ptr ptr)


const GL_VERSION_2_0 = 1
type GLchar as zstring
const GL_BLEND_EQUATION_RGB = &h8009
const GL_VERTEX_ATTRIB_ARRAY_ENABLED = &h8622
const GL_VERTEX_ATTRIB_ARRAY_SIZE = &h8623
const GL_VERTEX_ATTRIB_ARRAY_STRIDE = &h8624
const GL_VERTEX_ATTRIB_ARRAY_TYPE = &h8625
const GL_CURRENT_VERTEX_ATTRIB = &h8626
const GL_VERTEX_PROGRAM_POINT_SIZE = &h8642
const GL_VERTEX_ATTRIB_ARRAY_POINTER = &h8645
const GL_STENCIL_BACK_FUNC = &h8800
const GL_STENCIL_BACK_FAIL = &h8801
const GL_STENCIL_BACK_PASS_DEPTH_FAIL = &h8802
const GL_STENCIL_BACK_PASS_DEPTH_PASS = &h8803
const GL_MAX_DRAW_BUFFERS = &h8824
const GL_DRAW_BUFFER0 = &h8825
const GL_DRAW_BUFFER1 = &h8826
const GL_DRAW_BUFFER2 = &h8827
const GL_DRAW_BUFFER3 = &h8828
const GL_DRAW_BUFFER4 = &h8829
const GL_DRAW_BUFFER5 = &h882A
const GL_DRAW_BUFFER6 = &h882B
const GL_DRAW_BUFFER7 = &h882C
const GL_DRAW_BUFFER8 = &h882D
const GL_DRAW_BUFFER9 = &h882E
const GL_DRAW_BUFFER10 = &h882F
const GL_DRAW_BUFFER11 = &h8830
const GL_DRAW_BUFFER12 = &h8831
const GL_DRAW_BUFFER13 = &h8832
const GL_DRAW_BUFFER14 = &h8833
const GL_DRAW_BUFFER15 = &h8834
const GL_BLEND_EQUATION_ALPHA = &h883D
const GL_MAX_VERTEX_ATTRIBS = &h8869
const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = &h886A
const GL_MAX_TEXTURE_IMAGE_UNITS = &h8872
const GL_FRAGMENT_SHADER = &h8B30
const GL_VERTEX_SHADER = &h8B31
const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = &h8B49
const GL_MAX_VERTEX_UNIFORM_COMPONENTS = &h8B4A
const GL_MAX_VARYING_FLOATS = &h8B4B
const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = &h8B4C
const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = &h8B4D
const GL_SHADER_TYPE = &h8B4F
const GL_FLOAT_VEC2 = &h8B50
const GL_FLOAT_VEC3 = &h8B51
const GL_FLOAT_VEC4 = &h8B52
const GL_INT_VEC2 = &h8B53
const GL_INT_VEC3 = &h8B54
const GL_INT_VEC4 = &h8B55
const GL_BOOL = &h8B56
const GL_BOOL_VEC2 = &h8B57
const GL_BOOL_VEC3 = &h8B58
const GL_BOOL_VEC4 = &h8B59
const GL_FLOAT_MAT2 = &h8B5A
const GL_FLOAT_MAT3 = &h8B5B
const GL_FLOAT_MAT4 = &h8B5C
const GL_SAMPLER_1D = &h8B5D
const GL_SAMPLER_2D = &h8B5E
const GL_SAMPLER_3D = &h8B5F
const GL_SAMPLER_CUBE = &h8B60
const GL_SAMPLER_1D_SHADOW = &h8B61
const GL_SAMPLER_2D_SHADOW = &h8B62
const GL_DELETE_STATUS = &h8B80
const GL_COMPILE_STATUS = &h8B81
const GL_LINK_STATUS = &h8B82
const GL_VALIDATE_STATUS = &h8B83
const GL_INFO_LOG_LENGTH = &h8B84
const GL_ATTACHED_SHADERS = &h8B85
const GL_ACTIVE_UNIFORMS = &h8B86
const GL_ACTIVE_UNIFORM_MAX_LENGTH = &h8B87
const GL_SHADER_SOURCE_LENGTH = &h8B88
const GL_ACTIVE_ATTRIBUTES = &h8B89
const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = &h8B8A
const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = &h8B8B
const GL_SHADING_LANGUAGE_VERSION = &h8B8C
const GL_CURRENT_PROGRAM = &h8B8D
const GL_POINT_SPRITE_COORD_ORIGIN = &h8CA0
const GL_LOWER_LEFT = &h8CA1
const GL_UPPER_LEFT = &h8CA2
const GL_STENCIL_BACK_REF = &h8CA3
const GL_STENCIL_BACK_VALUE_MASK = &h8CA4
const GL_STENCIL_BACK_WRITEMASK = &h8CA5
const GL_VERTEX_PROGRAM_TWO_SIDE = &h8643
const GL_POINT_SPRITE = &h8861
const GL_COORD_REPLACE = &h8862
const GL_MAX_TEXTURE_COORDS = &h8871

type PFNGLBLENDEQUATIONSEPARATEPROC as sub(byval modeRGB as GLenum, byval modeAlpha as GLenum)
type PFNGLDRAWBUFFERSPROC as sub(byval n as GLsizei, byval bufs as const GLenum ptr)
type PFNGLSTENCILOPSEPARATEPROC as sub(byval face as GLenum, byval sfail as GLenum, byval dpfail as GLenum, byval dppass as GLenum)
type PFNGLSTENCILFUNCSEPARATEPROC as sub(byval face as GLenum, byval func as GLenum, byval ref as GLint, byval mask as GLuint)
type PFNGLSTENCILMASKSEPARATEPROC as sub(byval face as GLenum, byval mask as GLuint)
type PFNGLATTACHSHADERPROC as sub(byval program as GLuint, byval shader as GLuint)
type PFNGLBINDATTRIBLOCATIONPROC as sub(byval program as GLuint, byval index as GLuint, byval name as const GLchar ptr)
type PFNGLCOMPILESHADERPROC as sub(byval shader as GLuint)
type PFNGLCREATEPROGRAMPROC as function() as GLuint
type PFNGLCREATESHADERPROC as function(byval type as GLenum) as GLuint
type PFNGLDELETEPROGRAMPROC as sub(byval program as GLuint)
type PFNGLDELETESHADERPROC as sub(byval shader as GLuint)
type PFNGLDETACHSHADERPROC as sub(byval program as GLuint, byval shader as GLuint)
type PFNGLDISABLEVERTEXATTRIBARRAYPROC as sub(byval index as GLuint)
type PFNGLENABLEVERTEXATTRIBARRAYPROC as sub(byval index as GLuint)
type PFNGLGETACTIVEATTRIBPROC as sub(byval program as GLuint, byval index as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval size as GLint ptr, byval type as GLenum ptr, byval name as GLchar ptr)
type PFNGLGETACTIVEUNIFORMPROC as sub(byval program as GLuint, byval index as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval size as GLint ptr, byval type as GLenum ptr, byval name as GLchar ptr)
type PFNGLGETATTACHEDSHADERSPROC as sub(byval program as GLuint, byval maxCount as GLsizei, byval count as GLsizei ptr, byval shaders as GLuint ptr)
type PFNGLGETATTRIBLOCATIONPROC as function(byval program as GLuint, byval name as const GLchar ptr) as GLint
type PFNGLGETPROGRAMIVPROC as sub(byval program as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETPROGRAMINFOLOGPROC as sub(byval program as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval infoLog as GLchar ptr)
type PFNGLGETSHADERIVPROC as sub(byval shader as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETSHADERINFOLOGPROC as sub(byval shader as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval infoLog as GLchar ptr)
type PFNGLGETSHADERSOURCEPROC as sub(byval shader as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval source as GLchar ptr)
type PFNGLGETUNIFORMLOCATIONPROC as function(byval program as GLuint, byval name as const GLchar ptr) as GLint
type PFNGLGETUNIFORMFVPROC as sub(byval program as GLuint, byval location as GLint, byval params as GLfloat ptr)
type PFNGLGETUNIFORMIVPROC as sub(byval program as GLuint, byval location as GLint, byval params as GLint ptr)
type PFNGLGETVERTEXATTRIBDVPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLdouble ptr)
type PFNGLGETVERTEXATTRIBFVPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETVERTEXATTRIBIVPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETVERTEXATTRIBPOINTERVPROC as sub(byval index as GLuint, byval pname as GLenum, byval pointer as any ptr ptr)
type PFNGLISPROGRAMPROC as function(byval program as GLuint) as GLboolean
type PFNGLISSHADERPROC as function(byval shader as GLuint) as GLboolean
type PFNGLLINKPROGRAMPROC as sub(byval program as GLuint)
type PFNGLSHADERSOURCEPROC as sub(byval shader as GLuint, byval count as GLsizei, byval string as const GLchar const ptr ptr, byval length as const GLint ptr)
type PFNGLUSEPROGRAMPROC as sub(byval program as GLuint)
type PFNGLUNIFORM1FPROC as sub(byval location as GLint, byval v0 as GLfloat)
type PFNGLUNIFORM2FPROC as sub(byval location as GLint, byval v0 as GLfloat, byval v1 as GLfloat)
type PFNGLUNIFORM3FPROC as sub(byval location as GLint, byval v0 as GLfloat, byval v1 as GLfloat, byval v2 as GLfloat)
type PFNGLUNIFORM4FPROC as sub(byval location as GLint, byval v0 as GLfloat, byval v1 as GLfloat, byval v2 as GLfloat, byval v3 as GLfloat)
type PFNGLUNIFORM1IPROC as sub(byval location as GLint, byval v0 as GLint)
type PFNGLUNIFORM2IPROC as sub(byval location as GLint, byval v0 as GLint, byval v1 as GLint)
type PFNGLUNIFORM3IPROC as sub(byval location as GLint, byval v0 as GLint, byval v1 as GLint, byval v2 as GLint)
type PFNGLUNIFORM4IPROC as sub(byval location as GLint, byval v0 as GLint, byval v1 as GLint, byval v2 as GLint, byval v3 as GLint)
type PFNGLUNIFORM1FVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLfloat ptr)
type PFNGLUNIFORM2FVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLfloat ptr)
type PFNGLUNIFORM3FVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLfloat ptr)
type PFNGLUNIFORM4FVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLfloat ptr)
type PFNGLUNIFORM1IVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLint ptr)
type PFNGLUNIFORM2IVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLint ptr)
type PFNGLUNIFORM3IVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLint ptr)
type PFNGLUNIFORM4IVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLint ptr)
type PFNGLUNIFORMMATRIX2FVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLUNIFORMMATRIX3FVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLUNIFORMMATRIX4FVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLVALIDATEPROGRAMPROC as sub(byval program as GLuint)
type PFNGLVERTEXATTRIB1DPROC as sub(byval index as GLuint, byval x as GLdouble)
type PFNGLVERTEXATTRIB1DVPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIB1FPROC as sub(byval index as GLuint, byval x as GLfloat)
type PFNGLVERTEXATTRIB1FVPROC as sub(byval index as GLuint, byval v as const GLfloat ptr)
type PFNGLVERTEXATTRIB1SPROC as sub(byval index as GLuint, byval x as GLshort)
type PFNGLVERTEXATTRIB1SVPROC as sub(byval index as GLuint, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIB2DPROC as sub(byval index as GLuint, byval x as GLdouble, byval y as GLdouble)
type PFNGLVERTEXATTRIB2DVPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIB2FPROC as sub(byval index as GLuint, byval x as GLfloat, byval y as GLfloat)
type PFNGLVERTEXATTRIB2FVPROC as sub(byval index as GLuint, byval v as const GLfloat ptr)
type PFNGLVERTEXATTRIB2SPROC as sub(byval index as GLuint, byval x as GLshort, byval y as GLshort)
type PFNGLVERTEXATTRIB2SVPROC as sub(byval index as GLuint, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIB3DPROC as sub(byval index as GLuint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
type PFNGLVERTEXATTRIB3DVPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIB3FPROC as sub(byval index as GLuint, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLVERTEXATTRIB3FVPROC as sub(byval index as GLuint, byval v as const GLfloat ptr)
type PFNGLVERTEXATTRIB3SPROC as sub(byval index as GLuint, byval x as GLshort, byval y as GLshort, byval z as GLshort)
type PFNGLVERTEXATTRIB3SVPROC as sub(byval index as GLuint, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIB4NBVPROC as sub(byval index as GLuint, byval v as const GLbyte ptr)
type PFNGLVERTEXATTRIB4NIVPROC as sub(byval index as GLuint, byval v as const GLint ptr)
type PFNGLVERTEXATTRIB4NSVPROC as sub(byval index as GLuint, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIB4NUBPROC as sub(byval index as GLuint, byval x as GLubyte, byval y as GLubyte, byval z as GLubyte, byval w as GLubyte)
type PFNGLVERTEXATTRIB4NUBVPROC as sub(byval index as GLuint, byval v as const GLubyte ptr)
type PFNGLVERTEXATTRIB4NUIVPROC as sub(byval index as GLuint, byval v as const GLuint ptr)
type PFNGLVERTEXATTRIB4NUSVPROC as sub(byval index as GLuint, byval v as const GLushort ptr)
type PFNGLVERTEXATTRIB4BVPROC as sub(byval index as GLuint, byval v as const GLbyte ptr)
type PFNGLVERTEXATTRIB4DPROC as sub(byval index as GLuint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble, byval w as GLdouble)
type PFNGLVERTEXATTRIB4DVPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIB4FPROC as sub(byval index as GLuint, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat, byval w as GLfloat)
type PFNGLVERTEXATTRIB4FVPROC as sub(byval index as GLuint, byval v as const GLfloat ptr)
type PFNGLVERTEXATTRIB4IVPROC as sub(byval index as GLuint, byval v as const GLint ptr)
type PFNGLVERTEXATTRIB4SPROC as sub(byval index as GLuint, byval x as GLshort, byval y as GLshort, byval z as GLshort, byval w as GLshort)
type PFNGLVERTEXATTRIB4SVPROC as sub(byval index as GLuint, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIB4UBVPROC as sub(byval index as GLuint, byval v as const GLubyte ptr)
type PFNGLVERTEXATTRIB4UIVPROC as sub(byval index as GLuint, byval v as const GLuint ptr)
type PFNGLVERTEXATTRIB4USVPROC as sub(byval index as GLuint, byval v as const GLushort ptr)
type PFNGLVERTEXATTRIBPOINTERPROC as sub(byval index as GLuint, byval size as GLint, byval type as GLenum, byval normalized as GLboolean, byval stride as GLsizei, byval pointer as const any ptr)


const GL_VERSION_2_1 = 1
const GL_PIXEL_PACK_BUFFER = &h88EB
const GL_PIXEL_UNPACK_BUFFER = &h88EC
const GL_PIXEL_PACK_BUFFER_BINDING = &h88ED
const GL_PIXEL_UNPACK_BUFFER_BINDING = &h88EF
const GL_FLOAT_MAT2x3 = &h8B65
const GL_FLOAT_MAT2x4 = &h8B66
const GL_FLOAT_MAT3x2 = &h8B67
const GL_FLOAT_MAT3x4 = &h8B68
const GL_FLOAT_MAT4x2 = &h8B69
const GL_FLOAT_MAT4x3 = &h8B6A
const GL_SRGB = &h8C40
const GL_SRGB8 = &h8C41
const GL_SRGB_ALPHA = &h8C42
const GL_SRGB8_ALPHA8 = &h8C43
const GL_COMPRESSED_SRGB = &h8C48
const GL_COMPRESSED_SRGB_ALPHA = &h8C49
const GL_CURRENT_RASTER_SECONDARY_COLOR = &h845F
const GL_SLUMINANCE_ALPHA = &h8C44
const GL_SLUMINANCE8_ALPHA8 = &h8C45
const GL_SLUMINANCE = &h8C46
const GL_SLUMINANCE8 = &h8C47
const GL_COMPRESSED_SLUMINANCE = &h8C4A
const GL_COMPRESSED_SLUMINANCE_ALPHA = &h8C4B

type PFNGLUNIFORMMATRIX2X3FVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLUNIFORMMATRIX3X2FVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLUNIFORMMATRIX2X4FVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLUNIFORMMATRIX4X2FVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLUNIFORMMATRIX3X4FVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLUNIFORMMATRIX4X3FVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)


const GL_VERSION_3_0 = 1
type GLhalf as ushort
const GL_COMPARE_REF_TO_TEXTURE = &h884E
const GL_CLIP_DISTANCE0 = &h3000
const GL_CLIP_DISTANCE1 = &h3001
const GL_CLIP_DISTANCE2 = &h3002
const GL_CLIP_DISTANCE3 = &h3003
const GL_CLIP_DISTANCE4 = &h3004
const GL_CLIP_DISTANCE5 = &h3005
const GL_CLIP_DISTANCE6 = &h3006
const GL_CLIP_DISTANCE7 = &h3007
const GL_MAX_CLIP_DISTANCES = &h0D32
const GL_MAJOR_VERSION = &h821B
const GL_MINOR_VERSION = &h821C
const GL_NUM_EXTENSIONS = &h821D
const GL_CONTEXT_FLAGS = &h821E
const GL_COMPRESSED_RED = &h8225
const GL_COMPRESSED_RG = &h8226
const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = &h00000001
const GL_RGBA32F = &h8814
const GL_RGB32F = &h8815
const GL_RGBA16F = &h881A
const GL_RGB16F = &h881B
const GL_VERTEX_ATTRIB_ARRAY_INTEGER = &h88FD
const GL_MAX_ARRAY_TEXTURE_LAYERS = &h88FF
const GL_MIN_PROGRAM_TEXEL_OFFSET = &h8904
const GL_MAX_PROGRAM_TEXEL_OFFSET = &h8905
const GL_CLAMP_READ_COLOR = &h891C
const GL_FIXED_ONLY = &h891D
const GL_MAX_VARYING_COMPONENTS = &h8B4B
const GL_TEXTURE_1D_ARRAY = &h8C18
const GL_PROXY_TEXTURE_1D_ARRAY = &h8C19
const GL_TEXTURE_2D_ARRAY = &h8C1A
const GL_PROXY_TEXTURE_2D_ARRAY = &h8C1B
const GL_TEXTURE_BINDING_1D_ARRAY = &h8C1C
const GL_TEXTURE_BINDING_2D_ARRAY = &h8C1D
const GL_R11F_G11F_B10F = &h8C3A
const GL_UNSIGNED_INT_10F_11F_11F_REV = &h8C3B
const GL_RGB9_E5 = &h8C3D
const GL_UNSIGNED_INT_5_9_9_9_REV = &h8C3E
const GL_TEXTURE_SHARED_SIZE = &h8C3F
const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = &h8C76
const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = &h8C7F
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = &h8C80
const GL_TRANSFORM_FEEDBACK_VARYINGS = &h8C83
const GL_TRANSFORM_FEEDBACK_BUFFER_START = &h8C84
const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = &h8C85
const GL_PRIMITIVES_GENERATED = &h8C87
const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = &h8C88
const GL_RASTERIZER_DISCARD = &h8C89
const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = &h8C8A
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = &h8C8B
const GL_INTERLEAVED_ATTRIBS = &h8C8C
const GL_SEPARATE_ATTRIBS = &h8C8D
const GL_TRANSFORM_FEEDBACK_BUFFER = &h8C8E
const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = &h8C8F
const GL_RGBA32UI = &h8D70
const GL_RGB32UI = &h8D71
const GL_RGBA16UI = &h8D76
const GL_RGB16UI = &h8D77
const GL_RGBA8UI = &h8D7C
const GL_RGB8UI = &h8D7D
const GL_RGBA32I = &h8D82
const GL_RGB32I = &h8D83
const GL_RGBA16I = &h8D88
const GL_RGB16I = &h8D89
const GL_RGBA8I = &h8D8E
const GL_RGB8I = &h8D8F
const GL_RED_INTEGER = &h8D94
const GL_GREEN_INTEGER = &h8D95
const GL_BLUE_INTEGER = &h8D96
const GL_RGB_INTEGER = &h8D98
const GL_RGBA_INTEGER = &h8D99
const GL_BGR_INTEGER = &h8D9A
const GL_BGRA_INTEGER = &h8D9B
const GL_SAMPLER_1D_ARRAY = &h8DC0
const GL_SAMPLER_2D_ARRAY = &h8DC1
const GL_SAMPLER_1D_ARRAY_SHADOW = &h8DC3
const GL_SAMPLER_2D_ARRAY_SHADOW = &h8DC4
const GL_SAMPLER_CUBE_SHADOW = &h8DC5
const GL_UNSIGNED_INT_VEC2 = &h8DC6
const GL_UNSIGNED_INT_VEC3 = &h8DC7
const GL_UNSIGNED_INT_VEC4 = &h8DC8
const GL_INT_SAMPLER_1D = &h8DC9
const GL_INT_SAMPLER_2D = &h8DCA
const GL_INT_SAMPLER_3D = &h8DCB
const GL_INT_SAMPLER_CUBE = &h8DCC
const GL_INT_SAMPLER_1D_ARRAY = &h8DCE
const GL_INT_SAMPLER_2D_ARRAY = &h8DCF
const GL_UNSIGNED_INT_SAMPLER_1D = &h8DD1
const GL_UNSIGNED_INT_SAMPLER_2D = &h8DD2
const GL_UNSIGNED_INT_SAMPLER_3D = &h8DD3
const GL_UNSIGNED_INT_SAMPLER_CUBE = &h8DD4
const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = &h8DD6
const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = &h8DD7
const GL_QUERY_WAIT = &h8E13
const GL_QUERY_NO_WAIT = &h8E14
const GL_QUERY_BY_REGION_WAIT = &h8E15
const GL_QUERY_BY_REGION_NO_WAIT = &h8E16
const GL_BUFFER_ACCESS_FLAGS = &h911F
const GL_BUFFER_MAP_LENGTH = &h9120
const GL_BUFFER_MAP_OFFSET = &h9121
const GL_DEPTH_COMPONENT32F = &h8CAC
const GL_DEPTH32F_STENCIL8 = &h8CAD
const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = &h8DAD
const GL_INVALID_FRAMEBUFFER_OPERATION = &h0506
const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = &h8210
const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = &h8211
const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = &h8212
const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = &h8213
const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = &h8214
const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = &h8215
const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = &h8216
const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = &h8217
const GL_FRAMEBUFFER_DEFAULT = &h8218
const GL_FRAMEBUFFER_UNDEFINED = &h8219
const GL_DEPTH_STENCIL_ATTACHMENT = &h821A
const GL_MAX_RENDERBUFFER_SIZE = &h84E8
const GL_DEPTH_STENCIL = &h84F9
const GL_UNSIGNED_INT_24_8 = &h84FA
const GL_DEPTH24_STENCIL8 = &h88F0
const GL_TEXTURE_STENCIL_SIZE = &h88F1
const GL_TEXTURE_RED_TYPE = &h8C10
const GL_TEXTURE_GREEN_TYPE = &h8C11
const GL_TEXTURE_BLUE_TYPE = &h8C12
const GL_TEXTURE_ALPHA_TYPE = &h8C13
const GL_TEXTURE_DEPTH_TYPE = &h8C16
const GL_UNSIGNED_NORMALIZED = &h8C17
const GL_FRAMEBUFFER_BINDING = &h8CA6
const GL_DRAW_FRAMEBUFFER_BINDING = &h8CA6
const GL_RENDERBUFFER_BINDING = &h8CA7
const GL_READ_FRAMEBUFFER = &h8CA8
const GL_DRAW_FRAMEBUFFER = &h8CA9
const GL_READ_FRAMEBUFFER_BINDING = &h8CAA
const GL_RENDERBUFFER_SAMPLES = &h8CAB
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = &h8CD0
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = &h8CD1
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = &h8CD2
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = &h8CD3
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = &h8CD4
const GL_FRAMEBUFFER_COMPLETE = &h8CD5
const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = &h8CD6
const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = &h8CD7
const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = &h8CDB
const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = &h8CDC
const GL_FRAMEBUFFER_UNSUPPORTED = &h8CDD
const GL_MAX_COLOR_ATTACHMENTS = &h8CDF
const GL_COLOR_ATTACHMENT0 = &h8CE0
const GL_COLOR_ATTACHMENT1 = &h8CE1
const GL_COLOR_ATTACHMENT2 = &h8CE2
const GL_COLOR_ATTACHMENT3 = &h8CE3
const GL_COLOR_ATTACHMENT4 = &h8CE4
const GL_COLOR_ATTACHMENT5 = &h8CE5
const GL_COLOR_ATTACHMENT6 = &h8CE6
const GL_COLOR_ATTACHMENT7 = &h8CE7
const GL_COLOR_ATTACHMENT8 = &h8CE8
const GL_COLOR_ATTACHMENT9 = &h8CE9
const GL_COLOR_ATTACHMENT10 = &h8CEA
const GL_COLOR_ATTACHMENT11 = &h8CEB
const GL_COLOR_ATTACHMENT12 = &h8CEC
const GL_COLOR_ATTACHMENT13 = &h8CED
const GL_COLOR_ATTACHMENT14 = &h8CEE
const GL_COLOR_ATTACHMENT15 = &h8CEF
const GL_DEPTH_ATTACHMENT = &h8D00
const GL_STENCIL_ATTACHMENT = &h8D20
const GL_FRAMEBUFFER = &h8D40
const GL_RENDERBUFFER = &h8D41
const GL_RENDERBUFFER_WIDTH = &h8D42
const GL_RENDERBUFFER_HEIGHT = &h8D43
const GL_RENDERBUFFER_INTERNAL_FORMAT = &h8D44
const GL_STENCIL_INDEX1 = &h8D46
const GL_STENCIL_INDEX4 = &h8D47
const GL_STENCIL_INDEX8 = &h8D48
const GL_STENCIL_INDEX16 = &h8D49
const GL_RENDERBUFFER_RED_SIZE = &h8D50
const GL_RENDERBUFFER_GREEN_SIZE = &h8D51
const GL_RENDERBUFFER_BLUE_SIZE = &h8D52
const GL_RENDERBUFFER_ALPHA_SIZE = &h8D53
const GL_RENDERBUFFER_DEPTH_SIZE = &h8D54
const GL_RENDERBUFFER_STENCIL_SIZE = &h8D55
const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = &h8D56
const GL_MAX_SAMPLES = &h8D57
const GL_INDEX = &h8222
const GL_TEXTURE_LUMINANCE_TYPE = &h8C14
const GL_TEXTURE_INTENSITY_TYPE = &h8C15
const GL_FRAMEBUFFER_SRGB = &h8DB9
const GL_HALF_FLOAT = &h140B
const GL_MAP_READ_BIT = &h0001
const GL_MAP_WRITE_BIT = &h0002
const GL_MAP_INVALIDATE_RANGE_BIT = &h0004
const GL_MAP_INVALIDATE_BUFFER_BIT = &h0008
const GL_MAP_FLUSH_EXPLICIT_BIT = &h0010
const GL_MAP_UNSYNCHRONIZED_BIT = &h0020
const GL_COMPRESSED_RED_RGTC1 = &h8DBB
const GL_COMPRESSED_SIGNED_RED_RGTC1 = &h8DBC
const GL_COMPRESSED_RG_RGTC2 = &h8DBD
const GL_COMPRESSED_SIGNED_RG_RGTC2 = &h8DBE
const GL_RG = &h8227
const GL_RG_INTEGER = &h8228
const GL_R8 = &h8229
const GL_R16 = &h822A
const GL_RG8 = &h822B
const GL_RG16 = &h822C
const GL_R16F = &h822D
const GL_R32F = &h822E
const GL_RG16F = &h822F
const GL_RG32F = &h8230
const GL_R8I = &h8231
const GL_R8UI = &h8232
const GL_R16I = &h8233
const GL_R16UI = &h8234
const GL_R32I = &h8235
const GL_R32UI = &h8236
const GL_RG8I = &h8237
const GL_RG8UI = &h8238
const GL_RG16I = &h8239
const GL_RG16UI = &h823A
const GL_RG32I = &h823B
const GL_RG32UI = &h823C
const GL_VERTEX_ARRAY_BINDING = &h85B5
const GL_CLAMP_VERTEX_COLOR = &h891A
const GL_CLAMP_FRAGMENT_COLOR = &h891B
const GL_ALPHA_INTEGER = &h8D97

type PFNGLCOLORMASKIPROC as sub(byval index as GLuint, byval r as GLboolean, byval g as GLboolean, byval b as GLboolean, byval a as GLboolean)
type PFNGLGETBOOLEANI_VPROC as sub(byval target as GLenum, byval index as GLuint, byval data as GLboolean ptr)
type PFNGLGETINTEGERI_VPROC as sub(byval target as GLenum, byval index as GLuint, byval data as GLint ptr)
type PFNGLENABLEIPROC as sub(byval target as GLenum, byval index as GLuint)
type PFNGLDISABLEIPROC as sub(byval target as GLenum, byval index as GLuint)
type PFNGLISENABLEDIPROC as function(byval target as GLenum, byval index as GLuint) as GLboolean
type PFNGLBEGINTRANSFORMFEEDBACKPROC as sub(byval primitiveMode as GLenum)
type PFNGLENDTRANSFORMFEEDBACKPROC as sub()
type PFNGLBINDBUFFERRANGEPROC as sub(byval target as GLenum, byval index as GLuint, byval buffer as GLuint, byval offset as GLintptr, byval size as GLsizeiptr)
type PFNGLBINDBUFFERBASEPROC as sub(byval target as GLenum, byval index as GLuint, byval buffer as GLuint)
type PFNGLTRANSFORMFEEDBACKVARYINGSPROC as sub(byval program as GLuint, byval count as GLsizei, byval varyings as const GLchar const ptr ptr, byval bufferMode as GLenum)
type PFNGLGETTRANSFORMFEEDBACKVARYINGPROC as sub(byval program as GLuint, byval index as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval size as GLsizei ptr, byval type as GLenum ptr, byval name as GLchar ptr)
type PFNGLCLAMPCOLORPROC as sub(byval target as GLenum, byval clamp as GLenum)
type PFNGLBEGINCONDITIONALRENDERPROC as sub(byval id as GLuint, byval mode as GLenum)
type PFNGLENDCONDITIONALRENDERPROC as sub()
type PFNGLVERTEXATTRIBIPOINTERPROC as sub(byval index as GLuint, byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval pointer as const any ptr)
type PFNGLGETVERTEXATTRIBIIVPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETVERTEXATTRIBIUIVPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLuint ptr)
type PFNGLVERTEXATTRIBI1IPROC as sub(byval index as GLuint, byval x as GLint)
type PFNGLVERTEXATTRIBI2IPROC as sub(byval index as GLuint, byval x as GLint, byval y as GLint)
type PFNGLVERTEXATTRIBI3IPROC as sub(byval index as GLuint, byval x as GLint, byval y as GLint, byval z as GLint)
type PFNGLVERTEXATTRIBI4IPROC as sub(byval index as GLuint, byval x as GLint, byval y as GLint, byval z as GLint, byval w as GLint)
type PFNGLVERTEXATTRIBI1UIPROC as sub(byval index as GLuint, byval x as GLuint)
type PFNGLVERTEXATTRIBI2UIPROC as sub(byval index as GLuint, byval x as GLuint, byval y as GLuint)
type PFNGLVERTEXATTRIBI3UIPROC as sub(byval index as GLuint, byval x as GLuint, byval y as GLuint, byval z as GLuint)
type PFNGLVERTEXATTRIBI4UIPROC as sub(byval index as GLuint, byval x as GLuint, byval y as GLuint, byval z as GLuint, byval w as GLuint)
type PFNGLVERTEXATTRIBI1IVPROC as sub(byval index as GLuint, byval v as const GLint ptr)
type PFNGLVERTEXATTRIBI2IVPROC as sub(byval index as GLuint, byval v as const GLint ptr)
type PFNGLVERTEXATTRIBI3IVPROC as sub(byval index as GLuint, byval v as const GLint ptr)
type PFNGLVERTEXATTRIBI4IVPROC as sub(byval index as GLuint, byval v as const GLint ptr)
type PFNGLVERTEXATTRIBI1UIVPROC as sub(byval index as GLuint, byval v as const GLuint ptr)
type PFNGLVERTEXATTRIBI2UIVPROC as sub(byval index as GLuint, byval v as const GLuint ptr)
type PFNGLVERTEXATTRIBI3UIVPROC as sub(byval index as GLuint, byval v as const GLuint ptr)
type PFNGLVERTEXATTRIBI4UIVPROC as sub(byval index as GLuint, byval v as const GLuint ptr)
type PFNGLVERTEXATTRIBI4BVPROC as sub(byval index as GLuint, byval v as const GLbyte ptr)
type PFNGLVERTEXATTRIBI4SVPROC as sub(byval index as GLuint, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIBI4UBVPROC as sub(byval index as GLuint, byval v as const GLubyte ptr)
type PFNGLVERTEXATTRIBI4USVPROC as sub(byval index as GLuint, byval v as const GLushort ptr)
type PFNGLGETUNIFORMUIVPROC as sub(byval program as GLuint, byval location as GLint, byval params as GLuint ptr)
type PFNGLBINDFRAGDATALOCATIONPROC as sub(byval program as GLuint, byval color as GLuint, byval name as const GLchar ptr)
type PFNGLGETFRAGDATALOCATIONPROC as function(byval program as GLuint, byval name as const GLchar ptr) as GLint
type PFNGLUNIFORM1UIPROC as sub(byval location as GLint, byval v0 as GLuint)
type PFNGLUNIFORM2UIPROC as sub(byval location as GLint, byval v0 as GLuint, byval v1 as GLuint)
type PFNGLUNIFORM3UIPROC as sub(byval location as GLint, byval v0 as GLuint, byval v1 as GLuint, byval v2 as GLuint)
type PFNGLUNIFORM4UIPROC as sub(byval location as GLint, byval v0 as GLuint, byval v1 as GLuint, byval v2 as GLuint, byval v3 as GLuint)
type PFNGLUNIFORM1UIVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLuint ptr)
type PFNGLUNIFORM2UIVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLuint ptr)
type PFNGLUNIFORM3UIVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLuint ptr)
type PFNGLUNIFORM4UIVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLuint ptr)
type PFNGLTEXPARAMETERIIVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLTEXPARAMETERIUIVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLuint ptr)
type PFNGLGETTEXPARAMETERIIVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETTEXPARAMETERIUIVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLuint ptr)
type PFNGLCLEARBUFFERIVPROC as sub(byval buffer as GLenum, byval drawbuffer as GLint, byval value as const GLint ptr)
type PFNGLCLEARBUFFERUIVPROC as sub(byval buffer as GLenum, byval drawbuffer as GLint, byval value as const GLuint ptr)
type PFNGLCLEARBUFFERFVPROC as sub(byval buffer as GLenum, byval drawbuffer as GLint, byval value as const GLfloat ptr)
type PFNGLCLEARBUFFERFIPROC as sub(byval buffer as GLenum, byval drawbuffer as GLint, byval depth as GLfloat, byval stencil as GLint)
type PFNGLGETSTRINGIPROC as function(byval name as GLenum, byval index as GLuint) as const zstring ptr
type PFNGLISRENDERBUFFERPROC as function(byval renderbuffer as GLuint) as GLboolean
type PFNGLBINDRENDERBUFFERPROC as sub(byval target as GLenum, byval renderbuffer as GLuint)
type PFNGLDELETERENDERBUFFERSPROC as sub(byval n as GLsizei, byval renderbuffers as const GLuint ptr)
type PFNGLGENRENDERBUFFERSPROC as sub(byval n as GLsizei, byval renderbuffers as GLuint ptr)
type PFNGLRENDERBUFFERSTORAGEPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei)
type PFNGLGETRENDERBUFFERPARAMETERIVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLISFRAMEBUFFERPROC as function(byval framebuffer as GLuint) as GLboolean
type PFNGLBINDFRAMEBUFFERPROC as sub(byval target as GLenum, byval framebuffer as GLuint)
type PFNGLDELETEFRAMEBUFFERSPROC as sub(byval n as GLsizei, byval framebuffers as const GLuint ptr)
type PFNGLGENFRAMEBUFFERSPROC as sub(byval n as GLsizei, byval framebuffers as GLuint ptr)
type PFNGLCHECKFRAMEBUFFERSTATUSPROC as function(byval target as GLenum) as GLenum
type PFNGLFRAMEBUFFERTEXTURE1DPROC as sub(byval target as GLenum, byval attachment as GLenum, byval textarget as GLenum, byval texture as GLuint, byval level as GLint)
type PFNGLFRAMEBUFFERTEXTURE2DPROC as sub(byval target as GLenum, byval attachment as GLenum, byval textarget as GLenum, byval texture as GLuint, byval level as GLint)
type PFNGLFRAMEBUFFERTEXTURE3DPROC as sub(byval target as GLenum, byval attachment as GLenum, byval textarget as GLenum, byval texture as GLuint, byval level as GLint, byval zoffset as GLint)
type PFNGLFRAMEBUFFERRENDERBUFFERPROC as sub(byval target as GLenum, byval attachment as GLenum, byval renderbuffertarget as GLenum, byval renderbuffer as GLuint)
type PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC as sub(byval target as GLenum, byval attachment as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGENERATEMIPMAPPROC as sub(byval target as GLenum)
type PFNGLBLITFRAMEBUFFERPROC as sub(byval srcX0 as GLint, byval srcY0 as GLint, byval srcX1 as GLint, byval srcY1 as GLint, byval dstX0 as GLint, byval dstY0 as GLint, byval dstX1 as GLint, byval dstY1 as GLint, byval mask as GLbitfield, byval filter as GLenum)
type PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC as sub(byval target as GLenum, byval samples as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei)
type PFNGLFRAMEBUFFERTEXTURELAYERPROC as sub(byval target as GLenum, byval attachment as GLenum, byval texture as GLuint, byval level as GLint, byval layer as GLint)
type PFNGLMAPBUFFERRANGEPROC as function(byval target as GLenum, byval offset as GLintptr, byval length as GLsizeiptr, byval access as GLbitfield) as any ptr
type PFNGLFLUSHMAPPEDBUFFERRANGEPROC as sub(byval target as GLenum, byval offset as GLintptr, byval length as GLsizeiptr)
type PFNGLBINDVERTEXARRAYPROC as sub(byval array as GLuint)
type PFNGLDELETEVERTEXARRAYSPROC as sub(byval n as GLsizei, byval arrays as const GLuint ptr)
type PFNGLGENVERTEXARRAYSPROC as sub(byval n as GLsizei, byval arrays as GLuint ptr)
type PFNGLISVERTEXARRAYPROC as function(byval array as GLuint) as GLboolean


const GL_VERSION_3_1 = 1
const GL_SAMPLER_2D_RECT = &h8B63
const GL_SAMPLER_2D_RECT_SHADOW = &h8B64
const GL_SAMPLER_BUFFER = &h8DC2
const GL_INT_SAMPLER_2D_RECT = &h8DCD
const GL_INT_SAMPLER_BUFFER = &h8DD0
const GL_UNSIGNED_INT_SAMPLER_2D_RECT = &h8DD5
const GL_UNSIGNED_INT_SAMPLER_BUFFER = &h8DD8
const GL_TEXTURE_BUFFER = &h8C2A
const GL_MAX_TEXTURE_BUFFER_SIZE = &h8C2B
const GL_TEXTURE_BINDING_BUFFER = &h8C2C
const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = &h8C2D
const GL_TEXTURE_RECTANGLE = &h84F5
const GL_TEXTURE_BINDING_RECTANGLE = &h84F6
const GL_PROXY_TEXTURE_RECTANGLE = &h84F7
const GL_MAX_RECTANGLE_TEXTURE_SIZE = &h84F8
const GL_R8_SNORM = &h8F94
const GL_RG8_SNORM = &h8F95
const GL_RGB8_SNORM = &h8F96
const GL_RGBA8_SNORM = &h8F97
const GL_R16_SNORM = &h8F98
const GL_RG16_SNORM = &h8F99
const GL_RGB16_SNORM = &h8F9A
const GL_RGBA16_SNORM = &h8F9B
const GL_SIGNED_NORMALIZED = &h8F9C
const GL_PRIMITIVE_RESTART = &h8F9D
const GL_PRIMITIVE_RESTART_INDEX = &h8F9E
const GL_COPY_READ_BUFFER = &h8F36
const GL_COPY_WRITE_BUFFER = &h8F37
const GL_UNIFORM_BUFFER = &h8A11
const GL_UNIFORM_BUFFER_BINDING = &h8A28
const GL_UNIFORM_BUFFER_START = &h8A29
const GL_UNIFORM_BUFFER_SIZE = &h8A2A
const GL_MAX_VERTEX_UNIFORM_BLOCKS = &h8A2B
const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = &h8A2C
const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = &h8A2D
const GL_MAX_COMBINED_UNIFORM_BLOCKS = &h8A2E
const GL_MAX_UNIFORM_BUFFER_BINDINGS = &h8A2F
const GL_MAX_UNIFORM_BLOCK_SIZE = &h8A30
const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = &h8A31
const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = &h8A32
const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = &h8A33
const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = &h8A34
const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = &h8A35
const GL_ACTIVE_UNIFORM_BLOCKS = &h8A36
const GL_UNIFORM_TYPE = &h8A37
const GL_UNIFORM_SIZE = &h8A38
const GL_UNIFORM_NAME_LENGTH = &h8A39
const GL_UNIFORM_BLOCK_INDEX = &h8A3A
const GL_UNIFORM_OFFSET = &h8A3B
const GL_UNIFORM_ARRAY_STRIDE = &h8A3C
const GL_UNIFORM_MATRIX_STRIDE = &h8A3D
const GL_UNIFORM_IS_ROW_MAJOR = &h8A3E
const GL_UNIFORM_BLOCK_BINDING = &h8A3F
const GL_UNIFORM_BLOCK_DATA_SIZE = &h8A40
const GL_UNIFORM_BLOCK_NAME_LENGTH = &h8A41
const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = &h8A42
const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = &h8A43
const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = &h8A44
const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = &h8A45
const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = &h8A46
const GL_INVALID_INDEX = &hFFFFFFFF

type PFNGLDRAWARRAYSINSTANCEDPROC as sub(byval mode as GLenum, byval first as GLint, byval count as GLsizei, byval instancecount as GLsizei)
type PFNGLDRAWELEMENTSINSTANCEDPROC as sub(byval mode as GLenum, byval count as GLsizei, byval type as GLenum, byval indices as const any ptr, byval instancecount as GLsizei)
type PFNGLTEXBUFFERPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval buffer as GLuint)
type PFNGLPRIMITIVERESTARTINDEXPROC as sub(byval index as GLuint)
type PFNGLCOPYBUFFERSUBDATAPROC as sub(byval readTarget as GLenum, byval writeTarget as GLenum, byval readOffset as GLintptr, byval writeOffset as GLintptr, byval size as GLsizeiptr)
type PFNGLGETUNIFORMINDICESPROC as sub(byval program as GLuint, byval uniformCount as GLsizei, byval uniformNames as const GLchar const ptr ptr, byval uniformIndices as GLuint ptr)
type PFNGLGETACTIVEUNIFORMSIVPROC as sub(byval program as GLuint, byval uniformCount as GLsizei, byval uniformIndices as const GLuint ptr, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETACTIVEUNIFORMNAMEPROC as sub(byval program as GLuint, byval uniformIndex as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval uniformName as GLchar ptr)
type PFNGLGETUNIFORMBLOCKINDEXPROC as function(byval program as GLuint, byval uniformBlockName as const GLchar ptr) as GLuint
type PFNGLGETACTIVEUNIFORMBLOCKIVPROC as sub(byval program as GLuint, byval uniformBlockIndex as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC as sub(byval program as GLuint, byval uniformBlockIndex as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval uniformBlockName as GLchar ptr)
type PFNGLUNIFORMBLOCKBINDINGPROC as sub(byval program as GLuint, byval uniformBlockIndex as GLuint, byval uniformBlockBinding as GLuint)


const GL_VERSION_3_2 = 1
type GLsync as __GLsync ptr
type GLuint64 as ulongint
type GLint64 as longint
const GL_CONTEXT_CORE_PROFILE_BIT = &h00000001
const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = &h00000002
const GL_LINES_ADJACENCY = &h000A
const GL_LINE_STRIP_ADJACENCY = &h000B
const GL_TRIANGLES_ADJACENCY = &h000C
const GL_TRIANGLE_STRIP_ADJACENCY = &h000D
const GL_PROGRAM_POINT_SIZE = &h8642
const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = &h8C29
const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = &h8DA7
const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = &h8DA8
const GL_GEOMETRY_SHADER = &h8DD9
const GL_GEOMETRY_VERTICES_OUT = &h8916
const GL_GEOMETRY_INPUT_TYPE = &h8917
const GL_GEOMETRY_OUTPUT_TYPE = &h8918
const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = &h8DDF
const GL_MAX_GEOMETRY_OUTPUT_VERTICES = &h8DE0
const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = &h8DE1
const GL_MAX_VERTEX_OUTPUT_COMPONENTS = &h9122
const GL_MAX_GEOMETRY_INPUT_COMPONENTS = &h9123
const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = &h9124
const GL_MAX_FRAGMENT_INPUT_COMPONENTS = &h9125
const GL_CONTEXT_PROFILE_MASK = &h9126
const GL_DEPTH_CLAMP = &h864F
const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = &h8E4C
const GL_FIRST_VERTEX_CONVENTION = &h8E4D
const GL_LAST_VERTEX_CONVENTION = &h8E4E
const GL_PROVOKING_VERTEX = &h8E4F
const GL_TEXTURE_CUBE_MAP_SEAMLESS = &h884F
const GL_MAX_SERVER_WAIT_TIMEOUT = &h9111
const GL_OBJECT_TYPE = &h9112
const GL_SYNC_CONDITION = &h9113
const GL_SYNC_STATUS = &h9114
const GL_SYNC_FLAGS = &h9115
const GL_SYNC_FENCE = &h9116
const GL_SYNC_GPU_COMMANDS_COMPLETE = &h9117
const GL_UNSIGNALED = &h9118
const GL_SIGNALED = &h9119
const GL_ALREADY_SIGNALED = &h911A
const GL_TIMEOUT_EXPIRED = &h911B
const GL_CONDITION_SATISFIED = &h911C
const GL_WAIT_FAILED = &h911D
const GL_TIMEOUT_IGNORED = &hFFFFFFFFFFFFFFFF
const GL_SYNC_FLUSH_COMMANDS_BIT = &h00000001
const GL_SAMPLE_POSITION = &h8E50
const GL_SAMPLE_MASK = &h8E51
const GL_SAMPLE_MASK_VALUE = &h8E52
const GL_MAX_SAMPLE_MASK_WORDS = &h8E59
const GL_TEXTURE_2D_MULTISAMPLE = &h9100
const GL_PROXY_TEXTURE_2D_MULTISAMPLE = &h9101
const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = &h9102
const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = &h9103
const GL_TEXTURE_BINDING_2D_MULTISAMPLE = &h9104
const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = &h9105
const GL_TEXTURE_SAMPLES = &h9106
const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = &h9107
const GL_SAMPLER_2D_MULTISAMPLE = &h9108
const GL_INT_SAMPLER_2D_MULTISAMPLE = &h9109
const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = &h910A
const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = &h910B
const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = &h910C
const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = &h910D
const GL_MAX_COLOR_TEXTURE_SAMPLES = &h910E
const GL_MAX_DEPTH_TEXTURE_SAMPLES = &h910F
const GL_MAX_INTEGER_SAMPLES = &h9110

type PFNGLDRAWELEMENTSBASEVERTEXPROC as sub(byval mode as GLenum, byval count as GLsizei, byval type as GLenum, byval indices as const any ptr, byval basevertex as GLint)
type PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC as sub(byval mode as GLenum, byval start as GLuint, byval end as GLuint, byval count as GLsizei, byval type as GLenum, byval indices as const any ptr, byval basevertex as GLint)
type PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC as sub(byval mode as GLenum, byval count as GLsizei, byval type as GLenum, byval indices as const any ptr, byval instancecount as GLsizei, byval basevertex as GLint)
type PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC as sub(byval mode as GLenum, byval count as const GLsizei ptr, byval type as GLenum, byval indices as const any const ptr ptr, byval drawcount as GLsizei, byval basevertex as const GLint ptr)
type PFNGLPROVOKINGVERTEXPROC as sub(byval mode as GLenum)
type PFNGLFENCESYNCPROC as function(byval condition as GLenum, byval flags as GLbitfield) as GLsync
type PFNGLISSYNCPROC as function(byval sync as GLsync) as GLboolean
type PFNGLDELETESYNCPROC as sub(byval sync as GLsync)
type PFNGLCLIENTWAITSYNCPROC as function(byval sync as GLsync, byval flags as GLbitfield, byval timeout as GLuint64) as GLenum
type PFNGLWAITSYNCPROC as sub(byval sync as GLsync, byval flags as GLbitfield, byval timeout as GLuint64)
type PFNGLGETINTEGER64VPROC as sub(byval pname as GLenum, byval data as GLint64 ptr)
type PFNGLGETSYNCIVPROC as sub(byval sync as GLsync, byval pname as GLenum, byval bufSize as GLsizei, byval length as GLsizei ptr, byval values as GLint ptr)
type PFNGLGETINTEGER64I_VPROC as sub(byval target as GLenum, byval index as GLuint, byval data as GLint64 ptr)
type PFNGLGETBUFFERPARAMETERI64VPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint64 ptr)
type PFNGLFRAMEBUFFERTEXTUREPROC as sub(byval target as GLenum, byval attachment as GLenum, byval texture as GLuint, byval level as GLint)
type PFNGLTEXIMAGE2DMULTISAMPLEPROC as sub(byval target as GLenum, byval samples as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval fixedsamplelocations as GLboolean)
type PFNGLTEXIMAGE3DMULTISAMPLEPROC as sub(byval target as GLenum, byval samples as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval fixedsamplelocations as GLboolean)
type PFNGLGETMULTISAMPLEFVPROC as sub(byval pname as GLenum, byval index as GLuint, byval val as GLfloat ptr)
type PFNGLSAMPLEMASKIPROC as sub(byval maskNumber as GLuint, byval mask as GLbitfield)


const GL_VERSION_3_3 = 1
const GL_VERTEX_ATTRIB_ARRAY_DIVISOR = &h88FE
const GL_SRC1_COLOR = &h88F9
const GL_ONE_MINUS_SRC1_COLOR = &h88FA
const GL_ONE_MINUS_SRC1_ALPHA = &h88FB
const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = &h88FC
const GL_ANY_SAMPLES_PASSED = &h8C2F
const GL_SAMPLER_BINDING = &h8919
const GL_RGB10_A2UI = &h906F
const GL_TEXTURE_SWIZZLE_R = &h8E42
const GL_TEXTURE_SWIZZLE_G = &h8E43
const GL_TEXTURE_SWIZZLE_B = &h8E44
const GL_TEXTURE_SWIZZLE_A = &h8E45
const GL_TEXTURE_SWIZZLE_RGBA = &h8E46
const GL_TIME_ELAPSED = &h88BF
const GL_TIMESTAMP = &h8E28
const GL_INT_2_10_10_10_REV = &h8D9F

type PFNGLBINDFRAGDATALOCATIONINDEXEDPROC as sub(byval program as GLuint, byval colorNumber as GLuint, byval index as GLuint, byval name as const GLchar ptr)
type PFNGLGETFRAGDATAINDEXPROC as function(byval program as GLuint, byval name as const GLchar ptr) as GLint
type PFNGLGENSAMPLERSPROC as sub(byval count as GLsizei, byval samplers as GLuint ptr)
type PFNGLDELETESAMPLERSPROC as sub(byval count as GLsizei, byval samplers as const GLuint ptr)
type PFNGLISSAMPLERPROC as function(byval sampler as GLuint) as GLboolean
type PFNGLBINDSAMPLERPROC as sub(byval unit as GLuint, byval sampler as GLuint)
type PFNGLSAMPLERPARAMETERIPROC as sub(byval sampler as GLuint, byval pname as GLenum, byval param as GLint)
type PFNGLSAMPLERPARAMETERIVPROC as sub(byval sampler as GLuint, byval pname as GLenum, byval param as const GLint ptr)
type PFNGLSAMPLERPARAMETERFPROC as sub(byval sampler as GLuint, byval pname as GLenum, byval param as GLfloat)
type PFNGLSAMPLERPARAMETERFVPROC as sub(byval sampler as GLuint, byval pname as GLenum, byval param as const GLfloat ptr)
type PFNGLSAMPLERPARAMETERIIVPROC as sub(byval sampler as GLuint, byval pname as GLenum, byval param as const GLint ptr)
type PFNGLSAMPLERPARAMETERIUIVPROC as sub(byval sampler as GLuint, byval pname as GLenum, byval param as const GLuint ptr)
type PFNGLGETSAMPLERPARAMETERIVPROC as sub(byval sampler as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETSAMPLERPARAMETERIIVPROC as sub(byval sampler as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETSAMPLERPARAMETERFVPROC as sub(byval sampler as GLuint, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETSAMPLERPARAMETERIUIVPROC as sub(byval sampler as GLuint, byval pname as GLenum, byval params as GLuint ptr)
type PFNGLQUERYCOUNTERPROC as sub(byval id as GLuint, byval target as GLenum)
type PFNGLGETQUERYOBJECTI64VPROC as sub(byval id as GLuint, byval pname as GLenum, byval params as GLint64 ptr)
type PFNGLGETQUERYOBJECTUI64VPROC as sub(byval id as GLuint, byval pname as GLenum, byval params as GLuint64 ptr)
type PFNGLVERTEXATTRIBDIVISORPROC as sub(byval index as GLuint, byval divisor as GLuint)
type PFNGLVERTEXATTRIBP1UIPROC as sub(byval index as GLuint, byval type as GLenum, byval normalized as GLboolean, byval value as GLuint)
type PFNGLVERTEXATTRIBP1UIVPROC as sub(byval index as GLuint, byval type as GLenum, byval normalized as GLboolean, byval value as const GLuint ptr)
type PFNGLVERTEXATTRIBP2UIPROC as sub(byval index as GLuint, byval type as GLenum, byval normalized as GLboolean, byval value as GLuint)
type PFNGLVERTEXATTRIBP2UIVPROC as sub(byval index as GLuint, byval type as GLenum, byval normalized as GLboolean, byval value as const GLuint ptr)
type PFNGLVERTEXATTRIBP3UIPROC as sub(byval index as GLuint, byval type as GLenum, byval normalized as GLboolean, byval value as GLuint)
type PFNGLVERTEXATTRIBP3UIVPROC as sub(byval index as GLuint, byval type as GLenum, byval normalized as GLboolean, byval value as const GLuint ptr)
type PFNGLVERTEXATTRIBP4UIPROC as sub(byval index as GLuint, byval type as GLenum, byval normalized as GLboolean, byval value as GLuint)
type PFNGLVERTEXATTRIBP4UIVPROC as sub(byval index as GLuint, byval type as GLenum, byval normalized as GLboolean, byval value as const GLuint ptr)
type PFNGLVERTEXP2UIPROC as sub(byval type as GLenum, byval value as GLuint)
type PFNGLVERTEXP2UIVPROC as sub(byval type as GLenum, byval value as const GLuint ptr)
type PFNGLVERTEXP3UIPROC as sub(byval type as GLenum, byval value as GLuint)
type PFNGLVERTEXP3UIVPROC as sub(byval type as GLenum, byval value as const GLuint ptr)
type PFNGLVERTEXP4UIPROC as sub(byval type as GLenum, byval value as GLuint)
type PFNGLVERTEXP4UIVPROC as sub(byval type as GLenum, byval value as const GLuint ptr)
type PFNGLTEXCOORDP1UIPROC as sub(byval type as GLenum, byval coords as GLuint)
type PFNGLTEXCOORDP1UIVPROC as sub(byval type as GLenum, byval coords as const GLuint ptr)
type PFNGLTEXCOORDP2UIPROC as sub(byval type as GLenum, byval coords as GLuint)
type PFNGLTEXCOORDP2UIVPROC as sub(byval type as GLenum, byval coords as const GLuint ptr)
type PFNGLTEXCOORDP3UIPROC as sub(byval type as GLenum, byval coords as GLuint)
type PFNGLTEXCOORDP3UIVPROC as sub(byval type as GLenum, byval coords as const GLuint ptr)
type PFNGLTEXCOORDP4UIPROC as sub(byval type as GLenum, byval coords as GLuint)
type PFNGLTEXCOORDP4UIVPROC as sub(byval type as GLenum, byval coords as const GLuint ptr)
type PFNGLMULTITEXCOORDP1UIPROC as sub(byval texture as GLenum, byval type as GLenum, byval coords as GLuint)
type PFNGLMULTITEXCOORDP1UIVPROC as sub(byval texture as GLenum, byval type as GLenum, byval coords as const GLuint ptr)
type PFNGLMULTITEXCOORDP2UIPROC as sub(byval texture as GLenum, byval type as GLenum, byval coords as GLuint)
type PFNGLMULTITEXCOORDP2UIVPROC as sub(byval texture as GLenum, byval type as GLenum, byval coords as const GLuint ptr)
type PFNGLMULTITEXCOORDP3UIPROC as sub(byval texture as GLenum, byval type as GLenum, byval coords as GLuint)
type PFNGLMULTITEXCOORDP3UIVPROC as sub(byval texture as GLenum, byval type as GLenum, byval coords as const GLuint ptr)
type PFNGLMULTITEXCOORDP4UIPROC as sub(byval texture as GLenum, byval type as GLenum, byval coords as GLuint)
type PFNGLMULTITEXCOORDP4UIVPROC as sub(byval texture as GLenum, byval type as GLenum, byval coords as const GLuint ptr)
type PFNGLNORMALP3UIPROC as sub(byval type as GLenum, byval coords as GLuint)
type PFNGLNORMALP3UIVPROC as sub(byval type as GLenum, byval coords as const GLuint ptr)
type PFNGLCOLORP3UIPROC as sub(byval type as GLenum, byval color as GLuint)
type PFNGLCOLORP3UIVPROC as sub(byval type as GLenum, byval color as const GLuint ptr)
type PFNGLCOLORP4UIPROC as sub(byval type as GLenum, byval color as GLuint)
type PFNGLCOLORP4UIVPROC as sub(byval type as GLenum, byval color as const GLuint ptr)
type PFNGLSECONDARYCOLORP3UIPROC as sub(byval type as GLenum, byval color as GLuint)
type PFNGLSECONDARYCOLORP3UIVPROC as sub(byval type as GLenum, byval color as const GLuint ptr)


const GL_VERSION_4_0 = 1
const GL_SAMPLE_SHADING = &h8C36
const GL_MIN_SAMPLE_SHADING_VALUE = &h8C37
const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = &h8E5E
const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = &h8E5F
const GL_TEXTURE_CUBE_MAP_ARRAY = &h9009
const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = &h900A
const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = &h900B
const GL_SAMPLER_CUBE_MAP_ARRAY = &h900C
const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = &h900D
const GL_INT_SAMPLER_CUBE_MAP_ARRAY = &h900E
const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = &h900F
const GL_DRAW_INDIRECT_BUFFER = &h8F3F
const GL_DRAW_INDIRECT_BUFFER_BINDING = &h8F43
const GL_GEOMETRY_SHADER_INVOCATIONS = &h887F
const GL_MAX_GEOMETRY_SHADER_INVOCATIONS = &h8E5A
const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = &h8E5B
const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = &h8E5C
const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = &h8E5D
const GL_MAX_VERTEX_STREAMS = &h8E71
const GL_DOUBLE_VEC2 = &h8FFC
const GL_DOUBLE_VEC3 = &h8FFD
const GL_DOUBLE_VEC4 = &h8FFE
const GL_DOUBLE_MAT2 = &h8F46
const GL_DOUBLE_MAT3 = &h8F47
const GL_DOUBLE_MAT4 = &h8F48
const GL_DOUBLE_MAT2x3 = &h8F49
const GL_DOUBLE_MAT2x4 = &h8F4A
const GL_DOUBLE_MAT3x2 = &h8F4B
const GL_DOUBLE_MAT3x4 = &h8F4C
const GL_DOUBLE_MAT4x2 = &h8F4D
const GL_DOUBLE_MAT4x3 = &h8F4E
const GL_ACTIVE_SUBROUTINES = &h8DE5
const GL_ACTIVE_SUBROUTINE_UNIFORMS = &h8DE6
const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = &h8E47
const GL_ACTIVE_SUBROUTINE_MAX_LENGTH = &h8E48
const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = &h8E49
const GL_MAX_SUBROUTINES = &h8DE7
const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = &h8DE8
const GL_NUM_COMPATIBLE_SUBROUTINES = &h8E4A
const GL_COMPATIBLE_SUBROUTINES = &h8E4B
const GL_PATCHES = &h000E
const GL_PATCH_VERTICES = &h8E72
const GL_PATCH_DEFAULT_INNER_LEVEL = &h8E73
const GL_PATCH_DEFAULT_OUTER_LEVEL = &h8E74
const GL_TESS_CONTROL_OUTPUT_VERTICES = &h8E75
const GL_TESS_GEN_MODE = &h8E76
const GL_TESS_GEN_SPACING = &h8E77
const GL_TESS_GEN_VERTEX_ORDER = &h8E78
const GL_TESS_GEN_POINT_MODE = &h8E79
const GL_ISOLINES = &h8E7A
const GL_FRACTIONAL_ODD = &h8E7B
const GL_FRACTIONAL_EVEN = &h8E7C
const GL_MAX_PATCH_VERTICES = &h8E7D
const GL_MAX_TESS_GEN_LEVEL = &h8E7E
const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = &h8E7F
const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = &h8E80
const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = &h8E81
const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = &h8E82
const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = &h8E83
const GL_MAX_TESS_PATCH_COMPONENTS = &h8E84
const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = &h8E85
const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = &h8E86
const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = &h8E89
const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = &h8E8A
const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = &h886C
const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = &h886D
const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = &h8E1E
const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = &h8E1F
const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = &h84F0
const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = &h84F1
const GL_TESS_EVALUATION_SHADER = &h8E87
const GL_TESS_CONTROL_SHADER = &h8E88
const GL_TRANSFORM_FEEDBACK = &h8E22
const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = &h8E23
const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = &h8E24
const GL_TRANSFORM_FEEDBACK_BINDING = &h8E25
const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = &h8E70

type PFNGLMINSAMPLESHADINGPROC as sub(byval value as GLfloat)
type PFNGLBLENDEQUATIONIPROC as sub(byval buf as GLuint, byval mode as GLenum)
type PFNGLBLENDEQUATIONSEPARATEIPROC as sub(byval buf as GLuint, byval modeRGB as GLenum, byval modeAlpha as GLenum)
type PFNGLBLENDFUNCIPROC as sub(byval buf as GLuint, byval src as GLenum, byval dst as GLenum)
type PFNGLBLENDFUNCSEPARATEIPROC as sub(byval buf as GLuint, byval srcRGB as GLenum, byval dstRGB as GLenum, byval srcAlpha as GLenum, byval dstAlpha as GLenum)
type PFNGLDRAWARRAYSINDIRECTPROC as sub(byval mode as GLenum, byval indirect as const any ptr)
type PFNGLDRAWELEMENTSINDIRECTPROC as sub(byval mode as GLenum, byval type as GLenum, byval indirect as const any ptr)
type PFNGLUNIFORM1DPROC as sub(byval location as GLint, byval x as GLdouble)
type PFNGLUNIFORM2DPROC as sub(byval location as GLint, byval x as GLdouble, byval y as GLdouble)
type PFNGLUNIFORM3DPROC as sub(byval location as GLint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
type PFNGLUNIFORM4DPROC as sub(byval location as GLint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble, byval w as GLdouble)
type PFNGLUNIFORM1DVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLdouble ptr)
type PFNGLUNIFORM2DVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLdouble ptr)
type PFNGLUNIFORM3DVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLdouble ptr)
type PFNGLUNIFORM4DVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLdouble ptr)
type PFNGLUNIFORMMATRIX2DVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLUNIFORMMATRIX3DVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLUNIFORMMATRIX4DVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLUNIFORMMATRIX2X3DVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLUNIFORMMATRIX2X4DVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLUNIFORMMATRIX3X2DVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLUNIFORMMATRIX3X4DVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLUNIFORMMATRIX4X2DVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLUNIFORMMATRIX4X3DVPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLGETUNIFORMDVPROC as sub(byval program as GLuint, byval location as GLint, byval params as GLdouble ptr)
type PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC as function(byval program as GLuint, byval shadertype as GLenum, byval name as const GLchar ptr) as GLint
type PFNGLGETSUBROUTINEINDEXPROC as function(byval program as GLuint, byval shadertype as GLenum, byval name as const GLchar ptr) as GLuint
type PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC as sub(byval program as GLuint, byval shadertype as GLenum, byval index as GLuint, byval pname as GLenum, byval values as GLint ptr)
type PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC as sub(byval program as GLuint, byval shadertype as GLenum, byval index as GLuint, byval bufsize as GLsizei, byval length as GLsizei ptr, byval name as GLchar ptr)
type PFNGLGETACTIVESUBROUTINENAMEPROC as sub(byval program as GLuint, byval shadertype as GLenum, byval index as GLuint, byval bufsize as GLsizei, byval length as GLsizei ptr, byval name as GLchar ptr)
type PFNGLUNIFORMSUBROUTINESUIVPROC as sub(byval shadertype as GLenum, byval count as GLsizei, byval indices as const GLuint ptr)
type PFNGLGETUNIFORMSUBROUTINEUIVPROC as sub(byval shadertype as GLenum, byval location as GLint, byval params as GLuint ptr)
type PFNGLGETPROGRAMSTAGEIVPROC as sub(byval program as GLuint, byval shadertype as GLenum, byval pname as GLenum, byval values as GLint ptr)
type PFNGLPATCHPARAMETERIPROC as sub(byval pname as GLenum, byval value as GLint)
type PFNGLPATCHPARAMETERFVPROC as sub(byval pname as GLenum, byval values as const GLfloat ptr)
type PFNGLBINDTRANSFORMFEEDBACKPROC as sub(byval target as GLenum, byval id as GLuint)
type PFNGLDELETETRANSFORMFEEDBACKSPROC as sub(byval n as GLsizei, byval ids as const GLuint ptr)
type PFNGLGENTRANSFORMFEEDBACKSPROC as sub(byval n as GLsizei, byval ids as GLuint ptr)
type PFNGLISTRANSFORMFEEDBACKPROC as function(byval id as GLuint) as GLboolean
type PFNGLPAUSETRANSFORMFEEDBACKPROC as sub()
type PFNGLRESUMETRANSFORMFEEDBACKPROC as sub()
type PFNGLDRAWTRANSFORMFEEDBACKPROC as sub(byval mode as GLenum, byval id as GLuint)
type PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC as sub(byval mode as GLenum, byval id as GLuint, byval stream as GLuint)
type PFNGLBEGINQUERYINDEXEDPROC as sub(byval target as GLenum, byval index as GLuint, byval id as GLuint)
type PFNGLENDQUERYINDEXEDPROC as sub(byval target as GLenum, byval index as GLuint)
type PFNGLGETQUERYINDEXEDIVPROC as sub(byval target as GLenum, byval index as GLuint, byval pname as GLenum, byval params as GLint ptr)


const GL_VERSION_4_1 = 1
const GL_FIXED = &h140C
const GL_IMPLEMENTATION_COLOR_READ_TYPE = &h8B9A
const GL_IMPLEMENTATION_COLOR_READ_FORMAT = &h8B9B
const GL_LOW_FLOAT = &h8DF0
const GL_MEDIUM_FLOAT = &h8DF1
const GL_HIGH_FLOAT = &h8DF2
const GL_LOW_INT = &h8DF3
const GL_MEDIUM_INT = &h8DF4
const GL_HIGH_INT = &h8DF5
const GL_SHADER_COMPILER = &h8DFA
const GL_SHADER_BINARY_FORMATS = &h8DF8
const GL_NUM_SHADER_BINARY_FORMATS = &h8DF9
const GL_MAX_VERTEX_UNIFORM_VECTORS = &h8DFB
const GL_MAX_VARYING_VECTORS = &h8DFC
const GL_MAX_FRAGMENT_UNIFORM_VECTORS = &h8DFD
const GL_RGB565 = &h8D62
const GL_PROGRAM_BINARY_RETRIEVABLE_HINT = &h8257
const GL_PROGRAM_BINARY_LENGTH = &h8741
const GL_NUM_PROGRAM_BINARY_FORMATS = &h87FE
const GL_PROGRAM_BINARY_FORMATS = &h87FF
const GL_VERTEX_SHADER_BIT = &h00000001
const GL_FRAGMENT_SHADER_BIT = &h00000002
const GL_GEOMETRY_SHADER_BIT = &h00000004
const GL_TESS_CONTROL_SHADER_BIT = &h00000008
const GL_TESS_EVALUATION_SHADER_BIT = &h00000010
const GL_ALL_SHADER_BITS = &hFFFFFFFF
const GL_PROGRAM_SEPARABLE = &h8258
const GL_ACTIVE_PROGRAM = &h8259
const GL_PROGRAM_PIPELINE_BINDING = &h825A
const GL_MAX_VIEWPORTS = &h825B
const GL_VIEWPORT_SUBPIXEL_BITS = &h825C
const GL_VIEWPORT_BOUNDS_RANGE = &h825D
const GL_LAYER_PROVOKING_VERTEX = &h825E
const GL_VIEWPORT_INDEX_PROVOKING_VERTEX = &h825F
const GL_UNDEFINED_VERTEX = &h8260

type PFNGLRELEASESHADERCOMPILERPROC as sub()
type PFNGLSHADERBINARYPROC as sub(byval count as GLsizei, byval shaders as const GLuint ptr, byval binaryformat as GLenum, byval binary as const any ptr, byval length as GLsizei)
type PFNGLGETSHADERPRECISIONFORMATPROC as sub(byval shadertype as GLenum, byval precisiontype as GLenum, byval range as GLint ptr, byval precision as GLint ptr)
type PFNGLDEPTHRANGEFPROC as sub(byval n as GLfloat, byval f as GLfloat)
type PFNGLCLEARDEPTHFPROC as sub(byval d as GLfloat)
type PFNGLGETPROGRAMBINARYPROC as sub(byval program as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval binaryFormat as GLenum ptr, byval binary as any ptr)
type PFNGLPROGRAMBINARYPROC as sub(byval program as GLuint, byval binaryFormat as GLenum, byval binary as const any ptr, byval length as GLsizei)
type PFNGLPROGRAMPARAMETERIPROC as sub(byval program as GLuint, byval pname as GLenum, byval value as GLint)
type PFNGLUSEPROGRAMSTAGESPROC as sub(byval pipeline as GLuint, byval stages as GLbitfield, byval program as GLuint)
type PFNGLACTIVESHADERPROGRAMPROC as sub(byval pipeline as GLuint, byval program as GLuint)
type PFNGLCREATESHADERPROGRAMVPROC as function(byval type as GLenum, byval count as GLsizei, byval strings as const GLchar const ptr ptr) as GLuint
type PFNGLBINDPROGRAMPIPELINEPROC as sub(byval pipeline as GLuint)
type PFNGLDELETEPROGRAMPIPELINESPROC as sub(byval n as GLsizei, byval pipelines as const GLuint ptr)
type PFNGLGENPROGRAMPIPELINESPROC as sub(byval n as GLsizei, byval pipelines as GLuint ptr)
type PFNGLISPROGRAMPIPELINEPROC as function(byval pipeline as GLuint) as GLboolean
type PFNGLGETPROGRAMPIPELINEIVPROC as sub(byval pipeline as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLPROGRAMUNIFORM1IPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLint)
type PFNGLPROGRAMUNIFORM1IVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLint ptr)
type PFNGLPROGRAMUNIFORM1FPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLfloat)
type PFNGLPROGRAMUNIFORM1FVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORM1DPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLdouble)
type PFNGLPROGRAMUNIFORM1DVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORM1UIPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLuint)
type PFNGLPROGRAMUNIFORM1UIVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLuint ptr)
type PFNGLPROGRAMUNIFORM2IPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLint, byval v1 as GLint)
type PFNGLPROGRAMUNIFORM2IVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLint ptr)
type PFNGLPROGRAMUNIFORM2FPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLfloat, byval v1 as GLfloat)
type PFNGLPROGRAMUNIFORM2FVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORM2DPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLdouble, byval v1 as GLdouble)
type PFNGLPROGRAMUNIFORM2DVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORM2UIPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLuint, byval v1 as GLuint)
type PFNGLPROGRAMUNIFORM2UIVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLuint ptr)
type PFNGLPROGRAMUNIFORM3IPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLint, byval v1 as GLint, byval v2 as GLint)
type PFNGLPROGRAMUNIFORM3IVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLint ptr)
type PFNGLPROGRAMUNIFORM3FPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLfloat, byval v1 as GLfloat, byval v2 as GLfloat)
type PFNGLPROGRAMUNIFORM3FVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORM3DPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLdouble, byval v1 as GLdouble, byval v2 as GLdouble)
type PFNGLPROGRAMUNIFORM3DVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORM3UIPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLuint, byval v1 as GLuint, byval v2 as GLuint)
type PFNGLPROGRAMUNIFORM3UIVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLuint ptr)
type PFNGLPROGRAMUNIFORM4IPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLint, byval v1 as GLint, byval v2 as GLint, byval v3 as GLint)
type PFNGLPROGRAMUNIFORM4IVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLint ptr)
type PFNGLPROGRAMUNIFORM4FPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLfloat, byval v1 as GLfloat, byval v2 as GLfloat, byval v3 as GLfloat)
type PFNGLPROGRAMUNIFORM4FVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORM4DPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLdouble, byval v1 as GLdouble, byval v2 as GLdouble, byval v3 as GLdouble)
type PFNGLPROGRAMUNIFORM4DVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORM4UIPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLuint, byval v1 as GLuint, byval v2 as GLuint, byval v3 as GLuint)
type PFNGLPROGRAMUNIFORM4UIVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLuint ptr)
type PFNGLPROGRAMUNIFORMMATRIX2FVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX3FVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX4FVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX2DVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX3DVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX4DVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLVALIDATEPROGRAMPIPELINEPROC as sub(byval pipeline as GLuint)
type PFNGLGETPROGRAMPIPELINEINFOLOGPROC as sub(byval pipeline as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval infoLog as GLchar ptr)
type PFNGLVERTEXATTRIBL1DPROC as sub(byval index as GLuint, byval x as GLdouble)
type PFNGLVERTEXATTRIBL2DPROC as sub(byval index as GLuint, byval x as GLdouble, byval y as GLdouble)
type PFNGLVERTEXATTRIBL3DPROC as sub(byval index as GLuint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
type PFNGLVERTEXATTRIBL4DPROC as sub(byval index as GLuint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble, byval w as GLdouble)
type PFNGLVERTEXATTRIBL1DVPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIBL2DVPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIBL3DVPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIBL4DVPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIBLPOINTERPROC as sub(byval index as GLuint, byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval pointer as const any ptr)
type PFNGLGETVERTEXATTRIBLDVPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLdouble ptr)
type PFNGLVIEWPORTARRAYVPROC as sub(byval first as GLuint, byval count as GLsizei, byval v as const GLfloat ptr)
type PFNGLVIEWPORTINDEXEDFPROC as sub(byval index as GLuint, byval x as GLfloat, byval y as GLfloat, byval w as GLfloat, byval h as GLfloat)
type PFNGLVIEWPORTINDEXEDFVPROC as sub(byval index as GLuint, byval v as const GLfloat ptr)
type PFNGLSCISSORARRAYVPROC as sub(byval first as GLuint, byval count as GLsizei, byval v as const GLint ptr)
type PFNGLSCISSORINDEXEDPROC as sub(byval index as GLuint, byval left as GLint, byval bottom as GLint, byval width as GLsizei, byval height as GLsizei)
type PFNGLSCISSORINDEXEDVPROC as sub(byval index as GLuint, byval v as const GLint ptr)
type PFNGLDEPTHRANGEARRAYVPROC as sub(byval first as GLuint, byval count as GLsizei, byval v as const GLdouble ptr)
type PFNGLDEPTHRANGEINDEXEDPROC as sub(byval index as GLuint, byval n as GLdouble, byval f as GLdouble)
type PFNGLGETFLOATI_VPROC as sub(byval target as GLenum, byval index as GLuint, byval data as GLfloat ptr)
type PFNGLGETDOUBLEI_VPROC as sub(byval target as GLenum, byval index as GLuint, byval data as GLdouble ptr)


const GL_VERSION_4_2 = 1
const GL_COPY_READ_BUFFER_BINDING = &h8F36
const GL_COPY_WRITE_BUFFER_BINDING = &h8F37
const GL_TRANSFORM_FEEDBACK_ACTIVE = &h8E24
const GL_TRANSFORM_FEEDBACK_PAUSED = &h8E23
const GL_UNPACK_COMPRESSED_BLOCK_WIDTH = &h9127
const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = &h9128
const GL_UNPACK_COMPRESSED_BLOCK_DEPTH = &h9129
const GL_UNPACK_COMPRESSED_BLOCK_SIZE = &h912A
const GL_PACK_COMPRESSED_BLOCK_WIDTH = &h912B
const GL_PACK_COMPRESSED_BLOCK_HEIGHT = &h912C
const GL_PACK_COMPRESSED_BLOCK_DEPTH = &h912D
const GL_PACK_COMPRESSED_BLOCK_SIZE = &h912E
const GL_NUM_SAMPLE_COUNTS = &h9380
const GL_MIN_MAP_BUFFER_ALIGNMENT = &h90BC
const GL_ATOMIC_COUNTER_BUFFER = &h92C0
const GL_ATOMIC_COUNTER_BUFFER_BINDING = &h92C1
const GL_ATOMIC_COUNTER_BUFFER_START = &h92C2
const GL_ATOMIC_COUNTER_BUFFER_SIZE = &h92C3
const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = &h92C4
const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = &h92C5
const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = &h92C6
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = &h92C7
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = &h92C8
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = &h92C9
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = &h92CA
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = &h92CB
const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = &h92CC
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = &h92CD
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = &h92CE
const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = &h92CF
const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = &h92D0
const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = &h92D1
const GL_MAX_VERTEX_ATOMIC_COUNTERS = &h92D2
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = &h92D3
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = &h92D4
const GL_MAX_GEOMETRY_ATOMIC_COUNTERS = &h92D5
const GL_MAX_FRAGMENT_ATOMIC_COUNTERS = &h92D6
const GL_MAX_COMBINED_ATOMIC_COUNTERS = &h92D7
const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = &h92D8
const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = &h92DC
const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = &h92D9
const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = &h92DA
const GL_UNSIGNED_INT_ATOMIC_COUNTER = &h92DB
const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = &h00000001
const GL_ELEMENT_ARRAY_BARRIER_BIT = &h00000002
const GL_UNIFORM_BARRIER_BIT = &h00000004
const GL_TEXTURE_FETCH_BARRIER_BIT = &h00000008
const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = &h00000020
const GL_COMMAND_BARRIER_BIT = &h00000040
const GL_PIXEL_BUFFER_BARRIER_BIT = &h00000080
const GL_TEXTURE_UPDATE_BARRIER_BIT = &h00000100
const GL_BUFFER_UPDATE_BARRIER_BIT = &h00000200
const GL_FRAMEBUFFER_BARRIER_BIT = &h00000400
const GL_TRANSFORM_FEEDBACK_BARRIER_BIT = &h00000800
const GL_ATOMIC_COUNTER_BARRIER_BIT = &h00001000
const GL_ALL_BARRIER_BITS = &hFFFFFFFF
const GL_MAX_IMAGE_UNITS = &h8F38
const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = &h8F39
const GL_IMAGE_BINDING_NAME = &h8F3A
const GL_IMAGE_BINDING_LEVEL = &h8F3B
const GL_IMAGE_BINDING_LAYERED = &h8F3C
const GL_IMAGE_BINDING_LAYER = &h8F3D
const GL_IMAGE_BINDING_ACCESS = &h8F3E
const GL_IMAGE_1D = &h904C
const GL_IMAGE_2D = &h904D
const GL_IMAGE_3D = &h904E
const GL_IMAGE_2D_RECT = &h904F
const GL_IMAGE_CUBE = &h9050
const GL_IMAGE_BUFFER = &h9051
const GL_IMAGE_1D_ARRAY = &h9052
const GL_IMAGE_2D_ARRAY = &h9053
const GL_IMAGE_CUBE_MAP_ARRAY = &h9054
const GL_IMAGE_2D_MULTISAMPLE = &h9055
const GL_IMAGE_2D_MULTISAMPLE_ARRAY = &h9056
const GL_INT_IMAGE_1D = &h9057
const GL_INT_IMAGE_2D = &h9058
const GL_INT_IMAGE_3D = &h9059
const GL_INT_IMAGE_2D_RECT = &h905A
const GL_INT_IMAGE_CUBE = &h905B
const GL_INT_IMAGE_BUFFER = &h905C
const GL_INT_IMAGE_1D_ARRAY = &h905D
const GL_INT_IMAGE_2D_ARRAY = &h905E
const GL_INT_IMAGE_CUBE_MAP_ARRAY = &h905F
const GL_INT_IMAGE_2D_MULTISAMPLE = &h9060
const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = &h9061
const GL_UNSIGNED_INT_IMAGE_1D = &h9062
const GL_UNSIGNED_INT_IMAGE_2D = &h9063
const GL_UNSIGNED_INT_IMAGE_3D = &h9064
const GL_UNSIGNED_INT_IMAGE_2D_RECT = &h9065
const GL_UNSIGNED_INT_IMAGE_CUBE = &h9066
const GL_UNSIGNED_INT_IMAGE_BUFFER = &h9067
const GL_UNSIGNED_INT_IMAGE_1D_ARRAY = &h9068
const GL_UNSIGNED_INT_IMAGE_2D_ARRAY = &h9069
const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = &h906A
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = &h906B
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = &h906C
const GL_MAX_IMAGE_SAMPLES = &h906D
const GL_IMAGE_BINDING_FORMAT = &h906E
const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = &h90C7
const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = &h90C8
const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = &h90C9
const GL_MAX_VERTEX_IMAGE_UNIFORMS = &h90CA
const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = &h90CB
const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = &h90CC
const GL_MAX_GEOMETRY_IMAGE_UNIFORMS = &h90CD
const GL_MAX_FRAGMENT_IMAGE_UNIFORMS = &h90CE
const GL_MAX_COMBINED_IMAGE_UNIFORMS = &h90CF
const GL_COMPRESSED_RGBA_BPTC_UNORM = &h8E8C
const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = &h8E8D
const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = &h8E8E
const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = &h8E8F
const GL_TEXTURE_IMMUTABLE_FORMAT = &h912F

type PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC as sub(byval mode as GLenum, byval first as GLint, byval count as GLsizei, byval instancecount as GLsizei, byval baseinstance as GLuint)
type PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC as sub(byval mode as GLenum, byval count as GLsizei, byval type as GLenum, byval indices as const any ptr, byval instancecount as GLsizei, byval baseinstance as GLuint)
type PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC as sub(byval mode as GLenum, byval count as GLsizei, byval type as GLenum, byval indices as const any ptr, byval instancecount as GLsizei, byval basevertex as GLint, byval baseinstance as GLuint)
type PFNGLGETINTERNALFORMATIVPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval pname as GLenum, byval bufSize as GLsizei, byval params as GLint ptr)
type PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC as sub(byval program as GLuint, byval bufferIndex as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLBINDIMAGETEXTUREPROC as sub(byval unit as GLuint, byval texture as GLuint, byval level as GLint, byval layered as GLboolean, byval layer as GLint, byval access as GLenum, byval format as GLenum)
type PFNGLMEMORYBARRIERPROC as sub(byval barriers as GLbitfield)
type PFNGLTEXSTORAGE1DPROC as sub(byval target as GLenum, byval levels as GLsizei, byval internalformat as GLenum, byval width as GLsizei)
type PFNGLTEXSTORAGE2DPROC as sub(byval target as GLenum, byval levels as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei)
type PFNGLTEXSTORAGE3DPROC as sub(byval target as GLenum, byval levels as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei)
type PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC as sub(byval mode as GLenum, byval id as GLuint, byval instancecount as GLsizei)
type PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC as sub(byval mode as GLenum, byval id as GLuint, byval stream as GLuint, byval instancecount as GLsizei)


const GL_VERSION_4_3 = 1
type GLDEBUGPROC as sub(byval source as GLenum, byval type as GLenum, byval id as GLuint, byval severity as GLenum, byval length as GLsizei, byval message as const GLchar ptr, byval userParam as const any ptr)
const GL_NUM_SHADING_LANGUAGE_VERSIONS = &h82E9
const GL_VERTEX_ATTRIB_ARRAY_LONG = &h874E
const GL_COMPRESSED_RGB8_ETC2 = &h9274
const GL_COMPRESSED_SRGB8_ETC2 = &h9275
const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = &h9276
const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = &h9277
const GL_COMPRESSED_RGBA8_ETC2_EAC = &h9278
const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = &h9279
const GL_COMPRESSED_R11_EAC = &h9270
const GL_COMPRESSED_SIGNED_R11_EAC = &h9271
const GL_COMPRESSED_RG11_EAC = &h9272
const GL_COMPRESSED_SIGNED_RG11_EAC = &h9273
const GL_PRIMITIVE_RESTART_FIXED_INDEX = &h8D69
const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = &h8D6A
const GL_MAX_ELEMENT_INDEX = &h8D6B
const GL_COMPUTE_SHADER = &h91B9
const GL_MAX_COMPUTE_UNIFORM_BLOCKS = &h91BB
const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = &h91BC
const GL_MAX_COMPUTE_IMAGE_UNIFORMS = &h91BD
const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = &h8262
const GL_MAX_COMPUTE_UNIFORM_COMPONENTS = &h8263
const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = &h8264
const GL_MAX_COMPUTE_ATOMIC_COUNTERS = &h8265
const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = &h8266
const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = &h90EB
const GL_MAX_COMPUTE_WORK_GROUP_COUNT = &h91BE
const GL_MAX_COMPUTE_WORK_GROUP_SIZE = &h91BF
const GL_COMPUTE_WORK_GROUP_SIZE = &h8267
const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = &h90EC
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = &h90ED
const GL_DISPATCH_INDIRECT_BUFFER = &h90EE
const GL_DISPATCH_INDIRECT_BUFFER_BINDING = &h90EF
const GL_COMPUTE_SHADER_BIT = &h00000020
const GL_DEBUG_OUTPUT_SYNCHRONOUS = &h8242
const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = &h8243
const GL_DEBUG_CALLBACK_FUNCTION = &h8244
const GL_DEBUG_CALLBACK_USER_PARAM = &h8245
const GL_DEBUG_SOURCE_API = &h8246
const GL_DEBUG_SOURCE_WINDOW_SYSTEM = &h8247
const GL_DEBUG_SOURCE_SHADER_COMPILER = &h8248
const GL_DEBUG_SOURCE_THIRD_PARTY = &h8249
const GL_DEBUG_SOURCE_APPLICATION = &h824A
const GL_DEBUG_SOURCE_OTHER = &h824B
const GL_DEBUG_TYPE_ERROR = &h824C
const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = &h824D
const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = &h824E
const GL_DEBUG_TYPE_PORTABILITY = &h824F
const GL_DEBUG_TYPE_PERFORMANCE = &h8250
const GL_DEBUG_TYPE_OTHER = &h8251
const GL_MAX_DEBUG_MESSAGE_LENGTH = &h9143
const GL_MAX_DEBUG_LOGGED_MESSAGES = &h9144
const GL_DEBUG_LOGGED_MESSAGES = &h9145
const GL_DEBUG_SEVERITY_HIGH = &h9146
const GL_DEBUG_SEVERITY_MEDIUM = &h9147
const GL_DEBUG_SEVERITY_LOW = &h9148
const GL_DEBUG_TYPE_MARKER = &h8268
const GL_DEBUG_TYPE_PUSH_GROUP = &h8269
const GL_DEBUG_TYPE_POP_GROUP = &h826A
const GL_DEBUG_SEVERITY_NOTIFICATION = &h826B
const GL_MAX_DEBUG_GROUP_STACK_DEPTH = &h826C
const GL_DEBUG_GROUP_STACK_DEPTH = &h826D
const GL_BUFFER = &h82E0
const GL_SHADER = &h82E1
const GL_PROGRAM = &h82E2
const GL_QUERY = &h82E3
const GL_PROGRAM_PIPELINE = &h82E4
const GL_SAMPLER = &h82E6
const GL_MAX_LABEL_LENGTH = &h82E8
const GL_DEBUG_OUTPUT = &h92E0
const GL_CONTEXT_FLAG_DEBUG_BIT = &h00000002
const GL_MAX_UNIFORM_LOCATIONS = &h826E
const GL_FRAMEBUFFER_DEFAULT_WIDTH = &h9310
const GL_FRAMEBUFFER_DEFAULT_HEIGHT = &h9311
const GL_FRAMEBUFFER_DEFAULT_LAYERS = &h9312
const GL_FRAMEBUFFER_DEFAULT_SAMPLES = &h9313
const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = &h9314
const GL_MAX_FRAMEBUFFER_WIDTH = &h9315
const GL_MAX_FRAMEBUFFER_HEIGHT = &h9316
const GL_MAX_FRAMEBUFFER_LAYERS = &h9317
const GL_MAX_FRAMEBUFFER_SAMPLES = &h9318
const GL_INTERNALFORMAT_SUPPORTED = &h826F
const GL_INTERNALFORMAT_PREFERRED = &h8270
const GL_INTERNALFORMAT_RED_SIZE = &h8271
const GL_INTERNALFORMAT_GREEN_SIZE = &h8272
const GL_INTERNALFORMAT_BLUE_SIZE = &h8273
const GL_INTERNALFORMAT_ALPHA_SIZE = &h8274
const GL_INTERNALFORMAT_DEPTH_SIZE = &h8275
const GL_INTERNALFORMAT_STENCIL_SIZE = &h8276
const GL_INTERNALFORMAT_SHARED_SIZE = &h8277
const GL_INTERNALFORMAT_RED_TYPE = &h8278
const GL_INTERNALFORMAT_GREEN_TYPE = &h8279
const GL_INTERNALFORMAT_BLUE_TYPE = &h827A
const GL_INTERNALFORMAT_ALPHA_TYPE = &h827B
const GL_INTERNALFORMAT_DEPTH_TYPE = &h827C
const GL_INTERNALFORMAT_STENCIL_TYPE = &h827D
const GL_MAX_WIDTH = &h827E
const GL_MAX_HEIGHT = &h827F
const GL_MAX_DEPTH = &h8280
const GL_MAX_LAYERS = &h8281
const GL_MAX_COMBINED_DIMENSIONS = &h8282
const GL_COLOR_COMPONENTS = &h8283
const GL_DEPTH_COMPONENTS = &h8284
const GL_STENCIL_COMPONENTS = &h8285
const GL_COLOR_RENDERABLE = &h8286
const GL_DEPTH_RENDERABLE = &h8287
const GL_STENCIL_RENDERABLE = &h8288
const GL_FRAMEBUFFER_RENDERABLE = &h8289
const GL_FRAMEBUFFER_RENDERABLE_LAYERED = &h828A
const GL_FRAMEBUFFER_BLEND = &h828B
const GL_READ_PIXELS = &h828C
const GL_READ_PIXELS_FORMAT = &h828D
const GL_READ_PIXELS_TYPE = &h828E
const GL_TEXTURE_IMAGE_FORMAT = &h828F
const GL_TEXTURE_IMAGE_TYPE = &h8290
const GL_GET_TEXTURE_IMAGE_FORMAT = &h8291
const GL_GET_TEXTURE_IMAGE_TYPE = &h8292
const GL_MIPMAP = &h8293
const GL_MANUAL_GENERATE_MIPMAP = &h8294
const GL_AUTO_GENERATE_MIPMAP = &h8295
const GL_COLOR_ENCODING = &h8296
const GL_SRGB_READ = &h8297
const GL_SRGB_WRITE = &h8298
const GL_FILTER = &h829A
const GL_VERTEX_TEXTURE = &h829B
const GL_TESS_CONTROL_TEXTURE = &h829C
const GL_TESS_EVALUATION_TEXTURE = &h829D
const GL_GEOMETRY_TEXTURE = &h829E
const GL_FRAGMENT_TEXTURE = &h829F
const GL_COMPUTE_TEXTURE = &h82A0
const GL_TEXTURE_SHADOW = &h82A1
const GL_TEXTURE_GATHER = &h82A2
const GL_TEXTURE_GATHER_SHADOW = &h82A3
const GL_SHADER_IMAGE_LOAD = &h82A4
const GL_SHADER_IMAGE_STORE = &h82A5
const GL_SHADER_IMAGE_ATOMIC = &h82A6
const GL_IMAGE_TEXEL_SIZE = &h82A7
const GL_IMAGE_COMPATIBILITY_CLASS = &h82A8
const GL_IMAGE_PIXEL_FORMAT = &h82A9
const GL_IMAGE_PIXEL_TYPE = &h82AA
const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = &h82AC
const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = &h82AD
const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = &h82AE
const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = &h82AF
const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = &h82B1
const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = &h82B2
const GL_TEXTURE_COMPRESSED_BLOCK_SIZE = &h82B3
const GL_CLEAR_BUFFER = &h82B4
const GL_TEXTURE_VIEW = &h82B5
const GL_VIEW_COMPATIBILITY_CLASS = &h82B6
const GL_FULL_SUPPORT = &h82B7
const GL_CAVEAT_SUPPORT = &h82B8
const GL_IMAGE_CLASS_4_X_32 = &h82B9
const GL_IMAGE_CLASS_2_X_32 = &h82BA
const GL_IMAGE_CLASS_1_X_32 = &h82BB
const GL_IMAGE_CLASS_4_X_16 = &h82BC
const GL_IMAGE_CLASS_2_X_16 = &h82BD
const GL_IMAGE_CLASS_1_X_16 = &h82BE
const GL_IMAGE_CLASS_4_X_8 = &h82BF
const GL_IMAGE_CLASS_2_X_8 = &h82C0
const GL_IMAGE_CLASS_1_X_8 = &h82C1
const GL_IMAGE_CLASS_11_11_10 = &h82C2
const GL_IMAGE_CLASS_10_10_10_2 = &h82C3
const GL_VIEW_CLASS_128_BITS = &h82C4
const GL_VIEW_CLASS_96_BITS = &h82C5
const GL_VIEW_CLASS_64_BITS = &h82C6
const GL_VIEW_CLASS_48_BITS = &h82C7
const GL_VIEW_CLASS_32_BITS = &h82C8
const GL_VIEW_CLASS_24_BITS = &h82C9
const GL_VIEW_CLASS_16_BITS = &h82CA
const GL_VIEW_CLASS_8_BITS = &h82CB
const GL_VIEW_CLASS_S3TC_DXT1_RGB = &h82CC
const GL_VIEW_CLASS_S3TC_DXT1_RGBA = &h82CD
const GL_VIEW_CLASS_S3TC_DXT3_RGBA = &h82CE
const GL_VIEW_CLASS_S3TC_DXT5_RGBA = &h82CF
const GL_VIEW_CLASS_RGTC1_RED = &h82D0
const GL_VIEW_CLASS_RGTC2_RG = &h82D1
const GL_VIEW_CLASS_BPTC_UNORM = &h82D2
const GL_VIEW_CLASS_BPTC_FLOAT = &h82D3
const GL_UNIFORM = &h92E1
const GL_UNIFORM_BLOCK = &h92E2
const GL_PROGRAM_INPUT = &h92E3
const GL_PROGRAM_OUTPUT = &h92E4
const GL_BUFFER_VARIABLE = &h92E5
const GL_SHADER_STORAGE_BLOCK = &h92E6
const GL_VERTEX_SUBROUTINE = &h92E8
const GL_TESS_CONTROL_SUBROUTINE = &h92E9
const GL_TESS_EVALUATION_SUBROUTINE = &h92EA
const GL_GEOMETRY_SUBROUTINE = &h92EB
const GL_FRAGMENT_SUBROUTINE = &h92EC
const GL_COMPUTE_SUBROUTINE = &h92ED
const GL_VERTEX_SUBROUTINE_UNIFORM = &h92EE
const GL_TESS_CONTROL_SUBROUTINE_UNIFORM = &h92EF
const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = &h92F0
const GL_GEOMETRY_SUBROUTINE_UNIFORM = &h92F1
const GL_FRAGMENT_SUBROUTINE_UNIFORM = &h92F2
const GL_COMPUTE_SUBROUTINE_UNIFORM = &h92F3
const GL_TRANSFORM_FEEDBACK_VARYING = &h92F4
const GL_ACTIVE_RESOURCES = &h92F5
const GL_MAX_NAME_LENGTH = &h92F6
const GL_MAX_NUM_ACTIVE_VARIABLES = &h92F7
const GL_MAX_NUM_COMPATIBLE_SUBROUTINES = &h92F8
const GL_NAME_LENGTH = &h92F9
const GL_TYPE = &h92FA
const GL_ARRAY_SIZE = &h92FB
const GL_OFFSET = &h92FC
const GL_BLOCK_INDEX = &h92FD
const GL_ARRAY_STRIDE = &h92FE
const GL_MATRIX_STRIDE = &h92FF
const GL_IS_ROW_MAJOR = &h9300
const GL_ATOMIC_COUNTER_BUFFER_INDEX = &h9301
const GL_BUFFER_BINDING = &h9302
const GL_BUFFER_DATA_SIZE = &h9303
const GL_NUM_ACTIVE_VARIABLES = &h9304
const GL_ACTIVE_VARIABLES = &h9305
const GL_REFERENCED_BY_VERTEX_SHADER = &h9306
const GL_REFERENCED_BY_TESS_CONTROL_SHADER = &h9307
const GL_REFERENCED_BY_TESS_EVALUATION_SHADER = &h9308
const GL_REFERENCED_BY_GEOMETRY_SHADER = &h9309
const GL_REFERENCED_BY_FRAGMENT_SHADER = &h930A
const GL_REFERENCED_BY_COMPUTE_SHADER = &h930B
const GL_TOP_LEVEL_ARRAY_SIZE = &h930C
const GL_TOP_LEVEL_ARRAY_STRIDE = &h930D
const GL_LOCATION = &h930E
const GL_LOCATION_INDEX = &h930F
const GL_IS_PER_PATCH = &h92E7
const GL_SHADER_STORAGE_BUFFER = &h90D2
const GL_SHADER_STORAGE_BUFFER_BINDING = &h90D3
const GL_SHADER_STORAGE_BUFFER_START = &h90D4
const GL_SHADER_STORAGE_BUFFER_SIZE = &h90D5
const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = &h90D6
const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = &h90D7
const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = &h90D8
const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = &h90D9
const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = &h90DA
const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = &h90DB
const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = &h90DC
const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = &h90DD
const GL_MAX_SHADER_STORAGE_BLOCK_SIZE = &h90DE
const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = &h90DF
const GL_SHADER_STORAGE_BARRIER_BIT = &h00002000
const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = &h8F39
const GL_DEPTH_STENCIL_TEXTURE_MODE = &h90EA
const GL_TEXTURE_BUFFER_OFFSET = &h919D
const GL_TEXTURE_BUFFER_SIZE = &h919E
const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = &h919F
const GL_TEXTURE_VIEW_MIN_LEVEL = &h82DB
const GL_TEXTURE_VIEW_NUM_LEVELS = &h82DC
const GL_TEXTURE_VIEW_MIN_LAYER = &h82DD
const GL_TEXTURE_VIEW_NUM_LAYERS = &h82DE
const GL_TEXTURE_IMMUTABLE_LEVELS = &h82DF
const GL_VERTEX_ATTRIB_BINDING = &h82D4
const GL_VERTEX_ATTRIB_RELATIVE_OFFSET = &h82D5
const GL_VERTEX_BINDING_DIVISOR = &h82D6
const GL_VERTEX_BINDING_OFFSET = &h82D7
const GL_VERTEX_BINDING_STRIDE = &h82D8
const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = &h82D9
const GL_MAX_VERTEX_ATTRIB_BINDINGS = &h82DA
const GL_VERTEX_BINDING_BUFFER = &h8F4F
const GL_DISPLAY_LIST = &h82E7

type PFNGLCLEARBUFFERDATAPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval format as GLenum, byval type as GLenum, byval data as const any ptr)
type PFNGLCLEARBUFFERSUBDATAPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval offset as GLintptr, byval size as GLsizeiptr, byval format as GLenum, byval type as GLenum, byval data as const any ptr)
type PFNGLDISPATCHCOMPUTEPROC as sub(byval num_groups_x as GLuint, byval num_groups_y as GLuint, byval num_groups_z as GLuint)
type PFNGLDISPATCHCOMPUTEINDIRECTPROC as sub(byval indirect as GLintptr)
type PFNGLCOPYIMAGESUBDATAPROC as sub(byval srcName as GLuint, byval srcTarget as GLenum, byval srcLevel as GLint, byval srcX as GLint, byval srcY as GLint, byval srcZ as GLint, byval dstName as GLuint, byval dstTarget as GLenum, byval dstLevel as GLint, byval dstX as GLint, byval dstY as GLint, byval dstZ as GLint, byval srcWidth as GLsizei, byval srcHeight as GLsizei, byval srcDepth as GLsizei)
type PFNGLFRAMEBUFFERPARAMETERIPROC as sub(byval target as GLenum, byval pname as GLenum, byval param as GLint)
type PFNGLGETFRAMEBUFFERPARAMETERIVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETINTERNALFORMATI64VPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval pname as GLenum, byval bufSize as GLsizei, byval params as GLint64 ptr)
type PFNGLINVALIDATETEXSUBIMAGEPROC as sub(byval texture as GLuint, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei)
type PFNGLINVALIDATETEXIMAGEPROC as sub(byval texture as GLuint, byval level as GLint)
type PFNGLINVALIDATEBUFFERSUBDATAPROC as sub(byval buffer as GLuint, byval offset as GLintptr, byval length as GLsizeiptr)
type PFNGLINVALIDATEBUFFERDATAPROC as sub(byval buffer as GLuint)
type PFNGLINVALIDATEFRAMEBUFFERPROC as sub(byval target as GLenum, byval numAttachments as GLsizei, byval attachments as const GLenum ptr)
type PFNGLINVALIDATESUBFRAMEBUFFERPROC as sub(byval target as GLenum, byval numAttachments as GLsizei, byval attachments as const GLenum ptr, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)
type PFNGLMULTIDRAWARRAYSINDIRECTPROC as sub(byval mode as GLenum, byval indirect as const any ptr, byval drawcount as GLsizei, byval stride as GLsizei)
type PFNGLMULTIDRAWELEMENTSINDIRECTPROC as sub(byval mode as GLenum, byval type as GLenum, byval indirect as const any ptr, byval drawcount as GLsizei, byval stride as GLsizei)
type PFNGLGETPROGRAMINTERFACEIVPROC as sub(byval program as GLuint, byval programInterface as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETPROGRAMRESOURCEINDEXPROC as function(byval program as GLuint, byval programInterface as GLenum, byval name as const GLchar ptr) as GLuint
type PFNGLGETPROGRAMRESOURCENAMEPROC as sub(byval program as GLuint, byval programInterface as GLenum, byval index as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval name as GLchar ptr)
type PFNGLGETPROGRAMRESOURCEIVPROC as sub(byval program as GLuint, byval programInterface as GLenum, byval index as GLuint, byval propCount as GLsizei, byval props as const GLenum ptr, byval bufSize as GLsizei, byval length as GLsizei ptr, byval params as GLint ptr)
type PFNGLGETPROGRAMRESOURCELOCATIONPROC as function(byval program as GLuint, byval programInterface as GLenum, byval name as const GLchar ptr) as GLint
type PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC as function(byval program as GLuint, byval programInterface as GLenum, byval name as const GLchar ptr) as GLint
type PFNGLSHADERSTORAGEBLOCKBINDINGPROC as sub(byval program as GLuint, byval storageBlockIndex as GLuint, byval storageBlockBinding as GLuint)
type PFNGLTEXBUFFERRANGEPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval buffer as GLuint, byval offset as GLintptr, byval size as GLsizeiptr)
type PFNGLTEXSTORAGE2DMULTISAMPLEPROC as sub(byval target as GLenum, byval samples as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval fixedsamplelocations as GLboolean)
type PFNGLTEXSTORAGE3DMULTISAMPLEPROC as sub(byval target as GLenum, byval samples as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval fixedsamplelocations as GLboolean)
type PFNGLTEXTUREVIEWPROC as sub(byval texture as GLuint, byval target as GLenum, byval origtexture as GLuint, byval internalformat as GLenum, byval minlevel as GLuint, byval numlevels as GLuint, byval minlayer as GLuint, byval numlayers as GLuint)
type PFNGLBINDVERTEXBUFFERPROC as sub(byval bindingindex as GLuint, byval buffer as GLuint, byval offset as GLintptr, byval stride as GLsizei)
type PFNGLVERTEXATTRIBFORMATPROC as sub(byval attribindex as GLuint, byval size as GLint, byval type as GLenum, byval normalized as GLboolean, byval relativeoffset as GLuint)
type PFNGLVERTEXATTRIBIFORMATPROC as sub(byval attribindex as GLuint, byval size as GLint, byval type as GLenum, byval relativeoffset as GLuint)
type PFNGLVERTEXATTRIBLFORMATPROC as sub(byval attribindex as GLuint, byval size as GLint, byval type as GLenum, byval relativeoffset as GLuint)
type PFNGLVERTEXATTRIBBINDINGPROC as sub(byval attribindex as GLuint, byval bindingindex as GLuint)
type PFNGLVERTEXBINDINGDIVISORPROC as sub(byval bindingindex as GLuint, byval divisor as GLuint)
type PFNGLDEBUGMESSAGECONTROLPROC as sub(byval source as GLenum, byval type as GLenum, byval severity as GLenum, byval count as GLsizei, byval ids as const GLuint ptr, byval enabled as GLboolean)
type PFNGLDEBUGMESSAGEINSERTPROC as sub(byval source as GLenum, byval type as GLenum, byval id as GLuint, byval severity as GLenum, byval length as GLsizei, byval buf as const GLchar ptr)
type PFNGLDEBUGMESSAGECALLBACKPROC as sub(byval callback as GLDEBUGPROC, byval userParam as const any ptr)
type PFNGLGETDEBUGMESSAGELOGPROC as function(byval count as GLuint, byval bufSize as GLsizei, byval sources as GLenum ptr, byval types as GLenum ptr, byval ids as GLuint ptr, byval severities as GLenum ptr, byval lengths as GLsizei ptr, byval messageLog as GLchar ptr) as GLuint
type PFNGLPUSHDEBUGGROUPPROC as sub(byval source as GLenum, byval id as GLuint, byval length as GLsizei, byval message as const GLchar ptr)
type PFNGLPOPDEBUGGROUPPROC as sub()
type PFNGLOBJECTLABELPROC as sub(byval identifier as GLenum, byval name as GLuint, byval length as GLsizei, byval label as const GLchar ptr)
type PFNGLGETOBJECTLABELPROC as sub(byval identifier as GLenum, byval name as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval label as GLchar ptr)
type PFNGLOBJECTPTRLABELPROC as sub(byval ptr as const any ptr, byval length as GLsizei, byval label as const GLchar ptr)
type PFNGLGETOBJECTPTRLABELPROC as sub(byval ptr as const any ptr, byval bufSize as GLsizei, byval length as GLsizei ptr, byval label as GLchar ptr)


const GL_VERSION_4_4 = 1
const GL_MAX_VERTEX_ATTRIB_STRIDE = &h82E5
const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = &h8221
const GL_TEXTURE_BUFFER_BINDING = &h8C2A
const GL_MAP_PERSISTENT_BIT = &h0040
const GL_MAP_COHERENT_BIT = &h0080
const GL_DYNAMIC_STORAGE_BIT = &h0100
const GL_CLIENT_STORAGE_BIT = &h0200
const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = &h00004000
const GL_BUFFER_IMMUTABLE_STORAGE = &h821F
const GL_BUFFER_STORAGE_FLAGS = &h8220
const GL_CLEAR_TEXTURE = &h9365
const GL_LOCATION_COMPONENT = &h934A
const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = &h934B
const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = &h934C
const GL_QUERY_BUFFER = &h9192
const GL_QUERY_BUFFER_BARRIER_BIT = &h00008000
const GL_QUERY_BUFFER_BINDING = &h9193
const GL_QUERY_RESULT_NO_WAIT = &h9194
const GL_MIRROR_CLAMP_TO_EDGE = &h8743

type PFNGLBUFFERSTORAGEPROC as sub(byval target as GLenum, byval size as GLsizeiptr, byval data as const any ptr, byval flags as GLbitfield)
type PFNGLCLEARTEXIMAGEPROC as sub(byval texture as GLuint, byval level as GLint, byval format as GLenum, byval type as GLenum, byval data as const any ptr)
type PFNGLCLEARTEXSUBIMAGEPROC as sub(byval texture as GLuint, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval format as GLenum, byval type as GLenum, byval data as const any ptr)
type PFNGLBINDBUFFERSBASEPROC as sub(byval target as GLenum, byval first as GLuint, byval count as GLsizei, byval buffers as const GLuint ptr)
type PFNGLBINDBUFFERSRANGEPROC as sub(byval target as GLenum, byval first as GLuint, byval count as GLsizei, byval buffers as const GLuint ptr, byval offsets as const GLintptr ptr, byval sizes as const GLsizeiptr ptr)
type PFNGLBINDTEXTURESPROC as sub(byval first as GLuint, byval count as GLsizei, byval textures as const GLuint ptr)
type PFNGLBINDSAMPLERSPROC as sub(byval first as GLuint, byval count as GLsizei, byval samplers as const GLuint ptr)
type PFNGLBINDIMAGETEXTURESPROC as sub(byval first as GLuint, byval count as GLsizei, byval textures as const GLuint ptr)
type PFNGLBINDVERTEXBUFFERSPROC as sub(byval first as GLuint, byval count as GLsizei, byval buffers as const GLuint ptr, byval offsets as const GLintptr ptr, byval strides as const GLsizei ptr)


const GL_VERSION_4_5 = 1
const GL_CONTEXT_LOST = &h0507
const GL_NEGATIVE_ONE_TO_ONE = &h935E
const GL_ZERO_TO_ONE = &h935F
const GL_CLIP_ORIGIN = &h935C
const GL_CLIP_DEPTH_MODE = &h935D
const GL_QUERY_WAIT_INVERTED = &h8E17
const GL_QUERY_NO_WAIT_INVERTED = &h8E18
const GL_QUERY_BY_REGION_WAIT_INVERTED = &h8E19
const GL_QUERY_BY_REGION_NO_WAIT_INVERTED = &h8E1A
const GL_MAX_CULL_DISTANCES = &h82F9
const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = &h82FA
const GL_TEXTURE_TARGET = &h1006
const GL_QUERY_TARGET = &h82EA
const GL_TEXTURE_BINDING = &h82EB
const GL_GUILTY_CONTEXT_RESET = &h8253
const GL_INNOCENT_CONTEXT_RESET = &h8254
const GL_UNKNOWN_CONTEXT_RESET = &h8255
const GL_RESET_NOTIFICATION_STRATEGY = &h8256
const GL_LOSE_CONTEXT_ON_RESET = &h8252
const GL_NO_RESET_NOTIFICATION = &h8261
const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = &h00000004
const GL_CONTEXT_RELEASE_BEHAVIOR = &h82FB
const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = &h82FC

type PFNGLCLIPCONTROLPROC as sub(byval origin as GLenum, byval depth as GLenum)
type PFNGLCREATETRANSFORMFEEDBACKSPROC as sub(byval n as GLsizei, byval ids as GLuint ptr)
type PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC as sub(byval xfb as GLuint, byval index as GLuint, byval buffer as GLuint)
type PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC as sub(byval xfb as GLuint, byval index as GLuint, byval buffer as GLuint, byval offset as GLintptr, byval size as GLsizei)
type PFNGLGETTRANSFORMFEEDBACKIVPROC as sub(byval xfb as GLuint, byval pname as GLenum, byval param as GLint ptr)
type PFNGLGETTRANSFORMFEEDBACKI_VPROC as sub(byval xfb as GLuint, byval pname as GLenum, byval index as GLuint, byval param as GLint ptr)
type PFNGLGETTRANSFORMFEEDBACKI64_VPROC as sub(byval xfb as GLuint, byval pname as GLenum, byval index as GLuint, byval param as GLint64 ptr)
type PFNGLCREATEBUFFERSPROC as sub(byval n as GLsizei, byval buffers as GLuint ptr)
type PFNGLNAMEDBUFFERSTORAGEPROC as sub(byval buffer as GLuint, byval size as GLsizei, byval data as const any ptr, byval flags as GLbitfield)
type PFNGLNAMEDBUFFERDATAPROC as sub(byval buffer as GLuint, byval size as GLsizei, byval data as const any ptr, byval usage as GLenum)
type PFNGLNAMEDBUFFERSUBDATAPROC as sub(byval buffer as GLuint, byval offset as GLintptr, byval size as GLsizei, byval data as const any ptr)
type PFNGLCOPYNAMEDBUFFERSUBDATAPROC as sub(byval readBuffer as GLuint, byval writeBuffer as GLuint, byval readOffset as GLintptr, byval writeOffset as GLintptr, byval size as GLsizei)
type PFNGLCLEARNAMEDBUFFERDATAPROC as sub(byval buffer as GLuint, byval internalformat as GLenum, byval format as GLenum, byval type as GLenum, byval data as const any ptr)
type PFNGLCLEARNAMEDBUFFERSUBDATAPROC as sub(byval buffer as GLuint, byval internalformat as GLenum, byval offset as GLintptr, byval size as GLsizei, byval format as GLenum, byval type as GLenum, byval data as const any ptr)
type PFNGLMAPNAMEDBUFFERPROC as function(byval buffer as GLuint, byval access as GLenum) as any ptr
type PFNGLMAPNAMEDBUFFERRANGEPROC as function(byval buffer as GLuint, byval offset as GLintptr, byval length as GLsizei, byval access as GLbitfield) as any ptr
type PFNGLUNMAPNAMEDBUFFERPROC as function(byval buffer as GLuint) as GLboolean
type PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC as sub(byval buffer as GLuint, byval offset as GLintptr, byval length as GLsizei)
type PFNGLGETNAMEDBUFFERPARAMETERIVPROC as sub(byval buffer as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETNAMEDBUFFERPARAMETERI64VPROC as sub(byval buffer as GLuint, byval pname as GLenum, byval params as GLint64 ptr)
type PFNGLGETNAMEDBUFFERPOINTERVPROC as sub(byval buffer as GLuint, byval pname as GLenum, byval params as any ptr ptr)
type PFNGLGETNAMEDBUFFERSUBDATAPROC as sub(byval buffer as GLuint, byval offset as GLintptr, byval size as GLsizei, byval data as any ptr)
type PFNGLCREATEFRAMEBUFFERSPROC as sub(byval n as GLsizei, byval framebuffers as GLuint ptr)
type PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC as sub(byval framebuffer as GLuint, byval attachment as GLenum, byval renderbuffertarget as GLenum, byval renderbuffer as GLuint)
type PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC as sub(byval framebuffer as GLuint, byval pname as GLenum, byval param as GLint)
type PFNGLNAMEDFRAMEBUFFERTEXTUREPROC as sub(byval framebuffer as GLuint, byval attachment as GLenum, byval texture as GLuint, byval level as GLint)
type PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC as sub(byval framebuffer as GLuint, byval attachment as GLenum, byval texture as GLuint, byval level as GLint, byval layer as GLint)
type PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC as sub(byval framebuffer as GLuint, byval buf as GLenum)
type PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC as sub(byval framebuffer as GLuint, byval n as GLsizei, byval bufs as const GLenum ptr)
type PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC as sub(byval framebuffer as GLuint, byval src as GLenum)
type PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC as sub(byval framebuffer as GLuint, byval numAttachments as GLsizei, byval attachments as const GLenum ptr)
type PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC as sub(byval framebuffer as GLuint, byval numAttachments as GLsizei, byval attachments as const GLenum ptr, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)
type PFNGLCLEARNAMEDFRAMEBUFFERIVPROC as sub(byval framebuffer as GLuint, byval buffer as GLenum, byval drawbuffer as GLint, byval value as const GLint ptr)
type PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC as sub(byval framebuffer as GLuint, byval buffer as GLenum, byval drawbuffer as GLint, byval value as const GLuint ptr)
type PFNGLCLEARNAMEDFRAMEBUFFERFVPROC as sub(byval framebuffer as GLuint, byval buffer as GLenum, byval drawbuffer as GLint, byval value as const GLfloat ptr)
type PFNGLCLEARNAMEDFRAMEBUFFERFIPROC as sub(byval framebuffer as GLuint, byval buffer as GLenum, byval depth as const GLfloat, byval stencil as GLint)
type PFNGLBLITNAMEDFRAMEBUFFERPROC as sub(byval readFramebuffer as GLuint, byval drawFramebuffer as GLuint, byval srcX0 as GLint, byval srcY0 as GLint, byval srcX1 as GLint, byval srcY1 as GLint, byval dstX0 as GLint, byval dstY0 as GLint, byval dstX1 as GLint, byval dstY1 as GLint, byval mask as GLbitfield, byval filter as GLenum)
type PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC as function(byval framebuffer as GLuint, byval target as GLenum) as GLenum
type PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC as sub(byval framebuffer as GLuint, byval pname as GLenum, byval param as GLint ptr)
type PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC as sub(byval framebuffer as GLuint, byval attachment as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLCREATERENDERBUFFERSPROC as sub(byval n as GLsizei, byval renderbuffers as GLuint ptr)
type PFNGLNAMEDRENDERBUFFERSTORAGEPROC as sub(byval renderbuffer as GLuint, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei)
type PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC as sub(byval renderbuffer as GLuint, byval samples as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei)
type PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC as sub(byval renderbuffer as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLCREATETEXTURESPROC as sub(byval target as GLenum, byval n as GLsizei, byval textures as GLuint ptr)
type PFNGLTEXTUREBUFFERPROC as sub(byval texture as GLuint, byval internalformat as GLenum, byval buffer as GLuint)
type PFNGLTEXTUREBUFFERRANGEPROC as sub(byval texture as GLuint, byval internalformat as GLenum, byval buffer as GLuint, byval offset as GLintptr, byval size as GLsizei)
type PFNGLTEXTURESTORAGE1DPROC as sub(byval texture as GLuint, byval levels as GLsizei, byval internalformat as GLenum, byval width as GLsizei)
type PFNGLTEXTURESTORAGE2DPROC as sub(byval texture as GLuint, byval levels as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei)
type PFNGLTEXTURESTORAGE3DPROC as sub(byval texture as GLuint, byval levels as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei)
type PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC as sub(byval texture as GLuint, byval samples as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval fixedsamplelocations as GLboolean)
type PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC as sub(byval texture as GLuint, byval samples as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval fixedsamplelocations as GLboolean)
type PFNGLTEXTURESUBIMAGE1DPROC as sub(byval texture as GLuint, byval level as GLint, byval xoffset as GLint, byval width as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLTEXTURESUBIMAGE2DPROC as sub(byval texture as GLuint, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLTEXTURESUBIMAGE3DPROC as sub(byval texture as GLuint, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC as sub(byval texture as GLuint, byval level as GLint, byval xoffset as GLint, byval width as GLsizei, byval format as GLenum, byval imageSize as GLsizei, byval data as const any ptr)
type PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC as sub(byval texture as GLuint, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval imageSize as GLsizei, byval data as const any ptr)
type PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC as sub(byval texture as GLuint, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval format as GLenum, byval imageSize as GLsizei, byval data as const any ptr)
type PFNGLCOPYTEXTURESUBIMAGE1DPROC as sub(byval texture as GLuint, byval level as GLint, byval xoffset as GLint, byval x as GLint, byval y as GLint, byval width as GLsizei)
type PFNGLCOPYTEXTURESUBIMAGE2DPROC as sub(byval texture as GLuint, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)
type PFNGLCOPYTEXTURESUBIMAGE3DPROC as sub(byval texture as GLuint, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)
type PFNGLTEXTUREPARAMETERFPROC as sub(byval texture as GLuint, byval pname as GLenum, byval param as GLfloat)
type PFNGLTEXTUREPARAMETERFVPROC as sub(byval texture as GLuint, byval pname as GLenum, byval param as const GLfloat ptr)
type PFNGLTEXTUREPARAMETERIPROC as sub(byval texture as GLuint, byval pname as GLenum, byval param as GLint)
type PFNGLTEXTUREPARAMETERIIVPROC as sub(byval texture as GLuint, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLTEXTUREPARAMETERIUIVPROC as sub(byval texture as GLuint, byval pname as GLenum, byval params as const GLuint ptr)
type PFNGLTEXTUREPARAMETERIVPROC as sub(byval texture as GLuint, byval pname as GLenum, byval param as const GLint ptr)
type PFNGLGENERATETEXTUREMIPMAPPROC as sub(byval texture as GLuint)
type PFNGLBINDTEXTUREUNITPROC as sub(byval unit as GLuint, byval texture as GLuint)
type PFNGLGETTEXTUREIMAGEPROC as sub(byval texture as GLuint, byval level as GLint, byval format as GLenum, byval type as GLenum, byval bufSize as GLsizei, byval pixels as any ptr)
type PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC as sub(byval texture as GLuint, byval level as GLint, byval bufSize as GLsizei, byval pixels as any ptr)
type PFNGLGETTEXTURELEVELPARAMETERFVPROC as sub(byval texture as GLuint, byval level as GLint, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETTEXTURELEVELPARAMETERIVPROC as sub(byval texture as GLuint, byval level as GLint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETTEXTUREPARAMETERFVPROC as sub(byval texture as GLuint, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETTEXTUREPARAMETERIIVPROC as sub(byval texture as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETTEXTUREPARAMETERIUIVPROC as sub(byval texture as GLuint, byval pname as GLenum, byval params as GLuint ptr)
type PFNGLGETTEXTUREPARAMETERIVPROC as sub(byval texture as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLCREATEVERTEXARRAYSPROC as sub(byval n as GLsizei, byval arrays as GLuint ptr)
type PFNGLDISABLEVERTEXARRAYATTRIBPROC as sub(byval vaobj as GLuint, byval index as GLuint)
type PFNGLENABLEVERTEXARRAYATTRIBPROC as sub(byval vaobj as GLuint, byval index as GLuint)
type PFNGLVERTEXARRAYELEMENTBUFFERPROC as sub(byval vaobj as GLuint, byval buffer as GLuint)
type PFNGLVERTEXARRAYVERTEXBUFFERPROC as sub(byval vaobj as GLuint, byval bindingindex as GLuint, byval buffer as GLuint, byval offset as GLintptr, byval stride as GLsizei)
type PFNGLVERTEXARRAYVERTEXBUFFERSPROC as sub(byval vaobj as GLuint, byval first as GLuint, byval count as GLsizei, byval buffers as const GLuint ptr, byval offsets as const GLintptr ptr, byval strides as const GLsizei ptr)
type PFNGLVERTEXARRAYATTRIBBINDINGPROC as sub(byval vaobj as GLuint, byval attribindex as GLuint, byval bindingindex as GLuint)
type PFNGLVERTEXARRAYATTRIBFORMATPROC as sub(byval vaobj as GLuint, byval attribindex as GLuint, byval size as GLint, byval type as GLenum, byval normalized as GLboolean, byval relativeoffset as GLuint)
type PFNGLVERTEXARRAYATTRIBIFORMATPROC as sub(byval vaobj as GLuint, byval attribindex as GLuint, byval size as GLint, byval type as GLenum, byval relativeoffset as GLuint)
type PFNGLVERTEXARRAYATTRIBLFORMATPROC as sub(byval vaobj as GLuint, byval attribindex as GLuint, byval size as GLint, byval type as GLenum, byval relativeoffset as GLuint)
type PFNGLVERTEXARRAYBINDINGDIVISORPROC as sub(byval vaobj as GLuint, byval bindingindex as GLuint, byval divisor as GLuint)
type PFNGLGETVERTEXARRAYIVPROC as sub(byval vaobj as GLuint, byval pname as GLenum, byval param as GLint ptr)
type PFNGLGETVERTEXARRAYINDEXEDIVPROC as sub(byval vaobj as GLuint, byval index as GLuint, byval pname as GLenum, byval param as GLint ptr)
type PFNGLGETVERTEXARRAYINDEXED64IVPROC as sub(byval vaobj as GLuint, byval index as GLuint, byval pname as GLenum, byval param as GLint64 ptr)
type PFNGLCREATESAMPLERSPROC as sub(byval n as GLsizei, byval samplers as GLuint ptr)
type PFNGLCREATEPROGRAMPIPELINESPROC as sub(byval n as GLsizei, byval pipelines as GLuint ptr)
type PFNGLCREATEQUERIESPROC as sub(byval target as GLenum, byval n as GLsizei, byval ids as GLuint ptr)
type PFNGLGETQUERYBUFFEROBJECTI64VPROC as sub(byval id as GLuint, byval buffer as GLuint, byval pname as GLenum, byval offset as GLintptr)
type PFNGLGETQUERYBUFFEROBJECTIVPROC as sub(byval id as GLuint, byval buffer as GLuint, byval pname as GLenum, byval offset as GLintptr)
type PFNGLGETQUERYBUFFEROBJECTUI64VPROC as sub(byval id as GLuint, byval buffer as GLuint, byval pname as GLenum, byval offset as GLintptr)
type PFNGLGETQUERYBUFFEROBJECTUIVPROC as sub(byval id as GLuint, byval buffer as GLuint, byval pname as GLenum, byval offset as GLintptr)
type PFNGLMEMORYBARRIERBYREGIONPROC as sub(byval barriers as GLbitfield)
type PFNGLGETTEXTURESUBIMAGEPROC as sub(byval texture as GLuint, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval format as GLenum, byval type as GLenum, byval bufSize as GLsizei, byval pixels as any ptr)
type PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC as sub(byval texture as GLuint, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval bufSize as GLsizei, byval pixels as any ptr)
type PFNGLGETGRAPHICSRESETSTATUSPROC as function() as GLenum
type PFNGLGETNCOMPRESSEDTEXIMAGEPROC as sub(byval target as GLenum, byval lod as GLint, byval bufSize as GLsizei, byval pixels as any ptr)
type PFNGLGETNTEXIMAGEPROC as sub(byval target as GLenum, byval level as GLint, byval format as GLenum, byval type as GLenum, byval bufSize as GLsizei, byval pixels as any ptr)
type PFNGLGETNUNIFORMDVPROC as sub(byval program as GLuint, byval location as GLint, byval bufSize as GLsizei, byval params as GLdouble ptr)
type PFNGLGETNUNIFORMFVPROC as sub(byval program as GLuint, byval location as GLint, byval bufSize as GLsizei, byval params as GLfloat ptr)
type PFNGLGETNUNIFORMIVPROC as sub(byval program as GLuint, byval location as GLint, byval bufSize as GLsizei, byval params as GLint ptr)
type PFNGLGETNUNIFORMUIVPROC as sub(byval program as GLuint, byval location as GLint, byval bufSize as GLsizei, byval params as GLuint ptr)
type PFNGLREADNPIXELSPROC as sub(byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval type as GLenum, byval bufSize as GLsizei, byval data as any ptr)
type PFNGLGETNMAPDVPROC as sub(byval target as GLenum, byval query as GLenum, byval bufSize as GLsizei, byval v as GLdouble ptr)
type PFNGLGETNMAPFVPROC as sub(byval target as GLenum, byval query as GLenum, byval bufSize as GLsizei, byval v as GLfloat ptr)
type PFNGLGETNMAPIVPROC as sub(byval target as GLenum, byval query as GLenum, byval bufSize as GLsizei, byval v as GLint ptr)
type PFNGLGETNPIXELMAPFVPROC as sub(byval map as GLenum, byval bufSize as GLsizei, byval values as GLfloat ptr)
type PFNGLGETNPIXELMAPUIVPROC as sub(byval map as GLenum, byval bufSize as GLsizei, byval values as GLuint ptr)
type PFNGLGETNPIXELMAPUSVPROC as sub(byval map as GLenum, byval bufSize as GLsizei, byval values as GLushort ptr)
type PFNGLGETNPOLYGONSTIPPLEPROC as sub(byval bufSize as GLsizei, byval pattern as GLubyte ptr)
type PFNGLGETNCOLORTABLEPROC as sub(byval target as GLenum, byval format as GLenum, byval type as GLenum, byval bufSize as GLsizei, byval table as any ptr)
type PFNGLGETNCONVOLUTIONFILTERPROC as sub(byval target as GLenum, byval format as GLenum, byval type as GLenum, byval bufSize as GLsizei, byval image as any ptr)
type PFNGLGETNSEPARABLEFILTERPROC as sub(byval target as GLenum, byval format as GLenum, byval type as GLenum, byval rowBufSize as GLsizei, byval row as any ptr, byval columnBufSize as GLsizei, byval column as any ptr, byval span as any ptr)
type PFNGLGETNHISTOGRAMPROC as sub(byval target as GLenum, byval reset as GLboolean, byval format as GLenum, byval type as GLenum, byval bufSize as GLsizei, byval values as any ptr)
type PFNGLGETNMINMAXPROC as sub(byval target as GLenum, byval reset as GLboolean, byval format as GLenum, byval type as GLenum, byval bufSize as GLsizei, byval values as any ptr)
type PFNGLTEXTUREBARRIERPROC as sub()


const GL_ARB_ES2_compatibility = 1
const GL_ARB_ES3_1_compatibility = 1
const GL_ARB_ES3_compatibility = 1
const GL_ARB_arrays_of_arrays = 1
const GL_ARB_base_instance = 1
const GL_ARB_bindless_texture = 1
type GLuint64EXT as ulongint
const GL_UNSIGNED_INT64_ARB = &h140F

type PFNGLGETTEXTUREHANDLEARBPROC as function(byval texture as GLuint) as GLuint64
type PFNGLGETTEXTURESAMPLERHANDLEARBPROC as function(byval texture as GLuint, byval sampler as GLuint) as GLuint64
type PFNGLMAKETEXTUREHANDLERESIDENTARBPROC as sub(byval handle as GLuint64)
type PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC as sub(byval handle as GLuint64)
type PFNGLGETIMAGEHANDLEARBPROC as function(byval texture as GLuint, byval level as GLint, byval layered as GLboolean, byval layer as GLint, byval format as GLenum) as GLuint64
type PFNGLMAKEIMAGEHANDLERESIDENTARBPROC as sub(byval handle as GLuint64, byval access as GLenum)
type PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC as sub(byval handle as GLuint64)
type PFNGLUNIFORMHANDLEUI64ARBPROC as sub(byval location as GLint, byval value as GLuint64)
type PFNGLUNIFORMHANDLEUI64VARBPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLuint64 ptr)
type PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC as sub(byval program as GLuint, byval location as GLint, byval value as GLuint64)
type PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval values as const GLuint64 ptr)
type PFNGLISTEXTUREHANDLERESIDENTARBPROC as function(byval handle as GLuint64) as GLboolean
type PFNGLISIMAGEHANDLERESIDENTARBPROC as function(byval handle as GLuint64) as GLboolean
type PFNGLVERTEXATTRIBL1UI64ARBPROC as sub(byval index as GLuint, byval x as GLuint64EXT)
type PFNGLVERTEXATTRIBL1UI64VARBPROC as sub(byval index as GLuint, byval v as const GLuint64EXT ptr)
type PFNGLGETVERTEXATTRIBLUI64VARBPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLuint64EXT ptr)


const GL_ARB_blend_func_extended = 1
const GL_ARB_buffer_storage = 1
const GL_ARB_cl_event = 1
const GL_SYNC_CL_EVENT_ARB = &h8240
const GL_SYNC_CL_EVENT_COMPLETE_ARB = &h8241

type _cl_context as _cl_context_
type _cl_event as _cl_event_
type PFNGLCREATESYNCFROMCLEVENTARBPROC as function(byval context as _cl_context ptr, byval event as _cl_event ptr, byval flags as GLbitfield) as GLsync


const GL_ARB_clear_buffer_object = 1
const GL_ARB_clear_texture = 1
const GL_ARB_clip_control = 1
const GL_ARB_color_buffer_float = 1
const GL_RGBA_FLOAT_MODE_ARB = &h8820
const GL_CLAMP_VERTEX_COLOR_ARB = &h891A
const GL_CLAMP_FRAGMENT_COLOR_ARB = &h891B
const GL_CLAMP_READ_COLOR_ARB = &h891C
const GL_FIXED_ONLY_ARB = &h891D
type PFNGLCLAMPCOLORARBPROC as sub(byval target as GLenum, byval clamp as GLenum)


const GL_ARB_compatibility = 1
const GL_ARB_compressed_texture_pixel_storage = 1
const GL_ARB_compute_shader = 1
const GL_ARB_compute_variable_group_size = 1
const GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = &h9344
const GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = &h90EB
const GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = &h9345
const GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = &h91BF
type PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC as sub(byval num_groups_x as GLuint, byval num_groups_y as GLuint, byval num_groups_z as GLuint, byval group_size_x as GLuint, byval group_size_y as GLuint, byval group_size_z as GLuint)


const GL_ARB_conditional_render_inverted = 1
const GL_ARB_conservative_depth = 1
const GL_ARB_copy_buffer = 1
const GL_ARB_copy_image = 1
const GL_ARB_cull_distance = 1
const GL_ARB_debug_output = 1
type GLDEBUGPROCARB as sub(byval source as GLenum, byval type as GLenum, byval id as GLuint, byval severity as GLenum, byval length as GLsizei, byval message as const GLchar ptr, byval userParam as const any ptr)
const GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = &h8242
const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = &h8243
const GL_DEBUG_CALLBACK_FUNCTION_ARB = &h8244
const GL_DEBUG_CALLBACK_USER_PARAM_ARB = &h8245
const GL_DEBUG_SOURCE_API_ARB = &h8246
const GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = &h8247
const GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = &h8248
const GL_DEBUG_SOURCE_THIRD_PARTY_ARB = &h8249
const GL_DEBUG_SOURCE_APPLICATION_ARB = &h824A
const GL_DEBUG_SOURCE_OTHER_ARB = &h824B
const GL_DEBUG_TYPE_ERROR_ARB = &h824C
const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = &h824D
const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = &h824E
const GL_DEBUG_TYPE_PORTABILITY_ARB = &h824F
const GL_DEBUG_TYPE_PERFORMANCE_ARB = &h8250
const GL_DEBUG_TYPE_OTHER_ARB = &h8251
const GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = &h9143
const GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = &h9144
const GL_DEBUG_LOGGED_MESSAGES_ARB = &h9145
const GL_DEBUG_SEVERITY_HIGH_ARB = &h9146
const GL_DEBUG_SEVERITY_MEDIUM_ARB = &h9147
const GL_DEBUG_SEVERITY_LOW_ARB = &h9148

type PFNGLDEBUGMESSAGECONTROLARBPROC as sub(byval source as GLenum, byval type as GLenum, byval severity as GLenum, byval count as GLsizei, byval ids as const GLuint ptr, byval enabled as GLboolean)
type PFNGLDEBUGMESSAGEINSERTARBPROC as sub(byval source as GLenum, byval type as GLenum, byval id as GLuint, byval severity as GLenum, byval length as GLsizei, byval buf as const GLchar ptr)
type PFNGLDEBUGMESSAGECALLBACKARBPROC as sub(byval callback as GLDEBUGPROCARB, byval userParam as const any ptr)
type PFNGLGETDEBUGMESSAGELOGARBPROC as function(byval count as GLuint, byval bufSize as GLsizei, byval sources as GLenum ptr, byval types as GLenum ptr, byval ids as GLuint ptr, byval severities as GLenum ptr, byval lengths as GLsizei ptr, byval messageLog as GLchar ptr) as GLuint


const GL_ARB_depth_buffer_float = 1
const GL_ARB_depth_clamp = 1
const GL_ARB_depth_texture = 1
const GL_DEPTH_COMPONENT16_ARB = &h81A5
const GL_DEPTH_COMPONENT24_ARB = &h81A6
const GL_DEPTH_COMPONENT32_ARB = &h81A7
const GL_TEXTURE_DEPTH_SIZE_ARB = &h884A
const GL_DEPTH_TEXTURE_MODE_ARB = &h884B
const GL_ARB_derivative_control = 1
const GL_ARB_direct_state_access = 1
const GL_ARB_draw_buffers = 1
const GL_MAX_DRAW_BUFFERS_ARB = &h8824
const GL_DRAW_BUFFER0_ARB = &h8825
const GL_DRAW_BUFFER1_ARB = &h8826
const GL_DRAW_BUFFER2_ARB = &h8827
const GL_DRAW_BUFFER3_ARB = &h8828
const GL_DRAW_BUFFER4_ARB = &h8829
const GL_DRAW_BUFFER5_ARB = &h882A
const GL_DRAW_BUFFER6_ARB = &h882B
const GL_DRAW_BUFFER7_ARB = &h882C
const GL_DRAW_BUFFER8_ARB = &h882D
const GL_DRAW_BUFFER9_ARB = &h882E
const GL_DRAW_BUFFER10_ARB = &h882F
const GL_DRAW_BUFFER11_ARB = &h8830
const GL_DRAW_BUFFER12_ARB = &h8831
const GL_DRAW_BUFFER13_ARB = &h8832
const GL_DRAW_BUFFER14_ARB = &h8833
const GL_DRAW_BUFFER15_ARB = &h8834
type PFNGLDRAWBUFFERSARBPROC as sub(byval n as GLsizei, byval bufs as const GLenum ptr)


const GL_ARB_draw_buffers_blend = 1
type PFNGLBLENDEQUATIONIARBPROC as sub(byval buf as GLuint, byval mode as GLenum)
type PFNGLBLENDEQUATIONSEPARATEIARBPROC as sub(byval buf as GLuint, byval modeRGB as GLenum, byval modeAlpha as GLenum)
type PFNGLBLENDFUNCIARBPROC as sub(byval buf as GLuint, byval src as GLenum, byval dst as GLenum)
type PFNGLBLENDFUNCSEPARATEIARBPROC as sub(byval buf as GLuint, byval srcRGB as GLenum, byval dstRGB as GLenum, byval srcAlpha as GLenum, byval dstAlpha as GLenum)


const GL_ARB_draw_elements_base_vertex = 1
const GL_ARB_draw_indirect = 1
const GL_ARB_draw_instanced = 1
type PFNGLDRAWARRAYSINSTANCEDARBPROC as sub(byval mode as GLenum, byval first as GLint, byval count as GLsizei, byval primcount as GLsizei)
type PFNGLDRAWELEMENTSINSTANCEDARBPROC as sub(byval mode as GLenum, byval count as GLsizei, byval type as GLenum, byval indices as const any ptr, byval primcount as GLsizei)


const GL_ARB_enhanced_layouts = 1
const GL_ARB_explicit_attrib_location = 1
const GL_ARB_explicit_uniform_location = 1
const GL_ARB_fragment_coord_conventions = 1
const GL_ARB_fragment_layer_viewport = 1
const GL_ARB_fragment_program = 1
const GL_FRAGMENT_PROGRAM_ARB = &h8804
const GL_PROGRAM_FORMAT_ASCII_ARB = &h8875
const GL_PROGRAM_LENGTH_ARB = &h8627
const GL_PROGRAM_FORMAT_ARB = &h8876
const GL_PROGRAM_BINDING_ARB = &h8677
const GL_PROGRAM_INSTRUCTIONS_ARB = &h88A0
const GL_MAX_PROGRAM_INSTRUCTIONS_ARB = &h88A1
const GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = &h88A2
const GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = &h88A3
const GL_PROGRAM_TEMPORARIES_ARB = &h88A4
const GL_MAX_PROGRAM_TEMPORARIES_ARB = &h88A5
const GL_PROGRAM_NATIVE_TEMPORARIES_ARB = &h88A6
const GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = &h88A7
const GL_PROGRAM_PARAMETERS_ARB = &h88A8
const GL_MAX_PROGRAM_PARAMETERS_ARB = &h88A9
const GL_PROGRAM_NATIVE_PARAMETERS_ARB = &h88AA
const GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = &h88AB
const GL_PROGRAM_ATTRIBS_ARB = &h88AC
const GL_MAX_PROGRAM_ATTRIBS_ARB = &h88AD
const GL_PROGRAM_NATIVE_ATTRIBS_ARB = &h88AE
const GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = &h88AF
const GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = &h88B4
const GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = &h88B5
const GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = &h88B6
const GL_PROGRAM_ALU_INSTRUCTIONS_ARB = &h8805
const GL_PROGRAM_TEX_INSTRUCTIONS_ARB = &h8806
const GL_PROGRAM_TEX_INDIRECTIONS_ARB = &h8807
const GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = &h8808
const GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = &h8809
const GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = &h880A
const GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = &h880B
const GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = &h880C
const GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = &h880D
const GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = &h880E
const GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = &h880F
const GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = &h8810
const GL_PROGRAM_STRING_ARB = &h8628
const GL_PROGRAM_ERROR_POSITION_ARB = &h864B
const GL_CURRENT_MATRIX_ARB = &h8641
const GL_TRANSPOSE_CURRENT_MATRIX_ARB = &h88B7
const GL_CURRENT_MATRIX_STACK_DEPTH_ARB = &h8640
const GL_MAX_PROGRAM_MATRICES_ARB = &h862F
const GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = &h862E
const GL_MAX_TEXTURE_COORDS_ARB = &h8871
const GL_MAX_TEXTURE_IMAGE_UNITS_ARB = &h8872
const GL_PROGRAM_ERROR_STRING_ARB = &h8874
const GL_MATRIX0_ARB = &h88C0
const GL_MATRIX1_ARB = &h88C1
const GL_MATRIX2_ARB = &h88C2
const GL_MATRIX3_ARB = &h88C3
const GL_MATRIX4_ARB = &h88C4
const GL_MATRIX5_ARB = &h88C5
const GL_MATRIX6_ARB = &h88C6
const GL_MATRIX7_ARB = &h88C7
const GL_MATRIX8_ARB = &h88C8
const GL_MATRIX9_ARB = &h88C9
const GL_MATRIX10_ARB = &h88CA
const GL_MATRIX11_ARB = &h88CB
const GL_MATRIX12_ARB = &h88CC
const GL_MATRIX13_ARB = &h88CD
const GL_MATRIX14_ARB = &h88CE
const GL_MATRIX15_ARB = &h88CF
const GL_MATRIX16_ARB = &h88D0
const GL_MATRIX17_ARB = &h88D1
const GL_MATRIX18_ARB = &h88D2
const GL_MATRIX19_ARB = &h88D3
const GL_MATRIX20_ARB = &h88D4
const GL_MATRIX21_ARB = &h88D5
const GL_MATRIX22_ARB = &h88D6
const GL_MATRIX23_ARB = &h88D7
const GL_MATRIX24_ARB = &h88D8
const GL_MATRIX25_ARB = &h88D9
const GL_MATRIX26_ARB = &h88DA
const GL_MATRIX27_ARB = &h88DB
const GL_MATRIX28_ARB = &h88DC
const GL_MATRIX29_ARB = &h88DD
const GL_MATRIX30_ARB = &h88DE
const GL_MATRIX31_ARB = &h88DF

type PFNGLPROGRAMSTRINGARBPROC as sub(byval target as GLenum, byval format as GLenum, byval len as GLsizei, byval string as const any ptr)
type PFNGLBINDPROGRAMARBPROC as sub(byval target as GLenum, byval program as GLuint)
type PFNGLDELETEPROGRAMSARBPROC as sub(byval n as GLsizei, byval programs as const GLuint ptr)
type PFNGLGENPROGRAMSARBPROC as sub(byval n as GLsizei, byval programs as GLuint ptr)
type PFNGLPROGRAMENVPARAMETER4DARBPROC as sub(byval target as GLenum, byval index as GLuint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble, byval w as GLdouble)
type PFNGLPROGRAMENVPARAMETER4DVARBPROC as sub(byval target as GLenum, byval index as GLuint, byval params as const GLdouble ptr)
type PFNGLPROGRAMENVPARAMETER4FARBPROC as sub(byval target as GLenum, byval index as GLuint, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat, byval w as GLfloat)
type PFNGLPROGRAMENVPARAMETER4FVARBPROC as sub(byval target as GLenum, byval index as GLuint, byval params as const GLfloat ptr)
type PFNGLPROGRAMLOCALPARAMETER4DARBPROC as sub(byval target as GLenum, byval index as GLuint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble, byval w as GLdouble)
type PFNGLPROGRAMLOCALPARAMETER4DVARBPROC as sub(byval target as GLenum, byval index as GLuint, byval params as const GLdouble ptr)
type PFNGLPROGRAMLOCALPARAMETER4FARBPROC as sub(byval target as GLenum, byval index as GLuint, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat, byval w as GLfloat)
type PFNGLPROGRAMLOCALPARAMETER4FVARBPROC as sub(byval target as GLenum, byval index as GLuint, byval params as const GLfloat ptr)
type PFNGLGETPROGRAMENVPARAMETERDVARBPROC as sub(byval target as GLenum, byval index as GLuint, byval params as GLdouble ptr)
type PFNGLGETPROGRAMENVPARAMETERFVARBPROC as sub(byval target as GLenum, byval index as GLuint, byval params as GLfloat ptr)
type PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC as sub(byval target as GLenum, byval index as GLuint, byval params as GLdouble ptr)
type PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC as sub(byval target as GLenum, byval index as GLuint, byval params as GLfloat ptr)
type PFNGLGETPROGRAMIVARBPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETPROGRAMSTRINGARBPROC as sub(byval target as GLenum, byval pname as GLenum, byval string as any ptr)
type PFNGLISPROGRAMARBPROC as function(byval program as GLuint) as GLboolean


const GL_ARB_fragment_program_shadow = 1
const GL_ARB_fragment_shader = 1
const GL_FRAGMENT_SHADER_ARB = &h8B30
const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = &h8B49
const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = &h8B8B
const GL_ARB_framebuffer_no_attachments = 1
const GL_ARB_framebuffer_object = 1
const GL_ARB_framebuffer_sRGB = 1
const GL_ARB_geometry_shader4 = 1
const GL_LINES_ADJACENCY_ARB = &h000A
const GL_LINE_STRIP_ADJACENCY_ARB = &h000B
const GL_TRIANGLES_ADJACENCY_ARB = &h000C
const GL_TRIANGLE_STRIP_ADJACENCY_ARB = &h000D
const GL_PROGRAM_POINT_SIZE_ARB = &h8642
const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = &h8C29
const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = &h8DA7
const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = &h8DA8
const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = &h8DA9
const GL_GEOMETRY_SHADER_ARB = &h8DD9
const GL_GEOMETRY_VERTICES_OUT_ARB = &h8DDA
const GL_GEOMETRY_INPUT_TYPE_ARB = &h8DDB
const GL_GEOMETRY_OUTPUT_TYPE_ARB = &h8DDC
const GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = &h8DDD
const GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = &h8DDE
const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = &h8DDF
const GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = &h8DE0
const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = &h8DE1

type PFNGLPROGRAMPARAMETERIARBPROC as sub(byval program as GLuint, byval pname as GLenum, byval value as GLint)
type PFNGLFRAMEBUFFERTEXTUREARBPROC as sub(byval target as GLenum, byval attachment as GLenum, byval texture as GLuint, byval level as GLint)
type PFNGLFRAMEBUFFERTEXTURELAYERARBPROC as sub(byval target as GLenum, byval attachment as GLenum, byval texture as GLuint, byval level as GLint, byval layer as GLint)
type PFNGLFRAMEBUFFERTEXTUREFACEARBPROC as sub(byval target as GLenum, byval attachment as GLenum, byval texture as GLuint, byval level as GLint, byval face as GLenum)


const GL_ARB_get_program_binary = 1
const GL_ARB_get_texture_sub_image = 1
const GL_ARB_gpu_shader5 = 1
const GL_ARB_gpu_shader_fp64 = 1
const GL_ARB_half_float_pixel = 1
type GLhalfARB as ushort
const GL_HALF_FLOAT_ARB = &h140B
const GL_ARB_half_float_vertex = 1
const GL_ARB_imaging = 1
const GL_BLEND_COLOR = &h8005
const GL_BLEND_EQUATION = &h8009
const GL_CONVOLUTION_1D = &h8010
const GL_CONVOLUTION_2D = &h8011
const GL_SEPARABLE_2D = &h8012
const GL_CONVOLUTION_BORDER_MODE = &h8013
const GL_CONVOLUTION_FILTER_SCALE = &h8014
const GL_CONVOLUTION_FILTER_BIAS = &h8015
const GL_REDUCE = &h8016
const GL_CONVOLUTION_FORMAT = &h8017
const GL_CONVOLUTION_WIDTH = &h8018
const GL_CONVOLUTION_HEIGHT = &h8019
const GL_MAX_CONVOLUTION_WIDTH = &h801A
const GL_MAX_CONVOLUTION_HEIGHT = &h801B
const GL_POST_CONVOLUTION_RED_SCALE = &h801C
const GL_POST_CONVOLUTION_GREEN_SCALE = &h801D
const GL_POST_CONVOLUTION_BLUE_SCALE = &h801E
const GL_POST_CONVOLUTION_ALPHA_SCALE = &h801F
const GL_POST_CONVOLUTION_RED_BIAS = &h8020
const GL_POST_CONVOLUTION_GREEN_BIAS = &h8021
const GL_POST_CONVOLUTION_BLUE_BIAS = &h8022
const GL_POST_CONVOLUTION_ALPHA_BIAS = &h8023
const GL_HISTOGRAM = &h8024
const GL_PROXY_HISTOGRAM = &h8025
const GL_HISTOGRAM_WIDTH = &h8026
const GL_HISTOGRAM_FORMAT = &h8027
const GL_HISTOGRAM_RED_SIZE = &h8028
const GL_HISTOGRAM_GREEN_SIZE = &h8029
const GL_HISTOGRAM_BLUE_SIZE = &h802A
const GL_HISTOGRAM_ALPHA_SIZE = &h802B
const GL_HISTOGRAM_LUMINANCE_SIZE = &h802C
const GL_HISTOGRAM_SINK = &h802D
const GL_MINMAX = &h802E
const GL_MINMAX_FORMAT = &h802F
const GL_MINMAX_SINK = &h8030
const GL_TABLE_TOO_LARGE = &h8031
const GL_COLOR_MATRIX = &h80B1
const GL_COLOR_MATRIX_STACK_DEPTH = &h80B2
const GL_MAX_COLOR_MATRIX_STACK_DEPTH = &h80B3
const GL_POST_COLOR_MATRIX_RED_SCALE = &h80B4
const GL_POST_COLOR_MATRIX_GREEN_SCALE = &h80B5
const GL_POST_COLOR_MATRIX_BLUE_SCALE = &h80B6
const GL_POST_COLOR_MATRIX_ALPHA_SCALE = &h80B7
const GL_POST_COLOR_MATRIX_RED_BIAS = &h80B8
const GL_POST_COLOR_MATRIX_GREEN_BIAS = &h80B9
const GL_POST_COLOR_MATRIX_BLUE_BIAS = &h80BA
const GL_POST_COLOR_MATRIX_ALPHA_BIAS = &h80BB
const GL_COLOR_TABLE = &h80D0
const GL_POST_CONVOLUTION_COLOR_TABLE = &h80D1
const GL_POST_COLOR_MATRIX_COLOR_TABLE = &h80D2
const GL_PROXY_COLOR_TABLE = &h80D3
const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = &h80D4
const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = &h80D5
const GL_COLOR_TABLE_SCALE = &h80D6
const GL_COLOR_TABLE_BIAS = &h80D7
const GL_COLOR_TABLE_FORMAT = &h80D8
const GL_COLOR_TABLE_WIDTH = &h80D9
const GL_COLOR_TABLE_RED_SIZE = &h80DA
const GL_COLOR_TABLE_GREEN_SIZE = &h80DB
const GL_COLOR_TABLE_BLUE_SIZE = &h80DC
const GL_COLOR_TABLE_ALPHA_SIZE = &h80DD
const GL_COLOR_TABLE_LUMINANCE_SIZE = &h80DE
const GL_COLOR_TABLE_INTENSITY_SIZE = &h80DF
const GL_CONSTANT_BORDER = &h8151
const GL_REPLICATE_BORDER = &h8153
const GL_CONVOLUTION_BORDER_COLOR = &h8154

type PFNGLCOLORTABLEPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval width as GLsizei, byval format as GLenum, byval type as GLenum, byval table as const any ptr)
type PFNGLCOLORTABLEPARAMETERFVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLCOLORTABLEPARAMETERIVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLCOPYCOLORTABLEPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval x as GLint, byval y as GLint, byval width as GLsizei)
type PFNGLGETCOLORTABLEPROC as sub(byval target as GLenum, byval format as GLenum, byval type as GLenum, byval table as any ptr)
type PFNGLGETCOLORTABLEPARAMETERFVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETCOLORTABLEPARAMETERIVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLCOLORSUBTABLEPROC as sub(byval target as GLenum, byval start as GLsizei, byval count as GLsizei, byval format as GLenum, byval type as GLenum, byval data as const any ptr)
type PFNGLCOPYCOLORSUBTABLEPROC as sub(byval target as GLenum, byval start as GLsizei, byval x as GLint, byval y as GLint, byval width as GLsizei)
type PFNGLCONVOLUTIONFILTER1DPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval width as GLsizei, byval format as GLenum, byval type as GLenum, byval image as const any ptr)
type PFNGLCONVOLUTIONFILTER2DPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval type as GLenum, byval image as const any ptr)
type PFNGLCONVOLUTIONPARAMETERFPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfloat)
type PFNGLCONVOLUTIONPARAMETERFVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLCONVOLUTIONPARAMETERIPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint)
type PFNGLCONVOLUTIONPARAMETERIVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLCOPYCONVOLUTIONFILTER1DPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval x as GLint, byval y as GLint, byval width as GLsizei)
type PFNGLCOPYCONVOLUTIONFILTER2DPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)
type PFNGLGETCONVOLUTIONFILTERPROC as sub(byval target as GLenum, byval format as GLenum, byval type as GLenum, byval image as any ptr)
type PFNGLGETCONVOLUTIONPARAMETERFVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETCONVOLUTIONPARAMETERIVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETSEPARABLEFILTERPROC as sub(byval target as GLenum, byval format as GLenum, byval type as GLenum, byval row as any ptr, byval column as any ptr, byval span as any ptr)
type PFNGLSEPARABLEFILTER2DPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval type as GLenum, byval row as const any ptr, byval column as const any ptr)
type PFNGLGETHISTOGRAMPROC as sub(byval target as GLenum, byval reset as GLboolean, byval format as GLenum, byval type as GLenum, byval values as any ptr)
type PFNGLGETHISTOGRAMPARAMETERFVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETHISTOGRAMPARAMETERIVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETMINMAXPROC as sub(byval target as GLenum, byval reset as GLboolean, byval format as GLenum, byval type as GLenum, byval values as any ptr)
type PFNGLGETMINMAXPARAMETERFVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETMINMAXPARAMETERIVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLHISTOGRAMPROC as sub(byval target as GLenum, byval width as GLsizei, byval internalformat as GLenum, byval sink as GLboolean)
type PFNGLMINMAXPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval sink as GLboolean)
type PFNGLRESETHISTOGRAMPROC as sub(byval target as GLenum)
type PFNGLRESETMINMAXPROC as sub(byval target as GLenum)


const GL_ARB_indirect_parameters = 1
const GL_PARAMETER_BUFFER_ARB = &h80EE
const GL_PARAMETER_BUFFER_BINDING_ARB = &h80EF
type PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC as sub(byval mode as GLenum, byval indirect as GLintptr, byval drawcount as GLintptr, byval maxdrawcount as GLsizei, byval stride as GLsizei)
type PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC as sub(byval mode as GLenum, byval type as GLenum, byval indirect as GLintptr, byval drawcount as GLintptr, byval maxdrawcount as GLsizei, byval stride as GLsizei)


const GL_ARB_instanced_arrays = 1
const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = &h88FE
type PFNGLVERTEXATTRIBDIVISORARBPROC as sub(byval index as GLuint, byval divisor as GLuint)


const GL_ARB_internalformat_query = 1
const GL_ARB_internalformat_query2 = 1
const GL_SRGB_DECODE_ARB = &h8299
const GL_ARB_invalidate_subdata = 1
const GL_ARB_map_buffer_alignment = 1
const GL_ARB_map_buffer_range = 1
const GL_ARB_matrix_palette = 1
const GL_MATRIX_PALETTE_ARB = &h8840
const GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = &h8841
const GL_MAX_PALETTE_MATRICES_ARB = &h8842
const GL_CURRENT_PALETTE_MATRIX_ARB = &h8843
const GL_MATRIX_INDEX_ARRAY_ARB = &h8844
const GL_CURRENT_MATRIX_INDEX_ARB = &h8845
const GL_MATRIX_INDEX_ARRAY_SIZE_ARB = &h8846
const GL_MATRIX_INDEX_ARRAY_TYPE_ARB = &h8847
const GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = &h8848
const GL_MATRIX_INDEX_ARRAY_POINTER_ARB = &h8849

type PFNGLCURRENTPALETTEMATRIXARBPROC as sub(byval index as GLint)
type PFNGLMATRIXINDEXUBVARBPROC as sub(byval size as GLint, byval indices as const GLubyte ptr)
type PFNGLMATRIXINDEXUSVARBPROC as sub(byval size as GLint, byval indices as const GLushort ptr)
type PFNGLMATRIXINDEXUIVARBPROC as sub(byval size as GLint, byval indices as const GLuint ptr)
type PFNGLMATRIXINDEXPOINTERARBPROC as sub(byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval pointer as const any ptr)


const GL_ARB_multi_bind = 1
const GL_ARB_multi_draw_indirect = 1
const GL_ARB_multisample = 1
const GL_MULTISAMPLE_ARB = &h809D
const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = &h809E
const GL_SAMPLE_ALPHA_TO_ONE_ARB = &h809F
const GL_SAMPLE_COVERAGE_ARB = &h80A0
const GL_SAMPLE_BUFFERS_ARB = &h80A8
const GL_SAMPLES_ARB = &h80A9
const GL_SAMPLE_COVERAGE_VALUE_ARB = &h80AA
const GL_SAMPLE_COVERAGE_INVERT_ARB = &h80AB
const GL_MULTISAMPLE_BIT_ARB = &h20000000
type PFNGLSAMPLECOVERAGEARBPROC as sub(byval value as GLfloat, byval invert as GLboolean)


const GL_ARB_multitexture = 1
const GL_TEXTURE0_ARB = &h84C0
const GL_TEXTURE1_ARB = &h84C1
const GL_TEXTURE2_ARB = &h84C2
const GL_TEXTURE3_ARB = &h84C3
const GL_TEXTURE4_ARB = &h84C4
const GL_TEXTURE5_ARB = &h84C5
const GL_TEXTURE6_ARB = &h84C6
const GL_TEXTURE7_ARB = &h84C7
const GL_TEXTURE8_ARB = &h84C8
const GL_TEXTURE9_ARB = &h84C9
const GL_TEXTURE10_ARB = &h84CA
const GL_TEXTURE11_ARB = &h84CB
const GL_TEXTURE12_ARB = &h84CC
const GL_TEXTURE13_ARB = &h84CD
const GL_TEXTURE14_ARB = &h84CE
const GL_TEXTURE15_ARB = &h84CF
const GL_TEXTURE16_ARB = &h84D0
const GL_TEXTURE17_ARB = &h84D1
const GL_TEXTURE18_ARB = &h84D2
const GL_TEXTURE19_ARB = &h84D3
const GL_TEXTURE20_ARB = &h84D4
const GL_TEXTURE21_ARB = &h84D5
const GL_TEXTURE22_ARB = &h84D6
const GL_TEXTURE23_ARB = &h84D7
const GL_TEXTURE24_ARB = &h84D8
const GL_TEXTURE25_ARB = &h84D9
const GL_TEXTURE26_ARB = &h84DA
const GL_TEXTURE27_ARB = &h84DB
const GL_TEXTURE28_ARB = &h84DC
const GL_TEXTURE29_ARB = &h84DD
const GL_TEXTURE30_ARB = &h84DE
const GL_TEXTURE31_ARB = &h84DF
const GL_ACTIVE_TEXTURE_ARB = &h84E0
const GL_CLIENT_ACTIVE_TEXTURE_ARB = &h84E1
const GL_MAX_TEXTURE_UNITS_ARB = &h84E2

type PFNGLACTIVETEXTUREARBPROC as sub(byval texture as GLenum)
type PFNGLCLIENTACTIVETEXTUREARBPROC as sub(byval texture as GLenum)
type PFNGLMULTITEXCOORD1DARBPROC as sub(byval target as GLenum, byval s as GLdouble)
type PFNGLMULTITEXCOORD1DVARBPROC as sub(byval target as GLenum, byval v as const GLdouble ptr)
type PFNGLMULTITEXCOORD1FARBPROC as sub(byval target as GLenum, byval s as GLfloat)
type PFNGLMULTITEXCOORD1FVARBPROC as sub(byval target as GLenum, byval v as const GLfloat ptr)
type PFNGLMULTITEXCOORD1IARBPROC as sub(byval target as GLenum, byval s as GLint)
type PFNGLMULTITEXCOORD1IVARBPROC as sub(byval target as GLenum, byval v as const GLint ptr)
type PFNGLMULTITEXCOORD1SARBPROC as sub(byval target as GLenum, byval s as GLshort)
type PFNGLMULTITEXCOORD1SVARBPROC as sub(byval target as GLenum, byval v as const GLshort ptr)
type PFNGLMULTITEXCOORD2DARBPROC as sub(byval target as GLenum, byval s as GLdouble, byval t as GLdouble)
type PFNGLMULTITEXCOORD2DVARBPROC as sub(byval target as GLenum, byval v as const GLdouble ptr)
type PFNGLMULTITEXCOORD2FARBPROC as sub(byval target as GLenum, byval s as GLfloat, byval t as GLfloat)
type PFNGLMULTITEXCOORD2FVARBPROC as sub(byval target as GLenum, byval v as const GLfloat ptr)
type PFNGLMULTITEXCOORD2IARBPROC as sub(byval target as GLenum, byval s as GLint, byval t as GLint)
type PFNGLMULTITEXCOORD2IVARBPROC as sub(byval target as GLenum, byval v as const GLint ptr)
type PFNGLMULTITEXCOORD2SARBPROC as sub(byval target as GLenum, byval s as GLshort, byval t as GLshort)
type PFNGLMULTITEXCOORD2SVARBPROC as sub(byval target as GLenum, byval v as const GLshort ptr)
type PFNGLMULTITEXCOORD3DARBPROC as sub(byval target as GLenum, byval s as GLdouble, byval t as GLdouble, byval r as GLdouble)
type PFNGLMULTITEXCOORD3DVARBPROC as sub(byval target as GLenum, byval v as const GLdouble ptr)
type PFNGLMULTITEXCOORD3FARBPROC as sub(byval target as GLenum, byval s as GLfloat, byval t as GLfloat, byval r as GLfloat)
type PFNGLMULTITEXCOORD3FVARBPROC as sub(byval target as GLenum, byval v as const GLfloat ptr)
type PFNGLMULTITEXCOORD3IARBPROC as sub(byval target as GLenum, byval s as GLint, byval t as GLint, byval r as GLint)
type PFNGLMULTITEXCOORD3IVARBPROC as sub(byval target as GLenum, byval v as const GLint ptr)
type PFNGLMULTITEXCOORD3SARBPROC as sub(byval target as GLenum, byval s as GLshort, byval t as GLshort, byval r as GLshort)
type PFNGLMULTITEXCOORD3SVARBPROC as sub(byval target as GLenum, byval v as const GLshort ptr)
type PFNGLMULTITEXCOORD4DARBPROC as sub(byval target as GLenum, byval s as GLdouble, byval t as GLdouble, byval r as GLdouble, byval q as GLdouble)
type PFNGLMULTITEXCOORD4DVARBPROC as sub(byval target as GLenum, byval v as const GLdouble ptr)
type PFNGLMULTITEXCOORD4FARBPROC as sub(byval target as GLenum, byval s as GLfloat, byval t as GLfloat, byval r as GLfloat, byval q as GLfloat)
type PFNGLMULTITEXCOORD4FVARBPROC as sub(byval target as GLenum, byval v as const GLfloat ptr)
type PFNGLMULTITEXCOORD4IARBPROC as sub(byval target as GLenum, byval s as GLint, byval t as GLint, byval r as GLint, byval q as GLint)
type PFNGLMULTITEXCOORD4IVARBPROC as sub(byval target as GLenum, byval v as const GLint ptr)
type PFNGLMULTITEXCOORD4SARBPROC as sub(byval target as GLenum, byval s as GLshort, byval t as GLshort, byval r as GLshort, byval q as GLshort)
type PFNGLMULTITEXCOORD4SVARBPROC as sub(byval target as GLenum, byval v as const GLshort ptr)


const GL_ARB_occlusion_query = 1
const GL_QUERY_COUNTER_BITS_ARB = &h8864
const GL_CURRENT_QUERY_ARB = &h8865
const GL_QUERY_RESULT_ARB = &h8866
const GL_QUERY_RESULT_AVAILABLE_ARB = &h8867
const GL_SAMPLES_PASSED_ARB = &h8914

type PFNGLGENQUERIESARBPROC as sub(byval n as GLsizei, byval ids as GLuint ptr)
type PFNGLDELETEQUERIESARBPROC as sub(byval n as GLsizei, byval ids as const GLuint ptr)
type PFNGLISQUERYARBPROC as function(byval id as GLuint) as GLboolean
type PFNGLBEGINQUERYARBPROC as sub(byval target as GLenum, byval id as GLuint)
type PFNGLENDQUERYARBPROC as sub(byval target as GLenum)
type PFNGLGETQUERYIVARBPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETQUERYOBJECTIVARBPROC as sub(byval id as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETQUERYOBJECTUIVARBPROC as sub(byval id as GLuint, byval pname as GLenum, byval params as GLuint ptr)


const GL_ARB_occlusion_query2 = 1
const GL_ARB_pipeline_statistics_query = 1
const GL_VERTICES_SUBMITTED_ARB = &h82EE
const GL_PRIMITIVES_SUBMITTED_ARB = &h82EF
const GL_VERTEX_SHADER_INVOCATIONS_ARB = &h82F0
const GL_TESS_CONTROL_SHADER_PATCHES_ARB = &h82F1
const GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = &h82F2
const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = &h82F3
const GL_FRAGMENT_SHADER_INVOCATIONS_ARB = &h82F4
const GL_COMPUTE_SHADER_INVOCATIONS_ARB = &h82F5
const GL_CLIPPING_INPUT_PRIMITIVES_ARB = &h82F6
const GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = &h82F7
const GL_ARB_pixel_buffer_object = 1
const GL_PIXEL_PACK_BUFFER_ARB = &h88EB
const GL_PIXEL_UNPACK_BUFFER_ARB = &h88EC
const GL_PIXEL_PACK_BUFFER_BINDING_ARB = &h88ED
const GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = &h88EF
const GL_ARB_point_parameters = 1
const GL_POINT_SIZE_MIN_ARB = &h8126
const GL_POINT_SIZE_MAX_ARB = &h8127
const GL_POINT_FADE_THRESHOLD_SIZE_ARB = &h8128
const GL_POINT_DISTANCE_ATTENUATION_ARB = &h8129
type PFNGLPOINTPARAMETERFARBPROC as sub(byval pname as GLenum, byval param as GLfloat)
type PFNGLPOINTPARAMETERFVARBPROC as sub(byval pname as GLenum, byval params as const GLfloat ptr)


const GL_ARB_point_sprite = 1
const GL_POINT_SPRITE_ARB = &h8861
const GL_COORD_REPLACE_ARB = &h8862
const GL_ARB_program_interface_query = 1
const GL_ARB_provoking_vertex = 1
const GL_ARB_query_buffer_object = 1
const GL_ARB_robust_buffer_access_behavior = 1
const GL_ARB_robustness = 1
const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = &h00000004
const GL_LOSE_CONTEXT_ON_RESET_ARB = &h8252
const GL_GUILTY_CONTEXT_RESET_ARB = &h8253
const GL_INNOCENT_CONTEXT_RESET_ARB = &h8254
const GL_UNKNOWN_CONTEXT_RESET_ARB = &h8255
const GL_RESET_NOTIFICATION_STRATEGY_ARB = &h8256
const GL_NO_RESET_NOTIFICATION_ARB = &h8261

type PFNGLGETGRAPHICSRESETSTATUSARBPROC as function() as GLenum
type PFNGLGETNTEXIMAGEARBPROC as sub(byval target as GLenum, byval level as GLint, byval format as GLenum, byval type as GLenum, byval bufSize as GLsizei, byval img as any ptr)
type PFNGLREADNPIXELSARBPROC as sub(byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval type as GLenum, byval bufSize as GLsizei, byval data as any ptr)
type PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC as sub(byval target as GLenum, byval lod as GLint, byval bufSize as GLsizei, byval img as any ptr)
type PFNGLGETNUNIFORMFVARBPROC as sub(byval program as GLuint, byval location as GLint, byval bufSize as GLsizei, byval params as GLfloat ptr)
type PFNGLGETNUNIFORMIVARBPROC as sub(byval program as GLuint, byval location as GLint, byval bufSize as GLsizei, byval params as GLint ptr)
type PFNGLGETNUNIFORMUIVARBPROC as sub(byval program as GLuint, byval location as GLint, byval bufSize as GLsizei, byval params as GLuint ptr)
type PFNGLGETNUNIFORMDVARBPROC as sub(byval program as GLuint, byval location as GLint, byval bufSize as GLsizei, byval params as GLdouble ptr)
type PFNGLGETNMAPDVARBPROC as sub(byval target as GLenum, byval query as GLenum, byval bufSize as GLsizei, byval v as GLdouble ptr)
type PFNGLGETNMAPFVARBPROC as sub(byval target as GLenum, byval query as GLenum, byval bufSize as GLsizei, byval v as GLfloat ptr)
type PFNGLGETNMAPIVARBPROC as sub(byval target as GLenum, byval query as GLenum, byval bufSize as GLsizei, byval v as GLint ptr)
type PFNGLGETNPIXELMAPFVARBPROC as sub(byval map as GLenum, byval bufSize as GLsizei, byval values as GLfloat ptr)
type PFNGLGETNPIXELMAPUIVARBPROC as sub(byval map as GLenum, byval bufSize as GLsizei, byval values as GLuint ptr)
type PFNGLGETNPIXELMAPUSVARBPROC as sub(byval map as GLenum, byval bufSize as GLsizei, byval values as GLushort ptr)
type PFNGLGETNPOLYGONSTIPPLEARBPROC as sub(byval bufSize as GLsizei, byval pattern as GLubyte ptr)
type PFNGLGETNCOLORTABLEARBPROC as sub(byval target as GLenum, byval format as GLenum, byval type as GLenum, byval bufSize as GLsizei, byval table as any ptr)
type PFNGLGETNCONVOLUTIONFILTERARBPROC as sub(byval target as GLenum, byval format as GLenum, byval type as GLenum, byval bufSize as GLsizei, byval image as any ptr)
type PFNGLGETNSEPARABLEFILTERARBPROC as sub(byval target as GLenum, byval format as GLenum, byval type as GLenum, byval rowBufSize as GLsizei, byval row as any ptr, byval columnBufSize as GLsizei, byval column as any ptr, byval span as any ptr)
type PFNGLGETNHISTOGRAMARBPROC as sub(byval target as GLenum, byval reset as GLboolean, byval format as GLenum, byval type as GLenum, byval bufSize as GLsizei, byval values as any ptr)
type PFNGLGETNMINMAXARBPROC as sub(byval target as GLenum, byval reset as GLboolean, byval format as GLenum, byval type as GLenum, byval bufSize as GLsizei, byval values as any ptr)


const GL_ARB_robustness_isolation = 1
const GL_ARB_sample_shading = 1
const GL_SAMPLE_SHADING_ARB = &h8C36
const GL_MIN_SAMPLE_SHADING_VALUE_ARB = &h8C37
type PFNGLMINSAMPLESHADINGARBPROC as sub(byval value as GLfloat)


const GL_ARB_sampler_objects = 1
const GL_ARB_seamless_cube_map = 1
const GL_ARB_seamless_cubemap_per_texture = 1
const GL_ARB_separate_shader_objects = 1
const GL_ARB_shader_atomic_counters = 1
const GL_ARB_shader_bit_encoding = 1
const GL_ARB_shader_draw_parameters = 1
const GL_ARB_shader_group_vote = 1
const GL_ARB_shader_image_load_store = 1
const GL_ARB_shader_image_size = 1
const GL_ARB_shader_objects = 1
type GLhandleARB as ulong
type GLcharARB as zstring
const GL_PROGRAM_OBJECT_ARB = &h8B40
const GL_SHADER_OBJECT_ARB = &h8B48
const GL_OBJECT_TYPE_ARB = &h8B4E
const GL_OBJECT_SUBTYPE_ARB = &h8B4F
const GL_FLOAT_VEC2_ARB = &h8B50
const GL_FLOAT_VEC3_ARB = &h8B51
const GL_FLOAT_VEC4_ARB = &h8B52
const GL_INT_VEC2_ARB = &h8B53
const GL_INT_VEC3_ARB = &h8B54
const GL_INT_VEC4_ARB = &h8B55
const GL_BOOL_ARB = &h8B56
const GL_BOOL_VEC2_ARB = &h8B57
const GL_BOOL_VEC3_ARB = &h8B58
const GL_BOOL_VEC4_ARB = &h8B59
const GL_FLOAT_MAT2_ARB = &h8B5A
const GL_FLOAT_MAT3_ARB = &h8B5B
const GL_FLOAT_MAT4_ARB = &h8B5C
const GL_SAMPLER_1D_ARB = &h8B5D
const GL_SAMPLER_2D_ARB = &h8B5E
const GL_SAMPLER_3D_ARB = &h8B5F
const GL_SAMPLER_CUBE_ARB = &h8B60
const GL_SAMPLER_1D_SHADOW_ARB = &h8B61
const GL_SAMPLER_2D_SHADOW_ARB = &h8B62
const GL_SAMPLER_2D_RECT_ARB = &h8B63
const GL_SAMPLER_2D_RECT_SHADOW_ARB = &h8B64
const GL_OBJECT_DELETE_STATUS_ARB = &h8B80
const GL_OBJECT_COMPILE_STATUS_ARB = &h8B81
const GL_OBJECT_LINK_STATUS_ARB = &h8B82
const GL_OBJECT_VALIDATE_STATUS_ARB = &h8B83
const GL_OBJECT_INFO_LOG_LENGTH_ARB = &h8B84
const GL_OBJECT_ATTACHED_OBJECTS_ARB = &h8B85
const GL_OBJECT_ACTIVE_UNIFORMS_ARB = &h8B86
const GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = &h8B87
const GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = &h8B88

type PFNGLDELETEOBJECTARBPROC as sub(byval obj as GLhandleARB)
type PFNGLGETHANDLEARBPROC as function(byval pname as GLenum) as GLhandleARB
type PFNGLDETACHOBJECTARBPROC as sub(byval containerObj as GLhandleARB, byval attachedObj as GLhandleARB)
type PFNGLCREATESHADEROBJECTARBPROC as function(byval shaderType as GLenum) as GLhandleARB
type PFNGLSHADERSOURCEARBPROC as sub(byval shaderObj as GLhandleARB, byval count as GLsizei, byval string as const GLcharARB ptr ptr, byval length as const GLint ptr)
type PFNGLCOMPILESHADERARBPROC as sub(byval shaderObj as GLhandleARB)
type PFNGLCREATEPROGRAMOBJECTARBPROC as function() as GLhandleARB
type PFNGLATTACHOBJECTARBPROC as sub(byval containerObj as GLhandleARB, byval obj as GLhandleARB)
type PFNGLLINKPROGRAMARBPROC as sub(byval programObj as GLhandleARB)
type PFNGLUSEPROGRAMOBJECTARBPROC as sub(byval programObj as GLhandleARB)
type PFNGLVALIDATEPROGRAMARBPROC as sub(byval programObj as GLhandleARB)
type PFNGLUNIFORM1FARBPROC as sub(byval location as GLint, byval v0 as GLfloat)
type PFNGLUNIFORM2FARBPROC as sub(byval location as GLint, byval v0 as GLfloat, byval v1 as GLfloat)
type PFNGLUNIFORM3FARBPROC as sub(byval location as GLint, byval v0 as GLfloat, byval v1 as GLfloat, byval v2 as GLfloat)
type PFNGLUNIFORM4FARBPROC as sub(byval location as GLint, byval v0 as GLfloat, byval v1 as GLfloat, byval v2 as GLfloat, byval v3 as GLfloat)
type PFNGLUNIFORM1IARBPROC as sub(byval location as GLint, byval v0 as GLint)
type PFNGLUNIFORM2IARBPROC as sub(byval location as GLint, byval v0 as GLint, byval v1 as GLint)
type PFNGLUNIFORM3IARBPROC as sub(byval location as GLint, byval v0 as GLint, byval v1 as GLint, byval v2 as GLint)
type PFNGLUNIFORM4IARBPROC as sub(byval location as GLint, byval v0 as GLint, byval v1 as GLint, byval v2 as GLint, byval v3 as GLint)
type PFNGLUNIFORM1FVARBPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLfloat ptr)
type PFNGLUNIFORM2FVARBPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLfloat ptr)
type PFNGLUNIFORM3FVARBPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLfloat ptr)
type PFNGLUNIFORM4FVARBPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLfloat ptr)
type PFNGLUNIFORM1IVARBPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLint ptr)
type PFNGLUNIFORM2IVARBPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLint ptr)
type PFNGLUNIFORM3IVARBPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLint ptr)
type PFNGLUNIFORM4IVARBPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLint ptr)
type PFNGLUNIFORMMATRIX2FVARBPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLUNIFORMMATRIX3FVARBPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLUNIFORMMATRIX4FVARBPROC as sub(byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLGETOBJECTPARAMETERFVARBPROC as sub(byval obj as GLhandleARB, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETOBJECTPARAMETERIVARBPROC as sub(byval obj as GLhandleARB, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETINFOLOGARBPROC as sub(byval obj as GLhandleARB, byval maxLength as GLsizei, byval length as GLsizei ptr, byval infoLog as GLcharARB ptr)
type PFNGLGETATTACHEDOBJECTSARBPROC as sub(byval containerObj as GLhandleARB, byval maxCount as GLsizei, byval count as GLsizei ptr, byval obj as GLhandleARB ptr)
type PFNGLGETUNIFORMLOCATIONARBPROC as function(byval programObj as GLhandleARB, byval name as const GLcharARB ptr) as GLint
type PFNGLGETACTIVEUNIFORMARBPROC as sub(byval programObj as GLhandleARB, byval index as GLuint, byval maxLength as GLsizei, byval length as GLsizei ptr, byval size as GLint ptr, byval type as GLenum ptr, byval name as GLcharARB ptr)
type PFNGLGETUNIFORMFVARBPROC as sub(byval programObj as GLhandleARB, byval location as GLint, byval params as GLfloat ptr)
type PFNGLGETUNIFORMIVARBPROC as sub(byval programObj as GLhandleARB, byval location as GLint, byval params as GLint ptr)
type PFNGLGETSHADERSOURCEARBPROC as sub(byval obj as GLhandleARB, byval maxLength as GLsizei, byval length as GLsizei ptr, byval source as GLcharARB ptr)


const GL_ARB_shader_precision = 1
const GL_ARB_shader_stencil_export = 1
const GL_ARB_shader_storage_buffer_object = 1
const GL_ARB_shader_subroutine = 1
const GL_ARB_shader_texture_image_samples = 1
const GL_ARB_shader_texture_lod = 1
const GL_ARB_shading_language_100 = 1
const GL_SHADING_LANGUAGE_VERSION_ARB = &h8B8C
const GL_ARB_shading_language_420pack = 1
const GL_ARB_shading_language_include = 1
const GL_SHADER_INCLUDE_ARB = &h8DAE
const GL_NAMED_STRING_LENGTH_ARB = &h8DE9
const GL_NAMED_STRING_TYPE_ARB = &h8DEA

type PFNGLNAMEDSTRINGARBPROC as sub(byval type as GLenum, byval namelen as GLint, byval name as const GLchar ptr, byval stringlen as GLint, byval string as const GLchar ptr)
type PFNGLDELETENAMEDSTRINGARBPROC as sub(byval namelen as GLint, byval name as const GLchar ptr)
type PFNGLCOMPILESHADERINCLUDEARBPROC as sub(byval shader as GLuint, byval count as GLsizei, byval path as const GLchar const ptr ptr, byval length as const GLint ptr)
type PFNGLISNAMEDSTRINGARBPROC as function(byval namelen as GLint, byval name as const GLchar ptr) as GLboolean
type PFNGLGETNAMEDSTRINGARBPROC as sub(byval namelen as GLint, byval name as const GLchar ptr, byval bufSize as GLsizei, byval stringlen as GLint ptr, byval string as GLchar ptr)
type PFNGLGETNAMEDSTRINGIVARBPROC as sub(byval namelen as GLint, byval name as const GLchar ptr, byval pname as GLenum, byval params as GLint ptr)


const GL_ARB_shading_language_packing = 1
const GL_ARB_shadow = 1
const GL_TEXTURE_COMPARE_MODE_ARB = &h884C
const GL_TEXTURE_COMPARE_FUNC_ARB = &h884D
const GL_COMPARE_R_TO_TEXTURE_ARB = &h884E
const GL_ARB_shadow_ambient = 1
const GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = &h80BF
const GL_ARB_sparse_buffer = 1
const GL_SPARSE_STORAGE_BIT_ARB = &h0400
const GL_SPARSE_BUFFER_PAGE_SIZE_ARB = &h82F8

type PFNGLBUFFERPAGECOMMITMENTARBPROC as sub(byval target as GLenum, byval offset as GLintptr, byval size as GLsizeiptr, byval commit as GLboolean)
type PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC as sub(byval buffer as GLuint, byval offset as GLintptr, byval size as GLsizeiptr, byval commit as GLboolean)
type PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC as sub(byval buffer as GLuint, byval offset as GLintptr, byval size as GLsizeiptr, byval commit as GLboolean)


const GL_ARB_sparse_texture = 1
const GL_TEXTURE_SPARSE_ARB = &h91A6
const GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = &h91A7
const GL_NUM_SPARSE_LEVELS_ARB = &h91AA
const GL_NUM_VIRTUAL_PAGE_SIZES_ARB = &h91A8
const GL_VIRTUAL_PAGE_SIZE_X_ARB = &h9195
const GL_VIRTUAL_PAGE_SIZE_Y_ARB = &h9196
const GL_VIRTUAL_PAGE_SIZE_Z_ARB = &h9197
const GL_MAX_SPARSE_TEXTURE_SIZE_ARB = &h9198
const GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = &h9199
const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = &h919A
const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = &h91A9
type PFNGLTEXPAGECOMMITMENTARBPROC as sub(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval resident as GLboolean)


const GL_ARB_stencil_texturing = 1
const GL_ARB_sync = 1
const GL_ARB_tessellation_shader = 1
const GL_ARB_texture_barrier = 1
const GL_ARB_texture_border_clamp = 1
const GL_CLAMP_TO_BORDER_ARB = &h812D
const GL_ARB_texture_buffer_object = 1
const GL_TEXTURE_BUFFER_ARB = &h8C2A
const GL_MAX_TEXTURE_BUFFER_SIZE_ARB = &h8C2B
const GL_TEXTURE_BINDING_BUFFER_ARB = &h8C2C
const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = &h8C2D
const GL_TEXTURE_BUFFER_FORMAT_ARB = &h8C2E
type PFNGLTEXBUFFERARBPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval buffer as GLuint)


const GL_ARB_texture_buffer_object_rgb32 = 1
const GL_ARB_texture_buffer_range = 1
const GL_ARB_texture_compression = 1
const GL_COMPRESSED_ALPHA_ARB = &h84E9
const GL_COMPRESSED_LUMINANCE_ARB = &h84EA
const GL_COMPRESSED_LUMINANCE_ALPHA_ARB = &h84EB
const GL_COMPRESSED_INTENSITY_ARB = &h84EC
const GL_COMPRESSED_RGB_ARB = &h84ED
const GL_COMPRESSED_RGBA_ARB = &h84EE
const GL_TEXTURE_COMPRESSION_HINT_ARB = &h84EF
const GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = &h86A0
const GL_TEXTURE_COMPRESSED_ARB = &h86A1
const GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = &h86A2
const GL_COMPRESSED_TEXTURE_FORMATS_ARB = &h86A3

type PFNGLCOMPRESSEDTEXIMAGE3DARBPROC as sub(byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval border as GLint, byval imageSize as GLsizei, byval data as const any ptr)
type PFNGLCOMPRESSEDTEXIMAGE2DARBPROC as sub(byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval border as GLint, byval imageSize as GLsizei, byval data as const any ptr)
type PFNGLCOMPRESSEDTEXIMAGE1DARBPROC as sub(byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval width as GLsizei, byval border as GLint, byval imageSize as GLsizei, byval data as const any ptr)
type PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC as sub(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval format as GLenum, byval imageSize as GLsizei, byval data as const any ptr)
type PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC as sub(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval imageSize as GLsizei, byval data as const any ptr)
type PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC as sub(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval width as GLsizei, byval format as GLenum, byval imageSize as GLsizei, byval data as const any ptr)
type PFNGLGETCOMPRESSEDTEXIMAGEARBPROC as sub(byval target as GLenum, byval level as GLint, byval img as any ptr)


const GL_ARB_texture_compression_bptc = 1
const GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = &h8E8C
const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = &h8E8D
const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = &h8E8E
const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = &h8E8F
const GL_ARB_texture_compression_rgtc = 1
const GL_ARB_texture_cube_map = 1
const GL_NORMAL_MAP_ARB = &h8511
const GL_REFLECTION_MAP_ARB = &h8512
const GL_TEXTURE_CUBE_MAP_ARB = &h8513
const GL_TEXTURE_BINDING_CUBE_MAP_ARB = &h8514
const GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = &h8515
const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = &h8516
const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = &h8517
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = &h8518
const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = &h8519
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = &h851A
const GL_PROXY_TEXTURE_CUBE_MAP_ARB = &h851B
const GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = &h851C
const GL_ARB_texture_cube_map_array = 1
const GL_TEXTURE_CUBE_MAP_ARRAY_ARB = &h9009
const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = &h900A
const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = &h900B
const GL_SAMPLER_CUBE_MAP_ARRAY_ARB = &h900C
const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = &h900D
const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = &h900E
const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = &h900F
const GL_ARB_texture_env_add = 1
const GL_ARB_texture_env_combine = 1
const GL_COMBINE_ARB = &h8570
const GL_COMBINE_RGB_ARB = &h8571
const GL_COMBINE_ALPHA_ARB = &h8572
const GL_SOURCE0_RGB_ARB = &h8580
const GL_SOURCE1_RGB_ARB = &h8581
const GL_SOURCE2_RGB_ARB = &h8582
const GL_SOURCE0_ALPHA_ARB = &h8588
const GL_SOURCE1_ALPHA_ARB = &h8589
const GL_SOURCE2_ALPHA_ARB = &h858A
const GL_OPERAND0_RGB_ARB = &h8590
const GL_OPERAND1_RGB_ARB = &h8591
const GL_OPERAND2_RGB_ARB = &h8592
const GL_OPERAND0_ALPHA_ARB = &h8598
const GL_OPERAND1_ALPHA_ARB = &h8599
const GL_OPERAND2_ALPHA_ARB = &h859A
const GL_RGB_SCALE_ARB = &h8573
const GL_ADD_SIGNED_ARB = &h8574
const GL_INTERPOLATE_ARB = &h8575
const GL_SUBTRACT_ARB = &h84E7
const GL_CONSTANT_ARB = &h8576
const GL_PRIMARY_COLOR_ARB = &h8577
const GL_PREVIOUS_ARB = &h8578
const GL_ARB_texture_env_crossbar = 1
const GL_ARB_texture_env_dot3 = 1
const GL_DOT3_RGB_ARB = &h86AE
const GL_DOT3_RGBA_ARB = &h86AF
const GL_ARB_texture_float = 1
const GL_TEXTURE_RED_TYPE_ARB = &h8C10
const GL_TEXTURE_GREEN_TYPE_ARB = &h8C11
const GL_TEXTURE_BLUE_TYPE_ARB = &h8C12
const GL_TEXTURE_ALPHA_TYPE_ARB = &h8C13
const GL_TEXTURE_LUMINANCE_TYPE_ARB = &h8C14
const GL_TEXTURE_INTENSITY_TYPE_ARB = &h8C15
const GL_TEXTURE_DEPTH_TYPE_ARB = &h8C16
const GL_UNSIGNED_NORMALIZED_ARB = &h8C17
const GL_RGBA32F_ARB = &h8814
const GL_RGB32F_ARB = &h8815
const GL_ALPHA32F_ARB = &h8816
const GL_INTENSITY32F_ARB = &h8817
const GL_LUMINANCE32F_ARB = &h8818
const GL_LUMINANCE_ALPHA32F_ARB = &h8819
const GL_RGBA16F_ARB = &h881A
const GL_RGB16F_ARB = &h881B
const GL_ALPHA16F_ARB = &h881C
const GL_INTENSITY16F_ARB = &h881D
const GL_LUMINANCE16F_ARB = &h881E
const GL_LUMINANCE_ALPHA16F_ARB = &h881F
const GL_ARB_texture_gather = 1
const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = &h8E5E
const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = &h8E5F
const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = &h8F9F
const GL_ARB_texture_mirror_clamp_to_edge = 1
const GL_ARB_texture_mirrored_repeat = 1
const GL_MIRRORED_REPEAT_ARB = &h8370
const GL_ARB_texture_multisample = 1
const GL_ARB_texture_non_power_of_two = 1
const GL_ARB_texture_query_levels = 1
const GL_ARB_texture_query_lod = 1
const GL_ARB_texture_rectangle = 1
const GL_TEXTURE_RECTANGLE_ARB = &h84F5
const GL_TEXTURE_BINDING_RECTANGLE_ARB = &h84F6
const GL_PROXY_TEXTURE_RECTANGLE_ARB = &h84F7
const GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = &h84F8
const GL_ARB_texture_rg = 1
const GL_ARB_texture_rgb10_a2ui = 1
const GL_ARB_texture_stencil8 = 1
const GL_ARB_texture_storage = 1
const GL_ARB_texture_storage_multisample = 1
const GL_ARB_texture_swizzle = 1
const GL_ARB_texture_view = 1
const GL_ARB_timer_query = 1
const GL_ARB_transform_feedback2 = 1
const GL_ARB_transform_feedback3 = 1
const GL_ARB_transform_feedback_instanced = 1
const GL_ARB_transform_feedback_overflow_query = 1
const GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = &h82EC
const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = &h82ED
const GL_ARB_transpose_matrix = 1
const GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = &h84E3
const GL_TRANSPOSE_PROJECTION_MATRIX_ARB = &h84E4
const GL_TRANSPOSE_TEXTURE_MATRIX_ARB = &h84E5
const GL_TRANSPOSE_COLOR_MATRIX_ARB = &h84E6

type PFNGLLOADTRANSPOSEMATRIXFARBPROC as sub(byval m as const GLfloat ptr)
type PFNGLLOADTRANSPOSEMATRIXDARBPROC as sub(byval m as const GLdouble ptr)
type PFNGLMULTTRANSPOSEMATRIXFARBPROC as sub(byval m as const GLfloat ptr)
type PFNGLMULTTRANSPOSEMATRIXDARBPROC as sub(byval m as const GLdouble ptr)


const GL_ARB_uniform_buffer_object = 1
const GL_ARB_vertex_array_bgra = 1
const GL_ARB_vertex_array_object = 1
const GL_ARB_vertex_attrib_64bit = 1
const GL_ARB_vertex_attrib_binding = 1
const GL_ARB_vertex_blend = 1
const GL_MAX_VERTEX_UNITS_ARB = &h86A4
const GL_ACTIVE_VERTEX_UNITS_ARB = &h86A5
const GL_WEIGHT_SUM_UNITY_ARB = &h86A6
const GL_VERTEX_BLEND_ARB = &h86A7
const GL_CURRENT_WEIGHT_ARB = &h86A8
const GL_WEIGHT_ARRAY_TYPE_ARB = &h86A9
const GL_WEIGHT_ARRAY_STRIDE_ARB = &h86AA
const GL_WEIGHT_ARRAY_SIZE_ARB = &h86AB
const GL_WEIGHT_ARRAY_POINTER_ARB = &h86AC
const GL_WEIGHT_ARRAY_ARB = &h86AD
const GL_MODELVIEW0_ARB = &h1700
const GL_MODELVIEW1_ARB = &h850A
const GL_MODELVIEW2_ARB = &h8722
const GL_MODELVIEW3_ARB = &h8723
const GL_MODELVIEW4_ARB = &h8724
const GL_MODELVIEW5_ARB = &h8725
const GL_MODELVIEW6_ARB = &h8726
const GL_MODELVIEW7_ARB = &h8727
const GL_MODELVIEW8_ARB = &h8728
const GL_MODELVIEW9_ARB = &h8729
const GL_MODELVIEW10_ARB = &h872A
const GL_MODELVIEW11_ARB = &h872B
const GL_MODELVIEW12_ARB = &h872C
const GL_MODELVIEW13_ARB = &h872D
const GL_MODELVIEW14_ARB = &h872E
const GL_MODELVIEW15_ARB = &h872F
const GL_MODELVIEW16_ARB = &h8730
const GL_MODELVIEW17_ARB = &h8731
const GL_MODELVIEW18_ARB = &h8732
const GL_MODELVIEW19_ARB = &h8733
const GL_MODELVIEW20_ARB = &h8734
const GL_MODELVIEW21_ARB = &h8735
const GL_MODELVIEW22_ARB = &h8736
const GL_MODELVIEW23_ARB = &h8737
const GL_MODELVIEW24_ARB = &h8738
const GL_MODELVIEW25_ARB = &h8739
const GL_MODELVIEW26_ARB = &h873A
const GL_MODELVIEW27_ARB = &h873B
const GL_MODELVIEW28_ARB = &h873C
const GL_MODELVIEW29_ARB = &h873D
const GL_MODELVIEW30_ARB = &h873E
const GL_MODELVIEW31_ARB = &h873F

type PFNGLWEIGHTBVARBPROC as sub(byval size as GLint, byval weights as const GLbyte ptr)
type PFNGLWEIGHTSVARBPROC as sub(byval size as GLint, byval weights as const GLshort ptr)
type PFNGLWEIGHTIVARBPROC as sub(byval size as GLint, byval weights as const GLint ptr)
type PFNGLWEIGHTFVARBPROC as sub(byval size as GLint, byval weights as const GLfloat ptr)
type PFNGLWEIGHTDVARBPROC as sub(byval size as GLint, byval weights as const GLdouble ptr)
type PFNGLWEIGHTUBVARBPROC as sub(byval size as GLint, byval weights as const GLubyte ptr)
type PFNGLWEIGHTUSVARBPROC as sub(byval size as GLint, byval weights as const GLushort ptr)
type PFNGLWEIGHTUIVARBPROC as sub(byval size as GLint, byval weights as const GLuint ptr)
type PFNGLWEIGHTPOINTERARBPROC as sub(byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval pointer as const any ptr)
type PFNGLVERTEXBLENDARBPROC as sub(byval count as GLint)


const GL_ARB_vertex_buffer_object = 1
type GLsizeiptrARB as integer
type GLintptrARB as integer
const GL_BUFFER_SIZE_ARB = &h8764
const GL_BUFFER_USAGE_ARB = &h8765
const GL_ARRAY_BUFFER_ARB = &h8892
const GL_ELEMENT_ARRAY_BUFFER_ARB = &h8893
const GL_ARRAY_BUFFER_BINDING_ARB = &h8894
const GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = &h8895
const GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = &h8896
const GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = &h8897
const GL_COLOR_ARRAY_BUFFER_BINDING_ARB = &h8898
const GL_INDEX_ARRAY_BUFFER_BINDING_ARB = &h8899
const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = &h889A
const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = &h889B
const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = &h889C
const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = &h889D
const GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = &h889E
const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = &h889F
const GL_READ_ONLY_ARB = &h88B8
const GL_WRITE_ONLY_ARB = &h88B9
const GL_READ_WRITE_ARB = &h88BA
const GL_BUFFER_ACCESS_ARB = &h88BB
const GL_BUFFER_MAPPED_ARB = &h88BC
const GL_BUFFER_MAP_POINTER_ARB = &h88BD
const GL_STREAM_DRAW_ARB = &h88E0
const GL_STREAM_READ_ARB = &h88E1
const GL_STREAM_COPY_ARB = &h88E2
const GL_STATIC_DRAW_ARB = &h88E4
const GL_STATIC_READ_ARB = &h88E5
const GL_STATIC_COPY_ARB = &h88E6
const GL_DYNAMIC_DRAW_ARB = &h88E8
const GL_DYNAMIC_READ_ARB = &h88E9
const GL_DYNAMIC_COPY_ARB = &h88EA

type PFNGLBINDBUFFERARBPROC as sub(byval target as GLenum, byval buffer as GLuint)
type PFNGLDELETEBUFFERSARBPROC as sub(byval n as GLsizei, byval buffers as const GLuint ptr)
type PFNGLGENBUFFERSARBPROC as sub(byval n as GLsizei, byval buffers as GLuint ptr)
type PFNGLISBUFFERARBPROC as function(byval buffer as GLuint) as GLboolean
type PFNGLBUFFERDATAARBPROC as sub(byval target as GLenum, byval size as GLsizeiptrARB, byval data as const any ptr, byval usage as GLenum)
type PFNGLBUFFERSUBDATAARBPROC as sub(byval target as GLenum, byval offset as GLintptrARB, byval size as GLsizeiptrARB, byval data as const any ptr)
type PFNGLGETBUFFERSUBDATAARBPROC as sub(byval target as GLenum, byval offset as GLintptrARB, byval size as GLsizeiptrARB, byval data as any ptr)
type PFNGLMAPBUFFERARBPROC as function(byval target as GLenum, byval access as GLenum) as any ptr
type PFNGLUNMAPBUFFERARBPROC as function(byval target as GLenum) as GLboolean
type PFNGLGETBUFFERPARAMETERIVARBPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETBUFFERPOINTERVARBPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as any ptr ptr)


const GL_ARB_vertex_program = 1
const GL_COLOR_SUM_ARB = &h8458
const GL_VERTEX_PROGRAM_ARB = &h8620
const GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = &h8622
const GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = &h8623
const GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = &h8624
const GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = &h8625
const GL_CURRENT_VERTEX_ATTRIB_ARB = &h8626
const GL_VERTEX_PROGRAM_POINT_SIZE_ARB = &h8642
const GL_VERTEX_PROGRAM_TWO_SIDE_ARB = &h8643
const GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = &h8645
const GL_MAX_VERTEX_ATTRIBS_ARB = &h8869
const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = &h886A
const GL_PROGRAM_ADDRESS_REGISTERS_ARB = &h88B0
const GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = &h88B1
const GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = &h88B2
const GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = &h88B3

type PFNGLVERTEXATTRIB1DARBPROC as sub(byval index as GLuint, byval x as GLdouble)
type PFNGLVERTEXATTRIB1DVARBPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIB1FARBPROC as sub(byval index as GLuint, byval x as GLfloat)
type PFNGLVERTEXATTRIB1FVARBPROC as sub(byval index as GLuint, byval v as const GLfloat ptr)
type PFNGLVERTEXATTRIB1SARBPROC as sub(byval index as GLuint, byval x as GLshort)
type PFNGLVERTEXATTRIB1SVARBPROC as sub(byval index as GLuint, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIB2DARBPROC as sub(byval index as GLuint, byval x as GLdouble, byval y as GLdouble)
type PFNGLVERTEXATTRIB2DVARBPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIB2FARBPROC as sub(byval index as GLuint, byval x as GLfloat, byval y as GLfloat)
type PFNGLVERTEXATTRIB2FVARBPROC as sub(byval index as GLuint, byval v as const GLfloat ptr)
type PFNGLVERTEXATTRIB2SARBPROC as sub(byval index as GLuint, byval x as GLshort, byval y as GLshort)
type PFNGLVERTEXATTRIB2SVARBPROC as sub(byval index as GLuint, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIB3DARBPROC as sub(byval index as GLuint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
type PFNGLVERTEXATTRIB3DVARBPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIB3FARBPROC as sub(byval index as GLuint, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLVERTEXATTRIB3FVARBPROC as sub(byval index as GLuint, byval v as const GLfloat ptr)
type PFNGLVERTEXATTRIB3SARBPROC as sub(byval index as GLuint, byval x as GLshort, byval y as GLshort, byval z as GLshort)
type PFNGLVERTEXATTRIB3SVARBPROC as sub(byval index as GLuint, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIB4NBVARBPROC as sub(byval index as GLuint, byval v as const GLbyte ptr)
type PFNGLVERTEXATTRIB4NIVARBPROC as sub(byval index as GLuint, byval v as const GLint ptr)
type PFNGLVERTEXATTRIB4NSVARBPROC as sub(byval index as GLuint, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIB4NUBARBPROC as sub(byval index as GLuint, byval x as GLubyte, byval y as GLubyte, byval z as GLubyte, byval w as GLubyte)
type PFNGLVERTEXATTRIB4NUBVARBPROC as sub(byval index as GLuint, byval v as const GLubyte ptr)
type PFNGLVERTEXATTRIB4NUIVARBPROC as sub(byval index as GLuint, byval v as const GLuint ptr)
type PFNGLVERTEXATTRIB4NUSVARBPROC as sub(byval index as GLuint, byval v as const GLushort ptr)
type PFNGLVERTEXATTRIB4BVARBPROC as sub(byval index as GLuint, byval v as const GLbyte ptr)
type PFNGLVERTEXATTRIB4DARBPROC as sub(byval index as GLuint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble, byval w as GLdouble)
type PFNGLVERTEXATTRIB4DVARBPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIB4FARBPROC as sub(byval index as GLuint, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat, byval w as GLfloat)
type PFNGLVERTEXATTRIB4FVARBPROC as sub(byval index as GLuint, byval v as const GLfloat ptr)
type PFNGLVERTEXATTRIB4IVARBPROC as sub(byval index as GLuint, byval v as const GLint ptr)
type PFNGLVERTEXATTRIB4SARBPROC as sub(byval index as GLuint, byval x as GLshort, byval y as GLshort, byval z as GLshort, byval w as GLshort)
type PFNGLVERTEXATTRIB4SVARBPROC as sub(byval index as GLuint, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIB4UBVARBPROC as sub(byval index as GLuint, byval v as const GLubyte ptr)
type PFNGLVERTEXATTRIB4UIVARBPROC as sub(byval index as GLuint, byval v as const GLuint ptr)
type PFNGLVERTEXATTRIB4USVARBPROC as sub(byval index as GLuint, byval v as const GLushort ptr)
type PFNGLVERTEXATTRIBPOINTERARBPROC as sub(byval index as GLuint, byval size as GLint, byval type as GLenum, byval normalized as GLboolean, byval stride as GLsizei, byval pointer as const any ptr)
type PFNGLENABLEVERTEXATTRIBARRAYARBPROC as sub(byval index as GLuint)
type PFNGLDISABLEVERTEXATTRIBARRAYARBPROC as sub(byval index as GLuint)
type PFNGLGETVERTEXATTRIBDVARBPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLdouble ptr)
type PFNGLGETVERTEXATTRIBFVARBPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETVERTEXATTRIBIVARBPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETVERTEXATTRIBPOINTERVARBPROC as sub(byval index as GLuint, byval pname as GLenum, byval pointer as any ptr ptr)


const GL_ARB_vertex_shader = 1
const GL_VERTEX_SHADER_ARB = &h8B31
const GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = &h8B4A
const GL_MAX_VARYING_FLOATS_ARB = &h8B4B
const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = &h8B4C
const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = &h8B4D
const GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = &h8B89
const GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = &h8B8A

type PFNGLBINDATTRIBLOCATIONARBPROC as sub(byval programObj as GLhandleARB, byval index as GLuint, byval name as const GLcharARB ptr)
type PFNGLGETACTIVEATTRIBARBPROC as sub(byval programObj as GLhandleARB, byval index as GLuint, byval maxLength as GLsizei, byval length as GLsizei ptr, byval size as GLint ptr, byval type as GLenum ptr, byval name as GLcharARB ptr)
type PFNGLGETATTRIBLOCATIONARBPROC as function(byval programObj as GLhandleARB, byval name as const GLcharARB ptr) as GLint


const GL_ARB_vertex_type_10f_11f_11f_rev = 1
const GL_ARB_vertex_type_2_10_10_10_rev = 1
const GL_ARB_viewport_array = 1
const GL_ARB_window_pos = 1

type PFNGLWINDOWPOS2DARBPROC as sub(byval x as GLdouble, byval y as GLdouble)
type PFNGLWINDOWPOS2DVARBPROC as sub(byval v as const GLdouble ptr)
type PFNGLWINDOWPOS2FARBPROC as sub(byval x as GLfloat, byval y as GLfloat)
type PFNGLWINDOWPOS2FVARBPROC as sub(byval v as const GLfloat ptr)
type PFNGLWINDOWPOS2IARBPROC as sub(byval x as GLint, byval y as GLint)
type PFNGLWINDOWPOS2IVARBPROC as sub(byval v as const GLint ptr)
type PFNGLWINDOWPOS2SARBPROC as sub(byval x as GLshort, byval y as GLshort)
type PFNGLWINDOWPOS2SVARBPROC as sub(byval v as const GLshort ptr)
type PFNGLWINDOWPOS3DARBPROC as sub(byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
type PFNGLWINDOWPOS3DVARBPROC as sub(byval v as const GLdouble ptr)
type PFNGLWINDOWPOS3FARBPROC as sub(byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLWINDOWPOS3FVARBPROC as sub(byval v as const GLfloat ptr)
type PFNGLWINDOWPOS3IARBPROC as sub(byval x as GLint, byval y as GLint, byval z as GLint)
type PFNGLWINDOWPOS3IVARBPROC as sub(byval v as const GLint ptr)
type PFNGLWINDOWPOS3SARBPROC as sub(byval x as GLshort, byval y as GLshort, byval z as GLshort)
type PFNGLWINDOWPOS3SVARBPROC as sub(byval v as const GLshort ptr)


const GL_KHR_blend_equation_advanced = 1
const GL_MULTIPLY_KHR = &h9294
const GL_SCREEN_KHR = &h9295
const GL_OVERLAY_KHR = &h9296
const GL_DARKEN_KHR = &h9297
const GL_LIGHTEN_KHR = &h9298
const GL_COLORDODGE_KHR = &h9299
const GL_COLORBURN_KHR = &h929A
const GL_HARDLIGHT_KHR = &h929B
const GL_SOFTLIGHT_KHR = &h929C
const GL_DIFFERENCE_KHR = &h929E
const GL_EXCLUSION_KHR = &h92A0
const GL_HSL_HUE_KHR = &h92AD
const GL_HSL_SATURATION_KHR = &h92AE
const GL_HSL_COLOR_KHR = &h92AF
const GL_HSL_LUMINOSITY_KHR = &h92B0
type PFNGLBLENDBARRIERKHRPROC as sub()


const GL_KHR_blend_equation_advanced_coherent = 1
const GL_BLEND_ADVANCED_COHERENT_KHR = &h9285
const GL_KHR_context_flush_control = 1
const GL_KHR_debug = 1
const GL_KHR_robust_buffer_access_behavior = 1
const GL_KHR_robustness = 1
const GL_CONTEXT_ROBUST_ACCESS = &h90F3
const GL_KHR_texture_compression_astc_hdr = 1
const GL_COMPRESSED_RGBA_ASTC_4x4_KHR = &h93B0
const GL_COMPRESSED_RGBA_ASTC_5x4_KHR = &h93B1
const GL_COMPRESSED_RGBA_ASTC_5x5_KHR = &h93B2
const GL_COMPRESSED_RGBA_ASTC_6x5_KHR = &h93B3
const GL_COMPRESSED_RGBA_ASTC_6x6_KHR = &h93B4
const GL_COMPRESSED_RGBA_ASTC_8x5_KHR = &h93B5
const GL_COMPRESSED_RGBA_ASTC_8x6_KHR = &h93B6
const GL_COMPRESSED_RGBA_ASTC_8x8_KHR = &h93B7
const GL_COMPRESSED_RGBA_ASTC_10x5_KHR = &h93B8
const GL_COMPRESSED_RGBA_ASTC_10x6_KHR = &h93B9
const GL_COMPRESSED_RGBA_ASTC_10x8_KHR = &h93BA
const GL_COMPRESSED_RGBA_ASTC_10x10_KHR = &h93BB
const GL_COMPRESSED_RGBA_ASTC_12x10_KHR = &h93BC
const GL_COMPRESSED_RGBA_ASTC_12x12_KHR = &h93BD
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = &h93D0
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = &h93D1
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = &h93D2
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = &h93D3
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = &h93D4
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = &h93D5
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = &h93D6
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = &h93D7
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = &h93D8
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = &h93D9
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = &h93DA
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = &h93DB
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = &h93DC
const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = &h93DD
const GL_KHR_texture_compression_astc_ldr = 1
const GL_OES_byte_coordinates = 1

type PFNGLMULTITEXCOORD1BOESPROC as sub(byval texture as GLenum, byval s as GLbyte)
type PFNGLMULTITEXCOORD1BVOESPROC as sub(byval texture as GLenum, byval coords as const GLbyte ptr)
type PFNGLMULTITEXCOORD2BOESPROC as sub(byval texture as GLenum, byval s as GLbyte, byval t as GLbyte)
type PFNGLMULTITEXCOORD2BVOESPROC as sub(byval texture as GLenum, byval coords as const GLbyte ptr)
type PFNGLMULTITEXCOORD3BOESPROC as sub(byval texture as GLenum, byval s as GLbyte, byval t as GLbyte, byval r as GLbyte)
type PFNGLMULTITEXCOORD3BVOESPROC as sub(byval texture as GLenum, byval coords as const GLbyte ptr)
type PFNGLMULTITEXCOORD4BOESPROC as sub(byval texture as GLenum, byval s as GLbyte, byval t as GLbyte, byval r as GLbyte, byval q as GLbyte)
type PFNGLMULTITEXCOORD4BVOESPROC as sub(byval texture as GLenum, byval coords as const GLbyte ptr)
type PFNGLTEXCOORD1BOESPROC as sub(byval s as GLbyte)
type PFNGLTEXCOORD1BVOESPROC as sub(byval coords as const GLbyte ptr)
type PFNGLTEXCOORD2BOESPROC as sub(byval s as GLbyte, byval t as GLbyte)
type PFNGLTEXCOORD2BVOESPROC as sub(byval coords as const GLbyte ptr)
type PFNGLTEXCOORD3BOESPROC as sub(byval s as GLbyte, byval t as GLbyte, byval r as GLbyte)
type PFNGLTEXCOORD3BVOESPROC as sub(byval coords as const GLbyte ptr)
type PFNGLTEXCOORD4BOESPROC as sub(byval s as GLbyte, byval t as GLbyte, byval r as GLbyte, byval q as GLbyte)
type PFNGLTEXCOORD4BVOESPROC as sub(byval coords as const GLbyte ptr)
type PFNGLVERTEX2BOESPROC as sub(byval x as GLbyte, byval y as GLbyte)
type PFNGLVERTEX2BVOESPROC as sub(byval coords as const GLbyte ptr)
type PFNGLVERTEX3BOESPROC as sub(byval x as GLbyte, byval y as GLbyte, byval z as GLbyte)
type PFNGLVERTEX3BVOESPROC as sub(byval coords as const GLbyte ptr)
type PFNGLVERTEX4BOESPROC as sub(byval x as GLbyte, byval y as GLbyte, byval z as GLbyte, byval w as GLbyte)
type PFNGLVERTEX4BVOESPROC as sub(byval coords as const GLbyte ptr)


const GL_OES_compressed_paletted_texture = 1
const GL_PALETTE4_RGB8_OES = &h8B90
const GL_PALETTE4_RGBA8_OES = &h8B91
const GL_PALETTE4_R5_G6_B5_OES = &h8B92
const GL_PALETTE4_RGBA4_OES = &h8B93
const GL_PALETTE4_RGB5_A1_OES = &h8B94
const GL_PALETTE8_RGB8_OES = &h8B95
const GL_PALETTE8_RGBA8_OES = &h8B96
const GL_PALETTE8_R5_G6_B5_OES = &h8B97
const GL_PALETTE8_RGBA4_OES = &h8B98
const GL_PALETTE8_RGB5_A1_OES = &h8B99
const GL_OES_fixed_point = 1
type GLfixed as GLint
const GL_FIXED_OES = &h140C

type PFNGLALPHAFUNCXOESPROC as sub(byval func as GLenum, byval ref as GLfixed)
type PFNGLCLEARCOLORXOESPROC as sub(byval red as GLfixed, byval green as GLfixed, byval blue as GLfixed, byval alpha as GLfixed)
type PFNGLCLEARDEPTHXOESPROC as sub(byval depth as GLfixed)
type PFNGLCLIPPLANEXOESPROC as sub(byval plane as GLenum, byval equation as const GLfixed ptr)
type PFNGLCOLOR4XOESPROC as sub(byval red as GLfixed, byval green as GLfixed, byval blue as GLfixed, byval alpha as GLfixed)
type PFNGLDEPTHRANGEXOESPROC as sub(byval n as GLfixed, byval f as GLfixed)
type PFNGLFOGXOESPROC as sub(byval pname as GLenum, byval param as GLfixed)
type PFNGLFOGXVOESPROC as sub(byval pname as GLenum, byval param as const GLfixed ptr)
type PFNGLFRUSTUMXOESPROC as sub(byval l as GLfixed, byval r as GLfixed, byval b as GLfixed, byval t as GLfixed, byval n as GLfixed, byval f as GLfixed)
type PFNGLGETCLIPPLANEXOESPROC as sub(byval plane as GLenum, byval equation as GLfixed ptr)
type PFNGLGETFIXEDVOESPROC as sub(byval pname as GLenum, byval params as GLfixed ptr)
type PFNGLGETTEXENVXVOESPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfixed ptr)
type PFNGLGETTEXPARAMETERXVOESPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfixed ptr)
type PFNGLLIGHTMODELXOESPROC as sub(byval pname as GLenum, byval param as GLfixed)
type PFNGLLIGHTMODELXVOESPROC as sub(byval pname as GLenum, byval param as const GLfixed ptr)
type PFNGLLIGHTXOESPROC as sub(byval light as GLenum, byval pname as GLenum, byval param as GLfixed)
type PFNGLLIGHTXVOESPROC as sub(byval light as GLenum, byval pname as GLenum, byval params as const GLfixed ptr)
type PFNGLLINEWIDTHXOESPROC as sub(byval width as GLfixed)
type PFNGLLOADMATRIXXOESPROC as sub(byval m as const GLfixed ptr)
type PFNGLMATERIALXOESPROC as sub(byval face as GLenum, byval pname as GLenum, byval param as GLfixed)
type PFNGLMATERIALXVOESPROC as sub(byval face as GLenum, byval pname as GLenum, byval param as const GLfixed ptr)
type PFNGLMULTMATRIXXOESPROC as sub(byval m as const GLfixed ptr)
type PFNGLMULTITEXCOORD4XOESPROC as sub(byval texture as GLenum, byval s as GLfixed, byval t as GLfixed, byval r as GLfixed, byval q as GLfixed)
type PFNGLNORMAL3XOESPROC as sub(byval nx as GLfixed, byval ny as GLfixed, byval nz as GLfixed)
type PFNGLORTHOXOESPROC as sub(byval l as GLfixed, byval r as GLfixed, byval b as GLfixed, byval t as GLfixed, byval n as GLfixed, byval f as GLfixed)
type PFNGLPOINTPARAMETERXVOESPROC as sub(byval pname as GLenum, byval params as const GLfixed ptr)
type PFNGLPOINTSIZEXOESPROC as sub(byval size as GLfixed)
type PFNGLPOLYGONOFFSETXOESPROC as sub(byval factor as GLfixed, byval units as GLfixed)
type PFNGLROTATEXOESPROC as sub(byval angle as GLfixed, byval x as GLfixed, byval y as GLfixed, byval z as GLfixed)
type PFNGLSAMPLECOVERAGEOESPROC as sub(byval value as GLfixed, byval invert as GLboolean)
type PFNGLSCALEXOESPROC as sub(byval x as GLfixed, byval y as GLfixed, byval z as GLfixed)
type PFNGLTEXENVXOESPROC as sub(byval target as GLenum, byval pname as GLenum, byval param as GLfixed)
type PFNGLTEXENVXVOESPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLfixed ptr)
type PFNGLTEXPARAMETERXOESPROC as sub(byval target as GLenum, byval pname as GLenum, byval param as GLfixed)
type PFNGLTEXPARAMETERXVOESPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLfixed ptr)
type PFNGLTRANSLATEXOESPROC as sub(byval x as GLfixed, byval y as GLfixed, byval z as GLfixed)
type PFNGLACCUMXOESPROC as sub(byval op as GLenum, byval value as GLfixed)
type PFNGLBITMAPXOESPROC as sub(byval width as GLsizei, byval height as GLsizei, byval xorig as GLfixed, byval yorig as GLfixed, byval xmove as GLfixed, byval ymove as GLfixed, byval bitmap as const GLubyte ptr)
type PFNGLBLENDCOLORXOESPROC as sub(byval red as GLfixed, byval green as GLfixed, byval blue as GLfixed, byval alpha as GLfixed)
type PFNGLCLEARACCUMXOESPROC as sub(byval red as GLfixed, byval green as GLfixed, byval blue as GLfixed, byval alpha as GLfixed)
type PFNGLCOLOR3XOESPROC as sub(byval red as GLfixed, byval green as GLfixed, byval blue as GLfixed)
type PFNGLCOLOR3XVOESPROC as sub(byval components as const GLfixed ptr)
type PFNGLCOLOR4XVOESPROC as sub(byval components as const GLfixed ptr)
type PFNGLCONVOLUTIONPARAMETERXOESPROC as sub(byval target as GLenum, byval pname as GLenum, byval param as GLfixed)
type PFNGLCONVOLUTIONPARAMETERXVOESPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLfixed ptr)
type PFNGLEVALCOORD1XOESPROC as sub(byval u as GLfixed)
type PFNGLEVALCOORD1XVOESPROC as sub(byval coords as const GLfixed ptr)
type PFNGLEVALCOORD2XOESPROC as sub(byval u as GLfixed, byval v as GLfixed)
type PFNGLEVALCOORD2XVOESPROC as sub(byval coords as const GLfixed ptr)
type PFNGLFEEDBACKBUFFERXOESPROC as sub(byval n as GLsizei, byval type as GLenum, byval buffer as const GLfixed ptr)
type PFNGLGETCONVOLUTIONPARAMETERXVOESPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfixed ptr)
type PFNGLGETHISTOGRAMPARAMETERXVOESPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfixed ptr)
type PFNGLGETLIGHTXOESPROC as sub(byval light as GLenum, byval pname as GLenum, byval params as GLfixed ptr)
type PFNGLGETMAPXVOESPROC as sub(byval target as GLenum, byval query as GLenum, byval v as GLfixed ptr)
type PFNGLGETMATERIALXOESPROC as sub(byval face as GLenum, byval pname as GLenum, byval param as GLfixed)
type PFNGLGETPIXELMAPXVPROC as sub(byval map as GLenum, byval size as GLint, byval values as GLfixed ptr)
type PFNGLGETTEXGENXVOESPROC as sub(byval coord as GLenum, byval pname as GLenum, byval params as GLfixed ptr)
type PFNGLGETTEXLEVELPARAMETERXVOESPROC as sub(byval target as GLenum, byval level as GLint, byval pname as GLenum, byval params as GLfixed ptr)
type PFNGLINDEXXOESPROC as sub(byval component as GLfixed)
type PFNGLINDEXXVOESPROC as sub(byval component as const GLfixed ptr)
type PFNGLLOADTRANSPOSEMATRIXXOESPROC as sub(byval m as const GLfixed ptr)
type PFNGLMAP1XOESPROC as sub(byval target as GLenum, byval u1 as GLfixed, byval u2 as GLfixed, byval stride as GLint, byval order as GLint, byval points as GLfixed)
type PFNGLMAP2XOESPROC as sub(byval target as GLenum, byval u1 as GLfixed, byval u2 as GLfixed, byval ustride as GLint, byval uorder as GLint, byval v1 as GLfixed, byval v2 as GLfixed, byval vstride as GLint, byval vorder as GLint, byval points as GLfixed)
type PFNGLMAPGRID1XOESPROC as sub(byval n as GLint, byval u1 as GLfixed, byval u2 as GLfixed)
type PFNGLMAPGRID2XOESPROC as sub(byval n as GLint, byval u1 as GLfixed, byval u2 as GLfixed, byval v1 as GLfixed, byval v2 as GLfixed)
type PFNGLMULTTRANSPOSEMATRIXXOESPROC as sub(byval m as const GLfixed ptr)
type PFNGLMULTITEXCOORD1XOESPROC as sub(byval texture as GLenum, byval s as GLfixed)
type PFNGLMULTITEXCOORD1XVOESPROC as sub(byval texture as GLenum, byval coords as const GLfixed ptr)
type PFNGLMULTITEXCOORD2XOESPROC as sub(byval texture as GLenum, byval s as GLfixed, byval t as GLfixed)
type PFNGLMULTITEXCOORD2XVOESPROC as sub(byval texture as GLenum, byval coords as const GLfixed ptr)
type PFNGLMULTITEXCOORD3XOESPROC as sub(byval texture as GLenum, byval s as GLfixed, byval t as GLfixed, byval r as GLfixed)
type PFNGLMULTITEXCOORD3XVOESPROC as sub(byval texture as GLenum, byval coords as const GLfixed ptr)
type PFNGLMULTITEXCOORD4XVOESPROC as sub(byval texture as GLenum, byval coords as const GLfixed ptr)
type PFNGLNORMAL3XVOESPROC as sub(byval coords as const GLfixed ptr)
type PFNGLPASSTHROUGHXOESPROC as sub(byval token as GLfixed)
type PFNGLPIXELMAPXPROC as sub(byval map as GLenum, byval size as GLint, byval values as const GLfixed ptr)
type PFNGLPIXELSTOREXPROC as sub(byval pname as GLenum, byval param as GLfixed)
type PFNGLPIXELTRANSFERXOESPROC as sub(byval pname as GLenum, byval param as GLfixed)
type PFNGLPIXELZOOMXOESPROC as sub(byval xfactor as GLfixed, byval yfactor as GLfixed)
type PFNGLPRIORITIZETEXTURESXOESPROC as sub(byval n as GLsizei, byval textures as const GLuint ptr, byval priorities as const GLfixed ptr)
type PFNGLRASTERPOS2XOESPROC as sub(byval x as GLfixed, byval y as GLfixed)
type PFNGLRASTERPOS2XVOESPROC as sub(byval coords as const GLfixed ptr)
type PFNGLRASTERPOS3XOESPROC as sub(byval x as GLfixed, byval y as GLfixed, byval z as GLfixed)
type PFNGLRASTERPOS3XVOESPROC as sub(byval coords as const GLfixed ptr)
type PFNGLRASTERPOS4XOESPROC as sub(byval x as GLfixed, byval y as GLfixed, byval z as GLfixed, byval w as GLfixed)
type PFNGLRASTERPOS4XVOESPROC as sub(byval coords as const GLfixed ptr)
type PFNGLRECTXOESPROC as sub(byval x1 as GLfixed, byval y1 as GLfixed, byval x2 as GLfixed, byval y2 as GLfixed)
type PFNGLRECTXVOESPROC as sub(byval v1 as const GLfixed ptr, byval v2 as const GLfixed ptr)
type PFNGLTEXCOORD1XOESPROC as sub(byval s as GLfixed)
type PFNGLTEXCOORD1XVOESPROC as sub(byval coords as const GLfixed ptr)
type PFNGLTEXCOORD2XOESPROC as sub(byval s as GLfixed, byval t as GLfixed)
type PFNGLTEXCOORD2XVOESPROC as sub(byval coords as const GLfixed ptr)
type PFNGLTEXCOORD3XOESPROC as sub(byval s as GLfixed, byval t as GLfixed, byval r as GLfixed)
type PFNGLTEXCOORD3XVOESPROC as sub(byval coords as const GLfixed ptr)
type PFNGLTEXCOORD4XOESPROC as sub(byval s as GLfixed, byval t as GLfixed, byval r as GLfixed, byval q as GLfixed)
type PFNGLTEXCOORD4XVOESPROC as sub(byval coords as const GLfixed ptr)
type PFNGLTEXGENXOESPROC as sub(byval coord as GLenum, byval pname as GLenum, byval param as GLfixed)
type PFNGLTEXGENXVOESPROC as sub(byval coord as GLenum, byval pname as GLenum, byval params as const GLfixed ptr)
type PFNGLVERTEX2XOESPROC as sub(byval x as GLfixed)
type PFNGLVERTEX2XVOESPROC as sub(byval coords as const GLfixed ptr)
type PFNGLVERTEX3XOESPROC as sub(byval x as GLfixed, byval y as GLfixed)
type PFNGLVERTEX3XVOESPROC as sub(byval coords as const GLfixed ptr)
type PFNGLVERTEX4XOESPROC as sub(byval x as GLfixed, byval y as GLfixed, byval z as GLfixed)
type PFNGLVERTEX4XVOESPROC as sub(byval coords as const GLfixed ptr)


const GL_OES_query_matrix = 1
type PFNGLQUERYMATRIXXOESPROC as function(byval mantissa as GLfixed ptr, byval exponent as GLint ptr) as GLbitfield


const GL_OES_read_format = 1
const GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = &h8B9A
const GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = &h8B9B
const GL_OES_single_precision = 1

type PFNGLCLEARDEPTHFOESPROC as sub(byval depth as GLclampf)
type PFNGLCLIPPLANEFOESPROC as sub(byval plane as GLenum, byval equation as const GLfloat ptr)
type PFNGLDEPTHRANGEFOESPROC as sub(byval n as GLclampf, byval f as GLclampf)
type PFNGLFRUSTUMFOESPROC as sub(byval l as GLfloat, byval r as GLfloat, byval b as GLfloat, byval t as GLfloat, byval n as GLfloat, byval f as GLfloat)
type PFNGLGETCLIPPLANEFOESPROC as sub(byval plane as GLenum, byval equation as GLfloat ptr)
type PFNGLORTHOFOESPROC as sub(byval l as GLfloat, byval r as GLfloat, byval b as GLfloat, byval t as GLfloat, byval n as GLfloat, byval f as GLfloat)


const GL_3DFX_multisample = 1
const GL_MULTISAMPLE_3DFX = &h86B2
const GL_SAMPLE_BUFFERS_3DFX = &h86B3
const GL_SAMPLES_3DFX = &h86B4
const GL_MULTISAMPLE_BIT_3DFX = &h20000000
const GL_3DFX_tbuffer = 1
type PFNGLTBUFFERMASK3DFXPROC as sub(byval mask as GLuint)


const GL_3DFX_texture_compression_FXT1 = 1
const GL_COMPRESSED_RGB_FXT1_3DFX = &h86B0
const GL_COMPRESSED_RGBA_FXT1_3DFX = &h86B1
const GL_AMD_blend_minmax_factor = 1
const GL_FACTOR_MIN_AMD = &h901C
const GL_FACTOR_MAX_AMD = &h901D
const GL_AMD_conservative_depth = 1
const GL_AMD_debug_output = 1
type GLDEBUGPROCAMD as sub(byval id as GLuint, byval category as GLenum, byval severity as GLenum, byval length as GLsizei, byval message as const GLchar ptr, byval userParam as any ptr)
const GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = &h9143
const GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = &h9144
const GL_DEBUG_LOGGED_MESSAGES_AMD = &h9145
const GL_DEBUG_SEVERITY_HIGH_AMD = &h9146
const GL_DEBUG_SEVERITY_MEDIUM_AMD = &h9147
const GL_DEBUG_SEVERITY_LOW_AMD = &h9148
const GL_DEBUG_CATEGORY_API_ERROR_AMD = &h9149
const GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = &h914A
const GL_DEBUG_CATEGORY_DEPRECATION_AMD = &h914B
const GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = &h914C
const GL_DEBUG_CATEGORY_PERFORMANCE_AMD = &h914D
const GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = &h914E
const GL_DEBUG_CATEGORY_APPLICATION_AMD = &h914F
const GL_DEBUG_CATEGORY_OTHER_AMD = &h9150

type PFNGLDEBUGMESSAGEENABLEAMDPROC as sub(byval category as GLenum, byval severity as GLenum, byval count as GLsizei, byval ids as const GLuint ptr, byval enabled as GLboolean)
type PFNGLDEBUGMESSAGEINSERTAMDPROC as sub(byval category as GLenum, byval severity as GLenum, byval id as GLuint, byval length as GLsizei, byval buf as const GLchar ptr)
type PFNGLDEBUGMESSAGECALLBACKAMDPROC as sub(byval callback as GLDEBUGPROCAMD, byval userParam as any ptr)
type PFNGLGETDEBUGMESSAGELOGAMDPROC as function(byval count as GLuint, byval bufsize as GLsizei, byval categories as GLenum ptr, byval severities as GLuint ptr, byval ids as GLuint ptr, byval lengths as GLsizei ptr, byval message as GLchar ptr) as GLuint


const GL_AMD_depth_clamp_separate = 1
const GL_DEPTH_CLAMP_NEAR_AMD = &h901E
const GL_DEPTH_CLAMP_FAR_AMD = &h901F
const GL_AMD_draw_buffers_blend = 1

type PFNGLBLENDFUNCINDEXEDAMDPROC as sub(byval buf as GLuint, byval src as GLenum, byval dst as GLenum)
type PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC as sub(byval buf as GLuint, byval srcRGB as GLenum, byval dstRGB as GLenum, byval srcAlpha as GLenum, byval dstAlpha as GLenum)
type PFNGLBLENDEQUATIONINDEXEDAMDPROC as sub(byval buf as GLuint, byval mode as GLenum)
type PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC as sub(byval buf as GLuint, byval modeRGB as GLenum, byval modeAlpha as GLenum)


const GL_AMD_gcn_shader = 1
const GL_AMD_gpu_shader_int64 = 1
type GLint64EXT as longint
const GL_INT64_NV = &h140E
const GL_UNSIGNED_INT64_NV = &h140F
const GL_INT8_NV = &h8FE0
const GL_INT8_VEC2_NV = &h8FE1
const GL_INT8_VEC3_NV = &h8FE2
const GL_INT8_VEC4_NV = &h8FE3
const GL_INT16_NV = &h8FE4
const GL_INT16_VEC2_NV = &h8FE5
const GL_INT16_VEC3_NV = &h8FE6
const GL_INT16_VEC4_NV = &h8FE7
const GL_INT64_VEC2_NV = &h8FE9
const GL_INT64_VEC3_NV = &h8FEA
const GL_INT64_VEC4_NV = &h8FEB
const GL_UNSIGNED_INT8_NV = &h8FEC
const GL_UNSIGNED_INT8_VEC2_NV = &h8FED
const GL_UNSIGNED_INT8_VEC3_NV = &h8FEE
const GL_UNSIGNED_INT8_VEC4_NV = &h8FEF
const GL_UNSIGNED_INT16_NV = &h8FF0
const GL_UNSIGNED_INT16_VEC2_NV = &h8FF1
const GL_UNSIGNED_INT16_VEC3_NV = &h8FF2
const GL_UNSIGNED_INT16_VEC4_NV = &h8FF3
const GL_UNSIGNED_INT64_VEC2_NV = &h8FF5
const GL_UNSIGNED_INT64_VEC3_NV = &h8FF6
const GL_UNSIGNED_INT64_VEC4_NV = &h8FF7
const GL_FLOAT16_NV = &h8FF8
const GL_FLOAT16_VEC2_NV = &h8FF9
const GL_FLOAT16_VEC3_NV = &h8FFA
const GL_FLOAT16_VEC4_NV = &h8FFB

type PFNGLUNIFORM1I64NVPROC as sub(byval location as GLint, byval x as GLint64EXT)
type PFNGLUNIFORM2I64NVPROC as sub(byval location as GLint, byval x as GLint64EXT, byval y as GLint64EXT)
type PFNGLUNIFORM3I64NVPROC as sub(byval location as GLint, byval x as GLint64EXT, byval y as GLint64EXT, byval z as GLint64EXT)
type PFNGLUNIFORM4I64NVPROC as sub(byval location as GLint, byval x as GLint64EXT, byval y as GLint64EXT, byval z as GLint64EXT, byval w as GLint64EXT)
type PFNGLUNIFORM1I64VNVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLint64EXT ptr)
type PFNGLUNIFORM2I64VNVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLint64EXT ptr)
type PFNGLUNIFORM3I64VNVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLint64EXT ptr)
type PFNGLUNIFORM4I64VNVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLint64EXT ptr)
type PFNGLUNIFORM1UI64NVPROC as sub(byval location as GLint, byval x as GLuint64EXT)
type PFNGLUNIFORM2UI64NVPROC as sub(byval location as GLint, byval x as GLuint64EXT, byval y as GLuint64EXT)
type PFNGLUNIFORM3UI64NVPROC as sub(byval location as GLint, byval x as GLuint64EXT, byval y as GLuint64EXT, byval z as GLuint64EXT)
type PFNGLUNIFORM4UI64NVPROC as sub(byval location as GLint, byval x as GLuint64EXT, byval y as GLuint64EXT, byval z as GLuint64EXT, byval w as GLuint64EXT)
type PFNGLUNIFORM1UI64VNVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLuint64EXT ptr)
type PFNGLUNIFORM2UI64VNVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLuint64EXT ptr)
type PFNGLUNIFORM3UI64VNVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLuint64EXT ptr)
type PFNGLUNIFORM4UI64VNVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLuint64EXT ptr)
type PFNGLGETUNIFORMI64VNVPROC as sub(byval program as GLuint, byval location as GLint, byval params as GLint64EXT ptr)
type PFNGLGETUNIFORMUI64VNVPROC as sub(byval program as GLuint, byval location as GLint, byval params as GLuint64EXT ptr)
type PFNGLPROGRAMUNIFORM1I64NVPROC as sub(byval program as GLuint, byval location as GLint, byval x as GLint64EXT)
type PFNGLPROGRAMUNIFORM2I64NVPROC as sub(byval program as GLuint, byval location as GLint, byval x as GLint64EXT, byval y as GLint64EXT)
type PFNGLPROGRAMUNIFORM3I64NVPROC as sub(byval program as GLuint, byval location as GLint, byval x as GLint64EXT, byval y as GLint64EXT, byval z as GLint64EXT)
type PFNGLPROGRAMUNIFORM4I64NVPROC as sub(byval program as GLuint, byval location as GLint, byval x as GLint64EXT, byval y as GLint64EXT, byval z as GLint64EXT, byval w as GLint64EXT)
type PFNGLPROGRAMUNIFORM1I64VNVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLint64EXT ptr)
type PFNGLPROGRAMUNIFORM2I64VNVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLint64EXT ptr)
type PFNGLPROGRAMUNIFORM3I64VNVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLint64EXT ptr)
type PFNGLPROGRAMUNIFORM4I64VNVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLint64EXT ptr)
type PFNGLPROGRAMUNIFORM1UI64NVPROC as sub(byval program as GLuint, byval location as GLint, byval x as GLuint64EXT)
type PFNGLPROGRAMUNIFORM2UI64NVPROC as sub(byval program as GLuint, byval location as GLint, byval x as GLuint64EXT, byval y as GLuint64EXT)
type PFNGLPROGRAMUNIFORM3UI64NVPROC as sub(byval program as GLuint, byval location as GLint, byval x as GLuint64EXT, byval y as GLuint64EXT, byval z as GLuint64EXT)
type PFNGLPROGRAMUNIFORM4UI64NVPROC as sub(byval program as GLuint, byval location as GLint, byval x as GLuint64EXT, byval y as GLuint64EXT, byval z as GLuint64EXT, byval w as GLuint64EXT)
type PFNGLPROGRAMUNIFORM1UI64VNVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLuint64EXT ptr)
type PFNGLPROGRAMUNIFORM2UI64VNVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLuint64EXT ptr)
type PFNGLPROGRAMUNIFORM3UI64VNVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLuint64EXT ptr)
type PFNGLPROGRAMUNIFORM4UI64VNVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLuint64EXT ptr)


const GL_AMD_interleaved_elements = 1
const GL_VERTEX_ELEMENT_SWIZZLE_AMD = &h91A4
const GL_VERTEX_ID_SWIZZLE_AMD = &h91A5
type PFNGLVERTEXATTRIBPARAMETERIAMDPROC as sub(byval index as GLuint, byval pname as GLenum, byval param as GLint)


const GL_AMD_multi_draw_indirect = 1
type PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC as sub(byval mode as GLenum, byval indirect as const any ptr, byval primcount as GLsizei, byval stride as GLsizei)
type PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC as sub(byval mode as GLenum, byval type as GLenum, byval indirect as const any ptr, byval primcount as GLsizei, byval stride as GLsizei)


const GL_AMD_name_gen_delete = 1
const GL_DATA_BUFFER_AMD = &h9151
const GL_PERFORMANCE_MONITOR_AMD = &h9152
const GL_QUERY_OBJECT_AMD = &h9153
const GL_VERTEX_ARRAY_OBJECT_AMD = &h9154
const GL_SAMPLER_OBJECT_AMD = &h9155

type PFNGLGENNAMESAMDPROC as sub(byval identifier as GLenum, byval num as GLuint, byval names as GLuint ptr)
type PFNGLDELETENAMESAMDPROC as sub(byval identifier as GLenum, byval num as GLuint, byval names as const GLuint ptr)
type PFNGLISNAMEAMDPROC as function(byval identifier as GLenum, byval name as GLuint) as GLboolean


const GL_AMD_occlusion_query_event = 1
const GL_OCCLUSION_QUERY_EVENT_MASK_AMD = &h874F
const GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = &h00000001
const GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = &h00000002
const GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = &h00000004
const GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = &h00000008
const GL_QUERY_ALL_EVENT_BITS_AMD = &hFFFFFFFF
type PFNGLQUERYOBJECTPARAMETERUIAMDPROC as sub(byval target as GLenum, byval id as GLuint, byval pname as GLenum, byval param as GLuint)


const GL_AMD_performance_monitor = 1
const GL_COUNTER_TYPE_AMD = &h8BC0
const GL_COUNTER_RANGE_AMD = &h8BC1
const GL_UNSIGNED_INT64_AMD = &h8BC2
const GL_PERCENTAGE_AMD = &h8BC3
const GL_PERFMON_RESULT_AVAILABLE_AMD = &h8BC4
const GL_PERFMON_RESULT_SIZE_AMD = &h8BC5
const GL_PERFMON_RESULT_AMD = &h8BC6

type PFNGLGETPERFMONITORGROUPSAMDPROC as sub(byval numGroups as GLint ptr, byval groupsSize as GLsizei, byval groups as GLuint ptr)
type PFNGLGETPERFMONITORCOUNTERSAMDPROC as sub(byval group as GLuint, byval numCounters as GLint ptr, byval maxActiveCounters as GLint ptr, byval counterSize as GLsizei, byval counters as GLuint ptr)
type PFNGLGETPERFMONITORGROUPSTRINGAMDPROC as sub(byval group as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval groupString as GLchar ptr)
type PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC as sub(byval group as GLuint, byval counter as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval counterString as GLchar ptr)
type PFNGLGETPERFMONITORCOUNTERINFOAMDPROC as sub(byval group as GLuint, byval counter as GLuint, byval pname as GLenum, byval data as any ptr)
type PFNGLGENPERFMONITORSAMDPROC as sub(byval n as GLsizei, byval monitors as GLuint ptr)
type PFNGLDELETEPERFMONITORSAMDPROC as sub(byval n as GLsizei, byval monitors as GLuint ptr)
type PFNGLSELECTPERFMONITORCOUNTERSAMDPROC as sub(byval monitor as GLuint, byval enable as GLboolean, byval group as GLuint, byval numCounters as GLint, byval counterList as GLuint ptr)
type PFNGLBEGINPERFMONITORAMDPROC as sub(byval monitor as GLuint)
type PFNGLENDPERFMONITORAMDPROC as sub(byval monitor as GLuint)
type PFNGLGETPERFMONITORCOUNTERDATAAMDPROC as sub(byval monitor as GLuint, byval pname as GLenum, byval dataSize as GLsizei, byval data as GLuint ptr, byval bytesWritten as GLint ptr)


const GL_AMD_pinned_memory = 1
const GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = &h9160
const GL_AMD_query_buffer_object = 1
const GL_QUERY_BUFFER_AMD = &h9192
const GL_QUERY_BUFFER_BINDING_AMD = &h9193
const GL_QUERY_RESULT_NO_WAIT_AMD = &h9194
const GL_AMD_sample_positions = 1
const GL_SUBSAMPLE_DISTANCE_AMD = &h883F
type PFNGLSETMULTISAMPLEFVAMDPROC as sub(byval pname as GLenum, byval index as GLuint, byval val as const GLfloat ptr)


const GL_AMD_seamless_cubemap_per_texture = 1
const GL_AMD_shader_atomic_counter_ops = 1
const GL_AMD_shader_stencil_export = 1
const GL_AMD_shader_trinary_minmax = 1
const GL_AMD_sparse_texture = 1
const GL_VIRTUAL_PAGE_SIZE_X_AMD = &h9195
const GL_VIRTUAL_PAGE_SIZE_Y_AMD = &h9196
const GL_VIRTUAL_PAGE_SIZE_Z_AMD = &h9197
const GL_MAX_SPARSE_TEXTURE_SIZE_AMD = &h9198
const GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = &h9199
const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = &h919A
const GL_MIN_SPARSE_LEVEL_AMD = &h919B
const GL_MIN_LOD_WARNING_AMD = &h919C
const GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = &h00000001
type PFNGLTEXSTORAGESPARSEAMDPROC as sub(byval target as GLenum, byval internalFormat as GLenum, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval layers as GLsizei, byval flags as GLbitfield)
type PFNGLTEXTURESTORAGESPARSEAMDPROC as sub(byval texture as GLuint, byval target as GLenum, byval internalFormat as GLenum, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval layers as GLsizei, byval flags as GLbitfield)


const GL_AMD_stencil_operation_extended = 1
const GL_SET_AMD = &h874A
const GL_REPLACE_VALUE_AMD = &h874B
const GL_STENCIL_OP_VALUE_AMD = &h874C
const GL_STENCIL_BACK_OP_VALUE_AMD = &h874D
type PFNGLSTENCILOPVALUEAMDPROC as sub(byval face as GLenum, byval value as GLuint)


const GL_AMD_texture_texture4 = 1
const GL_AMD_transform_feedback3_lines_triangles = 1
const GL_AMD_transform_feedback4 = 1
const GL_STREAM_RASTERIZATION_AMD = &h91A0
const GL_AMD_vertex_shader_layer = 1
const GL_AMD_vertex_shader_tessellator = 1
const GL_SAMPLER_BUFFER_AMD = &h9001
const GL_INT_SAMPLER_BUFFER_AMD = &h9002
const GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = &h9003
const GL_TESSELLATION_MODE_AMD = &h9004
const GL_TESSELLATION_FACTOR_AMD = &h9005
const GL_DISCRETE_AMD = &h9006
const GL_CONTINUOUS_AMD = &h9007
type PFNGLTESSELLATIONFACTORAMDPROC as sub(byval factor as GLfloat)
type PFNGLTESSELLATIONMODEAMDPROC as sub(byval mode as GLenum)


const GL_AMD_vertex_shader_viewport_index = 1
const GL_APPLE_aux_depth_stencil = 1
const GL_AUX_DEPTH_STENCIL_APPLE = &h8A14
const GL_APPLE_client_storage = 1
const GL_UNPACK_CLIENT_STORAGE_APPLE = &h85B2
const GL_APPLE_element_array = 1
const GL_ELEMENT_ARRAY_APPLE = &h8A0C
const GL_ELEMENT_ARRAY_TYPE_APPLE = &h8A0D
const GL_ELEMENT_ARRAY_POINTER_APPLE = &h8A0E

type PFNGLELEMENTPOINTERAPPLEPROC as sub(byval type as GLenum, byval pointer as const any ptr)
type PFNGLDRAWELEMENTARRAYAPPLEPROC as sub(byval mode as GLenum, byval first as GLint, byval count as GLsizei)
type PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC as sub(byval mode as GLenum, byval start as GLuint, byval end as GLuint, byval first as GLint, byval count as GLsizei)
type PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC as sub(byval mode as GLenum, byval first as const GLint ptr, byval count as const GLsizei ptr, byval primcount as GLsizei)
type PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC as sub(byval mode as GLenum, byval start as GLuint, byval end as GLuint, byval first as const GLint ptr, byval count as const GLsizei ptr, byval primcount as GLsizei)


const GL_APPLE_fence = 1
const GL_DRAW_PIXELS_APPLE = &h8A0A
const GL_FENCE_APPLE = &h8A0B

type PFNGLGENFENCESAPPLEPROC as sub(byval n as GLsizei, byval fences as GLuint ptr)
type PFNGLDELETEFENCESAPPLEPROC as sub(byval n as GLsizei, byval fences as const GLuint ptr)
type PFNGLSETFENCEAPPLEPROC as sub(byval fence as GLuint)
type PFNGLISFENCEAPPLEPROC as function(byval fence as GLuint) as GLboolean
type PFNGLTESTFENCEAPPLEPROC as function(byval fence as GLuint) as GLboolean
type PFNGLFINISHFENCEAPPLEPROC as sub(byval fence as GLuint)
type PFNGLTESTOBJECTAPPLEPROC as function(byval object as GLenum, byval name as GLuint) as GLboolean
type PFNGLFINISHOBJECTAPPLEPROC as sub(byval object as GLenum, byval name as GLint)


const GL_APPLE_float_pixels = 1
const GL_HALF_APPLE = &h140B
const GL_RGBA_FLOAT32_APPLE = &h8814
const GL_RGB_FLOAT32_APPLE = &h8815
const GL_ALPHA_FLOAT32_APPLE = &h8816
const GL_INTENSITY_FLOAT32_APPLE = &h8817
const GL_LUMINANCE_FLOAT32_APPLE = &h8818
const GL_LUMINANCE_ALPHA_FLOAT32_APPLE = &h8819
const GL_RGBA_FLOAT16_APPLE = &h881A
const GL_RGB_FLOAT16_APPLE = &h881B
const GL_ALPHA_FLOAT16_APPLE = &h881C
const GL_INTENSITY_FLOAT16_APPLE = &h881D
const GL_LUMINANCE_FLOAT16_APPLE = &h881E
const GL_LUMINANCE_ALPHA_FLOAT16_APPLE = &h881F
const GL_COLOR_FLOAT_APPLE = &h8A0F
const GL_APPLE_flush_buffer_range = 1
const GL_BUFFER_SERIALIZED_MODIFY_APPLE = &h8A12
const GL_BUFFER_FLUSHING_UNMAP_APPLE = &h8A13
type PFNGLBUFFERPARAMETERIAPPLEPROC as sub(byval target as GLenum, byval pname as GLenum, byval param as GLint)
type PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC as sub(byval target as GLenum, byval offset as GLintptr, byval size as GLsizeiptr)


const GL_APPLE_object_purgeable = 1
const GL_BUFFER_OBJECT_APPLE = &h85B3
const GL_RELEASED_APPLE = &h8A19
const GL_VOLATILE_APPLE = &h8A1A
const GL_RETAINED_APPLE = &h8A1B
const GL_UNDEFINED_APPLE = &h8A1C
const GL_PURGEABLE_APPLE = &h8A1D

type PFNGLOBJECTPURGEABLEAPPLEPROC as function(byval objectType as GLenum, byval name as GLuint, byval option as GLenum) as GLenum
type PFNGLOBJECTUNPURGEABLEAPPLEPROC as function(byval objectType as GLenum, byval name as GLuint, byval option as GLenum) as GLenum
type PFNGLGETOBJECTPARAMETERIVAPPLEPROC as sub(byval objectType as GLenum, byval name as GLuint, byval pname as GLenum, byval params as GLint ptr)


const GL_APPLE_rgb_422 = 1
const GL_RGB_422_APPLE = &h8A1F
const GL_UNSIGNED_SHORT_8_8_APPLE = &h85BA
const GL_UNSIGNED_SHORT_8_8_REV_APPLE = &h85BB
const GL_RGB_RAW_422_APPLE = &h8A51
const GL_APPLE_row_bytes = 1
const GL_PACK_ROW_BYTES_APPLE = &h8A15
const GL_UNPACK_ROW_BYTES_APPLE = &h8A16
const GL_APPLE_specular_vector = 1
const GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = &h85B0
const GL_APPLE_texture_range = 1
const GL_TEXTURE_RANGE_LENGTH_APPLE = &h85B7
const GL_TEXTURE_RANGE_POINTER_APPLE = &h85B8
const GL_TEXTURE_STORAGE_HINT_APPLE = &h85BC
const GL_STORAGE_PRIVATE_APPLE = &h85BD
const GL_STORAGE_CACHED_APPLE = &h85BE
const GL_STORAGE_SHARED_APPLE = &h85BF
type PFNGLTEXTURERANGEAPPLEPROC as sub(byval target as GLenum, byval length as GLsizei, byval pointer as const any ptr)
type PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as any ptr ptr)


const GL_APPLE_transform_hint = 1
const GL_TRANSFORM_HINT_APPLE = &h85B1
const GL_APPLE_vertex_array_object = 1
const GL_VERTEX_ARRAY_BINDING_APPLE = &h85B5

type PFNGLBINDVERTEXARRAYAPPLEPROC as sub(byval array as GLuint)
type PFNGLDELETEVERTEXARRAYSAPPLEPROC as sub(byval n as GLsizei, byval arrays as const GLuint ptr)
type PFNGLGENVERTEXARRAYSAPPLEPROC as sub(byval n as GLsizei, byval arrays as GLuint ptr)
type PFNGLISVERTEXARRAYAPPLEPROC as function(byval array as GLuint) as GLboolean


const GL_APPLE_vertex_array_range = 1
const GL_VERTEX_ARRAY_RANGE_APPLE = &h851D
const GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = &h851E
const GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = &h851F
const GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = &h8521
const GL_STORAGE_CLIENT_APPLE = &h85B4

type PFNGLVERTEXARRAYRANGEAPPLEPROC as sub(byval length as GLsizei, byval pointer as any ptr)
type PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC as sub(byval length as GLsizei, byval pointer as any ptr)
type PFNGLVERTEXARRAYPARAMETERIAPPLEPROC as sub(byval pname as GLenum, byval param as GLint)


const GL_APPLE_vertex_program_evaluators = 1
const GL_VERTEX_ATTRIB_MAP1_APPLE = &h8A00
const GL_VERTEX_ATTRIB_MAP2_APPLE = &h8A01
const GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = &h8A02
const GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = &h8A03
const GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = &h8A04
const GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = &h8A05
const GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = &h8A06
const GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = &h8A07
const GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = &h8A08
const GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = &h8A09

type PFNGLENABLEVERTEXATTRIBAPPLEPROC as sub(byval index as GLuint, byval pname as GLenum)
type PFNGLDISABLEVERTEXATTRIBAPPLEPROC as sub(byval index as GLuint, byval pname as GLenum)
type PFNGLISVERTEXATTRIBENABLEDAPPLEPROC as function(byval index as GLuint, byval pname as GLenum) as GLboolean
type PFNGLMAPVERTEXATTRIB1DAPPLEPROC as sub(byval index as GLuint, byval size as GLuint, byval u1 as GLdouble, byval u2 as GLdouble, byval stride as GLint, byval order as GLint, byval points as const GLdouble ptr)
type PFNGLMAPVERTEXATTRIB1FAPPLEPROC as sub(byval index as GLuint, byval size as GLuint, byval u1 as GLfloat, byval u2 as GLfloat, byval stride as GLint, byval order as GLint, byval points as const GLfloat ptr)
type PFNGLMAPVERTEXATTRIB2DAPPLEPROC as sub(byval index as GLuint, byval size as GLuint, byval u1 as GLdouble, byval u2 as GLdouble, byval ustride as GLint, byval uorder as GLint, byval v1 as GLdouble, byval v2 as GLdouble, byval vstride as GLint, byval vorder as GLint, byval points as const GLdouble ptr)
type PFNGLMAPVERTEXATTRIB2FAPPLEPROC as sub(byval index as GLuint, byval size as GLuint, byval u1 as GLfloat, byval u2 as GLfloat, byval ustride as GLint, byval uorder as GLint, byval v1 as GLfloat, byval v2 as GLfloat, byval vstride as GLint, byval vorder as GLint, byval points as const GLfloat ptr)


const GL_APPLE_ycbcr_422 = 1
const GL_YCBCR_422_APPLE = &h85B9
const GL_ATI_draw_buffers = 1
const GL_MAX_DRAW_BUFFERS_ATI = &h8824
const GL_DRAW_BUFFER0_ATI = &h8825
const GL_DRAW_BUFFER1_ATI = &h8826
const GL_DRAW_BUFFER2_ATI = &h8827
const GL_DRAW_BUFFER3_ATI = &h8828
const GL_DRAW_BUFFER4_ATI = &h8829
const GL_DRAW_BUFFER5_ATI = &h882A
const GL_DRAW_BUFFER6_ATI = &h882B
const GL_DRAW_BUFFER7_ATI = &h882C
const GL_DRAW_BUFFER8_ATI = &h882D
const GL_DRAW_BUFFER9_ATI = &h882E
const GL_DRAW_BUFFER10_ATI = &h882F
const GL_DRAW_BUFFER11_ATI = &h8830
const GL_DRAW_BUFFER12_ATI = &h8831
const GL_DRAW_BUFFER13_ATI = &h8832
const GL_DRAW_BUFFER14_ATI = &h8833
const GL_DRAW_BUFFER15_ATI = &h8834
type PFNGLDRAWBUFFERSATIPROC as sub(byval n as GLsizei, byval bufs as const GLenum ptr)


const GL_ATI_element_array = 1
const GL_ELEMENT_ARRAY_ATI = &h8768
const GL_ELEMENT_ARRAY_TYPE_ATI = &h8769
const GL_ELEMENT_ARRAY_POINTER_ATI = &h876A

type PFNGLELEMENTPOINTERATIPROC as sub(byval type as GLenum, byval pointer as const any ptr)
type PFNGLDRAWELEMENTARRAYATIPROC as sub(byval mode as GLenum, byval count as GLsizei)
type PFNGLDRAWRANGEELEMENTARRAYATIPROC as sub(byval mode as GLenum, byval start as GLuint, byval end as GLuint, byval count as GLsizei)


const GL_ATI_envmap_bumpmap = 1
const GL_BUMP_ROT_MATRIX_ATI = &h8775
const GL_BUMP_ROT_MATRIX_SIZE_ATI = &h8776
const GL_BUMP_NUM_TEX_UNITS_ATI = &h8777
const GL_BUMP_TEX_UNITS_ATI = &h8778
const GL_DUDV_ATI = &h8779
const GL_DU8DV8_ATI = &h877A
const GL_BUMP_ENVMAP_ATI = &h877B
const GL_BUMP_TARGET_ATI = &h877C

type PFNGLTEXBUMPPARAMETERIVATIPROC as sub(byval pname as GLenum, byval param as const GLint ptr)
type PFNGLTEXBUMPPARAMETERFVATIPROC as sub(byval pname as GLenum, byval param as const GLfloat ptr)
type PFNGLGETTEXBUMPPARAMETERIVATIPROC as sub(byval pname as GLenum, byval param as GLint ptr)
type PFNGLGETTEXBUMPPARAMETERFVATIPROC as sub(byval pname as GLenum, byval param as GLfloat ptr)


const GL_ATI_fragment_shader = 1
const GL_FRAGMENT_SHADER_ATI = &h8920
const GL_REG_0_ATI = &h8921
const GL_REG_1_ATI = &h8922
const GL_REG_2_ATI = &h8923
const GL_REG_3_ATI = &h8924
const GL_REG_4_ATI = &h8925
const GL_REG_5_ATI = &h8926
const GL_REG_6_ATI = &h8927
const GL_REG_7_ATI = &h8928
const GL_REG_8_ATI = &h8929
const GL_REG_9_ATI = &h892A
const GL_REG_10_ATI = &h892B
const GL_REG_11_ATI = &h892C
const GL_REG_12_ATI = &h892D
const GL_REG_13_ATI = &h892E
const GL_REG_14_ATI = &h892F
const GL_REG_15_ATI = &h8930
const GL_REG_16_ATI = &h8931
const GL_REG_17_ATI = &h8932
const GL_REG_18_ATI = &h8933
const GL_REG_19_ATI = &h8934
const GL_REG_20_ATI = &h8935
const GL_REG_21_ATI = &h8936
const GL_REG_22_ATI = &h8937
const GL_REG_23_ATI = &h8938
const GL_REG_24_ATI = &h8939
const GL_REG_25_ATI = &h893A
const GL_REG_26_ATI = &h893B
const GL_REG_27_ATI = &h893C
const GL_REG_28_ATI = &h893D
const GL_REG_29_ATI = &h893E
const GL_REG_30_ATI = &h893F
const GL_REG_31_ATI = &h8940
const GL_CON_0_ATI = &h8941
const GL_CON_1_ATI = &h8942
const GL_CON_2_ATI = &h8943
const GL_CON_3_ATI = &h8944
const GL_CON_4_ATI = &h8945
const GL_CON_5_ATI = &h8946
const GL_CON_6_ATI = &h8947
const GL_CON_7_ATI = &h8948
const GL_CON_8_ATI = &h8949
const GL_CON_9_ATI = &h894A
const GL_CON_10_ATI = &h894B
const GL_CON_11_ATI = &h894C
const GL_CON_12_ATI = &h894D
const GL_CON_13_ATI = &h894E
const GL_CON_14_ATI = &h894F
const GL_CON_15_ATI = &h8950
const GL_CON_16_ATI = &h8951
const GL_CON_17_ATI = &h8952
const GL_CON_18_ATI = &h8953
const GL_CON_19_ATI = &h8954
const GL_CON_20_ATI = &h8955
const GL_CON_21_ATI = &h8956
const GL_CON_22_ATI = &h8957
const GL_CON_23_ATI = &h8958
const GL_CON_24_ATI = &h8959
const GL_CON_25_ATI = &h895A
const GL_CON_26_ATI = &h895B
const GL_CON_27_ATI = &h895C
const GL_CON_28_ATI = &h895D
const GL_CON_29_ATI = &h895E
const GL_CON_30_ATI = &h895F
const GL_CON_31_ATI = &h8960
const GL_MOV_ATI = &h8961
const GL_ADD_ATI = &h8963
const GL_MUL_ATI = &h8964
const GL_SUB_ATI = &h8965
const GL_DOT3_ATI = &h8966
const GL_DOT4_ATI = &h8967
const GL_MAD_ATI = &h8968
const GL_LERP_ATI = &h8969
const GL_CND_ATI = &h896A
const GL_CND0_ATI = &h896B
const GL_DOT2_ADD_ATI = &h896C
const GL_SECONDARY_INTERPOLATOR_ATI = &h896D
const GL_NUM_FRAGMENT_REGISTERS_ATI = &h896E
const GL_NUM_FRAGMENT_CONSTANTS_ATI = &h896F
const GL_NUM_PASSES_ATI = &h8970
const GL_NUM_INSTRUCTIONS_PER_PASS_ATI = &h8971
const GL_NUM_INSTRUCTIONS_TOTAL_ATI = &h8972
const GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = &h8973
const GL_NUM_LOOPBACK_COMPONENTS_ATI = &h8974
const GL_COLOR_ALPHA_PAIRING_ATI = &h8975
const GL_SWIZZLE_STR_ATI = &h8976
const GL_SWIZZLE_STQ_ATI = &h8977
const GL_SWIZZLE_STR_DR_ATI = &h8978
const GL_SWIZZLE_STQ_DQ_ATI = &h8979
const GL_SWIZZLE_STRQ_ATI = &h897A
const GL_SWIZZLE_STRQ_DQ_ATI = &h897B
const GL_RED_BIT_ATI = &h00000001
const GL_GREEN_BIT_ATI = &h00000002
const GL_BLUE_BIT_ATI = &h00000004
const GL_2X_BIT_ATI = &h00000001
const GL_4X_BIT_ATI = &h00000002
const GL_8X_BIT_ATI = &h00000004
const GL_HALF_BIT_ATI = &h00000008
const GL_QUARTER_BIT_ATI = &h00000010
const GL_EIGHTH_BIT_ATI = &h00000020
const GL_SATURATE_BIT_ATI = &h00000040
const GL_COMP_BIT_ATI = &h00000002
const GL_NEGATE_BIT_ATI = &h00000004
const GL_BIAS_BIT_ATI = &h00000008

type PFNGLGENFRAGMENTSHADERSATIPROC as function(byval range as GLuint) as GLuint
type PFNGLBINDFRAGMENTSHADERATIPROC as sub(byval id as GLuint)
type PFNGLDELETEFRAGMENTSHADERATIPROC as sub(byval id as GLuint)
type PFNGLBEGINFRAGMENTSHADERATIPROC as sub()
type PFNGLENDFRAGMENTSHADERATIPROC as sub()
type PFNGLPASSTEXCOORDATIPROC as sub(byval dst as GLuint, byval coord as GLuint, byval swizzle as GLenum)
type PFNGLSAMPLEMAPATIPROC as sub(byval dst as GLuint, byval interp as GLuint, byval swizzle as GLenum)
type PFNGLCOLORFRAGMENTOP1ATIPROC as sub(byval op as GLenum, byval dst as GLuint, byval dstMask as GLuint, byval dstMod as GLuint, byval arg1 as GLuint, byval arg1Rep as GLuint, byval arg1Mod as GLuint)
type PFNGLCOLORFRAGMENTOP2ATIPROC as sub(byval op as GLenum, byval dst as GLuint, byval dstMask as GLuint, byval dstMod as GLuint, byval arg1 as GLuint, byval arg1Rep as GLuint, byval arg1Mod as GLuint, byval arg2 as GLuint, byval arg2Rep as GLuint, byval arg2Mod as GLuint)
type PFNGLCOLORFRAGMENTOP3ATIPROC as sub(byval op as GLenum, byval dst as GLuint, byval dstMask as GLuint, byval dstMod as GLuint, byval arg1 as GLuint, byval arg1Rep as GLuint, byval arg1Mod as GLuint, byval arg2 as GLuint, byval arg2Rep as GLuint, byval arg2Mod as GLuint, byval arg3 as GLuint, byval arg3Rep as GLuint, byval arg3Mod as GLuint)
type PFNGLALPHAFRAGMENTOP1ATIPROC as sub(byval op as GLenum, byval dst as GLuint, byval dstMod as GLuint, byval arg1 as GLuint, byval arg1Rep as GLuint, byval arg1Mod as GLuint)
type PFNGLALPHAFRAGMENTOP2ATIPROC as sub(byval op as GLenum, byval dst as GLuint, byval dstMod as GLuint, byval arg1 as GLuint, byval arg1Rep as GLuint, byval arg1Mod as GLuint, byval arg2 as GLuint, byval arg2Rep as GLuint, byval arg2Mod as GLuint)
type PFNGLALPHAFRAGMENTOP3ATIPROC as sub(byval op as GLenum, byval dst as GLuint, byval dstMod as GLuint, byval arg1 as GLuint, byval arg1Rep as GLuint, byval arg1Mod as GLuint, byval arg2 as GLuint, byval arg2Rep as GLuint, byval arg2Mod as GLuint, byval arg3 as GLuint, byval arg3Rep as GLuint, byval arg3Mod as GLuint)
type PFNGLSETFRAGMENTSHADERCONSTANTATIPROC as sub(byval dst as GLuint, byval value as const GLfloat ptr)


const GL_ATI_map_object_buffer = 1
type PFNGLMAPOBJECTBUFFERATIPROC as function(byval buffer as GLuint) as any ptr
type PFNGLUNMAPOBJECTBUFFERATIPROC as sub(byval buffer as GLuint)


const GL_ATI_meminfo = 1
const GL_VBO_FREE_MEMORY_ATI = &h87FB
const GL_TEXTURE_FREE_MEMORY_ATI = &h87FC
const GL_RENDERBUFFER_FREE_MEMORY_ATI = &h87FD
const GL_ATI_pixel_format_float = 1
const GL_RGBA_FLOAT_MODE_ATI = &h8820
const GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = &h8835
const GL_ATI_pn_triangles = 1
const GL_PN_TRIANGLES_ATI = &h87F0
const GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = &h87F1
const GL_PN_TRIANGLES_POINT_MODE_ATI = &h87F2
const GL_PN_TRIANGLES_NORMAL_MODE_ATI = &h87F3
const GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = &h87F4
const GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = &h87F5
const GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = &h87F6
const GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = &h87F7
const GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = &h87F8
type PFNGLPNTRIANGLESIATIPROC as sub(byval pname as GLenum, byval param as GLint)
type PFNGLPNTRIANGLESFATIPROC as sub(byval pname as GLenum, byval param as GLfloat)


const GL_ATI_separate_stencil = 1
const GL_STENCIL_BACK_FUNC_ATI = &h8800
const GL_STENCIL_BACK_FAIL_ATI = &h8801
const GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = &h8802
const GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = &h8803
type PFNGLSTENCILOPSEPARATEATIPROC as sub(byval face as GLenum, byval sfail as GLenum, byval dpfail as GLenum, byval dppass as GLenum)
type PFNGLSTENCILFUNCSEPARATEATIPROC as sub(byval frontfunc as GLenum, byval backfunc as GLenum, byval ref as GLint, byval mask as GLuint)


const GL_ATI_text_fragment_shader = 1
const GL_TEXT_FRAGMENT_SHADER_ATI = &h8200
const GL_ATI_texture_env_combine3 = 1
const GL_MODULATE_ADD_ATI = &h8744
const GL_MODULATE_SIGNED_ADD_ATI = &h8745
const GL_MODULATE_SUBTRACT_ATI = &h8746
const GL_ATI_texture_float = 1
const GL_RGBA_FLOAT32_ATI = &h8814
const GL_RGB_FLOAT32_ATI = &h8815
const GL_ALPHA_FLOAT32_ATI = &h8816
const GL_INTENSITY_FLOAT32_ATI = &h8817
const GL_LUMINANCE_FLOAT32_ATI = &h8818
const GL_LUMINANCE_ALPHA_FLOAT32_ATI = &h8819
const GL_RGBA_FLOAT16_ATI = &h881A
const GL_RGB_FLOAT16_ATI = &h881B
const GL_ALPHA_FLOAT16_ATI = &h881C
const GL_INTENSITY_FLOAT16_ATI = &h881D
const GL_LUMINANCE_FLOAT16_ATI = &h881E
const GL_LUMINANCE_ALPHA_FLOAT16_ATI = &h881F
const GL_ATI_texture_mirror_once = 1
const GL_MIRROR_CLAMP_ATI = &h8742
const GL_MIRROR_CLAMP_TO_EDGE_ATI = &h8743
const GL_ATI_vertex_array_object = 1
const GL_STATIC_ATI = &h8760
const GL_DYNAMIC_ATI = &h8761
const GL_PRESERVE_ATI = &h8762
const GL_DISCARD_ATI = &h8763
const GL_OBJECT_BUFFER_SIZE_ATI = &h8764
const GL_OBJECT_BUFFER_USAGE_ATI = &h8765
const GL_ARRAY_OBJECT_BUFFER_ATI = &h8766
const GL_ARRAY_OBJECT_OFFSET_ATI = &h8767

type PFNGLNEWOBJECTBUFFERATIPROC as function(byval size as GLsizei, byval pointer as const any ptr, byval usage as GLenum) as GLuint
type PFNGLISOBJECTBUFFERATIPROC as function(byval buffer as GLuint) as GLboolean
type PFNGLUPDATEOBJECTBUFFERATIPROC as sub(byval buffer as GLuint, byval offset as GLuint, byval size as GLsizei, byval pointer as const any ptr, byval preserve as GLenum)
type PFNGLGETOBJECTBUFFERFVATIPROC as sub(byval buffer as GLuint, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETOBJECTBUFFERIVATIPROC as sub(byval buffer as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLFREEOBJECTBUFFERATIPROC as sub(byval buffer as GLuint)
type PFNGLARRAYOBJECTATIPROC as sub(byval array as GLenum, byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval buffer as GLuint, byval offset as GLuint)
type PFNGLGETARRAYOBJECTFVATIPROC as sub(byval array as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETARRAYOBJECTIVATIPROC as sub(byval array as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLVARIANTARRAYOBJECTATIPROC as sub(byval id as GLuint, byval type as GLenum, byval stride as GLsizei, byval buffer as GLuint, byval offset as GLuint)
type PFNGLGETVARIANTARRAYOBJECTFVATIPROC as sub(byval id as GLuint, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETVARIANTARRAYOBJECTIVATIPROC as sub(byval id as GLuint, byval pname as GLenum, byval params as GLint ptr)


const GL_ATI_vertex_attrib_array_object = 1
type PFNGLVERTEXATTRIBARRAYOBJECTATIPROC as sub(byval index as GLuint, byval size as GLint, byval type as GLenum, byval normalized as GLboolean, byval stride as GLsizei, byval buffer as GLuint, byval offset as GLuint)
type PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLint ptr)


const GL_ATI_vertex_streams = 1
const GL_MAX_VERTEX_STREAMS_ATI = &h876B
const GL_VERTEX_STREAM0_ATI = &h876C
const GL_VERTEX_STREAM1_ATI = &h876D
const GL_VERTEX_STREAM2_ATI = &h876E
const GL_VERTEX_STREAM3_ATI = &h876F
const GL_VERTEX_STREAM4_ATI = &h8770
const GL_VERTEX_STREAM5_ATI = &h8771
const GL_VERTEX_STREAM6_ATI = &h8772
const GL_VERTEX_STREAM7_ATI = &h8773
const GL_VERTEX_SOURCE_ATI = &h8774

type PFNGLVERTEXSTREAM1SATIPROC as sub(byval stream as GLenum, byval x as GLshort)
type PFNGLVERTEXSTREAM1SVATIPROC as sub(byval stream as GLenum, byval coords as const GLshort ptr)
type PFNGLVERTEXSTREAM1IATIPROC as sub(byval stream as GLenum, byval x as GLint)
type PFNGLVERTEXSTREAM1IVATIPROC as sub(byval stream as GLenum, byval coords as const GLint ptr)
type PFNGLVERTEXSTREAM1FATIPROC as sub(byval stream as GLenum, byval x as GLfloat)
type PFNGLVERTEXSTREAM1FVATIPROC as sub(byval stream as GLenum, byval coords as const GLfloat ptr)
type PFNGLVERTEXSTREAM1DATIPROC as sub(byval stream as GLenum, byval x as GLdouble)
type PFNGLVERTEXSTREAM1DVATIPROC as sub(byval stream as GLenum, byval coords as const GLdouble ptr)
type PFNGLVERTEXSTREAM2SATIPROC as sub(byval stream as GLenum, byval x as GLshort, byval y as GLshort)
type PFNGLVERTEXSTREAM2SVATIPROC as sub(byval stream as GLenum, byval coords as const GLshort ptr)
type PFNGLVERTEXSTREAM2IATIPROC as sub(byval stream as GLenum, byval x as GLint, byval y as GLint)
type PFNGLVERTEXSTREAM2IVATIPROC as sub(byval stream as GLenum, byval coords as const GLint ptr)
type PFNGLVERTEXSTREAM2FATIPROC as sub(byval stream as GLenum, byval x as GLfloat, byval y as GLfloat)
type PFNGLVERTEXSTREAM2FVATIPROC as sub(byval stream as GLenum, byval coords as const GLfloat ptr)
type PFNGLVERTEXSTREAM2DATIPROC as sub(byval stream as GLenum, byval x as GLdouble, byval y as GLdouble)
type PFNGLVERTEXSTREAM2DVATIPROC as sub(byval stream as GLenum, byval coords as const GLdouble ptr)
type PFNGLVERTEXSTREAM3SATIPROC as sub(byval stream as GLenum, byval x as GLshort, byval y as GLshort, byval z as GLshort)
type PFNGLVERTEXSTREAM3SVATIPROC as sub(byval stream as GLenum, byval coords as const GLshort ptr)
type PFNGLVERTEXSTREAM3IATIPROC as sub(byval stream as GLenum, byval x as GLint, byval y as GLint, byval z as GLint)
type PFNGLVERTEXSTREAM3IVATIPROC as sub(byval stream as GLenum, byval coords as const GLint ptr)
type PFNGLVERTEXSTREAM3FATIPROC as sub(byval stream as GLenum, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLVERTEXSTREAM3FVATIPROC as sub(byval stream as GLenum, byval coords as const GLfloat ptr)
type PFNGLVERTEXSTREAM3DATIPROC as sub(byval stream as GLenum, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
type PFNGLVERTEXSTREAM3DVATIPROC as sub(byval stream as GLenum, byval coords as const GLdouble ptr)
type PFNGLVERTEXSTREAM4SATIPROC as sub(byval stream as GLenum, byval x as GLshort, byval y as GLshort, byval z as GLshort, byval w as GLshort)
type PFNGLVERTEXSTREAM4SVATIPROC as sub(byval stream as GLenum, byval coords as const GLshort ptr)
type PFNGLVERTEXSTREAM4IATIPROC as sub(byval stream as GLenum, byval x as GLint, byval y as GLint, byval z as GLint, byval w as GLint)
type PFNGLVERTEXSTREAM4IVATIPROC as sub(byval stream as GLenum, byval coords as const GLint ptr)
type PFNGLVERTEXSTREAM4FATIPROC as sub(byval stream as GLenum, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat, byval w as GLfloat)
type PFNGLVERTEXSTREAM4FVATIPROC as sub(byval stream as GLenum, byval coords as const GLfloat ptr)
type PFNGLVERTEXSTREAM4DATIPROC as sub(byval stream as GLenum, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble, byval w as GLdouble)
type PFNGLVERTEXSTREAM4DVATIPROC as sub(byval stream as GLenum, byval coords as const GLdouble ptr)
type PFNGLNORMALSTREAM3BATIPROC as sub(byval stream as GLenum, byval nx as GLbyte, byval ny as GLbyte, byval nz as GLbyte)
type PFNGLNORMALSTREAM3BVATIPROC as sub(byval stream as GLenum, byval coords as const GLbyte ptr)
type PFNGLNORMALSTREAM3SATIPROC as sub(byval stream as GLenum, byval nx as GLshort, byval ny as GLshort, byval nz as GLshort)
type PFNGLNORMALSTREAM3SVATIPROC as sub(byval stream as GLenum, byval coords as const GLshort ptr)
type PFNGLNORMALSTREAM3IATIPROC as sub(byval stream as GLenum, byval nx as GLint, byval ny as GLint, byval nz as GLint)
type PFNGLNORMALSTREAM3IVATIPROC as sub(byval stream as GLenum, byval coords as const GLint ptr)
type PFNGLNORMALSTREAM3FATIPROC as sub(byval stream as GLenum, byval nx as GLfloat, byval ny as GLfloat, byval nz as GLfloat)
type PFNGLNORMALSTREAM3FVATIPROC as sub(byval stream as GLenum, byval coords as const GLfloat ptr)
type PFNGLNORMALSTREAM3DATIPROC as sub(byval stream as GLenum, byval nx as GLdouble, byval ny as GLdouble, byval nz as GLdouble)
type PFNGLNORMALSTREAM3DVATIPROC as sub(byval stream as GLenum, byval coords as const GLdouble ptr)
type PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC as sub(byval stream as GLenum)
type PFNGLVERTEXBLENDENVIATIPROC as sub(byval pname as GLenum, byval param as GLint)
type PFNGLVERTEXBLENDENVFATIPROC as sub(byval pname as GLenum, byval param as GLfloat)


const GL_EXT_422_pixels = 1
const GL_422_EXT = &h80CC
const GL_422_REV_EXT = &h80CD
const GL_422_AVERAGE_EXT = &h80CE
const GL_422_REV_AVERAGE_EXT = &h80CF
const GL_EXT_abgr = 1
const GL_ABGR_EXT = &h8000
const GL_EXT_bindable_uniform = 1
const GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = &h8DE2
const GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = &h8DE3
const GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = &h8DE4
const GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = &h8DED
const GL_UNIFORM_BUFFER_EXT = &h8DEE
const GL_UNIFORM_BUFFER_BINDING_EXT = &h8DEF

type PFNGLUNIFORMBUFFEREXTPROC as sub(byval program as GLuint, byval location as GLint, byval buffer as GLuint)
type PFNGLGETUNIFORMBUFFERSIZEEXTPROC as function(byval program as GLuint, byval location as GLint) as GLint
type PFNGLGETUNIFORMOFFSETEXTPROC as function(byval program as GLuint, byval location as GLint) as GLintptr


const GL_EXT_blend_color = 1
const GL_CONSTANT_COLOR_EXT = &h8001
const GL_ONE_MINUS_CONSTANT_COLOR_EXT = &h8002
const GL_CONSTANT_ALPHA_EXT = &h8003
const GL_ONE_MINUS_CONSTANT_ALPHA_EXT = &h8004
const GL_BLEND_COLOR_EXT = &h8005
type PFNGLBLENDCOLOREXTPROC as sub(byval red as GLfloat, byval green as GLfloat, byval blue as GLfloat, byval alpha as GLfloat)


const GL_EXT_blend_equation_separate = 1
const GL_BLEND_EQUATION_RGB_EXT = &h8009
const GL_BLEND_EQUATION_ALPHA_EXT = &h883D
type PFNGLBLENDEQUATIONSEPARATEEXTPROC as sub(byval modeRGB as GLenum, byval modeAlpha as GLenum)


const GL_EXT_blend_func_separate = 1
const GL_BLEND_DST_RGB_EXT = &h80C8
const GL_BLEND_SRC_RGB_EXT = &h80C9
const GL_BLEND_DST_ALPHA_EXT = &h80CA
const GL_BLEND_SRC_ALPHA_EXT = &h80CB
type PFNGLBLENDFUNCSEPARATEEXTPROC as sub(byval sfactorRGB as GLenum, byval dfactorRGB as GLenum, byval sfactorAlpha as GLenum, byval dfactorAlpha as GLenum)


const GL_EXT_blend_logic_op = 1
const GL_EXT_blend_minmax = 1
const GL_MIN_EXT = &h8007
const GL_MAX_EXT = &h8008
const GL_FUNC_ADD_EXT = &h8006
const GL_BLEND_EQUATION_EXT = &h8009
type PFNGLBLENDEQUATIONEXTPROC as sub(byval mode as GLenum)


const GL_EXT_blend_subtract = 1
const GL_FUNC_SUBTRACT_EXT = &h800A
const GL_FUNC_REVERSE_SUBTRACT_EXT = &h800B
const GL_EXT_clip_volume_hint = 1
const GL_CLIP_VOLUME_CLIPPING_HINT_EXT = &h80F0
const GL_EXT_cmyka = 1
const GL_CMYK_EXT = &h800C
const GL_CMYKA_EXT = &h800D
const GL_PACK_CMYK_HINT_EXT = &h800E
const GL_UNPACK_CMYK_HINT_EXT = &h800F
const GL_EXT_color_subtable = 1
type PFNGLCOLORSUBTABLEEXTPROC as sub(byval target as GLenum, byval start as GLsizei, byval count as GLsizei, byval format as GLenum, byval type as GLenum, byval data as const any ptr)
type PFNGLCOPYCOLORSUBTABLEEXTPROC as sub(byval target as GLenum, byval start as GLsizei, byval x as GLint, byval y as GLint, byval width as GLsizei)


const GL_EXT_compiled_vertex_array = 1
const GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = &h81A8
const GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = &h81A9
type PFNGLLOCKARRAYSEXTPROC as sub(byval first as GLint, byval count as GLsizei)
type PFNGLUNLOCKARRAYSEXTPROC as sub()


const GL_EXT_convolution = 1
const GL_CONVOLUTION_1D_EXT = &h8010
const GL_CONVOLUTION_2D_EXT = &h8011
const GL_SEPARABLE_2D_EXT = &h8012
const GL_CONVOLUTION_BORDER_MODE_EXT = &h8013
const GL_CONVOLUTION_FILTER_SCALE_EXT = &h8014
const GL_CONVOLUTION_FILTER_BIAS_EXT = &h8015
const GL_REDUCE_EXT = &h8016
const GL_CONVOLUTION_FORMAT_EXT = &h8017
const GL_CONVOLUTION_WIDTH_EXT = &h8018
const GL_CONVOLUTION_HEIGHT_EXT = &h8019
const GL_MAX_CONVOLUTION_WIDTH_EXT = &h801A
const GL_MAX_CONVOLUTION_HEIGHT_EXT = &h801B
const GL_POST_CONVOLUTION_RED_SCALE_EXT = &h801C
const GL_POST_CONVOLUTION_GREEN_SCALE_EXT = &h801D
const GL_POST_CONVOLUTION_BLUE_SCALE_EXT = &h801E
const GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = &h801F
const GL_POST_CONVOLUTION_RED_BIAS_EXT = &h8020
const GL_POST_CONVOLUTION_GREEN_BIAS_EXT = &h8021
const GL_POST_CONVOLUTION_BLUE_BIAS_EXT = &h8022
const GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = &h8023

type PFNGLCONVOLUTIONFILTER1DEXTPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval width as GLsizei, byval format as GLenum, byval type as GLenum, byval image as const any ptr)
type PFNGLCONVOLUTIONFILTER2DEXTPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval type as GLenum, byval image as const any ptr)
type PFNGLCONVOLUTIONPARAMETERFEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfloat)
type PFNGLCONVOLUTIONPARAMETERFVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLCONVOLUTIONPARAMETERIEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint)
type PFNGLCONVOLUTIONPARAMETERIVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval x as GLint, byval y as GLint, byval width as GLsizei)
type PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)
type PFNGLGETCONVOLUTIONFILTEREXTPROC as sub(byval target as GLenum, byval format as GLenum, byval type as GLenum, byval image as any ptr)
type PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETSEPARABLEFILTEREXTPROC as sub(byval target as GLenum, byval format as GLenum, byval type as GLenum, byval row as any ptr, byval column as any ptr, byval span as any ptr)
type PFNGLSEPARABLEFILTER2DEXTPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval type as GLenum, byval row as const any ptr, byval column as const any ptr)


const GL_EXT_coordinate_frame = 1
const GL_TANGENT_ARRAY_EXT = &h8439
const GL_BINORMAL_ARRAY_EXT = &h843A
const GL_CURRENT_TANGENT_EXT = &h843B
const GL_CURRENT_BINORMAL_EXT = &h843C
const GL_TANGENT_ARRAY_TYPE_EXT = &h843E
const GL_TANGENT_ARRAY_STRIDE_EXT = &h843F
const GL_BINORMAL_ARRAY_TYPE_EXT = &h8440
const GL_BINORMAL_ARRAY_STRIDE_EXT = &h8441
const GL_TANGENT_ARRAY_POINTER_EXT = &h8442
const GL_BINORMAL_ARRAY_POINTER_EXT = &h8443
const GL_MAP1_TANGENT_EXT = &h8444
const GL_MAP2_TANGENT_EXT = &h8445
const GL_MAP1_BINORMAL_EXT = &h8446
const GL_MAP2_BINORMAL_EXT = &h8447

type PFNGLTANGENT3BEXTPROC as sub(byval tx as GLbyte, byval ty as GLbyte, byval tz as GLbyte)
type PFNGLTANGENT3BVEXTPROC as sub(byval v as const GLbyte ptr)
type PFNGLTANGENT3DEXTPROC as sub(byval tx as GLdouble, byval ty as GLdouble, byval tz as GLdouble)
type PFNGLTANGENT3DVEXTPROC as sub(byval v as const GLdouble ptr)
type PFNGLTANGENT3FEXTPROC as sub(byval tx as GLfloat, byval ty as GLfloat, byval tz as GLfloat)
type PFNGLTANGENT3FVEXTPROC as sub(byval v as const GLfloat ptr)
type PFNGLTANGENT3IEXTPROC as sub(byval tx as GLint, byval ty as GLint, byval tz as GLint)
type PFNGLTANGENT3IVEXTPROC as sub(byval v as const GLint ptr)
type PFNGLTANGENT3SEXTPROC as sub(byval tx as GLshort, byval ty as GLshort, byval tz as GLshort)
type PFNGLTANGENT3SVEXTPROC as sub(byval v as const GLshort ptr)
type PFNGLBINORMAL3BEXTPROC as sub(byval bx as GLbyte, byval by as GLbyte, byval bz as GLbyte)
type PFNGLBINORMAL3BVEXTPROC as sub(byval v as const GLbyte ptr)
type PFNGLBINORMAL3DEXTPROC as sub(byval bx as GLdouble, byval by as GLdouble, byval bz as GLdouble)
type PFNGLBINORMAL3DVEXTPROC as sub(byval v as const GLdouble ptr)
type PFNGLBINORMAL3FEXTPROC as sub(byval bx as GLfloat, byval by as GLfloat, byval bz as GLfloat)
type PFNGLBINORMAL3FVEXTPROC as sub(byval v as const GLfloat ptr)
type PFNGLBINORMAL3IEXTPROC as sub(byval bx as GLint, byval by as GLint, byval bz as GLint)
type PFNGLBINORMAL3IVEXTPROC as sub(byval v as const GLint ptr)
type PFNGLBINORMAL3SEXTPROC as sub(byval bx as GLshort, byval by as GLshort, byval bz as GLshort)
type PFNGLBINORMAL3SVEXTPROC as sub(byval v as const GLshort ptr)
type PFNGLTANGENTPOINTEREXTPROC as sub(byval type as GLenum, byval stride as GLsizei, byval pointer as const any ptr)
type PFNGLBINORMALPOINTEREXTPROC as sub(byval type as GLenum, byval stride as GLsizei, byval pointer as const any ptr)


const GL_EXT_copy_texture = 1
type PFNGLCOPYTEXIMAGE1DEXTPROC as sub(byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval x as GLint, byval y as GLint, byval width as GLsizei, byval border as GLint)
type PFNGLCOPYTEXIMAGE2DEXTPROC as sub(byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei, byval border as GLint)
type PFNGLCOPYTEXSUBIMAGE1DEXTPROC as sub(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval x as GLint, byval y as GLint, byval width as GLsizei)
type PFNGLCOPYTEXSUBIMAGE2DEXTPROC as sub(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)
type PFNGLCOPYTEXSUBIMAGE3DEXTPROC as sub(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)


const GL_EXT_cull_vertex = 1
const GL_CULL_VERTEX_EXT = &h81AA
const GL_CULL_VERTEX_EYE_POSITION_EXT = &h81AB
const GL_CULL_VERTEX_OBJECT_POSITION_EXT = &h81AC
type PFNGLCULLPARAMETERDVEXTPROC as sub(byval pname as GLenum, byval params as GLdouble ptr)
type PFNGLCULLPARAMETERFVEXTPROC as sub(byval pname as GLenum, byval params as GLfloat ptr)


const GL_EXT_debug_label = 1
const GL_PROGRAM_PIPELINE_OBJECT_EXT = &h8A4F
const GL_PROGRAM_OBJECT_EXT = &h8B40
const GL_SHADER_OBJECT_EXT = &h8B48
const GL_BUFFER_OBJECT_EXT = &h9151
const GL_QUERY_OBJECT_EXT = &h9153
const GL_VERTEX_ARRAY_OBJECT_EXT = &h9154
type PFNGLLABELOBJECTEXTPROC as sub(byval type as GLenum, byval object as GLuint, byval length as GLsizei, byval label as const GLchar ptr)
type PFNGLGETOBJECTLABELEXTPROC as sub(byval type as GLenum, byval object as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval label as GLchar ptr)


const GL_EXT_debug_marker = 1
type PFNGLINSERTEVENTMARKEREXTPROC as sub(byval length as GLsizei, byval marker as const GLchar ptr)
type PFNGLPUSHGROUPMARKEREXTPROC as sub(byval length as GLsizei, byval marker as const GLchar ptr)
type PFNGLPOPGROUPMARKEREXTPROC as sub()


const GL_EXT_depth_bounds_test = 1
const GL_DEPTH_BOUNDS_TEST_EXT = &h8890
const GL_DEPTH_BOUNDS_EXT = &h8891
type PFNGLDEPTHBOUNDSEXTPROC as sub(byval zmin as GLclampd, byval zmax as GLclampd)


const GL_EXT_direct_state_access = 1
const GL_PROGRAM_MATRIX_EXT = &h8E2D
const GL_TRANSPOSE_PROGRAM_MATRIX_EXT = &h8E2E
const GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = &h8E2F

type PFNGLMATRIXLOADFEXTPROC as sub(byval mode as GLenum, byval m as const GLfloat ptr)
type PFNGLMATRIXLOADDEXTPROC as sub(byval mode as GLenum, byval m as const GLdouble ptr)
type PFNGLMATRIXMULTFEXTPROC as sub(byval mode as GLenum, byval m as const GLfloat ptr)
type PFNGLMATRIXMULTDEXTPROC as sub(byval mode as GLenum, byval m as const GLdouble ptr)
type PFNGLMATRIXLOADIDENTITYEXTPROC as sub(byval mode as GLenum)
type PFNGLMATRIXROTATEFEXTPROC as sub(byval mode as GLenum, byval angle as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLMATRIXROTATEDEXTPROC as sub(byval mode as GLenum, byval angle as GLdouble, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
type PFNGLMATRIXSCALEFEXTPROC as sub(byval mode as GLenum, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLMATRIXSCALEDEXTPROC as sub(byval mode as GLenum, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
type PFNGLMATRIXTRANSLATEFEXTPROC as sub(byval mode as GLenum, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLMATRIXTRANSLATEDEXTPROC as sub(byval mode as GLenum, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
type PFNGLMATRIXFRUSTUMEXTPROC as sub(byval mode as GLenum, byval left as GLdouble, byval right as GLdouble, byval bottom as GLdouble, byval top as GLdouble, byval zNear as GLdouble, byval zFar as GLdouble)
type PFNGLMATRIXORTHOEXTPROC as sub(byval mode as GLenum, byval left as GLdouble, byval right as GLdouble, byval bottom as GLdouble, byval top as GLdouble, byval zNear as GLdouble, byval zFar as GLdouble)
type PFNGLMATRIXPOPEXTPROC as sub(byval mode as GLenum)
type PFNGLMATRIXPUSHEXTPROC as sub(byval mode as GLenum)
type PFNGLCLIENTATTRIBDEFAULTEXTPROC as sub(byval mask as GLbitfield)
type PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC as sub(byval mask as GLbitfield)
type PFNGLTEXTUREPARAMETERFEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval pname as GLenum, byval param as GLfloat)
type PFNGLTEXTUREPARAMETERFVEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLTEXTUREPARAMETERIEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval pname as GLenum, byval param as GLint)
type PFNGLTEXTUREPARAMETERIVEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLTEXTUREIMAGE1DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval internalformat as GLint, byval width as GLsizei, byval border as GLint, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLTEXTUREIMAGE2DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval internalformat as GLint, byval width as GLsizei, byval height as GLsizei, byval border as GLint, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLTEXTURESUBIMAGE1DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval width as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLTEXTURESUBIMAGE2DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLCOPYTEXTUREIMAGE1DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval x as GLint, byval y as GLint, byval width as GLsizei, byval border as GLint)
type PFNGLCOPYTEXTUREIMAGE2DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei, byval border as GLint)
type PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval x as GLint, byval y as GLint, byval width as GLsizei)
type PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)
type PFNGLGETTEXTUREIMAGEEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval format as GLenum, byval type as GLenum, byval pixels as any ptr)
type PFNGLGETTEXTUREPARAMETERFVEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETTEXTUREPARAMETERIVEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLTEXTUREIMAGE3DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval internalformat as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval border as GLint, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLTEXTURESUBIMAGE3DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)
type PFNGLBINDMULTITEXTUREEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval texture as GLuint)
type PFNGLMULTITEXCOORDPOINTEREXTPROC as sub(byval texunit as GLenum, byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval pointer as const any ptr)
type PFNGLMULTITEXENVFEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval pname as GLenum, byval param as GLfloat)
type PFNGLMULTITEXENVFVEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLMULTITEXENVIEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval pname as GLenum, byval param as GLint)
type PFNGLMULTITEXENVIVEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLMULTITEXGENDEXTPROC as sub(byval texunit as GLenum, byval coord as GLenum, byval pname as GLenum, byval param as GLdouble)
type PFNGLMULTITEXGENDVEXTPROC as sub(byval texunit as GLenum, byval coord as GLenum, byval pname as GLenum, byval params as const GLdouble ptr)
type PFNGLMULTITEXGENFEXTPROC as sub(byval texunit as GLenum, byval coord as GLenum, byval pname as GLenum, byval param as GLfloat)
type PFNGLMULTITEXGENFVEXTPROC as sub(byval texunit as GLenum, byval coord as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLMULTITEXGENIEXTPROC as sub(byval texunit as GLenum, byval coord as GLenum, byval pname as GLenum, byval param as GLint)
type PFNGLMULTITEXGENIVEXTPROC as sub(byval texunit as GLenum, byval coord as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLGETMULTITEXENVFVEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETMULTITEXENVIVEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETMULTITEXGENDVEXTPROC as sub(byval texunit as GLenum, byval coord as GLenum, byval pname as GLenum, byval params as GLdouble ptr)
type PFNGLGETMULTITEXGENFVEXTPROC as sub(byval texunit as GLenum, byval coord as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETMULTITEXGENIVEXTPROC as sub(byval texunit as GLenum, byval coord as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLMULTITEXPARAMETERIEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval pname as GLenum, byval param as GLint)
type PFNGLMULTITEXPARAMETERIVEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLMULTITEXPARAMETERFEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval pname as GLenum, byval param as GLfloat)
type PFNGLMULTITEXPARAMETERFVEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLMULTITEXIMAGE1DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval internalformat as GLint, byval width as GLsizei, byval border as GLint, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLMULTITEXIMAGE2DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval internalformat as GLint, byval width as GLsizei, byval height as GLsizei, byval border as GLint, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLMULTITEXSUBIMAGE1DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval width as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLMULTITEXSUBIMAGE2DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLCOPYMULTITEXIMAGE1DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval x as GLint, byval y as GLint, byval width as GLsizei, byval border as GLint)
type PFNGLCOPYMULTITEXIMAGE2DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei, byval border as GLint)
type PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval x as GLint, byval y as GLint, byval width as GLsizei)
type PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)
type PFNGLGETMULTITEXIMAGEEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval format as GLenum, byval type as GLenum, byval pixels as any ptr)
type PFNGLGETMULTITEXPARAMETERFVEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETMULTITEXPARAMETERIVEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLMULTITEXIMAGE3DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval internalformat as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval border as GLint, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLMULTITEXSUBIMAGE3DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval x as GLint, byval y as GLint, byval width as GLsizei, byval height as GLsizei)
type PFNGLENABLECLIENTSTATEINDEXEDEXTPROC as sub(byval array as GLenum, byval index as GLuint)
type PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC as sub(byval array as GLenum, byval index as GLuint)
type PFNGLGETFLOATINDEXEDVEXTPROC as sub(byval target as GLenum, byval index as GLuint, byval data as GLfloat ptr)
type PFNGLGETDOUBLEINDEXEDVEXTPROC as sub(byval target as GLenum, byval index as GLuint, byval data as GLdouble ptr)
type PFNGLGETPOINTERINDEXEDVEXTPROC as sub(byval target as GLenum, byval index as GLuint, byval data as any ptr ptr)
type PFNGLENABLEINDEXEDEXTPROC as sub(byval target as GLenum, byval index as GLuint)
type PFNGLDISABLEINDEXEDEXTPROC as sub(byval target as GLenum, byval index as GLuint)
type PFNGLISENABLEDINDEXEDEXTPROC as function(byval target as GLenum, byval index as GLuint) as GLboolean
type PFNGLGETINTEGERINDEXEDVEXTPROC as sub(byval target as GLenum, byval index as GLuint, byval data as GLint ptr)
type PFNGLGETBOOLEANINDEXEDVEXTPROC as sub(byval target as GLenum, byval index as GLuint, byval data as GLboolean ptr)
type PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval border as GLint, byval imageSize as GLsizei, byval bits as const any ptr)
type PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval border as GLint, byval imageSize as GLsizei, byval bits as const any ptr)
type PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval width as GLsizei, byval border as GLint, byval imageSize as GLsizei, byval bits as const any ptr)
type PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval format as GLenum, byval imageSize as GLsizei, byval bits as const any ptr)
type PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval imageSize as GLsizei, byval bits as const any ptr)
type PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval width as GLsizei, byval format as GLenum, byval imageSize as GLsizei, byval bits as const any ptr)
type PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval lod as GLint, byval img as any ptr)
type PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval border as GLint, byval imageSize as GLsizei, byval bits as const any ptr)
type PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval border as GLint, byval imageSize as GLsizei, byval bits as const any ptr)
type PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval width as GLsizei, byval border as GLint, byval imageSize as GLsizei, byval bits as const any ptr)
type PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval format as GLenum, byval imageSize as GLsizei, byval bits as const any ptr)
type PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval imageSize as GLsizei, byval bits as const any ptr)
type PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval width as GLsizei, byval format as GLenum, byval imageSize as GLsizei, byval bits as const any ptr)
type PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval lod as GLint, byval img as any ptr)
type PFNGLMATRIXLOADTRANSPOSEFEXTPROC as sub(byval mode as GLenum, byval m as const GLfloat ptr)
type PFNGLMATRIXLOADTRANSPOSEDEXTPROC as sub(byval mode as GLenum, byval m as const GLdouble ptr)
type PFNGLMATRIXMULTTRANSPOSEFEXTPROC as sub(byval mode as GLenum, byval m as const GLfloat ptr)
type PFNGLMATRIXMULTTRANSPOSEDEXTPROC as sub(byval mode as GLenum, byval m as const GLdouble ptr)
type PFNGLNAMEDBUFFERDATAEXTPROC as sub(byval buffer as GLuint, byval size as GLsizeiptr, byval data as const any ptr, byval usage as GLenum)
type PFNGLNAMEDBUFFERSUBDATAEXTPROC as sub(byval buffer as GLuint, byval offset as GLintptr, byval size as GLsizeiptr, byval data as const any ptr)
type PFNGLMAPNAMEDBUFFEREXTPROC as function(byval buffer as GLuint, byval access as GLenum) as any ptr
type PFNGLUNMAPNAMEDBUFFEREXTPROC as function(byval buffer as GLuint) as GLboolean
type PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC as sub(byval buffer as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETNAMEDBUFFERPOINTERVEXTPROC as sub(byval buffer as GLuint, byval pname as GLenum, byval params as any ptr ptr)
type PFNGLGETNAMEDBUFFERSUBDATAEXTPROC as sub(byval buffer as GLuint, byval offset as GLintptr, byval size as GLsizeiptr, byval data as any ptr)
type PFNGLPROGRAMUNIFORM1FEXTPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLfloat)
type PFNGLPROGRAMUNIFORM2FEXTPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLfloat, byval v1 as GLfloat)
type PFNGLPROGRAMUNIFORM3FEXTPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLfloat, byval v1 as GLfloat, byval v2 as GLfloat)
type PFNGLPROGRAMUNIFORM4FEXTPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLfloat, byval v1 as GLfloat, byval v2 as GLfloat, byval v3 as GLfloat)
type PFNGLPROGRAMUNIFORM1IEXTPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLint)
type PFNGLPROGRAMUNIFORM2IEXTPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLint, byval v1 as GLint)
type PFNGLPROGRAMUNIFORM3IEXTPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLint, byval v1 as GLint, byval v2 as GLint)
type PFNGLPROGRAMUNIFORM4IEXTPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLint, byval v1 as GLint, byval v2 as GLint, byval v3 as GLint)
type PFNGLPROGRAMUNIFORM1FVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORM2FVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORM3FVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORM4FVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORM1IVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLint ptr)
type PFNGLPROGRAMUNIFORM2IVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLint ptr)
type PFNGLPROGRAMUNIFORM3IVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLint ptr)
type PFNGLPROGRAMUNIFORM4IVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLint ptr)
type PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLfloat ptr)
type PFNGLTEXTUREBUFFEREXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval internalformat as GLenum, byval buffer as GLuint)
type PFNGLMULTITEXBUFFEREXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval internalformat as GLenum, byval buffer as GLuint)
type PFNGLTEXTUREPARAMETERIIVEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLTEXTUREPARAMETERIUIVEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval pname as GLenum, byval params as const GLuint ptr)
type PFNGLGETTEXTUREPARAMETERIIVEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETTEXTUREPARAMETERIUIVEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval pname as GLenum, byval params as GLuint ptr)
type PFNGLMULTITEXPARAMETERIIVEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLMULTITEXPARAMETERIUIVEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval pname as GLenum, byval params as const GLuint ptr)
type PFNGLGETMULTITEXPARAMETERIIVEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETMULTITEXPARAMETERIUIVEXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval pname as GLenum, byval params as GLuint ptr)
type PFNGLPROGRAMUNIFORM1UIEXTPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLuint)
type PFNGLPROGRAMUNIFORM2UIEXTPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLuint, byval v1 as GLuint)
type PFNGLPROGRAMUNIFORM3UIEXTPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLuint, byval v1 as GLuint, byval v2 as GLuint)
type PFNGLPROGRAMUNIFORM4UIEXTPROC as sub(byval program as GLuint, byval location as GLint, byval v0 as GLuint, byval v1 as GLuint, byval v2 as GLuint, byval v3 as GLuint)
type PFNGLPROGRAMUNIFORM1UIVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLuint ptr)
type PFNGLPROGRAMUNIFORM2UIVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLuint ptr)
type PFNGLPROGRAMUNIFORM3UIVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLuint ptr)
type PFNGLPROGRAMUNIFORM4UIVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLuint ptr)
type PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval index as GLuint, byval count as GLsizei, byval params as const GLfloat ptr)
type PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval index as GLuint, byval x as GLint, byval y as GLint, byval z as GLint, byval w as GLint)
type PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval index as GLuint, byval params as const GLint ptr)
type PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval index as GLuint, byval count as GLsizei, byval params as const GLint ptr)
type PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval index as GLuint, byval x as GLuint, byval y as GLuint, byval z as GLuint, byval w as GLuint)
type PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval index as GLuint, byval params as const GLuint ptr)
type PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval index as GLuint, byval count as GLsizei, byval params as const GLuint ptr)
type PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval index as GLuint, byval params as GLint ptr)
type PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval index as GLuint, byval params as GLuint ptr)
type PFNGLENABLECLIENTSTATEIEXTPROC as sub(byval array as GLenum, byval index as GLuint)
type PFNGLDISABLECLIENTSTATEIEXTPROC as sub(byval array as GLenum, byval index as GLuint)
type PFNGLGETFLOATI_VEXTPROC as sub(byval pname as GLenum, byval index as GLuint, byval params as GLfloat ptr)
type PFNGLGETDOUBLEI_VEXTPROC as sub(byval pname as GLenum, byval index as GLuint, byval params as GLdouble ptr)
type PFNGLGETPOINTERI_VEXTPROC as sub(byval pname as GLenum, byval index as GLuint, byval params as any ptr ptr)
type PFNGLNAMEDPROGRAMSTRINGEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval format as GLenum, byval len as GLsizei, byval string as const any ptr)
type PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval index as GLuint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble, byval w as GLdouble)
type PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval index as GLuint, byval params as const GLdouble ptr)
type PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval index as GLuint, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat, byval w as GLfloat)
type PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval index as GLuint, byval params as const GLfloat ptr)
type PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval index as GLuint, byval params as GLdouble ptr)
type PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval index as GLuint, byval params as GLfloat ptr)
type PFNGLGETNAMEDPROGRAMIVEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETNAMEDPROGRAMSTRINGEXTPROC as sub(byval program as GLuint, byval target as GLenum, byval pname as GLenum, byval string as any ptr)
type PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC as sub(byval renderbuffer as GLuint, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei)
type PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC as sub(byval renderbuffer as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC as sub(byval renderbuffer as GLuint, byval samples as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei)
type PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC as sub(byval renderbuffer as GLuint, byval coverageSamples as GLsizei, byval colorSamples as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei)
type PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC as function(byval framebuffer as GLuint, byval target as GLenum) as GLenum
type PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC as sub(byval framebuffer as GLuint, byval attachment as GLenum, byval textarget as GLenum, byval texture as GLuint, byval level as GLint)
type PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC as sub(byval framebuffer as GLuint, byval attachment as GLenum, byval textarget as GLenum, byval texture as GLuint, byval level as GLint)
type PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC as sub(byval framebuffer as GLuint, byval attachment as GLenum, byval textarget as GLenum, byval texture as GLuint, byval level as GLint, byval zoffset as GLint)
type PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC as sub(byval framebuffer as GLuint, byval attachment as GLenum, byval renderbuffertarget as GLenum, byval renderbuffer as GLuint)
type PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC as sub(byval framebuffer as GLuint, byval attachment as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGENERATETEXTUREMIPMAPEXTPROC as sub(byval texture as GLuint, byval target as GLenum)
type PFNGLGENERATEMULTITEXMIPMAPEXTPROC as sub(byval texunit as GLenum, byval target as GLenum)
type PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC as sub(byval framebuffer as GLuint, byval mode as GLenum)
type PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC as sub(byval framebuffer as GLuint, byval n as GLsizei, byval bufs as const GLenum ptr)
type PFNGLFRAMEBUFFERREADBUFFEREXTPROC as sub(byval framebuffer as GLuint, byval mode as GLenum)
type PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC as sub(byval framebuffer as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC as sub(byval readBuffer as GLuint, byval writeBuffer as GLuint, byval readOffset as GLintptr, byval writeOffset as GLintptr, byval size as GLsizeiptr)
type PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC as sub(byval framebuffer as GLuint, byval attachment as GLenum, byval texture as GLuint, byval level as GLint)
type PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC as sub(byval framebuffer as GLuint, byval attachment as GLenum, byval texture as GLuint, byval level as GLint, byval layer as GLint)
type PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC as sub(byval framebuffer as GLuint, byval attachment as GLenum, byval texture as GLuint, byval level as GLint, byval face as GLenum)
type PFNGLTEXTURERENDERBUFFEREXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval renderbuffer as GLuint)
type PFNGLMULTITEXRENDERBUFFEREXTPROC as sub(byval texunit as GLenum, byval target as GLenum, byval renderbuffer as GLuint)
type PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC as sub(byval vaobj as GLuint, byval buffer as GLuint, byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval offset as GLintptr)
type PFNGLVERTEXARRAYCOLOROFFSETEXTPROC as sub(byval vaobj as GLuint, byval buffer as GLuint, byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval offset as GLintptr)
type PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC as sub(byval vaobj as GLuint, byval buffer as GLuint, byval stride as GLsizei, byval offset as GLintptr)
type PFNGLVERTEXARRAYINDEXOFFSETEXTPROC as sub(byval vaobj as GLuint, byval buffer as GLuint, byval type as GLenum, byval stride as GLsizei, byval offset as GLintptr)
type PFNGLVERTEXARRAYNORMALOFFSETEXTPROC as sub(byval vaobj as GLuint, byval buffer as GLuint, byval type as GLenum, byval stride as GLsizei, byval offset as GLintptr)
type PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC as sub(byval vaobj as GLuint, byval buffer as GLuint, byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval offset as GLintptr)
type PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC as sub(byval vaobj as GLuint, byval buffer as GLuint, byval texunit as GLenum, byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval offset as GLintptr)
type PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC as sub(byval vaobj as GLuint, byval buffer as GLuint, byval type as GLenum, byval stride as GLsizei, byval offset as GLintptr)
type PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC as sub(byval vaobj as GLuint, byval buffer as GLuint, byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval offset as GLintptr)
type PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC as sub(byval vaobj as GLuint, byval buffer as GLuint, byval index as GLuint, byval size as GLint, byval type as GLenum, byval normalized as GLboolean, byval stride as GLsizei, byval offset as GLintptr)
type PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC as sub(byval vaobj as GLuint, byval buffer as GLuint, byval index as GLuint, byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval offset as GLintptr)
type PFNGLENABLEVERTEXARRAYEXTPROC as sub(byval vaobj as GLuint, byval array as GLenum)
type PFNGLDISABLEVERTEXARRAYEXTPROC as sub(byval vaobj as GLuint, byval array as GLenum)
type PFNGLENABLEVERTEXARRAYATTRIBEXTPROC as sub(byval vaobj as GLuint, byval index as GLuint)
type PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC as sub(byval vaobj as GLuint, byval index as GLuint)
type PFNGLGETVERTEXARRAYINTEGERVEXTPROC as sub(byval vaobj as GLuint, byval pname as GLenum, byval param as GLint ptr)
type PFNGLGETVERTEXARRAYPOINTERVEXTPROC as sub(byval vaobj as GLuint, byval pname as GLenum, byval param as any ptr ptr)
type PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC as sub(byval vaobj as GLuint, byval index as GLuint, byval pname as GLenum, byval param as GLint ptr)
type PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC as sub(byval vaobj as GLuint, byval index as GLuint, byval pname as GLenum, byval param as any ptr ptr)
type PFNGLMAPNAMEDBUFFERRANGEEXTPROC as function(byval buffer as GLuint, byval offset as GLintptr, byval length as GLsizeiptr, byval access as GLbitfield) as any ptr
type PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC as sub(byval buffer as GLuint, byval offset as GLintptr, byval length as GLsizeiptr)
type PFNGLNAMEDBUFFERSTORAGEEXTPROC as sub(byval buffer as GLuint, byval size as GLsizeiptr, byval data as const any ptr, byval flags as GLbitfield)
type PFNGLCLEARNAMEDBUFFERDATAEXTPROC as sub(byval buffer as GLuint, byval internalformat as GLenum, byval format as GLenum, byval type as GLenum, byval data as const any ptr)
type PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC as sub(byval buffer as GLuint, byval internalformat as GLenum, byval offset as GLsizeiptr, byval size as GLsizeiptr, byval format as GLenum, byval type as GLenum, byval data as const any ptr)
type PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC as sub(byval framebuffer as GLuint, byval pname as GLenum, byval param as GLint)
type PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC as sub(byval framebuffer as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLPROGRAMUNIFORM1DEXTPROC as sub(byval program as GLuint, byval location as GLint, byval x as GLdouble)
type PFNGLPROGRAMUNIFORM2DEXTPROC as sub(byval program as GLuint, byval location as GLint, byval x as GLdouble, byval y as GLdouble)
type PFNGLPROGRAMUNIFORM3DEXTPROC as sub(byval program as GLuint, byval location as GLint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
type PFNGLPROGRAMUNIFORM4DEXTPROC as sub(byval program as GLuint, byval location as GLint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble, byval w as GLdouble)
type PFNGLPROGRAMUNIFORM1DVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORM2DVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORM3DVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORM4DVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval transpose as GLboolean, byval value as const GLdouble ptr)
type PFNGLTEXTUREBUFFERRANGEEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval internalformat as GLenum, byval buffer as GLuint, byval offset as GLintptr, byval size as GLsizeiptr)
type PFNGLTEXTURESTORAGE1DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval levels as GLsizei, byval internalformat as GLenum, byval width as GLsizei)
type PFNGLTEXTURESTORAGE2DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval levels as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei)
type PFNGLTEXTURESTORAGE3DEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval levels as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei)
type PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval samples as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval fixedsamplelocations as GLboolean)
type PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC as sub(byval texture as GLuint, byval target as GLenum, byval samples as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval fixedsamplelocations as GLboolean)
type PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC as sub(byval vaobj as GLuint, byval bindingindex as GLuint, byval buffer as GLuint, byval offset as GLintptr, byval stride as GLsizei)
type PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC as sub(byval vaobj as GLuint, byval attribindex as GLuint, byval size as GLint, byval type as GLenum, byval normalized as GLboolean, byval relativeoffset as GLuint)
type PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC as sub(byval vaobj as GLuint, byval attribindex as GLuint, byval size as GLint, byval type as GLenum, byval relativeoffset as GLuint)
type PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC as sub(byval vaobj as GLuint, byval attribindex as GLuint, byval size as GLint, byval type as GLenum, byval relativeoffset as GLuint)
type PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC as sub(byval vaobj as GLuint, byval attribindex as GLuint, byval bindingindex as GLuint)
type PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC as sub(byval vaobj as GLuint, byval bindingindex as GLuint, byval divisor as GLuint)
type PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC as sub(byval vaobj as GLuint, byval buffer as GLuint, byval index as GLuint, byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval offset as GLintptr)
type PFNGLTEXTUREPAGECOMMITMENTEXTPROC as sub(byval texture as GLuint, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval resident as GLboolean)
type PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC as sub(byval vaobj as GLuint, byval index as GLuint, byval divisor as GLuint)


const GL_EXT_draw_buffers2 = 1
type PFNGLCOLORMASKINDEXEDEXTPROC as sub(byval index as GLuint, byval r as GLboolean, byval g as GLboolean, byval b as GLboolean, byval a as GLboolean)


const GL_EXT_draw_instanced = 1
type PFNGLDRAWARRAYSINSTANCEDEXTPROC as sub(byval mode as GLenum, byval start as GLint, byval count as GLsizei, byval primcount as GLsizei)
type PFNGLDRAWELEMENTSINSTANCEDEXTPROC as sub(byval mode as GLenum, byval count as GLsizei, byval type as GLenum, byval indices as const any ptr, byval primcount as GLsizei)


const GL_EXT_draw_range_elements = 1
const GL_MAX_ELEMENTS_VERTICES_EXT = &h80E8
const GL_MAX_ELEMENTS_INDICES_EXT = &h80E9
type PFNGLDRAWRANGEELEMENTSEXTPROC as sub(byval mode as GLenum, byval start as GLuint, byval end as GLuint, byval count as GLsizei, byval type as GLenum, byval indices as const any ptr)


const GL_EXT_fog_coord = 1
const GL_FOG_COORDINATE_SOURCE_EXT = &h8450
const GL_FOG_COORDINATE_EXT = &h8451
const GL_FRAGMENT_DEPTH_EXT = &h8452
const GL_CURRENT_FOG_COORDINATE_EXT = &h8453
const GL_FOG_COORDINATE_ARRAY_TYPE_EXT = &h8454
const GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = &h8455
const GL_FOG_COORDINATE_ARRAY_POINTER_EXT = &h8456
const GL_FOG_COORDINATE_ARRAY_EXT = &h8457

type PFNGLFOGCOORDFEXTPROC as sub(byval coord as GLfloat)
type PFNGLFOGCOORDFVEXTPROC as sub(byval coord as const GLfloat ptr)
type PFNGLFOGCOORDDEXTPROC as sub(byval coord as GLdouble)
type PFNGLFOGCOORDDVEXTPROC as sub(byval coord as const GLdouble ptr)
type PFNGLFOGCOORDPOINTEREXTPROC as sub(byval type as GLenum, byval stride as GLsizei, byval pointer as const any ptr)


const GL_EXT_framebuffer_blit = 1
const GL_READ_FRAMEBUFFER_EXT = &h8CA8
const GL_DRAW_FRAMEBUFFER_EXT = &h8CA9
const GL_DRAW_FRAMEBUFFER_BINDING_EXT = &h8CA6
const GL_READ_FRAMEBUFFER_BINDING_EXT = &h8CAA
type PFNGLBLITFRAMEBUFFEREXTPROC as sub(byval srcX0 as GLint, byval srcY0 as GLint, byval srcX1 as GLint, byval srcY1 as GLint, byval dstX0 as GLint, byval dstY0 as GLint, byval dstX1 as GLint, byval dstY1 as GLint, byval mask as GLbitfield, byval filter as GLenum)


const GL_EXT_framebuffer_multisample = 1
const GL_RENDERBUFFER_SAMPLES_EXT = &h8CAB
const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = &h8D56
const GL_MAX_SAMPLES_EXT = &h8D57
type PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC as sub(byval target as GLenum, byval samples as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei)


const GL_EXT_framebuffer_multisample_blit_scaled = 1
const GL_SCALED_RESOLVE_FASTEST_EXT = &h90BA
const GL_SCALED_RESOLVE_NICEST_EXT = &h90BB
const GL_EXT_framebuffer_object = 1
const GL_INVALID_FRAMEBUFFER_OPERATION_EXT = &h0506
const GL_MAX_RENDERBUFFER_SIZE_EXT = &h84E8
const GL_FRAMEBUFFER_BINDING_EXT = &h8CA6
const GL_RENDERBUFFER_BINDING_EXT = &h8CA7
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = &h8CD0
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = &h8CD1
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = &h8CD2
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = &h8CD3
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = &h8CD4
const GL_FRAMEBUFFER_COMPLETE_EXT = &h8CD5
const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = &h8CD6
const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = &h8CD7
const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = &h8CD9
const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = &h8CDA
const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = &h8CDB
const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = &h8CDC
const GL_FRAMEBUFFER_UNSUPPORTED_EXT = &h8CDD
const GL_MAX_COLOR_ATTACHMENTS_EXT = &h8CDF
const GL_COLOR_ATTACHMENT0_EXT = &h8CE0
const GL_COLOR_ATTACHMENT1_EXT = &h8CE1
const GL_COLOR_ATTACHMENT2_EXT = &h8CE2
const GL_COLOR_ATTACHMENT3_EXT = &h8CE3
const GL_COLOR_ATTACHMENT4_EXT = &h8CE4
const GL_COLOR_ATTACHMENT5_EXT = &h8CE5
const GL_COLOR_ATTACHMENT6_EXT = &h8CE6
const GL_COLOR_ATTACHMENT7_EXT = &h8CE7
const GL_COLOR_ATTACHMENT8_EXT = &h8CE8
const GL_COLOR_ATTACHMENT9_EXT = &h8CE9
const GL_COLOR_ATTACHMENT10_EXT = &h8CEA
const GL_COLOR_ATTACHMENT11_EXT = &h8CEB
const GL_COLOR_ATTACHMENT12_EXT = &h8CEC
const GL_COLOR_ATTACHMENT13_EXT = &h8CED
const GL_COLOR_ATTACHMENT14_EXT = &h8CEE
const GL_COLOR_ATTACHMENT15_EXT = &h8CEF
const GL_DEPTH_ATTACHMENT_EXT = &h8D00
const GL_STENCIL_ATTACHMENT_EXT = &h8D20
const GL_FRAMEBUFFER_EXT = &h8D40
const GL_RENDERBUFFER_EXT = &h8D41
const GL_RENDERBUFFER_WIDTH_EXT = &h8D42
const GL_RENDERBUFFER_HEIGHT_EXT = &h8D43
const GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = &h8D44
const GL_STENCIL_INDEX1_EXT = &h8D46
const GL_STENCIL_INDEX4_EXT = &h8D47
const GL_STENCIL_INDEX8_EXT = &h8D48
const GL_STENCIL_INDEX16_EXT = &h8D49
const GL_RENDERBUFFER_RED_SIZE_EXT = &h8D50
const GL_RENDERBUFFER_GREEN_SIZE_EXT = &h8D51
const GL_RENDERBUFFER_BLUE_SIZE_EXT = &h8D52
const GL_RENDERBUFFER_ALPHA_SIZE_EXT = &h8D53
const GL_RENDERBUFFER_DEPTH_SIZE_EXT = &h8D54
const GL_RENDERBUFFER_STENCIL_SIZE_EXT = &h8D55

type PFNGLISRENDERBUFFEREXTPROC as function(byval renderbuffer as GLuint) as GLboolean
type PFNGLBINDRENDERBUFFEREXTPROC as sub(byval target as GLenum, byval renderbuffer as GLuint)
type PFNGLDELETERENDERBUFFERSEXTPROC as sub(byval n as GLsizei, byval renderbuffers as const GLuint ptr)
type PFNGLGENRENDERBUFFERSEXTPROC as sub(byval n as GLsizei, byval renderbuffers as GLuint ptr)
type PFNGLRENDERBUFFERSTORAGEEXTPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei)
type PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLISFRAMEBUFFEREXTPROC as function(byval framebuffer as GLuint) as GLboolean
type PFNGLBINDFRAMEBUFFEREXTPROC as sub(byval target as GLenum, byval framebuffer as GLuint)
type PFNGLDELETEFRAMEBUFFERSEXTPROC as sub(byval n as GLsizei, byval framebuffers as const GLuint ptr)
type PFNGLGENFRAMEBUFFERSEXTPROC as sub(byval n as GLsizei, byval framebuffers as GLuint ptr)
type PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC as function(byval target as GLenum) as GLenum
type PFNGLFRAMEBUFFERTEXTURE1DEXTPROC as sub(byval target as GLenum, byval attachment as GLenum, byval textarget as GLenum, byval texture as GLuint, byval level as GLint)
type PFNGLFRAMEBUFFERTEXTURE2DEXTPROC as sub(byval target as GLenum, byval attachment as GLenum, byval textarget as GLenum, byval texture as GLuint, byval level as GLint)
type PFNGLFRAMEBUFFERTEXTURE3DEXTPROC as sub(byval target as GLenum, byval attachment as GLenum, byval textarget as GLenum, byval texture as GLuint, byval level as GLint, byval zoffset as GLint)
type PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC as sub(byval target as GLenum, byval attachment as GLenum, byval renderbuffertarget as GLenum, byval renderbuffer as GLuint)
type PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC as sub(byval target as GLenum, byval attachment as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGENERATEMIPMAPEXTPROC as sub(byval target as GLenum)


const GL_EXT_framebuffer_sRGB = 1
const GL_FRAMEBUFFER_SRGB_EXT = &h8DB9
const GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = &h8DBA
const GL_EXT_geometry_shader4 = 1
const GL_GEOMETRY_SHADER_EXT = &h8DD9
const GL_GEOMETRY_VERTICES_OUT_EXT = &h8DDA
const GL_GEOMETRY_INPUT_TYPE_EXT = &h8DDB
const GL_GEOMETRY_OUTPUT_TYPE_EXT = &h8DDC
const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = &h8C29
const GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = &h8DDD
const GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = &h8DDE
const GL_MAX_VARYING_COMPONENTS_EXT = &h8B4B
const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = &h8DDF
const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = &h8DE0
const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = &h8DE1
const GL_LINES_ADJACENCY_EXT = &h000A
const GL_LINE_STRIP_ADJACENCY_EXT = &h000B
const GL_TRIANGLES_ADJACENCY_EXT = &h000C
const GL_TRIANGLE_STRIP_ADJACENCY_EXT = &h000D
const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = &h8DA8
const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = &h8DA9
const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = &h8DA7
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = &h8CD4
const GL_PROGRAM_POINT_SIZE_EXT = &h8642
type PFNGLPROGRAMPARAMETERIEXTPROC as sub(byval program as GLuint, byval pname as GLenum, byval value as GLint)


const GL_EXT_gpu_program_parameters = 1
type PFNGLPROGRAMENVPARAMETERS4FVEXTPROC as sub(byval target as GLenum, byval index as GLuint, byval count as GLsizei, byval params as const GLfloat ptr)
type PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC as sub(byval target as GLenum, byval index as GLuint, byval count as GLsizei, byval params as const GLfloat ptr)


const GL_EXT_gpu_shader4 = 1
const GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = &h88FD
const GL_SAMPLER_1D_ARRAY_EXT = &h8DC0
const GL_SAMPLER_2D_ARRAY_EXT = &h8DC1
const GL_SAMPLER_BUFFER_EXT = &h8DC2
const GL_SAMPLER_1D_ARRAY_SHADOW_EXT = &h8DC3
const GL_SAMPLER_2D_ARRAY_SHADOW_EXT = &h8DC4
const GL_SAMPLER_CUBE_SHADOW_EXT = &h8DC5
const GL_UNSIGNED_INT_VEC2_EXT = &h8DC6
const GL_UNSIGNED_INT_VEC3_EXT = &h8DC7
const GL_UNSIGNED_INT_VEC4_EXT = &h8DC8
const GL_INT_SAMPLER_1D_EXT = &h8DC9
const GL_INT_SAMPLER_2D_EXT = &h8DCA
const GL_INT_SAMPLER_3D_EXT = &h8DCB
const GL_INT_SAMPLER_CUBE_EXT = &h8DCC
const GL_INT_SAMPLER_2D_RECT_EXT = &h8DCD
const GL_INT_SAMPLER_1D_ARRAY_EXT = &h8DCE
const GL_INT_SAMPLER_2D_ARRAY_EXT = &h8DCF
const GL_INT_SAMPLER_BUFFER_EXT = &h8DD0
const GL_UNSIGNED_INT_SAMPLER_1D_EXT = &h8DD1
const GL_UNSIGNED_INT_SAMPLER_2D_EXT = &h8DD2
const GL_UNSIGNED_INT_SAMPLER_3D_EXT = &h8DD3
const GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = &h8DD4
const GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = &h8DD5
const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = &h8DD6
const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = &h8DD7
const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = &h8DD8
const GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = &h8904
const GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = &h8905

type PFNGLGETUNIFORMUIVEXTPROC as sub(byval program as GLuint, byval location as GLint, byval params as GLuint ptr)
type PFNGLBINDFRAGDATALOCATIONEXTPROC as sub(byval program as GLuint, byval color as GLuint, byval name as const GLchar ptr)
type PFNGLGETFRAGDATALOCATIONEXTPROC as function(byval program as GLuint, byval name as const GLchar ptr) as GLint
type PFNGLUNIFORM1UIEXTPROC as sub(byval location as GLint, byval v0 as GLuint)
type PFNGLUNIFORM2UIEXTPROC as sub(byval location as GLint, byval v0 as GLuint, byval v1 as GLuint)
type PFNGLUNIFORM3UIEXTPROC as sub(byval location as GLint, byval v0 as GLuint, byval v1 as GLuint, byval v2 as GLuint)
type PFNGLUNIFORM4UIEXTPROC as sub(byval location as GLint, byval v0 as GLuint, byval v1 as GLuint, byval v2 as GLuint, byval v3 as GLuint)
type PFNGLUNIFORM1UIVEXTPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLuint ptr)
type PFNGLUNIFORM2UIVEXTPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLuint ptr)
type PFNGLUNIFORM3UIVEXTPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLuint ptr)
type PFNGLUNIFORM4UIVEXTPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLuint ptr)


const GL_EXT_histogram = 1
const GL_HISTOGRAM_EXT = &h8024
const GL_PROXY_HISTOGRAM_EXT = &h8025
const GL_HISTOGRAM_WIDTH_EXT = &h8026
const GL_HISTOGRAM_FORMAT_EXT = &h8027
const GL_HISTOGRAM_RED_SIZE_EXT = &h8028
const GL_HISTOGRAM_GREEN_SIZE_EXT = &h8029
const GL_HISTOGRAM_BLUE_SIZE_EXT = &h802A
const GL_HISTOGRAM_ALPHA_SIZE_EXT = &h802B
const GL_HISTOGRAM_LUMINANCE_SIZE_EXT = &h802C
const GL_HISTOGRAM_SINK_EXT = &h802D
const GL_MINMAX_EXT = &h802E
const GL_MINMAX_FORMAT_EXT = &h802F
const GL_MINMAX_SINK_EXT = &h8030
const GL_TABLE_TOO_LARGE_EXT = &h8031

type PFNGLGETHISTOGRAMEXTPROC as sub(byval target as GLenum, byval reset as GLboolean, byval format as GLenum, byval type as GLenum, byval values as any ptr)
type PFNGLGETHISTOGRAMPARAMETERFVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETHISTOGRAMPARAMETERIVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETMINMAXEXTPROC as sub(byval target as GLenum, byval reset as GLboolean, byval format as GLenum, byval type as GLenum, byval values as any ptr)
type PFNGLGETMINMAXPARAMETERFVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETMINMAXPARAMETERIVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLHISTOGRAMEXTPROC as sub(byval target as GLenum, byval width as GLsizei, byval internalformat as GLenum, byval sink as GLboolean)
type PFNGLMINMAXEXTPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval sink as GLboolean)
type PFNGLRESETHISTOGRAMEXTPROC as sub(byval target as GLenum)
type PFNGLRESETMINMAXEXTPROC as sub(byval target as GLenum)


const GL_EXT_index_array_formats = 1
const GL_IUI_V2F_EXT = &h81AD
const GL_IUI_V3F_EXT = &h81AE
const GL_IUI_N3F_V2F_EXT = &h81AF
const GL_IUI_N3F_V3F_EXT = &h81B0
const GL_T2F_IUI_V2F_EXT = &h81B1
const GL_T2F_IUI_V3F_EXT = &h81B2
const GL_T2F_IUI_N3F_V2F_EXT = &h81B3
const GL_T2F_IUI_N3F_V3F_EXT = &h81B4
const GL_EXT_index_func = 1
const GL_INDEX_TEST_EXT = &h81B5
const GL_INDEX_TEST_FUNC_EXT = &h81B6
const GL_INDEX_TEST_REF_EXT = &h81B7
type PFNGLINDEXFUNCEXTPROC as sub(byval func as GLenum, byval ref as GLclampf)


const GL_EXT_index_material = 1
const GL_INDEX_MATERIAL_EXT = &h81B8
const GL_INDEX_MATERIAL_PARAMETER_EXT = &h81B9
const GL_INDEX_MATERIAL_FACE_EXT = &h81BA
type PFNGLINDEXMATERIALEXTPROC as sub(byval face as GLenum, byval mode as GLenum)


const GL_EXT_index_texture = 1
const GL_EXT_light_texture = 1
const GL_FRAGMENT_MATERIAL_EXT = &h8349
const GL_FRAGMENT_NORMAL_EXT = &h834A
const GL_FRAGMENT_COLOR_EXT = &h834C
const GL_ATTENUATION_EXT = &h834D
const GL_SHADOW_ATTENUATION_EXT = &h834E
const GL_TEXTURE_APPLICATION_MODE_EXT = &h834F
const GL_TEXTURE_LIGHT_EXT = &h8350
const GL_TEXTURE_MATERIAL_FACE_EXT = &h8351
const GL_TEXTURE_MATERIAL_PARAMETER_EXT = &h8352

type PFNGLAPPLYTEXTUREEXTPROC as sub(byval mode as GLenum)
type PFNGLTEXTURELIGHTEXTPROC as sub(byval pname as GLenum)
type PFNGLTEXTUREMATERIALEXTPROC as sub(byval face as GLenum, byval mode as GLenum)


const GL_EXT_misc_attribute = 1
const GL_EXT_multi_draw_arrays = 1
type PFNGLMULTIDRAWARRAYSEXTPROC as sub(byval mode as GLenum, byval first as const GLint ptr, byval count as const GLsizei ptr, byval primcount as GLsizei)
type PFNGLMULTIDRAWELEMENTSEXTPROC as sub(byval mode as GLenum, byval count as const GLsizei ptr, byval type as GLenum, byval indices as const any const ptr ptr, byval primcount as GLsizei)


const GL_EXT_multisample = 1
const GL_MULTISAMPLE_EXT = &h809D
const GL_SAMPLE_ALPHA_TO_MASK_EXT = &h809E
const GL_SAMPLE_ALPHA_TO_ONE_EXT = &h809F
const GL_SAMPLE_MASK_EXT = &h80A0
const GL_1PASS_EXT = &h80A1
const GL_2PASS_0_EXT = &h80A2
const GL_2PASS_1_EXT = &h80A3
const GL_4PASS_0_EXT = &h80A4
const GL_4PASS_1_EXT = &h80A5
const GL_4PASS_2_EXT = &h80A6
const GL_4PASS_3_EXT = &h80A7
const GL_SAMPLE_BUFFERS_EXT = &h80A8
const GL_SAMPLES_EXT = &h80A9
const GL_SAMPLE_MASK_VALUE_EXT = &h80AA
const GL_SAMPLE_MASK_INVERT_EXT = &h80AB
const GL_SAMPLE_PATTERN_EXT = &h80AC
const GL_MULTISAMPLE_BIT_EXT = &h20000000
type PFNGLSAMPLEMASKEXTPROC as sub(byval value as GLclampf, byval invert as GLboolean)
type PFNGLSAMPLEPATTERNEXTPROC as sub(byval pattern as GLenum)


const GL_EXT_packed_depth_stencil = 1
const GL_DEPTH_STENCIL_EXT = &h84F9
const GL_UNSIGNED_INT_24_8_EXT = &h84FA
const GL_DEPTH24_STENCIL8_EXT = &h88F0
const GL_TEXTURE_STENCIL_SIZE_EXT = &h88F1
const GL_EXT_packed_float = 1
const GL_R11F_G11F_B10F_EXT = &h8C3A
const GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = &h8C3B
const GL_RGBA_SIGNED_COMPONENTS_EXT = &h8C3C
const GL_EXT_packed_pixels = 1
const GL_UNSIGNED_BYTE_3_3_2_EXT = &h8032
const GL_UNSIGNED_SHORT_4_4_4_4_EXT = &h8033
const GL_UNSIGNED_SHORT_5_5_5_1_EXT = &h8034
const GL_UNSIGNED_INT_8_8_8_8_EXT = &h8035
const GL_UNSIGNED_INT_10_10_10_2_EXT = &h8036
const GL_EXT_pixel_buffer_object = 1
const GL_PIXEL_PACK_BUFFER_EXT = &h88EB
const GL_PIXEL_UNPACK_BUFFER_EXT = &h88EC
const GL_PIXEL_PACK_BUFFER_BINDING_EXT = &h88ED
const GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = &h88EF
const GL_EXT_pixel_transform = 1
const GL_PIXEL_TRANSFORM_2D_EXT = &h8330
const GL_PIXEL_MAG_FILTER_EXT = &h8331
const GL_PIXEL_MIN_FILTER_EXT = &h8332
const GL_PIXEL_CUBIC_WEIGHT_EXT = &h8333
const GL_CUBIC_EXT = &h8334
const GL_AVERAGE_EXT = &h8335
const GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = &h8336
const GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = &h8337
const GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = &h8338

type PFNGLPIXELTRANSFORMPARAMETERIEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval param as GLint)
type PFNGLPIXELTRANSFORMPARAMETERFEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval param as GLfloat)
type PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)


const GL_EXT_pixel_transform_color_table = 1
const GL_EXT_point_parameters = 1
const GL_POINT_SIZE_MIN_EXT = &h8126
const GL_POINT_SIZE_MAX_EXT = &h8127
const GL_POINT_FADE_THRESHOLD_SIZE_EXT = &h8128
const GL_DISTANCE_ATTENUATION_EXT = &h8129
type PFNGLPOINTPARAMETERFEXTPROC as sub(byval pname as GLenum, byval param as GLfloat)
type PFNGLPOINTPARAMETERFVEXTPROC as sub(byval pname as GLenum, byval params as const GLfloat ptr)


const GL_EXT_polygon_offset = 1
const GL_POLYGON_OFFSET_EXT = &h8037
const GL_POLYGON_OFFSET_FACTOR_EXT = &h8038
const GL_POLYGON_OFFSET_BIAS_EXT = &h8039
type PFNGLPOLYGONOFFSETEXTPROC as sub(byval factor as GLfloat, byval bias as GLfloat)


const GL_EXT_polygon_offset_clamp = 1
const GL_POLYGON_OFFSET_CLAMP_EXT = &h8E1B
type PFNGLPOLYGONOFFSETCLAMPEXTPROC as sub(byval factor as GLfloat, byval units as GLfloat, byval clamp as GLfloat)


const GL_EXT_post_depth_coverage = 1
const GL_EXT_provoking_vertex = 1
const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = &h8E4C
const GL_FIRST_VERTEX_CONVENTION_EXT = &h8E4D
const GL_LAST_VERTEX_CONVENTION_EXT = &h8E4E
const GL_PROVOKING_VERTEX_EXT = &h8E4F
type PFNGLPROVOKINGVERTEXEXTPROC as sub(byval mode as GLenum)


const GL_EXT_raster_multisample = 1
const GL_RASTER_MULTISAMPLE_EXT = &h9327
const GL_RASTER_SAMPLES_EXT = &h9328
const GL_MAX_RASTER_SAMPLES_EXT = &h9329
const GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = &h932A
const GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = &h932B
const GL_EFFECTIVE_RASTER_SAMPLES_EXT = &h932C
type PFNGLRASTERSAMPLESEXTPROC as sub(byval samples as GLuint, byval fixedsamplelocations as GLboolean)


const GL_EXT_rescale_normal = 1
const GL_RESCALE_NORMAL_EXT = &h803A
const GL_EXT_secondary_color = 1
const GL_COLOR_SUM_EXT = &h8458
const GL_CURRENT_SECONDARY_COLOR_EXT = &h8459
const GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = &h845A
const GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = &h845B
const GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = &h845C
const GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = &h845D
const GL_SECONDARY_COLOR_ARRAY_EXT = &h845E

type PFNGLSECONDARYCOLOR3BEXTPROC as sub(byval red as GLbyte, byval green as GLbyte, byval blue as GLbyte)
type PFNGLSECONDARYCOLOR3BVEXTPROC as sub(byval v as const GLbyte ptr)
type PFNGLSECONDARYCOLOR3DEXTPROC as sub(byval red as GLdouble, byval green as GLdouble, byval blue as GLdouble)
type PFNGLSECONDARYCOLOR3DVEXTPROC as sub(byval v as const GLdouble ptr)
type PFNGLSECONDARYCOLOR3FEXTPROC as sub(byval red as GLfloat, byval green as GLfloat, byval blue as GLfloat)
type PFNGLSECONDARYCOLOR3FVEXTPROC as sub(byval v as const GLfloat ptr)
type PFNGLSECONDARYCOLOR3IEXTPROC as sub(byval red as GLint, byval green as GLint, byval blue as GLint)
type PFNGLSECONDARYCOLOR3IVEXTPROC as sub(byval v as const GLint ptr)
type PFNGLSECONDARYCOLOR3SEXTPROC as sub(byval red as GLshort, byval green as GLshort, byval blue as GLshort)
type PFNGLSECONDARYCOLOR3SVEXTPROC as sub(byval v as const GLshort ptr)
type PFNGLSECONDARYCOLOR3UBEXTPROC as sub(byval red as GLubyte, byval green as GLubyte, byval blue as GLubyte)
type PFNGLSECONDARYCOLOR3UBVEXTPROC as sub(byval v as const GLubyte ptr)
type PFNGLSECONDARYCOLOR3UIEXTPROC as sub(byval red as GLuint, byval green as GLuint, byval blue as GLuint)
type PFNGLSECONDARYCOLOR3UIVEXTPROC as sub(byval v as const GLuint ptr)
type PFNGLSECONDARYCOLOR3USEXTPROC as sub(byval red as GLushort, byval green as GLushort, byval blue as GLushort)
type PFNGLSECONDARYCOLOR3USVEXTPROC as sub(byval v as const GLushort ptr)
type PFNGLSECONDARYCOLORPOINTEREXTPROC as sub(byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval pointer as const any ptr)


const GL_EXT_separate_shader_objects = 1
const GL_ACTIVE_PROGRAM_EXT = &h8B8D
type PFNGLUSESHADERPROGRAMEXTPROC as sub(byval type as GLenum, byval program as GLuint)
type PFNGLACTIVEPROGRAMEXTPROC as sub(byval program as GLuint)
type PFNGLCREATESHADERPROGRAMEXTPROC as function(byval type as GLenum, byval string as const GLchar ptr) as GLuint


const GL_EXT_separate_specular_color = 1
const GL_LIGHT_MODEL_COLOR_CONTROL_EXT = &h81F8
const GL_SINGLE_COLOR_EXT = &h81F9
const GL_SEPARATE_SPECULAR_COLOR_EXT = &h81FA
const GL_EXT_shader_image_load_formatted = 1
const GL_EXT_shader_image_load_store = 1
const GL_MAX_IMAGE_UNITS_EXT = &h8F38
const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = &h8F39
const GL_IMAGE_BINDING_NAME_EXT = &h8F3A
const GL_IMAGE_BINDING_LEVEL_EXT = &h8F3B
const GL_IMAGE_BINDING_LAYERED_EXT = &h8F3C
const GL_IMAGE_BINDING_LAYER_EXT = &h8F3D
const GL_IMAGE_BINDING_ACCESS_EXT = &h8F3E
const GL_IMAGE_1D_EXT = &h904C
const GL_IMAGE_2D_EXT = &h904D
const GL_IMAGE_3D_EXT = &h904E
const GL_IMAGE_2D_RECT_EXT = &h904F
const GL_IMAGE_CUBE_EXT = &h9050
const GL_IMAGE_BUFFER_EXT = &h9051
const GL_IMAGE_1D_ARRAY_EXT = &h9052
const GL_IMAGE_2D_ARRAY_EXT = &h9053
const GL_IMAGE_CUBE_MAP_ARRAY_EXT = &h9054
const GL_IMAGE_2D_MULTISAMPLE_EXT = &h9055
const GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = &h9056
const GL_INT_IMAGE_1D_EXT = &h9057
const GL_INT_IMAGE_2D_EXT = &h9058
const GL_INT_IMAGE_3D_EXT = &h9059
const GL_INT_IMAGE_2D_RECT_EXT = &h905A
const GL_INT_IMAGE_CUBE_EXT = &h905B
const GL_INT_IMAGE_BUFFER_EXT = &h905C
const GL_INT_IMAGE_1D_ARRAY_EXT = &h905D
const GL_INT_IMAGE_2D_ARRAY_EXT = &h905E
const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = &h905F
const GL_INT_IMAGE_2D_MULTISAMPLE_EXT = &h9060
const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = &h9061
const GL_UNSIGNED_INT_IMAGE_1D_EXT = &h9062
const GL_UNSIGNED_INT_IMAGE_2D_EXT = &h9063
const GL_UNSIGNED_INT_IMAGE_3D_EXT = &h9064
const GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = &h9065
const GL_UNSIGNED_INT_IMAGE_CUBE_EXT = &h9066
const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = &h9067
const GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = &h9068
const GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = &h9069
const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = &h906A
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = &h906B
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = &h906C
const GL_MAX_IMAGE_SAMPLES_EXT = &h906D
const GL_IMAGE_BINDING_FORMAT_EXT = &h906E
const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = &h00000001
const GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = &h00000002
const GL_UNIFORM_BARRIER_BIT_EXT = &h00000004
const GL_TEXTURE_FETCH_BARRIER_BIT_EXT = &h00000008
const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = &h00000020
const GL_COMMAND_BARRIER_BIT_EXT = &h00000040
const GL_PIXEL_BUFFER_BARRIER_BIT_EXT = &h00000080
const GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = &h00000100
const GL_BUFFER_UPDATE_BARRIER_BIT_EXT = &h00000200
const GL_FRAMEBUFFER_BARRIER_BIT_EXT = &h00000400
const GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = &h00000800
const GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = &h00001000
const GL_ALL_BARRIER_BITS_EXT = &hFFFFFFFF
type PFNGLBINDIMAGETEXTUREEXTPROC as sub(byval index as GLuint, byval texture as GLuint, byval level as GLint, byval layered as GLboolean, byval layer as GLint, byval access as GLenum, byval format as GLint)
type PFNGLMEMORYBARRIEREXTPROC as sub(byval barriers as GLbitfield)


const GL_EXT_shader_integer_mix = 1
const GL_EXT_shadow_funcs = 1
const GL_EXT_shared_texture_palette = 1
const GL_SHARED_TEXTURE_PALETTE_EXT = &h81FB
const GL_EXT_sparse_texture2 = 1
const GL_EXT_stencil_clear_tag = 1
const GL_STENCIL_TAG_BITS_EXT = &h88F2
const GL_STENCIL_CLEAR_TAG_VALUE_EXT = &h88F3
type PFNGLSTENCILCLEARTAGEXTPROC as sub(byval stencilTagBits as GLsizei, byval stencilClearTag as GLuint)


const GL_EXT_stencil_two_side = 1
const GL_STENCIL_TEST_TWO_SIDE_EXT = &h8910
const GL_ACTIVE_STENCIL_FACE_EXT = &h8911
type PFNGLACTIVESTENCILFACEEXTPROC as sub(byval face as GLenum)


const GL_EXT_stencil_wrap = 1
const GL_INCR_WRAP_EXT = &h8507
const GL_DECR_WRAP_EXT = &h8508
const GL_EXT_subtexture = 1
type PFNGLTEXSUBIMAGE1DEXTPROC as sub(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval width as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLTEXSUBIMAGE2DEXTPROC as sub(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)


const GL_EXT_texture = 1
const GL_ALPHA4_EXT = &h803B
const GL_ALPHA8_EXT = &h803C
const GL_ALPHA12_EXT = &h803D
const GL_ALPHA16_EXT = &h803E
const GL_LUMINANCE4_EXT = &h803F
const GL_LUMINANCE8_EXT = &h8040
const GL_LUMINANCE12_EXT = &h8041
const GL_LUMINANCE16_EXT = &h8042
const GL_LUMINANCE4_ALPHA4_EXT = &h8043
const GL_LUMINANCE6_ALPHA2_EXT = &h8044
const GL_LUMINANCE8_ALPHA8_EXT = &h8045
const GL_LUMINANCE12_ALPHA4_EXT = &h8046
const GL_LUMINANCE12_ALPHA12_EXT = &h8047
const GL_LUMINANCE16_ALPHA16_EXT = &h8048
const GL_INTENSITY_EXT = &h8049
const GL_INTENSITY4_EXT = &h804A
const GL_INTENSITY8_EXT = &h804B
const GL_INTENSITY12_EXT = &h804C
const GL_INTENSITY16_EXT = &h804D
const GL_RGB2_EXT = &h804E
const GL_RGB4_EXT = &h804F
const GL_RGB5_EXT = &h8050
const GL_RGB8_EXT = &h8051
const GL_RGB10_EXT = &h8052
const GL_RGB12_EXT = &h8053
const GL_RGB16_EXT = &h8054
const GL_RGBA2_EXT = &h8055
const GL_RGBA4_EXT = &h8056
const GL_RGB5_A1_EXT = &h8057
const GL_RGBA8_EXT = &h8058
const GL_RGB10_A2_EXT = &h8059
const GL_RGBA12_EXT = &h805A
const GL_RGBA16_EXT = &h805B
const GL_TEXTURE_RED_SIZE_EXT = &h805C
const GL_TEXTURE_GREEN_SIZE_EXT = &h805D
const GL_TEXTURE_BLUE_SIZE_EXT = &h805E
const GL_TEXTURE_ALPHA_SIZE_EXT = &h805F
const GL_TEXTURE_LUMINANCE_SIZE_EXT = &h8060
const GL_TEXTURE_INTENSITY_SIZE_EXT = &h8061
const GL_REPLACE_EXT = &h8062
const GL_PROXY_TEXTURE_1D_EXT = &h8063
const GL_PROXY_TEXTURE_2D_EXT = &h8064
const GL_TEXTURE_TOO_LARGE_EXT = &h8065
const GL_EXT_texture3D = 1
const GL_PACK_SKIP_IMAGES_EXT = &h806B
const GL_PACK_IMAGE_HEIGHT_EXT = &h806C
const GL_UNPACK_SKIP_IMAGES_EXT = &h806D
const GL_UNPACK_IMAGE_HEIGHT_EXT = &h806E
const GL_TEXTURE_3D_EXT = &h806F
const GL_PROXY_TEXTURE_3D_EXT = &h8070
const GL_TEXTURE_DEPTH_EXT = &h8071
const GL_TEXTURE_WRAP_R_EXT = &h8072
const GL_MAX_3D_TEXTURE_SIZE_EXT = &h8073
type PFNGLTEXIMAGE3DEXTPROC as sub(byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval border as GLint, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLTEXSUBIMAGE3DEXTPROC as sub(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)


const GL_EXT_texture_array = 1
const GL_TEXTURE_1D_ARRAY_EXT = &h8C18
const GL_PROXY_TEXTURE_1D_ARRAY_EXT = &h8C19
const GL_TEXTURE_2D_ARRAY_EXT = &h8C1A
const GL_PROXY_TEXTURE_2D_ARRAY_EXT = &h8C1B
const GL_TEXTURE_BINDING_1D_ARRAY_EXT = &h8C1C
const GL_TEXTURE_BINDING_2D_ARRAY_EXT = &h8C1D
const GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = &h88FF
const GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = &h884E
type PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC as sub(byval target as GLenum, byval attachment as GLenum, byval texture as GLuint, byval level as GLint, byval layer as GLint)


const GL_EXT_texture_buffer_object = 1
const GL_TEXTURE_BUFFER_EXT = &h8C2A
const GL_MAX_TEXTURE_BUFFER_SIZE_EXT = &h8C2B
const GL_TEXTURE_BINDING_BUFFER_EXT = &h8C2C
const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = &h8C2D
const GL_TEXTURE_BUFFER_FORMAT_EXT = &h8C2E
type PFNGLTEXBUFFEREXTPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval buffer as GLuint)


const GL_EXT_texture_compression_latc = 1
const GL_COMPRESSED_LUMINANCE_LATC1_EXT = &h8C70
const GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = &h8C71
const GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = &h8C72
const GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = &h8C73
const GL_EXT_texture_compression_rgtc = 1
const GL_COMPRESSED_RED_RGTC1_EXT = &h8DBB
const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = &h8DBC
const GL_COMPRESSED_RED_GREEN_RGTC2_EXT = &h8DBD
const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = &h8DBE
const GL_EXT_texture_compression_s3tc = 1
const GL_COMPRESSED_RGB_S3TC_DXT1_EXT = &h83F0
const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = &h83F1
const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = &h83F2
const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = &h83F3
const GL_EXT_texture_cube_map = 1
const GL_NORMAL_MAP_EXT = &h8511
const GL_REFLECTION_MAP_EXT = &h8512
const GL_TEXTURE_CUBE_MAP_EXT = &h8513
const GL_TEXTURE_BINDING_CUBE_MAP_EXT = &h8514
const GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = &h8515
const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = &h8516
const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = &h8517
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = &h8518
const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = &h8519
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = &h851A
const GL_PROXY_TEXTURE_CUBE_MAP_EXT = &h851B
const GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = &h851C
const GL_EXT_texture_env_add = 1
const GL_EXT_texture_env_combine = 1
const GL_COMBINE_EXT = &h8570
const GL_COMBINE_RGB_EXT = &h8571
const GL_COMBINE_ALPHA_EXT = &h8572
const GL_RGB_SCALE_EXT = &h8573
const GL_ADD_SIGNED_EXT = &h8574
const GL_INTERPOLATE_EXT = &h8575
const GL_CONSTANT_EXT = &h8576
const GL_PRIMARY_COLOR_EXT = &h8577
const GL_PREVIOUS_EXT = &h8578
const GL_SOURCE0_RGB_EXT = &h8580
const GL_SOURCE1_RGB_EXT = &h8581
const GL_SOURCE2_RGB_EXT = &h8582
const GL_SOURCE0_ALPHA_EXT = &h8588
const GL_SOURCE1_ALPHA_EXT = &h8589
const GL_SOURCE2_ALPHA_EXT = &h858A
const GL_OPERAND0_RGB_EXT = &h8590
const GL_OPERAND1_RGB_EXT = &h8591
const GL_OPERAND2_RGB_EXT = &h8592
const GL_OPERAND0_ALPHA_EXT = &h8598
const GL_OPERAND1_ALPHA_EXT = &h8599
const GL_OPERAND2_ALPHA_EXT = &h859A
const GL_EXT_texture_env_dot3 = 1
const GL_DOT3_RGB_EXT = &h8740
const GL_DOT3_RGBA_EXT = &h8741
const GL_EXT_texture_filter_anisotropic = 1
const GL_TEXTURE_MAX_ANISOTROPY_EXT = &h84FE
const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = &h84FF
const GL_EXT_texture_filter_minmax = 1
const GL_EXT_texture_integer = 1
const GL_RGBA32UI_EXT = &h8D70
const GL_RGB32UI_EXT = &h8D71
const GL_ALPHA32UI_EXT = &h8D72
const GL_INTENSITY32UI_EXT = &h8D73
const GL_LUMINANCE32UI_EXT = &h8D74
const GL_LUMINANCE_ALPHA32UI_EXT = &h8D75
const GL_RGBA16UI_EXT = &h8D76
const GL_RGB16UI_EXT = &h8D77
const GL_ALPHA16UI_EXT = &h8D78
const GL_INTENSITY16UI_EXT = &h8D79
const GL_LUMINANCE16UI_EXT = &h8D7A
const GL_LUMINANCE_ALPHA16UI_EXT = &h8D7B
const GL_RGBA8UI_EXT = &h8D7C
const GL_RGB8UI_EXT = &h8D7D
const GL_ALPHA8UI_EXT = &h8D7E
const GL_INTENSITY8UI_EXT = &h8D7F
const GL_LUMINANCE8UI_EXT = &h8D80
const GL_LUMINANCE_ALPHA8UI_EXT = &h8D81
const GL_RGBA32I_EXT = &h8D82
const GL_RGB32I_EXT = &h8D83
const GL_ALPHA32I_EXT = &h8D84
const GL_INTENSITY32I_EXT = &h8D85
const GL_LUMINANCE32I_EXT = &h8D86
const GL_LUMINANCE_ALPHA32I_EXT = &h8D87
const GL_RGBA16I_EXT = &h8D88
const GL_RGB16I_EXT = &h8D89
const GL_ALPHA16I_EXT = &h8D8A
const GL_INTENSITY16I_EXT = &h8D8B
const GL_LUMINANCE16I_EXT = &h8D8C
const GL_LUMINANCE_ALPHA16I_EXT = &h8D8D
const GL_RGBA8I_EXT = &h8D8E
const GL_RGB8I_EXT = &h8D8F
const GL_ALPHA8I_EXT = &h8D90
const GL_INTENSITY8I_EXT = &h8D91
const GL_LUMINANCE8I_EXT = &h8D92
const GL_LUMINANCE_ALPHA8I_EXT = &h8D93
const GL_RED_INTEGER_EXT = &h8D94
const GL_GREEN_INTEGER_EXT = &h8D95
const GL_BLUE_INTEGER_EXT = &h8D96
const GL_ALPHA_INTEGER_EXT = &h8D97
const GL_RGB_INTEGER_EXT = &h8D98
const GL_RGBA_INTEGER_EXT = &h8D99
const GL_BGR_INTEGER_EXT = &h8D9A
const GL_BGRA_INTEGER_EXT = &h8D9B
const GL_LUMINANCE_INTEGER_EXT = &h8D9C
const GL_LUMINANCE_ALPHA_INTEGER_EXT = &h8D9D
const GL_RGBA_INTEGER_MODE_EXT = &h8D9E

type PFNGLTEXPARAMETERIIVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLTEXPARAMETERIUIVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLuint ptr)
type PFNGLGETTEXPARAMETERIIVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETTEXPARAMETERIUIVEXTPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLuint ptr)
type PFNGLCLEARCOLORIIEXTPROC as sub(byval red as GLint, byval green as GLint, byval blue as GLint, byval alpha as GLint)
type PFNGLCLEARCOLORIUIEXTPROC as sub(byval red as GLuint, byval green as GLuint, byval blue as GLuint, byval alpha as GLuint)


const GL_EXT_texture_lod_bias = 1
const GL_MAX_TEXTURE_LOD_BIAS_EXT = &h84FD
const GL_TEXTURE_FILTER_CONTROL_EXT = &h8500
const GL_TEXTURE_LOD_BIAS_EXT = &h8501
const GL_EXT_texture_mirror_clamp = 1
const GL_MIRROR_CLAMP_EXT = &h8742
const GL_MIRROR_CLAMP_TO_EDGE_EXT = &h8743
const GL_MIRROR_CLAMP_TO_BORDER_EXT = &h8912
const GL_EXT_texture_object = 1
const GL_TEXTURE_PRIORITY_EXT = &h8066
const GL_TEXTURE_RESIDENT_EXT = &h8067
const GL_TEXTURE_1D_BINDING_EXT = &h8068
const GL_TEXTURE_2D_BINDING_EXT = &h8069
const GL_TEXTURE_3D_BINDING_EXT = &h806A

type PFNGLARETEXTURESRESIDENTEXTPROC as function(byval n as GLsizei, byval textures as const GLuint ptr, byval residences as GLboolean ptr) as GLboolean
type PFNGLBINDTEXTUREEXTPROC as sub(byval target as GLenum, byval texture as GLuint)
type PFNGLDELETETEXTURESEXTPROC as sub(byval n as GLsizei, byval textures as const GLuint ptr)
type PFNGLGENTEXTURESEXTPROC as sub(byval n as GLsizei, byval textures as GLuint ptr)
type PFNGLISTEXTUREEXTPROC as function(byval texture as GLuint) as GLboolean
type PFNGLPRIORITIZETEXTURESEXTPROC as sub(byval n as GLsizei, byval textures as const GLuint ptr, byval priorities as const GLclampf ptr)


const GL_EXT_texture_perturb_normal = 1
const GL_PERTURB_EXT = &h85AE
const GL_TEXTURE_NORMAL_EXT = &h85AF
type PFNGLTEXTURENORMALEXTPROC as sub(byval mode as GLenum)


const GL_EXT_texture_sRGB = 1
const GL_SRGB_EXT = &h8C40
const GL_SRGB8_EXT = &h8C41
const GL_SRGB_ALPHA_EXT = &h8C42
const GL_SRGB8_ALPHA8_EXT = &h8C43
const GL_SLUMINANCE_ALPHA_EXT = &h8C44
const GL_SLUMINANCE8_ALPHA8_EXT = &h8C45
const GL_SLUMINANCE_EXT = &h8C46
const GL_SLUMINANCE8_EXT = &h8C47
const GL_COMPRESSED_SRGB_EXT = &h8C48
const GL_COMPRESSED_SRGB_ALPHA_EXT = &h8C49
const GL_COMPRESSED_SLUMINANCE_EXT = &h8C4A
const GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = &h8C4B
const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = &h8C4C
const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = &h8C4D
const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = &h8C4E
const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = &h8C4F
const GL_EXT_texture_sRGB_decode = 1
const GL_TEXTURE_SRGB_DECODE_EXT = &h8A48
const GL_DECODE_EXT = &h8A49
const GL_SKIP_DECODE_EXT = &h8A4A
const GL_EXT_texture_shared_exponent = 1
const GL_RGB9_E5_EXT = &h8C3D
const GL_UNSIGNED_INT_5_9_9_9_REV_EXT = &h8C3E
const GL_TEXTURE_SHARED_SIZE_EXT = &h8C3F
const GL_EXT_texture_snorm = 1
const GL_ALPHA_SNORM = &h9010
const GL_LUMINANCE_SNORM = &h9011
const GL_LUMINANCE_ALPHA_SNORM = &h9012
const GL_INTENSITY_SNORM = &h9013
const GL_ALPHA8_SNORM = &h9014
const GL_LUMINANCE8_SNORM = &h9015
const GL_LUMINANCE8_ALPHA8_SNORM = &h9016
const GL_INTENSITY8_SNORM = &h9017
const GL_ALPHA16_SNORM = &h9018
const GL_LUMINANCE16_SNORM = &h9019
const GL_LUMINANCE16_ALPHA16_SNORM = &h901A
const GL_INTENSITY16_SNORM = &h901B
const GL_RED_SNORM = &h8F90
const GL_RG_SNORM = &h8F91
const GL_RGB_SNORM = &h8F92
const GL_RGBA_SNORM = &h8F93
const GL_EXT_texture_swizzle = 1
const GL_TEXTURE_SWIZZLE_R_EXT = &h8E42
const GL_TEXTURE_SWIZZLE_G_EXT = &h8E43
const GL_TEXTURE_SWIZZLE_B_EXT = &h8E44
const GL_TEXTURE_SWIZZLE_A_EXT = &h8E45
const GL_TEXTURE_SWIZZLE_RGBA_EXT = &h8E46
const GL_EXT_timer_query = 1
const GL_TIME_ELAPSED_EXT = &h88BF
type PFNGLGETQUERYOBJECTI64VEXTPROC as sub(byval id as GLuint, byval pname as GLenum, byval params as GLint64 ptr)
type PFNGLGETQUERYOBJECTUI64VEXTPROC as sub(byval id as GLuint, byval pname as GLenum, byval params as GLuint64 ptr)


const GL_EXT_transform_feedback = 1
const GL_TRANSFORM_FEEDBACK_BUFFER_EXT = &h8C8E
const GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = &h8C84
const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = &h8C85
const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = &h8C8F
const GL_INTERLEAVED_ATTRIBS_EXT = &h8C8C
const GL_SEPARATE_ATTRIBS_EXT = &h8C8D
const GL_PRIMITIVES_GENERATED_EXT = &h8C87
const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = &h8C88
const GL_RASTERIZER_DISCARD_EXT = &h8C89
const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = &h8C8A
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = &h8C8B
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = &h8C80
const GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = &h8C83
const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = &h8C7F
const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = &h8C76

type PFNGLBEGINTRANSFORMFEEDBACKEXTPROC as sub(byval primitiveMode as GLenum)
type PFNGLENDTRANSFORMFEEDBACKEXTPROC as sub()
type PFNGLBINDBUFFERRANGEEXTPROC as sub(byval target as GLenum, byval index as GLuint, byval buffer as GLuint, byval offset as GLintptr, byval size as GLsizeiptr)
type PFNGLBINDBUFFEROFFSETEXTPROC as sub(byval target as GLenum, byval index as GLuint, byval buffer as GLuint, byval offset as GLintptr)
type PFNGLBINDBUFFERBASEEXTPROC as sub(byval target as GLenum, byval index as GLuint, byval buffer as GLuint)
type PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC as sub(byval program as GLuint, byval count as GLsizei, byval varyings as const GLchar const ptr ptr, byval bufferMode as GLenum)
type PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC as sub(byval program as GLuint, byval index as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval size as GLsizei ptr, byval type as GLenum ptr, byval name as GLchar ptr)


const GL_EXT_vertex_array_bgra = 1
const GL_EXT_vertex_attrib_64bit = 1
const GL_DOUBLE_VEC2_EXT = &h8FFC
const GL_DOUBLE_VEC3_EXT = &h8FFD
const GL_DOUBLE_VEC4_EXT = &h8FFE
const GL_DOUBLE_MAT2_EXT = &h8F46
const GL_DOUBLE_MAT3_EXT = &h8F47
const GL_DOUBLE_MAT4_EXT = &h8F48
const GL_DOUBLE_MAT2x3_EXT = &h8F49
const GL_DOUBLE_MAT2x4_EXT = &h8F4A
const GL_DOUBLE_MAT3x2_EXT = &h8F4B
const GL_DOUBLE_MAT3x4_EXT = &h8F4C
const GL_DOUBLE_MAT4x2_EXT = &h8F4D
const GL_DOUBLE_MAT4x3_EXT = &h8F4E

type PFNGLVERTEXATTRIBL1DEXTPROC as sub(byval index as GLuint, byval x as GLdouble)
type PFNGLVERTEXATTRIBL2DEXTPROC as sub(byval index as GLuint, byval x as GLdouble, byval y as GLdouble)
type PFNGLVERTEXATTRIBL3DEXTPROC as sub(byval index as GLuint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
type PFNGLVERTEXATTRIBL4DEXTPROC as sub(byval index as GLuint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble, byval w as GLdouble)
type PFNGLVERTEXATTRIBL1DVEXTPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIBL2DVEXTPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIBL3DVEXTPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIBL4DVEXTPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIBLPOINTEREXTPROC as sub(byval index as GLuint, byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval pointer as const any ptr)
type PFNGLGETVERTEXATTRIBLDVEXTPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLdouble ptr)


const GL_EXT_vertex_shader = 1
const GL_VERTEX_SHADER_EXT = &h8780
const GL_VERTEX_SHADER_BINDING_EXT = &h8781
const GL_OP_INDEX_EXT = &h8782
const GL_OP_NEGATE_EXT = &h8783
const GL_OP_DOT3_EXT = &h8784
const GL_OP_DOT4_EXT = &h8785
const GL_OP_MUL_EXT = &h8786
const GL_OP_ADD_EXT = &h8787
const GL_OP_MADD_EXT = &h8788
const GL_OP_FRAC_EXT = &h8789
const GL_OP_MAX_EXT = &h878A
const GL_OP_MIN_EXT = &h878B
const GL_OP_SET_GE_EXT = &h878C
const GL_OP_SET_LT_EXT = &h878D
const GL_OP_CLAMP_EXT = &h878E
const GL_OP_FLOOR_EXT = &h878F
const GL_OP_ROUND_EXT = &h8790
const GL_OP_EXP_BASE_2_EXT = &h8791
const GL_OP_LOG_BASE_2_EXT = &h8792
const GL_OP_POWER_EXT = &h8793
const GL_OP_RECIP_EXT = &h8794
const GL_OP_RECIP_SQRT_EXT = &h8795
const GL_OP_SUB_EXT = &h8796
const GL_OP_CROSS_PRODUCT_EXT = &h8797
const GL_OP_MULTIPLY_MATRIX_EXT = &h8798
const GL_OP_MOV_EXT = &h8799
const GL_OUTPUT_VERTEX_EXT = &h879A
const GL_OUTPUT_COLOR0_EXT = &h879B
const GL_OUTPUT_COLOR1_EXT = &h879C
const GL_OUTPUT_TEXTURE_COORD0_EXT = &h879D
const GL_OUTPUT_TEXTURE_COORD1_EXT = &h879E
const GL_OUTPUT_TEXTURE_COORD2_EXT = &h879F
const GL_OUTPUT_TEXTURE_COORD3_EXT = &h87A0
const GL_OUTPUT_TEXTURE_COORD4_EXT = &h87A1
const GL_OUTPUT_TEXTURE_COORD5_EXT = &h87A2
const GL_OUTPUT_TEXTURE_COORD6_EXT = &h87A3
const GL_OUTPUT_TEXTURE_COORD7_EXT = &h87A4
const GL_OUTPUT_TEXTURE_COORD8_EXT = &h87A5
const GL_OUTPUT_TEXTURE_COORD9_EXT = &h87A6
const GL_OUTPUT_TEXTURE_COORD10_EXT = &h87A7
const GL_OUTPUT_TEXTURE_COORD11_EXT = &h87A8
const GL_OUTPUT_TEXTURE_COORD12_EXT = &h87A9
const GL_OUTPUT_TEXTURE_COORD13_EXT = &h87AA
const GL_OUTPUT_TEXTURE_COORD14_EXT = &h87AB
const GL_OUTPUT_TEXTURE_COORD15_EXT = &h87AC
const GL_OUTPUT_TEXTURE_COORD16_EXT = &h87AD
const GL_OUTPUT_TEXTURE_COORD17_EXT = &h87AE
const GL_OUTPUT_TEXTURE_COORD18_EXT = &h87AF
const GL_OUTPUT_TEXTURE_COORD19_EXT = &h87B0
const GL_OUTPUT_TEXTURE_COORD20_EXT = &h87B1
const GL_OUTPUT_TEXTURE_COORD21_EXT = &h87B2
const GL_OUTPUT_TEXTURE_COORD22_EXT = &h87B3
const GL_OUTPUT_TEXTURE_COORD23_EXT = &h87B4
const GL_OUTPUT_TEXTURE_COORD24_EXT = &h87B5
const GL_OUTPUT_TEXTURE_COORD25_EXT = &h87B6
const GL_OUTPUT_TEXTURE_COORD26_EXT = &h87B7
const GL_OUTPUT_TEXTURE_COORD27_EXT = &h87B8
const GL_OUTPUT_TEXTURE_COORD28_EXT = &h87B9
const GL_OUTPUT_TEXTURE_COORD29_EXT = &h87BA
const GL_OUTPUT_TEXTURE_COORD30_EXT = &h87BB
const GL_OUTPUT_TEXTURE_COORD31_EXT = &h87BC
const GL_OUTPUT_FOG_EXT = &h87BD
const GL_SCALAR_EXT = &h87BE
const GL_VECTOR_EXT = &h87BF
const GL_MATRIX_EXT = &h87C0
const GL_VARIANT_EXT = &h87C1
const GL_INVARIANT_EXT = &h87C2
const GL_LOCAL_CONSTANT_EXT = &h87C3
const GL_LOCAL_EXT = &h87C4
const GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = &h87C5
const GL_MAX_VERTEX_SHADER_VARIANTS_EXT = &h87C6
const GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = &h87C7
const GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = &h87C8
const GL_MAX_VERTEX_SHADER_LOCALS_EXT = &h87C9
const GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = &h87CA
const GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = &h87CB
const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = &h87CC
const GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = &h87CD
const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = &h87CE
const GL_VERTEX_SHADER_INSTRUCTIONS_EXT = &h87CF
const GL_VERTEX_SHADER_VARIANTS_EXT = &h87D0
const GL_VERTEX_SHADER_INVARIANTS_EXT = &h87D1
const GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = &h87D2
const GL_VERTEX_SHADER_LOCALS_EXT = &h87D3
const GL_VERTEX_SHADER_OPTIMIZED_EXT = &h87D4
const GL_X_EXT = &h87D5
const GL_Y_EXT = &h87D6
const GL_Z_EXT = &h87D7
const GL_W_EXT = &h87D8
const GL_NEGATIVE_X_EXT = &h87D9
const GL_NEGATIVE_Y_EXT = &h87DA
const GL_NEGATIVE_Z_EXT = &h87DB
const GL_NEGATIVE_W_EXT = &h87DC
const GL_ZERO_EXT = &h87DD
const GL_ONE_EXT = &h87DE
const GL_NEGATIVE_ONE_EXT = &h87DF
const GL_NORMALIZED_RANGE_EXT = &h87E0
const GL_FULL_RANGE_EXT = &h87E1
const GL_CURRENT_VERTEX_EXT = &h87E2
const GL_MVP_MATRIX_EXT = &h87E3
const GL_VARIANT_VALUE_EXT = &h87E4
const GL_VARIANT_DATATYPE_EXT = &h87E5
const GL_VARIANT_ARRAY_STRIDE_EXT = &h87E6
const GL_VARIANT_ARRAY_TYPE_EXT = &h87E7
const GL_VARIANT_ARRAY_EXT = &h87E8
const GL_VARIANT_ARRAY_POINTER_EXT = &h87E9
const GL_INVARIANT_VALUE_EXT = &h87EA
const GL_INVARIANT_DATATYPE_EXT = &h87EB
const GL_LOCAL_CONSTANT_VALUE_EXT = &h87EC
const GL_LOCAL_CONSTANT_DATATYPE_EXT = &h87ED

type PFNGLBEGINVERTEXSHADEREXTPROC as sub()
type PFNGLENDVERTEXSHADEREXTPROC as sub()
type PFNGLBINDVERTEXSHADEREXTPROC as sub(byval id as GLuint)
type PFNGLGENVERTEXSHADERSEXTPROC as function(byval range as GLuint) as GLuint
type PFNGLDELETEVERTEXSHADEREXTPROC as sub(byval id as GLuint)
type PFNGLSHADEROP1EXTPROC as sub(byval op as GLenum, byval res as GLuint, byval arg1 as GLuint)
type PFNGLSHADEROP2EXTPROC as sub(byval op as GLenum, byval res as GLuint, byval arg1 as GLuint, byval arg2 as GLuint)
type PFNGLSHADEROP3EXTPROC as sub(byval op as GLenum, byval res as GLuint, byval arg1 as GLuint, byval arg2 as GLuint, byval arg3 as GLuint)
type PFNGLSWIZZLEEXTPROC as sub(byval res as GLuint, byval in as GLuint, byval outX as GLenum, byval outY as GLenum, byval outZ as GLenum, byval outW as GLenum)
type PFNGLWRITEMASKEXTPROC as sub(byval res as GLuint, byval in as GLuint, byval outX as GLenum, byval outY as GLenum, byval outZ as GLenum, byval outW as GLenum)
type PFNGLINSERTCOMPONENTEXTPROC as sub(byval res as GLuint, byval src as GLuint, byval num as GLuint)
type PFNGLEXTRACTCOMPONENTEXTPROC as sub(byval res as GLuint, byval src as GLuint, byval num as GLuint)
type PFNGLGENSYMBOLSEXTPROC as function(byval datatype as GLenum, byval storagetype as GLenum, byval range as GLenum, byval components as GLuint) as GLuint
type PFNGLSETINVARIANTEXTPROC as sub(byval id as GLuint, byval type as GLenum, byval addr as const any ptr)
type PFNGLSETLOCALCONSTANTEXTPROC as sub(byval id as GLuint, byval type as GLenum, byval addr as const any ptr)
type PFNGLVARIANTBVEXTPROC as sub(byval id as GLuint, byval addr as const GLbyte ptr)
type PFNGLVARIANTSVEXTPROC as sub(byval id as GLuint, byval addr as const GLshort ptr)
type PFNGLVARIANTIVEXTPROC as sub(byval id as GLuint, byval addr as const GLint ptr)
type PFNGLVARIANTFVEXTPROC as sub(byval id as GLuint, byval addr as const GLfloat ptr)
type PFNGLVARIANTDVEXTPROC as sub(byval id as GLuint, byval addr as const GLdouble ptr)
type PFNGLVARIANTUBVEXTPROC as sub(byval id as GLuint, byval addr as const GLubyte ptr)
type PFNGLVARIANTUSVEXTPROC as sub(byval id as GLuint, byval addr as const GLushort ptr)
type PFNGLVARIANTUIVEXTPROC as sub(byval id as GLuint, byval addr as const GLuint ptr)
type PFNGLVARIANTPOINTEREXTPROC as sub(byval id as GLuint, byval type as GLenum, byval stride as GLuint, byval addr as const any ptr)
type PFNGLENABLEVARIANTCLIENTSTATEEXTPROC as sub(byval id as GLuint)
type PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC as sub(byval id as GLuint)
type PFNGLBINDLIGHTPARAMETEREXTPROC as function(byval light as GLenum, byval value as GLenum) as GLuint
type PFNGLBINDMATERIALPARAMETEREXTPROC as function(byval face as GLenum, byval value as GLenum) as GLuint
type PFNGLBINDTEXGENPARAMETEREXTPROC as function(byval unit as GLenum, byval coord as GLenum, byval value as GLenum) as GLuint
type PFNGLBINDTEXTUREUNITPARAMETEREXTPROC as function(byval unit as GLenum, byval value as GLenum) as GLuint
type PFNGLBINDPARAMETEREXTPROC as function(byval value as GLenum) as GLuint
type PFNGLISVARIANTENABLEDEXTPROC as function(byval id as GLuint, byval cap as GLenum) as GLboolean
type PFNGLGETVARIANTBOOLEANVEXTPROC as sub(byval id as GLuint, byval value as GLenum, byval data as GLboolean ptr)
type PFNGLGETVARIANTINTEGERVEXTPROC as sub(byval id as GLuint, byval value as GLenum, byval data as GLint ptr)
type PFNGLGETVARIANTFLOATVEXTPROC as sub(byval id as GLuint, byval value as GLenum, byval data as GLfloat ptr)
type PFNGLGETVARIANTPOINTERVEXTPROC as sub(byval id as GLuint, byval value as GLenum, byval data as any ptr ptr)
type PFNGLGETINVARIANTBOOLEANVEXTPROC as sub(byval id as GLuint, byval value as GLenum, byval data as GLboolean ptr)
type PFNGLGETINVARIANTINTEGERVEXTPROC as sub(byval id as GLuint, byval value as GLenum, byval data as GLint ptr)
type PFNGLGETINVARIANTFLOATVEXTPROC as sub(byval id as GLuint, byval value as GLenum, byval data as GLfloat ptr)
type PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC as sub(byval id as GLuint, byval value as GLenum, byval data as GLboolean ptr)
type PFNGLGETLOCALCONSTANTINTEGERVEXTPROC as sub(byval id as GLuint, byval value as GLenum, byval data as GLint ptr)
type PFNGLGETLOCALCONSTANTFLOATVEXTPROC as sub(byval id as GLuint, byval value as GLenum, byval data as GLfloat ptr)


const GL_EXT_vertex_weighting = 1
const GL_MODELVIEW0_STACK_DEPTH_EXT = &h0BA3
const GL_MODELVIEW1_STACK_DEPTH_EXT = &h8502
const GL_MODELVIEW0_MATRIX_EXT = &h0BA6
const GL_MODELVIEW1_MATRIX_EXT = &h8506
const GL_VERTEX_WEIGHTING_EXT = &h8509
const GL_MODELVIEW0_EXT = &h1700
const GL_MODELVIEW1_EXT = &h850A
const GL_CURRENT_VERTEX_WEIGHT_EXT = &h850B
const GL_VERTEX_WEIGHT_ARRAY_EXT = &h850C
const GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = &h850D
const GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = &h850E
const GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = &h850F
const GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = &h8510

type PFNGLVERTEXWEIGHTFEXTPROC as sub(byval weight as GLfloat)
type PFNGLVERTEXWEIGHTFVEXTPROC as sub(byval weight as const GLfloat ptr)
type PFNGLVERTEXWEIGHTPOINTEREXTPROC as sub(byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval pointer as const any ptr)


const GL_EXT_x11_sync_object = 1
const GL_SYNC_X11_FENCE_EXT = &h90E1
type PFNGLIMPORTSYNCEXTPROC as function(byval external_sync_type as GLenum, byval external_sync as GLintptr, byval flags as GLbitfield) as GLsync


const GL_GREMEDY_frame_terminator = 1
type PFNGLFRAMETERMINATORGREMEDYPROC as sub()


const GL_GREMEDY_string_marker = 1
type PFNGLSTRINGMARKERGREMEDYPROC as sub(byval len as GLsizei, byval string as const any ptr)


const GL_HP_convolution_border_modes = 1
const GL_IGNORE_BORDER_HP = &h8150
const GL_CONSTANT_BORDER_HP = &h8151
const GL_REPLICATE_BORDER_HP = &h8153
const GL_CONVOLUTION_BORDER_COLOR_HP = &h8154
const GL_HP_image_transform = 1
const GL_IMAGE_SCALE_X_HP = &h8155
const GL_IMAGE_SCALE_Y_HP = &h8156
const GL_IMAGE_TRANSLATE_X_HP = &h8157
const GL_IMAGE_TRANSLATE_Y_HP = &h8158
const GL_IMAGE_ROTATE_ANGLE_HP = &h8159
const GL_IMAGE_ROTATE_ORIGIN_X_HP = &h815A
const GL_IMAGE_ROTATE_ORIGIN_Y_HP = &h815B
const GL_IMAGE_MAG_FILTER_HP = &h815C
const GL_IMAGE_MIN_FILTER_HP = &h815D
const GL_IMAGE_CUBIC_WEIGHT_HP = &h815E
const GL_CUBIC_HP = &h815F
const GL_AVERAGE_HP = &h8160
const GL_IMAGE_TRANSFORM_2D_HP = &h8161
const GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = &h8162
const GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = &h8163

type PFNGLIMAGETRANSFORMPARAMETERIHPPROC as sub(byval target as GLenum, byval pname as GLenum, byval param as GLint)
type PFNGLIMAGETRANSFORMPARAMETERFHPPROC as sub(byval target as GLenum, byval pname as GLenum, byval param as GLfloat)
type PFNGLIMAGETRANSFORMPARAMETERIVHPPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLIMAGETRANSFORMPARAMETERFVHPPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)


const GL_HP_occlusion_test = 1
const GL_OCCLUSION_TEST_HP = &h8165
const GL_OCCLUSION_TEST_RESULT_HP = &h8166
const GL_HP_texture_lighting = 1
const GL_TEXTURE_LIGHTING_MODE_HP = &h8167
const GL_TEXTURE_POST_SPECULAR_HP = &h8168
const GL_TEXTURE_PRE_SPECULAR_HP = &h8169
const GL_IBM_cull_vertex = 1
const GL_CULL_VERTEX_IBM = 103050
const GL_IBM_multimode_draw_arrays = 1
type PFNGLMULTIMODEDRAWARRAYSIBMPROC as sub(byval mode as const GLenum ptr, byval first as const GLint ptr, byval count as const GLsizei ptr, byval primcount as GLsizei, byval modestride as GLint)
type PFNGLMULTIMODEDRAWELEMENTSIBMPROC as sub(byval mode as const GLenum ptr, byval count as const GLsizei ptr, byval type as GLenum, byval indices as const any const ptr ptr, byval primcount as GLsizei, byval modestride as GLint)


const GL_IBM_rasterpos_clip = 1
const GL_RASTER_POSITION_UNCLIPPED_IBM = &h19262
const GL_IBM_static_data = 1
const GL_ALL_STATIC_DATA_IBM = 103060
const GL_STATIC_VERTEX_ARRAY_IBM = 103061
type PFNGLFLUSHSTATICDATAIBMPROC as sub(byval target as GLenum)


const GL_IBM_texture_mirrored_repeat = 1
const GL_MIRRORED_REPEAT_IBM = &h8370
const GL_IBM_vertex_array_lists = 1
const GL_VERTEX_ARRAY_LIST_IBM = 103070
const GL_NORMAL_ARRAY_LIST_IBM = 103071
const GL_COLOR_ARRAY_LIST_IBM = 103072
const GL_INDEX_ARRAY_LIST_IBM = 103073
const GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074
const GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075
const GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076
const GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077
const GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080
const GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081
const GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082
const GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083
const GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084
const GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085
const GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086
const GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087

type PFNGLCOLORPOINTERLISTIBMPROC as sub(byval size as GLint, byval type as GLenum, byval stride as GLint, byval pointer as const any ptr ptr, byval ptrstride as GLint)
type PFNGLSECONDARYCOLORPOINTERLISTIBMPROC as sub(byval size as GLint, byval type as GLenum, byval stride as GLint, byval pointer as const any ptr ptr, byval ptrstride as GLint)
type PFNGLEDGEFLAGPOINTERLISTIBMPROC as sub(byval stride as GLint, byval pointer as const GLboolean ptr ptr, byval ptrstride as GLint)
type PFNGLFOGCOORDPOINTERLISTIBMPROC as sub(byval type as GLenum, byval stride as GLint, byval pointer as const any ptr ptr, byval ptrstride as GLint)
type PFNGLINDEXPOINTERLISTIBMPROC as sub(byval type as GLenum, byval stride as GLint, byval pointer as const any ptr ptr, byval ptrstride as GLint)
type PFNGLNORMALPOINTERLISTIBMPROC as sub(byval type as GLenum, byval stride as GLint, byval pointer as const any ptr ptr, byval ptrstride as GLint)
type PFNGLTEXCOORDPOINTERLISTIBMPROC as sub(byval size as GLint, byval type as GLenum, byval stride as GLint, byval pointer as const any ptr ptr, byval ptrstride as GLint)
type PFNGLVERTEXPOINTERLISTIBMPROC as sub(byval size as GLint, byval type as GLenum, byval stride as GLint, byval pointer as const any ptr ptr, byval ptrstride as GLint)


const GL_INGR_blend_func_separate = 1
type PFNGLBLENDFUNCSEPARATEINGRPROC as sub(byval sfactorRGB as GLenum, byval dfactorRGB as GLenum, byval sfactorAlpha as GLenum, byval dfactorAlpha as GLenum)


const GL_INGR_color_clamp = 1
const GL_RED_MIN_CLAMP_INGR = &h8560
const GL_GREEN_MIN_CLAMP_INGR = &h8561
const GL_BLUE_MIN_CLAMP_INGR = &h8562
const GL_ALPHA_MIN_CLAMP_INGR = &h8563
const GL_RED_MAX_CLAMP_INGR = &h8564
const GL_GREEN_MAX_CLAMP_INGR = &h8565
const GL_BLUE_MAX_CLAMP_INGR = &h8566
const GL_ALPHA_MAX_CLAMP_INGR = &h8567
const GL_INGR_interlace_read = 1
const GL_INTERLACE_READ_INGR = &h8568
const GL_INTEL_fragment_shader_ordering = 1
const GL_INTEL_map_texture = 1
const GL_TEXTURE_MEMORY_LAYOUT_INTEL = &h83FF
const GL_LAYOUT_DEFAULT_INTEL = 0
const GL_LAYOUT_LINEAR_INTEL = 1
const GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2

type PFNGLSYNCTEXTUREINTELPROC as sub(byval texture as GLuint)
type PFNGLUNMAPTEXTURE2DINTELPROC as sub(byval texture as GLuint, byval level as GLint)
type PFNGLMAPTEXTURE2DINTELPROC as function(byval texture as GLuint, byval level as GLint, byval access as GLbitfield, byval stride as GLint ptr, byval layout as GLenum ptr) as any ptr


const GL_INTEL_parallel_arrays = 1
const GL_PARALLEL_ARRAYS_INTEL = &h83F4
const GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = &h83F5
const GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = &h83F6
const GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = &h83F7
const GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = &h83F8

type PFNGLVERTEXPOINTERVINTELPROC as sub(byval size as GLint, byval type as GLenum, byval pointer as const any ptr ptr)
type PFNGLNORMALPOINTERVINTELPROC as sub(byval type as GLenum, byval pointer as const any ptr ptr)
type PFNGLCOLORPOINTERVINTELPROC as sub(byval size as GLint, byval type as GLenum, byval pointer as const any ptr ptr)
type PFNGLTEXCOORDPOINTERVINTELPROC as sub(byval size as GLint, byval type as GLenum, byval pointer as const any ptr ptr)


const GL_INTEL_performance_query = 1
const GL_PERFQUERY_SINGLE_CONTEXT_INTEL = &h000000000
const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = &h00000001
const GL_PERFQUERY_WAIT_INTEL = &h83FB
const GL_PERFQUERY_FLUSH_INTEL = &h83FA
const GL_PERFQUERY_DONOT_FLUSH_INTEL = &h83F9
const GL_PERFQUERY_COUNTER_EVENT_INTEL = &h94F0
const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = &h94F1
const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = &h94F2
const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = &h94F3
const GL_PERFQUERY_COUNTER_RAW_INTEL = &h94F4
const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = &h94F5
const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = &h94F8
const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = &h94F9
const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = &h94FA
const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = &h94FB
const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = &h94FC
const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = &h94FD
const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = &h94FE
const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = &h94FF
const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = &h9500

type PFNGLBEGINPERFQUERYINTELPROC as sub(byval queryHandle as GLuint)
type PFNGLCREATEPERFQUERYINTELPROC as sub(byval queryId as GLuint, byval queryHandle as GLuint ptr)
type PFNGLDELETEPERFQUERYINTELPROC as sub(byval queryHandle as GLuint)
type PFNGLENDPERFQUERYINTELPROC as sub(byval queryHandle as GLuint)
type PFNGLGETFIRSTPERFQUERYIDINTELPROC as sub(byval queryId as GLuint ptr)
type PFNGLGETNEXTPERFQUERYIDINTELPROC as sub(byval queryId as GLuint, byval nextQueryId as GLuint ptr)
type PFNGLGETPERFCOUNTERINFOINTELPROC as sub(byval queryId as GLuint, byval counterId as GLuint, byval counterNameLength as GLuint, byval counterName as GLchar ptr, byval counterDescLength as GLuint, byval counterDesc as GLchar ptr, byval counterOffset as GLuint ptr, byval counterDataSize as GLuint ptr, byval counterTypeEnum as GLuint ptr, byval counterDataTypeEnum as GLuint ptr, byval rawCounterMaxValue as GLuint64 ptr)
type PFNGLGETPERFQUERYDATAINTELPROC as sub(byval queryHandle as GLuint, byval flags as GLuint, byval dataSize as GLsizei, byval data as GLvoid ptr, byval bytesWritten as GLuint ptr)
type PFNGLGETPERFQUERYIDBYNAMEINTELPROC as sub(byval queryName as GLchar ptr, byval queryId as GLuint ptr)
type PFNGLGETPERFQUERYINFOINTELPROC as sub(byval queryId as GLuint, byval queryNameLength as GLuint, byval queryName as GLchar ptr, byval dataSize as GLuint ptr, byval noCounters as GLuint ptr, byval noInstances as GLuint ptr, byval capsMask as GLuint ptr)


const GL_MESAX_texture_stack = 1
const GL_TEXTURE_1D_STACK_MESAX = &h8759
const GL_TEXTURE_2D_STACK_MESAX = &h875A
const GL_PROXY_TEXTURE_1D_STACK_MESAX = &h875B
const GL_PROXY_TEXTURE_2D_STACK_MESAX = &h875C
const GL_TEXTURE_1D_STACK_BINDING_MESAX = &h875D
const GL_TEXTURE_2D_STACK_BINDING_MESAX = &h875E
const GL_MESA_pack_invert = 1
const GL_PACK_INVERT_MESA = &h8758
const GL_MESA_resize_buffers = 1
type PFNGLRESIZEBUFFERSMESAPROC as sub()


const GL_MESA_window_pos = 1
type PFNGLWINDOWPOS2DMESAPROC as sub(byval x as GLdouble, byval y as GLdouble)
type PFNGLWINDOWPOS2DVMESAPROC as sub(byval v as const GLdouble ptr)
type PFNGLWINDOWPOS2FMESAPROC as sub(byval x as GLfloat, byval y as GLfloat)
type PFNGLWINDOWPOS2FVMESAPROC as sub(byval v as const GLfloat ptr)
type PFNGLWINDOWPOS2IMESAPROC as sub(byval x as GLint, byval y as GLint)
type PFNGLWINDOWPOS2IVMESAPROC as sub(byval v as const GLint ptr)
type PFNGLWINDOWPOS2SMESAPROC as sub(byval x as GLshort, byval y as GLshort)
type PFNGLWINDOWPOS2SVMESAPROC as sub(byval v as const GLshort ptr)
type PFNGLWINDOWPOS3DMESAPROC as sub(byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
type PFNGLWINDOWPOS3DVMESAPROC as sub(byval v as const GLdouble ptr)
type PFNGLWINDOWPOS3FMESAPROC as sub(byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLWINDOWPOS3FVMESAPROC as sub(byval v as const GLfloat ptr)
type PFNGLWINDOWPOS3IMESAPROC as sub(byval x as GLint, byval y as GLint, byval z as GLint)
type PFNGLWINDOWPOS3IVMESAPROC as sub(byval v as const GLint ptr)
type PFNGLWINDOWPOS3SMESAPROC as sub(byval x as GLshort, byval y as GLshort, byval z as GLshort)
type PFNGLWINDOWPOS3SVMESAPROC as sub(byval v as const GLshort ptr)
type PFNGLWINDOWPOS4DMESAPROC as sub(byval x as GLdouble, byval y as GLdouble, byval z as GLdouble, byval w as GLdouble)
type PFNGLWINDOWPOS4DVMESAPROC as sub(byval v as const GLdouble ptr)
type PFNGLWINDOWPOS4FMESAPROC as sub(byval x as GLfloat, byval y as GLfloat, byval z as GLfloat, byval w as GLfloat)
type PFNGLWINDOWPOS4FVMESAPROC as sub(byval v as const GLfloat ptr)
type PFNGLWINDOWPOS4IMESAPROC as sub(byval x as GLint, byval y as GLint, byval z as GLint, byval w as GLint)
type PFNGLWINDOWPOS4IVMESAPROC as sub(byval v as const GLint ptr)
type PFNGLWINDOWPOS4SMESAPROC as sub(byval x as GLshort, byval y as GLshort, byval z as GLshort, byval w as GLshort)
type PFNGLWINDOWPOS4SVMESAPROC as sub(byval v as const GLshort ptr)


const GL_MESA_ycbcr_texture = 1
const GL_UNSIGNED_SHORT_8_8_MESA = &h85BA
const GL_UNSIGNED_SHORT_8_8_REV_MESA = &h85BB
const GL_YCBCR_MESA = &h8757
const GL_NVX_conditional_render = 1
type PFNGLBEGINCONDITIONALRENDERNVXPROC as sub(byval id as GLuint)
type PFNGLENDCONDITIONALRENDERNVXPROC as sub()


const GL_NVX_gpu_memory_info = 1
const GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = &h9047
const GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = &h9048
const GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = &h9049
const GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = &h904A
const GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = &h904B
const GL_NV_bindless_multi_draw_indirect = 1
type PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC as sub(byval mode as GLenum, byval indirect as const any ptr, byval drawCount as GLsizei, byval stride as GLsizei, byval vertexBufferCount as GLint)
type PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC as sub(byval mode as GLenum, byval type as GLenum, byval indirect as const any ptr, byval drawCount as GLsizei, byval stride as GLsizei, byval vertexBufferCount as GLint)


const GL_NV_bindless_multi_draw_indirect_count = 1
type PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC as sub(byval mode as GLenum, byval indirect as const any ptr, byval drawCount as GLsizei, byval maxDrawCount as GLsizei, byval stride as GLsizei, byval vertexBufferCount as GLint)
type PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC as sub(byval mode as GLenum, byval type as GLenum, byval indirect as const any ptr, byval drawCount as GLsizei, byval maxDrawCount as GLsizei, byval stride as GLsizei, byval vertexBufferCount as GLint)


const GL_NV_bindless_texture = 1
type PFNGLGETTEXTUREHANDLENVPROC as function(byval texture as GLuint) as GLuint64
type PFNGLGETTEXTURESAMPLERHANDLENVPROC as function(byval texture as GLuint, byval sampler as GLuint) as GLuint64
type PFNGLMAKETEXTUREHANDLERESIDENTNVPROC as sub(byval handle as GLuint64)
type PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC as sub(byval handle as GLuint64)
type PFNGLGETIMAGEHANDLENVPROC as function(byval texture as GLuint, byval level as GLint, byval layered as GLboolean, byval layer as GLint, byval format as GLenum) as GLuint64
type PFNGLMAKEIMAGEHANDLERESIDENTNVPROC as sub(byval handle as GLuint64, byval access as GLenum)
type PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC as sub(byval handle as GLuint64)
type PFNGLUNIFORMHANDLEUI64NVPROC as sub(byval location as GLint, byval value as GLuint64)
type PFNGLUNIFORMHANDLEUI64VNVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLuint64 ptr)
type PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC as sub(byval program as GLuint, byval location as GLint, byval value as GLuint64)
type PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval values as const GLuint64 ptr)
type PFNGLISTEXTUREHANDLERESIDENTNVPROC as function(byval handle as GLuint64) as GLboolean
type PFNGLISIMAGEHANDLERESIDENTNVPROC as function(byval handle as GLuint64) as GLboolean


const GL_NV_blend_equation_advanced = 1
const GL_BLEND_OVERLAP_NV = &h9281
const GL_BLEND_PREMULTIPLIED_SRC_NV = &h9280
const GL_BLUE_NV = &h1905
const GL_COLORBURN_NV = &h929A
const GL_COLORDODGE_NV = &h9299
const GL_CONJOINT_NV = &h9284
const GL_CONTRAST_NV = &h92A1
const GL_DARKEN_NV = &h9297
const GL_DIFFERENCE_NV = &h929E
const GL_DISJOINT_NV = &h9283
const GL_DST_ATOP_NV = &h928F
const GL_DST_IN_NV = &h928B
const GL_DST_NV = &h9287
const GL_DST_OUT_NV = &h928D
const GL_DST_OVER_NV = &h9289
const GL_EXCLUSION_NV = &h92A0
const GL_GREEN_NV = &h1904
const GL_HARDLIGHT_NV = &h929B
const GL_HARDMIX_NV = &h92A9
const GL_HSL_COLOR_NV = &h92AF
const GL_HSL_HUE_NV = &h92AD
const GL_HSL_LUMINOSITY_NV = &h92B0
const GL_HSL_SATURATION_NV = &h92AE
const GL_INVERT_OVG_NV = &h92B4
const GL_INVERT_RGB_NV = &h92A3
const GL_LIGHTEN_NV = &h9298
const GL_LINEARBURN_NV = &h92A5
const GL_LINEARDODGE_NV = &h92A4
const GL_LINEARLIGHT_NV = &h92A7
const GL_MINUS_CLAMPED_NV = &h92B3
const GL_MINUS_NV = &h929F
const GL_MULTIPLY_NV = &h9294
const GL_OVERLAY_NV = &h9296
const GL_PINLIGHT_NV = &h92A8
const GL_PLUS_CLAMPED_ALPHA_NV = &h92B2
const GL_PLUS_CLAMPED_NV = &h92B1
const GL_PLUS_DARKER_NV = &h9292
const GL_PLUS_NV = &h9291
const GL_RED_NV = &h1903
const GL_SCREEN_NV = &h9295
const GL_SOFTLIGHT_NV = &h929C
const GL_SRC_ATOP_NV = &h928E
const GL_SRC_IN_NV = &h928A
const GL_SRC_NV = &h9286
const GL_SRC_OUT_NV = &h928C
const GL_SRC_OVER_NV = &h9288
const GL_UNCORRELATED_NV = &h9282
const GL_VIVIDLIGHT_NV = &h92A6
const GL_XOR_NV = &h1506
type PFNGLBLENDPARAMETERINVPROC as sub(byval pname as GLenum, byval value as GLint)
type PFNGLBLENDBARRIERNVPROC as sub()


const GL_NV_blend_equation_advanced_coherent = 1
const GL_BLEND_ADVANCED_COHERENT_NV = &h9285
const GL_NV_blend_square = 1
const GL_NV_compute_program5 = 1
const GL_COMPUTE_PROGRAM_NV = &h90FB
const GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = &h90FC
const GL_NV_conditional_render = 1
const GL_QUERY_WAIT_NV = &h8E13
const GL_QUERY_NO_WAIT_NV = &h8E14
const GL_QUERY_BY_REGION_WAIT_NV = &h8E15
const GL_QUERY_BY_REGION_NO_WAIT_NV = &h8E16
type PFNGLBEGINCONDITIONALRENDERNVPROC as sub(byval id as GLuint, byval mode as GLenum)
type PFNGLENDCONDITIONALRENDERNVPROC as sub()


const GL_NV_conservative_raster = 1
const GL_CONSERVATIVE_RASTERIZATION_NV = &h9346
const GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = &h9347
const GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = &h9348
const GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = &h9349
type PFNGLSUBPIXELPRECISIONBIASNVPROC as sub(byval xbits as GLuint, byval ybits as GLuint)


const GL_NV_copy_depth_to_color = 1
const GL_DEPTH_STENCIL_TO_RGBA_NV = &h886E
const GL_DEPTH_STENCIL_TO_BGRA_NV = &h886F
const GL_NV_copy_image = 1
type PFNGLCOPYIMAGESUBDATANVPROC as sub(byval srcName as GLuint, byval srcTarget as GLenum, byval srcLevel as GLint, byval srcX as GLint, byval srcY as GLint, byval srcZ as GLint, byval dstName as GLuint, byval dstTarget as GLenum, byval dstLevel as GLint, byval dstX as GLint, byval dstY as GLint, byval dstZ as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei)


const GL_NV_deep_texture3D = 1
const GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = &h90D0
const GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = &h90D1
const GL_NV_depth_buffer_float = 1
const GL_DEPTH_COMPONENT32F_NV = &h8DAB
const GL_DEPTH32F_STENCIL8_NV = &h8DAC
const GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = &h8DAD
const GL_DEPTH_BUFFER_FLOAT_MODE_NV = &h8DAF

type PFNGLDEPTHRANGEDNVPROC as sub(byval zNear as GLdouble, byval zFar as GLdouble)
type PFNGLCLEARDEPTHDNVPROC as sub(byval depth as GLdouble)
type PFNGLDEPTHBOUNDSDNVPROC as sub(byval zmin as GLdouble, byval zmax as GLdouble)


const GL_NV_depth_clamp = 1
const GL_DEPTH_CLAMP_NV = &h864F
const GL_NV_draw_texture = 1
type PFNGLDRAWTEXTURENVPROC as sub(byval texture as GLuint, byval sampler as GLuint, byval x0 as GLfloat, byval y0 as GLfloat, byval x1 as GLfloat, byval y1 as GLfloat, byval z as GLfloat, byval s0 as GLfloat, byval t0 as GLfloat, byval s1 as GLfloat, byval t1 as GLfloat)


const GL_NV_evaluators = 1
const GL_EVAL_2D_NV = &h86C0
const GL_EVAL_TRIANGULAR_2D_NV = &h86C1
const GL_MAP_TESSELLATION_NV = &h86C2
const GL_MAP_ATTRIB_U_ORDER_NV = &h86C3
const GL_MAP_ATTRIB_V_ORDER_NV = &h86C4
const GL_EVAL_FRACTIONAL_TESSELLATION_NV = &h86C5
const GL_EVAL_VERTEX_ATTRIB0_NV = &h86C6
const GL_EVAL_VERTEX_ATTRIB1_NV = &h86C7
const GL_EVAL_VERTEX_ATTRIB2_NV = &h86C8
const GL_EVAL_VERTEX_ATTRIB3_NV = &h86C9
const GL_EVAL_VERTEX_ATTRIB4_NV = &h86CA
const GL_EVAL_VERTEX_ATTRIB5_NV = &h86CB
const GL_EVAL_VERTEX_ATTRIB6_NV = &h86CC
const GL_EVAL_VERTEX_ATTRIB7_NV = &h86CD
const GL_EVAL_VERTEX_ATTRIB8_NV = &h86CE
const GL_EVAL_VERTEX_ATTRIB9_NV = &h86CF
const GL_EVAL_VERTEX_ATTRIB10_NV = &h86D0
const GL_EVAL_VERTEX_ATTRIB11_NV = &h86D1
const GL_EVAL_VERTEX_ATTRIB12_NV = &h86D2
const GL_EVAL_VERTEX_ATTRIB13_NV = &h86D3
const GL_EVAL_VERTEX_ATTRIB14_NV = &h86D4
const GL_EVAL_VERTEX_ATTRIB15_NV = &h86D5
const GL_MAX_MAP_TESSELLATION_NV = &h86D6
const GL_MAX_RATIONAL_EVAL_ORDER_NV = &h86D7

type PFNGLMAPCONTROLPOINTSNVPROC as sub(byval target as GLenum, byval index as GLuint, byval type as GLenum, byval ustride as GLsizei, byval vstride as GLsizei, byval uorder as GLint, byval vorder as GLint, byval packed as GLboolean, byval points as const any ptr)
type PFNGLMAPPARAMETERIVNVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLMAPPARAMETERFVNVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLGETMAPCONTROLPOINTSNVPROC as sub(byval target as GLenum, byval index as GLuint, byval type as GLenum, byval ustride as GLsizei, byval vstride as GLsizei, byval packed as GLboolean, byval points as any ptr)
type PFNGLGETMAPPARAMETERIVNVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETMAPPARAMETERFVNVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETMAPATTRIBPARAMETERIVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETMAPATTRIBPARAMETERFVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLEVALMAPSNVPROC as sub(byval target as GLenum, byval mode as GLenum)


const GL_NV_explicit_multisample = 1
const GL_SAMPLE_POSITION_NV = &h8E50
const GL_SAMPLE_MASK_NV = &h8E51
const GL_SAMPLE_MASK_VALUE_NV = &h8E52
const GL_TEXTURE_BINDING_RENDERBUFFER_NV = &h8E53
const GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = &h8E54
const GL_TEXTURE_RENDERBUFFER_NV = &h8E55
const GL_SAMPLER_RENDERBUFFER_NV = &h8E56
const GL_INT_SAMPLER_RENDERBUFFER_NV = &h8E57
const GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = &h8E58
const GL_MAX_SAMPLE_MASK_WORDS_NV = &h8E59

type PFNGLGETMULTISAMPLEFVNVPROC as sub(byval pname as GLenum, byval index as GLuint, byval val as GLfloat ptr)
type PFNGLSAMPLEMASKINDEXEDNVPROC as sub(byval index as GLuint, byval mask as GLbitfield)
type PFNGLTEXRENDERBUFFERNVPROC as sub(byval target as GLenum, byval renderbuffer as GLuint)


const GL_NV_fence = 1
const GL_ALL_COMPLETED_NV = &h84F2
const GL_FENCE_STATUS_NV = &h84F3
const GL_FENCE_CONDITION_NV = &h84F4

type PFNGLDELETEFENCESNVPROC as sub(byval n as GLsizei, byval fences as const GLuint ptr)
type PFNGLGENFENCESNVPROC as sub(byval n as GLsizei, byval fences as GLuint ptr)
type PFNGLISFENCENVPROC as function(byval fence as GLuint) as GLboolean
type PFNGLTESTFENCENVPROC as function(byval fence as GLuint) as GLboolean
type PFNGLGETFENCEIVNVPROC as sub(byval fence as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLFINISHFENCENVPROC as sub(byval fence as GLuint)
type PFNGLSETFENCENVPROC as sub(byval fence as GLuint, byval condition as GLenum)


const GL_NV_fill_rectangle = 1
const GL_FILL_RECTANGLE_NV = &h933C
const GL_NV_float_buffer = 1
const GL_FLOAT_R_NV = &h8880
const GL_FLOAT_RG_NV = &h8881
const GL_FLOAT_RGB_NV = &h8882
const GL_FLOAT_RGBA_NV = &h8883
const GL_FLOAT_R16_NV = &h8884
const GL_FLOAT_R32_NV = &h8885
const GL_FLOAT_RG16_NV = &h8886
const GL_FLOAT_RG32_NV = &h8887
const GL_FLOAT_RGB16_NV = &h8888
const GL_FLOAT_RGB32_NV = &h8889
const GL_FLOAT_RGBA16_NV = &h888A
const GL_FLOAT_RGBA32_NV = &h888B
const GL_TEXTURE_FLOAT_COMPONENTS_NV = &h888C
const GL_FLOAT_CLEAR_COLOR_VALUE_NV = &h888D
const GL_FLOAT_RGBA_MODE_NV = &h888E
const GL_NV_fog_distance = 1
const GL_FOG_DISTANCE_MODE_NV = &h855A
const GL_EYE_RADIAL_NV = &h855B
const GL_EYE_PLANE_ABSOLUTE_NV = &h855C
const GL_NV_fragment_coverage_to_color = 1
const GL_FRAGMENT_COVERAGE_TO_COLOR_NV = &h92DD
const GL_FRAGMENT_COVERAGE_COLOR_NV = &h92DE
type PFNGLFRAGMENTCOVERAGECOLORNVPROC as sub(byval color as GLuint)


const GL_NV_fragment_program = 1
const GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = &h8868
const GL_FRAGMENT_PROGRAM_NV = &h8870
const GL_MAX_TEXTURE_COORDS_NV = &h8871
const GL_MAX_TEXTURE_IMAGE_UNITS_NV = &h8872
const GL_FRAGMENT_PROGRAM_BINDING_NV = &h8873
const GL_PROGRAM_ERROR_STRING_NV = &h8874

type PFNGLPROGRAMNAMEDPARAMETER4FNVPROC as sub(byval id as GLuint, byval len as GLsizei, byval name as const GLubyte ptr, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat, byval w as GLfloat)
type PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC as sub(byval id as GLuint, byval len as GLsizei, byval name as const GLubyte ptr, byval v as const GLfloat ptr)
type PFNGLPROGRAMNAMEDPARAMETER4DNVPROC as sub(byval id as GLuint, byval len as GLsizei, byval name as const GLubyte ptr, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble, byval w as GLdouble)
type PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC as sub(byval id as GLuint, byval len as GLsizei, byval name as const GLubyte ptr, byval v as const GLdouble ptr)
type PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC as sub(byval id as GLuint, byval len as GLsizei, byval name as const GLubyte ptr, byval params as GLfloat ptr)
type PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC as sub(byval id as GLuint, byval len as GLsizei, byval name as const GLubyte ptr, byval params as GLdouble ptr)


const GL_NV_fragment_program2 = 1
const GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = &h88F4
const GL_MAX_PROGRAM_CALL_DEPTH_NV = &h88F5
const GL_MAX_PROGRAM_IF_DEPTH_NV = &h88F6
const GL_MAX_PROGRAM_LOOP_DEPTH_NV = &h88F7
const GL_MAX_PROGRAM_LOOP_COUNT_NV = &h88F8
const GL_NV_fragment_program4 = 1
const GL_NV_fragment_program_option = 1
const GL_NV_fragment_shader_interlock = 1
const GL_NV_framebuffer_mixed_samples = 1
const GL_COVERAGE_MODULATION_TABLE_NV = &h9331
const GL_COLOR_SAMPLES_NV = &h8E20
const GL_DEPTH_SAMPLES_NV = &h932D
const GL_STENCIL_SAMPLES_NV = &h932E
const GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = &h932F
const GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = &h9330
const GL_COVERAGE_MODULATION_NV = &h9332
const GL_COVERAGE_MODULATION_TABLE_SIZE_NV = &h9333

type PFNGLCOVERAGEMODULATIONTABLENVPROC as sub(byval n as GLsizei, byval v as const GLfloat ptr)
type PFNGLGETCOVERAGEMODULATIONTABLENVPROC as sub(byval bufsize as GLsizei, byval v as GLfloat ptr)
type PFNGLCOVERAGEMODULATIONNVPROC as sub(byval components as GLenum)


const GL_NV_framebuffer_multisample_coverage = 1
const GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = &h8CAB
const GL_RENDERBUFFER_COLOR_SAMPLES_NV = &h8E10
const GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = &h8E11
const GL_MULTISAMPLE_COVERAGE_MODES_NV = &h8E12
type PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC as sub(byval target as GLenum, byval coverageSamples as GLsizei, byval colorSamples as GLsizei, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei)


const GL_NV_geometry_program4 = 1
const GL_GEOMETRY_PROGRAM_NV = &h8C26
const GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = &h8C27
const GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = &h8C28

type PFNGLPROGRAMVERTEXLIMITNVPROC as sub(byval target as GLenum, byval limit as GLint)
type PFNGLFRAMEBUFFERTEXTUREEXTPROC as sub(byval target as GLenum, byval attachment as GLenum, byval texture as GLuint, byval level as GLint)
type PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC as sub(byval target as GLenum, byval attachment as GLenum, byval texture as GLuint, byval level as GLint, byval face as GLenum)


const GL_NV_geometry_shader4 = 1
const GL_NV_geometry_shader_passthrough = 1
const GL_NV_gpu_program4 = 1
const GL_MIN_PROGRAM_TEXEL_OFFSET_NV = &h8904
const GL_MAX_PROGRAM_TEXEL_OFFSET_NV = &h8905
const GL_PROGRAM_ATTRIB_COMPONENTS_NV = &h8906
const GL_PROGRAM_RESULT_COMPONENTS_NV = &h8907
const GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = &h8908
const GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = &h8909
const GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = &h8DA5
const GL_MAX_PROGRAM_GENERIC_RESULTS_NV = &h8DA6

type PFNGLPROGRAMLOCALPARAMETERI4INVPROC as sub(byval target as GLenum, byval index as GLuint, byval x as GLint, byval y as GLint, byval z as GLint, byval w as GLint)
type PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval params as const GLint ptr)
type PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval count as GLsizei, byval params as const GLint ptr)
type PFNGLPROGRAMLOCALPARAMETERI4UINVPROC as sub(byval target as GLenum, byval index as GLuint, byval x as GLuint, byval y as GLuint, byval z as GLuint, byval w as GLuint)
type PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval params as const GLuint ptr)
type PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval count as GLsizei, byval params as const GLuint ptr)
type PFNGLPROGRAMENVPARAMETERI4INVPROC as sub(byval target as GLenum, byval index as GLuint, byval x as GLint, byval y as GLint, byval z as GLint, byval w as GLint)
type PFNGLPROGRAMENVPARAMETERI4IVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval params as const GLint ptr)
type PFNGLPROGRAMENVPARAMETERSI4IVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval count as GLsizei, byval params as const GLint ptr)
type PFNGLPROGRAMENVPARAMETERI4UINVPROC as sub(byval target as GLenum, byval index as GLuint, byval x as GLuint, byval y as GLuint, byval z as GLuint, byval w as GLuint)
type PFNGLPROGRAMENVPARAMETERI4UIVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval params as const GLuint ptr)
type PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval count as GLsizei, byval params as const GLuint ptr)
type PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval params as GLint ptr)
type PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval params as GLuint ptr)
type PFNGLGETPROGRAMENVPARAMETERIIVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval params as GLint ptr)
type PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval params as GLuint ptr)


const GL_NV_gpu_program5 = 1
const GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = &h8E5A
const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = &h8E5B
const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = &h8E5C
const GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = &h8E5D
const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = &h8E5E
const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = &h8E5F
const GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = &h8F44
const GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = &h8F45
type PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC as sub(byval target as GLenum, byval count as GLsizei, byval params as const GLuint ptr)
type PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval param as GLuint ptr)


const GL_NV_gpu_program5_mem_extended = 1
const GL_NV_gpu_shader5 = 1
const GL_NV_half_float = 1
type GLhalfNV as ushort
const GL_HALF_FLOAT_NV = &h140B

type PFNGLVERTEX2HNVPROC as sub(byval x as GLhalfNV, byval y as GLhalfNV)
type PFNGLVERTEX2HVNVPROC as sub(byval v as const GLhalfNV ptr)
type PFNGLVERTEX3HNVPROC as sub(byval x as GLhalfNV, byval y as GLhalfNV, byval z as GLhalfNV)
type PFNGLVERTEX3HVNVPROC as sub(byval v as const GLhalfNV ptr)
type PFNGLVERTEX4HNVPROC as sub(byval x as GLhalfNV, byval y as GLhalfNV, byval z as GLhalfNV, byval w as GLhalfNV)
type PFNGLVERTEX4HVNVPROC as sub(byval v as const GLhalfNV ptr)
type PFNGLNORMAL3HNVPROC as sub(byval nx as GLhalfNV, byval ny as GLhalfNV, byval nz as GLhalfNV)
type PFNGLNORMAL3HVNVPROC as sub(byval v as const GLhalfNV ptr)
type PFNGLCOLOR3HNVPROC as sub(byval red as GLhalfNV, byval green as GLhalfNV, byval blue as GLhalfNV)
type PFNGLCOLOR3HVNVPROC as sub(byval v as const GLhalfNV ptr)
type PFNGLCOLOR4HNVPROC as sub(byval red as GLhalfNV, byval green as GLhalfNV, byval blue as GLhalfNV, byval alpha as GLhalfNV)
type PFNGLCOLOR4HVNVPROC as sub(byval v as const GLhalfNV ptr)
type PFNGLTEXCOORD1HNVPROC as sub(byval s as GLhalfNV)
type PFNGLTEXCOORD1HVNVPROC as sub(byval v as const GLhalfNV ptr)
type PFNGLTEXCOORD2HNVPROC as sub(byval s as GLhalfNV, byval t as GLhalfNV)
type PFNGLTEXCOORD2HVNVPROC as sub(byval v as const GLhalfNV ptr)
type PFNGLTEXCOORD3HNVPROC as sub(byval s as GLhalfNV, byval t as GLhalfNV, byval r as GLhalfNV)
type PFNGLTEXCOORD3HVNVPROC as sub(byval v as const GLhalfNV ptr)
type PFNGLTEXCOORD4HNVPROC as sub(byval s as GLhalfNV, byval t as GLhalfNV, byval r as GLhalfNV, byval q as GLhalfNV)
type PFNGLTEXCOORD4HVNVPROC as sub(byval v as const GLhalfNV ptr)
type PFNGLMULTITEXCOORD1HNVPROC as sub(byval target as GLenum, byval s as GLhalfNV)
type PFNGLMULTITEXCOORD1HVNVPROC as sub(byval target as GLenum, byval v as const GLhalfNV ptr)
type PFNGLMULTITEXCOORD2HNVPROC as sub(byval target as GLenum, byval s as GLhalfNV, byval t as GLhalfNV)
type PFNGLMULTITEXCOORD2HVNVPROC as sub(byval target as GLenum, byval v as const GLhalfNV ptr)
type PFNGLMULTITEXCOORD3HNVPROC as sub(byval target as GLenum, byval s as GLhalfNV, byval t as GLhalfNV, byval r as GLhalfNV)
type PFNGLMULTITEXCOORD3HVNVPROC as sub(byval target as GLenum, byval v as const GLhalfNV ptr)
type PFNGLMULTITEXCOORD4HNVPROC as sub(byval target as GLenum, byval s as GLhalfNV, byval t as GLhalfNV, byval r as GLhalfNV, byval q as GLhalfNV)
type PFNGLMULTITEXCOORD4HVNVPROC as sub(byval target as GLenum, byval v as const GLhalfNV ptr)
type PFNGLFOGCOORDHNVPROC as sub(byval fog as GLhalfNV)
type PFNGLFOGCOORDHVNVPROC as sub(byval fog as const GLhalfNV ptr)
type PFNGLSECONDARYCOLOR3HNVPROC as sub(byval red as GLhalfNV, byval green as GLhalfNV, byval blue as GLhalfNV)
type PFNGLSECONDARYCOLOR3HVNVPROC as sub(byval v as const GLhalfNV ptr)
type PFNGLVERTEXWEIGHTHNVPROC as sub(byval weight as GLhalfNV)
type PFNGLVERTEXWEIGHTHVNVPROC as sub(byval weight as const GLhalfNV ptr)
type PFNGLVERTEXATTRIB1HNVPROC as sub(byval index as GLuint, byval x as GLhalfNV)
type PFNGLVERTEXATTRIB1HVNVPROC as sub(byval index as GLuint, byval v as const GLhalfNV ptr)
type PFNGLVERTEXATTRIB2HNVPROC as sub(byval index as GLuint, byval x as GLhalfNV, byval y as GLhalfNV)
type PFNGLVERTEXATTRIB2HVNVPROC as sub(byval index as GLuint, byval v as const GLhalfNV ptr)
type PFNGLVERTEXATTRIB3HNVPROC as sub(byval index as GLuint, byval x as GLhalfNV, byval y as GLhalfNV, byval z as GLhalfNV)
type PFNGLVERTEXATTRIB3HVNVPROC as sub(byval index as GLuint, byval v as const GLhalfNV ptr)
type PFNGLVERTEXATTRIB4HNVPROC as sub(byval index as GLuint, byval x as GLhalfNV, byval y as GLhalfNV, byval z as GLhalfNV, byval w as GLhalfNV)
type PFNGLVERTEXATTRIB4HVNVPROC as sub(byval index as GLuint, byval v as const GLhalfNV ptr)
type PFNGLVERTEXATTRIBS1HVNVPROC as sub(byval index as GLuint, byval n as GLsizei, byval v as const GLhalfNV ptr)
type PFNGLVERTEXATTRIBS2HVNVPROC as sub(byval index as GLuint, byval n as GLsizei, byval v as const GLhalfNV ptr)
type PFNGLVERTEXATTRIBS3HVNVPROC as sub(byval index as GLuint, byval n as GLsizei, byval v as const GLhalfNV ptr)
type PFNGLVERTEXATTRIBS4HVNVPROC as sub(byval index as GLuint, byval n as GLsizei, byval v as const GLhalfNV ptr)


const GL_NV_internalformat_sample_query = 1
const GL_MULTISAMPLES_NV = &h9371
const GL_SUPERSAMPLE_SCALE_X_NV = &h9372
const GL_SUPERSAMPLE_SCALE_Y_NV = &h9373
const GL_CONFORMANT_NV = &h9374
type PFNGLGETINTERNALFORMATSAMPLEIVNVPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval samples as GLsizei, byval pname as GLenum, byval bufSize as GLsizei, byval params as GLint ptr)


const GL_NV_light_max_exponent = 1
const GL_MAX_SHININESS_NV = &h8504
const GL_MAX_SPOT_EXPONENT_NV = &h8505
const GL_NV_multisample_coverage = 1
const GL_NV_multisample_filter_hint = 1
const GL_MULTISAMPLE_FILTER_HINT_NV = &h8534
const GL_NV_occlusion_query = 1
const GL_PIXEL_COUNTER_BITS_NV = &h8864
const GL_CURRENT_OCCLUSION_QUERY_ID_NV = &h8865
const GL_PIXEL_COUNT_NV = &h8866
const GL_PIXEL_COUNT_AVAILABLE_NV = &h8867

type PFNGLGENOCCLUSIONQUERIESNVPROC as sub(byval n as GLsizei, byval ids as GLuint ptr)
type PFNGLDELETEOCCLUSIONQUERIESNVPROC as sub(byval n as GLsizei, byval ids as const GLuint ptr)
type PFNGLISOCCLUSIONQUERYNVPROC as function(byval id as GLuint) as GLboolean
type PFNGLBEGINOCCLUSIONQUERYNVPROC as sub(byval id as GLuint)
type PFNGLENDOCCLUSIONQUERYNVPROC as sub()
type PFNGLGETOCCLUSIONQUERYIVNVPROC as sub(byval id as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETOCCLUSIONQUERYUIVNVPROC as sub(byval id as GLuint, byval pname as GLenum, byval params as GLuint ptr)


const GL_NV_packed_depth_stencil = 1
const GL_DEPTH_STENCIL_NV = &h84F9
const GL_UNSIGNED_INT_24_8_NV = &h84FA
const GL_NV_parameter_buffer_object = 1
const GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = &h8DA0
const GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = &h8DA1
const GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = &h8DA2
const GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = &h8DA3
const GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = &h8DA4

type PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC as sub(byval target as GLenum, byval bindingIndex as GLuint, byval wordIndex as GLuint, byval count as GLsizei, byval params as const GLfloat ptr)
type PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC as sub(byval target as GLenum, byval bindingIndex as GLuint, byval wordIndex as GLuint, byval count as GLsizei, byval params as const GLint ptr)
type PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC as sub(byval target as GLenum, byval bindingIndex as GLuint, byval wordIndex as GLuint, byval count as GLsizei, byval params as const GLuint ptr)


const GL_NV_parameter_buffer_object2 = 1
const GL_NV_path_rendering = 1
const GL_PATH_FORMAT_SVG_NV = &h9070
const GL_PATH_FORMAT_PS_NV = &h9071
const GL_STANDARD_FONT_NAME_NV = &h9072
const GL_SYSTEM_FONT_NAME_NV = &h9073
const GL_FILE_NAME_NV = &h9074
const GL_PATH_STROKE_WIDTH_NV = &h9075
const GL_PATH_END_CAPS_NV = &h9076
const GL_PATH_INITIAL_END_CAP_NV = &h9077
const GL_PATH_TERMINAL_END_CAP_NV = &h9078
const GL_PATH_JOIN_STYLE_NV = &h9079
const GL_PATH_MITER_LIMIT_NV = &h907A
const GL_PATH_DASH_CAPS_NV = &h907B
const GL_PATH_INITIAL_DASH_CAP_NV = &h907C
const GL_PATH_TERMINAL_DASH_CAP_NV = &h907D
const GL_PATH_DASH_OFFSET_NV = &h907E
const GL_PATH_CLIENT_LENGTH_NV = &h907F
const GL_PATH_FILL_MODE_NV = &h9080
const GL_PATH_FILL_MASK_NV = &h9081
const GL_PATH_FILL_COVER_MODE_NV = &h9082
const GL_PATH_STROKE_COVER_MODE_NV = &h9083
const GL_PATH_STROKE_MASK_NV = &h9084
const GL_COUNT_UP_NV = &h9088
const GL_COUNT_DOWN_NV = &h9089
const GL_PATH_OBJECT_BOUNDING_BOX_NV = &h908A
const GL_CONVEX_HULL_NV = &h908B
const GL_BOUNDING_BOX_NV = &h908D
const GL_TRANSLATE_X_NV = &h908E
const GL_TRANSLATE_Y_NV = &h908F
const GL_TRANSLATE_2D_NV = &h9090
const GL_TRANSLATE_3D_NV = &h9091
const GL_AFFINE_2D_NV = &h9092
const GL_AFFINE_3D_NV = &h9094
const GL_TRANSPOSE_AFFINE_2D_NV = &h9096
const GL_TRANSPOSE_AFFINE_3D_NV = &h9098
const GL_UTF8_NV = &h909A
const GL_UTF16_NV = &h909B
const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = &h909C
const GL_PATH_COMMAND_COUNT_NV = &h909D
const GL_PATH_COORD_COUNT_NV = &h909E
const GL_PATH_DASH_ARRAY_COUNT_NV = &h909F
const GL_PATH_COMPUTED_LENGTH_NV = &h90A0
const GL_PATH_FILL_BOUNDING_BOX_NV = &h90A1
const GL_PATH_STROKE_BOUNDING_BOX_NV = &h90A2
const GL_SQUARE_NV = &h90A3
const GL_ROUND_NV = &h90A4
const GL_TRIANGULAR_NV = &h90A5
const GL_BEVEL_NV = &h90A6
const GL_MITER_REVERT_NV = &h90A7
const GL_MITER_TRUNCATE_NV = &h90A8
const GL_SKIP_MISSING_GLYPH_NV = &h90A9
const GL_USE_MISSING_GLYPH_NV = &h90AA
const GL_PATH_ERROR_POSITION_NV = &h90AB
const GL_ACCUM_ADJACENT_PAIRS_NV = &h90AD
const GL_ADJACENT_PAIRS_NV = &h90AE
const GL_FIRST_TO_REST_NV = &h90AF
const GL_PATH_GEN_MODE_NV = &h90B0
const GL_PATH_GEN_COEFF_NV = &h90B1
const GL_PATH_GEN_COMPONENTS_NV = &h90B3
const GL_PATH_STENCIL_FUNC_NV = &h90B7
const GL_PATH_STENCIL_REF_NV = &h90B8
const GL_PATH_STENCIL_VALUE_MASK_NV = &h90B9
const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = &h90BD
const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = &h90BE
const GL_PATH_COVER_DEPTH_FUNC_NV = &h90BF
const GL_PATH_DASH_OFFSET_RESET_NV = &h90B4
const GL_MOVE_TO_RESETS_NV = &h90B5
const GL_MOVE_TO_CONTINUES_NV = &h90B6
const GL_CLOSE_PATH_NV = &h000
const GL_MOVE_TO_NV = &h02
const GL_RELATIVE_MOVE_TO_NV = &h03
const GL_LINE_TO_NV = &h04
const GL_RELATIVE_LINE_TO_NV = &h05
const GL_HORIZONTAL_LINE_TO_NV = &h06
const GL_RELATIVE_HORIZONTAL_LINE_TO_NV = &h07
const GL_VERTICAL_LINE_TO_NV = &h08
const GL_RELATIVE_VERTICAL_LINE_TO_NV = &h09
const GL_QUADRATIC_CURVE_TO_NV = &h0A
const GL_RELATIVE_QUADRATIC_CURVE_TO_NV = &h0B
const GL_CUBIC_CURVE_TO_NV = &h0C
const GL_RELATIVE_CUBIC_CURVE_TO_NV = &h0D
const GL_SMOOTH_QUADRATIC_CURVE_TO_NV = &h0E
const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = &h0F
const GL_SMOOTH_CUBIC_CURVE_TO_NV = &h10
const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = &h11
const GL_SMALL_CCW_ARC_TO_NV = &h12
const GL_RELATIVE_SMALL_CCW_ARC_TO_NV = &h13
const GL_SMALL_CW_ARC_TO_NV = &h14
const GL_RELATIVE_SMALL_CW_ARC_TO_NV = &h15
const GL_LARGE_CCW_ARC_TO_NV = &h16
const GL_RELATIVE_LARGE_CCW_ARC_TO_NV = &h17
const GL_LARGE_CW_ARC_TO_NV = &h18
const GL_RELATIVE_LARGE_CW_ARC_TO_NV = &h19
const GL_RESTART_PATH_NV = &hF0
const GL_DUP_FIRST_CUBIC_CURVE_TO_NV = &hF2
const GL_DUP_LAST_CUBIC_CURVE_TO_NV = &hF4
const GL_RECT_NV = &hF6
const GL_CIRCULAR_CCW_ARC_TO_NV = &hF8
const GL_CIRCULAR_CW_ARC_TO_NV = &hFA
const GL_CIRCULAR_TANGENT_ARC_TO_NV = &hFC
const GL_ARC_TO_NV = &hFE
const GL_RELATIVE_ARC_TO_NV = &hFF
const GL_BOLD_BIT_NV = &h01
const GL_ITALIC_BIT_NV = &h02
const GL_GLYPH_WIDTH_BIT_NV = &h01
const GL_GLYPH_HEIGHT_BIT_NV = &h02
const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = &h04
const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = &h08
const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = &h10
const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = &h20
const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = &h40
const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = &h80
const GL_GLYPH_HAS_KERNING_BIT_NV = &h100
const GL_FONT_X_MIN_BOUNDS_BIT_NV = &h00010000
const GL_FONT_Y_MIN_BOUNDS_BIT_NV = &h00020000
const GL_FONT_X_MAX_BOUNDS_BIT_NV = &h00040000
const GL_FONT_Y_MAX_BOUNDS_BIT_NV = &h00080000
const GL_FONT_UNITS_PER_EM_BIT_NV = &h00100000
const GL_FONT_ASCENDER_BIT_NV = &h00200000
const GL_FONT_DESCENDER_BIT_NV = &h00400000
const GL_FONT_HEIGHT_BIT_NV = &h00800000
const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = &h01000000
const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = &h02000000
const GL_FONT_UNDERLINE_POSITION_BIT_NV = &h04000000
const GL_FONT_UNDERLINE_THICKNESS_BIT_NV = &h08000000
const GL_FONT_HAS_KERNING_BIT_NV = &h10000000
const GL_ROUNDED_RECT_NV = &hE8
const GL_RELATIVE_ROUNDED_RECT_NV = &hE9
const GL_ROUNDED_RECT2_NV = &hEA
const GL_RELATIVE_ROUNDED_RECT2_NV = &hEB
const GL_ROUNDED_RECT4_NV = &hEC
const GL_RELATIVE_ROUNDED_RECT4_NV = &hED
const GL_ROUNDED_RECT8_NV = &hEE
const GL_RELATIVE_ROUNDED_RECT8_NV = &hEF
const GL_RELATIVE_RECT_NV = &hF7
const GL_FONT_GLYPHS_AVAILABLE_NV = &h9368
const GL_FONT_TARGET_UNAVAILABLE_NV = &h9369
const GL_FONT_UNAVAILABLE_NV = &h936A
const GL_FONT_UNINTELLIGIBLE_NV = &h936B
const GL_CONIC_CURVE_TO_NV = &h1A
const GL_RELATIVE_CONIC_CURVE_TO_NV = &h1B
const GL_FONT_NUM_GLYPH_INDICES_BIT_NV = &h20000000
const GL_STANDARD_FONT_FORMAT_NV = &h936C
const GL_2_BYTES_NV = &h1407
const GL_3_BYTES_NV = &h1408
const GL_4_BYTES_NV = &h1409
const GL_EYE_LINEAR_NV = &h2400
const GL_OBJECT_LINEAR_NV = &h2401
const GL_CONSTANT_NV = &h8576
const GL_PATH_FOG_GEN_MODE_NV = &h90AC
const GL_PRIMARY_COLOR_NV = &h852C
const GL_SECONDARY_COLOR_NV = &h852D
const GL_PATH_GEN_COLOR_FORMAT_NV = &h90B2
const GL_PATH_PROJECTION_NV = &h1701
const GL_PATH_MODELVIEW_NV = &h1700
const GL_PATH_MODELVIEW_STACK_DEPTH_NV = &h0BA3
const GL_PATH_MODELVIEW_MATRIX_NV = &h0BA6
const GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = &h0D36
const GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = &h84E3
const GL_PATH_PROJECTION_STACK_DEPTH_NV = &h0BA4
const GL_PATH_PROJECTION_MATRIX_NV = &h0BA7
const GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = &h0D38
const GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = &h84E4
const GL_FRAGMENT_INPUT_NV = &h936D

type PFNGLGENPATHSNVPROC as function(byval range as GLsizei) as GLuint
type PFNGLDELETEPATHSNVPROC as sub(byval path as GLuint, byval range as GLsizei)
type PFNGLISPATHNVPROC as function(byval path as GLuint) as GLboolean
type PFNGLPATHCOMMANDSNVPROC as sub(byval path as GLuint, byval numCommands as GLsizei, byval commands as const GLubyte ptr, byval numCoords as GLsizei, byval coordType as GLenum, byval coords as const any ptr)
type PFNGLPATHCOORDSNVPROC as sub(byval path as GLuint, byval numCoords as GLsizei, byval coordType as GLenum, byval coords as const any ptr)
type PFNGLPATHSUBCOMMANDSNVPROC as sub(byval path as GLuint, byval commandStart as GLsizei, byval commandsToDelete as GLsizei, byval numCommands as GLsizei, byval commands as const GLubyte ptr, byval numCoords as GLsizei, byval coordType as GLenum, byval coords as const any ptr)
type PFNGLPATHSUBCOORDSNVPROC as sub(byval path as GLuint, byval coordStart as GLsizei, byval numCoords as GLsizei, byval coordType as GLenum, byval coords as const any ptr)
type PFNGLPATHSTRINGNVPROC as sub(byval path as GLuint, byval format as GLenum, byval length as GLsizei, byval pathString as const any ptr)
type PFNGLPATHGLYPHSNVPROC as sub(byval firstPathName as GLuint, byval fontTarget as GLenum, byval fontName as const any ptr, byval fontStyle as GLbitfield, byval numGlyphs as GLsizei, byval type as GLenum, byval charcodes as const any ptr, byval handleMissingGlyphs as GLenum, byval pathParameterTemplate as GLuint, byval emScale as GLfloat)
type PFNGLPATHGLYPHRANGENVPROC as sub(byval firstPathName as GLuint, byval fontTarget as GLenum, byval fontName as const any ptr, byval fontStyle as GLbitfield, byval firstGlyph as GLuint, byval numGlyphs as GLsizei, byval handleMissingGlyphs as GLenum, byval pathParameterTemplate as GLuint, byval emScale as GLfloat)
type PFNGLWEIGHTPATHSNVPROC as sub(byval resultPath as GLuint, byval numPaths as GLsizei, byval paths as const GLuint ptr, byval weights as const GLfloat ptr)
type PFNGLCOPYPATHNVPROC as sub(byval resultPath as GLuint, byval srcPath as GLuint)
type PFNGLINTERPOLATEPATHSNVPROC as sub(byval resultPath as GLuint, byval pathA as GLuint, byval pathB as GLuint, byval weight as GLfloat)
type PFNGLTRANSFORMPATHNVPROC as sub(byval resultPath as GLuint, byval srcPath as GLuint, byval transformType as GLenum, byval transformValues as const GLfloat ptr)
type PFNGLPATHPARAMETERIVNVPROC as sub(byval path as GLuint, byval pname as GLenum, byval value as const GLint ptr)
type PFNGLPATHPARAMETERINVPROC as sub(byval path as GLuint, byval pname as GLenum, byval value as GLint)
type PFNGLPATHPARAMETERFVNVPROC as sub(byval path as GLuint, byval pname as GLenum, byval value as const GLfloat ptr)
type PFNGLPATHPARAMETERFNVPROC as sub(byval path as GLuint, byval pname as GLenum, byval value as GLfloat)
type PFNGLPATHDASHARRAYNVPROC as sub(byval path as GLuint, byval dashCount as GLsizei, byval dashArray as const GLfloat ptr)
type PFNGLPATHSTENCILFUNCNVPROC as sub(byval func as GLenum, byval ref as GLint, byval mask as GLuint)
type PFNGLPATHSTENCILDEPTHOFFSETNVPROC as sub(byval factor as GLfloat, byval units as GLfloat)
type PFNGLSTENCILFILLPATHNVPROC as sub(byval path as GLuint, byval fillMode as GLenum, byval mask as GLuint)
type PFNGLSTENCILSTROKEPATHNVPROC as sub(byval path as GLuint, byval reference as GLint, byval mask as GLuint)
type PFNGLSTENCILFILLPATHINSTANCEDNVPROC as sub(byval numPaths as GLsizei, byval pathNameType as GLenum, byval paths as const any ptr, byval pathBase as GLuint, byval fillMode as GLenum, byval mask as GLuint, byval transformType as GLenum, byval transformValues as const GLfloat ptr)
type PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC as sub(byval numPaths as GLsizei, byval pathNameType as GLenum, byval paths as const any ptr, byval pathBase as GLuint, byval reference as GLint, byval mask as GLuint, byval transformType as GLenum, byval transformValues as const GLfloat ptr)
type PFNGLPATHCOVERDEPTHFUNCNVPROC as sub(byval func as GLenum)
type PFNGLCOVERFILLPATHNVPROC as sub(byval path as GLuint, byval coverMode as GLenum)
type PFNGLCOVERSTROKEPATHNVPROC as sub(byval path as GLuint, byval coverMode as GLenum)
type PFNGLCOVERFILLPATHINSTANCEDNVPROC as sub(byval numPaths as GLsizei, byval pathNameType as GLenum, byval paths as const any ptr, byval pathBase as GLuint, byval coverMode as GLenum, byval transformType as GLenum, byval transformValues as const GLfloat ptr)
type PFNGLCOVERSTROKEPATHINSTANCEDNVPROC as sub(byval numPaths as GLsizei, byval pathNameType as GLenum, byval paths as const any ptr, byval pathBase as GLuint, byval coverMode as GLenum, byval transformType as GLenum, byval transformValues as const GLfloat ptr)
type PFNGLGETPATHPARAMETERIVNVPROC as sub(byval path as GLuint, byval pname as GLenum, byval value as GLint ptr)
type PFNGLGETPATHPARAMETERFVNVPROC as sub(byval path as GLuint, byval pname as GLenum, byval value as GLfloat ptr)
type PFNGLGETPATHCOMMANDSNVPROC as sub(byval path as GLuint, byval commands as GLubyte ptr)
type PFNGLGETPATHCOORDSNVPROC as sub(byval path as GLuint, byval coords as GLfloat ptr)
type PFNGLGETPATHDASHARRAYNVPROC as sub(byval path as GLuint, byval dashArray as GLfloat ptr)
type PFNGLGETPATHMETRICSNVPROC as sub(byval metricQueryMask as GLbitfield, byval numPaths as GLsizei, byval pathNameType as GLenum, byval paths as const any ptr, byval pathBase as GLuint, byval stride as GLsizei, byval metrics as GLfloat ptr)
type PFNGLGETPATHMETRICRANGENVPROC as sub(byval metricQueryMask as GLbitfield, byval firstPathName as GLuint, byval numPaths as GLsizei, byval stride as GLsizei, byval metrics as GLfloat ptr)
type PFNGLGETPATHSPACINGNVPROC as sub(byval pathListMode as GLenum, byval numPaths as GLsizei, byval pathNameType as GLenum, byval paths as const any ptr, byval pathBase as GLuint, byval advanceScale as GLfloat, byval kerningScale as GLfloat, byval transformType as GLenum, byval returnedSpacing as GLfloat ptr)
type PFNGLISPOINTINFILLPATHNVPROC as function(byval path as GLuint, byval mask as GLuint, byval x as GLfloat, byval y as GLfloat) as GLboolean
type PFNGLISPOINTINSTROKEPATHNVPROC as function(byval path as GLuint, byval x as GLfloat, byval y as GLfloat) as GLboolean
type PFNGLGETPATHLENGTHNVPROC as function(byval path as GLuint, byval startSegment as GLsizei, byval numSegments as GLsizei) as GLfloat
type PFNGLPOINTALONGPATHNVPROC as function(byval path as GLuint, byval startSegment as GLsizei, byval numSegments as GLsizei, byval distance as GLfloat, byval x as GLfloat ptr, byval y as GLfloat ptr, byval tangentX as GLfloat ptr, byval tangentY as GLfloat ptr) as GLboolean
type PFNGLMATRIXLOAD3X2FNVPROC as sub(byval matrixMode as GLenum, byval m as const GLfloat ptr)
type PFNGLMATRIXLOAD3X3FNVPROC as sub(byval matrixMode as GLenum, byval m as const GLfloat ptr)
type PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC as sub(byval matrixMode as GLenum, byval m as const GLfloat ptr)
type PFNGLMATRIXMULT3X2FNVPROC as sub(byval matrixMode as GLenum, byval m as const GLfloat ptr)
type PFNGLMATRIXMULT3X3FNVPROC as sub(byval matrixMode as GLenum, byval m as const GLfloat ptr)
type PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC as sub(byval matrixMode as GLenum, byval m as const GLfloat ptr)
type PFNGLSTENCILTHENCOVERFILLPATHNVPROC as sub(byval path as GLuint, byval fillMode as GLenum, byval mask as GLuint, byval coverMode as GLenum)
type PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC as sub(byval path as GLuint, byval reference as GLint, byval mask as GLuint, byval coverMode as GLenum)
type PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC as sub(byval numPaths as GLsizei, byval pathNameType as GLenum, byval paths as const any ptr, byval pathBase as GLuint, byval fillMode as GLenum, byval mask as GLuint, byval coverMode as GLenum, byval transformType as GLenum, byval transformValues as const GLfloat ptr)
type PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC as sub(byval numPaths as GLsizei, byval pathNameType as GLenum, byval paths as const any ptr, byval pathBase as GLuint, byval reference as GLint, byval mask as GLuint, byval coverMode as GLenum, byval transformType as GLenum, byval transformValues as const GLfloat ptr)
type PFNGLPATHGLYPHINDEXRANGENVPROC as function(byval fontTarget as GLenum, byval fontName as const any ptr, byval fontStyle as GLbitfield, byval pathParameterTemplate as GLuint, byval emScale as GLfloat, byval baseAndCount as GLuint ptr) as GLenum
type PFNGLPATHGLYPHINDEXARRAYNVPROC as function(byval firstPathName as GLuint, byval fontTarget as GLenum, byval fontName as const any ptr, byval fontStyle as GLbitfield, byval firstGlyphIndex as GLuint, byval numGlyphs as GLsizei, byval pathParameterTemplate as GLuint, byval emScale as GLfloat) as GLenum
type PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC as function(byval firstPathName as GLuint, byval fontTarget as GLenum, byval fontSize as GLsizeiptr, byval fontData as const any ptr, byval faceIndex as GLsizei, byval firstGlyphIndex as GLuint, byval numGlyphs as GLsizei, byval pathParameterTemplate as GLuint, byval emScale as GLfloat) as GLenum
type PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC as sub(byval program as GLuint, byval location as GLint, byval genMode as GLenum, byval components as GLint, byval coeffs as const GLfloat ptr)
type PFNGLGETPROGRAMRESOURCEFVNVPROC as sub(byval program as GLuint, byval programInterface as GLenum, byval index as GLuint, byval propCount as GLsizei, byval props as const GLenum ptr, byval bufSize as GLsizei, byval length as GLsizei ptr, byval params as GLfloat ptr)
type PFNGLPATHCOLORGENNVPROC as sub(byval color as GLenum, byval genMode as GLenum, byval colorFormat as GLenum, byval coeffs as const GLfloat ptr)
type PFNGLPATHTEXGENNVPROC as sub(byval texCoordSet as GLenum, byval genMode as GLenum, byval components as GLint, byval coeffs as const GLfloat ptr)
type PFNGLPATHFOGGENNVPROC as sub(byval genMode as GLenum)
type PFNGLGETPATHCOLORGENIVNVPROC as sub(byval color as GLenum, byval pname as GLenum, byval value as GLint ptr)
type PFNGLGETPATHCOLORGENFVNVPROC as sub(byval color as GLenum, byval pname as GLenum, byval value as GLfloat ptr)
type PFNGLGETPATHTEXGENIVNVPROC as sub(byval texCoordSet as GLenum, byval pname as GLenum, byval value as GLint ptr)
type PFNGLGETPATHTEXGENFVNVPROC as sub(byval texCoordSet as GLenum, byval pname as GLenum, byval value as GLfloat ptr)


const GL_NV_path_rendering_shared_edge = 1
const GL_SHARED_EDGE_NV = &hC0
const GL_NV_pixel_data_range = 1
const GL_WRITE_PIXEL_DATA_RANGE_NV = &h8878
const GL_READ_PIXEL_DATA_RANGE_NV = &h8879
const GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = &h887A
const GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = &h887B
const GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = &h887C
const GL_READ_PIXEL_DATA_RANGE_POINTER_NV = &h887D
type PFNGLPIXELDATARANGENVPROC as sub(byval target as GLenum, byval length as GLsizei, byval pointer as const any ptr)
type PFNGLFLUSHPIXELDATARANGENVPROC as sub(byval target as GLenum)


const GL_NV_point_sprite = 1
const GL_POINT_SPRITE_NV = &h8861
const GL_COORD_REPLACE_NV = &h8862
const GL_POINT_SPRITE_R_MODE_NV = &h8863
type PFNGLPOINTPARAMETERINVPROC as sub(byval pname as GLenum, byval param as GLint)
type PFNGLPOINTPARAMETERIVNVPROC as sub(byval pname as GLenum, byval params as const GLint ptr)


const GL_NV_present_video = 1
const GL_FRAME_NV = &h8E26
const GL_FIELDS_NV = &h8E27
const GL_CURRENT_TIME_NV = &h8E28
const GL_NUM_FILL_STREAMS_NV = &h8E29
const GL_PRESENT_TIME_NV = &h8E2A
const GL_PRESENT_DURATION_NV = &h8E2B

type PFNGLPRESENTFRAMEKEYEDNVPROC as sub(byval video_slot as GLuint, byval minPresentTime as GLuint64EXT, byval beginPresentTimeId as GLuint, byval presentDurationId as GLuint, byval type as GLenum, byval target0 as GLenum, byval fill0 as GLuint, byval key0 as GLuint, byval target1 as GLenum, byval fill1 as GLuint, byval key1 as GLuint)
type PFNGLPRESENTFRAMEDUALFILLNVPROC as sub(byval video_slot as GLuint, byval minPresentTime as GLuint64EXT, byval beginPresentTimeId as GLuint, byval presentDurationId as GLuint, byval type as GLenum, byval target0 as GLenum, byval fill0 as GLuint, byval target1 as GLenum, byval fill1 as GLuint, byval target2 as GLenum, byval fill2 as GLuint, byval target3 as GLenum, byval fill3 as GLuint)
type PFNGLGETVIDEOIVNVPROC as sub(byval video_slot as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETVIDEOUIVNVPROC as sub(byval video_slot as GLuint, byval pname as GLenum, byval params as GLuint ptr)
type PFNGLGETVIDEOI64VNVPROC as sub(byval video_slot as GLuint, byval pname as GLenum, byval params as GLint64EXT ptr)
type PFNGLGETVIDEOUI64VNVPROC as sub(byval video_slot as GLuint, byval pname as GLenum, byval params as GLuint64EXT ptr)


const GL_NV_primitive_restart = 1
const GL_PRIMITIVE_RESTART_NV = &h8558
const GL_PRIMITIVE_RESTART_INDEX_NV = &h8559
type PFNGLPRIMITIVERESTARTNVPROC as sub()
type PFNGLPRIMITIVERESTARTINDEXNVPROC as sub(byval index as GLuint)


const GL_NV_register_combiners = 1
const GL_REGISTER_COMBINERS_NV = &h8522
const GL_VARIABLE_A_NV = &h8523
const GL_VARIABLE_B_NV = &h8524
const GL_VARIABLE_C_NV = &h8525
const GL_VARIABLE_D_NV = &h8526
const GL_VARIABLE_E_NV = &h8527
const GL_VARIABLE_F_NV = &h8528
const GL_VARIABLE_G_NV = &h8529
const GL_CONSTANT_COLOR0_NV = &h852A
const GL_CONSTANT_COLOR1_NV = &h852B
const GL_SPARE0_NV = &h852E
const GL_SPARE1_NV = &h852F
const GL_DISCARD_NV = &h8530
const GL_E_TIMES_F_NV = &h8531
const GL_SPARE0_PLUS_SECONDARY_COLOR_NV = &h8532
const GL_UNSIGNED_IDENTITY_NV = &h8536
const GL_UNSIGNED_INVERT_NV = &h8537
const GL_EXPAND_NORMAL_NV = &h8538
const GL_EXPAND_NEGATE_NV = &h8539
const GL_HALF_BIAS_NORMAL_NV = &h853A
const GL_HALF_BIAS_NEGATE_NV = &h853B
const GL_SIGNED_IDENTITY_NV = &h853C
const GL_SIGNED_NEGATE_NV = &h853D
const GL_SCALE_BY_TWO_NV = &h853E
const GL_SCALE_BY_FOUR_NV = &h853F
const GL_SCALE_BY_ONE_HALF_NV = &h8540
const GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = &h8541
const GL_COMBINER_INPUT_NV = &h8542
const GL_COMBINER_MAPPING_NV = &h8543
const GL_COMBINER_COMPONENT_USAGE_NV = &h8544
const GL_COMBINER_AB_DOT_PRODUCT_NV = &h8545
const GL_COMBINER_CD_DOT_PRODUCT_NV = &h8546
const GL_COMBINER_MUX_SUM_NV = &h8547
const GL_COMBINER_SCALE_NV = &h8548
const GL_COMBINER_BIAS_NV = &h8549
const GL_COMBINER_AB_OUTPUT_NV = &h854A
const GL_COMBINER_CD_OUTPUT_NV = &h854B
const GL_COMBINER_SUM_OUTPUT_NV = &h854C
const GL_MAX_GENERAL_COMBINERS_NV = &h854D
const GL_NUM_GENERAL_COMBINERS_NV = &h854E
const GL_COLOR_SUM_CLAMP_NV = &h854F
const GL_COMBINER0_NV = &h8550
const GL_COMBINER1_NV = &h8551
const GL_COMBINER2_NV = &h8552
const GL_COMBINER3_NV = &h8553
const GL_COMBINER4_NV = &h8554
const GL_COMBINER5_NV = &h8555
const GL_COMBINER6_NV = &h8556
const GL_COMBINER7_NV = &h8557

type PFNGLCOMBINERPARAMETERFVNVPROC as sub(byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLCOMBINERPARAMETERFNVPROC as sub(byval pname as GLenum, byval param as GLfloat)
type PFNGLCOMBINERPARAMETERIVNVPROC as sub(byval pname as GLenum, byval params as const GLint ptr)
type PFNGLCOMBINERPARAMETERINVPROC as sub(byval pname as GLenum, byval param as GLint)
type PFNGLCOMBINERINPUTNVPROC as sub(byval stage as GLenum, byval portion as GLenum, byval variable as GLenum, byval input as GLenum, byval mapping as GLenum, byval componentUsage as GLenum)
type PFNGLCOMBINEROUTPUTNVPROC as sub(byval stage as GLenum, byval portion as GLenum, byval abOutput as GLenum, byval cdOutput as GLenum, byval sumOutput as GLenum, byval scale as GLenum, byval bias as GLenum, byval abDotProduct as GLboolean, byval cdDotProduct as GLboolean, byval muxSum as GLboolean)
type PFNGLFINALCOMBINERINPUTNVPROC as sub(byval variable as GLenum, byval input as GLenum, byval mapping as GLenum, byval componentUsage as GLenum)
type PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC as sub(byval stage as GLenum, byval portion as GLenum, byval variable as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC as sub(byval stage as GLenum, byval portion as GLenum, byval variable as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC as sub(byval stage as GLenum, byval portion as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC as sub(byval stage as GLenum, byval portion as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC as sub(byval variable as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC as sub(byval variable as GLenum, byval pname as GLenum, byval params as GLint ptr)


const GL_NV_register_combiners2 = 1
const GL_PER_STAGE_CONSTANTS_NV = &h8535
type PFNGLCOMBINERSTAGEPARAMETERFVNVPROC as sub(byval stage as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC as sub(byval stage as GLenum, byval pname as GLenum, byval params as GLfloat ptr)


const GL_NV_sample_locations = 1
const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = &h933D
const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = &h933E
const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = &h933F
const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = &h9340
const GL_SAMPLE_LOCATION_NV = &h8E50
const GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = &h9341
const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = &h9342
const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = &h9343

type PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC as sub(byval target as GLenum, byval start as GLuint, byval count as GLsizei, byval v as const GLfloat ptr)
type PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC as sub(byval framebuffer as GLuint, byval start as GLuint, byval count as GLsizei, byval v as const GLfloat ptr)
type PFNGLRESOLVEDEPTHVALUESNVPROC as sub()


const GL_NV_sample_mask_override_coverage = 1
const GL_NV_shader_atomic_counters = 1
const GL_NV_shader_atomic_float = 1
const GL_NV_shader_atomic_fp16_vector = 1
const GL_NV_shader_atomic_int64 = 1
const GL_NV_shader_buffer_load = 1
const GL_BUFFER_GPU_ADDRESS_NV = &h8F1D
const GL_GPU_ADDRESS_NV = &h8F34
const GL_MAX_SHADER_BUFFER_ADDRESS_NV = &h8F35

type PFNGLMAKEBUFFERRESIDENTNVPROC as sub(byval target as GLenum, byval access as GLenum)
type PFNGLMAKEBUFFERNONRESIDENTNVPROC as sub(byval target as GLenum)
type PFNGLISBUFFERRESIDENTNVPROC as function(byval target as GLenum) as GLboolean
type PFNGLMAKENAMEDBUFFERRESIDENTNVPROC as sub(byval buffer as GLuint, byval access as GLenum)
type PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC as sub(byval buffer as GLuint)
type PFNGLISNAMEDBUFFERRESIDENTNVPROC as function(byval buffer as GLuint) as GLboolean
type PFNGLGETBUFFERPARAMETERUI64VNVPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLuint64EXT ptr)
type PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC as sub(byval buffer as GLuint, byval pname as GLenum, byval params as GLuint64EXT ptr)
type PFNGLGETINTEGERUI64VNVPROC as sub(byval value as GLenum, byval result as GLuint64EXT ptr)
type PFNGLUNIFORMUI64NVPROC as sub(byval location as GLint, byval value as GLuint64EXT)
type PFNGLUNIFORMUI64VNVPROC as sub(byval location as GLint, byval count as GLsizei, byval value as const GLuint64EXT ptr)
type PFNGLPROGRAMUNIFORMUI64NVPROC as sub(byval program as GLuint, byval location as GLint, byval value as GLuint64EXT)
type PFNGLPROGRAMUNIFORMUI64VNVPROC as sub(byval program as GLuint, byval location as GLint, byval count as GLsizei, byval value as const GLuint64EXT ptr)


const GL_NV_shader_buffer_store = 1
const GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = &h00000010
const GL_NV_shader_storage_buffer_object = 1
const GL_NV_shader_thread_group = 1
const GL_WARP_SIZE_NV = &h9339
const GL_WARPS_PER_SM_NV = &h933A
const GL_SM_COUNT_NV = &h933B
const GL_NV_shader_thread_shuffle = 1
const GL_NV_tessellation_program5 = 1
const GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = &h86D8
const GL_TESS_CONTROL_PROGRAM_NV = &h891E
const GL_TESS_EVALUATION_PROGRAM_NV = &h891F
const GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = &h8C74
const GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = &h8C75
const GL_NV_texgen_emboss = 1
const GL_EMBOSS_LIGHT_NV = &h855D
const GL_EMBOSS_CONSTANT_NV = &h855E
const GL_EMBOSS_MAP_NV = &h855F
const GL_NV_texgen_reflection = 1
const GL_NORMAL_MAP_NV = &h8511
const GL_REFLECTION_MAP_NV = &h8512
const GL_NV_texture_barrier = 1
type PFNGLTEXTUREBARRIERNVPROC as sub()


const GL_NV_texture_compression_vtc = 1
const GL_NV_texture_env_combine4 = 1
const GL_COMBINE4_NV = &h8503
const GL_SOURCE3_RGB_NV = &h8583
const GL_SOURCE3_ALPHA_NV = &h858B
const GL_OPERAND3_RGB_NV = &h8593
const GL_OPERAND3_ALPHA_NV = &h859B
const GL_NV_texture_expand_normal = 1
const GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = &h888F
const GL_NV_texture_multisample = 1
const GL_TEXTURE_COVERAGE_SAMPLES_NV = &h9045
const GL_TEXTURE_COLOR_SAMPLES_NV = &h9046

type PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC as sub(byval target as GLenum, byval coverageSamples as GLsizei, byval colorSamples as GLsizei, byval internalFormat as GLint, byval width as GLsizei, byval height as GLsizei, byval fixedSampleLocations as GLboolean)
type PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC as sub(byval target as GLenum, byval coverageSamples as GLsizei, byval colorSamples as GLsizei, byval internalFormat as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval fixedSampleLocations as GLboolean)
type PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC as sub(byval texture as GLuint, byval target as GLenum, byval samples as GLsizei, byval internalFormat as GLint, byval width as GLsizei, byval height as GLsizei, byval fixedSampleLocations as GLboolean)
type PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC as sub(byval texture as GLuint, byval target as GLenum, byval samples as GLsizei, byval internalFormat as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval fixedSampleLocations as GLboolean)
type PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC as sub(byval texture as GLuint, byval target as GLenum, byval coverageSamples as GLsizei, byval colorSamples as GLsizei, byval internalFormat as GLint, byval width as GLsizei, byval height as GLsizei, byval fixedSampleLocations as GLboolean)
type PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC as sub(byval texture as GLuint, byval target as GLenum, byval coverageSamples as GLsizei, byval colorSamples as GLsizei, byval internalFormat as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval fixedSampleLocations as GLboolean)


const GL_NV_texture_rectangle = 1
const GL_TEXTURE_RECTANGLE_NV = &h84F5
const GL_TEXTURE_BINDING_RECTANGLE_NV = &h84F6
const GL_PROXY_TEXTURE_RECTANGLE_NV = &h84F7
const GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = &h84F8
const GL_NV_texture_shader = 1
const GL_OFFSET_TEXTURE_RECTANGLE_NV = &h864C
const GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = &h864D
const GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = &h864E
const GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = &h86D9
const GL_UNSIGNED_INT_S8_S8_8_8_NV = &h86DA
const GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = &h86DB
const GL_DSDT_MAG_INTENSITY_NV = &h86DC
const GL_SHADER_CONSISTENT_NV = &h86DD
const GL_TEXTURE_SHADER_NV = &h86DE
const GL_SHADER_OPERATION_NV = &h86DF
const GL_CULL_MODES_NV = &h86E0
const GL_OFFSET_TEXTURE_MATRIX_NV = &h86E1
const GL_OFFSET_TEXTURE_SCALE_NV = &h86E2
const GL_OFFSET_TEXTURE_BIAS_NV = &h86E3
const GL_OFFSET_TEXTURE_2D_MATRIX_NV = &h86E1
const GL_OFFSET_TEXTURE_2D_SCALE_NV = &h86E2
const GL_OFFSET_TEXTURE_2D_BIAS_NV = &h86E3
const GL_PREVIOUS_TEXTURE_INPUT_NV = &h86E4
const GL_CONST_EYE_NV = &h86E5
const GL_PASS_THROUGH_NV = &h86E6
const GL_CULL_FRAGMENT_NV = &h86E7
const GL_OFFSET_TEXTURE_2D_NV = &h86E8
const GL_DEPENDENT_AR_TEXTURE_2D_NV = &h86E9
const GL_DEPENDENT_GB_TEXTURE_2D_NV = &h86EA
const GL_DOT_PRODUCT_NV = &h86EC
const GL_DOT_PRODUCT_DEPTH_REPLACE_NV = &h86ED
const GL_DOT_PRODUCT_TEXTURE_2D_NV = &h86EE
const GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = &h86F0
const GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = &h86F1
const GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = &h86F2
const GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = &h86F3
const GL_HILO_NV = &h86F4
const GL_DSDT_NV = &h86F5
const GL_DSDT_MAG_NV = &h86F6
const GL_DSDT_MAG_VIB_NV = &h86F7
const GL_HILO16_NV = &h86F8
const GL_SIGNED_HILO_NV = &h86F9
const GL_SIGNED_HILO16_NV = &h86FA
const GL_SIGNED_RGBA_NV = &h86FB
const GL_SIGNED_RGBA8_NV = &h86FC
const GL_SIGNED_RGB_NV = &h86FE
const GL_SIGNED_RGB8_NV = &h86FF
const GL_SIGNED_LUMINANCE_NV = &h8701
const GL_SIGNED_LUMINANCE8_NV = &h8702
const GL_SIGNED_LUMINANCE_ALPHA_NV = &h8703
const GL_SIGNED_LUMINANCE8_ALPHA8_NV = &h8704
const GL_SIGNED_ALPHA_NV = &h8705
const GL_SIGNED_ALPHA8_NV = &h8706
const GL_SIGNED_INTENSITY_NV = &h8707
const GL_SIGNED_INTENSITY8_NV = &h8708
const GL_DSDT8_NV = &h8709
const GL_DSDT8_MAG8_NV = &h870A
const GL_DSDT8_MAG8_INTENSITY8_NV = &h870B
const GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = &h870C
const GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = &h870D
const GL_HI_SCALE_NV = &h870E
const GL_LO_SCALE_NV = &h870F
const GL_DS_SCALE_NV = &h8710
const GL_DT_SCALE_NV = &h8711
const GL_MAGNITUDE_SCALE_NV = &h8712
const GL_VIBRANCE_SCALE_NV = &h8713
const GL_HI_BIAS_NV = &h8714
const GL_LO_BIAS_NV = &h8715
const GL_DS_BIAS_NV = &h8716
const GL_DT_BIAS_NV = &h8717
const GL_MAGNITUDE_BIAS_NV = &h8718
const GL_VIBRANCE_BIAS_NV = &h8719
const GL_TEXTURE_BORDER_VALUES_NV = &h871A
const GL_TEXTURE_HI_SIZE_NV = &h871B
const GL_TEXTURE_LO_SIZE_NV = &h871C
const GL_TEXTURE_DS_SIZE_NV = &h871D
const GL_TEXTURE_DT_SIZE_NV = &h871E
const GL_TEXTURE_MAG_SIZE_NV = &h871F
const GL_NV_texture_shader2 = 1
const GL_DOT_PRODUCT_TEXTURE_3D_NV = &h86EF
const GL_NV_texture_shader3 = 1
const GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = &h8850
const GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = &h8851
const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = &h8852
const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = &h8853
const GL_OFFSET_HILO_TEXTURE_2D_NV = &h8854
const GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = &h8855
const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = &h8856
const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = &h8857
const GL_DEPENDENT_HILO_TEXTURE_2D_NV = &h8858
const GL_DEPENDENT_RGB_TEXTURE_3D_NV = &h8859
const GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = &h885A
const GL_DOT_PRODUCT_PASS_THROUGH_NV = &h885B
const GL_DOT_PRODUCT_TEXTURE_1D_NV = &h885C
const GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = &h885D
const GL_HILO8_NV = &h885E
const GL_SIGNED_HILO8_NV = &h885F
const GL_FORCE_BLUE_TO_ONE_NV = &h8860
const GL_NV_transform_feedback = 1
const GL_BACK_PRIMARY_COLOR_NV = &h8C77
const GL_BACK_SECONDARY_COLOR_NV = &h8C78
const GL_TEXTURE_COORD_NV = &h8C79
const GL_CLIP_DISTANCE_NV = &h8C7A
const GL_VERTEX_ID_NV = &h8C7B
const GL_PRIMITIVE_ID_NV = &h8C7C
const GL_GENERIC_ATTRIB_NV = &h8C7D
const GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = &h8C7E
const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = &h8C7F
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = &h8C80
const GL_ACTIVE_VARYINGS_NV = &h8C81
const GL_ACTIVE_VARYING_MAX_LENGTH_NV = &h8C82
const GL_TRANSFORM_FEEDBACK_VARYINGS_NV = &h8C83
const GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = &h8C84
const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = &h8C85
const GL_TRANSFORM_FEEDBACK_RECORD_NV = &h8C86
const GL_PRIMITIVES_GENERATED_NV = &h8C87
const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = &h8C88
const GL_RASTERIZER_DISCARD_NV = &h8C89
const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = &h8C8A
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = &h8C8B
const GL_INTERLEAVED_ATTRIBS_NV = &h8C8C
const GL_SEPARATE_ATTRIBS_NV = &h8C8D
const GL_TRANSFORM_FEEDBACK_BUFFER_NV = &h8C8E
const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = &h8C8F
const GL_LAYER_NV = &h8DAA
const GL_NEXT_BUFFER_NV = -2
const GL_SKIP_COMPONENTS4_NV = -3
const GL_SKIP_COMPONENTS3_NV = -4
const GL_SKIP_COMPONENTS2_NV = -5
const GL_SKIP_COMPONENTS1_NV = -6

type PFNGLBEGINTRANSFORMFEEDBACKNVPROC as sub(byval primitiveMode as GLenum)
type PFNGLENDTRANSFORMFEEDBACKNVPROC as sub()
type PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC as sub(byval count as GLsizei, byval attribs as const GLint ptr, byval bufferMode as GLenum)
type PFNGLBINDBUFFERRANGENVPROC as sub(byval target as GLenum, byval index as GLuint, byval buffer as GLuint, byval offset as GLintptr, byval size as GLsizeiptr)
type PFNGLBINDBUFFEROFFSETNVPROC as sub(byval target as GLenum, byval index as GLuint, byval buffer as GLuint, byval offset as GLintptr)
type PFNGLBINDBUFFERBASENVPROC as sub(byval target as GLenum, byval index as GLuint, byval buffer as GLuint)
type PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC as sub(byval program as GLuint, byval count as GLsizei, byval locations as const GLint ptr, byval bufferMode as GLenum)
type PFNGLACTIVEVARYINGNVPROC as sub(byval program as GLuint, byval name as const GLchar ptr)
type PFNGLGETVARYINGLOCATIONNVPROC as function(byval program as GLuint, byval name as const GLchar ptr) as GLint
type PFNGLGETACTIVEVARYINGNVPROC as sub(byval program as GLuint, byval index as GLuint, byval bufSize as GLsizei, byval length as GLsizei ptr, byval size as GLsizei ptr, byval type as GLenum ptr, byval name as GLchar ptr)
type PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC as sub(byval program as GLuint, byval index as GLuint, byval location as GLint ptr)
type PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC as sub(byval count as GLsizei, byval attribs as const GLint ptr, byval nbuffers as GLsizei, byval bufstreams as const GLint ptr, byval bufferMode as GLenum)


const GL_NV_transform_feedback2 = 1
const GL_TRANSFORM_FEEDBACK_NV = &h8E22
const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = &h8E23
const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = &h8E24
const GL_TRANSFORM_FEEDBACK_BINDING_NV = &h8E25

type PFNGLBINDTRANSFORMFEEDBACKNVPROC as sub(byval target as GLenum, byval id as GLuint)
type PFNGLDELETETRANSFORMFEEDBACKSNVPROC as sub(byval n as GLsizei, byval ids as const GLuint ptr)
type PFNGLGENTRANSFORMFEEDBACKSNVPROC as sub(byval n as GLsizei, byval ids as GLuint ptr)
type PFNGLISTRANSFORMFEEDBACKNVPROC as function(byval id as GLuint) as GLboolean
type PFNGLPAUSETRANSFORMFEEDBACKNVPROC as sub()
type PFNGLRESUMETRANSFORMFEEDBACKNVPROC as sub()
type PFNGLDRAWTRANSFORMFEEDBACKNVPROC as sub(byval mode as GLenum, byval id as GLuint)


const GL_NV_uniform_buffer_unified_memory = 1
const GL_UNIFORM_BUFFER_UNIFIED_NV = &h936E
const GL_UNIFORM_BUFFER_ADDRESS_NV = &h936F
const GL_UNIFORM_BUFFER_LENGTH_NV = &h9370
const GL_NV_vdpau_interop = 1
type GLvdpauSurfaceNV as GLintptr
const GL_SURFACE_STATE_NV = &h86EB
const GL_SURFACE_REGISTERED_NV = &h86FD
const GL_SURFACE_MAPPED_NV = &h8700
const GL_WRITE_DISCARD_NV = &h88BE

type PFNGLVDPAUINITNVPROC as sub(byval vdpDevice as const any ptr, byval getProcAddress as const any ptr)
type PFNGLVDPAUFININVPROC as sub()
type PFNGLVDPAUREGISTERVIDEOSURFACENVPROC as function(byval vdpSurface as const any ptr, byval target as GLenum, byval numTextureNames as GLsizei, byval textureNames as const GLuint ptr) as GLvdpauSurfaceNV
type PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC as function(byval vdpSurface as const any ptr, byval target as GLenum, byval numTextureNames as GLsizei, byval textureNames as const GLuint ptr) as GLvdpauSurfaceNV
type PFNGLVDPAUISSURFACENVPROC as function(byval surface as GLvdpauSurfaceNV) as GLboolean
type PFNGLVDPAUUNREGISTERSURFACENVPROC as sub(byval surface as GLvdpauSurfaceNV)
type PFNGLVDPAUGETSURFACEIVNVPROC as sub(byval surface as GLvdpauSurfaceNV, byval pname as GLenum, byval bufSize as GLsizei, byval length as GLsizei ptr, byval values as GLint ptr)
type PFNGLVDPAUSURFACEACCESSNVPROC as sub(byval surface as GLvdpauSurfaceNV, byval access as GLenum)
type PFNGLVDPAUMAPSURFACESNVPROC as sub(byval numSurfaces as GLsizei, byval surfaces as const GLvdpauSurfaceNV ptr)
type PFNGLVDPAUUNMAPSURFACESNVPROC as sub(byval numSurface as GLsizei, byval surfaces as const GLvdpauSurfaceNV ptr)


const GL_NV_vertex_array_range = 1
const GL_VERTEX_ARRAY_RANGE_NV = &h851D
const GL_VERTEX_ARRAY_RANGE_LENGTH_NV = &h851E
const GL_VERTEX_ARRAY_RANGE_VALID_NV = &h851F
const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = &h8520
const GL_VERTEX_ARRAY_RANGE_POINTER_NV = &h8521
type PFNGLFLUSHVERTEXARRAYRANGENVPROC as sub()
type PFNGLVERTEXARRAYRANGENVPROC as sub(byval length as GLsizei, byval pointer as const any ptr)


const GL_NV_vertex_array_range2 = 1
const GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = &h8533
const GL_NV_vertex_attrib_integer_64bit = 1

type PFNGLVERTEXATTRIBL1I64NVPROC as sub(byval index as GLuint, byval x as GLint64EXT)
type PFNGLVERTEXATTRIBL2I64NVPROC as sub(byval index as GLuint, byval x as GLint64EXT, byval y as GLint64EXT)
type PFNGLVERTEXATTRIBL3I64NVPROC as sub(byval index as GLuint, byval x as GLint64EXT, byval y as GLint64EXT, byval z as GLint64EXT)
type PFNGLVERTEXATTRIBL4I64NVPROC as sub(byval index as GLuint, byval x as GLint64EXT, byval y as GLint64EXT, byval z as GLint64EXT, byval w as GLint64EXT)
type PFNGLVERTEXATTRIBL1I64VNVPROC as sub(byval index as GLuint, byval v as const GLint64EXT ptr)
type PFNGLVERTEXATTRIBL2I64VNVPROC as sub(byval index as GLuint, byval v as const GLint64EXT ptr)
type PFNGLVERTEXATTRIBL3I64VNVPROC as sub(byval index as GLuint, byval v as const GLint64EXT ptr)
type PFNGLVERTEXATTRIBL4I64VNVPROC as sub(byval index as GLuint, byval v as const GLint64EXT ptr)
type PFNGLVERTEXATTRIBL1UI64NVPROC as sub(byval index as GLuint, byval x as GLuint64EXT)
type PFNGLVERTEXATTRIBL2UI64NVPROC as sub(byval index as GLuint, byval x as GLuint64EXT, byval y as GLuint64EXT)
type PFNGLVERTEXATTRIBL3UI64NVPROC as sub(byval index as GLuint, byval x as GLuint64EXT, byval y as GLuint64EXT, byval z as GLuint64EXT)
type PFNGLVERTEXATTRIBL4UI64NVPROC as sub(byval index as GLuint, byval x as GLuint64EXT, byval y as GLuint64EXT, byval z as GLuint64EXT, byval w as GLuint64EXT)
type PFNGLVERTEXATTRIBL1UI64VNVPROC as sub(byval index as GLuint, byval v as const GLuint64EXT ptr)
type PFNGLVERTEXATTRIBL2UI64VNVPROC as sub(byval index as GLuint, byval v as const GLuint64EXT ptr)
type PFNGLVERTEXATTRIBL3UI64VNVPROC as sub(byval index as GLuint, byval v as const GLuint64EXT ptr)
type PFNGLVERTEXATTRIBL4UI64VNVPROC as sub(byval index as GLuint, byval v as const GLuint64EXT ptr)
type PFNGLGETVERTEXATTRIBLI64VNVPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLint64EXT ptr)
type PFNGLGETVERTEXATTRIBLUI64VNVPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLuint64EXT ptr)
type PFNGLVERTEXATTRIBLFORMATNVPROC as sub(byval index as GLuint, byval size as GLint, byval type as GLenum, byval stride as GLsizei)


const GL_NV_vertex_buffer_unified_memory = 1
const GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = &h8F1E
const GL_ELEMENT_ARRAY_UNIFIED_NV = &h8F1F
const GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = &h8F20
const GL_VERTEX_ARRAY_ADDRESS_NV = &h8F21
const GL_NORMAL_ARRAY_ADDRESS_NV = &h8F22
const GL_COLOR_ARRAY_ADDRESS_NV = &h8F23
const GL_INDEX_ARRAY_ADDRESS_NV = &h8F24
const GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = &h8F25
const GL_EDGE_FLAG_ARRAY_ADDRESS_NV = &h8F26
const GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = &h8F27
const GL_FOG_COORD_ARRAY_ADDRESS_NV = &h8F28
const GL_ELEMENT_ARRAY_ADDRESS_NV = &h8F29
const GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = &h8F2A
const GL_VERTEX_ARRAY_LENGTH_NV = &h8F2B
const GL_NORMAL_ARRAY_LENGTH_NV = &h8F2C
const GL_COLOR_ARRAY_LENGTH_NV = &h8F2D
const GL_INDEX_ARRAY_LENGTH_NV = &h8F2E
const GL_TEXTURE_COORD_ARRAY_LENGTH_NV = &h8F2F
const GL_EDGE_FLAG_ARRAY_LENGTH_NV = &h8F30
const GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = &h8F31
const GL_FOG_COORD_ARRAY_LENGTH_NV = &h8F32
const GL_ELEMENT_ARRAY_LENGTH_NV = &h8F33
const GL_DRAW_INDIRECT_UNIFIED_NV = &h8F40
const GL_DRAW_INDIRECT_ADDRESS_NV = &h8F41
const GL_DRAW_INDIRECT_LENGTH_NV = &h8F42

type PFNGLBUFFERADDRESSRANGENVPROC as sub(byval pname as GLenum, byval index as GLuint, byval address as GLuint64EXT, byval length as GLsizeiptr)
type PFNGLVERTEXFORMATNVPROC as sub(byval size as GLint, byval type as GLenum, byval stride as GLsizei)
type PFNGLNORMALFORMATNVPROC as sub(byval type as GLenum, byval stride as GLsizei)
type PFNGLCOLORFORMATNVPROC as sub(byval size as GLint, byval type as GLenum, byval stride as GLsizei)
type PFNGLINDEXFORMATNVPROC as sub(byval type as GLenum, byval stride as GLsizei)
type PFNGLTEXCOORDFORMATNVPROC as sub(byval size as GLint, byval type as GLenum, byval stride as GLsizei)
type PFNGLEDGEFLAGFORMATNVPROC as sub(byval stride as GLsizei)
type PFNGLSECONDARYCOLORFORMATNVPROC as sub(byval size as GLint, byval type as GLenum, byval stride as GLsizei)
type PFNGLFOGCOORDFORMATNVPROC as sub(byval type as GLenum, byval stride as GLsizei)
type PFNGLVERTEXATTRIBFORMATNVPROC as sub(byval index as GLuint, byval size as GLint, byval type as GLenum, byval normalized as GLboolean, byval stride as GLsizei)
type PFNGLVERTEXATTRIBIFORMATNVPROC as sub(byval index as GLuint, byval size as GLint, byval type as GLenum, byval stride as GLsizei)
type PFNGLGETINTEGERUI64I_VNVPROC as sub(byval value as GLenum, byval index as GLuint, byval result as GLuint64EXT ptr)


const GL_NV_vertex_program = 1
const GL_VERTEX_PROGRAM_NV = &h8620
const GL_VERTEX_STATE_PROGRAM_NV = &h8621
const GL_ATTRIB_ARRAY_SIZE_NV = &h8623
const GL_ATTRIB_ARRAY_STRIDE_NV = &h8624
const GL_ATTRIB_ARRAY_TYPE_NV = &h8625
const GL_CURRENT_ATTRIB_NV = &h8626
const GL_PROGRAM_LENGTH_NV = &h8627
const GL_PROGRAM_STRING_NV = &h8628
const GL_MODELVIEW_PROJECTION_NV = &h8629
const GL_IDENTITY_NV = &h862A
const GL_INVERSE_NV = &h862B
const GL_TRANSPOSE_NV = &h862C
const GL_INVERSE_TRANSPOSE_NV = &h862D
const GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = &h862E
const GL_MAX_TRACK_MATRICES_NV = &h862F
const GL_MATRIX0_NV = &h8630
const GL_MATRIX1_NV = &h8631
const GL_MATRIX2_NV = &h8632
const GL_MATRIX3_NV = &h8633
const GL_MATRIX4_NV = &h8634
const GL_MATRIX5_NV = &h8635
const GL_MATRIX6_NV = &h8636
const GL_MATRIX7_NV = &h8637
const GL_CURRENT_MATRIX_STACK_DEPTH_NV = &h8640
const GL_CURRENT_MATRIX_NV = &h8641
const GL_VERTEX_PROGRAM_POINT_SIZE_NV = &h8642
const GL_VERTEX_PROGRAM_TWO_SIDE_NV = &h8643
const GL_PROGRAM_PARAMETER_NV = &h8644
const GL_ATTRIB_ARRAY_POINTER_NV = &h8645
const GL_PROGRAM_TARGET_NV = &h8646
const GL_PROGRAM_RESIDENT_NV = &h8647
const GL_TRACK_MATRIX_NV = &h8648
const GL_TRACK_MATRIX_TRANSFORM_NV = &h8649
const GL_VERTEX_PROGRAM_BINDING_NV = &h864A
const GL_PROGRAM_ERROR_POSITION_NV = &h864B
const GL_VERTEX_ATTRIB_ARRAY0_NV = &h8650
const GL_VERTEX_ATTRIB_ARRAY1_NV = &h8651
const GL_VERTEX_ATTRIB_ARRAY2_NV = &h8652
const GL_VERTEX_ATTRIB_ARRAY3_NV = &h8653
const GL_VERTEX_ATTRIB_ARRAY4_NV = &h8654
const GL_VERTEX_ATTRIB_ARRAY5_NV = &h8655
const GL_VERTEX_ATTRIB_ARRAY6_NV = &h8656
const GL_VERTEX_ATTRIB_ARRAY7_NV = &h8657
const GL_VERTEX_ATTRIB_ARRAY8_NV = &h8658
const GL_VERTEX_ATTRIB_ARRAY9_NV = &h8659
const GL_VERTEX_ATTRIB_ARRAY10_NV = &h865A
const GL_VERTEX_ATTRIB_ARRAY11_NV = &h865B
const GL_VERTEX_ATTRIB_ARRAY12_NV = &h865C
const GL_VERTEX_ATTRIB_ARRAY13_NV = &h865D
const GL_VERTEX_ATTRIB_ARRAY14_NV = &h865E
const GL_VERTEX_ATTRIB_ARRAY15_NV = &h865F
const GL_MAP1_VERTEX_ATTRIB0_4_NV = &h8660
const GL_MAP1_VERTEX_ATTRIB1_4_NV = &h8661
const GL_MAP1_VERTEX_ATTRIB2_4_NV = &h8662
const GL_MAP1_VERTEX_ATTRIB3_4_NV = &h8663
const GL_MAP1_VERTEX_ATTRIB4_4_NV = &h8664
const GL_MAP1_VERTEX_ATTRIB5_4_NV = &h8665
const GL_MAP1_VERTEX_ATTRIB6_4_NV = &h8666
const GL_MAP1_VERTEX_ATTRIB7_4_NV = &h8667
const GL_MAP1_VERTEX_ATTRIB8_4_NV = &h8668
const GL_MAP1_VERTEX_ATTRIB9_4_NV = &h8669
const GL_MAP1_VERTEX_ATTRIB10_4_NV = &h866A
const GL_MAP1_VERTEX_ATTRIB11_4_NV = &h866B
const GL_MAP1_VERTEX_ATTRIB12_4_NV = &h866C
const GL_MAP1_VERTEX_ATTRIB13_4_NV = &h866D
const GL_MAP1_VERTEX_ATTRIB14_4_NV = &h866E
const GL_MAP1_VERTEX_ATTRIB15_4_NV = &h866F
const GL_MAP2_VERTEX_ATTRIB0_4_NV = &h8670
const GL_MAP2_VERTEX_ATTRIB1_4_NV = &h8671
const GL_MAP2_VERTEX_ATTRIB2_4_NV = &h8672
const GL_MAP2_VERTEX_ATTRIB3_4_NV = &h8673
const GL_MAP2_VERTEX_ATTRIB4_4_NV = &h8674
const GL_MAP2_VERTEX_ATTRIB5_4_NV = &h8675
const GL_MAP2_VERTEX_ATTRIB6_4_NV = &h8676
const GL_MAP2_VERTEX_ATTRIB7_4_NV = &h8677
const GL_MAP2_VERTEX_ATTRIB8_4_NV = &h8678
const GL_MAP2_VERTEX_ATTRIB9_4_NV = &h8679
const GL_MAP2_VERTEX_ATTRIB10_4_NV = &h867A
const GL_MAP2_VERTEX_ATTRIB11_4_NV = &h867B
const GL_MAP2_VERTEX_ATTRIB12_4_NV = &h867C
const GL_MAP2_VERTEX_ATTRIB13_4_NV = &h867D
const GL_MAP2_VERTEX_ATTRIB14_4_NV = &h867E
const GL_MAP2_VERTEX_ATTRIB15_4_NV = &h867F

type PFNGLAREPROGRAMSRESIDENTNVPROC as function(byval n as GLsizei, byval programs as const GLuint ptr, byval residences as GLboolean ptr) as GLboolean
type PFNGLBINDPROGRAMNVPROC as sub(byval target as GLenum, byval id as GLuint)
type PFNGLDELETEPROGRAMSNVPROC as sub(byval n as GLsizei, byval programs as const GLuint ptr)
type PFNGLEXECUTEPROGRAMNVPROC as sub(byval target as GLenum, byval id as GLuint, byval params as const GLfloat ptr)
type PFNGLGENPROGRAMSNVPROC as sub(byval n as GLsizei, byval programs as GLuint ptr)
type PFNGLGETPROGRAMPARAMETERDVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval pname as GLenum, byval params as GLdouble ptr)
type PFNGLGETPROGRAMPARAMETERFVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETPROGRAMIVNVPROC as sub(byval id as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETPROGRAMSTRINGNVPROC as sub(byval id as GLuint, byval pname as GLenum, byval program as GLubyte ptr)
type PFNGLGETTRACKMATRIXIVNVPROC as sub(byval target as GLenum, byval address as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETVERTEXATTRIBDVNVPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLdouble ptr)
type PFNGLGETVERTEXATTRIBFVNVPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETVERTEXATTRIBIVNVPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETVERTEXATTRIBPOINTERVNVPROC as sub(byval index as GLuint, byval pname as GLenum, byval pointer as any ptr ptr)
type PFNGLISPROGRAMNVPROC as function(byval id as GLuint) as GLboolean
type PFNGLLOADPROGRAMNVPROC as sub(byval target as GLenum, byval id as GLuint, byval len as GLsizei, byval program as const GLubyte ptr)
type PFNGLPROGRAMPARAMETER4DNVPROC as sub(byval target as GLenum, byval index as GLuint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble, byval w as GLdouble)
type PFNGLPROGRAMPARAMETER4DVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLPROGRAMPARAMETER4FNVPROC as sub(byval target as GLenum, byval index as GLuint, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat, byval w as GLfloat)
type PFNGLPROGRAMPARAMETER4FVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval v as const GLfloat ptr)
type PFNGLPROGRAMPARAMETERS4DVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval count as GLsizei, byval v as const GLdouble ptr)
type PFNGLPROGRAMPARAMETERS4FVNVPROC as sub(byval target as GLenum, byval index as GLuint, byval count as GLsizei, byval v as const GLfloat ptr)
type PFNGLREQUESTRESIDENTPROGRAMSNVPROC as sub(byval n as GLsizei, byval programs as const GLuint ptr)
type PFNGLTRACKMATRIXNVPROC as sub(byval target as GLenum, byval address as GLuint, byval matrix as GLenum, byval transform as GLenum)
type PFNGLVERTEXATTRIBPOINTERNVPROC as sub(byval index as GLuint, byval fsize as GLint, byval type as GLenum, byval stride as GLsizei, byval pointer as const any ptr)
type PFNGLVERTEXATTRIB1DNVPROC as sub(byval index as GLuint, byval x as GLdouble)
type PFNGLVERTEXATTRIB1DVNVPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIB1FNVPROC as sub(byval index as GLuint, byval x as GLfloat)
type PFNGLVERTEXATTRIB1FVNVPROC as sub(byval index as GLuint, byval v as const GLfloat ptr)
type PFNGLVERTEXATTRIB1SNVPROC as sub(byval index as GLuint, byval x as GLshort)
type PFNGLVERTEXATTRIB1SVNVPROC as sub(byval index as GLuint, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIB2DNVPROC as sub(byval index as GLuint, byval x as GLdouble, byval y as GLdouble)
type PFNGLVERTEXATTRIB2DVNVPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIB2FNVPROC as sub(byval index as GLuint, byval x as GLfloat, byval y as GLfloat)
type PFNGLVERTEXATTRIB2FVNVPROC as sub(byval index as GLuint, byval v as const GLfloat ptr)
type PFNGLVERTEXATTRIB2SNVPROC as sub(byval index as GLuint, byval x as GLshort, byval y as GLshort)
type PFNGLVERTEXATTRIB2SVNVPROC as sub(byval index as GLuint, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIB3DNVPROC as sub(byval index as GLuint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
type PFNGLVERTEXATTRIB3DVNVPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIB3FNVPROC as sub(byval index as GLuint, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLVERTEXATTRIB3FVNVPROC as sub(byval index as GLuint, byval v as const GLfloat ptr)
type PFNGLVERTEXATTRIB3SNVPROC as sub(byval index as GLuint, byval x as GLshort, byval y as GLshort, byval z as GLshort)
type PFNGLVERTEXATTRIB3SVNVPROC as sub(byval index as GLuint, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIB4DNVPROC as sub(byval index as GLuint, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble, byval w as GLdouble)
type PFNGLVERTEXATTRIB4DVNVPROC as sub(byval index as GLuint, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIB4FNVPROC as sub(byval index as GLuint, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat, byval w as GLfloat)
type PFNGLVERTEXATTRIB4FVNVPROC as sub(byval index as GLuint, byval v as const GLfloat ptr)
type PFNGLVERTEXATTRIB4SNVPROC as sub(byval index as GLuint, byval x as GLshort, byval y as GLshort, byval z as GLshort, byval w as GLshort)
type PFNGLVERTEXATTRIB4SVNVPROC as sub(byval index as GLuint, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIB4UBNVPROC as sub(byval index as GLuint, byval x as GLubyte, byval y as GLubyte, byval z as GLubyte, byval w as GLubyte)
type PFNGLVERTEXATTRIB4UBVNVPROC as sub(byval index as GLuint, byval v as const GLubyte ptr)
type PFNGLVERTEXATTRIBS1DVNVPROC as sub(byval index as GLuint, byval count as GLsizei, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIBS1FVNVPROC as sub(byval index as GLuint, byval count as GLsizei, byval v as const GLfloat ptr)
type PFNGLVERTEXATTRIBS1SVNVPROC as sub(byval index as GLuint, byval count as GLsizei, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIBS2DVNVPROC as sub(byval index as GLuint, byval count as GLsizei, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIBS2FVNVPROC as sub(byval index as GLuint, byval count as GLsizei, byval v as const GLfloat ptr)
type PFNGLVERTEXATTRIBS2SVNVPROC as sub(byval index as GLuint, byval count as GLsizei, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIBS3DVNVPROC as sub(byval index as GLuint, byval count as GLsizei, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIBS3FVNVPROC as sub(byval index as GLuint, byval count as GLsizei, byval v as const GLfloat ptr)
type PFNGLVERTEXATTRIBS3SVNVPROC as sub(byval index as GLuint, byval count as GLsizei, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIBS4DVNVPROC as sub(byval index as GLuint, byval count as GLsizei, byval v as const GLdouble ptr)
type PFNGLVERTEXATTRIBS4FVNVPROC as sub(byval index as GLuint, byval count as GLsizei, byval v as const GLfloat ptr)
type PFNGLVERTEXATTRIBS4SVNVPROC as sub(byval index as GLuint, byval count as GLsizei, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIBS4UBVNVPROC as sub(byval index as GLuint, byval count as GLsizei, byval v as const GLubyte ptr)


const GL_NV_vertex_program1_1 = 1
const GL_NV_vertex_program2 = 1
const GL_NV_vertex_program2_option = 1
const GL_NV_vertex_program3 = 1
const GL_NV_vertex_program4 = 1
const GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = &h88FD

type PFNGLVERTEXATTRIBI1IEXTPROC as sub(byval index as GLuint, byval x as GLint)
type PFNGLVERTEXATTRIBI2IEXTPROC as sub(byval index as GLuint, byval x as GLint, byval y as GLint)
type PFNGLVERTEXATTRIBI3IEXTPROC as sub(byval index as GLuint, byval x as GLint, byval y as GLint, byval z as GLint)
type PFNGLVERTEXATTRIBI4IEXTPROC as sub(byval index as GLuint, byval x as GLint, byval y as GLint, byval z as GLint, byval w as GLint)
type PFNGLVERTEXATTRIBI1UIEXTPROC as sub(byval index as GLuint, byval x as GLuint)
type PFNGLVERTEXATTRIBI2UIEXTPROC as sub(byval index as GLuint, byval x as GLuint, byval y as GLuint)
type PFNGLVERTEXATTRIBI3UIEXTPROC as sub(byval index as GLuint, byval x as GLuint, byval y as GLuint, byval z as GLuint)
type PFNGLVERTEXATTRIBI4UIEXTPROC as sub(byval index as GLuint, byval x as GLuint, byval y as GLuint, byval z as GLuint, byval w as GLuint)
type PFNGLVERTEXATTRIBI1IVEXTPROC as sub(byval index as GLuint, byval v as const GLint ptr)
type PFNGLVERTEXATTRIBI2IVEXTPROC as sub(byval index as GLuint, byval v as const GLint ptr)
type PFNGLVERTEXATTRIBI3IVEXTPROC as sub(byval index as GLuint, byval v as const GLint ptr)
type PFNGLVERTEXATTRIBI4IVEXTPROC as sub(byval index as GLuint, byval v as const GLint ptr)
type PFNGLVERTEXATTRIBI1UIVEXTPROC as sub(byval index as GLuint, byval v as const GLuint ptr)
type PFNGLVERTEXATTRIBI2UIVEXTPROC as sub(byval index as GLuint, byval v as const GLuint ptr)
type PFNGLVERTEXATTRIBI3UIVEXTPROC as sub(byval index as GLuint, byval v as const GLuint ptr)
type PFNGLVERTEXATTRIBI4UIVEXTPROC as sub(byval index as GLuint, byval v as const GLuint ptr)
type PFNGLVERTEXATTRIBI4BVEXTPROC as sub(byval index as GLuint, byval v as const GLbyte ptr)
type PFNGLVERTEXATTRIBI4SVEXTPROC as sub(byval index as GLuint, byval v as const GLshort ptr)
type PFNGLVERTEXATTRIBI4UBVEXTPROC as sub(byval index as GLuint, byval v as const GLubyte ptr)
type PFNGLVERTEXATTRIBI4USVEXTPROC as sub(byval index as GLuint, byval v as const GLushort ptr)
type PFNGLVERTEXATTRIBIPOINTEREXTPROC as sub(byval index as GLuint, byval size as GLint, byval type as GLenum, byval stride as GLsizei, byval pointer as const any ptr)
type PFNGLGETVERTEXATTRIBIIVEXTPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETVERTEXATTRIBIUIVEXTPROC as sub(byval index as GLuint, byval pname as GLenum, byval params as GLuint ptr)


const GL_NV_video_capture = 1
const GL_VIDEO_BUFFER_NV = &h9020
const GL_VIDEO_BUFFER_BINDING_NV = &h9021
const GL_FIELD_UPPER_NV = &h9022
const GL_FIELD_LOWER_NV = &h9023
const GL_NUM_VIDEO_CAPTURE_STREAMS_NV = &h9024
const GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = &h9025
const GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = &h9026
const GL_LAST_VIDEO_CAPTURE_STATUS_NV = &h9027
const GL_VIDEO_BUFFER_PITCH_NV = &h9028
const GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = &h9029
const GL_VIDEO_COLOR_CONVERSION_MAX_NV = &h902A
const GL_VIDEO_COLOR_CONVERSION_MIN_NV = &h902B
const GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = &h902C
const GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = &h902D
const GL_PARTIAL_SUCCESS_NV = &h902E
const GL_SUCCESS_NV = &h902F
const GL_FAILURE_NV = &h9030
const GL_YCBYCR8_422_NV = &h9031
const GL_YCBAYCR8A_4224_NV = &h9032
const GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = &h9033
const GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = &h9034
const GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = &h9035
const GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = &h9036
const GL_Z4Y12Z4CB12Z4CR12_444_NV = &h9037
const GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = &h9038
const GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = &h9039
const GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = &h903A
const GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = &h903B
const GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = &h903C

type PFNGLBEGINVIDEOCAPTURENVPROC as sub(byval video_capture_slot as GLuint)
type PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC as sub(byval video_capture_slot as GLuint, byval stream as GLuint, byval frame_region as GLenum, byval offset as GLintptrARB)
type PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC as sub(byval video_capture_slot as GLuint, byval stream as GLuint, byval frame_region as GLenum, byval target as GLenum, byval texture as GLuint)
type PFNGLENDVIDEOCAPTURENVPROC as sub(byval video_capture_slot as GLuint)
type PFNGLGETVIDEOCAPTUREIVNVPROC as sub(byval video_capture_slot as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETVIDEOCAPTURESTREAMIVNVPROC as sub(byval video_capture_slot as GLuint, byval stream as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETVIDEOCAPTURESTREAMFVNVPROC as sub(byval video_capture_slot as GLuint, byval stream as GLuint, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETVIDEOCAPTURESTREAMDVNVPROC as sub(byval video_capture_slot as GLuint, byval stream as GLuint, byval pname as GLenum, byval params as GLdouble ptr)
type PFNGLVIDEOCAPTURENVPROC as function(byval video_capture_slot as GLuint, byval sequence_num as GLuint ptr, byval capture_time as GLuint64EXT ptr) as GLenum
type PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC as sub(byval video_capture_slot as GLuint, byval stream as GLuint, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC as sub(byval video_capture_slot as GLuint, byval stream as GLuint, byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC as sub(byval video_capture_slot as GLuint, byval stream as GLuint, byval pname as GLenum, byval params as const GLdouble ptr)


const GL_NV_viewport_array2 = 1
const GL_OML_interlace = 1
const GL_INTERLACE_OML = &h8980
const GL_INTERLACE_READ_OML = &h8981
const GL_OML_resample = 1
const GL_PACK_RESAMPLE_OML = &h8984
const GL_UNPACK_RESAMPLE_OML = &h8985
const GL_RESAMPLE_REPLICATE_OML = &h8986
const GL_RESAMPLE_ZERO_FILL_OML = &h8987
const GL_RESAMPLE_AVERAGE_OML = &h8988
const GL_RESAMPLE_DECIMATE_OML = &h8989
const GL_OML_subsample = 1
const GL_FORMAT_SUBSAMPLE_24_24_OML = &h8982
const GL_FORMAT_SUBSAMPLE_244_244_OML = &h8983
const GL_PGI_misc_hints = 1
const GL_PREFER_DOUBLEBUFFER_HINT_PGI = &h1A1F8
const GL_CONSERVE_MEMORY_HINT_PGI = &h1A1FD
const GL_RECLAIM_MEMORY_HINT_PGI = &h1A1FE
const GL_NATIVE_GRAPHICS_HANDLE_PGI = &h1A202
const GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = &h1A203
const GL_NATIVE_GRAPHICS_END_HINT_PGI = &h1A204
const GL_ALWAYS_FAST_HINT_PGI = &h1A20C
const GL_ALWAYS_SOFT_HINT_PGI = &h1A20D
const GL_ALLOW_DRAW_OBJ_HINT_PGI = &h1A20E
const GL_ALLOW_DRAW_WIN_HINT_PGI = &h1A20F
const GL_ALLOW_DRAW_FRG_HINT_PGI = &h1A210
const GL_ALLOW_DRAW_MEM_HINT_PGI = &h1A211
const GL_STRICT_DEPTHFUNC_HINT_PGI = &h1A216
const GL_STRICT_LIGHTING_HINT_PGI = &h1A217
const GL_STRICT_SCISSOR_HINT_PGI = &h1A218
const GL_FULL_STIPPLE_HINT_PGI = &h1A219
const GL_CLIP_NEAR_HINT_PGI = &h1A220
const GL_CLIP_FAR_HINT_PGI = &h1A221
const GL_WIDE_LINE_HINT_PGI = &h1A222
const GL_BACK_NORMALS_HINT_PGI = &h1A223
type PFNGLHINTPGIPROC as sub(byval target as GLenum, byval mode as GLint)


const GL_PGI_vertex_hints = 1
const GL_VERTEX_DATA_HINT_PGI = &h1A22A
const GL_VERTEX_CONSISTENT_HINT_PGI = &h1A22B
const GL_MATERIAL_SIDE_HINT_PGI = &h1A22C
const GL_MAX_VERTEX_HINT_PGI = &h1A22D
const GL_COLOR3_BIT_PGI = &h00010000
const GL_COLOR4_BIT_PGI = &h00020000
const GL_EDGEFLAG_BIT_PGI = &h00040000
const GL_INDEX_BIT_PGI = &h00080000
const GL_MAT_AMBIENT_BIT_PGI = &h00100000
const GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = &h00200000
const GL_MAT_DIFFUSE_BIT_PGI = &h00400000
const GL_MAT_EMISSION_BIT_PGI = &h00800000
const GL_MAT_COLOR_INDEXES_BIT_PGI = &h01000000
const GL_MAT_SHININESS_BIT_PGI = &h02000000
const GL_MAT_SPECULAR_BIT_PGI = &h04000000
const GL_NORMAL_BIT_PGI = &h08000000
const GL_TEXCOORD1_BIT_PGI = &h10000000
const GL_TEXCOORD2_BIT_PGI = &h20000000
const GL_TEXCOORD3_BIT_PGI = &h40000000
const GL_TEXCOORD4_BIT_PGI = &h80000000
const GL_VERTEX23_BIT_PGI = &h00000004
const GL_VERTEX4_BIT_PGI = &h00000008
const GL_REND_screen_coordinates = 1
const GL_SCREEN_COORDINATES_REND = &h8490
const GL_INVERTED_SCREEN_W_REND = &h8491
const GL_S3_s3tc = 1
const GL_RGB_S3TC = &h83A0
const GL_RGB4_S3TC = &h83A1
const GL_RGBA_S3TC = &h83A2
const GL_RGBA4_S3TC = &h83A3
const GL_RGBA_DXT5_S3TC = &h83A4
const GL_RGBA4_DXT5_S3TC = &h83A5
const GL_SGIS_detail_texture = 1
const GL_DETAIL_TEXTURE_2D_SGIS = &h8095
const GL_DETAIL_TEXTURE_2D_BINDING_SGIS = &h8096
const GL_LINEAR_DETAIL_SGIS = &h8097
const GL_LINEAR_DETAIL_ALPHA_SGIS = &h8098
const GL_LINEAR_DETAIL_COLOR_SGIS = &h8099
const GL_DETAIL_TEXTURE_LEVEL_SGIS = &h809A
const GL_DETAIL_TEXTURE_MODE_SGIS = &h809B
const GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = &h809C
type PFNGLDETAILTEXFUNCSGISPROC as sub(byval target as GLenum, byval n as GLsizei, byval points as const GLfloat ptr)
type PFNGLGETDETAILTEXFUNCSGISPROC as sub(byval target as GLenum, byval points as GLfloat ptr)


const GL_SGIS_fog_function = 1
const GL_FOG_FUNC_SGIS = &h812A
const GL_FOG_FUNC_POINTS_SGIS = &h812B
const GL_MAX_FOG_FUNC_POINTS_SGIS = &h812C
type PFNGLFOGFUNCSGISPROC as sub(byval n as GLsizei, byval points as const GLfloat ptr)
type PFNGLGETFOGFUNCSGISPROC as sub(byval points as GLfloat ptr)


const GL_SGIS_generate_mipmap = 1
const GL_GENERATE_MIPMAP_SGIS = &h8191
const GL_GENERATE_MIPMAP_HINT_SGIS = &h8192
const GL_SGIS_multisample = 1
const GL_MULTISAMPLE_SGIS = &h809D
const GL_SAMPLE_ALPHA_TO_MASK_SGIS = &h809E
const GL_SAMPLE_ALPHA_TO_ONE_SGIS = &h809F
const GL_SAMPLE_MASK_SGIS = &h80A0
const GL_1PASS_SGIS = &h80A1
const GL_2PASS_0_SGIS = &h80A2
const GL_2PASS_1_SGIS = &h80A3
const GL_4PASS_0_SGIS = &h80A4
const GL_4PASS_1_SGIS = &h80A5
const GL_4PASS_2_SGIS = &h80A6
const GL_4PASS_3_SGIS = &h80A7
const GL_SAMPLE_BUFFERS_SGIS = &h80A8
const GL_SAMPLES_SGIS = &h80A9
const GL_SAMPLE_MASK_VALUE_SGIS = &h80AA
const GL_SAMPLE_MASK_INVERT_SGIS = &h80AB
const GL_SAMPLE_PATTERN_SGIS = &h80AC
type PFNGLSAMPLEMASKSGISPROC as sub(byval value as GLclampf, byval invert as GLboolean)
type PFNGLSAMPLEPATTERNSGISPROC as sub(byval pattern as GLenum)


const GL_SGIS_pixel_texture = 1
const GL_PIXEL_TEXTURE_SGIS = &h8353
const GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = &h8354
const GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = &h8355
const GL_PIXEL_GROUP_COLOR_SGIS = &h8356

type PFNGLPIXELTEXGENPARAMETERISGISPROC as sub(byval pname as GLenum, byval param as GLint)
type PFNGLPIXELTEXGENPARAMETERIVSGISPROC as sub(byval pname as GLenum, byval params as const GLint ptr)
type PFNGLPIXELTEXGENPARAMETERFSGISPROC as sub(byval pname as GLenum, byval param as GLfloat)
type PFNGLPIXELTEXGENPARAMETERFVSGISPROC as sub(byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC as sub(byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC as sub(byval pname as GLenum, byval params as GLfloat ptr)


const GL_SGIS_point_line_texgen = 1
const GL_EYE_DISTANCE_TO_POINT_SGIS = &h81F0
const GL_OBJECT_DISTANCE_TO_POINT_SGIS = &h81F1
const GL_EYE_DISTANCE_TO_LINE_SGIS = &h81F2
const GL_OBJECT_DISTANCE_TO_LINE_SGIS = &h81F3
const GL_EYE_POINT_SGIS = &h81F4
const GL_OBJECT_POINT_SGIS = &h81F5
const GL_EYE_LINE_SGIS = &h81F6
const GL_OBJECT_LINE_SGIS = &h81F7
const GL_SGIS_point_parameters = 1
const GL_POINT_SIZE_MIN_SGIS = &h8126
const GL_POINT_SIZE_MAX_SGIS = &h8127
const GL_POINT_FADE_THRESHOLD_SIZE_SGIS = &h8128
const GL_DISTANCE_ATTENUATION_SGIS = &h8129
type PFNGLPOINTPARAMETERFSGISPROC as sub(byval pname as GLenum, byval param as GLfloat)
type PFNGLPOINTPARAMETERFVSGISPROC as sub(byval pname as GLenum, byval params as const GLfloat ptr)


const GL_SGIS_sharpen_texture = 1
const GL_LINEAR_SHARPEN_SGIS = &h80AD
const GL_LINEAR_SHARPEN_ALPHA_SGIS = &h80AE
const GL_LINEAR_SHARPEN_COLOR_SGIS = &h80AF
const GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = &h80B0
type PFNGLSHARPENTEXFUNCSGISPROC as sub(byval target as GLenum, byval n as GLsizei, byval points as const GLfloat ptr)
type PFNGLGETSHARPENTEXFUNCSGISPROC as sub(byval target as GLenum, byval points as GLfloat ptr)


const GL_SGIS_texture4D = 1
const GL_PACK_SKIP_VOLUMES_SGIS = &h8130
const GL_PACK_IMAGE_DEPTH_SGIS = &h8131
const GL_UNPACK_SKIP_VOLUMES_SGIS = &h8132
const GL_UNPACK_IMAGE_DEPTH_SGIS = &h8133
const GL_TEXTURE_4D_SGIS = &h8134
const GL_PROXY_TEXTURE_4D_SGIS = &h8135
const GL_TEXTURE_4DSIZE_SGIS = &h8136
const GL_TEXTURE_WRAP_Q_SGIS = &h8137
const GL_MAX_4D_TEXTURE_SIZE_SGIS = &h8138
const GL_TEXTURE_4D_BINDING_SGIS = &h814F
type PFNGLTEXIMAGE4DSGISPROC as sub(byval target as GLenum, byval level as GLint, byval internalformat as GLenum, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval size4d as GLsizei, byval border as GLint, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)
type PFNGLTEXSUBIMAGE4DSGISPROC as sub(byval target as GLenum, byval level as GLint, byval xoffset as GLint, byval yoffset as GLint, byval zoffset as GLint, byval woffset as GLint, byval width as GLsizei, byval height as GLsizei, byval depth as GLsizei, byval size4d as GLsizei, byval format as GLenum, byval type as GLenum, byval pixels as const any ptr)


const GL_SGIS_texture_border_clamp = 1
const GL_CLAMP_TO_BORDER_SGIS = &h812D
const GL_SGIS_texture_color_mask = 1
const GL_TEXTURE_COLOR_WRITEMASK_SGIS = &h81EF
type PFNGLTEXTURECOLORMASKSGISPROC as sub(byval red as GLboolean, byval green as GLboolean, byval blue as GLboolean, byval alpha as GLboolean)


const GL_SGIS_texture_edge_clamp = 1
const GL_CLAMP_TO_EDGE_SGIS = &h812F
const GL_SGIS_texture_filter4 = 1
const GL_FILTER4_SGIS = &h8146
const GL_TEXTURE_FILTER4_SIZE_SGIS = &h8147
type PFNGLGETTEXFILTERFUNCSGISPROC as sub(byval target as GLenum, byval filter as GLenum, byval weights as GLfloat ptr)
type PFNGLTEXFILTERFUNCSGISPROC as sub(byval target as GLenum, byval filter as GLenum, byval n as GLsizei, byval weights as const GLfloat ptr)


const GL_SGIS_texture_lod = 1
const GL_TEXTURE_MIN_LOD_SGIS = &h813A
const GL_TEXTURE_MAX_LOD_SGIS = &h813B
const GL_TEXTURE_BASE_LEVEL_SGIS = &h813C
const GL_TEXTURE_MAX_LEVEL_SGIS = &h813D
const GL_SGIS_texture_select = 1
const GL_DUAL_ALPHA4_SGIS = &h8110
const GL_DUAL_ALPHA8_SGIS = &h8111
const GL_DUAL_ALPHA12_SGIS = &h8112
const GL_DUAL_ALPHA16_SGIS = &h8113
const GL_DUAL_LUMINANCE4_SGIS = &h8114
const GL_DUAL_LUMINANCE8_SGIS = &h8115
const GL_DUAL_LUMINANCE12_SGIS = &h8116
const GL_DUAL_LUMINANCE16_SGIS = &h8117
const GL_DUAL_INTENSITY4_SGIS = &h8118
const GL_DUAL_INTENSITY8_SGIS = &h8119
const GL_DUAL_INTENSITY12_SGIS = &h811A
const GL_DUAL_INTENSITY16_SGIS = &h811B
const GL_DUAL_LUMINANCE_ALPHA4_SGIS = &h811C
const GL_DUAL_LUMINANCE_ALPHA8_SGIS = &h811D
const GL_QUAD_ALPHA4_SGIS = &h811E
const GL_QUAD_ALPHA8_SGIS = &h811F
const GL_QUAD_LUMINANCE4_SGIS = &h8120
const GL_QUAD_LUMINANCE8_SGIS = &h8121
const GL_QUAD_INTENSITY4_SGIS = &h8122
const GL_QUAD_INTENSITY8_SGIS = &h8123
const GL_DUAL_TEXTURE_SELECT_SGIS = &h8124
const GL_QUAD_TEXTURE_SELECT_SGIS = &h8125
const GL_SGIX_async = 1
const GL_ASYNC_MARKER_SGIX = &h8329

type PFNGLASYNCMARKERSGIXPROC as sub(byval marker as GLuint)
type PFNGLFINISHASYNCSGIXPROC as function(byval markerp as GLuint ptr) as GLint
type PFNGLPOLLASYNCSGIXPROC as function(byval markerp as GLuint ptr) as GLint
type PFNGLGENASYNCMARKERSSGIXPROC as function(byval range as GLsizei) as GLuint
type PFNGLDELETEASYNCMARKERSSGIXPROC as sub(byval marker as GLuint, byval range as GLsizei)
type PFNGLISASYNCMARKERSGIXPROC as function(byval marker as GLuint) as GLboolean


const GL_SGIX_async_histogram = 1
const GL_ASYNC_HISTOGRAM_SGIX = &h832C
const GL_MAX_ASYNC_HISTOGRAM_SGIX = &h832D
const GL_SGIX_async_pixel = 1
const GL_ASYNC_TEX_IMAGE_SGIX = &h835C
const GL_ASYNC_DRAW_PIXELS_SGIX = &h835D
const GL_ASYNC_READ_PIXELS_SGIX = &h835E
const GL_MAX_ASYNC_TEX_IMAGE_SGIX = &h835F
const GL_MAX_ASYNC_DRAW_PIXELS_SGIX = &h8360
const GL_MAX_ASYNC_READ_PIXELS_SGIX = &h8361
const GL_SGIX_blend_alpha_minmax = 1
const GL_ALPHA_MIN_SGIX = &h8320
const GL_ALPHA_MAX_SGIX = &h8321
const GL_SGIX_calligraphic_fragment = 1
const GL_CALLIGRAPHIC_FRAGMENT_SGIX = &h8183
const GL_SGIX_clipmap = 1
const GL_LINEAR_CLIPMAP_LINEAR_SGIX = &h8170
const GL_TEXTURE_CLIPMAP_CENTER_SGIX = &h8171
const GL_TEXTURE_CLIPMAP_FRAME_SGIX = &h8172
const GL_TEXTURE_CLIPMAP_OFFSET_SGIX = &h8173
const GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = &h8174
const GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = &h8175
const GL_TEXTURE_CLIPMAP_DEPTH_SGIX = &h8176
const GL_MAX_CLIPMAP_DEPTH_SGIX = &h8177
const GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = &h8178
const GL_NEAREST_CLIPMAP_NEAREST_SGIX = &h844D
const GL_NEAREST_CLIPMAP_LINEAR_SGIX = &h844E
const GL_LINEAR_CLIPMAP_NEAREST_SGIX = &h844F
const GL_SGIX_convolution_accuracy = 1
const GL_CONVOLUTION_HINT_SGIX = &h8316
const GL_SGIX_depth_pass_instrument = 1
const GL_SGIX_depth_texture = 1
const GL_DEPTH_COMPONENT16_SGIX = &h81A5
const GL_DEPTH_COMPONENT24_SGIX = &h81A6
const GL_DEPTH_COMPONENT32_SGIX = &h81A7
const GL_SGIX_flush_raster = 1
type PFNGLFLUSHRASTERSGIXPROC as sub()


const GL_SGIX_fog_offset = 1
const GL_FOG_OFFSET_SGIX = &h8198
const GL_FOG_OFFSET_VALUE_SGIX = &h8199
const GL_SGIX_fragment_lighting = 1
const GL_FRAGMENT_LIGHTING_SGIX = &h8400
const GL_FRAGMENT_COLOR_MATERIAL_SGIX = &h8401
const GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = &h8402
const GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = &h8403
const GL_MAX_FRAGMENT_LIGHTS_SGIX = &h8404
const GL_MAX_ACTIVE_LIGHTS_SGIX = &h8405
const GL_CURRENT_RASTER_NORMAL_SGIX = &h8406
const GL_LIGHT_ENV_MODE_SGIX = &h8407
const GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = &h8408
const GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = &h8409
const GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = &h840A
const GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = &h840B
const GL_FRAGMENT_LIGHT0_SGIX = &h840C
const GL_FRAGMENT_LIGHT1_SGIX = &h840D
const GL_FRAGMENT_LIGHT2_SGIX = &h840E
const GL_FRAGMENT_LIGHT3_SGIX = &h840F
const GL_FRAGMENT_LIGHT4_SGIX = &h8410
const GL_FRAGMENT_LIGHT5_SGIX = &h8411
const GL_FRAGMENT_LIGHT6_SGIX = &h8412
const GL_FRAGMENT_LIGHT7_SGIX = &h8413

type PFNGLFRAGMENTCOLORMATERIALSGIXPROC as sub(byval face as GLenum, byval mode as GLenum)
type PFNGLFRAGMENTLIGHTFSGIXPROC as sub(byval light as GLenum, byval pname as GLenum, byval param as GLfloat)
type PFNGLFRAGMENTLIGHTFVSGIXPROC as sub(byval light as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLFRAGMENTLIGHTISGIXPROC as sub(byval light as GLenum, byval pname as GLenum, byval param as GLint)
type PFNGLFRAGMENTLIGHTIVSGIXPROC as sub(byval light as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLFRAGMENTLIGHTMODELFSGIXPROC as sub(byval pname as GLenum, byval param as GLfloat)
type PFNGLFRAGMENTLIGHTMODELFVSGIXPROC as sub(byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLFRAGMENTLIGHTMODELISGIXPROC as sub(byval pname as GLenum, byval param as GLint)
type PFNGLFRAGMENTLIGHTMODELIVSGIXPROC as sub(byval pname as GLenum, byval params as const GLint ptr)
type PFNGLFRAGMENTMATERIALFSGIXPROC as sub(byval face as GLenum, byval pname as GLenum, byval param as GLfloat)
type PFNGLFRAGMENTMATERIALFVSGIXPROC as sub(byval face as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLFRAGMENTMATERIALISGIXPROC as sub(byval face as GLenum, byval pname as GLenum, byval param as GLint)
type PFNGLFRAGMENTMATERIALIVSGIXPROC as sub(byval face as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLGETFRAGMENTLIGHTFVSGIXPROC as sub(byval light as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETFRAGMENTLIGHTIVSGIXPROC as sub(byval light as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLGETFRAGMENTMATERIALFVSGIXPROC as sub(byval face as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETFRAGMENTMATERIALIVSGIXPROC as sub(byval face as GLenum, byval pname as GLenum, byval params as GLint ptr)
type PFNGLLIGHTENVISGIXPROC as sub(byval pname as GLenum, byval param as GLint)


const GL_SGIX_framezoom = 1
const GL_FRAMEZOOM_SGIX = &h818B
const GL_FRAMEZOOM_FACTOR_SGIX = &h818C
const GL_MAX_FRAMEZOOM_FACTOR_SGIX = &h818D
type PFNGLFRAMEZOOMSGIXPROC as sub(byval factor as GLint)


const GL_SGIX_igloo_interface = 1
type PFNGLIGLOOINTERFACESGIXPROC as sub(byval pname as GLenum, byval params as const any ptr)


const GL_SGIX_instruments = 1
const GL_INSTRUMENT_BUFFER_POINTER_SGIX = &h8180
const GL_INSTRUMENT_MEASUREMENTS_SGIX = &h8181

type PFNGLGETINSTRUMENTSSGIXPROC as function() as GLint
type PFNGLINSTRUMENTSBUFFERSGIXPROC as sub(byval size as GLsizei, byval buffer as GLint ptr)
type PFNGLPOLLINSTRUMENTSSGIXPROC as function(byval marker_p as GLint ptr) as GLint
type PFNGLREADINSTRUMENTSSGIXPROC as sub(byval marker as GLint)
type PFNGLSTARTINSTRUMENTSSGIXPROC as sub()
type PFNGLSTOPINSTRUMENTSSGIXPROC as sub(byval marker as GLint)


const GL_SGIX_interlace = 1
const GL_INTERLACE_SGIX = &h8094
const GL_SGIX_ir_instrument1 = 1
const GL_IR_INSTRUMENT1_SGIX = &h817F
const GL_SGIX_list_priority = 1
const GL_LIST_PRIORITY_SGIX = &h8182

type PFNGLGETLISTPARAMETERFVSGIXPROC as sub(byval list as GLuint, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETLISTPARAMETERIVSGIXPROC as sub(byval list as GLuint, byval pname as GLenum, byval params as GLint ptr)
type PFNGLLISTPARAMETERFSGIXPROC as sub(byval list as GLuint, byval pname as GLenum, byval param as GLfloat)
type PFNGLLISTPARAMETERFVSGIXPROC as sub(byval list as GLuint, byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLLISTPARAMETERISGIXPROC as sub(byval list as GLuint, byval pname as GLenum, byval param as GLint)
type PFNGLLISTPARAMETERIVSGIXPROC as sub(byval list as GLuint, byval pname as GLenum, byval params as const GLint ptr)


const GL_SGIX_pixel_texture = 1
const GL_PIXEL_TEX_GEN_SGIX = &h8139
const GL_PIXEL_TEX_GEN_MODE_SGIX = &h832B
type PFNGLPIXELTEXGENSGIXPROC as sub(byval mode as GLenum)


const GL_SGIX_pixel_tiles = 1
const GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = &h813E
const GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = &h813F
const GL_PIXEL_TILE_WIDTH_SGIX = &h8140
const GL_PIXEL_TILE_HEIGHT_SGIX = &h8141
const GL_PIXEL_TILE_GRID_WIDTH_SGIX = &h8142
const GL_PIXEL_TILE_GRID_HEIGHT_SGIX = &h8143
const GL_PIXEL_TILE_GRID_DEPTH_SGIX = &h8144
const GL_PIXEL_TILE_CACHE_SIZE_SGIX = &h8145
const GL_SGIX_polynomial_ffd = 1
const GL_TEXTURE_DEFORMATION_BIT_SGIX = &h00000001
const GL_GEOMETRY_DEFORMATION_BIT_SGIX = &h00000002
const GL_GEOMETRY_DEFORMATION_SGIX = &h8194
const GL_TEXTURE_DEFORMATION_SGIX = &h8195
const GL_DEFORMATIONS_MASK_SGIX = &h8196
const GL_MAX_DEFORMATION_ORDER_SGIX = &h8197

type PFNGLDEFORMATIONMAP3DSGIXPROC as sub(byval target as GLenum, byval u1 as GLdouble, byval u2 as GLdouble, byval ustride as GLint, byval uorder as GLint, byval v1 as GLdouble, byval v2 as GLdouble, byval vstride as GLint, byval vorder as GLint, byval w1 as GLdouble, byval w2 as GLdouble, byval wstride as GLint, byval worder as GLint, byval points as const GLdouble ptr)
type PFNGLDEFORMATIONMAP3FSGIXPROC as sub(byval target as GLenum, byval u1 as GLfloat, byval u2 as GLfloat, byval ustride as GLint, byval uorder as GLint, byval v1 as GLfloat, byval v2 as GLfloat, byval vstride as GLint, byval vorder as GLint, byval w1 as GLfloat, byval w2 as GLfloat, byval wstride as GLint, byval worder as GLint, byval points as const GLfloat ptr)
type PFNGLDEFORMSGIXPROC as sub(byval mask as GLbitfield)
type PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC as sub(byval mask as GLbitfield)


const GL_SGIX_reference_plane = 1
const GL_REFERENCE_PLANE_SGIX = &h817D
const GL_REFERENCE_PLANE_EQUATION_SGIX = &h817E
type PFNGLREFERENCEPLANESGIXPROC as sub(byval equation as const GLdouble ptr)


const GL_SGIX_resample = 1
const GL_PACK_RESAMPLE_SGIX = &h842C
const GL_UNPACK_RESAMPLE_SGIX = &h842D
const GL_RESAMPLE_REPLICATE_SGIX = &h842E
const GL_RESAMPLE_ZERO_FILL_SGIX = &h842F
const GL_RESAMPLE_DECIMATE_SGIX = &h8430
const GL_SGIX_scalebias_hint = 1
const GL_SCALEBIAS_HINT_SGIX = &h8322
const GL_SGIX_shadow = 1
const GL_TEXTURE_COMPARE_SGIX = &h819A
const GL_TEXTURE_COMPARE_OPERATOR_SGIX = &h819B
const GL_TEXTURE_LEQUAL_R_SGIX = &h819C
const GL_TEXTURE_GEQUAL_R_SGIX = &h819D
const GL_SGIX_shadow_ambient = 1
const GL_SHADOW_AMBIENT_SGIX = &h80BF
const GL_SGIX_sprite = 1
const GL_SPRITE_SGIX = &h8148
const GL_SPRITE_MODE_SGIX = &h8149
const GL_SPRITE_AXIS_SGIX = &h814A
const GL_SPRITE_TRANSLATION_SGIX = &h814B
const GL_SPRITE_AXIAL_SGIX = &h814C
const GL_SPRITE_OBJECT_ALIGNED_SGIX = &h814D
const GL_SPRITE_EYE_ALIGNED_SGIX = &h814E

type PFNGLSPRITEPARAMETERFSGIXPROC as sub(byval pname as GLenum, byval param as GLfloat)
type PFNGLSPRITEPARAMETERFVSGIXPROC as sub(byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLSPRITEPARAMETERISGIXPROC as sub(byval pname as GLenum, byval param as GLint)
type PFNGLSPRITEPARAMETERIVSGIXPROC as sub(byval pname as GLenum, byval params as const GLint ptr)


const GL_SGIX_subsample = 1
const GL_PACK_SUBSAMPLE_RATE_SGIX = &h85A0
const GL_UNPACK_SUBSAMPLE_RATE_SGIX = &h85A1
const GL_PIXEL_SUBSAMPLE_4444_SGIX = &h85A2
const GL_PIXEL_SUBSAMPLE_2424_SGIX = &h85A3
const GL_PIXEL_SUBSAMPLE_4242_SGIX = &h85A4
const GL_SGIX_tag_sample_buffer = 1
type PFNGLTAGSAMPLEBUFFERSGIXPROC as sub()


const GL_SGIX_texture_add_env = 1
const GL_TEXTURE_ENV_BIAS_SGIX = &h80BE
const GL_SGIX_texture_coordinate_clamp = 1
const GL_TEXTURE_MAX_CLAMP_S_SGIX = &h8369
const GL_TEXTURE_MAX_CLAMP_T_SGIX = &h836A
const GL_TEXTURE_MAX_CLAMP_R_SGIX = &h836B
const GL_SGIX_texture_lod_bias = 1
const GL_TEXTURE_LOD_BIAS_S_SGIX = &h818E
const GL_TEXTURE_LOD_BIAS_T_SGIX = &h818F
const GL_TEXTURE_LOD_BIAS_R_SGIX = &h8190
const GL_SGIX_texture_multi_buffer = 1
const GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = &h812E
const GL_SGIX_texture_scale_bias = 1
const GL_POST_TEXTURE_FILTER_BIAS_SGIX = &h8179
const GL_POST_TEXTURE_FILTER_SCALE_SGIX = &h817A
const GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = &h817B
const GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = &h817C
const GL_SGIX_vertex_preclip = 1
const GL_VERTEX_PRECLIP_SGIX = &h83EE
const GL_VERTEX_PRECLIP_HINT_SGIX = &h83EF
const GL_SGIX_ycrcb = 1
const GL_YCRCB_422_SGIX = &h81BB
const GL_YCRCB_444_SGIX = &h81BC
const GL_SGIX_ycrcb_subsample = 1
const GL_SGIX_ycrcba = 1
const GL_YCRCB_SGIX = &h8318
const GL_YCRCBA_SGIX = &h8319
const GL_SGI_color_matrix = 1
const GL_COLOR_MATRIX_SGI = &h80B1
const GL_COLOR_MATRIX_STACK_DEPTH_SGI = &h80B2
const GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = &h80B3
const GL_POST_COLOR_MATRIX_RED_SCALE_SGI = &h80B4
const GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = &h80B5
const GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = &h80B6
const GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = &h80B7
const GL_POST_COLOR_MATRIX_RED_BIAS_SGI = &h80B8
const GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = &h80B9
const GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = &h80BA
const GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = &h80BB
const GL_SGI_color_table = 1
const GL_COLOR_TABLE_SGI = &h80D0
const GL_POST_CONVOLUTION_COLOR_TABLE_SGI = &h80D1
const GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = &h80D2
const GL_PROXY_COLOR_TABLE_SGI = &h80D3
const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = &h80D4
const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = &h80D5
const GL_COLOR_TABLE_SCALE_SGI = &h80D6
const GL_COLOR_TABLE_BIAS_SGI = &h80D7
const GL_COLOR_TABLE_FORMAT_SGI = &h80D8
const GL_COLOR_TABLE_WIDTH_SGI = &h80D9
const GL_COLOR_TABLE_RED_SIZE_SGI = &h80DA
const GL_COLOR_TABLE_GREEN_SIZE_SGI = &h80DB
const GL_COLOR_TABLE_BLUE_SIZE_SGI = &h80DC
const GL_COLOR_TABLE_ALPHA_SIZE_SGI = &h80DD
const GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = &h80DE
const GL_COLOR_TABLE_INTENSITY_SIZE_SGI = &h80DF

type PFNGLCOLORTABLESGIPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval width as GLsizei, byval format as GLenum, byval type as GLenum, byval table as const any ptr)
type PFNGLCOLORTABLEPARAMETERFVSGIPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLfloat ptr)
type PFNGLCOLORTABLEPARAMETERIVSGIPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as const GLint ptr)
type PFNGLCOPYCOLORTABLESGIPROC as sub(byval target as GLenum, byval internalformat as GLenum, byval x as GLint, byval y as GLint, byval width as GLsizei)
type PFNGLGETCOLORTABLESGIPROC as sub(byval target as GLenum, byval format as GLenum, byval type as GLenum, byval table as any ptr)
type PFNGLGETCOLORTABLEPARAMETERFVSGIPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLfloat ptr)
type PFNGLGETCOLORTABLEPARAMETERIVSGIPROC as sub(byval target as GLenum, byval pname as GLenum, byval params as GLint ptr)


const GL_SGI_texture_color_table = 1
const GL_TEXTURE_COLOR_TABLE_SGI = &h80BC
const GL_PROXY_TEXTURE_COLOR_TABLE_SGI = &h80BD
const GL_SUNX_constant_data = 1
const GL_UNPACK_CONSTANT_DATA_SUNX = &h81D5
const GL_TEXTURE_CONSTANT_DATA_SUNX = &h81D6
type PFNGLFINISHTEXTURESUNXPROC as sub()


const GL_SUN_convolution_border_modes = 1
const GL_WRAP_BORDER_SUN = &h81D4
const GL_SUN_global_alpha = 1
const GL_GLOBAL_ALPHA_SUN = &h81D9
const GL_GLOBAL_ALPHA_FACTOR_SUN = &h81DA

type PFNGLGLOBALALPHAFACTORBSUNPROC as sub(byval factor as GLbyte)
type PFNGLGLOBALALPHAFACTORSSUNPROC as sub(byval factor as GLshort)
type PFNGLGLOBALALPHAFACTORISUNPROC as sub(byval factor as GLint)
type PFNGLGLOBALALPHAFACTORFSUNPROC as sub(byval factor as GLfloat)
type PFNGLGLOBALALPHAFACTORDSUNPROC as sub(byval factor as GLdouble)
type PFNGLGLOBALALPHAFACTORUBSUNPROC as sub(byval factor as GLubyte)
type PFNGLGLOBALALPHAFACTORUSSUNPROC as sub(byval factor as GLushort)
type PFNGLGLOBALALPHAFACTORUISUNPROC as sub(byval factor as GLuint)


const GL_SUN_mesh_array = 1
const GL_QUAD_MESH_SUN = &h8614
const GL_TRIANGLE_MESH_SUN = &h8615
type PFNGLDRAWMESHARRAYSSUNPROC as sub(byval mode as GLenum, byval first as GLint, byval count as GLsizei, byval width as GLsizei)


const GL_SUN_slice_accum = 1
const GL_SLICE_ACCUM_SUN = &h85CC
const GL_SUN_triangle_list = 1
const GL_RESTART_SUN = &h0001
const GL_REPLACE_MIDDLE_SUN = &h0002
const GL_REPLACE_OLDEST_SUN = &h0003
const GL_TRIANGLE_LIST_SUN = &h81D7
const GL_REPLACEMENT_CODE_SUN = &h81D8
const GL_REPLACEMENT_CODE_ARRAY_SUN = &h85C0
const GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = &h85C1
const GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = &h85C2
const GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = &h85C3
const GL_R1UI_V3F_SUN = &h85C4
const GL_R1UI_C4UB_V3F_SUN = &h85C5
const GL_R1UI_C3F_V3F_SUN = &h85C6
const GL_R1UI_N3F_V3F_SUN = &h85C7
const GL_R1UI_C4F_N3F_V3F_SUN = &h85C8
const GL_R1UI_T2F_V3F_SUN = &h85C9
const GL_R1UI_T2F_N3F_V3F_SUN = &h85CA
const GL_R1UI_T2F_C4F_N3F_V3F_SUN = &h85CB

type PFNGLREPLACEMENTCODEUISUNPROC as sub(byval code as GLuint)
type PFNGLREPLACEMENTCODEUSSUNPROC as sub(byval code as GLushort)
type PFNGLREPLACEMENTCODEUBSUNPROC as sub(byval code as GLubyte)
type PFNGLREPLACEMENTCODEUIVSUNPROC as sub(byval code as const GLuint ptr)
type PFNGLREPLACEMENTCODEUSVSUNPROC as sub(byval code as const GLushort ptr)
type PFNGLREPLACEMENTCODEUBVSUNPROC as sub(byval code as const GLubyte ptr)
type PFNGLREPLACEMENTCODEPOINTERSUNPROC as sub(byval type as GLenum, byval stride as GLsizei, byval pointer as const any ptr ptr)


const GL_SUN_vertex = 1
type PFNGLCOLOR4UBVERTEX2FSUNPROC as sub(byval r as GLubyte, byval g as GLubyte, byval b as GLubyte, byval a as GLubyte, byval x as GLfloat, byval y as GLfloat)
type PFNGLCOLOR4UBVERTEX2FVSUNPROC as sub(byval c as const GLubyte ptr, byval v as const GLfloat ptr)
type PFNGLCOLOR4UBVERTEX3FSUNPROC as sub(byval r as GLubyte, byval g as GLubyte, byval b as GLubyte, byval a as GLubyte, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLCOLOR4UBVERTEX3FVSUNPROC as sub(byval c as const GLubyte ptr, byval v as const GLfloat ptr)
type PFNGLCOLOR3FVERTEX3FSUNPROC as sub(byval r as GLfloat, byval g as GLfloat, byval b as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLCOLOR3FVERTEX3FVSUNPROC as sub(byval c as const GLfloat ptr, byval v as const GLfloat ptr)
type PFNGLNORMAL3FVERTEX3FSUNPROC as sub(byval nx as GLfloat, byval ny as GLfloat, byval nz as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLNORMAL3FVERTEX3FVSUNPROC as sub(byval n as const GLfloat ptr, byval v as const GLfloat ptr)
type PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC as sub(byval r as GLfloat, byval g as GLfloat, byval b as GLfloat, byval a as GLfloat, byval nx as GLfloat, byval ny as GLfloat, byval nz as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC as sub(byval c as const GLfloat ptr, byval n as const GLfloat ptr, byval v as const GLfloat ptr)
type PFNGLTEXCOORD2FVERTEX3FSUNPROC as sub(byval s as GLfloat, byval t as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLTEXCOORD2FVERTEX3FVSUNPROC as sub(byval tc as const GLfloat ptr, byval v as const GLfloat ptr)
type PFNGLTEXCOORD4FVERTEX4FSUNPROC as sub(byval s as GLfloat, byval t as GLfloat, byval p as GLfloat, byval q as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat, byval w as GLfloat)
type PFNGLTEXCOORD4FVERTEX4FVSUNPROC as sub(byval tc as const GLfloat ptr, byval v as const GLfloat ptr)
type PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC as sub(byval s as GLfloat, byval t as GLfloat, byval r as GLubyte, byval g as GLubyte, byval b as GLubyte, byval a as GLubyte, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC as sub(byval tc as const GLfloat ptr, byval c as const GLubyte ptr, byval v as const GLfloat ptr)
type PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC as sub(byval s as GLfloat, byval t as GLfloat, byval r as GLfloat, byval g as GLfloat, byval b as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC as sub(byval tc as const GLfloat ptr, byval c as const GLfloat ptr, byval v as const GLfloat ptr)
type PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC as sub(byval s as GLfloat, byval t as GLfloat, byval nx as GLfloat, byval ny as GLfloat, byval nz as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC as sub(byval tc as const GLfloat ptr, byval n as const GLfloat ptr, byval v as const GLfloat ptr)
type PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC as sub(byval s as GLfloat, byval t as GLfloat, byval r as GLfloat, byval g as GLfloat, byval b as GLfloat, byval a as GLfloat, byval nx as GLfloat, byval ny as GLfloat, byval nz as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC as sub(byval tc as const GLfloat ptr, byval c as const GLfloat ptr, byval n as const GLfloat ptr, byval v as const GLfloat ptr)
type PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC as sub(byval s as GLfloat, byval t as GLfloat, byval p as GLfloat, byval q as GLfloat, byval r as GLfloat, byval g as GLfloat, byval b as GLfloat, byval a as GLfloat, byval nx as GLfloat, byval ny as GLfloat, byval nz as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat, byval w as GLfloat)
type PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC as sub(byval tc as const GLfloat ptr, byval c as const GLfloat ptr, byval n as const GLfloat ptr, byval v as const GLfloat ptr)
type PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC as sub(byval rc as GLuint, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC as sub(byval rc as const GLuint ptr, byval v as const GLfloat ptr)
type PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC as sub(byval rc as GLuint, byval r as GLubyte, byval g as GLubyte, byval b as GLubyte, byval a as GLubyte, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC as sub(byval rc as const GLuint ptr, byval c as const GLubyte ptr, byval v as const GLfloat ptr)
type PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC as sub(byval rc as GLuint, byval r as GLfloat, byval g as GLfloat, byval b as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC as sub(byval rc as const GLuint ptr, byval c as const GLfloat ptr, byval v as const GLfloat ptr)
type PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC as sub(byval rc as GLuint, byval nx as GLfloat, byval ny as GLfloat, byval nz as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC as sub(byval rc as const GLuint ptr, byval n as const GLfloat ptr, byval v as const GLfloat ptr)
type PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC as sub(byval rc as GLuint, byval r as GLfloat, byval g as GLfloat, byval b as GLfloat, byval a as GLfloat, byval nx as GLfloat, byval ny as GLfloat, byval nz as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC as sub(byval rc as const GLuint ptr, byval c as const GLfloat ptr, byval n as const GLfloat ptr, byval v as const GLfloat ptr)
type PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC as sub(byval rc as GLuint, byval s as GLfloat, byval t as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC as sub(byval rc as const GLuint ptr, byval tc as const GLfloat ptr, byval v as const GLfloat ptr)
type PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC as sub(byval rc as GLuint, byval s as GLfloat, byval t as GLfloat, byval nx as GLfloat, byval ny as GLfloat, byval nz as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC as sub(byval rc as const GLuint ptr, byval tc as const GLfloat ptr, byval n as const GLfloat ptr, byval v as const GLfloat ptr)
type PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC as sub(byval rc as GLuint, byval s as GLfloat, byval t as GLfloat, byval r as GLfloat, byval g as GLfloat, byval b as GLfloat, byval a as GLfloat, byval nx as GLfloat, byval ny as GLfloat, byval nz as GLfloat, byval x as GLfloat, byval y as GLfloat, byval z as GLfloat)
type PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC as sub(byval rc as const GLuint ptr, byval tc as const GLfloat ptr, byval c as const GLfloat ptr, byval n as const GLfloat ptr, byval v as const GLfloat ptr)


const GL_WIN_phong_shading = 1
const GL_PHONG_WIN = &h80EA
const GL_PHONG_HINT_WIN = &h80EB
const GL_WIN_specular_fog = 1
const GL_FOG_SPECULAR_TEXTURE_WIN = &h80EC

end extern




#inclib "glu32"


extern "Windows"



declare function gluErrorString(byval errCode as GLenum) as const zstring ptr
declare function gluErrorUnicodeStringEXT(byval errCode as GLenum) as const wstring ptr
declare function gluGetString(byval name as GLenum) as const zstring ptr
declare sub gluOrtho2D(byval left as GLdouble, byval right as GLdouble, byval bottom as GLdouble, byval top as GLdouble)
declare sub gluPerspective(byval fovy as GLdouble, byval aspect as GLdouble, byval zNear as GLdouble, byval zFar as GLdouble)
declare sub gluPickMatrix(byval x as GLdouble, byval y as GLdouble, byval width as GLdouble, byval height as GLdouble, byval viewport as GLint ptr)
declare sub gluLookAt(byval eyex as GLdouble, byval eyey as GLdouble, byval eyez as GLdouble, byval centerx as GLdouble, byval centery as GLdouble, byval centerz as GLdouble, byval upx as GLdouble, byval upy as GLdouble, byval upz as GLdouble)
declare function gluProject(byval objx as GLdouble, byval objy as GLdouble, byval objz as GLdouble, byval modelMatrix as const GLdouble ptr, byval projMatrix as const GLdouble ptr, byval viewport as const GLint ptr, byval winx as GLdouble ptr, byval winy as GLdouble ptr, byval winz as GLdouble ptr) as long
declare function gluUnProject(byval winx as GLdouble, byval winy as GLdouble, byval winz as GLdouble, byval modelMatrix as const GLdouble ptr, byval projMatrix as const GLdouble ptr, byval viewport as const GLint ptr, byval objx as GLdouble ptr, byval objy as GLdouble ptr, byval objz as GLdouble ptr) as long
declare function gluScaleImage(byval format as GLenum, byval widthin as GLint, byval heightin as GLint, byval typein as GLenum, byval datain as const any ptr, byval widthout as GLint, byval heightout as GLint, byval typeout as GLenum, byval dataout as any ptr) as long
declare function gluBuild1DMipmaps(byval target as GLenum, byval components as GLint, byval width as GLint, byval format as GLenum, byval type as GLenum, byval data as const any ptr) as long
declare function gluBuild2DMipmaps(byval target as GLenum, byval components as GLint, byval width as GLint, byval height as GLint, byval format as GLenum, byval type as GLenum, byval data as const any ptr) as long

type GLUnurbs as GLUnurbs_
type GLUnurbsObj as GLUnurbs
type GLUquadric as GLUquadric_
type GLUquadricObj as GLUquadric
type GLUtesselator as GLUtesselator_
type GLUtesselatorObj as GLUtesselator
type GLUtriangulatorObj as GLUtesselator

declare function gluNewQuadric() as GLUquadric ptr
declare sub gluDeleteQuadric(byval state as GLUquadric ptr)
declare sub gluQuadricNormals(byval quadObject as GLUquadric ptr, byval normals as GLenum)
declare sub gluQuadricTexture(byval quadObject as GLUquadric ptr, byval textureCoords as GLboolean)
declare sub gluQuadricOrientation(byval quadObject as GLUquadric ptr, byval orientation as GLenum)
declare sub gluQuadricDrawStyle(byval quadObject as GLUquadric ptr, byval drawStyle as GLenum)
declare sub gluCylinder(byval qobj as GLUquadric ptr, byval baseRadius as GLdouble, byval topRadius as GLdouble, byval height as GLdouble, byval slices as GLint, byval stacks as GLint)
declare sub gluDisk(byval qobj as GLUquadric ptr, byval innerRadius as GLdouble, byval outerRadius as GLdouble, byval slices as GLint, byval loops as GLint)
declare sub gluPartialDisk(byval qobj as GLUquadric ptr, byval innerRadius as GLdouble, byval outerRadius as GLdouble, byval slices as GLint, byval loops as GLint, byval startAngle as GLdouble, byval sweepAngle as GLdouble)
declare sub gluSphere(byval qobj as GLUquadric ptr, byval radius as GLdouble, byval slices as GLint, byval stacks as GLint)
declare sub gluQuadricCallback(byval qobj as GLUquadric ptr, byval which as GLenum, byval fn as sub())
declare function gluNewTess() as GLUtesselator ptr
declare sub gluDeleteTess(byval tess as GLUtesselator ptr)
declare sub gluTessBeginPolygon(byval tess as GLUtesselator ptr, byval polygon_data as any ptr)
declare sub gluTessBeginContour(byval tess as GLUtesselator ptr)
declare sub gluTessVertex(byval tess as GLUtesselator ptr, byval coords as GLdouble ptr, byval data as any ptr)
declare sub gluTessEndContour(byval tess as GLUtesselator ptr)
declare sub gluTessEndPolygon(byval tess as GLUtesselator ptr)
declare sub gluTessProperty(byval tess as GLUtesselator ptr, byval which as GLenum, byval value as GLdouble)
declare sub gluTessNormal(byval tess as GLUtesselator ptr, byval x as GLdouble, byval y as GLdouble, byval z as GLdouble)
declare sub gluTessCallback(byval tess as GLUtesselator ptr, byval which as GLenum, byval fn as sub())
declare sub gluGetTessProperty(byval tess as GLUtesselator ptr, byval which as GLenum, byval value as GLdouble ptr)
declare function gluNewNurbsRenderer() as GLUnurbs ptr
declare sub gluDeleteNurbsRenderer(byval nobj as GLUnurbs ptr)
declare sub gluBeginSurface(byval nobj as GLUnurbs ptr)
declare sub gluBeginCurve(byval nobj as GLUnurbs ptr)
declare sub gluEndCurve(byval nobj as GLUnurbs ptr)
declare sub gluEndSurface(byval nobj as GLUnurbs ptr)
declare sub gluBeginTrim(byval nobj as GLUnurbs ptr)
declare sub gluEndTrim(byval nobj as GLUnurbs ptr)
declare sub gluPwlCurve(byval nobj as GLUnurbs ptr, byval count as GLint, byval array as GLfloat ptr, byval stride as GLint, byval type as GLenum)
declare sub gluNurbsCurve(byval nobj as GLUnurbs ptr, byval nknots as GLint, byval knot as GLfloat ptr, byval stride as GLint, byval ctlarray as GLfloat ptr, byval order as GLint, byval type as GLenum)
declare sub gluNurbsSurface(byval nobj as GLUnurbs ptr, byval sknot_count as GLint, byval sknot as single ptr, byval tknot_count as GLint, byval tknot as GLfloat ptr, byval s_stride as GLint, byval t_stride as GLint, byval ctlarray as GLfloat ptr, byval sorder as GLint, byval torder as GLint, byval type as GLenum)
declare sub gluLoadSamplingMatrices(byval nobj as GLUnurbs ptr, byval modelMatrix as const GLfloat ptr, byval projMatrix as const GLfloat ptr, byval viewport as const GLint ptr)
declare sub gluNurbsProperty(byval nobj as GLUnurbs ptr, byval property as GLenum, byval value as GLfloat)
declare sub gluGetNurbsProperty(byval nobj as GLUnurbs ptr, byval property as GLenum, byval value as GLfloat ptr)
declare sub gluNurbsCallback(byval nobj as GLUnurbs ptr, byval which as GLenum, byval fn as sub())

type GLUquadricErrorProc as sub(byval as GLenum)
type GLUtessBeginProc as sub(byval as GLenum)
type GLUtessEdgeFlagProc as sub(byval as GLboolean)
type GLUtessVertexProc as sub(byval as any ptr)
type GLUtessEndProc as sub()
type GLUtessErrorProc as sub(byval as GLenum)
type GLUtessCombineProc as sub(byval as GLdouble ptr, byval as any ptr ptr, byval as GLfloat ptr, byval as any ptr ptr)
type GLUtessBeginDataProc as sub(byval as GLenum, byval as any ptr)
type GLUtessEdgeFlagDataProc as sub(byval as GLboolean, byval as any ptr)
type GLUtessVertexDataProc as sub(byval as any ptr, byval as any ptr)
type GLUtessEndDataProc as sub(byval as any ptr)
type GLUtessErrorDataProc as sub(byval as GLenum, byval as any ptr)
type GLUtessCombineDataProc as sub(byval as GLdouble ptr, byval as any ptr ptr, byval as GLfloat ptr, byval as any ptr ptr, byval as any ptr)
type GLUnurbsErrorProc as sub(byval as GLenum)

const GLU_VERSION_1_1 = 1
const GLU_VERSION_1_2 = 1
const GLU_INVALID_ENUM = 100900
const GLU_INVALID_VALUE = 100901
const GLU_OUT_OF_MEMORY = 100902
const GLU_INCOMPATIBLE_GL_VERSION = 100903
const GLU_VERSION = 100800
const GLU_EXTENSIONS = 100801
const GLU_TRUE = GL_TRUE
const GLU_FALSE = GL_FALSE
const GLU_SMOOTH = 100000
const GLU_FLAT = 100001
const GLU_NONE = 100002
const GLU_POINT = 100010
const GLU_LINE = 100011
const GLU_FILL = 100012
const GLU_SILHOUETTE = 100013
const GLU_OUTSIDE = 100020
const GLU_INSIDE = 100021
const GLU_TESS_MAX_COORD = 1.0e150
const GLU_TESS_WINDING_RULE = 100140
const GLU_TESS_BOUNDARY_ONLY = 100141
const GLU_TESS_TOLERANCE = 100142
const GLU_TESS_WINDING_ODD = 100130
const GLU_TESS_WINDING_NONZERO = 100131
const GLU_TESS_WINDING_POSITIVE = 100132
const GLU_TESS_WINDING_NEGATIVE = 100133
const GLU_TESS_WINDING_ABS_GEQ_TWO = 100134
const GLU_TESS_BEGIN = 100100
const GLU_TESS_VERTEX = 100101
const GLU_TESS_END = 100102
const GLU_TESS_ERROR = 100103
const GLU_TESS_EDGE_FLAG = 100104
const GLU_TESS_COMBINE = 100105
const GLU_TESS_BEGIN_DATA = 100106
const GLU_TESS_VERTEX_DATA = 100107
const GLU_TESS_END_DATA = 100108
const GLU_TESS_ERROR_DATA = 100109
const GLU_TESS_EDGE_FLAG_DATA = 100110
const GLU_TESS_COMBINE_DATA = 100111
const GLU_TESS_ERROR1 = 100151
const GLU_TESS_ERROR2 = 100152
const GLU_TESS_ERROR3 = 100153
const GLU_TESS_ERROR4 = 100154
const GLU_TESS_ERROR5 = 100155
const GLU_TESS_ERROR6 = 100156
const GLU_TESS_ERROR7 = 100157
const GLU_TESS_ERROR8 = 100158
const GLU_TESS_MISSING_BEGIN_POLYGON = GLU_TESS_ERROR1
const GLU_TESS_MISSING_BEGIN_CONTOUR = GLU_TESS_ERROR2
const GLU_TESS_MISSING_END_POLYGON = GLU_TESS_ERROR3
const GLU_TESS_MISSING_END_CONTOUR = GLU_TESS_ERROR4
const GLU_TESS_COORD_TOO_LARGE = GLU_TESS_ERROR5
const GLU_TESS_NEED_COMBINE_CALLBACK = GLU_TESS_ERROR6
const GLU_AUTO_LOAD_MATRIX = 100200
const GLU_CULLING = 100201
const GLU_SAMPLING_TOLERANCE = 100203
const GLU_DISPLAY_MODE = 100204
const GLU_PARAMETRIC_TOLERANCE = 100202
const GLU_SAMPLING_METHOD = 100205
const GLU_U_STEP = 100206
const GLU_V_STEP = 100207
const GLU_PATH_LENGTH = 100215
const GLU_PARAMETRIC_ERROR = 100216
const GLU_DOMAIN_DISTANCE = 100217
const GLU_MAP1_TRIM_2 = 100210
const GLU_MAP1_TRIM_3 = 100211
const GLU_OUTLINE_POLYGON = 100240
const GLU_OUTLINE_PATCH = 100241
const GLU_NURBS_ERROR1 = 100251
const GLU_NURBS_ERROR2 = 100252
const GLU_NURBS_ERROR3 = 100253
const GLU_NURBS_ERROR4 = 100254
const GLU_NURBS_ERROR5 = 100255
const GLU_NURBS_ERROR6 = 100256
const GLU_NURBS_ERROR7 = 100257
const GLU_NURBS_ERROR8 = 100258
const GLU_NURBS_ERROR9 = 100259
const GLU_NURBS_ERROR10 = 100260
const GLU_NURBS_ERROR11 = 100261
const GLU_NURBS_ERROR12 = 100262
const GLU_NURBS_ERROR13 = 100263
const GLU_NURBS_ERROR14 = 100264
const GLU_NURBS_ERROR15 = 100265
const GLU_NURBS_ERROR16 = 100266
const GLU_NURBS_ERROR17 = 100267
const GLU_NURBS_ERROR18 = 100268
const GLU_NURBS_ERROR19 = 100269
const GLU_NURBS_ERROR20 = 100270
const GLU_NURBS_ERROR21 = 100271
const GLU_NURBS_ERROR22 = 100272
const GLU_NURBS_ERROR23 = 100273
const GLU_NURBS_ERROR24 = 100274
const GLU_NURBS_ERROR25 = 100275
const GLU_NURBS_ERROR26 = 100276
const GLU_NURBS_ERROR27 = 100277
const GLU_NURBS_ERROR28 = 100278
const GLU_NURBS_ERROR29 = 100279
const GLU_NURBS_ERROR30 = 100280
const GLU_NURBS_ERROR31 = 100281
const GLU_NURBS_ERROR32 = 100282
const GLU_NURBS_ERROR33 = 100283
const GLU_NURBS_ERROR34 = 100284
const GLU_NURBS_ERROR35 = 100285
const GLU_NURBS_ERROR36 = 100286
const GLU_NURBS_ERROR37 = 100287

declare sub gluBeginPolygon(byval tess as GLUtesselator ptr)
declare sub gluNextContour(byval tess as GLUtesselator ptr, byval type as GLenum)
declare sub gluEndPolygon(byval tess as GLUtesselator ptr)

const GLU_CW = 100120
const GLU_CCW = 100121
const GLU_INTERIOR = 100122
const GLU_EXTERIOR = 100123
const GLU_UNKNOWN = 100124
const GLU_BEGIN = GLU_TESS_BEGIN
const GLU_VERTEX = GLU_TESS_VERTEX
const GLU_END = GLU_TESS_END
const GLU_ERROR = GLU_TESS_ERROR
const GLU_EDGE_FLAG = GLU_TESS_EDGE_FLAG

end extern


#inclib "glut32"


 extern "Windows"


#inclib "winmm"
#inclib "opengl32"
#inclib "glu32"
#inclib "glut32"

const GLUT_API_VERSION = 3
const GLUT_XLIB_IMPLEMENTATION = 13
const GLUT_RGB = 0
const GLUT_RGBA = GLUT_RGB
const GLUT_INDEX = 1
const GLUT_SINGLE = 0
const GLUT_DOUBLE = 2
const GLUT_ACCUM = 4
const GLUT_ALPHA = 8
const GLUT_DEPTH = 16
const GLUT_STENCIL = 32
const GLUT_MULTISAMPLE = 128
const GLUT_STEREO = 256
const GLUT_LUMINANCE = 512
const GLUT_LEFT_BUTTON = 0
const GLUT_MIDDLE_BUTTON = 1
const GLUT_RIGHT_BUTTON = 2
const GLUT_DOWN = 0
const GLUT_UP = 1
const GLUT_KEY_F1 = 1
const GLUT_KEY_F2 = 2
const GLUT_KEY_F3 = 3
const GLUT_KEY_F4 = 4
const GLUT_KEY_F5 = 5
const GLUT_KEY_F6 = 6
const GLUT_KEY_F7 = 7
const GLUT_KEY_F8 = 8
const GLUT_KEY_F9 = 9
const GLUT_KEY_F10 = 10
const GLUT_KEY_F11 = 11
const GLUT_KEY_F12 = 12
const GLUT_KEY_LEFT = 100
const GLUT_KEY_UP = 101
const GLUT_KEY_RIGHT = 102
const GLUT_KEY_DOWN = 103
const GLUT_KEY_PAGE_UP = 104
const GLUT_KEY_PAGE_DOWN = 105
const GLUT_KEY_HOME = 106
const GLUT_KEY_END = 107
const GLUT_KEY_INSERT = 108
const GLUT_LEFT = 0
const GLUT_ENTERED = 1
const GLUT_MENU_NOT_IN_USE = 0
const GLUT_MENU_IN_USE = 1
const GLUT_NOT_VISIBLE = 0
const GLUT_VISIBLE = 1
const GLUT_HIDDEN = 0
const GLUT_FULLY_RETAINED = 1
const GLUT_PARTIALLY_RETAINED = 2
const GLUT_FULLY_COVERED = 3
const GLUT_RED = 0
const GLUT_GREEN = 1
const GLUT_BLUE = 2
const GLUT_NORMAL = 0
const GLUT_OVERLAY = 1

 const GLUT_STROKE_ROMAN = cptr(any ptr, 0)
 const GLUT_STROKE_MONO_ROMAN = cptr(any ptr, 1)
 const GLUT_BITMAP_9_BY_15 = cptr(any ptr, 2)
 const GLUT_BITMAP_8_BY_13 = cptr(any ptr, 3)
 const GLUT_BITMAP_TIMES_ROMAN_10 = cptr(any ptr, 4)
 const GLUT_BITMAP_TIMES_ROMAN_24 = cptr(any ptr, 5)
 const GLUT_BITMAP_HELVETICA_10 = cptr(any ptr, 6)
 const GLUT_BITMAP_HELVETICA_12 = cptr(any ptr, 7)
 const GLUT_BITMAP_HELVETICA_18 = cptr(any ptr, 8)

const GLUT_WINDOW_X = 100
const GLUT_WINDOW_Y = 101
const GLUT_WINDOW_WIDTH = 102
const GLUT_WINDOW_HEIGHT = 103
const GLUT_WINDOW_BUFFER_SIZE = 104
const GLUT_WINDOW_STENCIL_SIZE = 105
const GLUT_WINDOW_DEPTH_SIZE = 106
const GLUT_WINDOW_RED_SIZE = 107
const GLUT_WINDOW_GREEN_SIZE = 108
const GLUT_WINDOW_BLUE_SIZE = 109
const GLUT_WINDOW_ALPHA_SIZE = 110
const GLUT_WINDOW_ACCUM_RED_SIZE = 111
const GLUT_WINDOW_ACCUM_GREEN_SIZE = 112
const GLUT_WINDOW_ACCUM_BLUE_SIZE = 113
const GLUT_WINDOW_ACCUM_ALPHA_SIZE = 114
const GLUT_WINDOW_DOUBLEBUFFER = 115
const GLUT_WINDOW_RGBA = 116
const GLUT_WINDOW_PARENT = 117
const GLUT_WINDOW_NUM_CHILDREN = 118
const GLUT_WINDOW_COLORMAP_SIZE = 119
const GLUT_WINDOW_NUM_SAMPLES = 120
const GLUT_WINDOW_STEREO = 121
const GLUT_WINDOW_CURSOR = 122
const GLUT_SCREEN_WIDTH = 200
const GLUT_SCREEN_HEIGHT = 201
const GLUT_SCREEN_WIDTH_MM = 202
const GLUT_SCREEN_HEIGHT_MM = 203
const GLUT_MENU_NUM_ITEMS = 300
const GLUT_DISPLAY_MODE_POSSIBLE = 400
const GLUT_INIT_WINDOW_X = 500
const GLUT_INIT_WINDOW_Y = 501
const GLUT_INIT_WINDOW_WIDTH = 502
const GLUT_INIT_WINDOW_HEIGHT = 503
const GLUT_INIT_DISPLAY_MODE = 504
const GLUT_ELAPSED_TIME = 700
const GLUT_WINDOW_FORMAT_ID = 123
const GLUT_HAS_KEYBOARD = 600
const GLUT_HAS_MOUSE = 601
const GLUT_HAS_SPACEBALL = 602
const GLUT_HAS_DIAL_AND_BUTTON_BOX = 603
const GLUT_HAS_TABLET = 604
const GLUT_NUM_MOUSE_BUTTONS = 605
const GLUT_NUM_SPACEBALL_BUTTONS = 606
const GLUT_NUM_BUTTON_BOX_BUTTONS = 607
const GLUT_NUM_DIALS = 608
const GLUT_NUM_TABLET_BUTTONS = 609
const GLUT_DEVICE_IGNORE_KEY_REPEAT = 610
const GLUT_DEVICE_KEY_REPEAT = 611
const GLUT_HAS_JOYSTICK = 612
const GLUT_OWNS_JOYSTICK = 613
const GLUT_JOYSTICK_BUTTONS = 614
const GLUT_JOYSTICK_AXES = 615
const GLUT_JOYSTICK_POLL_RATE = 616
const GLUT_OVERLAY_POSSIBLE = 800
const GLUT_LAYER_IN_USE = 801
const GLUT_HAS_OVERLAY = 802
const GLUT_TRANSPARENT_INDEX = 803
const GLUT_NORMAL_DAMAGED = 804
const GLUT_OVERLAY_DAMAGED = 805
const GLUT_VIDEO_RESIZE_POSSIBLE = 900
const GLUT_VIDEO_RESIZE_IN_USE = 901
const GLUT_VIDEO_RESIZE_X_DELTA = 902
const GLUT_VIDEO_RESIZE_Y_DELTA = 903
const GLUT_VIDEO_RESIZE_WIDTH_DELTA = 904
const GLUT_VIDEO_RESIZE_HEIGHT_DELTA = 905
const GLUT_VIDEO_RESIZE_X = 906
const GLUT_VIDEO_RESIZE_Y = 907
const GLUT_VIDEO_RESIZE_WIDTH = 908
const GLUT_VIDEO_RESIZE_HEIGHT = 909
const GLUT_NORMAL = 0
const GLUT_OVERLAY = 1
const GLUT_ACTIVE_SHIFT = 1
const GLUT_ACTIVE_CTRL = 2
const GLUT_ACTIVE_ALT = 4
const GLUT_CURSOR_RIGHT_ARROW = 0
const GLUT_CURSOR_LEFT_ARROW = 1
const GLUT_CURSOR_INFO = 2
const GLUT_CURSOR_DESTROY = 3
const GLUT_CURSOR_HELP = 4
const GLUT_CURSOR_CYCLE = 5
const GLUT_CURSOR_SPRAY = 6
const GLUT_CURSOR_WAIT = 7
const GLUT_CURSOR_TEXT = 8
const GLUT_CURSOR_CROSSHAIR = 9
const GLUT_CURSOR_UP_DOWN = 10
const GLUT_CURSOR_LEFT_RIGHT = 11
const GLUT_CURSOR_TOP_SIDE = 12
const GLUT_CURSOR_BOTTOM_SIDE = 13
const GLUT_CURSOR_LEFT_SIDE = 14
const GLUT_CURSOR_RIGHT_SIDE = 15
const GLUT_CURSOR_TOP_LEFT_CORNER = 16
const GLUT_CURSOR_TOP_RIGHT_CORNER = 17
const GLUT_CURSOR_BOTTOM_RIGHT_CORNER = 18
const GLUT_CURSOR_BOTTOM_LEFT_CORNER = 19
const GLUT_CURSOR_INHERIT = 100
const GLUT_CURSOR_NONE = 101
const GLUT_CURSOR_FULL_CROSSHAIR = 102

declare sub glutInit(byref argcp as long, byref argv as zstring ptr)
declare sub glutInitDisplayMode(byval mode as ulong)
declare sub glutInitDisplayString(byval string as const zstring ptr)
declare sub glutInitWindowPosition(byval x as long, byval y as long)
declare sub glutInitWindowSize(byval width as long, byval height as long)
declare sub glutMainLoop()
declare function glutCreateWindow(byval title as const zstring ptr) as long
declare function glutCreateSubWindow(byval win as long, byval x as long, byval y as long, byval width as long, byval height as long) as long
declare sub glutDestroyWindow(byval win as long)
declare sub glutPostRedisplay()
declare sub glutPostWindowRedisplay(byval win as long)
declare sub glutSwapBuffers()
declare function glutGetWindow() as long
declare sub glutSetWindow(byval win as long)
declare sub glutSetWindowTitle(byval title as const zstring ptr)
declare sub glutSetIconTitle(byval title as const zstring ptr)
declare sub glutPositionWindow(byval x as long, byval y as long)
declare sub glutReshapeWindow(byval width as long, byval height as long)
declare sub glutPopWindow()
declare sub glutPushWindow()
declare sub glutIconifyWindow()
declare sub glutShowWindow()
declare sub glutHideWindow()
declare sub glutFullScreen()
declare sub glutSetCursor(byval cursor as long)
declare sub glutWarpPointer(byval x as long, byval y as long)
declare sub glutEstablishOverlay()
declare sub glutRemoveOverlay()
declare sub glutUseLayer(byval layer as GLenum)
declare sub glutPostOverlayRedisplay()
declare sub glutPostWindowOverlayRedisplay(byval win as long)
declare sub glutShowOverlay()
declare sub glutHideOverlay()
declare function glutCreateMenu(byval as sub cdecl(byval as long)) as long
declare sub glutDestroyMenu(byval menu as long)
declare function glutGetMenu() as long
declare sub glutSetMenu(byval menu as long)
declare sub glutAddMenuEntry(byval label as const zstring ptr, byval value as long)
declare sub glutAddSubMenu(byval label as const zstring ptr, byval submenu as long)
declare sub glutChangeToMenuEntry(byval item as long, byval label as const zstring ptr, byval value as long)
declare sub glutChangeToSubMenu(byval item as long, byval label as const zstring ptr, byval submenu as long)
declare sub glutRemoveMenuItem(byval item as long)
declare sub glutAttachMenu(byval button as long)
declare sub glutDetachMenu(byval button as long)
declare sub glutDisplayFunc(byval func as sub cdecl())
declare sub glutReshapeFunc(byval func as sub cdecl(byval width as long, byval height as long))
declare sub glutKeyboardFunc(byval func as sub cdecl(byval key as ubyte, byval x as long, byval y as long))
declare sub glutMouseFunc(byval func as sub cdecl(byval button as long, byval state as long, byval x as long, byval y as long))
declare sub glutMotionFunc(byval func as sub cdecl(byval x as long, byval y as long))
declare sub glutPassiveMotionFunc(byval func as sub cdecl(byval x as long, byval y as long))
declare sub glutEntryFunc(byval func as sub cdecl(byval state as long))
declare sub glutVisibilityFunc(byval func as sub cdecl(byval state as long))
declare sub glutIdleFunc(byval func as sub cdecl())
declare sub glutTimerFunc(byval millis as ulong, byval func as sub cdecl(byval value as long), byval value as long)
declare sub glutMenuStateFunc(byval func as sub cdecl(byval state as long))
declare sub glutSpecialFunc(byval func as sub cdecl(byval key as long, byval x as long, byval y as long))
declare sub glutSpaceballMotionFunc(byval func as sub cdecl(byval x as long, byval y as long, byval z as long))
declare sub glutSpaceballRotateFunc(byval func as sub cdecl(byval x as long, byval y as long, byval z as long))
declare sub glutSpaceballButtonFunc(byval func as sub cdecl(byval button as long, byval state as long))
declare sub glutButtonBoxFunc(byval func as sub cdecl(byval button as long, byval state as long))
declare sub glutDialsFunc(byval func as sub cdecl(byval dial as long, byval value as long))
declare sub glutTabletMotionFunc(byval func as sub cdecl(byval x as long, byval y as long))
declare sub glutTabletButtonFunc(byval func as sub cdecl(byval button as long, byval state as long, byval x as long, byval y as long))
declare sub glutMenuStatusFunc(byval func as sub cdecl(byval status as long, byval x as long, byval y as long))
declare sub glutOverlayDisplayFunc(byval func as sub cdecl())
declare sub glutWindowStatusFunc(byval func as sub cdecl(byval state as long))
declare sub glutKeyboardUpFunc(byval func as sub cdecl(byval key as ubyte, byval x as long, byval y as long))
declare sub glutSpecialUpFunc(byval func as sub cdecl(byval key as long, byval x as long, byval y as long))
declare sub glutJoystickFunc(byval func as sub cdecl(byval buttonMask as ulong, byval x as long, byval y as long, byval z as long), byval pollInterval as long)
declare sub glutSetColor(byval as long, byval red as GLfloat, byval green as GLfloat, byval blue as GLfloat)
declare function glutGetColor(byval ndx as long, byval component as long) as GLfloat
declare sub glutCopyColormap(byval win as long)
declare function glutGet(byval type as GLenum) as long
declare function glutDeviceGet(byval type as GLenum) as long
declare function glutExtensionSupported(byval name as const zstring ptr) as long
declare function glutGetModifiers() as long
declare function glutLayerGet(byval type as GLenum) as long
declare sub glutBitmapCharacter(byval font as any ptr, byval character as long)
declare function glutBitmapWidth(byval font as any ptr, byval character as long) as long
declare sub glutStrokeCharacter(byval font as any ptr, byval character as long)
declare function glutStrokeWidth(byval font as any ptr, byval character as long) as long
declare function glutBitmapLength(byval font as any ptr, byval string as const ubyte ptr) as long
declare function glutStrokeLength(byval font as any ptr, byval string as const ubyte ptr) as long
declare sub glutWireSphere(byval radius as GLdouble, byval slices as GLint, byval stacks as GLint)
declare sub glutSolidSphere(byval radius as GLdouble, byval slices as GLint, byval stacks as GLint)
declare sub glutWireCone(byval base as GLdouble, byval height as GLdouble, byval slices as GLint, byval stacks as GLint)
declare sub glutSolidCone(byval base as GLdouble, byval height as GLdouble, byval slices as GLint, byval stacks as GLint)
declare sub glutWireCube(byval size as GLdouble)
declare sub glutSolidCube(byval size as GLdouble)
declare sub glutWireTorus(byval innerRadius as GLdouble, byval outerRadius as GLdouble, byval sides as GLint, byval rings as GLint)
declare sub glutSolidTorus(byval innerRadius as GLdouble, byval outerRadius as GLdouble, byval sides as GLint, byval rings as GLint)
declare sub glutWireDodecahedron()
declare sub glutSolidDodecahedron()
declare sub glutWireTeapot(byval size as GLdouble)
declare sub glutSolidTeapot(byval size as GLdouble)
declare sub glutWireOctahedron()
declare sub glutSolidOctahedron()
declare sub glutWireTetrahedron()
declare sub glutSolidTetrahedron()
declare sub glutWireIcosahedron()
declare sub glutSolidIcosahedron()
declare function glutVideoResizeGet(byval param as GLenum) as long
declare sub glutSetupVideoResizing()
declare sub glutStopVideoResizing()
declare sub glutVideoResize(byval x as long, byval y as long, byval width as long, byval height as long)
declare sub glutVideoPan(byval x as long, byval y as long, byval width as long, byval height as long)
declare sub glutReportErrors()

const GLUT_KEY_REPEAT_OFF = 0
const GLUT_KEY_REPEAT_ON = 1
const GLUT_KEY_REPEAT_DEFAULT = 2
const GLUT_JOYSTICK_BUTTON_A = 1
const GLUT_JOYSTICK_BUTTON_B = 2
const GLUT_JOYSTICK_BUTTON_C = 4
const GLUT_JOYSTICK_BUTTON_D = 8

declare sub glutIgnoreKeyRepeat(byval ignore as long)
declare sub glutSetKeyRepeat(byval repeatMode as long)
declare sub glutForceJoystickFunc()

const GLUT_GAME_MODE_ACTIVE = 0
const GLUT_GAME_MODE_POSSIBLE = 1
const GLUT_GAME_MODE_WIDTH = 2
const GLUT_GAME_MODE_HEIGHT = 3
const GLUT_GAME_MODE_PIXEL_DEPTH = 4
const GLUT_GAME_MODE_REFRESH_RATE = 5
const GLUT_GAME_MODE_DISPLAY_CHANGED = 6

declare sub glutGameModeString(byval string as const zstring ptr)
declare function glutEnterGameMode() as long
declare sub glutLeaveGameMode()
declare function glutGameModeGet(byval mode as GLenum) as long

end extern


#inclib "fbgfx?"

#inclib "gdi32"
#inclib "winmm"
#inclib "user32"


namespace FB

 const as long GFX_NULL = -1 , GFX_WINDOWED = &h000000000, GFX_FULLSCREEN = &h00000001, GFX_OPENGL = &h00000002, GFX_NO_SWITCH = &h00000004, GFX_NO_FRAME = &h00000008, GFX_SHAPED_WINDOW = &h00000010, GFX_ALWAYS_ON_TOP = &h00000020, GFX_ALPHA_PRIMITIVES = &h00000040, GFX_HIGH_PRIORITY = &h00000080, GFX_SCREEN_EXIT = &h80000000

 const as long GFX_STENCIL_BUFFER = &h00010000, GFX_ACCUMULATION_BUFFER = &h00020000, GFX_MULTISAMPLE = &h00040000

 const as integer OGL_2D_NONE = 0, OGL_2D_MANUAL_SYNC = 1, OGL_2D_AUTO_SYNC = 2

 const as integer GET_WINDOW_POS = 0, GET_WINDOW_TITLE = 1, GET_WINDOW_HANDLE = 2, GET_DESKTOP_SIZE = 3, GET_SCREEN_SIZE = 4, GET_SCREEN_DEPTH = 5, GET_SCREEN_BPP = 6, GET_SCREEN_PITCH = 7, GET_SCREEN_REFRESH = 8, GET_DRIVER_NAME = 9, GET_TRANSPARENT_COLOR = 10, GET_VIEWPORT = 11, GET_PEN_POS = 12, GET_COLOR = 13, GET_ALPHA_PRIMITIVES = 14, GET_GL_EXTENSIONS = 15, GET_HIGH_PRIORITY = 16, GET_SCANLINE_SIZE = 17, GET_GL_COLOR_BITS = 37, GET_GL_COLOR_RED_BITS = 38, GET_GL_COLOR_GREEN_BITS = 39, GET_GL_COLOR_BLUE_BITS = 40, GET_GL_COLOR_ALPHA_BITS = 41, GET_GL_DEPTH_BITS = 42, GET_GL_STENCIL_BITS = 43, GET_GL_ACCUM_BITS = 44, GET_GL_ACCUM_RED_BITS = 45, GET_GL_ACCUM_GREEN_BITS = 46, GET_GL_ACCUM_BLUE_BITS = 47, GET_GL_ACCUM_ALPHA_BITS = 48, GET_GL_NUM_SAMPLES = 49, GET_GL_2D_MODE = 82, GET_GL_SCALE = 83

 const as integer SET_WINDOW_POS = 100, SET_WINDOW_TITLE = 101, SET_PEN_POS = 102, SET_DRIVER_NAME = 103, SET_ALPHA_PRIMITIVES = 104, SET_GL_COLOR_BITS = 105, SET_GL_COLOR_RED_BITS = 106, SET_GL_COLOR_GREEN_BITS = 107, SET_GL_COLOR_BLUE_BITS = 108, SET_GL_COLOR_ALPHA_BITS = 109, SET_GL_DEPTH_BITS = 110, SET_GL_STENCIL_BITS = 111, SET_GL_ACCUM_BITS = 112, SET_GL_ACCUM_RED_BITS = 113, SET_GL_ACCUM_GREEN_BITS = 114, SET_GL_ACCUM_BLUE_BITS = 115, SET_GL_ACCUM_ALPHA_BITS = 116, SET_GL_NUM_SAMPLES = 117, SET_GL_2D_MODE = 150, SET_GL_SCALE = 151

 const as integer POLL_EVENTS = 200


 const as ulong MASK_COLOR_INDEX = 0, MASK_COLOR = &hFF00FF


 const as integer EVENT_KEY_PRESS = 1, EVENT_KEY_RELEASE = 2, EVENT_KEY_REPEAT = 3, EVENT_MOUSE_MOVE = 4, EVENT_MOUSE_BUTTON_PRESS = 5, EVENT_MOUSE_BUTTON_RELEASE = 6, EVENT_MOUSE_DOUBLE_CLICK = 7, EVENT_MOUSE_WHEEL = 8, EVENT_MOUSE_ENTER = 9, EVENT_MOUSE_EXIT = 10, EVENT_WINDOW_GOT_FOCUS = 11, EVENT_WINDOW_LOST_FOCUS = 12, EVENT_WINDOW_CLOSE = 13, EVENT_MOUSE_HWHEEL = 14


 type EVENT field = 1
 type as long
 union
 type
 scancode as long
 ascii as long
 end type
 type
 x as long
 y as long
 dx as long
 dy as long
 end type
 button as long
 z as long
 w as long
 end union
 end type

 type _OLD_HEADER field = 1
 bpp : 3 as ushort
 width : 13 as ushort
 height as ushort
 end type

 type IMAGE field = 1
 union
 old as _OLD_HEADER
 type as ulong
 end union

 bpp as long

 width as ulong
 height as ulong
 pitch as ulong
 _reserved(1 to 12) as ubyte
 end type

 private function __pixels( byval anImage as Image ptr ) as ubyte ptr
 return( cast( ubyte ptr, anImage ) + sizeOf( Image ) )
 end function

 type PUT_HEADER as IMAGE


 const as integer PUT_HEADER_NEW = &h7


 const as integer BUTTON_LEFT = &h01, BUTTON_RIGHT = &h02, BUTTON_MIDDLE = &h04, BUTTON_X1 = &h08, BUTTON_X2 = &h10


 enum
 SC_ESCAPE = &h01
 SC_1
 SC_2
 SC_3
 SC_4
 SC_5
 SC_6
 SC_7
 SC_8
 SC_9
 SC_0
 SC_MINUS
 SC_EQUALS
 SC_BACKSPACE
 SC_TAB
 SC_Q
 SC_W
 SC_E
 SC_R
 SC_T
 SC_Y
 SC_U
 SC_I
 SC_O
 SC_P
 SC_LEFTBRACKET
 SC_RIGHTBRACKET
 SC_ENTER
 SC_CONTROL
 SC_A
 SC_S
 SC_D
 SC_F
 SC_G
 SC_H
 SC_J
 SC_K
 SC_L
 SC_SEMICOLON
 SC_QUOTE
 SC_TILDE
 SC_LSHIFT
 SC_BACKSLASH
 SC_Z
 SC_X
 SC_C
 SC_V
 SC_B
 SC_N
 SC_M
 SC_COMMA
 SC_PERIOD
 SC_SLASH
 SC_RSHIFT
 SC_MULTIPLY
 SC_ALT
 SC_SPACE
 SC_CAPSLOCK
 SC_F1
 SC_F2
 SC_F3
 SC_F4
 SC_F5
 SC_F6
 SC_F7
 SC_F8
 SC_F9
 SC_F10
 SC_NUMLOCK
 SC_SCROLLLOCK
 SC_HOME
 SC_UP
 SC_PAGEUP
 SC_LEFT = &h4B
 SC_CLEAR = &h4C
 SC_CENTER = &h4C
 SC_RIGHT
 SC_PLUS
 SC_END
 SC_DOWN
 SC_PAGEDOWN
 SC_INSERT
 SC_DELETE
 SC_F11 = &h57
 SC_F12
 SC_LWIN = &h5B
 SC_RWIN
 SC_MENU
 SC_ALTGR = &h64
 end enum

end namespace




#inclib "winmm"


extern "Windows"

const MAXPNAMELEN = 32
const MAXERRORLENGTH = 256
const MAX_JOYSTICKOEMVXDNAME = 260
type MMVERSION as UINT
type MMRESULT as UINT
type LPUINT as UINT ptr

type mmtime_tag_u_smpte field = 1
 hour as UBYTE
 min as UBYTE
 sec as UBYTE
 frame as UBYTE
 fps as UBYTE
 dummy as UBYTE
 pad(0 to 1) as UBYTE
end type

type mmtime_tag_u_midi field = 1
 songptrpos as DWORD
end type

union mmtime_tag_u field = 1
 ms as DWORD
 sample as DWORD
 cb as DWORD
 ticks as DWORD
 smpte as mmtime_tag_u_smpte
 midi as mmtime_tag_u_midi
end union

type mmtime_tag field = 1
 wType as UINT
 u as mmtime_tag_u
end type

type MMTIME as mmtime_tag
type PMMTIME as mmtime_tag ptr
type NPMMTIME as mmtime_tag ptr
type LPMMTIME as mmtime_tag ptr

const TIME_MS = &h0001
const TIME_SAMPLES = &h0002
const TIME_BYTES = &h0004
const TIME_SMPTE = &h0008
const TIME_MIDI = &h0010
const TIME_TICKS = &h0020
const MM_JOY1MOVE = &h3A0
const MM_JOY2MOVE = &h3A1
const MM_JOY1ZMOVE = &h3A2
const MM_JOY2ZMOVE = &h3A3
const MM_JOY1BUTTONDOWN = &h3B5
const MM_JOY2BUTTONDOWN = &h3B6
const MM_JOY1BUTTONUP = &h3B7
const MM_JOY2BUTTONUP = &h3B8
const MM_MCINOTIFY = &h3B9
const MM_WOM_OPEN = &h3BB
const MM_WOM_CLOSE = &h3BC
const MM_WOM_DONE = &h3BD
const MM_WIM_OPEN = &h3BE
const MM_WIM_CLOSE = &h3BF
const MM_WIM_DATA = &h3C0
const MM_MIM_OPEN = &h3C1
const MM_MIM_CLOSE = &h3C2
const MM_MIM_DATA = &h3C3
const MM_MIM_LONGDATA = &h3C4
const MM_MIM_ERROR = &h3C5
const MM_MIM_LONGERROR = &h3C6
const MM_MOM_OPEN = &h3C7
const MM_MOM_CLOSE = &h3C8
const MM_MOM_DONE = &h3C9
const MM_DRVM_OPEN = &h3D0
const MM_DRVM_CLOSE = &h3D1
const MM_DRVM_DATA = &h3D2
const MM_DRVM_ERROR = &h3D3
const MM_STREAM_OPEN = &h3D4
const MM_STREAM_CLOSE = &h3D5
const MM_STREAM_DONE = &h3D6
const MM_STREAM_ERROR = &h3D7
const MM_MOM_POSITIONCB = &h3CA
const MM_MCISIGNAL = &h3CB
const MM_MIM_MOREDATA = &h3CC
const MM_MIXM_LINE_CHANGE = &h3D0
const MM_MIXM_CONTROL_CHANGE = &h3D1
const MMSYSERR_BASE = 0
const WAVERR_BASE = 32
const MIDIERR_BASE = 64
const TIMERR_BASE = 96
const JOYERR_BASE = 160
const MCIERR_BASE = 256
const MIXERR_BASE = 1024
const MCI_STRING_OFFSET = 512
const MCI_VD_OFFSET = 1024
const MCI_CD_OFFSET = 1088
const MCI_WAVE_OFFSET = 1152
const MCI_SEQ_OFFSET = 1216
const MMSYSERR_NOERROR = 0
const MMSYSERR_ERROR = MMSYSERR_BASE + 1
const MMSYSERR_BADDEVICEID = MMSYSERR_BASE + 2
const MMSYSERR_NOTENABLED = MMSYSERR_BASE + 3
const MMSYSERR_ALLOCATED = MMSYSERR_BASE + 4
const MMSYSERR_INVALHANDLE = MMSYSERR_BASE + 5
const MMSYSERR_NODRIVER = MMSYSERR_BASE + 6
const MMSYSERR_NOMEM = MMSYSERR_BASE + 7
const MMSYSERR_NOTSUPPORTED = MMSYSERR_BASE + 8
const MMSYSERR_BADERRNUM = MMSYSERR_BASE + 9
const MMSYSERR_INVALFLAG = MMSYSERR_BASE + 10
const MMSYSERR_INVALPARAM = MMSYSERR_BASE + 11
const MMSYSERR_HANDLEBUSY = MMSYSERR_BASE + 12
const MMSYSERR_INVALIDALIAS = MMSYSERR_BASE + 13
const MMSYSERR_BADDB = MMSYSERR_BASE + 14
const MMSYSERR_KEYNOTFOUND = MMSYSERR_BASE + 15
const MMSYSERR_READERROR = MMSYSERR_BASE + 16
const MMSYSERR_WRITEERROR = MMSYSERR_BASE + 17
const MMSYSERR_DELETEERROR = MMSYSERR_BASE + 18
const MMSYSERR_VALNOTFOUND = MMSYSERR_BASE + 19
const MMSYSERR_NODRIVERCB = MMSYSERR_BASE + 20
const MMSYSERR_MOREDATA = MMSYSERR_BASE + 21
const MMSYSERR_LASTERROR = MMSYSERR_BASE + 21

type HDRVR__ field = 1
 unused as long
end type

type HDRVR as HDRVR__ ptr

type DRVCONFIGINFOEX field = 1
 dwDCISize as DWORD
 lpszDCISectionName as LPCWSTR
 lpszDCIAliasName as LPCWSTR
 dnDevNode as DWORD
end type

type PDRVCONFIGINFOEX as DRVCONFIGINFOEX ptr
type NPDRVCONFIGINFOEX as DRVCONFIGINFOEX ptr
type LPDRVCONFIGINFOEX as DRVCONFIGINFOEX ptr

const DRV_LOAD = &h0001
const DRV_ENABLE = &h0002
const DRV_OPEN = &h0003
const DRV_CLOSE = &h0004
const DRV_DISABLE = &h0005
const DRV_FREE = &h0006
const DRV_CONFIGURE = &h0007
const DRV_QUERYCONFIGURE = &h0008
const DRV_INSTALL = &h0009
const DRV_REMOVE = &h000A
const DRV_EXITSESSION = &h000B
const DRV_POWER = &h000F
const DRV_RESERVED = &h0800
const DRV_USER = &h4000

type tagDRVCONFIGINFO field = 1
 dwDCISize as DWORD
 lpszDCISectionName as LPCWSTR
 lpszDCIAliasName as LPCWSTR
end type

type DRVCONFIGINFO as tagDRVCONFIGINFO
type PDRVCONFIGINFO as tagDRVCONFIGINFO ptr
type NPDRVCONFIGINFO as tagDRVCONFIGINFO ptr
type LPDRVCONFIGINFO as tagDRVCONFIGINFO ptr

const DRVCNF_CANCEL = &h00000
const DRVCNF_OK = &h0001
const DRVCNF_RESTART = &h0002
type DRIVERPROC as function(byval as DWORD_PTR, byval as HDRVR, byval as UINT, byval as LPARAM, byval as LPARAM) as LRESULT

declare function CloseDriver(byval hDriver as HDRVR, byval lParam1 as LPARAM, byval lParam2 as LPARAM) as LRESULT
declare function OpenDriver(byval szDriverName as LPCWSTR, byval szSectionName as LPCWSTR, byval lParam2 as LPARAM) as HDRVR
declare function SendDriverMessage(byval hDriver as HDRVR, byval message as UINT, byval lParam1 as LPARAM, byval lParam2 as LPARAM) as LRESULT
declare function DrvGetModuleHandle(byval hDriver as HDRVR) as HMODULE
declare function GetDriverModuleHandle(byval hDriver as HDRVR) as HMODULE
declare function DefDriverProc(byval dwDriverIdentifier as DWORD_PTR, byval hdrvr as HDRVR, byval uMsg as UINT, byval lParam1 as LPARAM, byval lParam2 as LPARAM) as LRESULT

const DRV_CANCEL = DRVCNF_CANCEL
const DRV_OK = DRVCNF_OK
const DRV_RESTART = DRVCNF_RESTART
const DRV_MCI_FIRST = DRV_RESERVED
const DRV_MCI_LAST = DRV_RESERVED + &hFFF
const CALLBACK_TYPEMASK = &h00070000
const CALLBACK_NULL = &h000000000
const CALLBACK_WINDOW = &h00010000
const CALLBACK_TASK = &h00020000
const CALLBACK_FUNCTION = &h00030000
const CALLBACK_THREAD = CALLBACK_TASK
const CALLBACK_EVENT = &h00050000
type LPDRVCALLBACK as sub(byval hdrvr as HDRVR, byval uMsg as UINT, byval dwUser as DWORD_PTR, byval dw1 as DWORD_PTR, byval dw2 as DWORD_PTR)
type PDRVCALLBACK as sub(byval hdrvr as HDRVR, byval uMsg as UINT, byval dwUser as DWORD_PTR, byval dw1 as DWORD_PTR, byval dw2 as DWORD_PTR)

 declare sub OutputDebugStr alias "OutputDebugStringA"(byval lpOutputString as LPCSTR)

declare function sndPlaySoundA(byval pszSound as LPCSTR, byval fuSound as UINT) as WINBOOL
declare function sndPlaySoundW(byval pszSound as LPCWSTR, byval fuSound as UINT) as WINBOOL

 declare function sndPlaySound alias "sndPlaySoundA"(byval pszSound as LPCSTR, byval fuSound as UINT) as WINBOOL

const SND_SYNC = &h00000
const SND_ASYNC = &h0001
const SND_NODEFAULT = &h0002
const SND_MEMORY = &h0004
const SND_LOOP = &h0008
const SND_NOSTOP = &h0010
const SND_NOWAIT = &h00002000
const SND_ALIAS = &h00010000
const SND_ALIAS_ID = &h00110000
const SND_FILENAME = &h00020000
const SND_RESOURCE = &h00040004
const SND_PURGE = &h0040
const SND_APPLICATION = &h0080
const SND_ALIAS_START = 0
declare function PlaySoundA(byval pszSound as LPCSTR, byval hmod as HMODULE, byval fdwSound as DWORD) as WINBOOL
declare function PlaySoundW(byval pszSound as LPCWSTR, byval hmod as HMODULE, byval fdwSound as DWORD) as WINBOOL

 declare function PlaySound alias "PlaySoundA"(byval pszSound as LPCSTR, byval hmod as HMODULE, byval fdwSound as DWORD) as WINBOOL

const WAVERR_BADFORMAT = WAVERR_BASE + 0
const WAVERR_STILLPLAYING = WAVERR_BASE + 1
const WAVERR_UNPREPARED = WAVERR_BASE + 2
const WAVERR_SYNC = WAVERR_BASE + 3
const WAVERR_LASTERROR = WAVERR_BASE + 3

type HWAVE__ field = 1
 unused as long
end type

type HWAVE as HWAVE__ ptr

type HWAVEIN__ field = 1
 unused as long
end type

type HWAVEIN as HWAVEIN__ ptr

type HWAVEOUT__ field = 1
 unused as long
end type

type HWAVEOUT as HWAVEOUT__ ptr
type LPHWAVEIN as HWAVEIN ptr
type LPHWAVEOUT as HWAVEOUT ptr
type LPWAVECALLBACK as sub(byval hdrvr as HDRVR, byval uMsg as UINT, byval dwUser as DWORD_PTR, byval dw1 as DWORD_PTR, byval dw2 as DWORD_PTR)

const WOM_OPEN = MM_WOM_OPEN
const WOM_CLOSE = MM_WOM_CLOSE
const WOM_DONE = MM_WOM_DONE
const WIM_OPEN = MM_WIM_OPEN
const WIM_CLOSE = MM_WIM_CLOSE
const WIM_DATA = MM_WIM_DATA
const WAVE_MAPPER = cast(UINT, -1)
const WAVE_FORMAT_QUERY = &h0001
const WAVE_ALLOWSYNC = &h0002
const WAVE_MAPPED = &h0004
const WAVE_FORMAT_DIRECT = &h0008
const WAVE_FORMAT_DIRECT_QUERY = WAVE_FORMAT_QUERY or WAVE_FORMAT_DIRECT

type wavehdr_tag field = 1
 lpData as LPSTR
 dwBufferLength as DWORD
 dwBytesRecorded as DWORD
 dwUser as DWORD_PTR
 dwFlags as DWORD
 dwLoops as DWORD
 lpNext as wavehdr_tag ptr
 reserved as DWORD_PTR
end type

type WAVEHDR as wavehdr_tag
type PWAVEHDR as wavehdr_tag ptr
type NPWAVEHDR as wavehdr_tag ptr
type LPWAVEHDR as wavehdr_tag ptr

const WHDR_DONE = &h00000001
const WHDR_PREPARED = &h00000002
const WHDR_BEGINLOOP = &h00000004
const WHDR_ENDLOOP = &h00000008
const WHDR_INQUEUE = &h00000010

type tagWAVEOUTCAPSA field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as zstring * 32
 dwFormats as DWORD
 wChannels as WORD
 wReserved1 as WORD
 dwSupport as DWORD
end type

type WAVEOUTCAPSA as tagWAVEOUTCAPSA
type PWAVEOUTCAPSA as tagWAVEOUTCAPSA ptr
type NPWAVEOUTCAPSA as tagWAVEOUTCAPSA ptr
type LPWAVEOUTCAPSA as tagWAVEOUTCAPSA ptr

type tagWAVEOUTCAPSW field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as wstring * 32
 dwFormats as DWORD
 wChannels as WORD
 wReserved1 as WORD
 dwSupport as DWORD
end type

type WAVEOUTCAPSW as tagWAVEOUTCAPSW
type PWAVEOUTCAPSW as tagWAVEOUTCAPSW ptr
type NPWAVEOUTCAPSW as tagWAVEOUTCAPSW ptr
type LPWAVEOUTCAPSW as tagWAVEOUTCAPSW ptr

 type WAVEOUTCAPS as WAVEOUTCAPSA
 type PWAVEOUTCAPS as PWAVEOUTCAPSA
 type NPWAVEOUTCAPS as NPWAVEOUTCAPSA
 type LPWAVEOUTCAPS as LPWAVEOUTCAPSA

type tagWAVEOUTCAPS2A field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as zstring * 32
 dwFormats as DWORD
 wChannels as WORD
 wReserved1 as WORD
 dwSupport as DWORD
 ManufacturerGuid as GUID
 ProductGuid as GUID
 NameGuid as GUID
end type

type WAVEOUTCAPS2A as tagWAVEOUTCAPS2A
type PWAVEOUTCAPS2A as tagWAVEOUTCAPS2A ptr
type NPWAVEOUTCAPS2A as tagWAVEOUTCAPS2A ptr
type LPWAVEOUTCAPS2A as tagWAVEOUTCAPS2A ptr

type tagWAVEOUTCAPS2W field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as wstring * 32
 dwFormats as DWORD
 wChannels as WORD
 wReserved1 as WORD
 dwSupport as DWORD
 ManufacturerGuid as GUID
 ProductGuid as GUID
 NameGuid as GUID
end type

type WAVEOUTCAPS2W as tagWAVEOUTCAPS2W
type PWAVEOUTCAPS2W as tagWAVEOUTCAPS2W ptr
type NPWAVEOUTCAPS2W as tagWAVEOUTCAPS2W ptr
type LPWAVEOUTCAPS2W as tagWAVEOUTCAPS2W ptr

 type WAVEOUTCAPS2 as WAVEOUTCAPS2A
 type PWAVEOUTCAPS2 as PWAVEOUTCAPS2A
 type NPWAVEOUTCAPS2 as NPWAVEOUTCAPS2A
 type LPWAVEOUTCAPS2 as LPWAVEOUTCAPS2A

const WAVECAPS_PITCH = &h0001
const WAVECAPS_PLAYBACKRATE = &h0002
const WAVECAPS_VOLUME = &h0004
const WAVECAPS_LRVOLUME = &h0008
const WAVECAPS_SYNC = &h0010
const WAVECAPS_SAMPLEACCURATE = &h0020

type tagWAVEINCAPSA field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as zstring * 32
 dwFormats as DWORD
 wChannels as WORD
 wReserved1 as WORD
end type

type WAVEINCAPSA as tagWAVEINCAPSA
type PWAVEINCAPSA as tagWAVEINCAPSA ptr
type NPWAVEINCAPSA as tagWAVEINCAPSA ptr
type LPWAVEINCAPSA as tagWAVEINCAPSA ptr

type tagWAVEINCAPSW field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as wstring * 32
 dwFormats as DWORD
 wChannels as WORD
 wReserved1 as WORD
end type

type WAVEINCAPSW as tagWAVEINCAPSW
type PWAVEINCAPSW as tagWAVEINCAPSW ptr
type NPWAVEINCAPSW as tagWAVEINCAPSW ptr
type LPWAVEINCAPSW as tagWAVEINCAPSW ptr

 type WAVEINCAPS as WAVEINCAPSA
 type PWAVEINCAPS as PWAVEINCAPSA
 type NPWAVEINCAPS as NPWAVEINCAPSA
 type LPWAVEINCAPS as LPWAVEINCAPSA

type tagWAVEINCAPS2A field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as zstring * 32
 dwFormats as DWORD
 wChannels as WORD
 wReserved1 as WORD
 ManufacturerGuid as GUID
 ProductGuid as GUID
 NameGuid as GUID
end type

type WAVEINCAPS2A as tagWAVEINCAPS2A
type PWAVEINCAPS2A as tagWAVEINCAPS2A ptr
type NPWAVEINCAPS2A as tagWAVEINCAPS2A ptr
type LPWAVEINCAPS2A as tagWAVEINCAPS2A ptr

type tagWAVEINCAPS2W field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as wstring * 32
 dwFormats as DWORD
 wChannels as WORD
 wReserved1 as WORD
 ManufacturerGuid as GUID
 ProductGuid as GUID
 NameGuid as GUID
end type

type WAVEINCAPS2W as tagWAVEINCAPS2W
type PWAVEINCAPS2W as tagWAVEINCAPS2W ptr
type NPWAVEINCAPS2W as tagWAVEINCAPS2W ptr
type LPWAVEINCAPS2W as tagWAVEINCAPS2W ptr

 type WAVEINCAPS2 as WAVEINCAPS2A
 type PWAVEINCAPS2 as PWAVEINCAPS2A
 type NPWAVEINCAPS2 as NPWAVEINCAPS2A
 type LPWAVEINCAPS2 as LPWAVEINCAPS2A

const WAVE_INVALIDFORMAT = &h000000000
const WAVE_FORMAT_1M08 = &h00000001
const WAVE_FORMAT_1S08 = &h00000002
const WAVE_FORMAT_1M16 = &h00000004
const WAVE_FORMAT_1S16 = &h00000008
const WAVE_FORMAT_2M08 = &h00000010
const WAVE_FORMAT_2S08 = &h00000020
const WAVE_FORMAT_2M16 = &h00000040
const WAVE_FORMAT_2S16 = &h00000080
const WAVE_FORMAT_4M08 = &h00000100
const WAVE_FORMAT_4S08 = &h00000200
const WAVE_FORMAT_4M16 = &h00000400
const WAVE_FORMAT_4S16 = &h00000800
const WAVE_FORMAT_44M08 = &h00000100
const WAVE_FORMAT_44S08 = &h00000200
const WAVE_FORMAT_44M16 = &h00000400
const WAVE_FORMAT_44S16 = &h00000800
const WAVE_FORMAT_48M08 = &h00001000
const WAVE_FORMAT_48S08 = &h00002000
const WAVE_FORMAT_48M16 = &h00004000
const WAVE_FORMAT_48S16 = &h00008000
const WAVE_FORMAT_96M08 = &h00010000
const WAVE_FORMAT_96S08 = &h00020000
const WAVE_FORMAT_96M16 = &h00040000
const WAVE_FORMAT_96S16 = &h00080000

type waveformat_tag field = 1
 wFormatTag as WORD
 nChannels as WORD
 nSamplesPerSec as DWORD
 nAvgBytesPerSec as DWORD
 nBlockAlign as WORD
end type

type WAVEFORMAT as waveformat_tag
type PWAVEFORMAT as waveformat_tag ptr
type NPWAVEFORMAT as waveformat_tag ptr
type LPWAVEFORMAT as waveformat_tag ptr
const WAVE_FORMAT_PCM = 1

type pcmwaveformat_tag field = 1
 wf as WAVEFORMAT
 wBitsPerSample as WORD
end type

type PCMWAVEFORMAT as pcmwaveformat_tag
type PPCMWAVEFORMAT as pcmwaveformat_tag ptr
type NPPCMWAVEFORMAT as pcmwaveformat_tag ptr
type LPPCMWAVEFORMAT as pcmwaveformat_tag ptr

type tWAVEFORMATEX field = 1
 wFormatTag as WORD
 nChannels as WORD
 nSamplesPerSec as DWORD
 nAvgBytesPerSec as DWORD
 nBlockAlign as WORD
 wBitsPerSample as WORD
 cbSize as WORD
end type

type WAVEFORMATEX as tWAVEFORMATEX
type PWAVEFORMATEX as tWAVEFORMATEX ptr
type NPWAVEFORMATEX as tWAVEFORMATEX ptr
type LPWAVEFORMATEX as tWAVEFORMATEX ptr
type LPCWAVEFORMATEX as const WAVEFORMATEX ptr

declare function waveOutGetNumDevs() as UINT
declare function waveOutGetDevCapsA(byval uDeviceID as UINT_PTR, byval pwoc as LPWAVEOUTCAPSA, byval cbwoc as UINT) as MMRESULT
declare function waveOutGetDevCapsW(byval uDeviceID as UINT_PTR, byval pwoc as LPWAVEOUTCAPSW, byval cbwoc as UINT) as MMRESULT

 declare function waveOutGetDevCaps alias "waveOutGetDevCapsA"(byval uDeviceID as UINT_PTR, byval pwoc as LPWAVEOUTCAPSA, byval cbwoc as UINT) as MMRESULT

declare function waveOutGetVolume(byval hwo as HWAVEOUT, byval pdwVolume as LPDWORD) as MMRESULT
declare function waveOutSetVolume(byval hwo as HWAVEOUT, byval dwVolume as DWORD) as MMRESULT
declare function waveOutGetErrorTextA(byval mmrError as MMRESULT, byval pszText as LPSTR, byval cchText as UINT) as MMRESULT
declare function waveOutGetErrorTextW(byval mmrError as MMRESULT, byval pszText as LPWSTR, byval cchText as UINT) as MMRESULT

 declare function waveOutGetErrorText alias "waveOutGetErrorTextA"(byval mmrError as MMRESULT, byval pszText as LPSTR, byval cchText as UINT) as MMRESULT

declare function waveOutOpen(byval phwo as LPHWAVEOUT, byval uDeviceID as UINT, byval pwfx as LPCWAVEFORMATEX, byval dwCallback as DWORD_PTR, byval dwInstance as DWORD_PTR, byval fdwOpen as DWORD) as MMRESULT
declare function waveOutClose(byval hwo as HWAVEOUT) as MMRESULT
declare function waveOutPrepareHeader(byval hwo as HWAVEOUT, byval pwh as LPWAVEHDR, byval cbwh as UINT) as MMRESULT
declare function waveOutUnprepareHeader(byval hwo as HWAVEOUT, byval pwh as LPWAVEHDR, byval cbwh as UINT) as MMRESULT
declare function waveOutWrite(byval hwo as HWAVEOUT, byval pwh as LPWAVEHDR, byval cbwh as UINT) as MMRESULT
declare function waveOutPause(byval hwo as HWAVEOUT) as MMRESULT
declare function waveOutRestart(byval hwo as HWAVEOUT) as MMRESULT
declare function waveOutReset(byval hwo as HWAVEOUT) as MMRESULT
declare function waveOutBreakLoop(byval hwo as HWAVEOUT) as MMRESULT
declare function waveOutGetPosition(byval hwo as HWAVEOUT, byval pmmt as LPMMTIME, byval cbmmt as UINT) as MMRESULT
declare function waveOutGetPitch(byval hwo as HWAVEOUT, byval pdwPitch as LPDWORD) as MMRESULT
declare function waveOutSetPitch(byval hwo as HWAVEOUT, byval dwPitch as DWORD) as MMRESULT
declare function waveOutGetPlaybackRate(byval hwo as HWAVEOUT, byval pdwRate as LPDWORD) as MMRESULT
declare function waveOutSetPlaybackRate(byval hwo as HWAVEOUT, byval dwRate as DWORD) as MMRESULT
declare function waveOutGetID(byval hwo as HWAVEOUT, byval puDeviceID as LPUINT) as MMRESULT
declare function waveOutMessage(byval hwo as HWAVEOUT, byval uMsg as UINT, byval dw1 as DWORD_PTR, byval dw2 as DWORD_PTR) as MMRESULT
declare function waveInGetNumDevs() as UINT
declare function waveInGetDevCapsA(byval uDeviceID as UINT_PTR, byval pwic as LPWAVEINCAPSA, byval cbwic as UINT) as MMRESULT
declare function waveInGetDevCapsW(byval uDeviceID as UINT_PTR, byval pwic as LPWAVEINCAPSW, byval cbwic as UINT) as MMRESULT

 declare function waveInGetDevCaps alias "waveInGetDevCapsA"(byval uDeviceID as UINT_PTR, byval pwic as LPWAVEINCAPSA, byval cbwic as UINT) as MMRESULT

declare function waveInGetErrorTextA(byval mmrError as MMRESULT, byval pszText as LPSTR, byval cchText as UINT) as MMRESULT
declare function waveInGetErrorTextW(byval mmrError as MMRESULT, byval pszText as LPWSTR, byval cchText as UINT) as MMRESULT

 declare function waveInGetErrorText alias "waveInGetErrorTextA"(byval mmrError as MMRESULT, byval pszText as LPSTR, byval cchText as UINT) as MMRESULT

declare function waveInOpen(byval phwi as LPHWAVEIN, byval uDeviceID as UINT, byval pwfx as LPCWAVEFORMATEX, byval dwCallback as DWORD_PTR, byval dwInstance as DWORD_PTR, byval fdwOpen as DWORD) as MMRESULT
declare function waveInClose(byval hwi as HWAVEIN) as MMRESULT
declare function waveInPrepareHeader(byval hwi as HWAVEIN, byval pwh as LPWAVEHDR, byval cbwh as UINT) as MMRESULT
declare function waveInUnprepareHeader(byval hwi as HWAVEIN, byval pwh as LPWAVEHDR, byval cbwh as UINT) as MMRESULT
declare function waveInAddBuffer(byval hwi as HWAVEIN, byval pwh as LPWAVEHDR, byval cbwh as UINT) as MMRESULT
declare function waveInStart(byval hwi as HWAVEIN) as MMRESULT
declare function waveInStop(byval hwi as HWAVEIN) as MMRESULT
declare function waveInReset(byval hwi as HWAVEIN) as MMRESULT
declare function waveInGetPosition(byval hwi as HWAVEIN, byval pmmt as LPMMTIME, byval cbmmt as UINT) as MMRESULT
declare function waveInGetID(byval hwi as HWAVEIN, byval puDeviceID as LPUINT) as MMRESULT
declare function waveInMessage(byval hwi as HWAVEIN, byval uMsg as UINT, byval dw1 as DWORD_PTR, byval dw2 as DWORD_PTR) as MMRESULT

const MIDIERR_UNPREPARED = MIDIERR_BASE + 0
const MIDIERR_STILLPLAYING = MIDIERR_BASE + 1
const MIDIERR_NOMAP = MIDIERR_BASE + 2
const MIDIERR_NOTREADY = MIDIERR_BASE + 3
const MIDIERR_NODEVICE = MIDIERR_BASE + 4
const MIDIERR_INVALIDSETUP = MIDIERR_BASE + 5
const MIDIERR_BADOPENMODE = MIDIERR_BASE + 6
const MIDIERR_DONT_CONTINUE = MIDIERR_BASE + 7
const MIDIERR_LASTERROR = MIDIERR_BASE + 7

type HMIDI__ field = 1
 unused as long
end type

type HMIDI as HMIDI__ ptr

type HMIDIIN__ field = 1
 unused as long
end type

type HMIDIIN as HMIDIIN__ ptr

type HMIDIOUT__ field = 1
 unused as long
end type

type HMIDIOUT as HMIDIOUT__ ptr

type HMIDISTRM__ field = 1
 unused as long
end type

type HMIDISTRM as HMIDISTRM__ ptr
type LPHMIDI as HMIDI ptr
type LPHMIDIIN as HMIDIIN ptr
type LPHMIDIOUT as HMIDIOUT ptr
type LPHMIDISTRM as HMIDISTRM ptr
type LPMIDICALLBACK as sub(byval hdrvr as HDRVR, byval uMsg as UINT, byval dwUser as DWORD_PTR, byval dw1 as DWORD_PTR, byval dw2 as DWORD_PTR)
const MIDIPATCHSIZE = 128
type LPPATCHARRAY as WORD ptr
type LPKEYARRAY as WORD ptr

const MIM_OPEN = MM_MIM_OPEN
const MIM_CLOSE = MM_MIM_CLOSE
const MIM_DATA = MM_MIM_DATA
const MIM_LONGDATA = MM_MIM_LONGDATA
const MIM_ERROR = MM_MIM_ERROR
const MIM_LONGERROR = MM_MIM_LONGERROR
const MOM_OPEN = MM_MOM_OPEN
const MOM_CLOSE = MM_MOM_CLOSE
const MOM_DONE = MM_MOM_DONE
const MIM_MOREDATA = MM_MIM_MOREDATA
const MOM_POSITIONCB = MM_MOM_POSITIONCB
const MIDIMAPPER = cast(UINT, -1)
const MIDI_MAPPER = cast(UINT, -1)
const MIDI_IO_STATUS = &h00000020
const MIDI_CACHE_ALL = 1
const MIDI_CACHE_BESTFIT = 2
const MIDI_CACHE_QUERY = 3
const MIDI_UNCACHE = 4

type tagMIDIOUTCAPSA field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as zstring * 32
 wTechnology as WORD
 wVoices as WORD
 wNotes as WORD
 wChannelMask as WORD
 dwSupport as DWORD
end type

type MIDIOUTCAPSA as tagMIDIOUTCAPSA
type PMIDIOUTCAPSA as tagMIDIOUTCAPSA ptr
type NPMIDIOUTCAPSA as tagMIDIOUTCAPSA ptr
type LPMIDIOUTCAPSA as tagMIDIOUTCAPSA ptr

type tagMIDIOUTCAPSW field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as wstring * 32
 wTechnology as WORD
 wVoices as WORD
 wNotes as WORD
 wChannelMask as WORD
 dwSupport as DWORD
end type

type MIDIOUTCAPSW as tagMIDIOUTCAPSW
type PMIDIOUTCAPSW as tagMIDIOUTCAPSW ptr
type NPMIDIOUTCAPSW as tagMIDIOUTCAPSW ptr
type LPMIDIOUTCAPSW as tagMIDIOUTCAPSW ptr

 type MIDIOUTCAPS as MIDIOUTCAPSA
 type PMIDIOUTCAPS as PMIDIOUTCAPSA
 type NPMIDIOUTCAPS as NPMIDIOUTCAPSA
 type LPMIDIOUTCAPS as LPMIDIOUTCAPSA

type tagMIDIOUTCAPS2A field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as zstring * 32
 wTechnology as WORD
 wVoices as WORD
 wNotes as WORD
 wChannelMask as WORD
 dwSupport as DWORD
 ManufacturerGuid as GUID
 ProductGuid as GUID
 NameGuid as GUID
end type

type MIDIOUTCAPS2A as tagMIDIOUTCAPS2A
type PMIDIOUTCAPS2A as tagMIDIOUTCAPS2A ptr
type NPMIDIOUTCAPS2A as tagMIDIOUTCAPS2A ptr
type LPMIDIOUTCAPS2A as tagMIDIOUTCAPS2A ptr

type tagMIDIOUTCAPS2W field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as wstring * 32
 wTechnology as WORD
 wVoices as WORD
 wNotes as WORD
 wChannelMask as WORD
 dwSupport as DWORD
 ManufacturerGuid as GUID
 ProductGuid as GUID
 NameGuid as GUID
end type

type MIDIOUTCAPS2W as tagMIDIOUTCAPS2W
type PMIDIOUTCAPS2W as tagMIDIOUTCAPS2W ptr
type NPMIDIOUTCAPS2W as tagMIDIOUTCAPS2W ptr
type LPMIDIOUTCAPS2W as tagMIDIOUTCAPS2W ptr

 type MIDIOUTCAPS2 as MIDIOUTCAPS2A
 type PMIDIOUTCAPS2 as PMIDIOUTCAPS2A
 type NPMIDIOUTCAPS2 as NPMIDIOUTCAPS2A
 type LPMIDIOUTCAPS2 as LPMIDIOUTCAPS2A

const MOD_MIDIPORT = 1
const MOD_SYNTH = 2
const MOD_SQSYNTH = 3
const MOD_FMSYNTH = 4
const MOD_MAPPER = 5
const MOD_WAVETABLE = 6
const MOD_SWSYNTH = 7
const MIDICAPS_VOLUME = &h0001
const MIDICAPS_LRVOLUME = &h0002
const MIDICAPS_CACHE = &h0004
const MIDICAPS_STREAM = &h0008

type tagMIDIINCAPSA field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as zstring * 32
 dwSupport as DWORD
end type

type MIDIINCAPSA as tagMIDIINCAPSA
type PMIDIINCAPSA as tagMIDIINCAPSA ptr
type NPMIDIINCAPSA as tagMIDIINCAPSA ptr
type LPMIDIINCAPSA as tagMIDIINCAPSA ptr

type tagMIDIINCAPSW field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as wstring * 32
 dwSupport as DWORD
end type

type MIDIINCAPSW as tagMIDIINCAPSW
type PMIDIINCAPSW as tagMIDIINCAPSW ptr
type NPMIDIINCAPSW as tagMIDIINCAPSW ptr
type LPMIDIINCAPSW as tagMIDIINCAPSW ptr

 type MIDIINCAPS as MIDIINCAPSA
 type PMIDIINCAPS as PMIDIINCAPSA
 type NPMIDIINCAPS as NPMIDIINCAPSA
 type LPMIDIINCAPS as LPMIDIINCAPSA

type tagMIDIINCAPS2A field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as zstring * 32
 dwSupport as DWORD
 ManufacturerGuid as GUID
 ProductGuid as GUID
 NameGuid as GUID
end type

type MIDIINCAPS2A as tagMIDIINCAPS2A
type PMIDIINCAPS2A as tagMIDIINCAPS2A ptr
type NPMIDIINCAPS2A as tagMIDIINCAPS2A ptr
type LPMIDIINCAPS2A as tagMIDIINCAPS2A ptr

type tagMIDIINCAPS2W field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as wstring * 32
 dwSupport as DWORD
 ManufacturerGuid as GUID
 ProductGuid as GUID
 NameGuid as GUID
end type

type MIDIINCAPS2W as tagMIDIINCAPS2W
type PMIDIINCAPS2W as tagMIDIINCAPS2W ptr
type NPMIDIINCAPS2W as tagMIDIINCAPS2W ptr
type LPMIDIINCAPS2W as tagMIDIINCAPS2W ptr

 type MIDIINCAPS2 as MIDIINCAPS2A
 type PMIDIINCAPS2 as PMIDIINCAPS2A
 type NPMIDIINCAPS2 as NPMIDIINCAPS2A
 type LPMIDIINCAPS2 as LPMIDIINCAPS2A

type midihdr_tag field = 1
 lpData as LPSTR
 dwBufferLength as DWORD
 dwBytesRecorded as DWORD
 dwUser as DWORD_PTR
 dwFlags as DWORD
 lpNext as midihdr_tag ptr
 reserved as DWORD_PTR
 dwOffset as DWORD
 dwReserved(0 to 7) as DWORD_PTR
end type

type MIDIHDR as midihdr_tag
type PMIDIHDR as midihdr_tag ptr
type NPMIDIHDR as midihdr_tag ptr
type LPMIDIHDR as midihdr_tag ptr

type midievent_tag field = 1
 dwDeltaTime as DWORD
 dwStreamID as DWORD
 dwEvent as DWORD
 dwParms(0 to 0) as DWORD
end type

type MIDIEVENT as midievent_tag

type midistrmbuffver_tag field = 1
 dwVersion as DWORD
 dwMid as DWORD
 dwOEMVersion as DWORD
end type

type MIDISTRMBUFFVER as midistrmbuffver_tag
const MHDR_DONE = &h00000001
const MHDR_PREPARED = &h00000002
const MHDR_INQUEUE = &h00000004
const MHDR_ISSTRM = &h00000008
const MEVT_F_SHORT = &h000000000
const MEVT_F_LONG = &h80000000
const MEVT_F_CALLBACK = &h40000000
const MEVT_SHORTMSG = cast(UBYTE, &h000)
const MEVT_TEMPO = cast(UBYTE, &h01)
const MEVT_NOP = cast(UBYTE, &h02)
const MEVT_LONGMSG = cast(UBYTE, &h80)
const MEVT_COMMENT = cast(UBYTE, &h82)
const MEVT_VERSION = cast(UBYTE, &h84)
const MIDISTRM_ERROR = -2
const MIDIPROP_SET = &h80000000
const MIDIPROP_GET = &h40000000
const MIDIPROP_TIMEDIV = &h00000001
const MIDIPROP_TEMPO = &h00000002

type midiproptimediv_tag field = 1
 cbStruct as DWORD
 dwTimeDiv as DWORD
end type

type MIDIPROPTIMEDIV as midiproptimediv_tag
type LPMIDIPROPTIMEDIV as midiproptimediv_tag ptr

type midiproptempo_tag field = 1
 cbStruct as DWORD
 dwTempo as DWORD
end type

type MIDIPROPTEMPO as midiproptempo_tag
type LPMIDIPROPTEMPO as midiproptempo_tag ptr
declare function midiOutGetNumDevs() as UINT
declare function midiStreamOpen(byval phms as LPHMIDISTRM, byval puDeviceID as LPUINT, byval cMidi as DWORD, byval dwCallback as DWORD_PTR, byval dwInstance as DWORD_PTR, byval fdwOpen as DWORD) as MMRESULT
declare function midiStreamClose(byval hms as HMIDISTRM) as MMRESULT
declare function midiStreamProperty(byval hms as HMIDISTRM, byval lppropdata as LPBYTE, byval dwProperty as DWORD) as MMRESULT
declare function midiStreamPosition(byval hms as HMIDISTRM, byval lpmmt as LPMMTIME, byval cbmmt as UINT) as MMRESULT
declare function midiStreamOut(byval hms as HMIDISTRM, byval pmh as LPMIDIHDR, byval cbmh as UINT) as MMRESULT
declare function midiStreamPause(byval hms as HMIDISTRM) as MMRESULT
declare function midiStreamRestart(byval hms as HMIDISTRM) as MMRESULT
declare function midiStreamStop(byval hms as HMIDISTRM) as MMRESULT
declare function midiConnect(byval hmi as HMIDI, byval hmo as HMIDIOUT, byval pReserved as LPVOID) as MMRESULT
declare function midiDisconnect(byval hmi as HMIDI, byval hmo as HMIDIOUT, byval pReserved as LPVOID) as MMRESULT
declare function midiOutGetDevCapsA(byval uDeviceID as UINT_PTR, byval pmoc as LPMIDIOUTCAPSA, byval cbmoc as UINT) as MMRESULT
declare function midiOutGetDevCapsW(byval uDeviceID as UINT_PTR, byval pmoc as LPMIDIOUTCAPSW, byval cbmoc as UINT) as MMRESULT

 declare function midiOutGetDevCaps alias "midiOutGetDevCapsA"(byval uDeviceID as UINT_PTR, byval pmoc as LPMIDIOUTCAPSA, byval cbmoc as UINT) as MMRESULT

declare function midiOutGetVolume(byval hmo as HMIDIOUT, byval pdwVolume as LPDWORD) as MMRESULT
declare function midiOutSetVolume(byval hmo as HMIDIOUT, byval dwVolume as DWORD) as MMRESULT
declare function midiOutGetErrorTextA(byval mmrError as MMRESULT, byval pszText as LPSTR, byval cchText as UINT) as MMRESULT
declare function midiOutGetErrorTextW(byval mmrError as MMRESULT, byval pszText as LPWSTR, byval cchText as UINT) as MMRESULT

 declare function midiOutGetErrorText alias "midiOutGetErrorTextA"(byval mmrError as MMRESULT, byval pszText as LPSTR, byval cchText as UINT) as MMRESULT

declare function midiOutOpen(byval phmo as LPHMIDIOUT, byval uDeviceID as UINT, byval dwCallback as DWORD_PTR, byval dwInstance as DWORD_PTR, byval fdwOpen as DWORD) as MMRESULT
declare function midiOutClose(byval hmo as HMIDIOUT) as MMRESULT
declare function midiOutPrepareHeader(byval hmo as HMIDIOUT, byval pmh as LPMIDIHDR, byval cbmh as UINT) as MMRESULT
declare function midiOutUnprepareHeader(byval hmo as HMIDIOUT, byval pmh as LPMIDIHDR, byval cbmh as UINT) as MMRESULT
declare function midiOutShortMsg(byval hmo as HMIDIOUT, byval dwMsg as DWORD) as MMRESULT
declare function midiOutLongMsg(byval hmo as HMIDIOUT, byval pmh as LPMIDIHDR, byval cbmh as UINT) as MMRESULT
declare function midiOutReset(byval hmo as HMIDIOUT) as MMRESULT
declare function midiOutCachePatches(byval hmo as HMIDIOUT, byval uBank as UINT, byval pwpa as LPWORD, byval fuCache as UINT) as MMRESULT
declare function midiOutCacheDrumPatches(byval hmo as HMIDIOUT, byval uPatch as UINT, byval pwkya as LPWORD, byval fuCache as UINT) as MMRESULT
declare function midiOutGetID(byval hmo as HMIDIOUT, byval puDeviceID as LPUINT) as MMRESULT
declare function midiOutMessage(byval hmo as HMIDIOUT, byval uMsg as UINT, byval dw1 as DWORD_PTR, byval dw2 as DWORD_PTR) as MMRESULT
declare function midiInGetNumDevs() as UINT
declare function midiInGetDevCapsA(byval uDeviceID as UINT_PTR, byval pmic as LPMIDIINCAPSA, byval cbmic as UINT) as MMRESULT
declare function midiInGetDevCapsW(byval uDeviceID as UINT_PTR, byval pmic as LPMIDIINCAPSW, byval cbmic as UINT) as MMRESULT

 declare function midiInGetDevCaps alias "midiInGetDevCapsA"(byval uDeviceID as UINT_PTR, byval pmic as LPMIDIINCAPSA, byval cbmic as UINT) as MMRESULT

declare function midiInGetErrorTextA(byval mmrError as MMRESULT, byval pszText as LPSTR, byval cchText as UINT) as MMRESULT
declare function midiInGetErrorTextW(byval mmrError as MMRESULT, byval pszText as LPWSTR, byval cchText as UINT) as MMRESULT

 declare function midiInGetErrorText alias "midiInGetErrorTextA"(byval mmrError as MMRESULT, byval pszText as LPSTR, byval cchText as UINT) as MMRESULT

declare function midiInOpen(byval phmi as LPHMIDIIN, byval uDeviceID as UINT, byval dwCallback as DWORD_PTR, byval dwInstance as DWORD_PTR, byval fdwOpen as DWORD) as MMRESULT
declare function midiInClose(byval hmi as HMIDIIN) as MMRESULT
declare function midiInPrepareHeader(byval hmi as HMIDIIN, byval pmh as LPMIDIHDR, byval cbmh as UINT) as MMRESULT
declare function midiInUnprepareHeader(byval hmi as HMIDIIN, byval pmh as LPMIDIHDR, byval cbmh as UINT) as MMRESULT
declare function midiInAddBuffer(byval hmi as HMIDIIN, byval pmh as LPMIDIHDR, byval cbmh as UINT) as MMRESULT
declare function midiInStart(byval hmi as HMIDIIN) as MMRESULT
declare function midiInStop(byval hmi as HMIDIIN) as MMRESULT
declare function midiInReset(byval hmi as HMIDIIN) as MMRESULT
declare function midiInGetID(byval hmi as HMIDIIN, byval puDeviceID as LPUINT) as MMRESULT
declare function midiInMessage(byval hmi as HMIDIIN, byval uMsg as UINT, byval dw1 as DWORD_PTR, byval dw2 as DWORD_PTR) as MMRESULT
const AUX_MAPPER = cast(UINT, -1)

type tagAUXCAPSA field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as zstring * 32
 wTechnology as WORD
 wReserved1 as WORD
 dwSupport as DWORD
end type

type AUXCAPSA as tagAUXCAPSA
type PAUXCAPSA as tagAUXCAPSA ptr
type NPAUXCAPSA as tagAUXCAPSA ptr
type LPAUXCAPSA as tagAUXCAPSA ptr

type tagAUXCAPSW field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as wstring * 32
 wTechnology as WORD
 wReserved1 as WORD
 dwSupport as DWORD
end type

type AUXCAPSW as tagAUXCAPSW
type PAUXCAPSW as tagAUXCAPSW ptr
type NPAUXCAPSW as tagAUXCAPSW ptr
type LPAUXCAPSW as tagAUXCAPSW ptr

 type AUXCAPS as AUXCAPSA
 type PAUXCAPS as PAUXCAPSA
 type NPAUXCAPS as NPAUXCAPSA
 type LPAUXCAPS as LPAUXCAPSA

type tagAUXCAPS2A field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as zstring * 32
 wTechnology as WORD
 wReserved1 as WORD
 dwSupport as DWORD
 ManufacturerGuid as GUID
 ProductGuid as GUID
 NameGuid as GUID
end type

type AUXCAPS2A as tagAUXCAPS2A
type PAUXCAPS2A as tagAUXCAPS2A ptr
type NPAUXCAPS2A as tagAUXCAPS2A ptr
type LPAUXCAPS2A as tagAUXCAPS2A ptr

type tagAUXCAPS2W field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as wstring * 32
 wTechnology as WORD
 wReserved1 as WORD
 dwSupport as DWORD
 ManufacturerGuid as GUID
 ProductGuid as GUID
 NameGuid as GUID
end type

type AUXCAPS2W as tagAUXCAPS2W
type PAUXCAPS2W as tagAUXCAPS2W ptr
type NPAUXCAPS2W as tagAUXCAPS2W ptr
type LPAUXCAPS2W as tagAUXCAPS2W ptr

 type AUXCAPS2 as AUXCAPS2A
 type PAUXCAPS2 as PAUXCAPS2A
 type NPAUXCAPS2 as NPAUXCAPS2A
 type LPAUXCAPS2 as LPAUXCAPS2A

const AUXCAPS_CDAUDIO = 1
const AUXCAPS_AUXIN = 2
const AUXCAPS_VOLUME = &h0001
const AUXCAPS_LRVOLUME = &h0002

declare function auxGetNumDevs() as UINT
declare function auxGetDevCapsA(byval uDeviceID as UINT_PTR, byval pac as LPAUXCAPSA, byval cbac as UINT) as MMRESULT
declare function auxGetDevCapsW(byval uDeviceID as UINT_PTR, byval pac as LPAUXCAPSW, byval cbac as UINT) as MMRESULT

 declare function auxGetDevCaps alias "auxGetDevCapsA"(byval uDeviceID as UINT_PTR, byval pac as LPAUXCAPSA, byval cbac as UINT) as MMRESULT

declare function auxSetVolume(byval uDeviceID as UINT, byval dwVolume as DWORD) as MMRESULT
declare function auxGetVolume(byval uDeviceID as UINT, byval pdwVolume as LPDWORD) as MMRESULT
declare function auxOutMessage(byval uDeviceID as UINT, byval uMsg as UINT, byval dw1 as DWORD_PTR, byval dw2 as DWORD_PTR) as MMRESULT

type HMIXEROBJ__ field = 1
 unused as long
end type

type HMIXEROBJ as HMIXEROBJ__ ptr
type LPHMIXEROBJ as HMIXEROBJ ptr

type HMIXER__ field = 1
 unused as long
end type

type HMIXER as HMIXER__ ptr
type LPHMIXER as HMIXER ptr
const MIXER_SHORT_NAME_CHARS = 16
const MIXER_LONG_NAME_CHARS = 64
const MIXERR_INVALLINE = MIXERR_BASE + 0
const MIXERR_INVALCONTROL = MIXERR_BASE + 1
const MIXERR_INVALVALUE = MIXERR_BASE + 2
const MIXERR_LASTERROR = MIXERR_BASE + 2
const MIXER_OBJECTF_HANDLE = &h80000000
const MIXER_OBJECTF_MIXER = &h000000000
const MIXER_OBJECTF_HMIXER = MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_MIXER
const MIXER_OBJECTF_WAVEOUT = &h10000000
const MIXER_OBJECTF_HWAVEOUT = MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_WAVEOUT
const MIXER_OBJECTF_WAVEIN = &h20000000
const MIXER_OBJECTF_HWAVEIN = MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_WAVEIN
const MIXER_OBJECTF_MIDIOUT = &h30000000
const MIXER_OBJECTF_HMIDIOUT = MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_MIDIOUT
const MIXER_OBJECTF_MIDIIN = &h40000000
const MIXER_OBJECTF_HMIDIIN = MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_MIDIIN
const MIXER_OBJECTF_AUX = &h50000000
declare function mixerGetNumDevs() as UINT

type tagMIXERCAPSA field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as zstring * 32
 fdwSupport as DWORD
 cDestinations as DWORD
end type

type MIXERCAPSA as tagMIXERCAPSA
type PMIXERCAPSA as tagMIXERCAPSA ptr
type LPMIXERCAPSA as tagMIXERCAPSA ptr

type tagMIXERCAPSW field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as wstring * 32
 fdwSupport as DWORD
 cDestinations as DWORD
end type

type MIXERCAPSW as tagMIXERCAPSW
type PMIXERCAPSW as tagMIXERCAPSW ptr
type LPMIXERCAPSW as tagMIXERCAPSW ptr

 type MIXERCAPS as MIXERCAPSA
 type PMIXERCAPS as PMIXERCAPSA
 type LPMIXERCAPS as LPMIXERCAPSA

type tagMIXERCAPS2A field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as zstring * 32
 fdwSupport as DWORD
 cDestinations as DWORD
 ManufacturerGuid as GUID
 ProductGuid as GUID
 NameGuid as GUID
end type

type MIXERCAPS2A as tagMIXERCAPS2A
type PMIXERCAPS2A as tagMIXERCAPS2A ptr
type LPMIXERCAPS2A as tagMIXERCAPS2A ptr

type tagMIXERCAPS2W field = 1
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as wstring * 32
 fdwSupport as DWORD
 cDestinations as DWORD
 ManufacturerGuid as GUID
 ProductGuid as GUID
 NameGuid as GUID
end type

type MIXERCAPS2W as tagMIXERCAPS2W
type PMIXERCAPS2W as tagMIXERCAPS2W ptr
type LPMIXERCAPS2W as tagMIXERCAPS2W ptr

 type MIXERCAPS2 as MIXERCAPS2A
 type PMIXERCAPS2 as PMIXERCAPS2A
 type LPMIXERCAPS2 as LPMIXERCAPS2A

declare function mixerGetDevCapsA(byval uMxId as UINT_PTR, byval pmxcaps as LPMIXERCAPSA, byval cbmxcaps as UINT) as MMRESULT
declare function mixerGetDevCapsW(byval uMxId as UINT_PTR, byval pmxcaps as LPMIXERCAPSW, byval cbmxcaps as UINT) as MMRESULT

 declare function mixerGetDevCaps alias "mixerGetDevCapsA"(byval uMxId as UINT_PTR, byval pmxcaps as LPMIXERCAPSA, byval cbmxcaps as UINT) as MMRESULT

declare function mixerOpen(byval phmx as LPHMIXER, byval uMxId as UINT, byval dwCallback as DWORD_PTR, byval dwInstance as DWORD_PTR, byval fdwOpen as DWORD) as MMRESULT
declare function mixerClose(byval hmx as HMIXER) as MMRESULT
declare function mixerMessage(byval hmx as HMIXER, byval uMsg as UINT, byval dwParam1 as DWORD_PTR, byval dwParam2 as DWORD_PTR) as DWORD

type tagMIXERLINEA_Target field = 1
 dwType as DWORD
 dwDeviceID as DWORD
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as zstring * 32
end type

type tagMIXERLINEA field = 1
 cbStruct as DWORD
 dwDestination as DWORD
 dwSource as DWORD
 dwLineID as DWORD
 fdwLine as DWORD
 dwUser as DWORD_PTR
 dwComponentType as DWORD
 cChannels as DWORD
 cConnections as DWORD
 cControls as DWORD
 szShortName as zstring * 16
 szName as zstring * 64
 Target as tagMIXERLINEA_Target
end type

type MIXERLINEA as tagMIXERLINEA
type PMIXERLINEA as tagMIXERLINEA ptr
type LPMIXERLINEA as tagMIXERLINEA ptr

type tagMIXERLINEW_Target field = 1
 dwType as DWORD
 dwDeviceID as DWORD
 wMid as WORD
 wPid as WORD
 vDriverVersion as MMVERSION
 szPname as wstring * 32
end type

type tagMIXERLINEW field = 1
 cbStruct as DWORD
 dwDestination as DWORD
 dwSource as DWORD
 dwLineID as DWORD
 fdwLine as DWORD
 dwUser as DWORD_PTR
 dwComponentType as DWORD
 cChannels as DWORD
 cConnections as DWORD
 cControls as DWORD
 szShortName as wstring * 16
 szName as wstring * 64
 Target as tagMIXERLINEW_Target
end type

type MIXERLINEW as tagMIXERLINEW
type PMIXERLINEW as tagMIXERLINEW ptr
type LPMIXERLINEW as tagMIXERLINEW ptr

 type MIXERLINE as MIXERLINEA
 type PMIXERLINE as PMIXERLINEA
 type LPMIXERLINE as LPMIXERLINEA

const MIXERLINE_LINEF_ACTIVE = &h00000001
const MIXERLINE_LINEF_DISCONNECTED = &h00008000
const MIXERLINE_LINEF_SOURCE = &h80000000
const MIXERLINE_COMPONENTTYPE_DST_FIRST = &h00
const MIXERLINE_COMPONENTTYPE_DST_UNDEFINED = MIXERLINE_COMPONENTTYPE_DST_FIRST + 0
const MIXERLINE_COMPONENTTYPE_DST_DIGITAL = MIXERLINE_COMPONENTTYPE_DST_FIRST + 1
const MIXERLINE_COMPONENTTYPE_DST_LINE = MIXERLINE_COMPONENTTYPE_DST_FIRST + 2
const MIXERLINE_COMPONENTTYPE_DST_MONITOR = MIXERLINE_COMPONENTTYPE_DST_FIRST + 3
const MIXERLINE_COMPONENTTYPE_DST_SPEAKERS = MIXERLINE_COMPONENTTYPE_DST_FIRST + 4
const MIXERLINE_COMPONENTTYPE_DST_HEADPHONES = MIXERLINE_COMPONENTTYPE_DST_FIRST + 5
const MIXERLINE_COMPONENTTYPE_DST_TELEPHONE = MIXERLINE_COMPONENTTYPE_DST_FIRST + 6
const MIXERLINE_COMPONENTTYPE_DST_WAVEIN = MIXERLINE_COMPONENTTYPE_DST_FIRST + 7
const MIXERLINE_COMPONENTTYPE_DST_VOICEIN = MIXERLINE_COMPONENTTYPE_DST_FIRST + 8
const MIXERLINE_COMPONENTTYPE_DST_LAST = MIXERLINE_COMPONENTTYPE_DST_FIRST + 8
const MIXERLINE_COMPONENTTYPE_SRC_FIRST = &h00001000
const MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 0
const MIXERLINE_COMPONENTTYPE_SRC_DIGITAL = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 1
const MIXERLINE_COMPONENTTYPE_SRC_LINE = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 2
const MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 3
const MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 4
const MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 5
const MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 6
const MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 7
const MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 8
const MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 9
const MIXERLINE_COMPONENTTYPE_SRC_ANALOG = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 10
const MIXERLINE_COMPONENTTYPE_SRC_LAST = MIXERLINE_COMPONENTTYPE_SRC_FIRST + 10
const MIXERLINE_TARGETTYPE_UNDEFINED = 0
const MIXERLINE_TARGETTYPE_WAVEOUT = 1
const MIXERLINE_TARGETTYPE_WAVEIN = 2
const MIXERLINE_TARGETTYPE_MIDIOUT = 3
const MIXERLINE_TARGETTYPE_MIDIIN = 4
const MIXERLINE_TARGETTYPE_AUX = 5
declare function mixerGetLineInfoA(byval hmxobj as HMIXEROBJ, byval pmxl as LPMIXERLINEA, byval fdwInfo as DWORD) as MMRESULT
declare function mixerGetLineInfoW(byval hmxobj as HMIXEROBJ, byval pmxl as LPMIXERLINEW, byval fdwInfo as DWORD) as MMRESULT

 declare function mixerGetLineInfo alias "mixerGetLineInfoA"(byval hmxobj as HMIXEROBJ, byval pmxl as LPMIXERLINEA, byval fdwInfo as DWORD) as MMRESULT

const MIXER_GETLINEINFOF_DESTINATION = &h000000000
const MIXER_GETLINEINFOF_SOURCE = &h00000001
const MIXER_GETLINEINFOF_LINEID = &h00000002
const MIXER_GETLINEINFOF_COMPONENTTYPE = &h00000003
const MIXER_GETLINEINFOF_TARGETTYPE = &h00000004
const MIXER_GETLINEINFOF_QUERYMASK = &h0000000F
declare function mixerGetID(byval hmxobj as HMIXEROBJ, byval puMxId as UINT ptr, byval fdwId as DWORD) as MMRESULT

union tagMIXERCONTROLA_Bounds field = 1
 type field = 1
 lMinimum as LONG
 lMaximum as LONG
 end type

 type field = 1
 dwMinimum as DWORD
 dwMaximum as DWORD
 end type

 dwReserved(0 to 5) as DWORD
end union

union tagMIXERCONTROLA_Metrics field = 1
 cSteps as DWORD
 cbCustomData as DWORD
 dwReserved(0 to 5) as DWORD
end union

type tagMIXERCONTROLA field = 1
 cbStruct as DWORD
 dwControlID as DWORD
 dwControlType as DWORD
 fdwControl as DWORD
 cMultipleItems as DWORD
 szShortName as zstring * 16
 szName as zstring * 64
 Bounds as tagMIXERCONTROLA_Bounds
 Metrics as tagMIXERCONTROLA_Metrics
end type

type MIXERCONTROLA as tagMIXERCONTROLA
type PMIXERCONTROLA as tagMIXERCONTROLA ptr
type LPMIXERCONTROLA as tagMIXERCONTROLA ptr

union tagMIXERCONTROLW_Bounds field = 1
 type field = 1
 lMinimum as LONG
 lMaximum as LONG
 end type

 type field = 1
 dwMinimum as DWORD
 dwMaximum as DWORD
 end type

 dwReserved(0 to 5) as DWORD
end union

union tagMIXERCONTROLW_Metrics field = 1
 cSteps as DWORD
 cbCustomData as DWORD
 dwReserved(0 to 5) as DWORD
end union

type tagMIXERCONTROLW field = 1
 cbStruct as DWORD
 dwControlID as DWORD
 dwControlType as DWORD
 fdwControl as DWORD
 cMultipleItems as DWORD
 szShortName as wstring * 16
 szName as wstring * 64
 Bounds as tagMIXERCONTROLW_Bounds
 Metrics as tagMIXERCONTROLW_Metrics
end type

type MIXERCONTROLW as tagMIXERCONTROLW
type PMIXERCONTROLW as tagMIXERCONTROLW ptr
type LPMIXERCONTROLW as tagMIXERCONTROLW ptr

 type MIXERCONTROL as MIXERCONTROLA
 type PMIXERCONTROL as PMIXERCONTROLA
 type LPMIXERCONTROL as LPMIXERCONTROLA

const MIXERCONTROL_CONTROLF_UNIFORM = &h00000001
const MIXERCONTROL_CONTROLF_MULTIPLE = &h00000002
const MIXERCONTROL_CONTROLF_DISABLED = &h80000000
const MIXERCONTROL_CT_CLASS_MASK = &hF0000000
const MIXERCONTROL_CT_CLASS_CUSTOM = &h000000000
const MIXERCONTROL_CT_CLASS_METER = &h10000000
const MIXERCONTROL_CT_CLASS_SWITCH = &h20000000
const MIXERCONTROL_CT_CLASS_NUMBER = &h30000000
const MIXERCONTROL_CT_CLASS_SLIDER = &h40000000
const MIXERCONTROL_CT_CLASS_FADER = &h50000000
const MIXERCONTROL_CT_CLASS_TIME = &h60000000
const MIXERCONTROL_CT_CLASS_LIST = &h70000000
const MIXERCONTROL_CT_SUBCLASS_MASK = &h0F000000
const MIXERCONTROL_CT_SC_SWITCH_BOOLEAN = &h000000000
const MIXERCONTROL_CT_SC_SWITCH_BUTTON = &h01000000
const MIXERCONTROL_CT_SC_METER_POLLED = &h000000000
const MIXERCONTROL_CT_SC_TIME_MICROSECS = &h000000000
const MIXERCONTROL_CT_SC_TIME_MILLISECS = &h01000000
const MIXERCONTROL_CT_SC_LIST_SINGLE = &h000000000
const MIXERCONTROL_CT_SC_LIST_MULTIPLE = &h01000000
const MIXERCONTROL_CT_UNITS_MASK = &h00FF0000
const MIXERCONTROL_CT_UNITS_CUSTOM = &h000000000
const MIXERCONTROL_CT_UNITS_BOOLEAN = &h00010000
const MIXERCONTROL_CT_UNITS_SIGNED = &h00020000
const MIXERCONTROL_CT_UNITS_UNSIGNED = &h00030000
const MIXERCONTROL_CT_UNITS_DECIBELS = &h00040000
const MIXERCONTROL_CT_UNITS_PERCENT = &h00050000
const MIXERCONTROL_CONTROLTYPE_CUSTOM = MIXERCONTROL_CT_CLASS_CUSTOM or MIXERCONTROL_CT_UNITS_CUSTOM
const MIXERCONTROL_CONTROLTYPE_BOOLEANMETER = (MIXERCONTROL_CT_CLASS_METER or MIXERCONTROL_CT_SC_METER_POLLED) or MIXERCONTROL_CT_UNITS_BOOLEAN
const MIXERCONTROL_CONTROLTYPE_SIGNEDMETER = (MIXERCONTROL_CT_CLASS_METER or MIXERCONTROL_CT_SC_METER_POLLED) or MIXERCONTROL_CT_UNITS_SIGNED
const MIXERCONTROL_CONTROLTYPE_PEAKMETER = MIXERCONTROL_CONTROLTYPE_SIGNEDMETER + 1
const MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER = (MIXERCONTROL_CT_CLASS_METER or MIXERCONTROL_CT_SC_METER_POLLED) or MIXERCONTROL_CT_UNITS_UNSIGNED
const MIXERCONTROL_CONTROLTYPE_BOOLEAN = (MIXERCONTROL_CT_CLASS_SWITCH or MIXERCONTROL_CT_SC_SWITCH_BOOLEAN) or MIXERCONTROL_CT_UNITS_BOOLEAN
const MIXERCONTROL_CONTROLTYPE_ONOFF = MIXERCONTROL_CONTROLTYPE_BOOLEAN + 1
const MIXERCONTROL_CONTROLTYPE_MUTE = MIXERCONTROL_CONTROLTYPE_BOOLEAN + 2
const MIXERCONTROL_CONTROLTYPE_MONO = MIXERCONTROL_CONTROLTYPE_BOOLEAN + 3
const MIXERCONTROL_CONTROLTYPE_LOUDNESS = MIXERCONTROL_CONTROLTYPE_BOOLEAN + 4
const MIXERCONTROL_CONTROLTYPE_STEREOENH = MIXERCONTROL_CONTROLTYPE_BOOLEAN + 5
const MIXERCONTROL_CONTROLTYPE_BASS_BOOST = MIXERCONTROL_CONTROLTYPE_BOOLEAN + &h00002277
const MIXERCONTROL_CONTROLTYPE_BUTTON = (MIXERCONTROL_CT_CLASS_SWITCH or MIXERCONTROL_CT_SC_SWITCH_BUTTON) or MIXERCONTROL_CT_UNITS_BOOLEAN
const MIXERCONTROL_CONTROLTYPE_DECIBELS = MIXERCONTROL_CT_CLASS_NUMBER or MIXERCONTROL_CT_UNITS_DECIBELS
const MIXERCONTROL_CONTROLTYPE_SIGNED = MIXERCONTROL_CT_CLASS_NUMBER or MIXERCONTROL_CT_UNITS_SIGNED
const MIXERCONTROL_CONTROLTYPE_UNSIGNED = MIXERCONTROL_CT_CLASS_NUMBER or MIXERCONTROL_CT_UNITS_UNSIGNED
const MIXERCONTROL_CONTROLTYPE_PERCENT = MIXERCONTROL_CT_CLASS_NUMBER or MIXERCONTROL_CT_UNITS_PERCENT
const MIXERCONTROL_CONTROLTYPE_SLIDER = MIXERCONTROL_CT_CLASS_SLIDER or MIXERCONTROL_CT_UNITS_SIGNED
const MIXERCONTROL_CONTROLTYPE_PAN = MIXERCONTROL_CONTROLTYPE_SLIDER + 1
const MIXERCONTROL_CONTROLTYPE_QSOUNDPAN = MIXERCONTROL_CONTROLTYPE_SLIDER + 2
const MIXERCONTROL_CONTROLTYPE_FADER = MIXERCONTROL_CT_CLASS_FADER or MIXERCONTROL_CT_UNITS_UNSIGNED
const MIXERCONTROL_CONTROLTYPE_VOLUME = MIXERCONTROL_CONTROLTYPE_FADER + 1
const MIXERCONTROL_CONTROLTYPE_BASS = MIXERCONTROL_CONTROLTYPE_FADER + 2
const MIXERCONTROL_CONTROLTYPE_TREBLE = MIXERCONTROL_CONTROLTYPE_FADER + 3
const MIXERCONTROL_CONTROLTYPE_EQUALIZER = MIXERCONTROL_CONTROLTYPE_FADER + 4
const MIXERCONTROL_CONTROLTYPE_SINGLESELECT = (MIXERCONTROL_CT_CLASS_LIST or MIXERCONTROL_CT_SC_LIST_SINGLE) or MIXERCONTROL_CT_UNITS_BOOLEAN
const MIXERCONTROL_CONTROLTYPE_MUX = MIXERCONTROL_CONTROLTYPE_SINGLESELECT + 1
const MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT = (MIXERCONTROL_CT_CLASS_LIST or MIXERCONTROL_CT_SC_LIST_MULTIPLE) or MIXERCONTROL_CT_UNITS_BOOLEAN
const MIXERCONTROL_CONTROLTYPE_MIXER = MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT + 1
const MIXERCONTROL_CONTROLTYPE_MICROTIME = (MIXERCONTROL_CT_CLASS_TIME or MIXERCONTROL_CT_SC_TIME_MICROSECS) or MIXERCONTROL_CT_UNITS_UNSIGNED
const MIXERCONTROL_CONTROLTYPE_MILLITIME = (MIXERCONTROL_CT_CLASS_TIME or MIXERCONTROL_CT_SC_TIME_MILLISECS) or MIXERCONTROL_CT_UNITS_UNSIGNED

type tagMIXERLINECONTROLSA field = 1
 cbStruct as DWORD
 dwLineID as DWORD

 union field = 1
 dwControlID as DWORD
 dwControlType as DWORD
 end union

 cControls as DWORD
 cbmxctrl as DWORD
 pamxctrl as LPMIXERCONTROLA
end type

type MIXERLINECONTROLSA as tagMIXERLINECONTROLSA
type PMIXERLINECONTROLSA as tagMIXERLINECONTROLSA ptr
type LPMIXERLINECONTROLSA as tagMIXERLINECONTROLSA ptr

type tagMIXERLINECONTROLSW field = 1
 cbStruct as DWORD
 dwLineID as DWORD

 union field = 1
 dwControlID as DWORD
 dwControlType as DWORD
 end union

 cControls as DWORD
 cbmxctrl as DWORD
 pamxctrl as LPMIXERCONTROLW
end type

type MIXERLINECONTROLSW as tagMIXERLINECONTROLSW
type PMIXERLINECONTROLSW as tagMIXERLINECONTROLSW ptr
type LPMIXERLINECONTROLSW as tagMIXERLINECONTROLSW ptr

 type MIXERLINECONTROLS as MIXERLINECONTROLSA
 type PMIXERLINECONTROLS as PMIXERLINECONTROLSA
 type LPMIXERLINECONTROLS as LPMIXERLINECONTROLSA

declare function mixerGetLineControlsA(byval hmxobj as HMIXEROBJ, byval pmxlc as LPMIXERLINECONTROLSA, byval fdwControls as DWORD) as MMRESULT
declare function mixerGetLineControlsW(byval hmxobj as HMIXEROBJ, byval pmxlc as LPMIXERLINECONTROLSW, byval fdwControls as DWORD) as MMRESULT

 declare function mixerGetLineControls alias "mixerGetLineControlsA"(byval hmxobj as HMIXEROBJ, byval pmxlc as LPMIXERLINECONTROLSA, byval fdwControls as DWORD) as MMRESULT

const MIXER_GETLINECONTROLSF_ALL = &h000000000
const MIXER_GETLINECONTROLSF_ONEBYID = &h00000001
const MIXER_GETLINECONTROLSF_ONEBYTYPE = &h00000002
const MIXER_GETLINECONTROLSF_QUERYMASK = &h0000000F

type tMIXERCONTROLDETAILS field = 1
 cbStruct as DWORD
 dwControlID as DWORD
 cChannels as DWORD

 union field = 1
 hwndOwner as HWND
 cMultipleItems as DWORD
 end union

 cbDetails as DWORD
 paDetails as LPVOID
end type

type MIXERCONTROLDETAILS as tMIXERCONTROLDETAILS
type PMIXERCONTROLDETAILS as tMIXERCONTROLDETAILS ptr
type LPMIXERCONTROLDETAILS as tMIXERCONTROLDETAILS ptr

type tagMIXERCONTROLDETAILS_LISTTEXTA field = 1
 dwParam1 as DWORD
 dwParam2 as DWORD
 szName as zstring * 64
end type

type MIXERCONTROLDETAILS_LISTTEXTA as tagMIXERCONTROLDETAILS_LISTTEXTA
type PMIXERCONTROLDETAILS_LISTTEXTA as tagMIXERCONTROLDETAILS_LISTTEXTA ptr
type LPMIXERCONTROLDETAILS_LISTTEXTA as tagMIXERCONTROLDETAILS_LISTTEXTA ptr

type tagMIXERCONTROLDETAILS_LISTTEXTW field = 1
 dwParam1 as DWORD
 dwParam2 as DWORD
 szName as wstring * 64
end type

type MIXERCONTROLDETAILS_LISTTEXTW as tagMIXERCONTROLDETAILS_LISTTEXTW
type PMIXERCONTROLDETAILS_LISTTEXTW as tagMIXERCONTROLDETAILS_LISTTEXTW ptr
type LPMIXERCONTROLDETAILS_LISTTEXTW as tagMIXERCONTROLDETAILS_LISTTEXTW ptr

 type MIXERCONTROLDETAILS_LISTTEXT as MIXERCONTROLDETAILS_LISTTEXTA
 type PMIXERCONTROLDETAILS_LISTTEXT as PMIXERCONTROLDETAILS_LISTTEXTA
 type LPMIXERCONTROLDETAILS_LISTTEXT as LPMIXERCONTROLDETAILS_LISTTEXTA

type tMIXERCONTROLDETAILS_BOOLEAN field = 1
 fValue as LONG
end type

type MIXERCONTROLDETAILS_BOOLEAN as tMIXERCONTROLDETAILS_BOOLEAN
type PMIXERCONTROLDETAILS_BOOLEAN as tMIXERCONTROLDETAILS_BOOLEAN ptr
type LPMIXERCONTROLDETAILS_BOOLEAN as tMIXERCONTROLDETAILS_BOOLEAN ptr

type tMIXERCONTROLDETAILS_SIGNED field = 1
 lValue as LONG
end type

type MIXERCONTROLDETAILS_SIGNED as tMIXERCONTROLDETAILS_SIGNED
type PMIXERCONTROLDETAILS_SIGNED as tMIXERCONTROLDETAILS_SIGNED ptr
type LPMIXERCONTROLDETAILS_SIGNED as tMIXERCONTROLDETAILS_SIGNED ptr

type tMIXERCONTROLDETAILS_UNSIGNED field = 1
 dwValue as DWORD
end type

type MIXERCONTROLDETAILS_UNSIGNED as tMIXERCONTROLDETAILS_UNSIGNED
type PMIXERCONTROLDETAILS_UNSIGNED as tMIXERCONTROLDETAILS_UNSIGNED ptr
type LPMIXERCONTROLDETAILS_UNSIGNED as tMIXERCONTROLDETAILS_UNSIGNED ptr
declare function mixerGetControlDetailsA(byval hmxobj as HMIXEROBJ, byval pmxcd as LPMIXERCONTROLDETAILS, byval fdwDetails as DWORD) as MMRESULT
declare function mixerGetControlDetailsW(byval hmxobj as HMIXEROBJ, byval pmxcd as LPMIXERCONTROLDETAILS, byval fdwDetails as DWORD) as MMRESULT

 declare function mixerGetControlDetails alias "mixerGetControlDetailsA"(byval hmxobj as HMIXEROBJ, byval pmxcd as LPMIXERCONTROLDETAILS, byval fdwDetails as DWORD) as MMRESULT

const MIXER_GETCONTROLDETAILSF_VALUE = &h000000000
const MIXER_GETCONTROLDETAILSF_LISTTEXT = &h00000001
const MIXER_GETCONTROLDETAILSF_QUERYMASK = &h0000000F
declare function mixerSetControlDetails(byval hmxobj as HMIXEROBJ, byval pmxcd as LPMIXERCONTROLDETAILS, byval fdwDetails as DWORD) as MMRESULT
const MIXER_SETCONTROLDETAILSF_VALUE = &h000000000
const MIXER_SETCONTROLDETAILSF_CUSTOM = &h00000001
const MIXER_SETCONTROLDETAILSF_QUERYMASK = &h0000000F
const TIMERR_NOERROR = 0
const TIMERR_NOCANDO = TIMERR_BASE + 1
const TIMERR_STRUCT = TIMERR_BASE + 33
type LPTIMECALLBACK as sub(byval uTimerID as UINT, byval uMsg as UINT, byval dwUser as DWORD_PTR, byval dw1 as DWORD_PTR, byval dw2 as DWORD_PTR)
const TIME_ONESHOT = &h00000
const TIME_PERIODIC = &h0001
const TIME_CALLBACK_FUNCTION = &h00000
const TIME_CALLBACK_EVENT_SET = &h0010
const TIME_CALLBACK_EVENT_PULSE = &h0020
const TIME_KILL_SYNCHRONOUS = &h0100

type timecaps_tag field = 1
 wPeriodMin as UINT
 wPeriodMax as UINT
end type

type TIMECAPS as timecaps_tag
type PTIMECAPS as timecaps_tag ptr
type NPTIMECAPS as timecaps_tag ptr
type LPTIMECAPS as timecaps_tag ptr

declare function timeGetSystemTime(byval pmmt as LPMMTIME, byval cbmmt as UINT) as MMRESULT
declare function timeGetTime() as DWORD
declare function timeSetEvent(byval uDelay as UINT, byval uResolution as UINT, byval fptc as LPTIMECALLBACK, byval dwUser as DWORD_PTR, byval fuEvent as UINT) as MMRESULT
declare function timeKillEvent(byval uTimerID as UINT) as MMRESULT
declare function timeGetDevCaps(byval ptc as LPTIMECAPS, byval cbtc as UINT) as MMRESULT
declare function timeBeginPeriod(byval uPeriod as UINT) as MMRESULT
declare function timeEndPeriod(byval uPeriod as UINT) as MMRESULT

const JOYERR_NOERROR = 0
const JOYERR_PARMS = JOYERR_BASE + 5
const JOYERR_NOCANDO = JOYERR_BASE + 6
const JOYERR_UNPLUGGED = JOYERR_BASE + 7
const JOY_BUTTON1 = &h0001
const JOY_BUTTON2 = &h0002
const JOY_BUTTON3 = &h0004
const JOY_BUTTON4 = &h0008
const JOY_BUTTON1CHG = &h0100
const JOY_BUTTON2CHG = &h0200
const JOY_BUTTON3CHG = &h0400
const JOY_BUTTON4CHG = &h0800
const JOY_BUTTON5 = &h00000010
const JOY_BUTTON6 = &h00000020
const JOY_BUTTON7 = &h00000040
const JOY_BUTTON8 = &h00000080
const JOY_BUTTON9 = &h00000100
const JOY_BUTTON10 = &h00000200
const JOY_BUTTON11 = &h00000400
const JOY_BUTTON12 = &h00000800
const JOY_BUTTON13 = &h00001000
const JOY_BUTTON14 = &h00002000
const JOY_BUTTON15 = &h00004000
const JOY_BUTTON16 = &h00008000
const JOY_BUTTON17 = &h00010000
const JOY_BUTTON18 = &h00020000
const JOY_BUTTON19 = &h00040000
const JOY_BUTTON20 = &h00080000
const JOY_BUTTON21 = &h00100000
const JOY_BUTTON22 = &h00200000
const JOY_BUTTON23 = &h00400000
const JOY_BUTTON24 = &h00800000
const JOY_BUTTON25 = &h01000000
const JOY_BUTTON26 = &h02000000
const JOY_BUTTON27 = &h04000000
const JOY_BUTTON28 = &h08000000
const JOY_BUTTON29 = &h10000000
const JOY_BUTTON30 = &h20000000
const JOY_BUTTON31 = &h40000000
const JOY_BUTTON32 = &h80000000
const JOY_POVCENTERED = cast(WORD, -1)
const JOY_POVFORWARD = 0
const JOY_POVRIGHT = 9000
const JOY_POVBACKWARD = 18000
const JOY_POVLEFT = 27000
const JOY_RETURNX = &h00000001
const JOY_RETURNY = &h00000002
const JOY_RETURNZ = &h00000004
const JOY_RETURNR = &h00000008
const JOY_RETURNU = &h00000010
const JOY_RETURNV = &h00000020
const JOY_RETURNPOV = &h00000040
const JOY_RETURNBUTTONS = &h00000080
const JOY_RETURNRAWDATA = &h00000100
const JOY_RETURNPOVCTS = &h00000200
const JOY_RETURNCENTERED = &h00000400
const JOY_USEDEADZONE = &h00000800
const JOY_RETURNALL = ((((((JOY_RETURNX or JOY_RETURNY) or JOY_RETURNZ) or JOY_RETURNR) or JOY_RETURNU) or JOY_RETURNV) or JOY_RETURNPOV) or JOY_RETURNBUTTONS
const JOY_CAL_READALWAYS = &h00010000
const JOY_CAL_READXYONLY = &h00020000
const JOY_CAL_READ3 = &h00040000
const JOY_CAL_READ4 = &h00080000
const JOY_CAL_READXONLY = &h00100000
const JOY_CAL_READYONLY = &h00200000
const JOY_CAL_READ5 = &h00400000
const JOY_CAL_READ6 = &h00800000
const JOY_CAL_READZONLY = &h01000000
const JOY_CAL_READRONLY = &h02000000
const JOY_CAL_READUONLY = &h04000000
const JOY_CAL_READVONLY = &h08000000
const JOYSTICKID1 = 0
const JOYSTICKID2 = 1
const JOYCAPS_HASZ = &h0001
const JOYCAPS_HASR = &h0002
const JOYCAPS_HASU = &h0004
const JOYCAPS_HASV = &h0008
const JOYCAPS_HASPOV = &h0010
const JOYCAPS_POV4DIR = &h0020
const JOYCAPS_POVCTS = &h0040

type tagJOYCAPSA field = 1
 wMid as WORD
 wPid as WORD
 szPname as zstring * 32
 wXmin as UINT
 wXmax as UINT
 wYmin as UINT
 wYmax as UINT
 wZmin as UINT
 wZmax as UINT
 wNumButtons as UINT
 wPeriodMin as UINT
 wPeriodMax as UINT
 wRmin as UINT
 wRmax as UINT
 wUmin as UINT
 wUmax as UINT
 wVmin as UINT
 wVmax as UINT
 wCaps as UINT
 wMaxAxes as UINT
 wNumAxes as UINT
 wMaxButtons as UINT
 szRegKey as zstring * 32
 szOEMVxD as zstring * 260
end type

type JOYCAPSA as tagJOYCAPSA
type PJOYCAPSA as tagJOYCAPSA ptr
type NPJOYCAPSA as tagJOYCAPSA ptr
type LPJOYCAPSA as tagJOYCAPSA ptr

type tagJOYCAPSW field = 1
 wMid as WORD
 wPid as WORD
 szPname as wstring * 32
 wXmin as UINT
 wXmax as UINT
 wYmin as UINT
 wYmax as UINT
 wZmin as UINT
 wZmax as UINT
 wNumButtons as UINT
 wPeriodMin as UINT
 wPeriodMax as UINT
 wRmin as UINT
 wRmax as UINT
 wUmin as UINT
 wUmax as UINT
 wVmin as UINT
 wVmax as UINT
 wCaps as UINT
 wMaxAxes as UINT
 wNumAxes as UINT
 wMaxButtons as UINT
 szRegKey as wstring * 32
 szOEMVxD as wstring * 260
end type

type JOYCAPSW as tagJOYCAPSW
type PJOYCAPSW as tagJOYCAPSW ptr
type NPJOYCAPSW as tagJOYCAPSW ptr
type LPJOYCAPSW as tagJOYCAPSW ptr

 type JOYCAPS as JOYCAPSA
 type PJOYCAPS as PJOYCAPSA
 type NPJOYCAPS as NPJOYCAPSA
 type LPJOYCAPS as LPJOYCAPSA

type tagJOYCAPS2A field = 1
 wMid as WORD
 wPid as WORD
 szPname as zstring * 32
 wXmin as UINT
 wXmax as UINT
 wYmin as UINT
 wYmax as UINT
 wZmin as UINT
 wZmax as UINT
 wNumButtons as UINT
 wPeriodMin as UINT
 wPeriodMax as UINT
 wRmin as UINT
 wRmax as UINT
 wUmin as UINT
 wUmax as UINT
 wVmin as UINT
 wVmax as UINT
 wCaps as UINT
 wMaxAxes as UINT
 wNumAxes as UINT
 wMaxButtons as UINT
 szRegKey as zstring * 32
 szOEMVxD as zstring * 260
 ManufacturerGuid as GUID
 ProductGuid as GUID
 NameGuid as GUID
end type

type JOYCAPS2A as tagJOYCAPS2A
type PJOYCAPS2A as tagJOYCAPS2A ptr
type NPJOYCAPS2A as tagJOYCAPS2A ptr
type LPJOYCAPS2A as tagJOYCAPS2A ptr

type tagJOYCAPS2W field = 1
 wMid as WORD
 wPid as WORD
 szPname as wstring * 32
 wXmin as UINT
 wXmax as UINT
 wYmin as UINT
 wYmax as UINT
 wZmin as UINT
 wZmax as UINT
 wNumButtons as UINT
 wPeriodMin as UINT
 wPeriodMax as UINT
 wRmin as UINT
 wRmax as UINT
 wUmin as UINT
 wUmax as UINT
 wVmin as UINT
 wVmax as UINT
 wCaps as UINT
 wMaxAxes as UINT
 wNumAxes as UINT
 wMaxButtons as UINT
 szRegKey as wstring * 32
 szOEMVxD as wstring * 260
 ManufacturerGuid as GUID
 ProductGuid as GUID
 NameGuid as GUID
end type

type JOYCAPS2W as tagJOYCAPS2W
type PJOYCAPS2W as tagJOYCAPS2W ptr
type NPJOYCAPS2W as tagJOYCAPS2W ptr
type LPJOYCAPS2W as tagJOYCAPS2W ptr

 type JOYCAPS2 as JOYCAPS2A
 type PJOYCAPS2 as PJOYCAPS2A
 type NPJOYCAPS2 as NPJOYCAPS2A
 type LPJOYCAPS2 as LPJOYCAPS2A

type joyinfo_tag field = 1
 wXpos as UINT
 wYpos as UINT
 wZpos as UINT
 wButtons as UINT
end type

type JOYINFO as joyinfo_tag
type PJOYINFO as joyinfo_tag ptr
type NPJOYINFO as joyinfo_tag ptr
type LPJOYINFO as joyinfo_tag ptr

type joyinfoex_tag field = 1
 dwSize as DWORD
 dwFlags as DWORD
 dwXpos as DWORD
 dwYpos as DWORD
 dwZpos as DWORD
 dwRpos as DWORD
 dwUpos as DWORD
 dwVpos as DWORD
 dwButtons as DWORD
 dwButtonNumber as DWORD
 dwPOV as DWORD
 dwReserved1 as DWORD
 dwReserved2 as DWORD
end type

type JOYINFOEX as joyinfoex_tag
type PJOYINFOEX as joyinfoex_tag ptr
type NPJOYINFOEX as joyinfoex_tag ptr
type LPJOYINFOEX as joyinfoex_tag ptr

declare function joyGetNumDevs() as UINT
declare function joyGetDevCapsA(byval uJoyID as UINT_PTR, byval pjc as LPJOYCAPSA, byval cbjc as UINT) as MMRESULT
declare function joyGetDevCapsW(byval uJoyID as UINT_PTR, byval pjc as LPJOYCAPSW, byval cbjc as UINT) as MMRESULT

 declare function joyGetDevCaps alias "joyGetDevCapsA"(byval uJoyID as UINT_PTR, byval pjc as LPJOYCAPSA, byval cbjc as UINT) as MMRESULT

declare function joyGetPos(byval uJoyID as UINT, byval pji as LPJOYINFO) as MMRESULT
declare function joyGetPosEx(byval uJoyID as UINT, byval pji as LPJOYINFOEX) as MMRESULT
declare function joyGetThreshold(byval uJoyID as UINT, byval puThreshold as LPUINT) as MMRESULT
declare function joyReleaseCapture(byval uJoyID as UINT) as MMRESULT
declare function joySetCapture(byval hwnd as HWND, byval uJoyID as UINT, byval uPeriod as UINT, byval fChanged as WINBOOL) as MMRESULT
declare function joySetThreshold(byval uJoyID as UINT, byval uThreshold as UINT) as MMRESULT

const MMIOERR_BASE = 256
const MMIOERR_FILENOTFOUND = MMIOERR_BASE + 1
const MMIOERR_OUTOFMEMORY = MMIOERR_BASE + 2
const MMIOERR_CANNOTOPEN = MMIOERR_BASE + 3
const MMIOERR_CANNOTCLOSE = MMIOERR_BASE + 4
const MMIOERR_CANNOTREAD = MMIOERR_BASE + 5
const MMIOERR_CANNOTWRITE = MMIOERR_BASE + 6
const MMIOERR_CANNOTSEEK = MMIOERR_BASE + 7
const MMIOERR_CANNOTEXPAND = MMIOERR_BASE + 8
const MMIOERR_CHUNKNOTFOUND = MMIOERR_BASE + 9
const MMIOERR_UNBUFFERED = MMIOERR_BASE + 10
const MMIOERR_PATHNOTFOUND = MMIOERR_BASE + 11
const MMIOERR_ACCESSDENIED = MMIOERR_BASE + 12
const MMIOERR_SHARINGVIOLATION = MMIOERR_BASE + 13
const MMIOERR_NETWORKERROR = MMIOERR_BASE + 14
const MMIOERR_TOOMANYOPENFILES = MMIOERR_BASE + 15
const MMIOERR_INVALIDFILE = MMIOERR_BASE + 16
type FOURCC as DWORD
type HPSTR as zstring ptr

type HMMIO__ field = 1
 unused as long
end type

type HMMIO as HMMIO__ ptr
type LPMMIOPROC as function(byval lpmmioinfo as LPSTR, byval uMsg as UINT, byval lParam1 as LPARAM, byval lParam2 as LPARAM) as LRESULT

type _MMIOINFO field = 1
 dwFlags as DWORD
 fccIOProc as FOURCC
 pIOProc as LPMMIOPROC
 wErrorRet as UINT
 htask as HTASK
 cchBuffer as LONG
 pchBuffer as HPSTR
 pchNext as HPSTR
 pchEndRead as HPSTR
 pchEndWrite as HPSTR
 lBufOffset as LONG
 lDiskOffset as LONG
 adwInfo(0 to 2) as DWORD
 dwReserved1 as DWORD
 dwReserved2 as DWORD
 hmmio as HMMIO
end type

type MMIOINFO as _MMIOINFO
type PMMIOINFO as _MMIOINFO ptr
type NPMMIOINFO as _MMIOINFO ptr
type LPMMIOINFO as _MMIOINFO ptr
type LPCMMIOINFO as const MMIOINFO ptr

type _MMCKINFO field = 1
 ckid as FOURCC
 cksize as DWORD
 fccType as FOURCC
 dwDataOffset as DWORD
 dwFlags as DWORD
end type

type MMCKINFO as _MMCKINFO
type PMMCKINFO as _MMCKINFO ptr
type NPMMCKINFO as _MMCKINFO ptr
type LPMMCKINFO as _MMCKINFO ptr
type LPCMMCKINFO as const MMCKINFO ptr

const MMIO_RWMODE = &h00000003
const MMIO_SHAREMODE = &h00000070
const MMIO_CREATE = &h00001000
const MMIO_PARSE = &h00000100
const MMIO_DELETE = &h00000200
const MMIO_EXIST = &h00004000
const MMIO_ALLOCBUF = &h00010000
const MMIO_GETTEMP = &h00020000
const MMIO_DIRTY = &h10000000
const MMIO_READ = &h000000000
const MMIO_WRITE = &h00000001
const MMIO_READWRITE = &h00000002
const MMIO_COMPAT = &h000000000
const MMIO_EXCLUSIVE = &h00000010
const MMIO_DENYWRITE = &h00000020
const MMIO_DENYREAD = &h00000030
const MMIO_DENYNONE = &h00000040
const MMIO_FHOPEN = &h0010
const MMIO_EMPTYBUF = &h0010
const MMIO_TOUPPER = &h0010
const MMIO_INSTALLPROC = &h00010000
const MMIO_GLOBALPROC = &h10000000
const MMIO_REMOVEPROC = &h00020000
const MMIO_UNICODEPROC = &h01000000
const MMIO_FINDPROC = &h00040000
const MMIO_FINDCHUNK = &h0010
const MMIO_FINDRIFF = &h0020
const MMIO_FINDLIST = &h0040
const MMIO_CREATERIFF = &h0020
const MMIO_CREATELIST = &h0040
const MMIOM_READ = MMIO_READ
const MMIOM_WRITE = MMIO_WRITE
const MMIOM_SEEK = 2
const MMIOM_OPEN = 3
const MMIOM_CLOSE = 4
const MMIOM_WRITEFLUSH = 5
const MMIOM_RENAME = 6
const MMIOM_USER = &h8000
const MMIO_DEFAULTBUFFER = 8192
declare function mmioStringToFOURCCA(byval sz as LPCSTR, byval uFlags as UINT) as FOURCC
declare function mmioStringToFOURCCW(byval sz as LPCWSTR, byval uFlags as UINT) as FOURCC

 declare function mmioStringToFOURCC alias "mmioStringToFOURCCA"(byval sz as LPCSTR, byval uFlags as UINT) as FOURCC

declare function mmioInstallIOProcA(byval fccIOProc as FOURCC, byval pIOProc as LPMMIOPROC, byval dwFlags as DWORD) as LPMMIOPROC
declare function mmioInstallIOProcW(byval fccIOProc as FOURCC, byval pIOProc as LPMMIOPROC, byval dwFlags as DWORD) as LPMMIOPROC

 declare function mmioInstallIOProc alias "mmioInstallIOProcA"(byval fccIOProc as FOURCC, byval pIOProc as LPMMIOPROC, byval dwFlags as DWORD) as LPMMIOPROC

declare function mmioOpenA(byval pszFileName as LPSTR, byval pmmioinfo as LPMMIOINFO, byval fdwOpen as DWORD) as HMMIO
declare function mmioOpenW(byval pszFileName as LPWSTR, byval pmmioinfo as LPMMIOINFO, byval fdwOpen as DWORD) as HMMIO

 declare function mmioOpen alias "mmioOpenA"(byval pszFileName as LPSTR, byval pmmioinfo as LPMMIOINFO, byval fdwOpen as DWORD) as HMMIO

declare function mmioRenameA(byval pszFileName as LPCSTR, byval pszNewFileName as LPCSTR, byval pmmioinfo as LPCMMIOINFO, byval fdwRename as DWORD) as MMRESULT
declare function mmioRenameW(byval pszFileName as LPCWSTR, byval pszNewFileName as LPCWSTR, byval pmmioinfo as LPCMMIOINFO, byval fdwRename as DWORD) as MMRESULT

 declare function mmioRename alias "mmioRenameA"(byval pszFileName as LPCSTR, byval pszNewFileName as LPCSTR, byval pmmioinfo as LPCMMIOINFO, byval fdwRename as DWORD) as MMRESULT

declare function mmioClose(byval hmmio as HMMIO, byval fuClose as UINT) as MMRESULT
declare function mmioRead(byval hmmio as HMMIO, byval pch as HPSTR, byval cch as LONG) as LONG
declare function mmioWrite(byval hmmio as HMMIO, byval pch as const zstring ptr, byval cch as LONG) as LONG
declare function mmioSeek(byval hmmio as HMMIO, byval lOffset as LONG, byval iOrigin as long) as LONG
declare function mmioGetInfo(byval hmmio as HMMIO, byval pmmioinfo as LPMMIOINFO, byval fuInfo as UINT) as MMRESULT
declare function mmioSetInfo(byval hmmio as HMMIO, byval pmmioinfo as LPCMMIOINFO, byval fuInfo as UINT) as MMRESULT
declare function mmioSetBuffer(byval hmmio as HMMIO, byval pchBuffer as LPSTR, byval cchBuffer as LONG, byval fuBuffer as UINT) as MMRESULT
declare function mmioFlush(byval hmmio as HMMIO, byval fuFlush as UINT) as MMRESULT
declare function mmioAdvance(byval hmmio as HMMIO, byval pmmioinfo as LPMMIOINFO, byval fuAdvance as UINT) as MMRESULT
declare function mmioSendMessage(byval hmmio as HMMIO, byval uMsg as UINT, byval lParam1 as LPARAM, byval lParam2 as LPARAM) as LRESULT
declare function mmioDescend(byval hmmio as HMMIO, byval pmmcki as LPMMCKINFO, byval pmmckiParent as const MMCKINFO ptr, byval fuDescend as UINT) as MMRESULT
declare function mmioAscend(byval hmmio as HMMIO, byval pmmcki as LPMMCKINFO, byval fuAscend as UINT) as MMRESULT
declare function mmioCreateChunk(byval hmmio as HMMIO, byval pmmcki as LPMMCKINFO, byval fuCreate as UINT) as MMRESULT
type MCIERROR as DWORD
type MCIDEVICEID as UINT
type YIELDPROC as function(byval mciId as MCIDEVICEID, byval dwYieldData as DWORD) as UINT
declare function mciSendCommandA(byval mciId as MCIDEVICEID, byval uMsg as UINT, byval dwParam1 as DWORD_PTR, byval dwParam2 as DWORD_PTR) as MCIERROR
declare function mciSendCommandW(byval mciId as MCIDEVICEID, byval uMsg as UINT, byval dwParam1 as DWORD_PTR, byval dwParam2 as DWORD_PTR) as MCIERROR

 declare function mciSendCommand alias "mciSendCommandA"(byval mciId as MCIDEVICEID, byval uMsg as UINT, byval dwParam1 as DWORD_PTR, byval dwParam2 as DWORD_PTR) as MCIERROR

declare function mciSendStringA(byval lpstrCommand as LPCSTR, byval lpstrReturnString as LPSTR, byval uReturnLength as UINT, byval hwndCallback as HWND) as MCIERROR
declare function mciSendStringW(byval lpstrCommand as LPCWSTR, byval lpstrReturnString as LPWSTR, byval uReturnLength as UINT, byval hwndCallback as HWND) as MCIERROR

 declare function mciSendString alias "mciSendStringA"(byval lpstrCommand as LPCSTR, byval lpstrReturnString as LPSTR, byval uReturnLength as UINT, byval hwndCallback as HWND) as MCIERROR

declare function mciGetDeviceIDA(byval pszDevice as LPCSTR) as MCIDEVICEID
declare function mciGetDeviceIDW(byval pszDevice as LPCWSTR) as MCIDEVICEID

 declare function mciGetDeviceID alias "mciGetDeviceIDA"(byval pszDevice as LPCSTR) as MCIDEVICEID

declare function mciGetDeviceIDFromElementIDA(byval dwElementID as DWORD, byval lpstrType as LPCSTR) as MCIDEVICEID
declare function mciGetDeviceIDFromElementIDW(byval dwElementID as DWORD, byval lpstrType as LPCWSTR) as MCIDEVICEID

 declare function mciGetDeviceIDFromElementID alias "mciGetDeviceIDFromElementIDA"(byval dwElementID as DWORD, byval lpstrType as LPCSTR) as MCIDEVICEID

declare function mciGetErrorStringA(byval mcierr as MCIERROR, byval pszText as LPSTR, byval cchText as UINT) as WINBOOL
declare function mciGetErrorStringW(byval mcierr as MCIERROR, byval pszText as LPWSTR, byval cchText as UINT) as WINBOOL

 declare function mciGetErrorString alias "mciGetErrorStringA"(byval mcierr as MCIERROR, byval pszText as LPSTR, byval cchText as UINT) as WINBOOL

declare function mciSetYieldProc(byval mciId as MCIDEVICEID, byval fpYieldProc as YIELDPROC, byval dwYieldData as DWORD) as WINBOOL
declare function mciGetCreatorTask(byval mciId as MCIDEVICEID) as HTASK
declare function mciGetYieldProc(byval mciId as MCIDEVICEID, byval pdwYieldData as LPDWORD) as YIELDPROC

const MCIERR_INVALID_DEVICE_ID = MCIERR_BASE + 1
const MCIERR_UNRECOGNIZED_KEYWORD = MCIERR_BASE + 3
const MCIERR_UNRECOGNIZED_COMMAND = MCIERR_BASE + 5
const MCIERR_HARDWARE = MCIERR_BASE + 6
const MCIERR_INVALID_DEVICE_NAME = MCIERR_BASE + 7
const MCIERR_OUT_OF_MEMORY = MCIERR_BASE + 8
const MCIERR_DEVICE_OPEN = MCIERR_BASE + 9
const MCIERR_CANNOT_LOAD_DRIVER = MCIERR_BASE + 10
const MCIERR_MISSING_COMMAND_STRING = MCIERR_BASE + 11
const MCIERR_PARAM_OVERFLOW = MCIERR_BASE + 12
const MCIERR_MISSING_STRING_ARGUMENT = MCIERR_BASE + 13
const MCIERR_BAD_INTEGER = MCIERR_BASE + 14
const MCIERR_PARSER_INTERNAL = MCIERR_BASE + 15
const MCIERR_DRIVER_INTERNAL = MCIERR_BASE + 16
const MCIERR_MISSING_PARAMETER = MCIERR_BASE + 17
const MCIERR_UNSUPPORTED_FUNCTION = MCIERR_BASE + 18
const MCIERR_FILE_NOT_FOUND = MCIERR_BASE + 19
const MCIERR_DEVICE_NOT_READY = MCIERR_BASE + 20
const MCIERR_INTERNAL = MCIERR_BASE + 21
const MCIERR_DRIVER = MCIERR_BASE + 22
const MCIERR_CANNOT_USE_ALL = MCIERR_BASE + 23
const MCIERR_MULTIPLE = MCIERR_BASE + 24
const MCIERR_EXTENSION_NOT_FOUND = MCIERR_BASE + 25
const MCIERR_OUTOFRANGE = MCIERR_BASE + 26
const MCIERR_FLAGS_NOT_COMPATIBLE = MCIERR_BASE + 28
const MCIERR_FILE_NOT_SAVED = MCIERR_BASE + 30
const MCIERR_DEVICE_TYPE_REQUIRED = MCIERR_BASE + 31
const MCIERR_DEVICE_LOCKED = MCIERR_BASE + 32
const MCIERR_DUPLICATE_ALIAS = MCIERR_BASE + 33
const MCIERR_BAD_CONSTANT = MCIERR_BASE + 34
const MCIERR_MUST_USE_SHAREABLE = MCIERR_BASE + 35
const MCIERR_MISSING_DEVICE_NAME = MCIERR_BASE + 36
const MCIERR_BAD_TIME_FORMAT = MCIERR_BASE + 37
const MCIERR_NO_CLOSING_QUOTE = MCIERR_BASE + 38
const MCIERR_DUPLICATE_FLAGS = MCIERR_BASE + 39
const MCIERR_INVALID_FILE = MCIERR_BASE + 40
const MCIERR_NULL_PARAMETER_BLOCK = MCIERR_BASE + 41
const MCIERR_UNNAMED_RESOURCE = MCIERR_BASE + 42
const MCIERR_NEW_REQUIRES_ALIAS = MCIERR_BASE + 43
const MCIERR_NOTIFY_ON_AUTO_OPEN = MCIERR_BASE + 44
const MCIERR_NO_ELEMENT_ALLOWED = MCIERR_BASE + 45
const MCIERR_NONAPPLICABLE_FUNCTION = MCIERR_BASE + 46
const MCIERR_ILLEGAL_FOR_AUTO_OPEN = MCIERR_BASE + 47
const MCIERR_FILENAME_REQUIRED = MCIERR_BASE + 48
const MCIERR_EXTRA_CHARACTERS = MCIERR_BASE + 49
const MCIERR_DEVICE_NOT_INSTALLED = MCIERR_BASE + 50
const MCIERR_GET_CD = MCIERR_BASE + 51
const MCIERR_SET_CD = MCIERR_BASE + 52
const MCIERR_SET_DRIVE = MCIERR_BASE + 53
const MCIERR_DEVICE_LENGTH = MCIERR_BASE + 54
const MCIERR_DEVICE_ORD_LENGTH = MCIERR_BASE + 55
const MCIERR_NO_INTEGER = MCIERR_BASE + 56
const MCIERR_WAVE_OUTPUTSINUSE = MCIERR_BASE + 64
const MCIERR_WAVE_SETOUTPUTINUSE = MCIERR_BASE + 65
const MCIERR_WAVE_INPUTSINUSE = MCIERR_BASE + 66
const MCIERR_WAVE_SETINPUTINUSE = MCIERR_BASE + 67
const MCIERR_WAVE_OUTPUTUNSPECIFIED = MCIERR_BASE + 68
const MCIERR_WAVE_INPUTUNSPECIFIED = MCIERR_BASE + 69
const MCIERR_WAVE_OUTPUTSUNSUITABLE = MCIERR_BASE + 70
const MCIERR_WAVE_SETOUTPUTUNSUITABLE = MCIERR_BASE + 71
const MCIERR_WAVE_INPUTSUNSUITABLE = MCIERR_BASE + 72
const MCIERR_WAVE_SETINPUTUNSUITABLE = MCIERR_BASE + 73
const MCIERR_SEQ_DIV_INCOMPATIBLE = MCIERR_BASE + 80
const MCIERR_SEQ_PORT_INUSE = MCIERR_BASE + 81
const MCIERR_SEQ_PORT_NONEXISTENT = MCIERR_BASE + 82
const MCIERR_SEQ_PORT_MAPNODEVICE = MCIERR_BASE + 83
const MCIERR_SEQ_PORT_MISCERROR = MCIERR_BASE + 84
const MCIERR_SEQ_TIMER = MCIERR_BASE + 85
const MCIERR_SEQ_PORTUNSPECIFIED = MCIERR_BASE + 86
const MCIERR_SEQ_NOMIDIPRESENT = MCIERR_BASE + 87
const MCIERR_NO_WINDOW = MCIERR_BASE + 90
const MCIERR_CREATEWINDOW = MCIERR_BASE + 91
const MCIERR_FILE_READ = MCIERR_BASE + 92
const MCIERR_FILE_WRITE = MCIERR_BASE + 93
const MCIERR_NO_IDENTITY = MCIERR_BASE + 94
const MCIERR_CUSTOM_DRIVER_BASE = MCIERR_BASE + 256
const MCI_FIRST = DRV_MCI_FIRST
const MCI_OPEN = &h0803
const MCI_CLOSE = &h0804
const MCI_ESCAPE = &h0805
const MCI_PLAY = &h0806
const MCI_SEEK = &h0807
const MCI_STOP = &h0808
const MCI_PAUSE = &h0809
const MCI_INFO = &h080A
const MCI_GETDEVCAPS = &h080B
const MCI_SPIN = &h080C
const MCI_SET = &h080D
const MCI_STEP = &h080E
const MCI_RECORD = &h080F
const MCI_SYSINFO = &h0810
const MCI_BREAK = &h0811
const MCI_SAVE = &h0813
const MCI_STATUS = &h0814
const MCI_CUE = &h0830
const MCI_REALIZE = &h0840
const MCI_WINDOW = &h0841
const MCI_PUT = &h0842
const MCI_WHERE = &h0843
const MCI_FREEZE = &h0844
const MCI_UNFREEZE = &h0845
const MCI_LOAD = &h0850
const MCI_CUT = &h0851
const MCI_COPY = &h0852
const MCI_PASTE = &h0853
const MCI_UPDATE = &h0854
const MCI_RESUME = &h0855
const MCI_DELETE = &h0856
const MCI_USER_MESSAGES = DRV_MCI_FIRST + &h400
const MCI_LAST = &h0FFF
const MCI_ALL_DEVICE_ID = cast(MCIDEVICEID, -1)
const MCI_DEVTYPE_VCR = 513
const MCI_DEVTYPE_VIDEODISC = 514
const MCI_DEVTYPE_OVERLAY = 515
const MCI_DEVTYPE_CD_AUDIO = 516
const MCI_DEVTYPE_DAT = 517
const MCI_DEVTYPE_SCANNER = 518
const MCI_DEVTYPE_ANIMATION = 519
const MCI_DEVTYPE_DIGITAL_VIDEO = 520
const MCI_DEVTYPE_OTHER = 521
const MCI_DEVTYPE_WAVEFORM_AUDIO = 522
const MCI_DEVTYPE_SEQUENCER = 523
const MCI_DEVTYPE_FIRST = MCI_DEVTYPE_VCR
const MCI_DEVTYPE_LAST = MCI_DEVTYPE_SEQUENCER
const MCI_DEVTYPE_FIRST_USER = &h1000
const MCI_MODE_NOT_READY = MCI_STRING_OFFSET + 12
const MCI_MODE_STOP = MCI_STRING_OFFSET + 13
const MCI_MODE_PLAY = MCI_STRING_OFFSET + 14
const MCI_MODE_RECORD = MCI_STRING_OFFSET + 15
const MCI_MODE_SEEK = MCI_STRING_OFFSET + 16
const MCI_MODE_PAUSE = MCI_STRING_OFFSET + 17
const MCI_MODE_OPEN = MCI_STRING_OFFSET + 18
const MCI_FORMAT_MILLISECONDS = 0
const MCI_FORMAT_HMS = 1
const MCI_FORMAT_MSF = 2
const MCI_FORMAT_FRAMES = 3
const MCI_FORMAT_SMPTE_24 = 4
const MCI_FORMAT_SMPTE_25 = 5
const MCI_FORMAT_SMPTE_30 = 6
const MCI_FORMAT_SMPTE_30DROP = 7
const MCI_FORMAT_BYTES = 8
const MCI_FORMAT_SAMPLES = 9
const MCI_FORMAT_TMSF = 10
const MCI_NOTIFY_SUCCESSFUL = &h0001
const MCI_NOTIFY_SUPERSEDED = &h0002
const MCI_NOTIFY_ABORTED = &h0004
const MCI_NOTIFY_FAILURE = &h0008
const MCI_NOTIFY = &h00000001
const MCI_WAIT = &h00000002
const MCI_FROM = &h00000004
const MCI_TO = &h00000008
const MCI_TRACK = &h00000010
const MCI_OPEN_SHAREABLE = &h00000100
const MCI_OPEN_ELEMENT = &h00000200
const MCI_OPEN_ALIAS = &h00000400
const MCI_OPEN_ELEMENT_ID = &h00000800
const MCI_OPEN_TYPE_ID = &h00001000
const MCI_OPEN_TYPE = &h00002000
const MCI_SEEK_TO_START = &h00000100
const MCI_SEEK_TO_END = &h00000200
const MCI_STATUS_ITEM = &h00000100
const MCI_STATUS_START = &h00000200
const MCI_STATUS_LENGTH = &h00000001
const MCI_STATUS_POSITION = &h00000002
const MCI_STATUS_NUMBER_OF_TRACKS = &h00000003
const MCI_STATUS_MODE = &h00000004
const MCI_STATUS_MEDIA_PRESENT = &h00000005
const MCI_STATUS_TIME_FORMAT = &h00000006
const MCI_STATUS_READY = &h00000007
const MCI_STATUS_CURRENT_TRACK = &h00000008
const MCI_INFO_PRODUCT = &h00000100
const MCI_INFO_FILE = &h00000200
const MCI_INFO_MEDIA_UPC = &h00000400
const MCI_INFO_MEDIA_IDENTITY = &h00000800
const MCI_INFO_NAME = &h00001000
const MCI_INFO_COPYRIGHT = &h00002000
const MCI_GETDEVCAPS_ITEM = &h00000100
const MCI_GETDEVCAPS_CAN_RECORD = &h00000001
const MCI_GETDEVCAPS_HAS_AUDIO = &h00000002
const MCI_GETDEVCAPS_HAS_VIDEO = &h00000003
const MCI_GETDEVCAPS_DEVICE_TYPE = &h00000004
const MCI_GETDEVCAPS_USES_FILES = &h00000005
const MCI_GETDEVCAPS_COMPOUND_DEVICE = &h00000006
const MCI_GETDEVCAPS_CAN_EJECT = &h00000007
const MCI_GETDEVCAPS_CAN_PLAY = &h00000008
const MCI_GETDEVCAPS_CAN_SAVE = &h00000009
const MCI_SYSINFO_QUANTITY = &h00000100
const MCI_SYSINFO_OPEN = &h00000200
const MCI_SYSINFO_NAME = &h00000400
const MCI_SYSINFO_INSTALLNAME = &h00000800
const MCI_SET_DOOR_OPEN = &h00000100
const MCI_SET_DOOR_CLOSED = &h00000200
const MCI_SET_TIME_FORMAT = &h00000400
const MCI_SET_AUDIO = &h00000800
const MCI_SET_VIDEO = &h00001000
const MCI_SET_ON = &h00002000
const MCI_SET_OFF = &h00004000
const MCI_SET_AUDIO_ALL = &h000000000
const MCI_SET_AUDIO_LEFT = &h00000001
const MCI_SET_AUDIO_RIGHT = &h00000002
const MCI_BREAK_KEY = &h00000100
const MCI_BREAK_HWND = &h00000200
const MCI_BREAK_OFF = &h00000400
const MCI_RECORD_INSERT = &h00000100
const MCI_RECORD_OVERWRITE = &h00000200
const MCI_SAVE_FILE = &h00000100
const MCI_LOAD_FILE = &h00000100

type tagMCI_GENERIC_PARMS field = 1
 dwCallback as DWORD_PTR
end type

type MCI_GENERIC_PARMS as tagMCI_GENERIC_PARMS
type PMCI_GENERIC_PARMS as tagMCI_GENERIC_PARMS ptr
type LPMCI_GENERIC_PARMS as tagMCI_GENERIC_PARMS ptr

type tagMCI_OPEN_PARMSA field = 1
 dwCallback as DWORD_PTR
 wDeviceID as MCIDEVICEID
 lpstrDeviceType as LPCSTR
 lpstrElementName as LPCSTR
 lpstrAlias as LPCSTR
end type

type MCI_OPEN_PARMSA as tagMCI_OPEN_PARMSA
type PMCI_OPEN_PARMSA as tagMCI_OPEN_PARMSA ptr
type LPMCI_OPEN_PARMSA as tagMCI_OPEN_PARMSA ptr

type tagMCI_OPEN_PARMSW field = 1
 dwCallback as DWORD_PTR
 wDeviceID as MCIDEVICEID
 lpstrDeviceType as LPCWSTR
 lpstrElementName as LPCWSTR
 lpstrAlias as LPCWSTR
end type

type MCI_OPEN_PARMSW as tagMCI_OPEN_PARMSW
type PMCI_OPEN_PARMSW as tagMCI_OPEN_PARMSW ptr
type LPMCI_OPEN_PARMSW as tagMCI_OPEN_PARMSW ptr

 type MCI_OPEN_PARMS as MCI_OPEN_PARMSA
 type PMCI_OPEN_PARMS as PMCI_OPEN_PARMSA
 type LPMCI_OPEN_PARMS as LPMCI_OPEN_PARMSA

type tagMCI_PLAY_PARMS field = 1
 dwCallback as DWORD_PTR
 dwFrom as DWORD
 dwTo as DWORD
end type

type MCI_PLAY_PARMS as tagMCI_PLAY_PARMS
type PMCI_PLAY_PARMS as tagMCI_PLAY_PARMS ptr
type LPMCI_PLAY_PARMS as tagMCI_PLAY_PARMS ptr

type tagMCI_SEEK_PARMS field = 1
 dwCallback as DWORD_PTR
 dwTo as DWORD
end type

type MCI_SEEK_PARMS as tagMCI_SEEK_PARMS
type PMCI_SEEK_PARMS as tagMCI_SEEK_PARMS ptr
type LPMCI_SEEK_PARMS as tagMCI_SEEK_PARMS ptr

type tagMCI_STATUS_PARMS field = 1
 dwCallback as DWORD_PTR
 dwReturn as DWORD_PTR
 dwItem as DWORD
 dwTrack as DWORD
end type

type MCI_STATUS_PARMS as tagMCI_STATUS_PARMS
type PMCI_STATUS_PARMS as tagMCI_STATUS_PARMS ptr
type LPMCI_STATUS_PARMS as tagMCI_STATUS_PARMS ptr

type tagMCI_INFO_PARMSA field = 1
 dwCallback as DWORD_PTR
 lpstrReturn as LPSTR
 dwRetSize as DWORD
end type

type MCI_INFO_PARMSA as tagMCI_INFO_PARMSA
type LPMCI_INFO_PARMSA as tagMCI_INFO_PARMSA ptr

type tagMCI_INFO_PARMSW field = 1
 dwCallback as DWORD_PTR
 lpstrReturn as LPWSTR
 dwRetSize as DWORD
end type

type MCI_INFO_PARMSW as tagMCI_INFO_PARMSW
type LPMCI_INFO_PARMSW as tagMCI_INFO_PARMSW ptr

 type MCI_INFO_PARMS as MCI_INFO_PARMSA
 type LPMCI_INFO_PARMS as LPMCI_INFO_PARMSA

type tagMCI_GETDEVCAPS_PARMS field = 1
 dwCallback as DWORD_PTR
 dwReturn as DWORD
 dwItem as DWORD
end type

type MCI_GETDEVCAPS_PARMS as tagMCI_GETDEVCAPS_PARMS
type PMCI_GETDEVCAPS_PARMS as tagMCI_GETDEVCAPS_PARMS ptr
type LPMCI_GETDEVCAPS_PARMS as tagMCI_GETDEVCAPS_PARMS ptr

type tagMCI_SYSINFO_PARMSA field = 1
 dwCallback as DWORD_PTR
 lpstrReturn as LPSTR
 dwRetSize as DWORD
 dwNumber as DWORD
 wDeviceType as UINT
end type

type MCI_SYSINFO_PARMSA as tagMCI_SYSINFO_PARMSA
type PMCI_SYSINFO_PARMSA as tagMCI_SYSINFO_PARMSA ptr
type LPMCI_SYSINFO_PARMSA as tagMCI_SYSINFO_PARMSA ptr

type tagMCI_SYSINFO_PARMSW field = 1
 dwCallback as DWORD_PTR
 lpstrReturn as LPWSTR
 dwRetSize as DWORD
 dwNumber as DWORD
 wDeviceType as UINT
end type

type MCI_SYSINFO_PARMSW as tagMCI_SYSINFO_PARMSW
type PMCI_SYSINFO_PARMSW as tagMCI_SYSINFO_PARMSW ptr
type LPMCI_SYSINFO_PARMSW as tagMCI_SYSINFO_PARMSW ptr

 type MCI_SYSINFO_PARMS as MCI_SYSINFO_PARMSA
 type PMCI_SYSINFO_PARMS as PMCI_SYSINFO_PARMSA
 type LPMCI_SYSINFO_PARMS as LPMCI_SYSINFO_PARMSA

type tagMCI_SET_PARMS field = 1
 dwCallback as DWORD_PTR
 dwTimeFormat as DWORD
 dwAudio as DWORD
end type

type MCI_SET_PARMS as tagMCI_SET_PARMS
type PMCI_SET_PARMS as tagMCI_SET_PARMS ptr
type LPMCI_SET_PARMS as tagMCI_SET_PARMS ptr

type tagMCI_BREAK_PARMS field = 1
 dwCallback as DWORD_PTR
 nVirtKey as long
 hwndBreak as HWND
end type

type MCI_BREAK_PARMS as tagMCI_BREAK_PARMS
type PMCI_BREAK_PARMS as tagMCI_BREAK_PARMS ptr
type LPMCI_BREAK_PARMS as tagMCI_BREAK_PARMS ptr

type tagMCI_SAVE_PARMSA field = 1
 dwCallback as DWORD_PTR
 lpfilename as LPCSTR
end type

type MCI_SAVE_PARMSA as tagMCI_SAVE_PARMSA
type PMCI_SAVE_PARMSA as tagMCI_SAVE_PARMSA ptr
type LPMCI_SAVE_PARMSA as tagMCI_SAVE_PARMSA ptr

type tagMCI_SAVE_PARMSW field = 1
 dwCallback as DWORD_PTR
 lpfilename as LPCWSTR
end type

type MCI_SAVE_PARMSW as tagMCI_SAVE_PARMSW
type PMCI_SAVE_PARMSW as tagMCI_SAVE_PARMSW ptr
type LPMCI_SAVE_PARMSW as tagMCI_SAVE_PARMSW ptr

 type MCI_SAVE_PARMS as MCI_SAVE_PARMSA
 type PMCI_SAVE_PARMS as PMCI_SAVE_PARMSA
 type LPMCI_SAVE_PARMS as LPMCI_SAVE_PARMSA

type tagMCI_LOAD_PARMSA field = 1
 dwCallback as DWORD_PTR
 lpfilename as LPCSTR
end type

type MCI_LOAD_PARMSA as tagMCI_LOAD_PARMSA
type PMCI_LOAD_PARMSA as tagMCI_LOAD_PARMSA ptr
type LPMCI_LOAD_PARMSA as tagMCI_LOAD_PARMSA ptr

type tagMCI_LOAD_PARMSW field = 1
 dwCallback as DWORD_PTR
 lpfilename as LPCWSTR
end type

type MCI_LOAD_PARMSW as tagMCI_LOAD_PARMSW
type PMCI_LOAD_PARMSW as tagMCI_LOAD_PARMSW ptr
type LPMCI_LOAD_PARMSW as tagMCI_LOAD_PARMSW ptr

 type MCI_LOAD_PARMS as MCI_LOAD_PARMSA
 type PMCI_LOAD_PARMS as PMCI_LOAD_PARMSA
 type LPMCI_LOAD_PARMS as LPMCI_LOAD_PARMSA

type tagMCI_RECORD_PARMS field = 1
 dwCallback as DWORD_PTR
 dwFrom as DWORD
 dwTo as DWORD
end type

type MCI_RECORD_PARMS as tagMCI_RECORD_PARMS
type LPMCI_RECORD_PARMS as tagMCI_RECORD_PARMS ptr
const MCI_VD_MODE_PARK = MCI_VD_OFFSET + 1
const MCI_VD_MEDIA_CLV = MCI_VD_OFFSET + 2
const MCI_VD_MEDIA_CAV = MCI_VD_OFFSET + 3
const MCI_VD_MEDIA_OTHER = MCI_VD_OFFSET + 4
const MCI_VD_FORMAT_TRACK = &h4001
const MCI_VD_PLAY_REVERSE = &h00010000
const MCI_VD_PLAY_FAST = &h00020000
const MCI_VD_PLAY_SPEED = &h00040000
const MCI_VD_PLAY_SCAN = &h00080000
const MCI_VD_PLAY_SLOW = &h00100000
const MCI_VD_SEEK_REVERSE = &h00010000
const MCI_VD_STATUS_SPEED = &h00004002
const MCI_VD_STATUS_FORWARD = &h00004003
const MCI_VD_STATUS_MEDIA_TYPE = &h00004004
const MCI_VD_STATUS_SIDE = &h00004005
const MCI_VD_STATUS_DISC_SIZE = &h00004006
const MCI_VD_GETDEVCAPS_CLV = &h00010000
const MCI_VD_GETDEVCAPS_CAV = &h00020000
const MCI_VD_SPIN_UP = &h00010000
const MCI_VD_SPIN_DOWN = &h00020000
const MCI_VD_GETDEVCAPS_CAN_REVERSE = &h00004002
const MCI_VD_GETDEVCAPS_FAST_RATE = &h00004003
const MCI_VD_GETDEVCAPS_SLOW_RATE = &h00004004
const MCI_VD_GETDEVCAPS_NORMAL_RATE = &h00004005
const MCI_VD_STEP_FRAMES = &h00010000
const MCI_VD_STEP_REVERSE = &h00020000
const MCI_VD_ESCAPE_STRING = &h00000100

type tagMCI_VD_PLAY_PARMS field = 1
 dwCallback as DWORD_PTR
 dwFrom as DWORD
 dwTo as DWORD
 dwSpeed as DWORD
end type

type MCI_VD_PLAY_PARMS as tagMCI_VD_PLAY_PARMS
type PMCI_VD_PLAY_PARMS as tagMCI_VD_PLAY_PARMS ptr
type LPMCI_VD_PLAY_PARMS as tagMCI_VD_PLAY_PARMS ptr

type tagMCI_VD_STEP_PARMS field = 1
 dwCallback as DWORD_PTR
 dwFrames as DWORD
end type

type MCI_VD_STEP_PARMS as tagMCI_VD_STEP_PARMS
type PMCI_VD_STEP_PARMS as tagMCI_VD_STEP_PARMS ptr
type LPMCI_VD_STEP_PARMS as tagMCI_VD_STEP_PARMS ptr

type tagMCI_VD_ESCAPE_PARMSA field = 1
 dwCallback as DWORD_PTR
 lpstrCommand as LPCSTR
end type

type MCI_VD_ESCAPE_PARMSA as tagMCI_VD_ESCAPE_PARMSA
type PMCI_VD_ESCAPE_PARMSA as tagMCI_VD_ESCAPE_PARMSA ptr
type LPMCI_VD_ESCAPE_PARMSA as tagMCI_VD_ESCAPE_PARMSA ptr

type tagMCI_VD_ESCAPE_PARMSW field = 1
 dwCallback as DWORD_PTR
 lpstrCommand as LPCWSTR
end type

type MCI_VD_ESCAPE_PARMSW as tagMCI_VD_ESCAPE_PARMSW
type PMCI_VD_ESCAPE_PARMSW as tagMCI_VD_ESCAPE_PARMSW ptr
type LPMCI_VD_ESCAPE_PARMSW as tagMCI_VD_ESCAPE_PARMSW ptr

 type MCI_VD_ESCAPE_PARMS as MCI_VD_ESCAPE_PARMSA
 type PMCI_VD_ESCAPE_PARMS as PMCI_VD_ESCAPE_PARMSA
 type LPMCI_VD_ESCAPE_PARMS as LPMCI_VD_ESCAPE_PARMSA

const MCI_CDA_STATUS_TYPE_TRACK = &h00004001
const MCI_CDA_TRACK_AUDIO = MCI_CD_OFFSET + 0
const MCI_CDA_TRACK_OTHER = MCI_CD_OFFSET + 1
const MCI_WAVE_PCM = MCI_WAVE_OFFSET + 0
const MCI_WAVE_MAPPER = MCI_WAVE_OFFSET + 1
const MCI_WAVE_OPEN_BUFFER = &h00010000
const MCI_WAVE_SET_FORMATTAG = &h00010000
const MCI_WAVE_SET_CHANNELS = &h00020000
const MCI_WAVE_SET_SAMPLESPERSEC = &h00040000
const MCI_WAVE_SET_AVGBYTESPERSEC = &h00080000
const MCI_WAVE_SET_BLOCKALIGN = &h00100000
const MCI_WAVE_SET_BITSPERSAMPLE = &h00200000
const MCI_WAVE_INPUT = &h00400000
const MCI_WAVE_OUTPUT = &h00800000
const MCI_WAVE_STATUS_FORMATTAG = &h00004001
const MCI_WAVE_STATUS_CHANNELS = &h00004002
const MCI_WAVE_STATUS_SAMPLESPERSEC = &h00004003
const MCI_WAVE_STATUS_AVGBYTESPERSEC = &h00004004
const MCI_WAVE_STATUS_BLOCKALIGN = &h00004005
const MCI_WAVE_STATUS_BITSPERSAMPLE = &h00004006
const MCI_WAVE_STATUS_LEVEL = &h00004007
const MCI_WAVE_SET_ANYINPUT = &h04000000
const MCI_WAVE_SET_ANYOUTPUT = &h08000000
const MCI_WAVE_GETDEVCAPS_INPUTS = &h00004001
const MCI_WAVE_GETDEVCAPS_OUTPUTS = &h00004002

type tagMCI_WAVE_OPEN_PARMSA field = 1
 dwCallback as DWORD_PTR
 wDeviceID as MCIDEVICEID
 lpstrDeviceType as LPCSTR
 lpstrElementName as LPCSTR
 lpstrAlias as LPCSTR
 dwBufferSeconds as DWORD
end type

type MCI_WAVE_OPEN_PARMSA as tagMCI_WAVE_OPEN_PARMSA
type PMCI_WAVE_OPEN_PARMSA as tagMCI_WAVE_OPEN_PARMSA ptr
type LPMCI_WAVE_OPEN_PARMSA as tagMCI_WAVE_OPEN_PARMSA ptr

type tagMCI_WAVE_OPEN_PARMSW field = 1
 dwCallback as DWORD_PTR
 wDeviceID as MCIDEVICEID
 lpstrDeviceType as LPCWSTR
 lpstrElementName as LPCWSTR
 lpstrAlias as LPCWSTR
 dwBufferSeconds as DWORD
end type

type MCI_WAVE_OPEN_PARMSW as tagMCI_WAVE_OPEN_PARMSW
type PMCI_WAVE_OPEN_PARMSW as tagMCI_WAVE_OPEN_PARMSW ptr
type LPMCI_WAVE_OPEN_PARMSW as tagMCI_WAVE_OPEN_PARMSW ptr

 type MCI_WAVE_OPEN_PARMS as MCI_WAVE_OPEN_PARMSA
 type PMCI_WAVE_OPEN_PARMS as PMCI_WAVE_OPEN_PARMSA
 type LPMCI_WAVE_OPEN_PARMS as LPMCI_WAVE_OPEN_PARMSA

type tagMCI_WAVE_DELETE_PARMS field = 1
 dwCallback as DWORD_PTR
 dwFrom as DWORD
 dwTo as DWORD
end type

type MCI_WAVE_DELETE_PARMS as tagMCI_WAVE_DELETE_PARMS
type PMCI_WAVE_DELETE_PARMS as tagMCI_WAVE_DELETE_PARMS ptr
type LPMCI_WAVE_DELETE_PARMS as tagMCI_WAVE_DELETE_PARMS ptr

type tagMCI_WAVE_SET_PARMS field = 1
 dwCallback as DWORD_PTR
 dwTimeFormat as DWORD
 dwAudio as DWORD
 wInput as UINT
 wOutput as UINT
 wFormatTag as WORD
 wReserved2 as WORD
 nChannels as WORD
 wReserved3 as WORD
 nSamplesPerSec as DWORD
 nAvgBytesPerSec as DWORD
 nBlockAlign as WORD
 wReserved4 as WORD
 wBitsPerSample as WORD
 wReserved5 as WORD
end type

type MCI_WAVE_SET_PARMS as tagMCI_WAVE_SET_PARMS
type PMCI_WAVE_SET_PARMS as tagMCI_WAVE_SET_PARMS ptr
type LPMCI_WAVE_SET_PARMS as tagMCI_WAVE_SET_PARMS ptr

const MCI_SEQ_DIV_PPQN = 0 + MCI_SEQ_OFFSET
const MCI_SEQ_DIV_SMPTE_24 = 1 + MCI_SEQ_OFFSET
const MCI_SEQ_DIV_SMPTE_25 = 2 + MCI_SEQ_OFFSET
const MCI_SEQ_DIV_SMPTE_30DROP = 3 + MCI_SEQ_OFFSET
const MCI_SEQ_DIV_SMPTE_30 = 4 + MCI_SEQ_OFFSET
const MCI_SEQ_FORMAT_SONGPTR = &h4001
const MCI_SEQ_FILE = &h4002
const MCI_SEQ_MIDI = &h4003
const MCI_SEQ_SMPTE = &h4004
const MCI_SEQ_NONE = 65533
const MCI_SEQ_MAPPER = 65535
const MCI_SEQ_STATUS_TEMPO = &h00004002
const MCI_SEQ_STATUS_PORT = &h00004003
const MCI_SEQ_STATUS_SLAVE = &h00004007
const MCI_SEQ_STATUS_MASTER = &h00004008
const MCI_SEQ_STATUS_OFFSET = &h00004009
const MCI_SEQ_STATUS_DIVTYPE = &h0000400A
const MCI_SEQ_STATUS_NAME = &h0000400B
const MCI_SEQ_STATUS_COPYRIGHT = &h0000400C
const MCI_SEQ_SET_TEMPO = &h00010000
const MCI_SEQ_SET_PORT = &h00020000
const MCI_SEQ_SET_SLAVE = &h00040000
const MCI_SEQ_SET_MASTER = &h00080000
const MCI_SEQ_SET_OFFSET = &h01000000

type tagMCI_SEQ_SET_PARMS field = 1
 dwCallback as DWORD_PTR
 dwTimeFormat as DWORD
 dwAudio as DWORD
 dwTempo as DWORD
 dwPort as DWORD
 dwSlave as DWORD
 dwMaster as DWORD
 dwOffset as DWORD
end type

type MCI_SEQ_SET_PARMS as tagMCI_SEQ_SET_PARMS
type PMCI_SEQ_SET_PARMS as tagMCI_SEQ_SET_PARMS ptr
type LPMCI_SEQ_SET_PARMS as tagMCI_SEQ_SET_PARMS ptr

const MCI_ANIM_OPEN_WS = &h00010000
const MCI_ANIM_OPEN_PARENT = &h00020000
const MCI_ANIM_OPEN_NOSTATIC = &h00040000
const MCI_ANIM_PLAY_SPEED = &h00010000
const MCI_ANIM_PLAY_REVERSE = &h00020000
const MCI_ANIM_PLAY_FAST = &h00040000
const MCI_ANIM_PLAY_SLOW = &h00080000
const MCI_ANIM_PLAY_SCAN = &h00100000
const MCI_ANIM_STEP_REVERSE = &h00010000
const MCI_ANIM_STEP_FRAMES = &h00020000
const MCI_ANIM_STATUS_SPEED = &h00004001
const MCI_ANIM_STATUS_FORWARD = &h00004002
const MCI_ANIM_STATUS_HWND = &h00004003
const MCI_ANIM_STATUS_HPAL = &h00004004
const MCI_ANIM_STATUS_STRETCH = &h00004005
const MCI_ANIM_INFO_TEXT = &h00010000
const MCI_ANIM_GETDEVCAPS_CAN_REVERSE = &h00004001
const MCI_ANIM_GETDEVCAPS_FAST_RATE = &h00004002
const MCI_ANIM_GETDEVCAPS_SLOW_RATE = &h00004003
const MCI_ANIM_GETDEVCAPS_NORMAL_RATE = &h00004004
const MCI_ANIM_GETDEVCAPS_PALETTES = &h00004006
const MCI_ANIM_GETDEVCAPS_CAN_STRETCH = &h00004007
const MCI_ANIM_GETDEVCAPS_MAX_WINDOWS = &h00004008
const MCI_ANIM_REALIZE_NORM = &h00010000
const MCI_ANIM_REALIZE_BKGD = &h00020000
const MCI_ANIM_WINDOW_HWND = &h00010000
const MCI_ANIM_WINDOW_STATE = &h00040000
const MCI_ANIM_WINDOW_TEXT = &h00080000
const MCI_ANIM_WINDOW_ENABLE_STRETCH = &h00100000
const MCI_ANIM_WINDOW_DISABLE_STRETCH = &h00200000
const MCI_ANIM_WINDOW_DEFAULT = &h000000000
const MCI_ANIM_RECT = &h00010000
const MCI_ANIM_PUT_SOURCE = &h00020000
const MCI_ANIM_PUT_DESTINATION = &h00040000
const MCI_ANIM_WHERE_SOURCE = &h00020000
const MCI_ANIM_WHERE_DESTINATION = &h00040000
const MCI_ANIM_UPDATE_HDC = &h00020000

type tagMCI_ANIM_OPEN_PARMSA field = 1
 dwCallback as DWORD_PTR
 wDeviceID as MCIDEVICEID
 lpstrDeviceType as LPCSTR
 lpstrElementName as LPCSTR
 lpstrAlias as LPCSTR
 dwStyle as DWORD
 hWndParent as HWND
end type

type MCI_ANIM_OPEN_PARMSA as tagMCI_ANIM_OPEN_PARMSA
type PMCI_ANIM_OPEN_PARMSA as tagMCI_ANIM_OPEN_PARMSA ptr
type LPMCI_ANIM_OPEN_PARMSA as tagMCI_ANIM_OPEN_PARMSA ptr

type tagMCI_ANIM_OPEN_PARMSW field = 1
 dwCallback as DWORD_PTR
 wDeviceID as MCIDEVICEID
 lpstrDeviceType as LPCWSTR
 lpstrElementName as LPCWSTR
 lpstrAlias as LPCWSTR
 dwStyle as DWORD
 hWndParent as HWND
end type

type MCI_ANIM_OPEN_PARMSW as tagMCI_ANIM_OPEN_PARMSW
type PMCI_ANIM_OPEN_PARMSW as tagMCI_ANIM_OPEN_PARMSW ptr
type LPMCI_ANIM_OPEN_PARMSW as tagMCI_ANIM_OPEN_PARMSW ptr

 type MCI_ANIM_OPEN_PARMS as MCI_ANIM_OPEN_PARMSA
 type PMCI_ANIM_OPEN_PARMS as PMCI_ANIM_OPEN_PARMSA
 type LPMCI_ANIM_OPEN_PARMS as LPMCI_ANIM_OPEN_PARMSA

type tagMCI_ANIM_PLAY_PARMS field = 1
 dwCallback as DWORD_PTR
 dwFrom as DWORD
 dwTo as DWORD
 dwSpeed as DWORD
end type

type MCI_ANIM_PLAY_PARMS as tagMCI_ANIM_PLAY_PARMS
type PMCI_ANIM_PLAY_PARMS as tagMCI_ANIM_PLAY_PARMS ptr
type LPMCI_ANIM_PLAY_PARMS as tagMCI_ANIM_PLAY_PARMS ptr

type tagMCI_ANIM_STEP_PARMS field = 1
 dwCallback as DWORD_PTR
 dwFrames as DWORD
end type

type MCI_ANIM_STEP_PARMS as tagMCI_ANIM_STEP_PARMS
type PMCI_ANIM_STEP_PARMS as tagMCI_ANIM_STEP_PARMS ptr
type LPMCI_ANIM_STEP_PARMS as tagMCI_ANIM_STEP_PARMS ptr

type tagMCI_ANIM_WINDOW_PARMSA field = 1
 dwCallback as DWORD_PTR
 hWnd as HWND
 nCmdShow as UINT
 lpstrText as LPCSTR
end type

type MCI_ANIM_WINDOW_PARMSA as tagMCI_ANIM_WINDOW_PARMSA
type PMCI_ANIM_WINDOW_PARMSA as tagMCI_ANIM_WINDOW_PARMSA ptr
type LPMCI_ANIM_WINDOW_PARMSA as tagMCI_ANIM_WINDOW_PARMSA ptr

type tagMCI_ANIM_WINDOW_PARMSW field = 1
 dwCallback as DWORD_PTR
 hWnd as HWND
 nCmdShow as UINT
 lpstrText as LPCWSTR
end type

type MCI_ANIM_WINDOW_PARMSW as tagMCI_ANIM_WINDOW_PARMSW
type PMCI_ANIM_WINDOW_PARMSW as tagMCI_ANIM_WINDOW_PARMSW ptr
type LPMCI_ANIM_WINDOW_PARMSW as tagMCI_ANIM_WINDOW_PARMSW ptr

 type MCI_ANIM_WINDOW_PARMS as MCI_ANIM_WINDOW_PARMSA
 type PMCI_ANIM_WINDOW_PARMS as PMCI_ANIM_WINDOW_PARMSA
 type LPMCI_ANIM_WINDOW_PARMS as LPMCI_ANIM_WINDOW_PARMSA

type tagMCI_ANIM_RECT_PARMS field = 1
 dwCallback as DWORD_PTR
 rc as RECT
end type

type MCI_ANIM_RECT_PARMS as tagMCI_ANIM_RECT_PARMS
type PMCI_ANIM_RECT_PARMS as MCI_ANIM_RECT_PARMS ptr
type LPMCI_ANIM_RECT_PARMS as MCI_ANIM_RECT_PARMS ptr

type tagMCI_ANIM_UPDATE_PARMS field = 1
 dwCallback as DWORD_PTR
 rc as RECT
 hDC as HDC
end type

type MCI_ANIM_UPDATE_PARMS as tagMCI_ANIM_UPDATE_PARMS
type PMCI_ANIM_UPDATE_PARMS as tagMCI_ANIM_UPDATE_PARMS ptr
type LPMCI_ANIM_UPDATE_PARMS as tagMCI_ANIM_UPDATE_PARMS ptr

const MCI_OVLY_OPEN_WS = &h00010000
const MCI_OVLY_OPEN_PARENT = &h00020000
const MCI_OVLY_STATUS_HWND = &h00004001
const MCI_OVLY_STATUS_STRETCH = &h00004002
const MCI_OVLY_INFO_TEXT = &h00010000
const MCI_OVLY_GETDEVCAPS_CAN_STRETCH = &h00004001
const MCI_OVLY_GETDEVCAPS_CAN_FREEZE = &h00004002
const MCI_OVLY_GETDEVCAPS_MAX_WINDOWS = &h00004003
const MCI_OVLY_WINDOW_HWND = &h00010000
const MCI_OVLY_WINDOW_STATE = &h00040000
const MCI_OVLY_WINDOW_TEXT = &h00080000
const MCI_OVLY_WINDOW_ENABLE_STRETCH = &h00100000
const MCI_OVLY_WINDOW_DISABLE_STRETCH = &h00200000
const MCI_OVLY_WINDOW_DEFAULT = &h000000000
const MCI_OVLY_RECT = &h00010000
const MCI_OVLY_PUT_SOURCE = &h00020000
const MCI_OVLY_PUT_DESTINATION = &h00040000
const MCI_OVLY_PUT_FRAME = &h00080000
const MCI_OVLY_PUT_VIDEO = &h00100000
const MCI_OVLY_WHERE_SOURCE = &h00020000
const MCI_OVLY_WHERE_DESTINATION = &h00040000
const MCI_OVLY_WHERE_FRAME = &h00080000
const MCI_OVLY_WHERE_VIDEO = &h00100000

type tagMCI_OVLY_OPEN_PARMSA field = 1
 dwCallback as DWORD_PTR
 wDeviceID as MCIDEVICEID
 lpstrDeviceType as LPCSTR
 lpstrElementName as LPCSTR
 lpstrAlias as LPCSTR
 dwStyle as DWORD
 hWndParent as HWND
end type

type MCI_OVLY_OPEN_PARMSA as tagMCI_OVLY_OPEN_PARMSA
type PMCI_OVLY_OPEN_PARMSA as tagMCI_OVLY_OPEN_PARMSA ptr
type LPMCI_OVLY_OPEN_PARMSA as tagMCI_OVLY_OPEN_PARMSA ptr

type tagMCI_OVLY_OPEN_PARMSW field = 1
 dwCallback as DWORD_PTR
 wDeviceID as MCIDEVICEID
 lpstrDeviceType as LPCWSTR
 lpstrElementName as LPCWSTR
 lpstrAlias as LPCWSTR
 dwStyle as DWORD
 hWndParent as HWND
end type

type MCI_OVLY_OPEN_PARMSW as tagMCI_OVLY_OPEN_PARMSW
type PMCI_OVLY_OPEN_PARMSW as tagMCI_OVLY_OPEN_PARMSW ptr
type LPMCI_OVLY_OPEN_PARMSW as tagMCI_OVLY_OPEN_PARMSW ptr

 type MCI_OVLY_OPEN_PARMS as MCI_OVLY_OPEN_PARMSA
 type PMCI_OVLY_OPEN_PARMS as PMCI_OVLY_OPEN_PARMSA
 type LPMCI_OVLY_OPEN_PARMS as LPMCI_OVLY_OPEN_PARMSA

type tagMCI_OVLY_WINDOW_PARMSA field = 1
 dwCallback as DWORD_PTR
 hWnd as HWND
 nCmdShow as UINT
 lpstrText as LPCSTR
end type

type MCI_OVLY_WINDOW_PARMSA as tagMCI_OVLY_WINDOW_PARMSA
type PMCI_OVLY_WINDOW_PARMSA as tagMCI_OVLY_WINDOW_PARMSA ptr
type LPMCI_OVLY_WINDOW_PARMSA as tagMCI_OVLY_WINDOW_PARMSA ptr

type tagMCI_OVLY_WINDOW_PARMSW field = 1
 dwCallback as DWORD_PTR
 hWnd as HWND
 nCmdShow as UINT
 lpstrText as LPCWSTR
end type

type MCI_OVLY_WINDOW_PARMSW as tagMCI_OVLY_WINDOW_PARMSW
type PMCI_OVLY_WINDOW_PARMSW as tagMCI_OVLY_WINDOW_PARMSW ptr
type LPMCI_OVLY_WINDOW_PARMSW as tagMCI_OVLY_WINDOW_PARMSW ptr

 type MCI_OVLY_WINDOW_PARMS as MCI_OVLY_WINDOW_PARMSA
 type PMCI_OVLY_WINDOW_PARMS as PMCI_OVLY_WINDOW_PARMSA
 type LPMCI_OVLY_WINDOW_PARMS as LPMCI_OVLY_WINDOW_PARMSA

type tagMCI_OVLY_RECT_PARMS field = 1
 dwCallback as DWORD_PTR
 rc as RECT
end type

type MCI_OVLY_RECT_PARMS as tagMCI_OVLY_RECT_PARMS
type PMCI_OVLY_RECT_PARMS as tagMCI_OVLY_RECT_PARMS ptr
type LPMCI_OVLY_RECT_PARMS as tagMCI_OVLY_RECT_PARMS ptr

type tagMCI_OVLY_SAVE_PARMSA field = 1
 dwCallback as DWORD_PTR
 lpfilename as LPCSTR
 rc as RECT
end type

type MCI_OVLY_SAVE_PARMSA as tagMCI_OVLY_SAVE_PARMSA
type PMCI_OVLY_SAVE_PARMSA as tagMCI_OVLY_SAVE_PARMSA ptr
type LPMCI_OVLY_SAVE_PARMSA as tagMCI_OVLY_SAVE_PARMSA ptr

type tagMCI_OVLY_SAVE_PARMSW field = 1
 dwCallback as DWORD_PTR
 lpfilename as LPCWSTR
 rc as RECT
end type

type MCI_OVLY_SAVE_PARMSW as tagMCI_OVLY_SAVE_PARMSW
type PMCI_OVLY_SAVE_PARMSW as tagMCI_OVLY_SAVE_PARMSW ptr
type LPMCI_OVLY_SAVE_PARMSW as tagMCI_OVLY_SAVE_PARMSW ptr

 type MCI_OVLY_SAVE_PARMS as MCI_OVLY_SAVE_PARMSA
 type PMCI_OVLY_SAVE_PARMS as PMCI_OVLY_SAVE_PARMSA
 type LPMCI_OVLY_SAVE_PARMS as LPMCI_OVLY_SAVE_PARMSA

type tagMCI_OVLY_LOAD_PARMSA field = 1
 dwCallback as DWORD_PTR
 lpfilename as LPCSTR
 rc as RECT
end type

type MCI_OVLY_LOAD_PARMSA as tagMCI_OVLY_LOAD_PARMSA
type PMCI_OVLY_LOAD_PARMSA as tagMCI_OVLY_LOAD_PARMSA ptr
type LPMCI_OVLY_LOAD_PARMSA as tagMCI_OVLY_LOAD_PARMSA ptr

type tagMCI_OVLY_LOAD_PARMSW field = 1
 dwCallback as DWORD_PTR
 lpfilename as LPCWSTR
 rc as RECT
end type

type MCI_OVLY_LOAD_PARMSW as tagMCI_OVLY_LOAD_PARMSW
type PMCI_OVLY_LOAD_PARMSW as tagMCI_OVLY_LOAD_PARMSW ptr
type LPMCI_OVLY_LOAD_PARMSW as tagMCI_OVLY_LOAD_PARMSW ptr

 type MCI_OVLY_LOAD_PARMS as MCI_OVLY_LOAD_PARMSA
 type PMCI_OVLY_LOAD_PARMS as PMCI_OVLY_LOAD_PARMSA
 type LPMCI_OVLY_LOAD_PARMS as LPMCI_OVLY_LOAD_PARMSA

const NEWTRANSPARENT = 3
const QUERYROPSUPPORT = 40
const SELECTDIB = 41

end extern

#undef HWND_TOPMOST
#undef HWND_NOTOPMOST

extern GfxWin32(290) alias "fb_win32" as any ptr

namespace gfx
 dim shared as long lOrgFbProc,lOldStyle,lScreenFlags
 dim shared as integer g_iScrWid,g_iScrHei,g_lFirstSize,g_iAspect,g_iOffLeft,g_iOffTop
 dim shared as integer g_iCliWid,g_iCliHei
 dim shared as byte g_Temp,g_Fullscreen
 dim shared as string g_sGfxDriver
 dim shared as COLORREF g_BorderColor
 dim shared as point tOldPt = type(-9999,9999)

 declare sub Resize(iWid as integer=0,iHei as integer=0,iCenter as integer=1,iResizable as integer=0)

 private function FbSubClass(hwnd as hwnd,iMsg as integer,wparam as wparam,lparam as lparam) as lresult
 select case iMsg
 case WM_NCCALCSIZE
 if wParam then
 var iResu = DefWindowProc(hWnd,iMsg,wParam,lParam)
 with *cptr(NCCALCSIZE_PARAMS ptr,lParam)
 .rgrc(0).left += g_iOffLeft : .rgrc(0).top += iif(lScreenFlags and fb.GFX_OPENGL,0,g_iOffTop)
 .rgrc(0).right -= g_iOffLeft : .rgrc(0).bottom -= g_iOffTop
 end with
 return iResu
 end if
 case WM_SIZING
 return DefWindowProc(hwnd,imsg,wparam,lparam)
 case WM_SIZE
 if (lScreenFlags and fb.GFX_OPENGL) then
 dim as RECT tRc : GetClientRect(hWnd,@tRc)
 if g_iCliWid <> tRc.right orelse g_iCliHei <> tRc.bottom then
 g_iCliWid = tRc.right : g_iCliHei = tRc.bottom
 if g_tMainCtx.hCtl(wcMain).hwnd andalso IsWindowVisible( g_tMainCtx.hCtl(wcMain).hwnd) then
 SendMessage( g_tMainCtx.hCtl(wcMain).hwnd , WM_USER+1 , 0,0 )
 end if
 end if
 end if
 return DefWindowProc(hwnd,imsg,wparam,lparam)
 case WM_MOVING,WM_MOVE
 dim as point tNewPt : ClientToScreen( hwnd , @tNewPt )
 if tOldPt.x <> tNewPt.x orelse tOldPt.y <> tNewPt.y then
 if g_tMainCtx.hCtl(wcMain).hwnd andalso IsWindowVisible( g_tMainCtx.hCtl(wcMain).hwnd) then
 PostMessage( g_tMainCtx.hCtl(wcMain).hwnd , WM_USER+2 , 0,0 )
 end if
 end if
 DefWindowProc(hwnd,imsg,wparam,lparam)
 case WM_SETCURSOR
 return DefWindowProc(hwnd,imsg,wparam,lparam)
 case WM_LBUTTONUP,WM_LBUTTONDOWN,WM_RBUTTONUP,WM_RBUTTONDOWN,WM_MBUTTONUP,WM_MBUTTONDOWN
 var xPos = cshort( (cuint(lParam) and &h0000FFFF)),yPos = cshort( (cuint(lParam) shr 16))
 dim as rect fbcli = any: GetClientRect(hwnd,@fbcli)
 xPos = cshort((xPos*g_iScrWid)\fbcli.Right)
 yPos = cshort((yPos*g_iScrHei)\fbcli.Bottom)
 lParam = cast(LONG, cast(WORD, cast(DWORD_PTR, (cushort(xPos))) and &hffff) or (cast(DWORD, cast(WORD, cast(DWORD_PTR, (cushort(yPos))) and &hffff)) shl 16))
 case WM_LBUTTONDBLCLK,WM_RBUTTONDBLCLK,WM_MBUTTONDBLCLK
 var xPos = cshort( (cuint(lParam) and &h0000FFFF)),yPos = cshort( (cuint(lParam) shr 16))
 dim as rect fbcli = any: GetClientRect(hwnd,@fbcli)
 xPos = cshort((xPos*g_iScrWid)\fbcli.Right)
 yPos = cshort((yPos*g_iScrHei)\fbcli.Bottom)
 lParam = cast(LONG, cast(WORD, cast(DWORD_PTR, (cushort(xPos))) and &hffff) or (cast(DWORD, cast(WORD, cast(DWORD_PTR, (cushort(yPos))) and &hffff)) shl 16))
 case WM_MOUSEMOVE
 var xPos = cshort( (cuint(lParam) and &h0000FFFF)),yPos = cshort( (cuint(lParam) shr 16))
 dim as rect fbcli = any: GetClientRect(hwnd,@fbcli)
 xPos = cshort((xPos*g_iScrWid)\fbcli.Right)
 yPos = cshort((yPos*g_iScrHei)\fbcli.Bottom)
 lParam = cast(LONG, cast(WORD, cast(DWORD_PTR, (cushort(xPos))) and &hffff) or (cast(DWORD, cast(WORD, cast(DWORD_PTR, (cushort(yPos))) and &hffff)) shl 16))
 case WM_NCHITTEST,WM_NCMOUSEMOVE,12,174,32
 return DefWindowProc(hwnd,imsg,wparam,lparam)
 case WM_GETMINMAXINFO
 return DefWindowProc(hwnd,imsg,wparam,lparam)
 case WM_USER+90
 if lOldStyle then
 g_Fullscreen = 0
 g_iOffLeft = 0 : g_iOffTop=0
 ShowWindow( hwnd , SW_RESTORE )
 SetWindowLong( hwnd , GWL_STYLE , lOldStyle ) : lOldStyle = 0
 SetWindowPos( hwnd , cast(handle, -2) , 0 , 0 , 0 , 0 , SWP_NOMOVE or SWP_NOSIZE or SWP_FRAMECHANGED)
 else
 g_Fullscreen = 1
 var iDeskWid = GetSystemMetrics(SM_CXSCREEN), iDeskHei = GetSystemMetrics(SM_CYSCREEN)
 if g_iAspect then
 screeninfo g_iScrWid,g_iScrHei
 dim as long iWid,iHei
 iHei=iDeskHei : iWid=(iHei*g_iScrWid)\g_iScrHei
 if iWid>iDeskWid then
 iWid=iDeskWid : iHei=(iWid*g_iScrHei)\g_iScrWid
 end if
 g_iOffLeft = (iDeskWid-iWid)\2 : g_iOffTop = (iDeskHei-iHei)\2
 else
 g_iOffLeft = 0 : g_iOffTop = 0
 end if
 lOldStyle = GetWindowLong( hwnd , GWL_STYLE ) or WS_VISIBLE
 SetWindowLong( hwnd , GWL_STYLE , WS_POPUP or WS_VISIBLE)
 ShowWindow( hwnd , SW_MAXIMIZE )
 SetWindowPos( hwnd , cast(handle, -1) , 0 , 0 , 0 , 0 , SWP_NOMOVE or SWP_NOSIZE or SWP_FRAMECHANGED)
 if g_iOffLeft orelse g_iOffTop then
 RedrawWindow( hwnd , NULL , NULL , RDW_FRAME or RDW_INVALIDATE or RDW_NOERASE or RDW_UPDATENOW or RDW_NOCHILDREN )
 end if

 end if
 case else
 end select
 if g_Temp then return DefWindowProc(hwnd,imsg,wparam,lparam)
 return CallWindowProc(cast(any ptr,lOrgFbProc),hwnd,iMsg,wparam,lparam)
 end function
 sub Resize(iWid as integer=0,iHei as integer=0,iAspect as integer=1,iResizable as integer=0)
 static fbWnd as hwnd, fbrct as rect, fbcli as rect
 static iDeskWid as integer,iDeskHei as integer
 dim as hwnd newWnd
 Screencontrol(fb.get_window_handle,*cast(ulong ptr,@newWnd))
 screeninfo g_iScrWid,g_iScrHei
 if newWnd<>fbWnd then
 fbWnd = newWnd
 lOrgFbProc = SetWindowLong(fbWnd,GWL_WNDPROC,clng(@FbSubClass))
 end if

 var iStyle = GetWindowLong(fbwnd,GWL_STYLE)
 if iResizable then iStyle or= WS_SIZEBOX else iStyle and= (not WS_THICKFRAME)
 g_temp=1
 SetWindowLong(fbWnd,GWL_STYLE,iStyle)
 SetWindowPos(fbWnd,0,0,0,0,0,SWP_NOSIZE or SWP_FRAMECHANGED or SWP_NOZORDER or SWP_NOMOVE)
 g_temp=0

 iDeskWid = GetSystemMetrics(SM_CXSCREEN)
 iDeskHei = GetSystemMetrics(SM_CYSCREEN)
 GetWindowRect(fbwnd,@fbrct)
 GetClientRect(fbwnd,@fbcli)

 var iSx = ((fbrct.right-fbrct.left)-(fbcli.right-fbcli.left))
 var iSy = ((fbrct.bottom-fbrct.top)-(fbcli.bottom-fbcli.top))
 var iWid2 = iWid+iSx , iHei2 = iHei+iSy
 var iFlags = SWP_SHOWWINDOW or SWP_NOZORDER or SWP_FRAMECHANGED

 dim as long iLeft,iTop
 if iWid<=0 orelse iHei<=0 then
 iFlags and= (not SWP_NOZORDER)
 if iWid=0 then iWid2 = iDeskWid
 if iHei=0 then iHei2 = iDeskHei
 if iWid<0 andalso iHei>=0 then
 iWid2=iSx+(((iHei2-iSy)*g_iScrWid)\g_iScrHei)
 elseif iHei<0 andalso iWid>=0 then
 iHei2=iSy+(((iWid2-iSx)*g_iScrHei)\g_iScrWid)
 end if
 end if

 if 1 then iLeft = (iDeskWid-iWid2)\2 : iTop = (iDeskHei-iHei2)\2
 g_iAspect = iAspect : g_iOffLeft = 0 : g_iOffTop=0 : lOldStyle=0

 SetWindowPos(fbWnd, cast(handle, -1),iLeft,iTop,iWid2,iHei2,iFlags)

 if g_Fullscreen=0 andalso g_lFirstSize andalso (lScreenFlags and fb.gfx_fullscreen) then
 SendMessage(fbWnd,WM_USER+90,0,0)
 end if

 end sub

end namespace


sub _screenres(iWid as long,iHei as long,depth as long=8,num_pages as long=1,flags as long=0,refresh_rate as long=0)
 gfx.lScreenflags = flags : gfx.g_lFirstSize = 1 : gfx.g_BorderColor = 0 : gfx.g_Fullscreen = 0
 Flags = (flags and (not fb.gfx_fullscreen)) or fb.gfx_No_Switch
 gfx.g_iCliWid = 0: gfx.g_iCliHei=0
 if (flags and fb.gfx_shaped_window) then screencontrol(fb.SET_DRIVER_NAME,"GDI")
 screenres iWid,iHei,depth,num_pages,flags,refresh_rate
 if (flags and fb.gfx_shaped_window) then screencontrol(fb.SET_DRIVER_NAME,"")
 screencontrol(fb.GET_DRIVER_NAME,gfx.g_sGfxDriver)
end sub
#undef screenres

function _SetMouse( x As long = -32768, y As long = -32768, visibility As long = -32768, clip As long = -32768 ) As long
 dim as HWND gfxWnd : Screencontrol(fb.get_window_handle,*cast(uinteger ptr,@gfxWnd))
 if gfxWnd=0 then return 1
 dim as RECT tRC = any : GetClientRect(gfxWnd,@tRC)
 if x<> -32768 andalso y <> -32768 then
 if cuint(x)>=gfx.g_iScrWid orelse cuint(y)>=gfx.g_iScrHei then return 1
 dim as POINT tPT = ( (x*((tRC.right)-0))\gfx.g_iScrWid , (y*((tRC.bottom)-0))\gfx.g_iScrHei )
 ClientToScreen(gfxWnd,@tPT) : SetCursorPos( tPT.x , tPT.y )
 end if
 if visibility <> -32768 then SetMouse ,,abs(visibility)
 if clip <> -32768 then
 ClientToScreen(gfxWnd,cast(point ptr,@tRC))
 ClientToScreen(gfxWnd,cast(point ptr,@tRC)+1)
 if clip then ClipCursor(@tRC) else ClipCursor(NULL)
 end if
end function
#undef setmouse





function InitOpenGL(ScrWid as long=640,ScrHei as long=480 ) as hwnd

 _screenres ScrWid,ScrHei,32,,fb.GFX_OPENGL
 Gfx.Resize(ScrWid,ScrHei)
 dim as HWND hwndGFX
 screencontrol fb.GET_WINDOW_HANDLE , *cptr(uinteger ptr,@hwndGFX)

 var lCurStyle = GetWindowLong(hwndGFX,GWL_STYLE) and (not (WS_MINIMIZEBOX or WS_MAXIMIZEBOX))
 var lCurStyleEx = GetWindowLong(hwndGFX,GWL_EXSTYLE)
 SetWindowLong( hwndGFX , GWL_STYLE , lCurStyle or WS_SIZEBOX )
 SetWindowLong( hwndGFX , GWL_EXSTYLE , lCurStyleEx or WS_EX_TOOLWINDOW )
 SetWindowPos( hwndGFX , NULL , 0,0 , 0,0 , SWP_NOMOVE or SWP_NOSIZE or SWP_NOZORDER or SWP_FRAMECHANGED )

 glViewport 0, 0, ScrWid, ScrHei
 glMatrixMode GL_PROJECTION
 glLoadIdentity
 gluPerspective 45.0, ScrWid/ScrHei, 1, 100.0*cScale
 glMatrixMode GL_MODELVIEW
 glLoadIdentity

 glShadeModel GL_SMOOTH
 glClearColor 115/255, 140/255, 191/255, .5
 glClearDepth 1.0
 glEnable GL_DEPTH_TEST
 glDepthFunc GL_LEQUAL
 glHint GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST
 glEnable GL_BLEND
 glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)


 glEnable(GL_LINE_SMOOTH)
 glLineWidth(1.25)

 glDisable( GL_CULL_FACE )

 glEnable(GL_POLYGON_OFFSET_FILL)
 glPolygonOffset(1.0, 1/-20)

 glEnable(GL_LIGHTING)
 glEnable(GL_LIGHT0)


 dim as GLfloat ambientLight(...) = {.2, .2, .2, 1.0}
 glLightfv(GL_LIGHT0, GL_AMBIENT, @ambientLight(0))

 dim as GLfloat diffuseLight(...) = {1.0/20, 1.0/20, 1.0/20, 1.0}
 glLightfv(GL_LIGHT0, GL_DIFFUSE, @diffuseLight(0))

 dim as GLfloat specularLight(...) = {1.0/20, 1.0/20, 1.0/20, 1.0}
 glLightfv(GL_LIGHT0, GL_SPECULAR, @specularLight(0))

 glEnable(GL_COLOR_MATERIAL)
 glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE)

 return hwndGFX

end function


function dot_product(pU as single ptr, pV as single ptr) as single
 return pU[0]*pV[0] + pU[1]*pV[1] + pU[2]*pV[2]
end function

sub crossProduct(v1 as single ptr, v2 as single ptr, result as single ptr)
 result[0] = v1[1] * v2[2] - v1[2] * v2[1]
 result[1] = v1[2] * v2[0] - v1[0] * v2[2]
 result[2] = v1[0] * v2[1] - v1[1] * v2[0]
end sub

sub normalize(v as single ptr)
 dim as single length = sqr(v[0] * v[0] + v[1] * v[1] + v[2] * v[2])
 if (length <> .0) then
 v[0] /= length
 v[1] /= length
 v[2] /= length
 end if
end sub

sub SetLineNormal( byref tLine as LineType2Struct )
 with tLine
 dim as single direction(3-1)=any
 direction(0) = .fX2 - .fX1
 direction(1) = .fY2 - .fY1
 direction(2) = .fZ2 - .fZ1

 dim as single ref(3-1) = {.0, 1.0, .0}

 dim as single normal(3-1)
 crossProduct(@direction(0), @ref(0), @normal(0))

 normalize(@normal(0))

 const normalScale = .5
 normal(0) *= normalScale
 normal(1) *= normalScale
 normal(2) *= normalScale

 glNormal3fv( @normal(0) )
 end with
end sub
sub SetTrigNormal( byref tTrig as LineType3Struct )
 with tTrig
 dim as single edge1(3-1) = any, edge2(3-1) = any, normal(3-1) = any

 edge1(0) = .fX2 - .fX1
 edge1(1) = .fY2 - .fY1
 edge1(2) = .fZ2 - .fZ1

 edge2(0) = .fX3 - .fX1
 edge2(1) = .fY3 - .fY1
 edge2(2) = .fZ3 - .fZ1

 crossProduct(@edge1(0), @edge2(0), @normal(0))

 normalize(@normal(0))

 glNormal3fv( @normal(0) )
 end with
end sub
sub SetQuadNormal( byRef tQuad as LineType4Struct )
 with tQuad
 dim as single edge1(3-1)=any, edge2(3-1)=any, normal(3-1)=any, cc(3-1)=any

 edge1(0) = .fX3 - .fX4
 edge1(1) = .fY3 - .fY4
 edge1(2) = .fZ3 - .fZ4

 edge2(0) = .fX2 - .fX4
 edge2(1) = .fY2 - .fY4
 edge2(2) = .fZ2 - .fZ4

 crossProduct(@edge1(0), @edge2(0), @normal(0))

 normalize(@normal(0))

 edge1 (0) = .fX1
 edge1 (1) = .fY1
 edge1 (2) = .fZ1 - 10000
 var dot = dot_product( @normal(0) , @ edge1 (0) )

 if dot < 0 then
 SetTrigNormal( *cptr(LineType3Struct ptr,@tQuad) )
 exit sub
 end if

 glNormal3fv( @normal(0) )

 end with
end sub


type Matrix4x4
 union
 m(15) as single
 type
 as single fScaleX , f_1 , f_2 , f0_3
 as single f_4 , fScaleY , f_6 , f0_7
 as single f_8 , f_9 , fScaleZ , f0_11
 as single fPosX , fPosY , fPosZ , f1_15
 end type
 end union
end type

static shared as Matrix4x4 tMatrixStack(1023)
static shared as long g_CurrentMatrix


dim shared as Matrix4x4 g_tIdentityMatrix = ( { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 } )
dim shared as Matrix4x4 g_tBlankMatrix
tMatrixStack( 0 ) = g_tIdentityMatrix
function PushAndMultMatrix( pIn as const single ptr ) as boolean
 var pCur = cast(single ptr,@tMatrixStack(g_CurrentMatrix))
 g_CurrentMatrix += 1
 if g_CurrentMatrix > 1023 then
 puts("MATRIX STACK OVERFLOW!!!!")
 return false
 end if


 var pOut = cast(single ptr,@tMatrixStack(g_CurrentMatrix))
 for row as long = 0 to 3
 for col as long = 0 to 3
 pOut[row+col*4] = pCur[row + 0 * 4] * piN[0 + col * 4] + pCur[row + 1 * 4] * piN[1 + col * 4] + pCur[row + 2 * 4] * piN[2 + col * 4] + pCur[row + 3 * 4] * piN[3 + col * 4]
 next col
 next row
 return true
end function
function MultCurrentMatrix( pIn as const single ptr ) as boolean
 var pCur = cast(single ptr,@tMatrixStack(g_CurrentMatrix))
 if g_CurrentMatrix >= 1023 then
 puts("MATRIX STACK OVERFLOW!!!!")
 return false
 end if


 var pOut = cast(single ptr,@tMatrixStack(g_CurrentMatrix+1))
 for row as long = 0 to 3
 for col as long = 0 to 3
 pOut[row+col*4] = pCur[row + 0 * 4] * piN[0 + col * 4] + pCur[row + 1 * 4] * piN[1 + col * 4] + pCur[row + 2 * 4] * piN[2 + col * 4] + pCur[row + 3 * 4] * piN[3 + col * 4]
 next col
 next row

 memcpy( pCur , pOut , 16*sizeof(single) )
 return true

end function
sub PushIdentityMatrix()
 g_CurrentMatrix += 1
 tMatrixStack( g_CurrentMatrix ) = g_tIdentityMatrix
end sub
sub PopMatrix()
 if g_CurrentMatrix>0 then g_CurrentMatrix -= 1
end sub
sub MultiplyMatrixVector( pVec as single ptr , pMatrix as Matrix4x4 ptr = 0 )
 dim as single fX = pVec[0] , fY = pVec[1] , fZ = pVec[2]
 if pMatrix=0 then pMatrix = @tMatrixStack(g_CurrentMatrix)
 with *pMatrix
 pVec[0] = .m(0) * fX + .m(4) * fY + .m( 8) * fZ + .m(12)
 pVec[1] = .m(1) * fX + .m(5) * fY + .m( 9) * fZ + .m(13)
 pVec[2] = .m(2) * fX + .m(6) * fY + .m(10) * fZ + .m(14)
 end with
end sub
function IsMatrixIdentity() as boolean
 with tMatrixStack( g_CurrentMatrix )
 for N as long = 0 to 15
 if abs(.m(N)-g_tIdentityMatrix.m(N)) > .0001 then return false
 next N
 end with
 return true
end function

sub MultMatrix4x4WithVector3x3( tmOut as Matrix4x4 , tmIn as Matrix4x4 , pIn as const single ptr )
 var pCur = cast(single ptr,@tmIn)
 var pOut = cast(single ptr,@tmOut)
 dim as Matrix4x4 tTempIn = any

 if pOut = pCur then tTempIn = tmIn : pCur = cast(single ptr,@tTempIn)

 for row as long = 0 to 3
 for col as long = 0 to 3
 pOut[row+col*4] = pCur[row + 0 * 4] * piN[0 + col * 4] + pCur[row + 1 * 4] * piN[1 + col * 4] + pCur[row + 2 * 4] * piN[2 + col * 4] + pCur[row + 3 * 4] * piN[3 + col * 4]
 next col
 next row

end sub

sub MatrixRotateX( tmOut as Matrix4x4 , tmIn as Matrix4x4 , fAngle as single )
 dim as single sMat(15) = { 1 , 0 , 0 , 0 , 0 , cos(fAngle) , sin(fAngle) , 0 , 0 , -sin(fAngle) , cos(fAngle) , 0 , 0 , 0 , 0 , 1 }
 MultMatrix4x4WithVector3x3( tmOut , tmIn , @sMat(0) )
end sub
sub MatrixRotateY( tmOut as Matrix4x4 , tmIn as Matrix4x4 , fAngle as single )
 dim as single sMat(15) = { cos(fAngle) , 0 , -sin(fAngle) , 0 , 0 , 1 , 0 , 0 , sin(fAngle) , 0 , cos(fAngle) , 0 , 0 , 0 , 0 , 1 }
 MultMatrix4x4WithVector3x3( tmOut , tmIn , @sMat(0) )
end sub
sub MatrixRotateZ( tmOut as Matrix4x4 , tmIn as Matrix4x4 , fAngle as single )
 dim as single sMat(15) = { cos(fAngle) , -sin(fAngle) , 0 , 0 , sin(fAngle) , cos(fAngle) , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 }
 MultMatrix4x4WithVector3x3( tmOut , tmIn , @sMat(0) )
end sub

sub PrintCurrentMatrix()
 with tMatrixStack( g_CurrentMatrix )
 var pMat = @.m(0)
 for Y as long = 0 to 3
 for X as long = 0 to 3
 printf("%s%.1f",space(1-(*pMat>=0)-(abs(*pMat)<10)),*pMat) : pMat += 1
 next X
 puts("")
 next Y
 end with
end sub

sub glLoadCurrentMatrix()
 glMultMatrixf( @tMatrixStack(g_CurrentMatrix).m(0) )
end sub


function GetSubPartType( sPartName as string , bDebug as boolean = false ) as long
 var sL = lcase(sPartName)
 var iPos = instr(sL,"stud")
 if instr(sL,"stud") then
 if sL[iPos+4] = asc(".") then
 select case sl[iPos+3]
 case asc("3"),asc("4"),asc("5"),asc("8")
 if bDebug then printf(!"%s\n",sPartName,"spClutch")
 return spClutch
 end select
 end if
 if instr(sL,"4od.") orelse instr(sL,"4a.") orelse instr(sL,"3a.") then
 if bDebug then printf(!"%s\n",sPartName,"spClutch")
 return spClutch
 end if
 if bDebug then printf(!"%s\n",sPartName,"spStud")
 return spStud
 end if
 if instr(sL,"axle.") then
 return spAxle
 end if
 return spUnknown
end function
function GetPartNameByIndex( iIndex as long ) as string
 if iIndex < 0 or iIndex >= g_ModelCount then return ""
 with g_tModels(iIndex)
 return *cptr(zstring ptr,strptr(g_sFilenames)+.iFilenameOffset+6)
 end with
end function
function GetPartName( pPart as DATFile ptr ) as string
 for I as long = 0 to g_ModelCount-1
 with g_tModels(I)
 if .pModel = pPart then
 return *cptr(zstring ptr,strptr(g_sFilenames)+.iFilenameOffset+6)
 end if
 end with
 next I
end function

sub RenderModel( pPart as DATFile ptr , iBorders as long , uCurrentColor as ulong = &h70605040 , lDrawPart as long = -1 , uCurrentEdge as ulong = 0 )
 if uCurrentColor = &h70605040 then uCurrentColor = g_Colours(c_Blue) : uCurrentEdge = g_EdgeColours(c_Blue)

 var uEdge = uCurrentEdge
 static as integer iOnce


 with *pPart
 for N as long = 0 to .iPartCount-1
 dim as byte bDoDraw
 if (lDrawPart<0 orelse lDrawPart=N) then bDoDraw = 1
 dim as ulong uColor = any
 with .tParts(N)

 if .wColour = c_Main_Colour then
 uColor = uCurrentColor
 elseif .wColour <> c_Edge_Colour then
 if .wColour > ubound(g_Colours) then
 puts("Bad Color: " & .wColour)
 end if
 uColor = g_Colours(.wColour)
 end if


 select case .bType
 case 1
 uEdge = ((uColor and &hFEFEFE) shr 1) or (uColor and &hFF000000)
 var T1 = ._1
 with T1
 if bDoDraw then
 var pSubPart = g_tModels(.lModelIndex).pModel
 var sName = *cptr(zstring ptr,strptr(g_sFilenames)+g_tModels(.lModelIndex).iFilenameOffset+6)




 dim as single fMatrix(15) = { .fA*cScale , .fD*cScale , .fG*cScale , 0 , .fB*cScale , .fE*cScale , .fH*cScale , 0 , .fC*cScale , .fF*cScale , .fI*cScale , 0 , .fX*cScale , .fY*cScale , .fZ*cScale , 1 }

 PushAndMultMatrix( @fMatrix(0) )


 RenderModel( pSubPart , iBorders , uColor , iif(lDrawPart=-2,-2,-1) , uEdge )
 PopMatrix()
 end if
 end with
 case 2
 if iBorders=0 andalso lDrawPart <> N then continue for

 var T2 = ._2
 MultiplyMatrixVector( @T2.fX1 )
 MultiplyMatrixVector( @T2.fX2 )
 SetLineNormal( T2 )

 with T2

 if lDrawPart = -2 then
 var uEdge2 = uEdge
 cast(ubyte ptr,@uEdge2)[3] shr= 2
 glColor4ubv( cast(ubyte ptr,@uEdge2) )
 else
 glColor4ubv( cast(ubyte ptr,@uEdge) )
 end if

 glBegin GL_LINES
 glVertex3f .fX1*cScale , .FY1*cScale , .fZ1*cScale
 glVertex3f .fX2*cScale , .FY2*cScale , .fZ2*cScale
 glEnd
 end with
 case 3
 if iBorders orelse bDoDraw=0 then continue for
 var T3 = ._3
 MultiplyMatrixVector( @T3.fX1 )
 MultiplyMatrixVector( @T3.fX2 )
 MultiplyMatrixVector( @T3.fX3 )
 SetTrigNormal(T3)
 with T3

 glColor4ubv( cast(ubyte ptr,@uColor) )

 glBegin GL_TRIANGLES
 glVertex3f .fX1*cScale , .FY1*cScale , .fZ1*cScale
 glVertex3f .fX2*cScale , .FY2*cScale , .fZ2*cScale
 glVertex3f .fX3*cScale, .FY3*cScale , .fZ3*cScale
 glEnd
 end with
 case 4
 if iBorders orelse bDoDraw=0 then continue for
 var T4 = ._4
 MultiplyMatrixVector( @T4.fX1 )
 MultiplyMatrixVector( @T4.fX2 )
 MultiplyMatrixVector( @T4.fX3 )
 MultiplyMatrixVector( @T4.fX4 )
 SetQuadNormal( T4 )
 with T4

 glColor4ubv( cast(ubyte ptr,@uColor) )
 glBegin GL_QUADS
 glVertex3f .fX1*cScale , .FY1*cScale , .fZ1*cScale
 glVertex3f .fX2*cScale , .FY2*cScale , .fZ2*cScale
 glVertex3f .fX3*cScale , .FY3*cScale , .fZ3*cScale
 glVertex3f .fX4*cScale , .FY4*cScale , .fZ4*cScale
 glEnd
 end with
 case 5
 if iBorders=0 orelse bDoDraw=0 then continue for
 var T5 = ._5
 MultiplyMatrixVector( @T5.fX1 )
 MultiplyMatrixVector( @T5.fX2 )
 SetLineNormal( *cptr( typeof(._2) ptr , @T5 ) )
 with T5

 end with
 end select
 end with
 next N
 iOnce = 1
 end with
end sub

static shared as long g_TotalLines , g_TotalOptis , g_TotalTrigs , g_TotalQuads
sub SizeModel( pPart as DATFile ptr , tSize as PartSize , iPartWanted as long = -1 , byref iPartNum as long = -1 , pRoot as DATFile ptr = NULL )

 if pRoot = NULL then pRoot = pPart


 if pRoot = pPart then PushIdentityMatrix()

 with *pPart

 for N as long = 0 to .iPartCount-1
 if pRoot = pPart then iPartNum += 1
 var bWantSize = (iPartWanted<0) orelse (iPartWanted=iPartNum)
 with .tParts(N)
 select case .bType
 case 1
 with ._1
 var pSubPart = g_tModels(.lModelIndex).pModel
 var sName = *cptr(zstring ptr,strptr(g_sFilenames)+g_tModels(.lModelIndex).iFilenameOffset+6)
 dim as single fMatrix(15) = { .fA*cScale , .fD*cScale , .fG*cScale , 0 , .fB*cScale , .fE*cScale , .fH*cScale , 0 , .fC*cScale , .fF*cScale , .fI*cScale , 0 , .fX*cScale , .fY*cScale , .fZ*cScale , 1 }
 PushAndMultMatrix( @fMatrix(0) )


 SizeModel( pSubPart , tSize , iPartWanted , iPartNum , pRoot )
 PopMatrix()
 end with
 case 2
 var T2 = ._2
 MultiplyMatrixVector( @T2.fX1 )
 MultiplyMatrixVector( @T2.fX2 )

 g_TotalLines += 1

 with T2
 if bWantSize then
 if tSize.xMax=fUnused orelse .fX1 > tSize.xMax then tSize.xMax = .fX1
 if tSize.xMin=fUnused orelse .fX1 < tSize.xMin then tSize.xMin = .fX1

 if tSize.yMax=fUnused orelse .fY1 > tSize.yMax then tSize.yMax = .fY1
 if tSize.yMin=fUnused orelse .fY1 < tSize.yMin then tSize.yMin = .fY1

 if tSize.zMax=fUnused orelse .fZ1 > tSize.zMax then tSize.zMax = .fZ1
 if tSize.zMin=fUnused orelse .fZ1 < tSize.zMin then tSize.zMin = .fZ1
 end if
 if bWantSize then
 if tSize.xMax=fUnused orelse .fX2 > tSize.xMax then tSize.xMax = .fX2
 if tSize.xMin=fUnused orelse .fX2 < tSize.xMin then tSize.xMin = .fX2

 if tSize.yMax=fUnused orelse .fY2 > tSize.yMax then tSize.yMax = .fY2
 if tSize.yMin=fUnused orelse .fY2 < tSize.yMin then tSize.yMin = .fY2

 if tSize.zMax=fUnused orelse .fZ2 > tSize.zMax then tSize.zMax = .fZ2
 if tSize.zMin=fUnused orelse .fZ2 < tSize.zMin then tSize.zMin = .fZ2
 end if
 end with
 case 3
 var T3 = ._3
 MultiplyMatrixVector( @T3.fX1 )
 MultiplyMatrixVector( @T3.fX2 )
 MultiplyMatrixVector( @T3.fX3 )

 g_TotalTrigs += 1

 with T3
 if bWantSize then
 if tSize.xMax=fUnused orelse .fX1 > tSize.xMax then tSize.xMax = .fX1
 if tSize.xMin=fUnused orelse .fX1 < tSize.xMin then tSize.xMin = .fX1

 if tSize.yMax=fUnused orelse .fY1 > tSize.yMax then tSize.yMax = .fY1
 if tSize.yMin=fUnused orelse .fY1 < tSize.yMin then tSize.yMin = .fY1

 if tSize.zMax=fUnused orelse .fZ1 > tSize.zMax then tSize.zMax = .fZ1
 if tSize.zMin=fUnused orelse .fZ1 < tSize.zMin then tSize.zMin = .fZ1
 end if
 if bWantSize then
 if tSize.xMax=fUnused orelse .fX2 > tSize.xMax then tSize.xMax = .fX2
 if tSize.xMin=fUnused orelse .fX2 < tSize.xMin then tSize.xMin = .fX2

 if tSize.yMax=fUnused orelse .fY2 > tSize.yMax then tSize.yMax = .fY2
 if tSize.yMin=fUnused orelse .fY2 < tSize.yMin then tSize.yMin = .fY2

 if tSize.zMax=fUnused orelse .fZ2 > tSize.zMax then tSize.zMax = .fZ2
 if tSize.zMin=fUnused orelse .fZ2 < tSize.zMin then tSize.zMin = .fZ2
 end if
 if bWantSize then
 if tSize.xMax=fUnused orelse .fX3 > tSize.xMax then tSize.xMax = .fX3
 if tSize.xMin=fUnused orelse .fX3 < tSize.xMin then tSize.xMin = .fX3

 if tSize.yMax=fUnused orelse .fY3 > tSize.yMax then tSize.yMax = .fY3
 if tSize.yMin=fUnused orelse .fY3 < tSize.yMin then tSize.yMin = .fY3

 if tSize.zMax=fUnused orelse .fZ3 > tSize.zMax then tSize.zMax = .fZ3
 if tSize.zMin=fUnused orelse .fZ3 < tSize.zMin then tSize.zMin = .fZ3
 end if
 end with
 case 4
 var T4 = ._4
 MultiplyMatrixVector( @T4.fX1 )
 MultiplyMatrixVector( @T4.fX2 )
 MultiplyMatrixVector( @T4.fX3 )
 MultiplyMatrixVector( @T4.fX4 )

 g_TotalQuads += 1

 with T4
 if bWantSize then
 if tSize.xMax=fUnused orelse .fX1 > tSize.xMax then tSize.xMax = .fX1
 if tSize.xMin=fUnused orelse .fX1 < tSize.xMin then tSize.xMin = .fX1

 if tSize.yMax=fUnused orelse .fY1 > tSize.yMax then tSize.yMax = .fY1
 if tSize.yMin=fUnused orelse .fY1 < tSize.yMin then tSize.yMin = .fY1

 if tSize.zMax=fUnused orelse .fZ1 > tSize.zMax then tSize.zMax = .fZ1
 if tSize.zMin=fUnused orelse .fZ1 < tSize.zMin then tSize.zMin = .fZ1
 end if
 if bWantSize then
 if tSize.xMax=fUnused orelse .fX2 > tSize.xMax then tSize.xMax = .fX2
 if tSize.xMin=fUnused orelse .fX2 < tSize.xMin then tSize.xMin = .fX2

 if tSize.yMax=fUnused orelse .fY2 > tSize.yMax then tSize.yMax = .fY2
 if tSize.yMin=fUnused orelse .fY2 < tSize.yMin then tSize.yMin = .fY2

 if tSize.zMax=fUnused orelse .fZ2 > tSize.zMax then tSize.zMax = .fZ2
 if tSize.zMin=fUnused orelse .fZ2 < tSize.zMin then tSize.zMin = .fZ2
 end if
 if bWantSize then
 if tSize.xMax=fUnused orelse .fX3 > tSize.xMax then tSize.xMax = .fX3
 if tSize.xMin=fUnused orelse .fX3 < tSize.xMin then tSize.xMin = .fX3

 if tSize.yMax=fUnused orelse .fY3 > tSize.yMax then tSize.yMax = .fY3
 if tSize.yMin=fUnused orelse .fY3 < tSize.yMin then tSize.yMin = .fY3

 if tSize.zMax=fUnused orelse .fZ3 > tSize.zMax then tSize.zMax = .fZ3
 if tSize.zMin=fUnused orelse .fZ3 < tSize.zMin then tSize.zMin = .fZ3
 end if
 if bWantSize then
 if tSize.xMax=fUnused orelse .fX4 > tSize.xMax then tSize.xMax = .fX4
 if tSize.xMin=fUnused orelse .fX4 < tSize.xMin then tSize.xMin = .fX4

 if tSize.yMax=fUnused orelse .fY4 > tSize.yMax then tSize.yMax = .fY4
 if tSize.yMin=fUnused orelse .fY4 < tSize.yMin then tSize.yMin = .fY4

 if tSize.zMax=fUnused orelse .fZ4 > tSize.zMax then tSize.zMax = .fZ4
 if tSize.zMin=fUnused orelse .fZ4 < tSize.zMin then tSize.zMin = .fZ4
 end if
 end with
 case 5
 g_TotalOptis += 1
 end select
 end with
 next N
 end with

 if pRoot = pPart then PopMatrix()

end sub

type PartCollisionBox as PartSize

sub GetCollisionBoundaries( tResult as PartCollisionBox , tA as PartCollisionBox , tB as PartCollisionBox )
 tResult.xMin = iif(tA.xMin > tB.xMin , tA.xMin , tB.xMin)
 tResult.xMax = iif(tA.xMax < tB.xMax , tA.xMax , tB.xMax)
 tResult.yMin = iif(tA.yMin > tB.yMin , tA.yMin , tB.yMin)
 tResult.yMax = iif(tA.yMax < tB.yMax , tA.yMax , tB.yMax)
 tResult.zMin = iif(tA.zMin > tB.zMin , tA.zMin , tB.zMin)
 tResult.zMax = iif(tA.zMax < tB.zMax , tA.zMax , tB.zMax)
end sub
function CheckCollision ( tA as PartSize , tB as PartSize ) as byte
 if tA.xMax < tB.xMin orelse tA.xMin > tB.xMax then return false
 if tA.yMax < tB.yMin orelse tA.yMin > tB.yMax then return false
 IF tA.zMax < tB.zMin orelse tA.zMin > tB.zMax then return false
 return true
end function

sub CheckCollisionModel( pPart as DATFile ptr , atCollision() as PartCollisionBox , pRoot as DATFile ptr = NULL )

 if pRoot = NULL then pRoot = pPart
 static as PartCollisionBox AtPartBound()
 static as PartCollisionBox ptr ptSize


 if pPart=pRoot then
 redim AtPartBound(pPart->iPartCount-1)
 redim atCollision(0)
 end if

 with *pPart
 if .tSize.zMax = .tSize.zMin then
 dim as PartSize tSz : SizeModel( pPart , tSz ) : .tSize = tSz
 end if
 for N as long = 0 to .iPartCount-1
 if pPart=pRoot then
 with AtPartBound(N)
 .xMin = fUnused : .xMax = fUnused
 .yMin = fUnused : .yMax = fUnused
 .zMin = fUnused : .zMax = fUnused
 end with
 ptSize = @AtPartBound(N)
 end if
 with .tParts(N)
 select case .bType
 case 1
 with ._1
 var pSubPart = g_tModels(.lModelIndex).pModel
 var sName = *cptr(zstring ptr,strptr(g_sFilenames)+g_tModels(.lModelIndex).iFilenameOffset+6)
 dim as single fMatrix(15) = { .fA*cScale , .fD*cScale , .fG*cScale , 0 , .fB*cScale , .fE*cScale , .fH*cScale , 0 , .fC*cScale , .fF*cScale , .fI*cScale , 0 , .fX*cScale , .fY*cScale , .fZ*cScale , 1 }
 PushAndMultMatrix( @fMatrix(0) )
 CheckCollisionModel( pSubPart , atCollision() , pRoot )
 PopMatrix()
 end with
 case 2
 var T2 = ._2
 MultiplyMatrixVector( @T2.fX1 )
 MultiplyMatrixVector( @T2.fX2 )
 with T2
 if ptSize->xMax=fUnused orelse .fX1 > ptSize->xMax then ptSize->xMax = .fX1
 if ptSize->xMin=fUnused orelse .fX1 < ptSize->xMin then ptSize->xMin = .fX1

 if ptSize->yMax=fUnused orelse .fY1 > ptSize->yMax then ptSize->yMax = .fY1
 if ptSize->yMin=fUnused orelse .fY1 < ptSize->yMin then ptSize->yMin = .fY1

 if ptSize->zMax=fUnused orelse .fZ1 > ptSize->zMax then ptSize->zMax = .fZ1
 if ptSize->zMin=fUnused orelse .fZ1 < ptSize->zMin then ptSize->zMin = .fZ1
 if ptSize->xMax=fUnused orelse .fX2 > ptSize->xMax then ptSize->xMax = .fX2
 if ptSize->xMin=fUnused orelse .fX2 < ptSize->xMin then ptSize->xMin = .fX2

 if ptSize->yMax=fUnused orelse .fY2 > ptSize->yMax then ptSize->yMax = .fY2
 if ptSize->yMin=fUnused orelse .fY2 < ptSize->yMin then ptSize->yMin = .fY2

 if ptSize->zMax=fUnused orelse .fZ2 > ptSize->zMax then ptSize->zMax = .fZ2
 if ptSize->zMin=fUnused orelse .fZ2 < ptSize->zMin then ptSize->zMin = .fZ2
 end with
 case 3
 var T3 = ._3
 MultiplyMatrixVector( @T3.fX1 )
 MultiplyMatrixVector( @T3.fX2 )
 MultiplyMatrixVector( @T3.fX3 )
 with T3
 if ptSize->xMax=fUnused orelse .fX1 > ptSize->xMax then ptSize->xMax = .fX1
 if ptSize->xMin=fUnused orelse .fX1 < ptSize->xMin then ptSize->xMin = .fX1

 if ptSize->yMax=fUnused orelse .fY1 > ptSize->yMax then ptSize->yMax = .fY1
 if ptSize->yMin=fUnused orelse .fY1 < ptSize->yMin then ptSize->yMin = .fY1

 if ptSize->zMax=fUnused orelse .fZ1 > ptSize->zMax then ptSize->zMax = .fZ1
 if ptSize->zMin=fUnused orelse .fZ1 < ptSize->zMin then ptSize->zMin = .fZ1
 if ptSize->xMax=fUnused orelse .fX2 > ptSize->xMax then ptSize->xMax = .fX2
 if ptSize->xMin=fUnused orelse .fX2 < ptSize->xMin then ptSize->xMin = .fX2

 if ptSize->yMax=fUnused orelse .fY2 > ptSize->yMax then ptSize->yMax = .fY2
 if ptSize->yMin=fUnused orelse .fY2 < ptSize->yMin then ptSize->yMin = .fY2

 if ptSize->zMax=fUnused orelse .fZ2 > ptSize->zMax then ptSize->zMax = .fZ2
 if ptSize->zMin=fUnused orelse .fZ2 < ptSize->zMin then ptSize->zMin = .fZ2
 if ptSize->xMax=fUnused orelse .fX3 > ptSize->xMax then ptSize->xMax = .fX3
 if ptSize->xMin=fUnused orelse .fX3 < ptSize->xMin then ptSize->xMin = .fX3

 if ptSize->yMax=fUnused orelse .fY3 > ptSize->yMax then ptSize->yMax = .fY3
 if ptSize->yMin=fUnused orelse .fY3 < ptSize->yMin then ptSize->yMin = .fY3

 if ptSize->zMax=fUnused orelse .fZ3 > ptSize->zMax then ptSize->zMax = .fZ3
 if ptSize->zMin=fUnused orelse .fZ3 < ptSize->zMin then ptSize->zMin = .fZ3
 end with
 case 4
 var T4 = ._4
 MultiplyMatrixVector( @T4.fX1 )
 MultiplyMatrixVector( @T4.fX2 )
 MultiplyMatrixVector( @T4.fX3 )
 MultiplyMatrixVector( @T4.fX4 )
 with T4
 if ptSize->xMax=fUnused orelse .fX1 > ptSize->xMax then ptSize->xMax = .fX1
 if ptSize->xMin=fUnused orelse .fX1 < ptSize->xMin then ptSize->xMin = .fX1

 if ptSize->yMax=fUnused orelse .fY1 > ptSize->yMax then ptSize->yMax = .fY1
 if ptSize->yMin=fUnused orelse .fY1 < ptSize->yMin then ptSize->yMin = .fY1

 if ptSize->zMax=fUnused orelse .fZ1 > ptSize->zMax then ptSize->zMax = .fZ1
 if ptSize->zMin=fUnused orelse .fZ1 < ptSize->zMin then ptSize->zMin = .fZ1
 if ptSize->xMax=fUnused orelse .fX2 > ptSize->xMax then ptSize->xMax = .fX2
 if ptSize->xMin=fUnused orelse .fX2 < ptSize->xMin then ptSize->xMin = .fX2

 if ptSize->yMax=fUnused orelse .fY2 > ptSize->yMax then ptSize->yMax = .fY2
 if ptSize->yMin=fUnused orelse .fY2 < ptSize->yMin then ptSize->yMin = .fY2

 if ptSize->zMax=fUnused orelse .fZ2 > ptSize->zMax then ptSize->zMax = .fZ2
 if ptSize->zMin=fUnused orelse .fZ2 < ptSize->zMin then ptSize->zMin = .fZ2
 if ptSize->xMax=fUnused orelse .fX3 > ptSize->xMax then ptSize->xMax = .fX3
 if ptSize->xMin=fUnused orelse .fX3 < ptSize->xMin then ptSize->xMin = .fX3

 if ptSize->yMax=fUnused orelse .fY3 > ptSize->yMax then ptSize->yMax = .fY3
 if ptSize->yMin=fUnused orelse .fY3 < ptSize->yMin then ptSize->yMin = .fY3

 if ptSize->zMax=fUnused orelse .fZ3 > ptSize->zMax then ptSize->zMax = .fZ3
 if ptSize->zMin=fUnused orelse .fZ3 < ptSize->zMin then ptSize->zMin = .fZ3
 if ptSize->xMax=fUnused orelse .fX4 > ptSize->xMax then ptSize->xMax = .fX4
 if ptSize->xMin=fUnused orelse .fX4 < ptSize->xMin then ptSize->xMin = .fX4

 if ptSize->yMax=fUnused orelse .fY4 > ptSize->yMax then ptSize->yMax = .fY4
 if ptSize->yMin=fUnused orelse .fY4 < ptSize->yMin then ptSize->yMin = .fY4

 if ptSize->zMax=fUnused orelse .fZ4 > ptSize->zMax then ptSize->zMax = .fZ4
 if ptSize->zMin=fUnused orelse .fZ4 < ptSize->zMin then ptSize->zMin = .fZ4
 end with
 case 5
 end select
 end with
 next N
 end with
 if pRoot = pPart then
 for N as long = 0 to pPart->iPartCount-1
 if pPart->tParts(N).bType <> 1 then continue for
 var fyMin = g_tModels(pPart->tParts(N)._1.lModelIndex).pModel->tSize.yMin
 if ((fyMin-(-4)) < .0001) then AtPartBound(N).yMin -= fyMin
 AtPartBound(N).xMin += .1 : AtPartBound(N).xMax -= .1
 AtPartBound(N).yMin += .1 : AtPartBound(N).yMax -= .1
 AtPartBound(N).zMin += .1 : AtPartBound(N).zMax -= .1
 next N
 for N as long = 0 to pPart->iPartCount-1
 if pPart->tParts(N).bType <> 1 then continue for
 for M as long = N+1 to (pPart->iPartCount-1)
 if pPart->tParts(M).bType <> 1 then continue for
 if CheckCollision( atPartBound(N) , atPartBound(M) ) then
 var iI = ubound(atCollision) : redim preserve atCollision(iI+2)
 atCollision(iI) = AtPartBound(N)
 atCollision(iI+1) = AtPartBound(M)
 end if
 next M
 next N
 erase AtPartBound
 end if

end sub


type SnapPV
 as float fPX,fPY,fPZ
 as float fAX,fAY,fAZ
 as Matrix4x4 ptr pMatOrg
end type
type PartSnap
 lStudCnt as long
 lClutchCnt as long
 lAliasCnt as long
 lAxleCnt as long
 lAxleHoleCnt as long
 lBarCnt as long
 lBarHoleCnt as long
 lPinCnt as long
 lPinHoleCnt as long
 as SnapPV ptr pStud,pClutch
end type

sub SnapAddStud( tSnap as PartSnap , iCnt as long , byval tPV as SnapPV = (0) )
 with tSnap
 for N as long = 0 to iCnt-1
 .lStudCnt += 1
 .pStud = reallocate(.pStud,sizeof(tPV)*.lStudCnt)
 .pStud[.lStudCnt-1] = tPV
 next N
 end with
end sub
sub SnapAddClutch( tSnap as PartSnap , iCnt as long , byval tPV as SnapPV = (0) )
 with tSnap
 for N as long = 0 to iCnt-1
 .lClutchCnt += 1
 .pClutch = reallocate(.pClutch,sizeof(tPV)*.lClutchCnt)
 .pClutch[.lClutchCnt-1] = tPV
 next N
 end with
end sub

static shared as ulong MaleStipple(32-1), FemaleStipple(32-1)
for iY as long = 0 to 31
 MaleStipple(iY) = iif(iY and 1,&h55555555,&hAAAAAAAA)
 FeMaleStipple(iY) = iif(iY and 1,&hAAAAAAAA,&h55555555)
next iY
sub DrawMaleShape( fX as single , fY as single , fZ as single , fRadius as single , fLength as single , bRound as byte )

 glEnable( GL_POLYGON_STIPPLE )
 glPushMatrix()
 glLoadCurrentMatrix()
 glTranslatef( fX , fY-fLength/2.0 , fZ )
 glRotatef( 90 , 1,0,0 )
 glPolygonStipple( cptr(glbyte ptr,@MaleStipple(0)) )
 glColor3f( 1 , 1 , 0 )
 if bRound then
 glScalef( 8/7 , 8/7 , (fLength/fRadius)*(5/7) )
 glutSolidSphere( fRadius , 18 , 7 )
 else
 glScalef( 2 , 2 , (fLength/fRadius) )
 glutSolidCube(fRadius)
 end if
 glPopMatrix()
 glDisable( GL_POLYGON_STIPPLE )
end sub
sub DrawFemaleShape( fX as single , fY as single , fZ as single , fRadius as single , fLength as single , bRound as byte )
 glEnable( GL_POLYGON_STIPPLE )
 glPushMatrix()
 glLoadCurrentMatrix()
 glTranslatef( fX , fY-fLength/2.0 , fZ )
 glRotatef( 90 , 1,0,0 )
 glPolygonStipple( cptr(glbyte ptr,@FeMaleStipple(0)) )
 glColor3f( 1 , 0 , 0 )
 if bRound then
 glScalef( 1 , 1 , fLength )
 glutSolidTorus( .5 , fRadius , 18 , 18 )
 else
 glRotatef( 45 , 0,0,1 )
 glScalef( 1 , 1 , fLength )
 glutSolidTorus( .5 , fRadius , 18 , 4 )
 end if
 glPopMatrix()
 glDisable( GL_POLYGON_STIPPLE )
end sub

sub SnapModel( pPart as DATFile ptr , tSnap as PartSnap , bDraw as byte = false , pRoot as DATFile ptr = NULL )
 if pRoot = NULL then pRoot = pPart
 with *pPart
 if .tSize.zMax = .tSize.zMin then
 dim as PartSize tSz : SizeModel( pPart , tSz )
 .tSize = tSz
 end if
 if .iShadowCount then

 var iIdent = 2, iPrevRec = 0

 for N as long = 0 to .iShadowCount-1
 with .paShadow[N]
 dim as single fPX = .fPosX , fPY = .fPosY , fPZ = .fPosZ
 var pG = @.tGrid
 var pMat = @tMatrixStack(g_CurrentMatrix)
 var xCnt = abs(.tGrid.xCnt)-1 , zCnt = abs(.tGrid.zCnt)-1
 if .bFlagHasGrid then
 if .tGrid.xCnt < 0 then fPX += (xCnt*.tGrid.Xstep)/-2
 if .tGrid.zCnt < 0 then fpZ += (zCnt*.tGrid.Zstep)/-2
 end if
 select case .bType
 case sit_Include
 if bDraw=0 then puts("sit_Include")
 iIdent += 2
 case sit_Cylinder
 static as zstring ptr pzCaps(...)={@"none",@"one",@"two",@"A",@"B"}
 if iPrevRec>.bRecurse then iIdent -= 2
 iPrevRec=.bRecurse

 if bDraw then

 if .bFlagOriMat then
 dim as single fMatrix(15) = { .fOri(0) , .fOri(3) , .fOri(6) , 0 , .fOri(1) , .fOri(4), .fOri(7) , 0 , .fOri(2) , .fOri(5) , .fOri(8) , 0 , 0 , 0 , 0 , 1 }
 PushAndMultMatrix( @fMatrix(0) )
 puts("Origin!")
 end if


 var xCnt=0 , zCnt=0 , fStartX=0 , fOffZ=0
 if .bFlagHasGrid then
 xCnt = abs(.tGrid.xCnt)-1 : zCnt = abs(.tGrid.zCnt)-1
 if .tGrid.xCnt < 0 then fStartX = ((xCnt)*.tGrid.Xstep)/-2
 if .tGrid.zCnt < 0 then fOffZ = ((zCnt)*.tGrid.Zstep)/-2
 end if
 for iZ as long = 0 to zCnt
 var fOffX = fStartX
 for iX as long = 0 to xCnt
 for I as long = 0 to .bSecCnt-1
 var p = @.tSecs(I)
 dim as byte bRound = false
 select case p->bShape
 case sss_Round : bRound = true
 case sss_Square : bRound = false
 case else : continue for
 end select
 dim as single fCenX,fCenY,fCenZ
 var pMat = @tMatrixStack(g_CurrentMatrix)
 if .bFlagCenter then
 fCenY = p->bLength/-2
 fCenZ += .fPosY
 puts("Center flag")
 else
 end if
 if .bFlagMale then
 DrawMaleShape( fCenX+fOffX+.fPosX , fCenY+.fPosY , fCenZ+fOffZ+.fPosZ , p->wFixRadius/100 , p->bLength , bRound )

 else
 DrawFemaleShape( fCenX+fOffX+.fPosX , fCenY+.fPosY , fCenZ+fOffZ+.fPosZ , p->wFixRadius/100 , p->bLength , bRound )
 end if

 next I
 fOffX += .tGrid.Xstep
 next iX
 fOffZ += .tGrid.Zstep
 next iZ
 if .bFlagOriMat then PopMatrix()
 else
 end if
 for I as long = 0 to .bSecCnt-1
 static as zstring ptr pzSecs(...)={@"Invalid",@"Round",@"Axle",@"Square",@"FlexPrev",@"FlexNext"}
 with .tSecs(I)
 end with
 next I

 scope
 var iConCnt = 1 , bConType = spUnknown , bSecs = .bSecCnt , bSides = 1
 select case .bCaps
 case sc_None : bSides = 2
 case sc_One : bSides = 1
 case sc_Two : if bDraw=0 then puts("!!!!! CHECK TWO CAPS!!!!!")
 end select

 if .bFlagHasGrid then iConCnt = abs(.tGrid.xCnt)*abs(.tGrid.zCnt)
 if .bFlagMale then
 var pMat = @tMatrixStack(g_CurrentMatrix)
 var iIgnore = 0
 if iConCnt > 1 andalso bDraw=0 then puts("!!!!!! MALE GRID FOUND !!!!!")
 bConType = spStud
 for I as long = 0 to .bSecCnt-1
 select case .tSecs(I).bShape
 case sss_FlexNext, sss_FlexPrev : iIgnore += 1
 end select
 next I
 for I as long = 0 to .bSecCnt-1
 if .tSecs(I).bLength = 1 then bSecs -= 1 : continue for
 select case .tSecs(I).bShape
 case sss_Axle
 if bDraw=0 then
 end if
 tSnap.lAxleCnt += iConCnt : bSecs -= 1
 case sss_FlexNext
 bSecs -= 1
 case sss_FlexPrev
 if bDraw=0 then
 end if
 tSnap.lPinCnt += iConCnt : bSecs -= 1
 case sss_Round
 if .tSecs(I).wFixRadius = 800 then
 bSecs -= 1
 elseif .tSecs(I).wFixRadius = 400 then
 if bDraw=0 then
 end if
 tSnap.lBarCnt += iConCnt : bSecs -= 1
 elseif .tSecs(I).wFixRadius = 600 then
 if bDraw=0 then
 with *pMat
 SnapAddStud( tSnap , iConCnt , type(fPX+.fPosX , fPY+.fPosY , fPZ+.fPosZ) )
 end with
 end if
 bSecs -= 1
 else
 if iIgnore then
 iIgnore -= 1 : bSecs -= 1
 else
 if bDraw=0 then puts("Unknown male round cylinder?")
 end if
 end if
 case else
 if bDraw=0 then puts("Unknown male?")
 end select
 next I
 else
 bConType = spClutch
 if .bFlagSlide then
 var iMaybePins = 0
 dim as byte bDidAxleHole,bDidClutch,bDidBarHole
 for I as long = 0 to .bSecCnt-1
 if .tSecs(I).bLength*((pMat->fScaleY)) = 1 then
 if bDraw=0 then puts("Length 1 section ignored")
 bSecs -= 1 : continue for
 end if
 select case .tSecs(I).bShape
 case sss_Axle
 if bDraw=0 then
 end if
 if bDidAxleHole=0 then bDidAxleHole=1 : tSnap.lAxleHoleCnt += iConCnt*bSides
 bSecs -= 1 : iMaybePins=-999 : bSides = 1
 case sss_Square
 if bDraw=0 then
 if bDidClutch=0 then
 bDidClutch=1
 with *pMat
 SnapAddClutch( tSnap , iConCnt , type(fPX+.fPosX , fPY+.fPosY , fPZ+.fPosZ) )
 end with
 end if
 end if
 if bDidBarHole=0 then bDidBarHole=1 : tSnap.lBarHoleCnt += iConCnt*bSides
 bSecs -= 1
 case sss_Round
 select case .tSecs(I).wFixRadius
 case 800: bSecs -= 1
 case 600: iMaybePins += 1
 case 400
 if bDraw=0 then
 end if
 if bDidBarHole=0 then bDidBarHole=1 : tSnap.lBarHoleCnt += iConCnt*bSides
 bSecs -= 1
 end select
 end select
 next I
 if iMaybePins>0 then
 if bDraw=0 then
 puts("ERROR: unimplemented clutches were not added")
 end if
 tSnap.lPinHoleCnt += iConCnt*iMaybePins : bSecs -= iMaybePins
 end if
 else
 dim as byte bDidPinHole,bDidBarHole
 for I as long = 0 to .bSecCnt-1
 select case .tSecs(I).bShape
 case sss_Axle
 if bDraw=0 then puts("Axle hole without slide??????")
 case sss_FlexPrev
 if bDraw=0 then
 end if
 if bDidPinHole=0 then bDidPinHole=1 : tSnap.lPinHoleCnt += iConCnt
 bSecs -= 1:
 case sss_Round
 if .tSecs(I).wFixRadius = 400 then
 if bDraw=0 then
 end if
 if bDidBarHole=0 then bDidBarHole = 1 : tSnap.lBarHoleCnt += iConCnt*bSides
 bSecs -= 1
 elseif .tSecs(I).wFixRadius = 600 then
 if bDraw=0 then
 with *pMat
 for iGX as long = 0 to xCnt
 for iGZ as long = 0 to zCnt
 SnapAddClutch( tSnap , 1 , type(fPX+.fPosX+iGX*pG->xStep , fPY+.fPosY , fPZ+.fPosZ+iGZ*pG->zStep) )
 next igZ
 next iGX
 end with
 end if
 bSecs -= 1
 end if
 end select
 next I
 end if
 end if
 if bDraw=0 then
 if bSecs < 0 then puts("ERROR: remaining section counter is negative")
 if bSecs > 1 then puts("ERROR: Too many unhandled sections!")
 end if
 if bSecs > 0 then
 select case bConType
 case spStud
 if bDraw=0 then
 printf(!"Stud += %i (Fallback)\n",iConCnt)
 end if
 tSnap.lStudCnt += iConCnt
 case spClutch
 if bDraw=0 then
 with *pMat
 SnapAddClutch( tSnap , iConCnt , type(fPX+.fPosX , fPY+.fPosY , fPZ+.fPosZ) )
 end with
 if iConCnt > 1 then printf(!"WARNING: %i clutches added as fallback\n",iConCnt)
 end if


 case spAlias
 if bDraw=0 then
 end if
 tSnap.lAliasCnt += iConCnt
 case spBar
 if bDraw=0 then
 end if
 tSnap.lBarCnt += iConCnt
 case spBarHole : tSnap.lBarHoleCnt += iConCnt*bSides
 if bDraw=0 then
 end if
 case spPin : tSnap.lPinCnt += iConCnt
 if bDraw=0 then
 end if
 case spPinHole
 if bDraw=0 then
 end if
 tSnap.lPinHoleCnt += iConCnt
 case spAxle
 if bDraw=0 then
 end if
 tSnap.lAxleCnt += iConCnt
 case spAxleHole
 if bDraw=0 then
 end if
 tSnap.lAxleHoleCnt += iConCnt
 end select
 end if
 end scope

 end select
 end with
 next N
 end if
 for N as long = 0 to .iPartCount-1
 with .tParts(N)
 if .bType = 1 then
 with ._1
 var pSubPart = g_tModels(.lModelIndex).pModel


 dim as single fMatrix(15) = { .fA , .fD , .fG , 0 , .fB , .fE , .fH , 0 , .fC , .fF , .fI , 0 , .fX , .fY , .fZ , 1 }


 PushAndMultMatrix( @fMatrix(0) )
 SnapModel( pSubPart , tSnap , bDraw , pRoot )
 PopMatrix()
 end with
 end if
 end with
 next N
 end with
end sub

sub DrawLimitsCube( xMin as single , xMax as single , yMin as single , yMax as single , zMin as single , zMax as single )

 glBegin(GL_QUADS)

 glNormal3f(.0, .0, 1.0)
 glVertex3f(xmin, ymin, zmax)
 glVertex3f(xmax, ymin, zmax)
 glVertex3f(xmax, ymax, zmax)
 glVertex3f(xmin, ymax, zmax)

 glNormal3f(.0, .0, -1.0)
 glVertex3f(xmin, ymin, zmin)
 glVertex3f(xmax, ymin, zmin)
 glVertex3f(xmax, ymax, zmin)
 glVertex3f(xmin, ymax, zmin)

 glNormal3f(-1.0, .0, .0)
 glVertex3f(xmin, ymin, zmin)
 glVertex3f(xmin, ymin, zmax)
 glVertex3f(xmin, ymax, zmax)
 glVertex3f(xmin, ymax, zmin)

 glNormal3f(1.0, .0, .0)
 glVertex3f(xmax, ymin, zmin)
 glVertex3f(xmax, ymin, zmax)
 glVertex3f(xmax, ymax, zmax)
 glVertex3f(xmax, ymax, zmin)

 glNormal3f(.0, 1.0, .0)
 glVertex3f(xmin, ymax, zmin)
 glVertex3f(xmax, ymax, zmin)
 glVertex3f(xmax, ymax, zmax)
 glVertex3f(xmin, ymax, zmax)

 glNormal3f(.0, -1.0, .0)
 glVertex3f(xmin, ymin, zmin)
 glVertex3f(xmax, ymin, zmin)
 glVertex3f(xmax, ymin, zmax)
 glVertex3f(xmin, ymin, zmax)

 glEnd()
end sub

function DetectPartCathegory( pPart as DATFile ptr ) as byte
 if pPart = 0 then return pcNone
 dim as PartSize tSize = any
 SizeModel( pPart , tSize )
 var pSnap = cptr(PartSnap ptr,pPart->pData)

 select case cuint(tSize.yMax-tSize.yMin)
 case ( 4+4)
 if (pSnap->lStudCnt) then return pcBaseplate
 case ( 8+4)
 if (pSnap->lStudCnt) andalso (pSnap->lClutchCnt) then
 return pcPlate
 end if
 case (16+4)
 if (pSnap->lStudCnt) andalso (pSnap->lClutchCnt) then
 return pcSlab
 end if
 end select
 return pcOther
end function


const PI = atn(1)*4



enum SeparatorType
 stNone
 stToken = 1
 stOperator = 2
end enum
enum ErrorCodes
 ecNotFound = -999
 ecFailedToLoad
 ecFailedToParse
 ecNumberOverflow
 ecNotANumber
 ecAlreadyExist
 ecSuccess = 0
end enum
type PartStructLS
 tLocation as SnapPV
 tMatrix as Matrix4x4
 sName as string
 sPrimative as string
 iColor as long
 iModelIndex as long
 bPartCat as byte
 bFoundPart:1 as byte
 bConnected:1 as byte
end type
type PartConnLS
 iLeftPart as long
 iRightPart as long
 iLeftNum as short
 iRightNum as short
 iLeftType as byte
 iRightType as byte
 bResv(1) as byte
end type

const _cPartMin=255 , _cConnMin=255
static shared as byte g_bSeparators(255)
redim shared as PartStructLS g_tPart(_cPartMin)
redim shared as PartConnLS g_tConn(_cConnMin)
static shared as long g_iPartCount , g_iConnCount = 0

scope
 var sSeparators = !"\9 \r\n/"
 for N as long = 0 to len(sSeparators)-1
 g_bSeparators( sSeparators[N] ) or= stToken
 next N
 var sOperators = !"="
 for N as long = 0 to len(sOperators)-1
 g_bSeparators( sOperators[N] ) or= stOperator
 next N
end scope


function ReadTokenNumber( sToken as string , iStart as long = 0 , bSigned as long = false ) as long
 dim as long iResult, iSign = 1
 if bSigned andalso sToken[iStart] = asc("-") then iStart += 1 : iSign = -1
 for N as long = iStart to len(sToken)-1
 select case sToken[N]
 case asc("0") to asc("9")
 iResult = iResult*10+(sToken[N]-asc("0"))
 if iResult < 0 then return (ecNumberOverflow)
 case else
 return (ecNotANumber)
 end select
 next N
 return iResult*iSign
end function
function IsTokenNumeric( sToken as string , iStart as long = 0 ) as long
 for N as long = iStart to len(sToken)-1
 if (cuint(sToken[N])-asc("0")) > 9 then return false
 next N
 return true
end function
function IsPrimative( sToken as string ) as long
 if len(sToken)=0 then return false
 for N as long = 0 to len(sToken)-1
 select case sToken[0]
 case asc("a") to asc("z"),asc("0") to asc("9"),asc("_")
 case else
 return false
 end select
 next N
 return true
end function
function IsValidPartName( sToken as string ) as long
 if len(sToken)=0 then return false
 select case sToken[0]
 case asc("A") to asc("Z")
 case else
 return false
 end select
 for N as long = 1 to len(sToken)-1
 select case sToken[N]
 case asc("A") to asc("Z"),asc("a") to asc("z")
 case asc("0") to asc("9"),asc("_")
 case else
 return false
 end select
 next N
 return true
end function

function ParseColor( sToken as string ) as long
 var iLen = len(sToken), bHasHex = false, iTokenStart = 1
 if iLen < 1 orelse sToken[0] <> asc("#") then return (ecFailedToParse)
 dim as ulong uColor
 if (iLen-iTokenStart) = 6 then
 for N as long = iTokenStart to iLen-1
 select case sToken[N]
 case asc("0") to asc("9"): uColor = uColor*16+sToken[N]-asc("0")
 case asc("a") to asc("f"): uColor = uColor*16+sToken[N]-asc("a")+10
 case asc("A") to asc("F"): uColor = uColor*16+sToken[N]-asc("A")+10
 case else: return (ecFailedToParse)
 end select
 next N
 return uColor+&h1000000
 elseif (iLen-iTokenStart) = 4 then
 if sToken[iTokenStart]=asc("0") then
 iTokenStart += 1 : bHasHex = true
 end if
 end if
 if (iLen-iTokenStart) = 3 then
 if sToken[iTokenStart]=asc("0") then bHasHex = 1
 for N as long = iTokenStart to iLen-1
 select case sToken[N]
 case asc("0") to asc("9"): uColor = uColor*256+(((sToken[N]-asc("0") )*255)\15)
 case asc("a") to asc("f"): uColor = uColor*256+(((sToken[N]-asc("a")+10)*255)\15) : bHasHex = 1
 case asc("A") to asc("F"): uColor = uColor*256+(((sToken[N]-asc("A")+10)*255)\15) : bHasHex = 1
 case else: return (ecFailedToParse)
 end select
 next N
 if bHasHex then return uColor+&h1000000
 end if
 uColor = 0
 for N as long = iTokenStart to iLen-1
 select case sToken[N]
 case asc("0") to asc("9"): uColor = uColor*10+sToken[N]-asc("0")
 case else: return (ecFailedToParse)
 end select
 if uColor > 10999 then return (ecFailedToParse)
 next N
 return uColor
end function

function FindPartName( sName as string ) as long
 if len(sName) < 1 then return (ecNotFound)
 for N as long = 0 to g_iPartCount-1
 with g_tPart(N)
 if .sName = sName then return N
 end with
 next N
 return (ecNotFound)
end function
function FindModelIndex( sPart as string ) as long
 var iPos = instr(g_sFilenames,"\"+lcase(sPart)+".dat")-1
 if iPos<0 then return (ecNotFound)
 do
 iPos -= 1
 if g_sFilenames[iPos]=0 then exit do
 loop
 return *cptr(long ptr,@g_sFilenames[iPos-4])
end function
function LoadPartModel( byref tPart as PartStructLS ) as long
 with tPart
 if .iModelIndex >= 0 then return (ecSuccess)
 dim as string sModel
 if LoadFile( .sPrimative , sModel ) = 0 then
 return (ecFailedToLoad)
 end if
 var pModel = LoadModel( strptr(sModel) , .sPrimative )
 if pModel=0 then return (ecFailedToParse)
 .iModelIndex = pModel->iModelIndex
 .sPrimative = mid(.sPrimative,instrrev(.sPrimative,"\")+1)
 if pModel->pData = 0 then
 pModel->pData = new PartSnap
 var pSnap = cptr(PartSnap ptr,pModel->pData)
 SnapModel( pModel , *pSnap )
 end if
 .bPartCat = DetectPartCathegory( pModel )
 end with
 return (ecSuccess)
end function
function AddPartName( sName as string , sPart as string ) as long

 if (g_iPartCount > ubound(g_tPart)) then
 redim preserve g_tPart( ubound(g_tPart)+_cPartMin+1 )
 end if

 var iIndex = FindModelIndex( sPart )
 memset( @g_tPart( g_iPartCount ) , 0 , sizeof(PartStructLS) )
 with g_tPart( g_iPartCount )
 .sName = sName
 .sPrimative = sPart+".dat"
 .iModelIndex = -1 : .iColor = -1

 if iIndex < 0 then
 .bFoundPart = FindFile(.sPrimative)<>0
 else
 .bFoundPart = true
 .iModelIndex = iIndex
 end if

 end with

 g_iPartCount += 1
 return g_iPartCount-1

end function
function AddConnection( byref tConn as PartConnLS ) as long
 if (g_iConnCount > ubound(g_tConn)) then
 redim preserve g_tConn( ubound(g_tConn)+_cConnMin+1 )
 end if
 g_tConn( g_iConnCount ) = tConn : g_iConnCount += 1
 return g_iConnCount-1
end function

function SafeText( sInput as string ) as string
 dim as string sResult
 for N as long = 0 to len(sInput)-1
 select case sInput[N]
 case 0 to 31,128 to 255 : sResult += "%"+hex(sInput[N],2)
 case else
 sResult += chr(sInput[N])
 end select
 next N
 return sResult
end function


function LegoScriptToLDraw( sScript as string , sOutput as string = "" ) as string


 dim as string sStatement, sToken(15), sResult
 dim as long iStStart=1,iStNext,iLineNumber=1,iTokenLineNumber=1
 sOutput = "" : g_iPartCount = 0 : g_iConnCount = 0



 while 1
 iStNext = instr(iStStart,sScript,";")
 var pzFb = cptr(fbStr ptr,@sStatement)
 with *pzFb
 .pzData = cptr(ubyte ptr,strptr(sScript))+iStStart-1
 .iLen = iif(iStNext,iStNext,1+len(sScript))-(iStStart)
 while .iLen>0 andalso (g_bSeparators(.pzData[0]) and stToken)
 select case .pzData[0]
 case asc("/"): exit while
 case asc(!"\n"): iLineNumber += 1
 case asc(!"\r"): if .pzData[1]=asc(!"\n") then .pzData += 1 : .iLen -= 1 : iLineNumber += 1
 end select
 .pzData += 1 : .iLen -= 1
 wend
 while .iLen>0 andalso (g_bSeparators(.pzData[.iLen-1]) and stToken)
 select case .pzData[.iLen-1]
 case asc("/") : exit while
 case asc(!"\n"): iLineNumber += 1
 case asc(!"\r"): if .pzData[.iLen]=asc(!"\n") then .iLen -= 1 : iLineNumber += 1
 end select
 .iLen -= 1
 wend
 if .iLen=0 then
 if iStNext=0 then exit while
 iStStart = iStNext+1 : continue while
 end if
 end with
 dim as long iTokStart=0,iTokNext,iTokCnt=0,iTokEnd=len(sStatement)
 var pzStatement = cptr(ubyte ptr,strptr(sStatement))
 do
 if iTokCnt > ubound(sToken) then sOutput += "Error: " & SafeText("Too many tokens") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iTokCnt-1))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 with *cptr(fbStr ptr,@sToken(iTokCnt))
 .pzData = pzStatement+iTokStart
 while (g_bSeparators(.pzData[0]) and stToken)
 if .pzData[0]=0 then exit do
 .pzData += 1 : iTokStart += 1
 select case .pzData[-1]
 case asc(!"\n")
 iLineNumber += 1
 case asc(!"\r")
 if .pzData[0]=asc(!"\n") then .pzData += 1 : iTokStart += 1 : iLineNumber += 1
 case asc("/")
 if .pzData[0]=asc("/") then
 while iTokStart < iTokEnd andalso .pzData[0]<>asc(!"\r") andalso .pzData[0]<>asc(!"\n")
 .pzData += 1 : iTokStart += 1
 wend
 elseif .pzData[0]=asc("*") then
 .pzData += 1 : iTokStart += 1
 while iTokStart < iTokEnd andalso .pzData[0]
 .pzData += 1 : iTokStart += 1
 if .pzData[-1]=asc("*") andalso .pzData[0]=asc("/") then
 .pzData += 1 : iTokStart += 1 : exit while
 end if
 wend
 end if
 end select
 if iTokStart >= iTokEnd then .iSize = iLineNumber : exit do
 wend
 if (g_bSeparators(.pzData[0]) and (not stToken)) then
 .iLen = 1 : iTokStart += 1
 else
 .iLen = 0
 while g_bSeparators(.pzData[.iLen])=0
 if iTokStart >= iTokEnd then exit while
 .iLen += 1 : iTokStart += 1
 wend
 end if
 .iSize = iLineNumber
 if .iLen <= 0 then exit do
 iTokCnt += 1
 end with
 loop

 iStStart = iStNext+1
 if iTokCnt=0 then if iStNext=0 then exit while else continue while

 for N as long = 0 to iTokCnt-1
 if iTokenLineNumber <> (cptr(fbStr ptr,@sToken(N))->iSize) then
 iTokenLineNumber = (cptr(fbStr ptr,@sToken(N))->iSize)
 end if
 next N

 dim as long iCurToken=0
 dim as PartConnLS tConn
 tConn.iLeftPart = ecNotFound : tConn.iRightPart = ecNotFound


 do
 var iName=ecNotFound, bExisting = false
 if IsPrimative( sToken(iCurToken) ) then
 if len( sToken(iCurToken+(1)))=0 orelse iCurToken >= iTokCnt then sOutput += "Error: " & SafeText("Expected part name, got end of statement") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 if IsValidPartName( sToken(iCurToken+(1)) )=false then sOutput += "Error: " & SafeText("'"+sToken(iCurToken+(1))+"' is not a valid part name") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 iName = FindPartName( sToken(iCurToken+(1)) )
 if iName >= 0 then sOutput += "Error: " & SafeText("Name already exists") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 iName = AddPartName( sToken(iCurToken+(1)) , sToken(iCurToken) )
 if iName >=0 andalso g_tPart(iName).bFoundPart = 0 then
 sOutput += "Error: " & SafeText("'"+sToken(iCurToken)+"' primative not found") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 exit do
 end if
 iCurToken += 2
 else
 if IsValidPartName( sToken(iCurToken) )=false then sOutput += "Error: " & SafeText("'"+sToken(iCurToken)+"' is not a valid primative or part name") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 iName = FindPartName( sToken(iCurToken) )
 if iName < 0 then sOutput += "Error: " & SafeText("part name not declared") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 iCurToken += 1 : bExisting = true
 end if
 if iCurToken = iTokCnt then
 if tConn.iLeftPart<0 then exit do
 sOutput += "Error: " & SafeText("missing operands in the right side") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 end if

 if tConn.iLeftPart < 0 then tConn.iLeftPart = iName else tConn.iRightPart = iName
 if tConn.iLeftPart = tConn.iRightPart then sOutput += "Error: " & SafeText("a part can't connect to itself") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while

 dim as byte bDefinedXRot , bDefinedYRot , bDefinedZRot
 dim as byte bDefinedXOff , bDefinedYOff , bDefinedZOff

 with g_tPart(iName)
 do
 if iCurToken = iTokCnt then
 if tConn.iLeftPart < 0 then sOutput += "Error: " & SafeText("premature end of statement") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 exit do,do
 end if
 iCurToken += 1
 var sThisToken = sToken(iCurToken+(-1))
 select case sThisToken[0]
 case asc("s"),asc("c"):
 if tConn.iRightPart < 0 then
 if tConn.iRightType then sOutput += "Error: " & SafeText("Expected '=', got '"+sThisToken+"'") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 else
 if tConn.iRightType then sOutput += "Error: " & SafeText("Expected end of statement, got '"+sThisToken+"'") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 end if
 var iConn = ReadTokenNumber(sThisToken,1)
 if iConn <= 0 then sOutput += "Error: " & SafeText("invalid connector number") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 if LoadPartModel( g_tPart(iName) ) < 0 then
 sOutput += "Error: " & SafeText("failed to load model") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 end if
 var pModel = g_tModels( g_tPart(iName).iModelIndex).pModel
 var pSnap = cptr(PartSnap ptr,pModel->pData)
 with *pSnap
 select case sThisToken[0]
 case asc("s")
 if iConn > .lStudCnt then sOutput += "Error: " & SafeText("part "+"'"+g_tPart(iName).sName+"("+g_tPart(iName).sPrimative+")'"+" only have " & .lStudCnt & " studs.") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 if tConn.iRightPart < 0 then tConn.iLeftType=spStud : tConn.iLeftNum=iConn else tConn.iRightType=spStud : tConn.iRightNum=iConn
 case asc("c")
 if iConn > .lClutchCnt then sOutput += "Error: " & SafeText("part "+"'"+g_tPart(iName).sName+"("+g_tPart(iName).sPrimative+")'"+" only have " & .lClutchCnt & " clutches.") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 if tConn.iRightPart < 0 then tConn.iLeftType=spClutch : tConn.iLeftNum=iConn else tConn.iRightType=spClutch : tConn.iRightNum=iConn
 end select
 end with
 if tConn.iLeftType = tConn.iRightType then sOutput += "Error: " & SafeText("same type of connector") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 case asc("="):
 if tConn.iRightPart >= 0 then
 sOutput += "Error: " & SafeText("expected end of statement, got '"+sThisToken+"'") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 end if
 continue do,do
 case asc("x"):
 if bExisting then sOutput += "Error: " & SafeText("Can't define attributes for existing parts (redefined X offset or rotation)") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 select case sThisToken[1]
 case asc("o")
 if bDefinedXOff then sOutput += "Error: " & SafeText("Defined X offset twice") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 .tLocation.fPX += ReadTokenNumber( sThisToken , 2 , true ) : bDefinedXOff = 1
 case else
 if bDefinedXRot then sOutput += "Error: " & SafeText("Defined X rotation twice") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 .tLocation.fAX = ReadTokenNumber( sThisToken , 1-(sThisToken[1]=asc("r")) , true )*(PI/180) : bDefinedXrot = 1
 end select
 case asc("y"):
 if bExisting then sOutput += "Error: " & SafeText("Can't define attributes for existing parts (redefined Y offset or rotation)") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 select case sThisToken[1]
 case asc("o")
 if bDefinedYOff then sOutput += "Error: " & SafeText("Defined Y offset twice") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 .tLocation.fPY += ReadTokenNumber( sThisToken , 2 , true ) : bDefinedYOff = 1
 case else
 if bDefinedYRot then sOutput += "Error: " & SafeText("Defined Y rotation twice") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 .tLocation.fAY = ReadTokenNumber( sThisToken , 1-(sThisToken[1]=asc("r")) , true )*(PI/180) : bDefinedYrot = 1
 end select
 case asc("z"):
 if bExisting then sOutput += "Error: " & SafeText("Can't define attributes for existing parts (redefined Z offset or rotation)") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 select case sThisToken[1]
 case asc("o")
 if bDefinedZOff then sOutput += "Error: " & SafeText("Defined Z offset twice") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 .tLocation.fPZ += ReadTokenNumber( sThisToken , 2 , true ) : bDefinedZOff = 1
 case else
 if bDefinedZRot then sOutput += "Error: " & SafeText("Defined Z rotation twice") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 .tLocation.fAZ = ReadTokenNumber( sThisToken , 1-(sThisToken[1]=asc("r")) , true )*(PI/180) : bDefinedZrot = 1
 end select
 case asc("#"):
 if bExisting then
 sOutput += "Error: " & SafeText("Can't define attributes for existing parts") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 end if
 if .iColor >= 0 then sOutput += "Error: " & SafeText("color attribute was already set for part '"+.sName+"'") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 var iColor = ParseColor( sThisToken )
 if iColor < 0 then
 sOutput += "Error: " & SafeText("Invalid color format '"+sThisToken+"'") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 end if
 .iColor = iColor
 case else
 sOutput += "Error: " & SafeText("Unknown token '"+sThisToken+"'") & !"\r\nat line " & (cptr(fbStr ptr,@sToken(iCurToken))->iSize) & " '" & SafeText(sStatement) & !"'\r\n" : sResult="" : exit while
 end select
 loop
 end with
 loop

 with tConn
 if .iLeftPart <> ecNotFound andalso .iRightPart <> ecNotFound then
 AddConnection( tConn )
 end if
 end with

 if iStNext=0 then exit while
 wend


 puts("sNam sPrimative  Colr Idx Ct Ok LocX LocY LocZ AngX AngY AngZ SX    1    2    4   SY    6    8    9   SZ")
 for N as long = 0 to g_iPartCount-1
 with g_tPart(N)
 var sPrim = .sPrimative , iPos = instrrev(sPrim,"\")
 if iPos then sPrim = mid(sPrim,iPos+1)
 printf( !"%-4s %-11s %-4i %-3i %-2i %-2i " !"%4i %4i %4i %4i %4i %4i " !"%1.1f  %1.1f  %1.1f  " !"%1.1f  %1.1f  %1.1f  " !"%1.1f  %1.1f  %1.1f\n", .sName,sPrim,.iColor,.iModelIndex,.bPartCat,.bFoundPart, cint(.tLocation.fPX),cint(.tLocation.fPY),cint(.tLocation.fPZ), cint(.tLocation.fAX),cint(.tLocation.fAY),cint(.tLocation.fAZ), (.tMatrix.fScaleX) , (.tMatrix.f_1) , (.tMatrix.f_2) , (.tMatrix.f_4) , (.tMatrix.fScaleY) , (.tMatrix.f_6) , (.tMatrix.f_8) , (.tMatrix.f_9) , (.tMatrix.fScaleZ) , )
 end with
 next N
 if iStNext=0 andalso g_iPartCount>0 then
 dim as zstring*256 zTemp=any
 dim as SnapPV ptr pLeft=any,pRight=any
 dim as single tVec3(2) = any
 dim as byte bFirstConnect = true
 do
 dim as byte bDidConnect , bHaveStrayConnections
 for I as long = 0 to g_iConnCount-1
 with g_tConn(I)
 if g_tPart(.iLeftPart).bConnected=false then
 if g_tPart(.iRightPart).bConnected then
 swap .iLeftPart , .iRightPart : swap .iLeftType , .iRightType
 swap .iLeftNum , .iRightNum
 else
 if bFirstConnect then
 with g_tPart( g_tConn(I).iLeftPart )
 var iColor = iif( .iColor<0 , 16 , .iColor ) , psPrimative = @.sPrimative
 .bConnected = true
 tVec3(0) = .tLocation.fPX : tVec3(1) = .tLocation.fPY : tVec3(2) = .tLocation.fPZ
 .tMatrix = g_tIdentityMatrix
 if .tLocation.fAX then MatrixRotateX( .tMatrix , .tMatrix , .tLocation.fAX )
 if .tLocation.fAY then MatrixRotateY( .tMatrix , .tMatrix , .tLocation.fAY )
 if .tLocation.fAZ then MatrixRotateZ( .tMatrix , .tMatrix , .tLocation.fAZ )
 with .tMatrix
 sprintf(zTemp,!"1 %i %f %f %f %g %g %g %g %g %g %g %g %g %s\r\n",iColor, tVec3(0), tVec3(1), tVec3(2) , .m(0),.m(1),.m(2),.m(4),.m(5),.m(6),.m(8),.m(9),.m(10) , *psPrimative )
 end with
 sResult += zTemp
 end with
 bFirstConnect = false : bDidConnect = true : continue for
 else
 bHaveStrayConnections = 1 : continue for
 end if
 end if
 else
 if g_tPart(.iRightPart).bConnected then
 continue for
 else
 end if
 end if
 var pModel = g_tModels(g_tPart(.iLeftPart).iModelIndex).pModel
 var pSnap = cptr(PartSnap ptr,pModel->pData)
 select case .iLeftType
 case spStud : pLeft = pSnap->pStud +.iLeftNum-1
 case spClutch : pLeft = pSnap->pClutch+.iLeftNum-1
 case else : puts("Error")
 end select
 pModel = g_tModels(g_tPart(.iRightPart).iModelIndex).pModel
 pSnap = cptr(PartSnap ptr,pModel->pData)
 select case .iRightType
 case spStud : pRight = pSnap->pStud +.iRightNum-1
 case spClutch : pRight = pSnap->pClutch+.iRightNum-1
 case else : puts("Error")
 end select
 var ptLocation = @g_tPart(.iLeftPart).tLocation
 var pLeftPart = @g_tPart(.iLeftPart) , iRightPart_ = .iRightPart
 g_tPart(.iRightPart).bConnected = true : bDidConnect = true


 with g_tPart(iRightPart_)
 if memcmp( @pLeftPart->tMatrix , @g_tBlankMatrix , sizeof(Matrix4x4) ) = 0 then
 .tMatrix = g_tIdentityMatrix
 else
 .tMatrix = pLeftPart->tMatrix
 end if
 with *(pLeft->pMatOrg)
 end with
 : if pLeft->pMatOrg then MultMatrix4x4WithVector3x3( .tMatrix , .tMatrix , cptr(const single ptr,(pLeft->pMatOrg)) )
 : if pRight->pMatOrg then MultMatrix4x4WithVector3x3( .tMatrix , .tMatrix , cptr(const single ptr,(pRight->pMatOrg)) )
 if .tLocation.fAX then MatrixRotateX( .tMatrix , .tMatrix , .tLocation.fAX )
 if .tLocation.fAY then MatrixRotateY( .tMatrix , .tMatrix , .tLocation.fAY )
 if .tLocation.fAZ then MatrixRotateZ( .tMatrix , .tMatrix , .tLocation.fAZ )

 tVec3(0) = pLeft->fPX : tVec3(1) = pLeft->fPY : tVec3(2) = pLeft->fPZ
 tVec3(0) += pLeftPart->tMatrix.fPosX
 tVec3(1) += pLeftPart->tMatrix.fPosY
 tVec3(2) += pLeftPart->tMatrix.fPosZ

 dim as single tVec3R(2) = { pRight->fPX , pRight->fPY , pRight->fPZ }

 tVec3(0) = ptLocation->fPX - ( tVec3(0) + tVec3R(0)) + .tLocation.fPX
 tVec3(1) = ptLocation->fPY + ( tVec3(1) - tVec3R(1)) + .tLocation.fPY
 tVec3(2) = ptLocation->fPZ + ( tVec3(2) + tVec3R(2)) + .tLocation.fPZ

 .tLocation.fPX = tVec3(0) : .tLocation.fPY = tVec3(1) : .tLocation.fPZ = tVec3(2)
 dim as PartSize tPart = any : tPart = pModel->tSize
 var iIdx = .iModelIndex
 if (tPart.yMin-(-4)) < .0001 then tPart.yMin = 0
 tPart.xMin = tPart.xMin+.1+.tLocation.fPX : tPart.xMax = tPart.xMax-.1+.tLocation.fPX
 tPart.yMin = tPart.yMin+.1+.tLocation.fPY : tPart.yMax = tPart.yMax-.1+.tLocation.fPY
 tPart.zMin = tPart.zMin+.1+.tLocation.fPZ : tPart.zMax = tPart.zMax-.1+.tLocation.fPZ


 var iColor = iif(.iColor<0,16,.iColor), psPrimative = @.sPrimative
 with .tMatrix
 sprintf(zTemp,!"1 %i %f %f %f %g %g %g %g %g %g %g %g %g %s\r\n",iColor, tVec3(0), tVec3(1), tVec3(2) , (roundf(.m(0)*100000)/100000), (roundf(.m(1)*100000)/100000), (roundf(.m(2)*100000)/100000), (roundf(.m(4)*100000)/100000), (roundf(.m(5)*100000)/100000), (roundf(.m(6)*100000)/100000), (roundf(.m(8)*100000)/100000), (roundf(.m(9)*100000)/100000), (roundf(.m(10)*100000)/100000) , *psPrimative )
 end with
 sResult += zTemp
 end with

 end with
 next I

 if bDidConnect=false then
 if bFirstConnect=false andalso bHaveStrayConnections then
 bFirstConnect=true : continue do
 end if
 exit do
 end if
 loop
 end if
 puts("sNam sPrimative  Colr Idx Ct Ok LocX LocY LocZ AngX AngY AngZ SX    1    2    4   SY    6    8    9   SZ")
 for N as long = 0 to g_iPartCount-1
 with g_tPart(N)
 var sPrim = .sPrimative , iPos = instrrev(sPrim,"\")
 if iPos then sPrim = mid(sPrim,iPos+1)
 printf( !"%-4s %-11s %-4i %-3i %-2i %-2i " !"%4i %4i %4i %4i %4i %4i " !"%1.1f  %1.1f  %1.1f  " !"%1.1f  %1.1f  %1.1f  " !"%1.1f  %1.1f  %1.1f\n", .sName,sPrim,.iColor,.iModelIndex,.bPartCat,.bFoundPart, cint(.tLocation.fPX),cint(.tLocation.fPY),cint(.tLocation.fPZ), cint(.tLocation.fAX),cint(.tLocation.fAY),cint(.tLocation.fAZ), (.tMatrix.fScaleX) , (.tMatrix.f_1) , (.tMatrix.f_2) , (.tMatrix.f_4) , (.tMatrix.fScaleY) , (.tMatrix.f_6) , (.tMatrix.f_8) , (.tMatrix.f_9) , (.tMatrix.fScaleZ) , )
 end with
 next N

 clear sToken(0),0,16*sizeof(fbStr)
 clear sStatement,0,sizeof(fbStr)

 redim as PartStructLS g_tPart(_cPartMin)
 redim as PartConnLS g_tConn(_cConnMin)

 return sResult

end function







enum PartFlags
 wIsDonor = 1 shl (0)
 wIsAlias = 1 shl (1)
 wIsPreColored = 1 shl (2)
 wIsPath = 1 shl (3)
 wIsShortcut = 1 shl (4)
 wIsMultiColor = 1 shl (5)
 wIsTemplate = 1 shl (6)
 wIsPrinted = 1 shl (7)
 wIsStickered = 1 shl (8)
 wIsMoulded = 1 shl (9)
 wIsSticker = 1 shl (10)
 wIsHelper = 1 shl (11)
 wIsInverted = 1 shl (14)
 wIsHidden = 1 shl (15)
end enum
enum PartTypes
 ptUnknown
 ptBrick
 ptPlate
end enum

type SearchPartStruct
 iPartIndex as ulong
 iPrev as ulong
 qData as ulongint
 wFlags as ushort
 iFolder as ubyte
 bType as ubyte
 zDesc as zstring*108
 zName as zstring*65535
end type

static shared as ulong g_lHashList(65535), g_lPartCount
redim shared as ulong g_lPartIndex(0)
dim shared as any ptr g_pPartsNames


function HashName( sName as string ) as ushort
 var iHash = 65535
 dim as long I
 do
 if sName[I]=0 then return (iHash+I) and 65535
 iHash = iHash*19 + (sName[I] or 32)-asc("0")
 I += 1
 loop
end function
function ComparePartNames( pbA as ubyte ptr , pBB as ubyte ptr ) as long
 do
 var iA = *pbA or 32 , iB = *pbB or 32
 if iA <> iB then return clng(iA)-clng(iB)
 if *pbA = 0 then return 0
 pbA += 1 : pbB += 1
 loop
end function
function ComparePartialNames( pbA as ubyte ptr , pBB as ubyte ptr ) as long
 do
 var iA = *pbA or 32 , iB = *pbB or 32
 if *pbA = 0 then return 0
 if iA <> iB then return clng(iA)-clng(iB)
 pbA += 1 : pbB += 1
 loop
end function
function FindPart( sName as string ) as SearchPartStruct ptr
 var iHash = HashName( sName )
 var iOffset = g_lHashList( iHash )
 var sNameL = sName+".dat" , pbName = cptr(ubyte ptr,strptr(sNameL))
 while iOffset
 with *cptr(SearchPartStruct ptr,g_pPartsNames+iOffset)
 if ComparePartNames( pbName , cptr(ubyte ptr,@.zName) ) = 0 then return g_pPartsNames+iOffset
 iOffset = .iPrev
 end with
 wend
 return NULL
end function
function CompareIndexedPartName cdecl ( pA as const any ptr , pB as const any ptr ) as long
 var pbA = cptr(ubyte ptr, @( cptr( SearchPartStruct ptr , g_pPartsNames+*cptr( ulong ptr , pA) )->zName))
 var pbB = cptr(ubyte ptr, @( cptr( SearchPartStruct ptr , g_pPartsNames+*cptr( ulong ptr , pB) )->zName))
 var iResu = ComparePartNames( pbA , pBB )
 if iResu=0 then return cptr( SearchPartStruct ptr , g_pPartsNames+*cptr( ulong ptr , pA) )->iFolder - cptr( SearchPartStruct ptr , g_pPartsNames+*cptr( ulong ptr , pB) )->iFolder
 return ComparePartNames( pbA , pBB )
end function
function FindPartIndex( sName as string ) as long
 dim as long uFirst=0,uLast=g_lPartCount-1
 var sNameL = sName+".dat" , pName = cptr(ubyte ptr,strptr(sNameL))
 do
 var uMid = (uFirst+uLast)\2
 var pbB = cptr(ubyte ptr, @( cptr( SearchPartStruct ptr , g_pPartsNames+g_lPartIndex(uMid) ) )->zName)
 var uCmp = ComparePartNames( pName , pbB )
 if uCmp=0 then return uMid
 if uFirst = uLast then return -1
 if uCmp>0 then uFirst = uMid+1 else uLast = uMid-1
 if uFirst > uLast then return -1
 loop
end function
function SearchPart( sName as string , iPrev as long = -1 ) as long
 dim as long uFirst=0,uLast=g_lPartCount-1,uMid=any
 var sNameL = sName , pName = cptr(ubyte ptr,strptr(sNameL))
 if iPrev < 0 then
 do
 uMid = (uFirst+uLast)\2
 var pbB = cptr(ubyte ptr, @( cptr( SearchPartStruct ptr , g_pPartsNames+g_lPartIndex(uMid) ) )->zName)
 var uCmp = ComparePartialNames( pName , pbB )
 if uCmp=0 then exit do
 if uFirst = uLast then return -1
 if uCmp>0 then uFirst = uMid+1 else uLast = uMid-1
 if uFirst > uLast then return -1
 loop
 while uMid > 0 andalso ComparePartialNames( pName , cptr(ubyte ptr, @( cptr( SearchPartStruct ptr , g_pPartsNames+g_lPartIndex(uMid-1) ) )->zName) )=0
 uMid -= 1
 wend
 return uMid
 else
 if ComparePartialNames( pName , cptr(ubyte ptr, @( cptr( SearchPartStruct ptr , g_pPartsNames+g_lPartIndex(iPrev+1) ) )->zName) ) then return -1
 return iPrev+1
 end if
end function

function instrWhole( sText as string , sSearch as string ) as long
 var iResu = instr(sText,sSearch)
 if iResu=0 then return 0
 select case sText[iResu+len(sSearch)-1]
 case asc("0") to asc("9"), asc("A") to asc("Z"), asc("a") to asc("z")
 return 0
 end select
 return iResu
end function
function LoadPartNames() as long

 var f = freefile()
 dim as ulong uPartNamesSize = sizeof(ulong)

 if open(exepath+"\PartCache.bin" for binary access read as #f) then
 if g_pPartsNames then deallocate(g_pPartsNames)
 g_pPartsNames = allocate(uPartNamesSize)

 for N as long = 1 to ubound(g_sPathList)
 var sPath = g_sPathList(N) & "\"
 if instr(sPath,"\p\") then exit for
 var sName = dir( sPath & "*.dat")


 var iLen = len(sName), sDesc = ""
 while iLen
 var f = freefile(), iGotComment=0, sLine = "",wFlags=0
 var bDetectedType=ptUnknown
 open sPath & sName for input as #f
 do until eof(f)
 line input #f, sLine
 sLine = lcase(trim(sLine))
 if len(sLine)=0 then continue do
 if sLine[0]<>asc("0") then exit do
 if sLine[2] = asc("~") then wFlags or= wIsShortcut
 if instr(sLine,"helper") then wFlags or= wIsHelper
 if instr(sLine,"unofficial_part alias") then wFlags or= wIsAlias
 if instr(sLine,"unofficial_shortcut") then wFlags or= wIsShortCut
 if instr(sLine,"sticker") then wFlags or= wIsStickered
 if instrWhole(sLine," print") then wFlags or= wIsHidden
 if instrWhole(sLine," pattern") then wFlags or= wIsHidden
 if iGotComment=0 then
 if sLine[2] = asc("=") then wFlags or= wIsAlias
 if instrWhole(sLine," brick") then bDetectedType = ptBrick
 if instrWhole(sLine," plate") then bDetectedType = ptPlate
 sDesc = sLine : iGotComment=1
 end if
 loop
 close #f
 if iGotComment=0 then
 print "WARNING: couldnt obtain comment for '"+sName+"'"
 end if

 var iChar = sName[iLen-4] : sName[iLen-4]=0
 var iHash = HashName( sName ) : sName[iLen-4] = iChar

 var iSize = (( cint( @cast( SearchPartStruct ptr, 0 )->zName )+iLen+1) or 3)+1
 g_pPartsNames = reallocate( g_pPartsNames , uPartNamesSize+iSize )
 if g_pPartsNames = NULL then
 print "Failed reallocate"
 return false
 end if

 with *cptr( SearchPartStruct ptr , g_pPartsNames+uPartNamesSize )
 .iPartIndex = 0 : .iFolder = N
 .iPrev = g_lHashList(iHash)
 .wFlags = wFlags
 .bType = bDetectedType
 .zDesc = mid(sDesc,3)
 .zName = sName
 end with
 if (g_lPartCount and 1023)=0 then redim preserve g_lPartIndex(g_lPartCount+1023)
 g_lHashList(iHash)=uPartNamesSize
 g_lPartIndex(g_lPartCount)=uPartNamesSize
 g_lPartCount += 1
 uPartNamesSize += iSize
 sName = dir() : iLen = len(sName)
 wend
 next N
 redim preserve g_lPartIndex(g_lPartCount-1)
 qsort( @g_lPartIndex(0) , g_lPartCount , sizeof(long) , @CompareIndexedPartName )

 if open(exepath+"\PartCache.bin" for binary access write as #f) then
 print "ERROR: failed to open file to write cache file"
 else
 put #f,,g_lPartCount
 put #f,,uPartNamesSize
 put #f,,g_lHashList()
 put #f,,g_lPartIndex()
 put #f,,*cptr(ubyte ptr,g_pPartsNames),uPartNamesSize
 close #f
 end if

 else
 get #f,,g_lPartCount
 get #f,,uPartNamesSize
 redim g_lPartIndex(g_lPartCount-1)
 get #f,,g_lHashList()
 get #f,,g_lPartIndex(0),g_lPartCount
 g_pPartsNames = allocate(uPartNamesSize)
 if g_pPartsNames=0 then print "ERROR: Failed to allocate memory for parts cache"
 get #f,,*cptr(ubyte ptr,g_pPartsNames),uPartNamesSize
 close #f
 end if

 return true
end function

LoadPartNames()








dim shared as HWND g_hCon=any,g_hContainer=any
dim shared as HWND g_hSearch=any,g_hStatus=any
dim shared as RECT g_rcCon = any , g_rcSearch
dim shared as POINT g_rcCursor
dim shared as long g_ConWid,g_ConHei,g_FntWid,g_FntHei
dim shared as long g_SearchVis , g_SearchRowHei
dim shared as byte g_SearchChanged , g_DoFilterDump

dim shared as long g_FilterFlags = wIsHidden , g_ReverseFilterFlags = 0


 dim shared cfg_MaxSearchParts as long = 50
 dim shared cfg_SearchBoxRows as byte = 5
 dim shared cfg_SearchBoxCols as byte = 5
 dim shared cfg_PrimAutoCompleteManual as byte = 1
 dim shared cfg_PrimAutoCompleteSelection as byte = 1

 const sConfigFilename = "LS_CLI.ini" , sConfigSection = "Config"
 sub LoadConfig()
 var sConfigFile = exepath+"\"+sConfigFilename
 cfg_MaxSearchParts = GetPrivateProfileInt(sConfigSection,"MaxSearchParts",50,sConfigFile)
 cfg_SearchBoxRows = GetPrivateProfileInt(sConfigSection,"SearchBoxRows",5,sConfigFile)
 cfg_SearchBoxCols = GetPrivateProfileInt(sConfigSection,"SearchBoxColumns",5,sConfigFile)
 cfg_PrimAutoCompleteManual = GetPrivateProfileInt(sConfigSection,"PrimAutoCompleteManual",1,sConfigFile)
 cfg_PrimAutoCompleteSelection = GetPrivateProfileInt(sConfigSection,"PrimAutoCompleteSelection",1,sConfigFile)
 end sub
 sub SaveConfig()
 var sConfigFile = exepath+"\"+sConfigFilename
 WritePrivateProfileString( sConfigSection , "MaxSearchParts" , "" & cfg_MaxSearchParts , sConfigFile )
 WritePrivateProfileString( sConfigSection , "SearchBoxRows" , "" & cfg_SearchBoxRows , sConfigFile )
 WritePrivateProfileString( sConfigSection , "SearchBoxColumns" , "" & cfg_SearchBoxCols , sConfigFile )
 WritePrivateProfileString( sConfigSection , "PrimAutoCompleteManual" , "" & cfg_PrimAutoCompleteManual , sConfigFile )
 WritePrivateProfileString( sConfigSection , "PrimAutoCompleteSelection" , "" & cfg_PrimAutoCompleteSelection , sConfigFile )
 end sub
 LoadConfig()

function SearchContainerMessages( hWnd as HWND , iMsg as integer , wParam as WPARAM , lParam as LPARAM ) as LRESULT
 select case iMsg
 case WM_CLOSE
 return 0
 case WM_COMMAND
 var hWnd = cast(HWND,lParam)
 var wNotifyCode = (cuint(wParam) shr 16)
 select case hWnd
 case g_hSearch
 select case wNotifyCode
 case LBN_SELCHANGE
 g_SearchChanged = true
 end select
 end select
 return 0
 end select
 return DefWindowProc( hWnd , imsg , wParam , lParam)
end function
sub InitSearchWindow()

 g_hCon = g_tMainCtx.hCtl(wcEdit).hwnd

 const SearchContainer = "SearchContainer"
 dim as WNDCLASSEX wx
 var hInstance = GetModuleHandle(0)
 with wx
 .cbSize = sizeof(WNDCLASSEX)
 .lpfnWndProc = cast(any ptr,@SearchContainerMessages)
 .hInstance = hInstance
 .lpszClassName = @SearchContainer
 end with
 if RegisterClassEx(@wx)=0 then print "Failed to register Class": sleep: system

 const cMainStyle = WS_POPUPWINDOW
 const cStatusStyle = WS_POPUPWINDOW or SS_LEFT or WS_DISABLED or WS_VISIBLE
 const cMainStyleEx = WS_EX_LAYERED or WS_EX_TOPMOST
 const cStyle = WS_CHILD or WS_VISIBLE
 const cListBoxStyle = cStyle or WS_HSCROLL or LBS_MULTICOLUMN or LBS_NOTIFY or LBS_NOINTEGRALHEIGHT
 const cTextStyle = cStyle or SS_LEFT

 dim as POINT tStatusPT = (0,g_rcCon.Bottom-24)
 ClientToScreen( g_hCon , @tStatusPT )
 g_hStatus = g_tMainCtx.hCtl(wcStatus).hwnd
 g_hContainer = CreateWindowEx( cMainStyleEx, SearchContainer, SearchContainer ,cMainStyle,0, 0, 0, 0,g_hCon , NULL, hInstance, NULL )
 g_hSearch = CreateWindowEx( 0 , "listbox" , NULL , cListBoxStyle , 0,0,300,100 , g_hContainer , NULL, hInstance, NULL )
 SetLayeredWindowAttributes( g_hContainer , 0 , 192 , LWA_ALPHA )

 dim as RECT tRcItem = any
 SendMessage( g_hSearch , LB_ADDSTRING , 0 , cast(LPARAM,@"1") )
 SendMessage( g_hSearch , LB_ADDSTRING , 0 , cast(LPARAM,@"2") )
 SendMessage( g_hSearch , LB_GETITEMRECT , 1 , cast(LPARAM,@tRcItem) )
 SendMessage( g_hSearch , LB_RESETCONTENT , 0,0 )
 g_SearchRowHei = tRcItem.top


end sub
sub ProcessMessage( tMsg as MSG )
 if tMsg.hwnd <> g_hSearch then exit sub
 if tMsg.message = WM_LBUTTONDBLCLK then
 SendMessage( g_hCon , WM_CHAR , asc(" ") , 1 or (fb.SC_SPACE shl 16) or (1 shl 30) )
 exit sub
 end if
 if tMsg.message = WM_KEYDOWN then
 if (tMsg.wParam = VK_SPACE orelse tMsg.wParam = VK_RETURN orelse tMsg.wParam = VK_BACK) then
 if tMsg.wParam = VK_SPACE orelse tMsg.wParam = VK_BACK then
 tMsg.hwnd = g_hCon
 TranslateMessage( @tMsg )
 end if
 exit sub
 end if
 end if
end sub

type FilteredListDump
 as string sIsDonor
 as string sIsAlias
 as string sIsPreColored
 as string sIsPath
 as string sIsShortcut
 as string sIsMultiColor
 as string sIsTemplate
 as string sIsPrinted
 as string sIsStickered
 as string sIsMoulded
 as string sIsSticker
 as string sIsHelper
 as string sIsInverted
 as string sIsHidden
end type

static shared as FilteredListDump tFilteredDump
static shared as long g_iFilteredCount

function GetPartDescription( iPart as long ) as string
 var pPart = cptr( SearchPartStruct ptr , g_pPartsNames+g_lPartIndex(iPart) )
 var sDesc = trim(pPart->zDesc), iPos=0
 while sDesc[iPos] = asc("~")
 const sMoved = "moved to "
 var iMoved = instr(iPos+1,lcase(sDesc),sMoved)
 if iMoved then
 var iPart2 = SearchPart(mid(sDesc,iMoved+len(sMoved)))
 if iPart2 then
 pPart = cptr( SearchPartStruct ptr , g_pPartsNames+g_lPartIndex(iPart2) )
 var iPos2 = len(sDesc)+2
 sDesc = left(sDesc,iPos)+mid(sDesc,iPos+2) & " > " & pPart->zDesc
 iPos = iPos2
 continue while
 end if
 end if
 exit while
 wend
 if pPart->iFolder=2 then return "[Unnoficial] "+sDesc
 return " "+sDesc
end function
function IsPartFiltered( pPart as SearchPartStruct ptr ) as boolean
 if pPart=NULL then return true
 with *pPart
 if g_ReverseFilterFlags andalso (.wFlags and g_ReverseFilterFlags)=0 then return true
 if (.wFlags and g_FilterFlags) then return true

 if (g_FilterFlags and wIsHidden)=false then return false
 var sPart = pPart->zName
 var sPartID = left(sPart,instr(sPart,".")-1)
 var iLenID = len(sPartID)
 if iLenID < 3 then return false

 if (g_FilterFlags and wIsHidden) then
 for N as long = -4 to -3
 select case sPartID[iLenID+N]
 case asc("c"),asc("p")
 for M as long = N+1 to -1
 if IsDigit(sPartID[iLenID+M])=0 then continue for,for
 next M
 return true
 end select
 next N
 end if
 end with
 return false

end function
function UpdateSearch(sSearch as string) as long

 dim as long iPart = -1, iFound = 0

 SendMessage( g_hSearch , WM_SETREDRAW , false , 0 )
 SendMessage( g_hSearch , LB_RESETCONTENT , 0,0 )

 var hDC = GetDC(g_hSearch)
 var hFont = cast(HFONT , SendMessage( g_hSearch , WM_GETFONT , 0 , 0 ))
 var iBigWid = 0, iCharWid = 0
 SelectObject( hDC , hFont )

 dim as SIZE tSize
 dim as string sShowDesc
 g_iFilteredCount = 0
 for N as long = 0 to (1 shl 24)
 iPart = SearchPart(sSearch,iPart)
 if iPart<0 then exit for
 var pPart = cptr( SearchPartStruct ptr , g_pPartsNames+g_lPartIndex(iPart) )
 var sName = pPart->zName
 if IsPartFiltered(pPart) then
 if g_DoFilterDump then
 if ((pPart->wFlags and g_FilterFlags) and wIsDonor) then tFilteredDump.sIsDonor &= !"\n" & sName
 if ((pPart->wFlags and g_FilterFlags) and wIsAlias) then tFilteredDump.sIsAlias &= !"\n" & sName
 if ((pPart->wFlags and g_FilterFlags) and wIsPreColored) then tFilteredDump.sIsPreColored &= !"\n" & sName
 if ((pPart->wFlags and g_FilterFlags) and wIsPath) then tFilteredDump.sIsPath &= !"\n" & sName
 if ((pPart->wFlags and g_FilterFlags) and wIsShortcut) then tFilteredDump.sIsShortcut &= !"\n" & sName
 if ((pPart->wFlags and g_FilterFlags) and wIsMultiColor) then tFilteredDump.sIsMultiColor &= !"\n" & sName
 if ((pPart->wFlags and g_FilterFlags) and wIsTemplate) then tFilteredDump.sIsTemplate &= !"\n" & sName
 if ((pPart->wFlags and g_FilterFlags) and wIsPrinted) then tFilteredDump.sIsPrinted &= !"\n" & sName
 if ((pPart->wFlags and g_FilterFlags) and wIsStickered) then tFilteredDump.sIsStickered &= !"\n" & sName
 if ((pPart->wFlags and g_FilterFlags) and wIsMoulded) then tFilteredDump.sIsMoulded &= !"\n" & sName
 if ((pPart->wFlags and g_FilterFlags) and wIsSticker) then tFilteredDump.sIsSticker &= !"\n" & sName
 if ((pPart->wFlags and g_FilterFlags) and wIsHelper) then tFilteredDump.sIsHelper &= !"\n" & sName
 if ((pPart->wFlags and g_FilterFlags) and wIsInverted) then tFilteredDump.sIsInverted &= !"\n" & sName
 if ((pPart->wFlags and g_FilterFlags) and wIsHidden) then tFilteredDump.sIsHidden &= !"\n" & sName
 end if
 g_iFilteredCount += 1 : continue for
 end if
 var sDesc = GetPartDescription(iPart)
 if (g_FilterFlags and wIsHidden) andalso (sDesc[0]=asc("=") orelse sDesc[0]=asc("_")) then g_iFilteredCount += 1 : continue for
 if N >= cfg_MaxSearchParts then continue for
 if SendMessage( g_hSearch , LB_FINDSTRING , 0 , cast(LPARAM,strptr(sName)) ) <> LB_ERR then
 sName = "Unoff\"+sName
 end if
 GetTextExtentPoint32( hDC , sName , len(sName) , @tSize )
 if iCharWid=0 then iCharWid = tSize.CX\len(sName)
 if tSize.CX > iBigWid then iBigWid = tSize.CX
 var iIdx = SendMessage( g_hSearch , LB_ADDSTRING , 0 , cast(LPARAM,strptr(sName)) )
 SendMessage( g_hSearch , LB_SETITEMDATA , iIdx , iPart )
 if iFound=0 then sShowDesc = sDesc
 iFound += 1
 next

 if g_iFilteredCount then sShowDesc = "(" & g_iFilteredCount & " Filtered) "+sShowDesc
 SetWindowText( g_hStatus , " " & sShowDesc )

 var iRows = iif(iFound>cfg_SearchBoxRows,cfg_SearchBoxRows,iFound)
 var iCols = (iFound+(cfg_SearchBoxRows-1))\cfg_SearchBoxRows
 var iScrollHei = iif( iCols>(cfg_SearchBoxCols-1) , GetSystemMetrics(SM_CYVTHUMB)+2 , 0 )
 if iCols > (cfg_SearchBoxCols-1) then iCols = (cfg_SearchBoxCols-1)
 if iScrollHei then
 SetWindowLong( g_hSearch , GWL_STYLE , GetWindowLong( g_hSearch ,GWL_STYLE) or WS_HSCROLL )
 else
 SetWindowLong( g_hSearch , GWL_STYLE , GetWindowLong( g_hSearch ,GWL_STYLE) and (not WS_HSCROLL) )
 end if
 SetWindowPos( g_hSearch , NULL , 0,0 , (iBigWid+iCharWid)*iCols , iRows*g_SearchRowHei+iScrollHei , SWP_NOMOVE or SWP_NOZORDER or SWP_NOACTIVATE )

 dim as POINT rCpt = g_rcCursor
 ClientToScreen( g_hCon , @rCpt )
 GetWindowRect( g_hSearch , @g_rcSearch )
 g_rcSearch.right -= g_rcSearch.left : g_rcSearch.bottom -= g_rcSearch.top
 SetWindowPos( g_hContainer , NULL , rcPt.x , rcPt.y , g_rcSearch.right , g_rcSearch.bottom , SWP_NOZORDER or SWP_NOACTIVATE )

 SendMessage( g_hSearch , WM_SETREDRAW , true , 0 )
 if iFound then
 SendMessage( g_hSearch , LB_SETCOLUMNWIDTH , iBigWid+iCharWid , 0 )
 var sStemp = sSearch+".dat"
 var iIdx = SendMessage( g_hSearch , LB_FINDSTRINGEXACT , 0 , cast(lparam,strptr(sStemp)) )
 if iIDX <> LB_ERR then SendMessage( g_hSearch , LB_SETCURSEL , iIdx , iIdx )
 end if
 return iFound
end function
sub ShowDumpTextFile( Dummy as any ptr )
 var sDumpFile = exepath()+"\FilteredParts.txt"
 shell sDumpFile
end sub
sub DumpFilteredParts( sSearch as string )
 if len(sSearch)<2 then exit sub
 g_DoFilterDump = 1 : UpdateSearch(sSearch) : g_DoFilterDump = 0
 var sDumpFile = exepath()+"\FilteredParts.txt"
 var f = freefile()
 if open(sDumpFile for output as #f) then exit sub
 with tFilteredDump
 if len(.sIsDonor) then
 print #f, "[" $"Donor" "]";.sIsDonor
 .sIsDonor = ""
 end if
 if len(.sIsAlias) then
 print #f, "[" $"Alias" "]";.sIsAlias
 .sIsAlias = ""
 end if
 if len(.sIsPreColored) then
 print #f, "[" $"PreColored" "]";.sIsPreColored
 .sIsPreColored = ""
 end if
 if len(.sIsPath) then
 print #f, "[" $"Path" "]";.sIsPath
 .sIsPath = ""
 end if
 if len(.sIsShortcut) then
 print #f, "[" $"Shortcut" "]";.sIsShortcut
 .sIsShortcut = ""
 end if
 if len(.sIsMultiColor) then
 print #f, "[" $"MultiColor" "]";.sIsMultiColor
 .sIsMultiColor = ""
 end if
 if len(.sIsTemplate) then
 print #f, "[" $"Template" "]";.sIsTemplate
 .sIsTemplate = ""
 end if
 if len(.sIsPrinted) then
 print #f, "[" $"Printed" "]";.sIsPrinted
 .sIsPrinted = ""
 end if
 if len(.sIsStickered) then
 print #f, "[" $"Stickered" "]";.sIsStickered
 .sIsStickered = ""
 end if
 if len(.sIsMoulded) then
 print #f, "[" $"Moulded" "]";.sIsMoulded
 .sIsMoulded = ""
 end if
 if len(.sIsSticker) then
 print #f, "[" $"Sticker" "]";.sIsSticker
 .sIsSticker = ""
 end if
 if len(.sIsHelper) then
 print #f, "[" $"Helper" "]";.sIsHelper
 .sIsHelper = ""
 end if
 if len(.sIsInverted) then
 print #f, "[" $"Inverted" "]";.sIsInverted
 .sIsInverted = ""
 end if
 if len(.sIsHidden) then
 print #f, "[" $"Hidden" "]";.sIsHidden
 .sIsHidden = ""
 end if
 end with
 close #f
 ThreadDetach(ThreadCreate( @ShowDumpTextFile , NULL ))
end sub

type SearchQueryContext
 as byte bChanged=1 , bRecalcTokens=TRUE , iTokCnt=any , iCurTok=any , iMaxTok = 8
 as long iCur,iTokStart=1,iTokEnd=1
 as string sCaption , sStatusText , sToken = ""
 redim as string sTokenTxt(any)
end type

function HandleTokens( sText as string , tCtx as SearchQueryContext ) as long
 function = 0
 dim as byte bDontSearch = 0
 with tCtx
 if .bChanged orelse .bReCalcTokens then
 .bReCalcTokens=false
 dim as long I = 1,iStart=0
 .iTokCnt = 0 : .iCurTok = 0
 do
 while asc(sText,I)=32 : I+= 1 : wend
 iStart = I
 while asc(sText,I)<>32 andalso asc(sText,I)<>0 : I+= 1 : wend
 if I <> iStart then
 if (.iCur+1)>=iStart andalso .iCur<=I then .iCurTok = .iTokCnt
 .sTokenTxt(.iTokCnt) = mid(sText,iStart,I-iStart)
 .iTokCnt += 1
 if .iTokCnt = .iMaxTok then
 .iMaxTok += 8 : redim preserve .sTokenTxt(.iMaxTok-1)
 end if
 end if
 loop while asc(sText,I)

 if .iCurTok andalso .sTokenTxt(.iCurTok-1) <> "=" then bDontSearch = 1

 .sCaption = .iCur & " > Tokens: " & .iTokCnt & "(" & .iCurTok & ") " & .iTokStart & "-" & .iTokEnd & " {"
 for I=0 to .iTokCnt-1
 if I then .sCaption += ","
 if I=.iCurTok then
 .sCaption += "['"+.sTokenTxt(I)+"']"
 else
 .sCaption += "'"+.sTokenTxt(I)+"'"
 end if
 next I

 end if

 if g_SearchChanged then
 g_SearchChanged = false
 var iSel = SendMessage( g_hSearch , LB_GETCURSEL , 0 , 0 )
 var iPart = SendMessage( g_hSearch , LB_GETITEMDATA , iSel , 0 )
 var pPart = cptr( SearchPartStruct ptr , g_pPartsNames+g_lPartIndex(iPart) ), sPart = pPart->zName
 sPart = left(sPart,instrrev(sPart,".")-1)
 SetWindowText( g_hStatus , GetPartDescription(iPart) )
 sText = left(sText,.iTokStart-1)+sPart+mid(sText,.iTokEnd+1)
 .iCur = (.iTokStart-1)+len(sPart)
 if .bChanged=0 then .bChanged=-1
 end if

 if .bChanged then

 function = .bChanged

 .iTokStart = instrrev(sText," ",.iCur)+1
 .iTokEnd = instr(.iCur+1,sText," ")-1
 if .iTokEnd <= 0 then .iTokEnd = len(sText)
 .sToken = mid(sText,.iTokStart,(.iTokEnd-.iTokStart)+1)


 if .bChanged=1 then
 dim as CHARRANGE tSelRange = any
 SendMessage( g_tMainCtx.hCtl(wcEdit).hwnd , EM_EXGETSEL , 0 , cast(LPARAM,@tSelRange) )
 SendMessage( g_tMainCtx.hCtl(wcEdit).hwnd , EM_POSFROMCHAR , cast(WPARAM,@g_RcCursor) , tSelRange.cpMin )
 g_RcCursor.x += g_tMainCtx.hFnt( wfEdit ).bCurWid+1
 g_RcCursor.y += g_tMainCtx.hFnt( wfEdit ).bCurHei+1
 g_SearchVis = iif( bDontSearch=0 andalso len(.sToken)>1 andalso UpdateSearch(.sToken) , SW_SHOWNA , SW_HIDE )
 ShowWindow( g_hContainer , g_SearchVis )
 if g_SearchVis = SW_HIDE then SetWindowText( g_hStatus , .sStatusText )
 end if

 .bChanged=0

 var sFilters = " Filters:"
 if g_FilterFlags andalso IsWindowVisible(g_hContainer) then
 if g_FilterFlags and wIsDonor then sFilters += " " $"Donor"
 if g_FilterFlags and wIsAlias then sFilters += " " $"Alias"
 if g_FilterFlags and wIsPreColored then sFilters += " " $"PreColored"
 if g_FilterFlags and wIsPath then sFilters += " " $"Path"
 if g_FilterFlags and wIsShortcut then sFilters += " " $"Shortcut"
 if g_FilterFlags and wIsMultiColor then sFilters += " " $"MultiColor"
 if g_FilterFlags and wIsTemplate then sFilters += " " $"Template"
 if g_FilterFlags and wIsPrinted then sFilters += " " $"Printed"
 if g_FilterFlags and wIsStickered then sFilters += " " $"Stickered"
 if g_FilterFlags and wIsMoulded then sFilters += " " $"Moulded"
 if g_FilterFlags and wIsSticker then sFilters += " " $"Sticker"
 if g_FilterFlags and wIsHelper then sFilters += " " $"Helper"
 if g_FilterFlags and wIsInverted then sFilters += " " $"Inverted"
 if g_FilterFlags and wIsHidden then sFilters += " " $"Hidden"
 end if
 if sFilters=" Filters:" then sFilters="" else sFilters += "(" & g_iFilteredCount & " filtered)"
 SetWindowText( GetConsoleWindow() , .sCaption+"}"+sFilters)

 end if
 end with
end function


 enum MenuEntries
 meFirst = 1000

 meFile_New
 meFile_open
 meFile_Save
 meFile_SaveAs

 meFile_Exit


 meEdit_Undo
 meEdit_Copy


 meCompletion_Enable
 sbeCompletion_Filters
 meCompletion_ClearFilters
 meCompletion_InvertFilters

 meFilter_Variations
 meFilter_Donor
 meFilter_Path
 meFilter_Printed
 meFilter_Shortcut
 meFilter_Stickered
 meFilter_MultiColor
 meFilter_PreColored
 meFilter_Template
 meFilter_Alias
 meFilter_Moulded
 meFilter_Helper
 meFilter_Stickers



 meView_ToggleGW

 meView_ResetView
 meView_NextPart
 meView_PrevPart

 meView_ShowBox
 meView_ResetBox
 meView_NextBoxPart
 meView_PrevBoxPart


 meHelp_About

 meLast
 end enum

namespace Menu
 function AddSubMenu( hMenu as any ptr , sText as string , iID as long = 0 ) as any ptr
 if IsMenu(hMenu)=0 then return NULL
 var hResult = CreatePopupMenu()
 dim as MENUITEMINFOA tItem = type( sizeof(MENUITEMINFO) )
 with tItem
 .fMask = MIIM_SUBMENU or MIIM_ID or MIIM_STRING
 .hSubMenu = hResult : .wId = iID
 .dwTypeData = strptr(stext)
 end with
 InsertMenuItemA( hMenu , -1 , true , @tItem )
 if hMenu=g_WndMenu andalso g_tMainCtx.hCtl(wcMain).hwnd then DrawMenuBar( g_tMainCtx.hCtl(wcMain).hwnd )
 return hResult
 end function
 function MenuAddEntry( hMenu as any ptr , iID as long = 0 , sText as string = "" , pEvent as any ptr = 0 , bState as long = 0 ) as long
 if IsMenu(hMenu)=0 then return -1
 dim as MENUITEMINFOA tItem = type( sizeof(MENUITEMINFO) )
 tItem.fMask = MIIM_DATA or MIIM_ID or MIIM_STATE or MIIM_TYPE
 tItem.fType = iif( len(sText) , iif( bState and MFT_RADIOCHECK , MFT_RADIOCHECK , MFT_STRING ) , MFT_SEPARATOR )
 tItem.fState = bState and (not MFT_RADIOCHECK)
 tItem.wID = iID
 tItem.dwItemData = cast(long_ptr,pEvent)
 if len(sText) then tItem.dwTypeData = strptr(sText)
 InsertMenuItemA( hMenu , &hFFFFFFFF , true , @tItem )
 return iID
 end function
 function MenuState( hMenu as any ptr , iID as long , bState as long = 0 ) as long
 if IsMenu(hMenu)=0 then return -1
 dim as MENUITEMINFO tItem = type( sizeof(MENUITEMINFO) , MIIM_STATE )
 tItem.fState = bState
 SetMenuItemInfo( hMenu , iID , false , @tItem )
 return bState
 end function
 function MenuText( hMenu as any ptr , iID as long , sText as string ) as long
 if IsMenu(hMenu)=0 then return -1
 dim as MENUITEMINFO tItem = type( sizeof(MENUITEMINFO) , MIIM_TYPE )
 GetMenuItemInfo( hMenu , iID , false , @tItem )
 tItem.dwTypeData = strptr(sText)
 SetMenuItemInfo( hMenu , iID , false , @tItem )
 return len(sText)
 end function
 sub Trigger( iID as ushort )
 SendMessage( g_tMainCtx.hCtl(wcMain).hwnd,WM_MENUSELECT,iID,cast(LPARAM,g_WndMenu))
 SendMessage( g_tMainCtx.hCtl(wcMain).hwnd , WM_COMMAND , iID , 0 )
 end sub
end namespace
namespace Viewer
 dim shared as byte g_LoadFile = 0
 dim shared as string g_sGfxFile , g_sFileName
 dim shared as any ptr g_Mutex

 function LoadMemory( sContents as string , sName as string = "Unnamed.ls" ) as boolean
 MutexLock( g_Mutex )
 g_sGfxFile = sContents : g_sFileName = sName
 g_LoadFile = 1
 Mutexunlock( g_Mutex )
 return true
 end function
 function LoadFile( sFile as string ) as boolean
 dim as boolean bLoadResult = FALSE
 MutexLock( g_Mutex )
 do
 g_LoadFile = 0
 if .LoadFile( sFile , g_sGfxFile )=0 then exit do
 bLoadResult = TRUE : g_sFileName = sFile
 g_LoadFile = 1 : exit do
 loop
 Mutexunlock( g_Mutex )
 return bLoadResult
 end function

 sub MainThread( hReadyEvent as any ptr )

 g_Mutex = MutexCreate()
 dim as long ScrWid,ScrHei : screeninfo ScrWid,ScrHei
 g_GfxHwnd = InitOpenGL(ScrWid,ScrHei)
 SetWindowPos( g_GfxHwnd , NULL , 0,0 , 400,300 , SWP_NOMOVE or SWP_NOZORDER or SWP_NOACTIVATE )
 ShowWIndow( g_GfxHwnd , SW_HIDE )
 if hReadyEvent then SetEvent( hReadyEvent )
 SetEvent( g_hResizeEvent )

 dim as long iModel=-1,iBorders=-1
 dim as DATFile ptr pModel
 dim as single xMid,yMid,zMid , g_zFar
 dim as PartSize tSz
 dim as long g_PartCount , g_CurPart = -1

 dim as boolean bBoundingBox
 dim as boolean bLeftPressed,bRightPressed,bWheelPressed
 dim as byte bShiftPressed
 dim as long iFps
 dim as single fRotationX = 120 , fRotationY = 20
 dim as single fPositionX , fPositionY , fPositionZ , fZoom = -3
 dim as long iWheel , iPrevWheel
 dim as long g_DrawCount , g_CurDraw = -1

 redim as PartCollisionBox atCollision()

 do until g_DoQuit

 Dim e as fb.EVENT = any
 while (ScreenEvent(@e))
 Select Case e.type
 Case fb.EVENT_MOUSE_MOVE
 if bLeftPressed then fRotationX += e.dx : fRotationY += e.dy
 if bRightPressed then fPositionX += e.dx*g_zFar/100 : fPositionY += e.dy*g_zFar/100
 case fb.EVENT_MOUSE_WHEEL
 iWheel = e.z-iPrevWheel
 fZoom = -3+(iWheel/12)
 case fb.EVENT_MOUSE_BUTTON_PRESS
 if e.button = fb.BUTTON_MIDDLE then
 iPrevWheel = iWheel
 fZoom = -3
 end if
 if e.button = fb.BUTTON_LEFT then bLeftPressed = true
 if e.button = fb.BUTTON_RIGHT then bRightPressed = true
 case fb.EVENT_MOUSE_BUTTON_RELEASE
 if e.button = fb.BUTTON_LEFT then bLeftPressed = false
 if e.button = fb.BUTTON_RIGHT then bRightPressed = false
 case fb.EVENT_KEY_PRESS
 select case e.ascii
 case 8
 if bShiftPressed then
 g_CurPart = -1
 printf(!"g_CurPart = %i    \r",g_CurPart)
 dim as PartSize tSzTemp
 SizeModel( pModel , tSzTemp , g_CurPart )
 tSz = tSzTemp
 else
 g_CurDraw = -1
 printf(!"g_CurDraw = %i    \r",g_CurDraw)
 end if
 case asc("="),asc("+")
 if bShiftPressed then
 g_CurPart = ((g_CurPart+2) mod (g_PartCount+1))-1
 printf(!"g_CurPart = %i    \r",g_CurPart)
 dim as PartSize tSzTemp
 SizeModel( pModel , tSzTemp , g_CurPart )
 tSz = tSzTemp
 else
 g_CurDraw = ((g_CurDraw+2) mod (g_DrawCount+1))-1
 printf(!"g_CurDraw = %i    \r",g_CurDraw)
 end if
 case asc("-"),asc("_")
 if bShiftPressed then
 g_CurPart = ((g_CurPart+g_PartCount+1) mod (g_PartCount+1))-1
 printf(!"g_CurPart = %i    \r",g_CurPart)
 dim as PartSize tSzTemp
 SizeModel( pModel , tSzTemp , g_CurPart )
 tSz = tSzTemp
 else
 g_CurDraw = ((g_CurDraw+g_DrawCount+1) mod (g_DrawCount+1))-1
 printf(!"g_CurDraw = %i    \r",g_CurDraw)
 end if
 end select
 select case e.scancode
 case fb.SC_LSHIFT : bShiftPressed or= 1
 case fb.SC_RSHIFT : bShiftPressed or= 2
 case fb.SC_TAB : bBoundingBox = not bBoundingBox
 end select
 case fb.EVENT_KEY_RELEASE
 select case e.scancode
 case fb.SC_LSHIFT : bShiftPressed and= (not 1)
 case fb.SC_RSHIFT : bShiftPressed and= (not 2)
 end select
 case fb.EVENT_WINDOW_CLOSE
 menu.Trigger( 30001 )
 end select
 wend

 while IsWindowVisible( g_GfxHwnd ) = 0
 flip : sleep 10,1
 wend
 flip

 static as double dLimitFps
 if abs(timer-dLimitFps) > 1 then dLimitFps = timer
 while (timer-dLimitFps) < 1/30
 sleep 1,1
 wend
 dLimitFps += 1/30

 static as double dFps : iFps += 1
 if abs(timer-dFps)>1 then
 dFps = timer
 WindowTitle("Fps: " & iFps): iFps = 0
 else
 sleep 1
 end if

 if g_LoadFile then
 MutexLock( g_Mutex )
 do
 g_LoadFile = 0
 if pModel then
 FreeModel( pModel )
 if iModel >=0 then glDeleteLists( iModel , 1 ) : iModel = -1
 if iBorders >=0 then glDeleteLists( iBorders , 2 ) : iBorders = -1
 end if
 g_TotalLines = 0 : g_TotalOptis = 0 : g_TotalTrigs = 0 : g_TotalQuads = 0
 static as string sPrevFilename
 pModel = LoadModel( strptr(g_sGfxFile) , g_sFileName )
 g_sGfxFile = "" : if pModel = NULL then exit do
 iModel = glGenLists( 1 )
 glNewList( iModel , GL_COMPILE )
 RenderModel( pModel , false )
 glEndList()
 iBorders = glGenLists( 2 )
 glNewList( iBorders , GL_COMPILE )
 RenderModel( pModel , true )
 glEndList()
 glNewList( iBorders+1 , GL_COMPILE )
 RenderModel( pModel , true , , -2 )
 glEndList()

 var bResetAttributes = sPrevFilename <> g_sFileName
 if bResetAttributes then
 fZoom = -3 : fRotationX = 120 : fRotationY = 20
 iWheel = 0 : iPrevWheel = 0
 sPrevFilename = g_sFileName
 end if

 g_PartCount = 0 : g_DrawCount = pModel->iPartCount
 g_CurPart = -1 : g_CurDraw = -1
 SizeModel( pModel , tSz , , g_PartCount )
 with tSz
 xMid = (.xMin+.xMax)/2
 yMid = (.yMin+.yMax)/2
 zMid = (.zMin+.zMax)/2
 if abs(xMid-.xMin) > g_zFar then g_zFar = abs(xMid-.xMin)
 if abs(yMid-.yMin) > g_zFar then g_zFar = abs(yMid-.yMin)
 if abs(zMid-.zMin) > g_zFar then g_zFar = abs(zMid-.zMin)
 if abs(xMid-.xMax) > g_zFar then g_zFar = abs(xMid-.xMax)
 if abs(yMid-.yMax) > g_zFar then g_zFar = abs(yMid-.yMax)
 if abs(zMid-.zMax) > g_zFar then g_zFar = abs(zMid-.zMax)
 printf(!"X %f > %f (%g ldu)\n",.xMin,.xMax,(.xMax-.xMin))
 printf(!"Y %f > %f (%g ldu)\n",.yMin,.yMax,(.yMax-.yMin))
 printf(!"Z %f > %f (%g ldu)\n",.zMin,.zMax,(.zMax-.zMin))
 printf(!"Lines: %i - Optis: %i - Trigs: %i - Quads: %i - Verts: %i\n", g_TotalLines , g_TotalOptis , g_TotalTrigs , g_TotalQuads , g_TotalLines*2+g_TotalOptis*2+g_TotalTrigs*3+g_TotalQuads*4 )
 if bResetAttributes then
 fPositionX = 0
 fPositionY = (.yMin + .yMax)\-2
 fPositionZ = (.zMax-.zMin)
 fPositionZ = sqr(fPositionZ)*-40
 end if
 end with

 CheckCollisionModel( pModel , atCollision() )
 printf(!"Parts: %i , Collisions: %i \n",g_PartCount,ubound(atCollision)\2)

 exit do

 loop
 MutexUnlock( g_Mutex )
 end if

 if WaitForSingleObject( g_hResizeEvent , 0 )=0 then
 dim as RECT tRc : GetClientRect(g_GfxHwnd,@tRc)
 var g_iCliWid = tRc.right , g_iCliHei = tRc.bottom
 glViewport 0, 0, gfx.g_iCliWid, gfx.g_iCliHei
 glMatrixMode GL_PROJECTION
 glLoadIdentity
 gluPerspective 45.0, gfx.g_iCliWid/gfx.g_iCliHei, 1, 100.0*cScale
 glMatrixMode GL_MODELVIEW
 end if

 glClear GL_COLOR_BUFFER_BIT OR GL_DEPTH_BUFFER_BIT
 glLoadIdentity()

 if pModel=0 then continue do

 glScalef(1/-20, 1.0/-20, 1/20 )

 dim as GLfloat lightPos(...) = {0,0,0, 1.0}
 glLightfv(GL_LIGHT0, GL_POSITION, @lightPos(0))
 glTranslatef( -fPositionX , fPositionY , fPositionZ*(fZoom+4) )
 glRotatef fRotationY , -1.0 , .0 , 0
 glRotatef fRotationX , 0 , -1.0 , 0
 glDisable( GL_LIGHTING )

 if g_CurDraw < 0 then
 glCallList( iModel )
 else
 RenderModel( pModel , false , , g_CurDraw )
 end if
 glCallList( iBorders-(g_CurDraw>=0) )

 glEnable( GL_LIGHTING )



 glDepthMask (GL_FALSE)
 if bBoundingBox then
 glColor4f(0,1,0,.25)
 with tSz
 DrawLimitsCube( .xMin-1,.xMax+1 , .yMin-1,.yMax+1 , .zMin-1,.zMax+1 )
 end with
 end if

 var iCollisions = ubound(atCollision)
 if iCollisions andalso instr(g_sFileName,".dat")=0 then
 glEnable( GL_POLYGON_STIPPLE )
 static as ulong aStipple(32-1)
 dim as long iMove = (timer*8) and 7
 for iY as long = 0 to 31
 var iN = iif(iY and 1,&h1414141414141414,&h4141414141414141)
 aStipple(iY) = iN shr ((iY+iMove) and 7)
 next iY
 glPolygonStipple( cptr(glbyte ptr,@aStipple(0)) )
 if (iMove and 2) then glColor4f(1,0,0,1) else glColor4f(0,0,0,1)
 for I as long = 0 to iCollisions-1
 with atCollision(I)
 DrawLimitsCube( .xMin-1,.xMax+1 , .yMin-1,.yMax+1 , .zMin-1,.zMax+1 )
 end with
 next I
 glDisable( GL_POLYGON_STIPPLE )
 end if
 glDepthMask (GL_TRUE)


 loop

 mutexdestroy( g_Mutex )

 end sub
end namespace

sub NotifySelChange( iID as long )
 var hCTL = g_tMainCtx.hCtl(iID).hwnd, hParent = GetParent(hCTL)
 dim as SELCHANGE tSelChange
 SendMessage( hCTL , EM_EXGETSEL , 0 , cast(LPARAM,@tSelChange.chrg) )
 tSelChange.seltyp = SendMessage( hCTL , EM_SELECTIONTYPE , 0 , 0 )
 with tSelChange.nmhdr
 .hwndFrom = hCTL : .idFrom = iID : .code = EN_SELCHANGE
 end with
 SendMessage( hParent , WM_NOTIFY , iID , cast(LPARAM,@tSelChange) )
end sub
function LoadFileIntoEditor( sFile as string ) as boolean
 var f = freefile()
 if open(sFile for input as #f) then
 MessageBox( g_tMainCtx.hCtl(wcMain).hwnd , !"Failed to open:\n\n'"+sFile+"'" , NULL , MB_ICONERROR )
 return false
 end if
 dim as string sLine,sScript
 while not eof(f)
 line input #f, sLine : sScript += sLine+!"\r\n"
 wend
 close #f
 SetWindowText( g_tMainCtx.hCtl(wcEdit).hwnd , sScript )
 sLine="":sScript=""
 g_CurrentFilePath = sFile
 SetWindowText( g_tMainCtx.hCtl(wcMain).hwnd , sAppName + " - " + sFile )
 NotifySelChange( wcEdit )
 SetFocus( g_tMainCtx.hCtl(wcButton).hwnd )
 return true
end function

declare sub File_SaveAs()
sub File_New()
 if GetWindowTextLength( g_tMainCtx.hCtl(wcEdit).hwnd ) then
 if MessageBox( g_tMainCtx.hCtl(wcMain).hwnd , !"All unsaved data will be lost, continue?" , "File->New" , MB_ICONQUESTION or MB_YESNO ) <> IDYES then exit sub
 end if
 SetWindowText( g_tMainCtx.hCtl(wcEdit).hwnd , "" )
 SetWindowText( g_tMainCtx.hCtl(wcMain).hwnd , sAppName + " - Unnamed")
 NotifySelChange( wcEdit )
 SetFocus( g_tMainCtx.hCtl(wcEdit).hwnd )
end sub
sub File_Open()

 if GetWindowTextLength( g_tMainCtx.hCtl(wcEdit).hwnd ) then
 if MessageBox( g_tMainCtx.hCtl(wcMain).hwnd , !"All unsaved data will be lost, continue?" , "File->Open" , MB_ICONQUESTION or MB_YESNO ) <> IDYES then exit sub
 end if

 dim as OPENFILENAME tOpen
 dim as zstring*32768 zFile = any : zFile[0]=0
 with tOpen
 .lStructSize = sizeof(tOpen)
 .hwndOwner = g_tMainCtx.hCtl(wcMain).hwnd
 .lpstrFilter = @!"LegoScript Files\0*.ls\0All Files\0*.*\0\0"
 .nFilterIndex = 0
 .lpstrFile = @zFile
 .nMaxFile = 32767
 .lpstrInitialDir = NULL
 .lpstrTitle = NULL
 .lpstrDefExt = @"ls"
 .Flags = OFN_FILEMUSTEXIST or OFN_PATHMUSTEXIST or OFN_NOCHANGEDIR
 if GetOpenFileName( @tOpen ) = 0 then exit sub
 print "["+*.lpstrFile+"]"
 LoadFileIntoEditor( *.lpstrFile )
 end with
end sub
sub File_Save()
 if GetFileAttributes(g_CurrentFilePath)=&hFFFFFFFF then
 File_SaveAs() : exit sub
 end if
 var iMaxLen = GetWindowTextLength( g_tMainCtx.hCtl(wcEdit).hwnd )
 var sScript = space(iMaxLen)
 if GetWindowText( g_tMainCtx.hCtl(wcEdit).hwnd , strptr(sScript) , iMaxLen+1 )<>iMaxLen then
 puts("Failed to retrieve text content...")
 exit sub
 end if
 var f = freefile()
 if open(g_CurrentFilePath for output as #f) then
 MessageBox( g_tMainCtx.hCtl(wcMain).hwnd , !"Failed to save:\n\n'"+g_CurrentFilePath+"'" , NULL , MB_ICONERROR )
 exit sub
 end if
 print #f, sScript;
 close #f
end sub
sub File_SaveAs()
 dim as OPENFILENAME tOpen
 dim as zstring*32768 zFile = any : zFile[0]=0
 with tOpen
 .lStructSize = sizeof(tOpen)
 .hwndOwner = g_tMainCtx.hCtl(wcMain).hwnd
 .lpstrFilter = @!"LegoScript Files\0*.ls\0All Files\0*.*\0\0"
 .nFilterIndex = 0
 .lpstrFile = @zFile
 .nMaxFile = 32767
 .lpstrInitialDir = NULL
 .lpstrTitle = NULL
 .Flags = OFN_PATHMUSTEXIST
 .lpstrDefExt = @"ls"
 if GetSaveFileName( @tOpen ) = 0 then exit sub
 print "["+*.lpstrFile+"]"
 var f = freefile()
 if open(*.lpstrFile for output as #f) then
 MessageBox( g_tMainCtx.hCtl(wcMain).hwnd , !"Failed to save:\n\n'"+*.lpstrFile+"'" , NULL , MB_ICONERROR )
 exit sub
 end if
 close #f
 g_CurrentFilePath = *.lpstrFile
 File_Save()
 end with
end sub
sub File_Exit()
 SendMessage( g_tMainCtx.hCtl(wcMain).hwnd , WM_CLOSE , 0,0 )
end sub
sub Edit_Undo()
 puts( $"EDIT_UNDO")
end sub
sub Edit_Copy()
 puts( $"EDIT_COPY")
end sub
sub Completion_Enable()
 puts( $"COMPLETION_ENABLE")
 var iToggledState = g_CurItemState xor MFS_CHECKED
 Menu.MenuState( g_hCurMenu,g_CurItemID,iToggledState )
 EnableMenuItem( g_hCurMenu , 32000 , iif( iToggledState and MFS_CHECKED , MF_ENABLED , MF_GRAYED ) )
end sub
sub Completion_ClearFilters()
 puts( $"COMPLETION_CLEARFILTERS")
 g_FilterFlags = 0
 for N as long = meFilter_Variations to meFilter_Stickers
 Menu.MenuState( g_hCurMenu , N , g_CurItemState )
 next N
end sub
sub Completion_InvertFilters()
 puts( $"COMPLETION_INVERTFILTERS")
 for N as long = meFilter_Variations to meFilter_Stickers
 Menu.Trigger( N )
 next N
end sub
sub Completion_Toggle()
 var iToggledState = g_CurItemState xor MFS_CHECKED
 Menu.MenuState( g_hCurMenu,g_CurItemID,iToggledState )
 select case g_CurItemID
 case meFilter_Variations : g_FilterFlags = iif( iToggledState and MFS_CHECKED , g_FilterFlags or wIsHidden , g_FilterFlags and (not (wIsHidden)) )
 case meFilter_Donor : g_FilterFlags = iif( iToggledState and MFS_CHECKED , g_FilterFlags or wIsDonor , g_FilterFlags and (not (wIsDonor)) )
 case meFilter_Path : g_FilterFlags = iif( iToggledState and MFS_CHECKED , g_FilterFlags or wIsPath , g_FilterFlags and (not (wIsPath)) )
 case meFilter_Printed : g_FilterFlags = iif( iToggledState and MFS_CHECKED , g_FilterFlags or wIsPrinted , g_FilterFlags and (not (wIsPrinted)) )
 case meFilter_Shortcut : g_FilterFlags = iif( iToggledState and MFS_CHECKED , g_FilterFlags or wIsShortcut , g_FilterFlags and (not (wIsShortcut)) )
 case meFilter_Stickered : g_FilterFlags = iif( iToggledState and MFS_CHECKED , g_FilterFlags or wIsStickered , g_FilterFlags and (not (wIsStickered)) )
 case meFilter_MultiColor : g_FilterFlags = iif( iToggledState and MFS_CHECKED , g_FilterFlags or wIsMultiColor , g_FilterFlags and (not (wIsMultiColor)) )
 case meFilter_PreColored : g_FilterFlags = iif( iToggledState and MFS_CHECKED , g_FilterFlags or wIsPreColored , g_FilterFlags and (not (wIsPreColored)) )
 case meFilter_Template : g_FilterFlags = iif( iToggledState and MFS_CHECKED , g_FilterFlags or wIsTemplate , g_FilterFlags and (not (wIsTemplate)) )
 case meFilter_Alias : g_FilterFlags = iif( iToggledState and MFS_CHECKED , g_FilterFlags or wIsAlias , g_FilterFlags and (not (wIsAlias)) )
 case meFilter_Moulded : g_FilterFlags = iif( iToggledState and MFS_CHECKED , g_FilterFlags or wIsMoulded , g_FilterFlags and (not (wIsMoulded)) )
 case meFilter_Helper : g_FilterFlags = iif( iToggledState and MFS_CHECKED , g_FilterFlags or wIsHelper , g_FilterFlags and (not (wIsHelper)) )
 case meFilter_Stickers : g_FilterFlags = iif( iToggledState and MFS_CHECKED , g_FilterFlags or wIsSticker , g_FilterFlags and (not (wIsSticker)) )
 end select
end sub
sub View_ToggleGW()
 var iToggledState = g_CurItemState xor MFS_CHECKED
 g_Show3D = (iToggledState and MFS_CHECKED)<>0
 if g_GfxHwnd then ShowWindow( g_GfxHwnd , iif( g_Show3D , SW_SHOWNA , SW_HIDE ) )
 Menu.MenuState( g_hCurMenu,g_CurItemID, iToggledState )
 for N as long = 40002 to 40008
 EnableMenuItem( g_hCurMenu , N , iif( iToggledState and MFS_CHECKED , MF_ENABLED , MF_GRAYED ) )
 next N
end sub
sub View_Key()
 if IsWindow(g_GfxHwnd)=0 then exit sub
 dim vk as long , sft as byte
 select case g_CurItemID
 case 40002 : vk = VK_BACK
 case 40003 : vk = VK_ADD
 case 40004 : vk = VK_SUBTRACT
 case 40006 : vk = VK_BACK : sft = 1
 case 40007 : vk = VK_ADD : sft = 1
 case 40008 : vk = VK_SUBTRACT : sft = 1
 case else : puts("bad View_key"): exit sub
 end select
 if sft then SendMessage( g_GfxHwnd , WM_KEYDOWN , VK_SHIFT , 0 )
 SendMessage( g_GfxHwnd , WM_KEYDOWN , vk , 0 )
 SendMessage( g_GfxHwnd , WM_KEYUP , vk , 0 )
 if sft then SendMessage( g_GfxHwnd , WM_KEYUP , VK_SHIFT , 0 )
end sub
sub View_Toggle()
 if IsWindow(g_GfxHwnd)=0 then exit sub
 var iToggledState = g_CurItemState xor MFS_CHECKED
 Menu.MenuState( g_hCurMenu,g_CurItemID,iToggledState )
 SendMessage( g_GfxHwnd , WM_KEYDOWN , VK_TAB , 0 )
 SendMessage( g_GfxHwnd , WM_KEYUP , VK_TAB , 0 )
end sub
sub Help_About()
 puts( $"HELP_ABOUT")
end sub
function CreateMainMenu() as HMENU


 var hMenu = CreateMenu() : g_WndMenu = hMenu

 scope
 var hMenu = Menu.AddSubMenu( hMenu , "&File" )
 const _sText2 = "New"
 Menu.MenuAddEntry( hMenu , meFile_New , _sText2 , @File_New )
#undef _sText2
 const _sText2 = "Open"
 Menu.MenuAddEntry( hMenu , meFile_open , _sText2 , @File_Open )
#undef _sText2
 const _sText2 = "Save"
 Menu.MenuAddEntry( hMenu , meFile_Save , _sText2 , @File_Save )
#undef _sText2
 const _sText2 = "Save As"
 Menu.MenuAddEntry( hMenu , meFile_SaveAs , _sText2 , @File_SaveAs )
#undef _sText2
 Menu.MenuAddEntry( hMenu )
 const _sText2 = "Quit" !"\tAlt+F4"
 Menu.MenuAddEntry( hMenu , meFile_Exit , _sText2 , @File_Exit )
#undef _sText2
 end scope
 scope
 var hMenu = Menu.AddSubMenu( hMenu , "&Edit" )
 const _sText2 = "&Undo" !"\tCtrl+Z"
 Menu.MenuAddEntry( hMenu , meEdit_Undo , _sText2 , @Edit_Undo )
#undef _sText2
 const _sText2 = "&Copy" !"\tCtrl+C"
 Menu.MenuAddEntry( hMenu , meEdit_Copy , _sText2 , @Edit_Copy )
#undef _sText2
 end scope
 scope
 var hMenu = Menu.AddSubMenu( hMenu , "&Completion" )
 const _sText2 = "&Enable"
 Menu.MenuAddEntry( hMenu , meCompletion_Enable , _sText2 , @Completion_Enable )
#undef _sText2
 scope
 var hMenu = Menu.AddSubMenu( hMenu , "&Filters" , sbeCompletion_Filters )
 const _sText2 = "C&lear" !"\t" "Ctrl+" "Shift+" +chr(VK_C)
 Menu.MenuAddEntry( hMenu , meCompletion_ClearFilters , _sText2 , @Completion_ClearFilters )
#undef _sText2
 const _sText2 = "&Invert" !"\t" "Ctrl+" +chr(VK_I)
 Menu.MenuAddEntry( hMenu , meCompletion_InvertFilters , _sText2 , @Completion_InvertFilters )
#undef _sText2
 Menu.MenuAddEntry( hMenu )
 const _sText2 = "&Variations" !"\t" "Alt+" "Shift+" +chr(VK_F)
 Menu.MenuAddEntry( hMenu , meFilter_Variations , _sText2 , @Completion_Toggle )
#undef _sText2
 const _sText2 = "&Donor" !"\t" "Alt+" +chr(VK_D)
 Menu.MenuAddEntry( hMenu , meFilter_Donor , _sText2 , @Completion_Toggle )
#undef _sText2
 const _sText2 = "&Path" !"\t" "Alt+" +chr(VK_P)
 Menu.MenuAddEntry( hMenu , meFilter_Path , _sText2 , @Completion_Toggle )
#undef _sText2
 const _sText2 = "P&rinted" !"\t" "Alt+" "Shift+" +chr(VK_P)
 Menu.MenuAddEntry( hMenu , meFilter_Printed , _sText2 , @Completion_Toggle )
#undef _sText2
 const _sText2 = "Shortcut" !"\t" "Alt+" +chr(VK_S)
 Menu.MenuAddEntry( hMenu , meFilter_Shortcut , _sText2 , @Completion_Toggle )
#undef _sText2
 const _sText2 = "Stic&kered" !"\t" "Alt+" +chr(VK_K)
 Menu.MenuAddEntry( hMenu , meFilter_Stickered , _sText2 , @Completion_Toggle )
#undef _sText2
 const _sText2 = "Multi&color" !"\t" "Alt+" +chr(VK_M)
 Menu.MenuAddEntry( hMenu , meFilter_MultiColor , _sText2 , @Completion_Toggle )
#undef _sText2
 const _sText2 = "Pre-c&olored" !"\t" "Alt+" "Shift+" +chr(VK_C)
 Menu.MenuAddEntry( hMenu , meFilter_PreColored , _sText2 , @Completion_Toggle )
#undef _sText2
 const _sText2 = "&Template" !"\t" "Alt+" +chr(VK_T)
 Menu.MenuAddEntry( hMenu , meFilter_Template , _sText2 , @Completion_Toggle )
#undef _sText2
 const _sText2 = "&Alias" !"\t" "Alt+" +chr(VK_A)
 Menu.MenuAddEntry( hMenu , meFilter_Alias , _sText2 , @Completion_Toggle )
#undef _sText2
 const _sText2 = "&Moulded" !"\t" "Alt+" "Shift+" +chr(VK_M)
 Menu.MenuAddEntry( hMenu , meFilter_Moulded , _sText2 , @Completion_Toggle )
#undef _sText2
 const _sText2 = "&Helper" !"\t" "Alt+" "Shift+" +chr(VK_H)
 Menu.MenuAddEntry( hMenu , meFilter_Helper , _sText2 , @Completion_Toggle )
#undef _sText2
 const _sText2 = "&Stickers" !"\t" "Alt+" +chr(VK_S)
 Menu.MenuAddEntry( hMenu , meFilter_Stickers , _sText2 , @Completion_Toggle )
#undef _sText2
 end scope
 end scope
 scope
 var hMenu = Menu.AddSubMenu( hMenu , "&View" )
 const _sText2 = "&Graphics Window" !"\t" "Ctrl+" +chr(VK_G)
 Menu.MenuAddEntry( hMenu , meView_ToggleGW , _sText2 , @View_ToggleGW )
#undef _sText2
 Menu.MenuAddEntry( hMenu )
 const _sText2 = "Reset View parts" !"\tBACKSPACE"
 Menu.MenuAddEntry( hMenu , meView_ResetView , _sText2 , @View_Key , MFS_GRAYED )
#undef _sText2
 const _sText2 = "View &Next part" !"\t+"
 Menu.MenuAddEntry( hMenu , meView_NextPart , _sText2 , @View_Key , MFS_GRAYED )
#undef _sText2
 const _sText2 = "View &Previous part" !"\t-"
 Menu.MenuAddEntry( hMenu , meView_PrevPart , _sText2 , @View_Key , MFS_GRAYED )
#undef _sText2
 Menu.MenuAddEntry( hMenu )
 const _sText2 = "&Show bounding box" !"\tTAB"
 Menu.MenuAddEntry( hMenu , meView_ShowBox , _sText2 , @View_Toggle , MFS_GRAYED )
#undef _sText2
 const _sText2 = "Reset bounding box" !"\tShift BACKSPACE"
 Menu.MenuAddEntry( hMenu , meView_ResetBox , _sText2 , @View_Key , MFS_GRAYED )
#undef _sText2
 const _sText2 = "Ne&xt part" !"\tShift +"
 Menu.MenuAddEntry( hMenu , meView_NextBoxPart , _sText2 , @View_Key , MFS_GRAYED )
#undef _sText2
 const _sText2 = "&Pre&vious part" !"\tShift -"
 Menu.MenuAddEntry( hMenu , meView_PrevBoxPart , _sText2 , @View_Key , MFS_GRAYED )
#undef _sText2
 end scope
 scope
 var hMenu = Menu.AddSubMenu( hMenu , "&Help" )
 const _sText2 = "About"
 Menu.MenuAddEntry( hMenu , meHelp_About , _sText2 , @Help_About )
#undef _sText2
 end scope

 return hMenu
end function

sub Button_Compile()
 SetWindowText( g_tMainCtx.hCtl(wcStatus).hwnd , "Building..." )
 var iMaxLen = GetWindowTextLength( g_tMainCtx.hCtl(wcEdit).hwnd )
 var sScript = space(iMaxLen)
 if GetWindowText( g_tMainCtx.hCtl(wcEdit).hwnd , strptr(sScript) , iMaxLen+1 )<>iMaxLen then
 puts("Failed to retrieve text content...")
 SetWindowText( g_tMainCtx.hCtl(wcStatus).hwnd , "Build failed." )
 exit sub
 end if
 dim as string sOutput, sError
 sOutput = LegoScriptToLDraw( sScript , sError )
 SetWindowText( g_tMainCtx.hCtl(wcOutput).hwnd , iif(len(sError)=0,sOutput,sError) )

 if len(sOutput) then
 if lcase(right(g_CurrentFilePath,3)) = ".ls" then
 Viewer.LoadMemory( sOutput , left(g_CurrentFilePath,len(g_CurrentFilePath)-3)+".ldr" )
 else
 Viewer.LoadMemory( sOutput , g_CurrentFilePath+".ldr" )
 end if
 end if
 SetWindowText( g_tMainCtx.hCtl(wcStatus).hwnd , iif(len(sOutput),"Ready.","Script error.") )

end sub

static shared as long g_iPrevTopRow = 0 , g_iPrevRowCount = 0 , g_RowDigits = 2
static shared as zstring*128 g_zRows
static shared as SearchQueryContext g_SQCtx
sub Lines_Draw( hEdit as HWND , tDraw as DRAWITEMSTRUCT )
 with tDraw
 dim PT as POINT = any
 var iCharIdx = Sendmessage( hEdit , EM_LINEINDEX , g_iPrevTopRow , 0 )
 var iResu = SendMessage( hEdit , EM_POSFROMCHAR , cast(WPARAM,@PT) , iCharIdx )
 SetTextColor( .hdc , GetSysColor(COLOR_GRAYTEXT) )
 FillRect( .hdc , @.rcItem , cast(HBRUSH,GetSysColorBrush(COLOR_BTNFACE)) )
 .rcItem.top += PT.Y+2 : .rcItem.right -= 4 : .rcItem.bottom -= (4+GetSystemMetrics(SM_CYHSCROLL))
 DrawText( .hDC , g_zRows , -1 , @.rcItem , DT_RIGHT or DT_NOPREFIX )
 end with
end sub
sub RichEdit_TopRowChange( hCtl as HWND )
 var iTopRow = SendMessage( hCTL , EM_GETFIRSTVISIBLELINE , 0,0 )
 var iRows = SendMessage( hCTL , EM_GETLINECOUNT , 0,0 )
 if g_iPrevRowCount <> iRows then
 var iRowDigits = 2
 if iRows > 99 then iRowDigits += 1
 if iRows > 999 then iRowDigits += 1
 if iRows > 9999 then iRowDigits += 1
 if iRows > 99999 then iRowDigits += 1
 if iRowDigits <> g_RowDigits then
 g_RowDigits = iRowDigits
 PostMessage( g_tMainCtx.hCtl(wcMain).hwnd , WM_USER+3 , 0 , 0 )
 end if
 end if
 if g_iPrevTopRow <> iTopRow orelse g_iPrevRowCount <> iRows then
 g_iPrevTopRow = iTopRow : g_iPrevRowCount = iRows
 var pzRows = @g_zRows
 for N as long = 1 to iif(iRows<15,iRows,15)
 pzRows += sprintf(pzRows,!"%i\r\n",iTopRow+N)
 next N
 InvalidateRect( g_tMainCtx.hCtl(wcLines).hwnd , NULL , FALSE )
 end if
end sub
sub RichEdit_SelChange( hCtl as HWND , iRow as long , iCol as long )
 type tBuffer
 union
 wSize as ushort
 zRow_ as zstring*1024
 end union
 end type
 dim t as tBuffer = any : t.wSize = 1023
 var iSz = SendMessage( hCtl , EM_GETLINE , iRow , cast(LRESULT,@t) )
 if iSz < 0 orelse iSz > 1023 then exit sub
 var iWid = 80 : t.zRow_ [iSz-2]=0
 with g_SQCtx
 if ubound(.sTokenTxt) < 0 then redim .sTokenTxt(.iMaxTok-1)
 .bChanged = 1 : .iCur = iCol
 end with
 dim as string sRow = t.zRow_
 HandleTokens( sRow , g_SQCtx )
end sub
sub ProcessAccelerator( iID as long )
 select case iID
 case acToggleMenu
 SetMenu( g_tMainCtx.hCtl(wcMain).hwnd , iif( GetMenu( g_tMainCtx.hCtl(wcMain).hwnd) , NULL , g_WndMenu ) )
 case meFirst+1 to MeLast-1
 Menu.Trigger( iID )
 case acFilterDump : puts("Dump filter parts")
 end select
end sub
function CreateMainAccelerators() as HACCEL
 ( 12 or FVIRTKEY , VK_C, meCompletion_ClearFilters ), ( 8 or FVIRTKEY , VK_I, meCompletion_InvertFilters ), ( 20 or FVIRTKEY , VK_F, meFilter_Variations ), ( 16 or FVIRTKEY , VK_D, meFilter_Donor ), ( 16 or FVIRTKEY , VK_P, meFilter_Path ), ( 20 or FVIRTKEY , VK_P, meFilter_Printed ), ( 16 or FVIRTKEY , VK_S, meFilter_Shortcut ), ( 16 or FVIRTKEY , VK_K, meFilter_Stickered ), ( 16 or FVIRTKEY , VK_M, meFilter_MultiColor ), ( 20 or FVIRTKEY , VK_C, meFilter_PreColored ), ( 16 or FVIRTKEY , VK_T, meFilter_Template ), ( 16 or FVIRTKEY , VK_A, meFilter_Alias ), ( 20 or FVIRTKEY , VK_M, meFilter_Moulded ), ( 20 or FVIRTKEY , VK_H, meFilter_Helper ), ( 16 or FVIRTKEY , VK_S, meFilter_Stickers ), ( 8 or FVIRTKEY , VK_G, meView_ToggleGW ), static as ACCEL AccelList(...) = { ( 12 or FVIRTKEY , VK_C, meCompletion_ClearFilters ), ( 8 or FVIRTKEY , VK_I, meCompletion_InvertFilters ), ( 20 or FVIRTKEY , VK_F, meFilter_Variations ), ( 16 or FVIRTKEY , VK_D, meFilter_Donor ), ( 16 or FVIRTKEY , VK_P, meFilter_Path ), ( 20 or FVIRTKEY , VK_P, meFilter_Printed ), ( 16 or FVIRTKEY , VK_S, meFilter_Shortcut ), ( 16 or FVIRTKEY , VK_K, meFilter_Stickered ), ( 16 or FVIRTKEY , VK_M, meFilter_MultiColor ), ( 20 or FVIRTKEY , VK_C, meFilter_PreColored ), ( 16 or FVIRTKEY , VK_T, meFilter_Template ), ( 16 or FVIRTKEY , VK_A, meFilter_Alias ), ( 20 or FVIRTKEY , VK_M, meFilter_Moulded ), ( 20 or FVIRTKEY , VK_H, meFilter_Helper ), ( 16 or FVIRTKEY , VK_S, meFilter_Stickers ), ( 8 or FVIRTKEY , VK_G, meView_ToggleGW ), ( FSHIFT or FVIRTKEY , VK_SPACE , acToggleMenu ) }
 return CreateAcceleratorTable( @AccelList(0) , ubound(AccelList)+1 )
end function

sub DockGfxWindow()
 dim as RECT RcWnd=any,RcGfx=any,RcCli=any,RcDesk
 GetWindowRect( GetDesktopWindow() , @RcDesk )
 GetWindowRect( g_GfxHwnd , @RcGfx )
 GetWindowRect( g_tMainCtx.hCtl(wcMain).hwnd ,@RcWnd )
 var iYPos = RcWnd.top+((RcWnd.bottom-RcWnd.Top)-(RcGfx.bottom-RcGfx.top))\2
 GetClientRect( g_tMainCtx.hCtl(wcMain).hwnd ,@RcCli )
 dim as POINT tPtRight = type(RcCli.Right-3,0)
 ClientToScreen( g_tMainCtx.hCtl(wcMain).hwnd , @tPtRight )
 var hPlace = HWND_TOP
 if tPtRight.x >= (RcDesk.right-8) then
 hPlace = cast(handle, -1) : tPtRight.x -= (RcGfx.right - RcGfx.left)
 end if
 SetWindowPos( g_GfxHwnd , hPlace , tPtRight.x-4 ,iYPos , 0,0 , SWP_NOSIZE or SWP_NOACTIVATE )
 NotifySelChange( wcEdit )
end sub
sub ResizeMainWindow( bCenter as boolean = false )
 dim as RECT RcWnd=any,RcCli=any,RcDesk=any
 var hWnd = g_tMainCtx.hCtl(wcMain).hwnd
 GetClientRect(hWnd,@RcCli)
 if bCenter then
 GetWindowRect(hWnd,@RcWnd)
 with RcWnd
 .right -= .left : .bottom -= .top
 .right -= RcCli.right : .bottom -= RcCli.bottom
 .right += g_WndWid : .bottom += g_WndHei
 GetClientRect(GetDesktopWindow(),@RcDesk)

 dim as RECT RcGfx=any : GetWindowRect( g_GfxHwnd , @RcGfx )
 var iAllWid = .right , iGfxHei = RcGfx.bottom-RcGfx.top
 if iGfxHei > .bottom then .bottom = iGfxHei
 iAllWid = .right + RcGfx.right-RcGfx.left
 var iCenterX = (RcDesk.right-iAllWid)\2 , iCenterY = (RcDesk.bottom-.bottom)\2
 SetWindowPos(hwnd,null,iCenterX,iCenterY,.right,.bottom,SWP_NOZORDER)
 RcCli.right = g_WndWid : RcCli.bottom = g_WndHei
 end with
 end if

 ResizeLayout( hWnd , g_tMainCtx.tForm , RcCli.right , RcCli.bottom )
 MoveWindow( g_tMainCtx.hCtl(wcStatus).hwnd ,0,0 , 0,0 , TRUE )
 dim as long aWidths(2-1) = {RcCli.right*.85,-1}
 SendMessage( g_tMainCtx.hCtl(wcStatus).hwnd , SB_SETPARTS , 2 , cast(LPARAM,@aWidths(0)) )
 DockGfxWindow()


end sub

static shared as any ptr OrgEditProc
function WndProcEdit ( hWnd as HWND, message as UINT, wParam as WPARAM, lParam as LPARAM ) as LRESULT
 select case message
 case WM_CHAR
 select case wParam
 case 3,24
 var lResu = CallWindowProc( OrgEditProc , hWnd , message , wParam, lParam )
 GetClipboard() : return lResu
 end select
 case WM_VSCROLL
 var iResu = CallWindowProc( OrgEditProc , hWnd , message , wParam, lParam )
 g_iPrevRowCount = 0
 RichEdit_TopRowChange( hWnd )
 return iResu
 end select
 return CallWindowProc( OrgEditProc , hWnd , message , wParam, lParam )
end function

function WndProc ( hWnd as HWND, message as UINT, wParam as WPARAM, lParam as LPARAM ) as LRESULT

 var pCtx = (@g_tMainCtx)


if pCtx=0 andalso message <> WM_CREATE then Return DefWindowProc( hWnd, message, wParam, lParam )






const cStyle = WS_CHILD
const cStyleT = cStyle or WS_TABSTOP
const cUpDnStyle = cStyleT or UDS_AUTOBUDDY
const cButtonStyle = cStyleT
const cListStyle = cStyleT or LBS_NOTIFY or LBS_NOINTEGRALHEIGHT
const cCheckStyle = cStyleT or BS_AUTOCHECKBOX or BS_NOTIFY
const cBtnChkStyle = cCheckStyle or BS_PUSHLIKE
const cRadioStyle = cStyleT or BS_AUTORADIOBUTTON or BS_NOTIFY
const cBtnRadStyle = cRadioStyle or BS_PUSHLIKE
const cLabelStyle = cStyle or SS_RIGHT
const cTextStyle = cStyle
const cComboStyle = cStyleT or CBS_DROPDOWN or CBS_NOINTEGRALHEIGHT or WS_VSCROLL
const cDropStyle = cStyleT or CBS_DROPDOWNLIST or CBS_NOINTEGRALHEIGHT or CBS_AUTOHSCROLL
const cFieldStyle = cStyleT or ES_AUTOHSCROLL
const cFNumbStyle = cStyleT or ES_AUTOHSCROLL or ES_NUMBER
const cEditStyle = cStyleT or WS_VSCROLL or ES_MULTILINE or ES_WANTRETURN
const cFrameStyle = cStyleT or BS_GROUPBOX
const cInfoStyle = cFieldStyle or ES_READONLY
const cTreeStyle = cStyleT or TVS_HASLINES or TVS_SINGLEEXPAND or TVS_HASBUTTONS
const cTabsStyle = cStyleT
const cReportStyle = cStyleT or LVS_REPORT or LVS_SHOWSELALWAYS
const cCalStyle = cStyleT
const cDateSTyle = cStyleT or DTS_SHORTDATECENTURYFORMAT
const cRichStyle = cStyleT or ES_MULTILINE or ES_WANTRETURN
const cStatStyle = cStyle or SBARS_SIZEGRIP

const cBrd = WS_EX_CLIENTEDGE
const cTrn = WS_EX_TRANSPARENT




var IdPrevCtl=0





 select case( message )
 case WM_DRAWITEM
 var wID = clng(wParam) , ptDrw = cast(LPDRAWITEMSTRUCT,lparam)
 select case wId
 case wcLines : Lines_Draw( g_tMainCtx.hCtl(wcEdit).hwnd , *ptDrw )
 end select
 case WM_CREATE

 if g_tMainCtx.hCtl(wcMain).hwnd then return 0
 if pCtx=0 then
 dim as zstring*128 zCls = any : GetClassName(hwnd,@zCls,128)

 return -1
 end if
 g_tMainCtx.hCtl(wcMain).hwnd = hwnd
 with pCtx->tForm
 scope
 dim as RECT tRc = any : GetClientRect( hWnd , @tRc )
 .iCliWid = tRc.right : .iCliHei = tRc.bottom
 .iCtlCnt = wcLast : .pCtl = @(pCtx->hCTL(0))
 .iFntCnt = ubound(pCtx->hFnt) : .pFnt = @(pCtx->hFnt(0))
 end scope
 end with
 SetWindowLongPtr( hwnd , 0 , cast(LONG_PTR,pCtx) )

 var hEventGfxReady = CreateEvent( NULL , FALSE , FALSE , NULL )
 g_hResizeEvent = CreateEvent( NULL , FALSE , FALSE , NULL )
 ThreadDetach( ThreadCreate( @Viewer.MainThread , hEventGfxReady ) )

 _SetFont( pCtx->hFnt(wfDefault) , g_sMainFont , 12 )
 _SetFont( pCtx->hFnt(wfStatus) , g_sMainFont , 10 )
 _SetFont( pCtx->hFnt(wfEdit) , g_sFixedFont , 16 )

 scope
 var p = @(pCtx->hCTL(wcButton))

 scope
 const _IncludeStyles = WS_VISIBLE
 p->tX = type( 0 , true , false , cshort((1.25)*128) ) : p->tY = type( 0 , true , false , cshort((3)*128) ) : p->tW = type( 0 , true , false , cshort((15)*128) ) : p->tH = type( 0 , true , false , cshort(((5)*1.25)*128) )

 p->iX = 0 : p->iY = 0 : p->iW = 100 : p->iH = 100

 p->hWnd = CreateWindowExA(null,"button","Build",cButtonStyle or _IncludeStyles or 0, p->iX,p->iY,p->iW,p->iH,hwnd,iif((cButtonStyle) and WS_CHILD,cast(hmenu,wcButton),0),g_AppInstance, null)
 if p->hWnd=0 then
 var iErr = GetLastError()

 end if
 end scope
 IdPrevCtl = wcButton
 end scope
 scope
 var p = @(pCtx->hCTL(wcLines))

 scope
 const _IncludeStyles = WS_VISIBLE
 p->tX = type( 0 , true , false , cshort((1.25)*128) ) : p->tY = type( IdPrevCtl , true , true , cshort((.5)*128) ) : p->tW = type( 0 , true , false , cshort((1.66*2)*128) ) : p->tH = type( 0 , true , false , cshort((53)*128) )

 p->iX = 0 : p->iY = 0 : p->iW = 100 : p->iH = 100

 p->hWnd = CreateWindowExA(null,"static","",cTextStyle or _IncludeStyles or SS_OWNERDRAW, p->iX,p->iY,p->iW,p->iH,hwnd,iif((cTextStyle) and WS_CHILD,cast(hmenu,wcLines),0),g_AppInstance, null)
 if p->hWnd=0 then
 var iErr = GetLastError()

 end if
 end scope
 IdPrevCtl = wcLines
 end scope
 scope
 var p = @(pCtx->hCTL(wcEdit))

 scope
 const _IncludeStyles = WS_VISIBLE
 p->tX = type( IdPrevCtl , false , true , 0 ) : p->tY = type( IdPrevCtl , false , false , 0 ) : p->tW = type( -1 , true , true , cshort((-1.25)*128) ) : p->tH = type( 0 , true , false , cshort((53)*128) )

 p->iX = 0 : p->iY = 0 : p->iW = 100 : p->iH = 100

 p->hWnd = CreateWindowExA(cBrd,"richedit","",cRichStyle or _IncludeStyles or WS_HSCROLL or WS_VSCROLL or ES_AUTOHSCROLL or ES_DISABLENOSCROLL, p->iX,p->iY,p->iW,p->iH,hwnd,iif((cRichStyle) and WS_CHILD,cast(hmenu,wcEdit),0),g_AppInstance, null)
 if p->hWnd=0 then
 var iErr = GetLastError()

 end if
 end scope
 IdPrevCtl = wcEdit
 end scope
 scope
 var p = @(pCtx->hCTL(wcOutput))

 scope
 const _IncludeStyles = WS_VISIBLE
 p->tX = type( 0 , true , false , cshort((1.25)*128) ) : p->tY = type( IdPrevCtl , true , true , cshort((.5)*128) ) : p->tW = type( -1 , true , true , cshort((-1.25)*128) ) : p->tH = type( -1 , true , true , cshort((-5)*128) )

 p->iX = 0 : p->iY = 0 : p->iW = 100 : p->iH = 100

 p->hWnd = CreateWindowExA(cBrd,"richedit","",cRichStyle or _IncludeStyles or WS_HSCROLL or WS_VSCROLL or ES_AUTOHSCROLL or ES_READONLY, p->iX,p->iY,p->iW,p->iH,hwnd,iif((cRichStyle) and WS_CHILD,cast(hmenu,wcOutput),0),g_AppInstance, null)
 if p->hWnd=0 then
 var iErr = GetLastError()

 end if
 end scope
 IdPrevCtl = wcOutput
 end scope
 scope
 var p = @(pCtx->hCTL(wcStatus))

 scope
 const _IncludeStyles = WS_VISIBLE
 p->tX = type( 0 , false , false , 0 ) : p->tY = type( 0 , false , false , 0 ) : p->tW = type( 0 , false , false , 0 ) : p->tH = type( 0 , false , false , 0 )

 p->iX = 0 : p->iY = 0 : p->iW = 100 : p->iH = 100

 p->hWnd = CreateWindowExA(null,"msctls_statusbar32","Ready.",cStatStyle or _IncludeStyles or 0, p->iX,p->iY,p->iW,p->iH,hwnd,iif((cStatStyle) and WS_CHILD,cast(hmenu,wcStatus),0),g_AppInstance, null)
 if p->hWnd=0 then
 var iErr = GetLastError()

 end if
 end scope
 IdPrevCtl = wcStatus
 end scope

 _SetControlsFont( @(pCtx->hCtl(0)) , wfEdit , wcLines , wcEdit , wcOutput , -1 )
 _SetControlsFont( @(pCtx->hCtl(0)) , wfStatus , wcStatus , -1 )

 SetWindowTheme( g_tMainCtx.hCtl(wcEdit).hwnd , "" , "" )
 SendMessage( g_tMainCtx.hCtl(wcEdit).hwnd , EM_EXLIMITTEXT , 0 , 16*1024*1024 )
 SendMessage( g_tMainCtx.hCtl(wcEdit).hwnd , EM_SETEVENTMASK , 0 , ENM_SELCHANGE or ENM_KEYEVENTS or ENM_SCROLL )
 OrgEditProc = cast(any ptr,SetWindowLongPtr( g_tMainCtx.hCtl(wcEdit).hwnd , GWLP_WNDPROC , cast(LONG_PTR,@WndProcEdit) ))

 WaitForSingleObject( hEventGfxReady , INFINITE )
 CloseHandle( hEventGfxReady )
 if g_GfxHwnd = 0 then return -1

 InitSearchWindow()
 Menu.Trigger( meCompletion_Enable )

 ResizeMainWindow( true )
 File_New()
 SetForegroundWindow( g_tMainCtx.hCtl(wcMain).hwnd )
 SetFocus( g_tMainCtx.hCtl(wcEdit).hwnd )
 return 0

 case WM_MENUSELECT
 var iID = cuint( (cuint(wParam) and &h0000FFFF)) , fuFlags = cuint( (cuint(wParam) shr 16)) , hMenu = cast(HMENU,lParam)
 if hMenu then g_CurItemID = iID : g_hCurMenu = hMenu
 return 0
 case WM_NOTIFY
 var wID = cast(long,wParam) , pnmh = cptr(LPNMHDR,lParam)
 select case wID
 case wcEdit
 select case pnmh->code
 case EN_SELCHANGE
 with *cptr(SELCHANGE ptr,lParam)
 var iRow = SendMessage( g_tMainCtx.hCtl(wID).hwnd , EM_EXLINEFROMCHAR , 0 , .chrg.cpMax )
 var iCol = .chrg.cpMax - SendMessage( g_tMainCtx.hCtl(wID).hwnd , EM_LINEINDEX , iRow , 0 )
 dim as zstring*64 zPart = any : sprintf(zPart,"%i : %i",iRow+1,iCol+1)
 SendMessage( g_tMainCtx.hCtl(wcStatus).hwnd , SB_SETTEXT , spCursor , cast(LPARAM,@zPart) )
 RichEdit_TopRowChange( g_tMainCtx.hCtl(wID).hwnd )
 RichEdit_SelChange( g_tMainCtx.hCtl(wID).hwnd , iRow , iCol )
 end with
 end select
 end select
 return 0
 case WM_COMMAND
 var wNotifyCode = cint( (cuint(wParam) shr 16)), wID = (cuint(wParam) and &h0000FFFF) , hwndCtl = cast(.HWND,lParam)
 if hwndCtl=0 andalso wNotifyCode=0 then wNotifyCode = -1
 select case wNotifyCode
 case -1
 if wID <> g_CurItemID then return 0
 dim as MENUITEMINFO tItem = type( sizeof(MENUITEMINFO) , MIIM_DATA or MIIM_STATE )
 GetMenuItemInfo( g_hCurMenu , wID , false , @tItem )
 g_CurItemState = tItem.fState
 if tItem.dwItemData then
 dim MenuItemCallback as sub () = cast(any ptr,tItem.dwItemData)
 MenuItemCallback()
 end if
 g_CurItemID = 0 : g_hCurMenu = 0
 case 1
 ProcessAccelerator( wID )
 case else
 select case wID
 case wcEdit
 select case wNotifyCode
 case EN_SETFOCUS
 ShowWindow( g_hContainer , g_SearchVis )
 case EN_KILLFOCUS
 if GetForegroundWindow() <> g_hContainer then
 ShowWindow( g_hContainer , SW_HIDE )
 end if
 case EN_VSCROLL
 RichEdit_TopRowChange( hwndCtl )
 end select
 case wcButton
 select case wNotifyCode
 case BN_CLICKED
 Button_Compile()
 end select
 end select
 end select

 return 0

 case WM_SIZE
 ResizeMainWindow()
 return 0
 case WM_MOVE
 DockGfxWindow()
 case WM_USER+1
 SetEvent(g_hResizeEvent)
 DockGfxWindow()
 case WM_USER+2
 DockGfxWindow()
 case WM_USER+3
 with pCtx->hCTL(wcLines)
 scope
 .tX = type( 0 , true , false , cshort((1.25)*128) ) : .tY = type( wcButton , true , true , cshort((.5)*128) ) : .tW = type( 0 , true , false , cshort(((.18+1.52*g_RowDigits))*128) ) : .tH = type( 0 , true , false , cshort((53)*128) )
 if .iW = 0 then .iX = -10000 : .iY = -10000 : .iW = 1 : .iH = 1
 .hWnd = g_tMainCtx.hCtl(wcLines).hwnd : if IsWindow(.hWnd)=0 then .hWnd=0

 end scope
 IdPrevCtl = wcLines
 end with
 ResizeMainWindow()
 case WM_ACTIVATE
 if g_GfxHwnd andalso g_Show3D then
 var fActive = (cuint(wParam) and &h0000FFFF) , fMinimized = (cuint(wParam) shr 16) , hwndPrevious = cast(HWND,lParam)
 if fActive then
 ShowWindow( g_GfxHwnd , SW_SHOWNA )
 DockGfxWindow()
 else
 if fMinimized then
 ShowWindow( g_GfxHwnd , SW_HIDE )
 else
 SetWindowPos( g_GfxHwnd , cast(handle, -2) , 0,0 , 0,0 , SWP_NOMOVE or SWP_NOSIZE or SWP_NOACTIVATE )
 end if
 end if
 end if
 case WM_CLOSE
 if GetWindowTextLength( g_tMainCtx.hCtl(wcEdit).hwnd ) then
 if MessageBox( g_tMainCtx.hCtl(wcMain).hwnd , !"All unsaved data will be lost, quit anyway?" , "File->Quit" , MB_ICONQUESTION or MB_YESNO ) <> IDYES then return 0
 end if
 PostQuitMessage(0)
 case WM_DESTROY
 PostQuitMessage(0)
 return 0
 end select

 return DefWindowProc( hWnd, message, wParam, lParam )

end function

sub WinMain ()

 dim tMsg as MSG
 dim tcls as WNDCLASS
 dim as HWND hWnd


 with tcls
 .style = CS_HREDRAW or CS_VREDRAW
 .lpfnWndProc = @WndProc
 .cbClsExtra = 0
 .cbWndExtra = 0
 .hInstance = g_AppInstance
 .hIcon = LoadIcon( g_AppInstance, "FB_PROGRAM_ICON" )
 .hCursor = LoadCursor( NULL, cast(LPSTR, cast(ULONG_PTR, cast(WORD, (32512)))) )
 .hbrBackground = GetSysColorBrush( COLOR_BTNFACE )
 .lpszMenuName = NULL
 .lpszClassName = strptr( sAppName )
 end with

 if( RegisterClass( @tcls ) = FALSE ) then
 MessageBox( null, "Failed to register wcls!", sAppName, MB_ICONINFORMATION )
 exit sub
 end if


 var hMenu = CreateMainMenu()
 var hAcceleratos = CreateMainAccelerators()

 hWnd = CreateWindowEx(0,sAppName,sAppName, WS_TILEDWINDOW or WS_CLIPCHILDREN, 200,200,g_WndWid,g_WndHei,null,hMenu,g_AppInstance,0)


 ShowWindow( hWnd , SW_SHOW )
 UpdateWindow( hWnd )

 while( GetMessage( @tMsg, NULL, 0, 0 ) <> FALSE )
 if TranslateAccelerator( hWnd , hAcceleratos , @tMsg ) then continue while
 if IsDialogMessage( hWnd , @tMsg ) then continue while
 TranslateMessage( @tMsg )
 DispatchMessage( @tMsg )
 ProcessMessage( tMsg )
 wend

end sub

sAppName = "LegoScript"
InitCommonControls()
if LoadLibrary("Riched32.dll")=0 then
 MessageBox(null,"Failed To Load richedit component",null,MB_ICONERROR)
 end
end if

function BeforeExit( dwCtrlType as DWORD ) as WINBOOL
 GetClipboard() : system() : return 0
end function
SetConsoleCtrlHandler( @BeforeExit , TRUE )

g_AppInstance = GetModuleHandle(null)
WinMain()
g_DoQuit = 1


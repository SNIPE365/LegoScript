in LegoScript, the node part will in most cases get positioned at  the LDRAW co-ordinates: 0,0,0
The node part is the part that is connected to other parts, but has nothing connected to it as an expression
for example:

3024 P1 c1 = 3024 P2 s1;

Here, P2 is the node part because expressions are parsed and typically read by humans from left to right.

Take this second example:

3024 P1 s1 = 3024 P2 c1;

the node part here would be P2 still, however take this example:

3024 P2 c1 = 3024 P1 s1;

Here P1 is the node part, and P1 is also the nodal part if we do: 3024 P2 s1 = 3024 P1 c1;

we can also use more than one = in an expression, expressions must end in a semicolon (;):

3024 P1 c1 = 3024 P2 s1 = 3024 P3 c1;

here P3 is the node part.

Now, if we are using forward declaration then things will look different:

3024 P1;
3024 P2;
3024 P3;

P1 c1 = P2 s1 = P3 c1;

but, P3 is still the node part, however if we did:

3024 P1;
3024 P2;
3024 P3;

P1 c1 = P2 s1 = P3 c1;

3024 P4;

3024 P4 c1 = P3 s1;

Now P4 is actually the node part even though it is on the left hand side of the '=' operator, this is valid LegoScript but it can be confusing,
You could rearrange it like:

3024 P1;
3024 P2;
3024 P3;

P1 c1 = P2 s1 = P3 c1;

3024 P4;

P3 s1 = P4 s1;

You can also do #pragma NumericCall 1;

This, (Numeric calling convention) makes it so the calling convention is so smaller ID's must be before larger ID's , and therefore 3024 P4 c1 = P3 s1; would return an error. This only applies to part instance ID's and not primative ID's.

You may also explicitally turn on std-call (standard calling convention) call by doing #pragma NumericCall 0; However standard calling convention is the default convention and therefore you can just start a blank file, and it will be enforced by default.